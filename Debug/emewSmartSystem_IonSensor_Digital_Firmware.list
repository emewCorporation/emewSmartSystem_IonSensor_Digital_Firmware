
emewSmartSystem_IonSensor_Digital_Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d4fc  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000010a8  0800d690  0800d690  0000e690  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e738  0800e738  00010224  2**0
                  CONTENTS
  4 .ARM          00000008  0800e738  0800e738  0000f738  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e740  0800e740  00010224  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e740  0800e740  0000f740  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e744  0800e744  0000f744  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000224  20000000  0800e748  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000534  20000224  0800e96c  00010224  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000758  0800e96c  00010758  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010224  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ca31  00000000  00000000  00010254  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003d79  00000000  00000000  0002cc85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017c0  00000000  00000000  00030a00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000128c  00000000  00000000  000321c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002225b  00000000  00000000  0003344c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00023272  00000000  00000000  000556a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000be614  00000000  00000000  00078919  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00136f2d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000077b4  00000000  00000000  00136f70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007f  00000000  00000000  0013e724  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000224 	.word	0x20000224
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d674 	.word	0x0800d674

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000228 	.word	0x20000228
 80001cc:	0800d674 	.word	0x0800d674

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_d2lz>:
 8000c88:	b538      	push	{r3, r4, r5, lr}
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	4604      	mov	r4, r0
 8000c90:	460d      	mov	r5, r1
 8000c92:	f7ff ff23 	bl	8000adc <__aeabi_dcmplt>
 8000c96:	b928      	cbnz	r0, 8000ca4 <__aeabi_d2lz+0x1c>
 8000c98:	4620      	mov	r0, r4
 8000c9a:	4629      	mov	r1, r5
 8000c9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ca0:	f000 b80a 	b.w	8000cb8 <__aeabi_d2ulz>
 8000ca4:	4620      	mov	r0, r4
 8000ca6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000caa:	f000 f805 	bl	8000cb8 <__aeabi_d2ulz>
 8000cae:	4240      	negs	r0, r0
 8000cb0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb4:	bd38      	pop	{r3, r4, r5, pc}
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_d2ulz>:
 8000cb8:	b5d0      	push	{r4, r6, r7, lr}
 8000cba:	4b0c      	ldr	r3, [pc, #48]	@ (8000cec <__aeabi_d2ulz+0x34>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	4606      	mov	r6, r0
 8000cc0:	460f      	mov	r7, r1
 8000cc2:	f7ff fc99 	bl	80005f8 <__aeabi_dmul>
 8000cc6:	f7ff ff6f 	bl	8000ba8 <__aeabi_d2uiz>
 8000cca:	4604      	mov	r4, r0
 8000ccc:	f7ff fc1a 	bl	8000504 <__aeabi_ui2d>
 8000cd0:	4b07      	ldr	r3, [pc, #28]	@ (8000cf0 <__aeabi_d2ulz+0x38>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	f7ff fc90 	bl	80005f8 <__aeabi_dmul>
 8000cd8:	4602      	mov	r2, r0
 8000cda:	460b      	mov	r3, r1
 8000cdc:	4630      	mov	r0, r6
 8000cde:	4639      	mov	r1, r7
 8000ce0:	f7ff fad2 	bl	8000288 <__aeabi_dsub>
 8000ce4:	f7ff ff60 	bl	8000ba8 <__aeabi_d2uiz>
 8000ce8:	4621      	mov	r1, r4
 8000cea:	bdd0      	pop	{r4, r6, r7, pc}
 8000cec:	3df00000 	.word	0x3df00000
 8000cf0:	41f00000 	.word	0x41f00000

08000cf4 <uint16_to_bytes>:

}


//Store uint16 value into a byte array in little endian form
void uint16_to_bytes(uint16_t InputValue, uint8_t *OutputByteArray){
 8000cf4:	b480      	push	{r7}
 8000cf6:	b083      	sub	sp, #12
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	6039      	str	r1, [r7, #0]
 8000cfe:	80fb      	strh	r3, [r7, #6]
	OutputByteArray[0] = (InputValue&0x00FF);
 8000d00:	88fb      	ldrh	r3, [r7, #6]
 8000d02:	b2da      	uxtb	r2, r3
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	701a      	strb	r2, [r3, #0]
	OutputByteArray[1] = (InputValue>>8)&0x00FF;
 8000d08:	88fb      	ldrh	r3, [r7, #6]
 8000d0a:	0a1b      	lsrs	r3, r3, #8
 8000d0c:	b29a      	uxth	r2, r3
 8000d0e:	683b      	ldr	r3, [r7, #0]
 8000d10:	3301      	adds	r3, #1
 8000d12:	b2d2      	uxtb	r2, r2
 8000d14:	701a      	strb	r2, [r3, #0]
}
 8000d16:	bf00      	nop
 8000d18:	370c      	adds	r7, #12
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr

08000d22 <bytes_to_uint16>:


//Store little endian byte array into uint16 value
uint16_t bytes_to_uint16(uint8_t *InputByteArray){
 8000d22:	b480      	push	{r7}
 8000d24:	b085      	sub	sp, #20
 8000d26:	af00      	add	r7, sp, #0
 8000d28:	6078      	str	r0, [r7, #4]

	//Parse the bytes into a "workable" value
	uint32_t Converted_Value = ((InputByteArray[1]<<8)&0xFF00) |
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	3301      	adds	r3, #1
 8000d2e:	781b      	ldrb	r3, [r3, #0]
 8000d30:	021b      	lsls	r3, r3, #8
 8000d32:	b29b      	uxth	r3, r3
								(InputByteArray[0]&0x000FF);
 8000d34:	687a      	ldr	r2, [r7, #4]
 8000d36:	7812      	ldrb	r2, [r2, #0]
	uint32_t Converted_Value = ((InputByteArray[1]<<8)&0xFF00) |
 8000d38:	4313      	orrs	r3, r2
 8000d3a:	60fb      	str	r3, [r7, #12]

	return Converted_Value;
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	b29b      	uxth	r3, r3

}
 8000d40:	4618      	mov	r0, r3
 8000d42:	3714      	adds	r7, #20
 8000d44:	46bd      	mov	sp, r7
 8000d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4a:	4770      	bx	lr

08000d4c <Read_Button1>:

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////// GPIO Pin Read Functions //////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GPIO_PinState Read_Button1(void) { return HAL_GPIO_ReadPin( GPIOA, GPIO_PIN_5 ); }
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	af00      	add	r7, sp, #0
 8000d50:	2120      	movs	r1, #32
 8000d52:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d56:	f004 fdd1 	bl	80058fc <HAL_GPIO_ReadPin>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	bd80      	pop	{r7, pc}

08000d60 <Read_Button2>:
GPIO_PinState Read_Button2(void) { return HAL_GPIO_ReadPin( GPIOA, GPIO_PIN_6 ); }
 8000d60:	b580      	push	{r7, lr}
 8000d62:	af00      	add	r7, sp, #0
 8000d64:	2140      	movs	r1, #64	@ 0x40
 8000d66:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d6a:	f004 fdc7 	bl	80058fc <HAL_GPIO_ReadPin>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	4618      	mov	r0, r3
 8000d72:	bd80      	pop	{r7, pc}

08000d74 <Read_Button3>:
GPIO_PinState Read_Button3(void) { return HAL_GPIO_ReadPin( GPIOA, GPIO_PIN_7 ); }
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0
 8000d78:	2180      	movs	r1, #128	@ 0x80
 8000d7a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d7e:	f004 fdbd 	bl	80058fc <HAL_GPIO_ReadPin>
 8000d82:	4603      	mov	r3, r0
 8000d84:	4618      	mov	r0, r3
 8000d86:	bd80      	pop	{r7, pc}

08000d88 <Read_USBC_SpareTS>:
GPIO_PinState Read_LED_Indication3(void){ return HAL_GPIO_ReadPin( GPIOB, GPIO_PIN_2 );  }
GPIO_PinState Read_LED_Indication4(void){ return HAL_GPIO_ReadPin( GPIOB, GPIO_PIN_10 ); }
GPIO_PinState Read_LED_Indication5(void){ return HAL_GPIO_ReadPin( GPIOB, GPIO_PIN_11 ); }
GPIO_PinState Read_USBC_CC1(void) 		{ return HAL_GPIO_ReadPin( GPIOA, GPIO_PIN_11 );  }
GPIO_PinState Read_USBC_CC2(void) 		{ return HAL_GPIO_ReadPin( GPIOA, GPIO_PIN_12 ); }
GPIO_PinState Read_USBC_SpareTS(void) 	{ return HAL_GPIO_ReadPin( GPIOA, GPIO_PIN_15 ); }
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	af00      	add	r7, sp, #0
 8000d8c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000d90:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d94:	f004 fdb2 	bl	80058fc <HAL_GPIO_ReadPin>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	bd80      	pop	{r7, pc}
	...

08000da0 <Read_LED_Metal>:
GPIO_PinState Read_LED_Metal(void)      {  return HAL_GPIO_ReadPin( GPIOC, GPIO_PIN_14 ); }
 8000da0:	b580      	push	{r7, lr}
 8000da2:	af00      	add	r7, sp, #0
 8000da4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000da8:	4802      	ldr	r0, [pc, #8]	@ (8000db4 <Read_LED_Metal+0x14>)
 8000daa:	f004 fda7 	bl	80058fc <HAL_GPIO_ReadPin>
 8000dae:	4603      	mov	r3, r0
 8000db0:	4618      	mov	r0, r3
 8000db2:	bd80      	pop	{r7, pc}
 8000db4:	48000800 	.word	0x48000800

08000db8 <Read_LED_Turbidity>:
GPIO_PinState Read_LED_Turbidity(void)  {  return HAL_GPIO_ReadPin( GPIOC, GPIO_PIN_15 ); }
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0
 8000dbc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000dc0:	4802      	ldr	r0, [pc, #8]	@ (8000dcc <Read_LED_Turbidity+0x14>)
 8000dc2:	f004 fd9b 	bl	80058fc <HAL_GPIO_ReadPin>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	4618      	mov	r0, r3
 8000dca:	bd80      	pop	{r7, pc}
 8000dcc:	48000800 	.word	0x48000800

08000dd0 <Set_LED_HeartBeat>:

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////// GPIO Pin Control Functions //////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void Set_LED_HeartBeat(GPIO_PinState PinState)  {  HAL_GPIO_WritePin( GPIOC, GPIO_PIN_13, PinState ); }
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b082      	sub	sp, #8
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	71fb      	strb	r3, [r7, #7]
 8000dda:	79fb      	ldrb	r3, [r7, #7]
 8000ddc:	461a      	mov	r2, r3
 8000dde:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000de2:	4803      	ldr	r0, [pc, #12]	@ (8000df0 <Set_LED_HeartBeat+0x20>)
 8000de4:	f004 fda2 	bl	800592c <HAL_GPIO_WritePin>
 8000de8:	bf00      	nop
 8000dea:	3708      	adds	r7, #8
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	48000800 	.word	0x48000800

08000df4 <Set_LED_Indication1>:
void Set_LED_Indication1(GPIO_PinState PinState){  HAL_GPIO_WritePin( GPIOB, GPIO_PIN_0,  PinState ); }
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b082      	sub	sp, #8
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	71fb      	strb	r3, [r7, #7]
 8000dfe:	79fb      	ldrb	r3, [r7, #7]
 8000e00:	461a      	mov	r2, r3
 8000e02:	2101      	movs	r1, #1
 8000e04:	4803      	ldr	r0, [pc, #12]	@ (8000e14 <Set_LED_Indication1+0x20>)
 8000e06:	f004 fd91 	bl	800592c <HAL_GPIO_WritePin>
 8000e0a:	bf00      	nop
 8000e0c:	3708      	adds	r7, #8
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	48000400 	.word	0x48000400

08000e18 <Set_LED_Indication2>:
void Set_LED_Indication2(GPIO_PinState PinState){  HAL_GPIO_WritePin( GPIOB, GPIO_PIN_1,  PinState ); }
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b082      	sub	sp, #8
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	4603      	mov	r3, r0
 8000e20:	71fb      	strb	r3, [r7, #7]
 8000e22:	79fb      	ldrb	r3, [r7, #7]
 8000e24:	461a      	mov	r2, r3
 8000e26:	2102      	movs	r1, #2
 8000e28:	4803      	ldr	r0, [pc, #12]	@ (8000e38 <Set_LED_Indication2+0x20>)
 8000e2a:	f004 fd7f 	bl	800592c <HAL_GPIO_WritePin>
 8000e2e:	bf00      	nop
 8000e30:	3708      	adds	r7, #8
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	48000400 	.word	0x48000400

08000e3c <Set_LED_Indication3>:
void Set_LED_Indication3(GPIO_PinState PinState){  HAL_GPIO_WritePin( GPIOB, GPIO_PIN_2,  PinState ); }
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b082      	sub	sp, #8
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	4603      	mov	r3, r0
 8000e44:	71fb      	strb	r3, [r7, #7]
 8000e46:	79fb      	ldrb	r3, [r7, #7]
 8000e48:	461a      	mov	r2, r3
 8000e4a:	2104      	movs	r1, #4
 8000e4c:	4803      	ldr	r0, [pc, #12]	@ (8000e5c <Set_LED_Indication3+0x20>)
 8000e4e:	f004 fd6d 	bl	800592c <HAL_GPIO_WritePin>
 8000e52:	bf00      	nop
 8000e54:	3708      	adds	r7, #8
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	48000400 	.word	0x48000400

08000e60 <Set_LED_Indication4>:
void Set_LED_Indication4(GPIO_PinState PinState){  HAL_GPIO_WritePin( GPIOB, GPIO_PIN_10, PinState ); }
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b082      	sub	sp, #8
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	4603      	mov	r3, r0
 8000e68:	71fb      	strb	r3, [r7, #7]
 8000e6a:	79fb      	ldrb	r3, [r7, #7]
 8000e6c:	461a      	mov	r2, r3
 8000e6e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000e72:	4803      	ldr	r0, [pc, #12]	@ (8000e80 <Set_LED_Indication4+0x20>)
 8000e74:	f004 fd5a 	bl	800592c <HAL_GPIO_WritePin>
 8000e78:	bf00      	nop
 8000e7a:	3708      	adds	r7, #8
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	48000400 	.word	0x48000400

08000e84 <Set_LED_Indication5>:
void Set_LED_Indication5(GPIO_PinState PinState){  HAL_GPIO_WritePin( GPIOB, GPIO_PIN_11, PinState ); }
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b082      	sub	sp, #8
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	71fb      	strb	r3, [r7, #7]
 8000e8e:	79fb      	ldrb	r3, [r7, #7]
 8000e90:	461a      	mov	r2, r3
 8000e92:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000e96:	4803      	ldr	r0, [pc, #12]	@ (8000ea4 <Set_LED_Indication5+0x20>)
 8000e98:	f004 fd48 	bl	800592c <HAL_GPIO_WritePin>
 8000e9c:	bf00      	nop
 8000e9e:	3708      	adds	r7, #8
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	48000400 	.word	0x48000400

08000ea8 <Set_Flash_CS>:
void Set_Flash_CS(GPIO_PinState PinState)		{  HAL_GPIO_WritePin( GPIOB, GPIO_PIN_12, PinState ); }
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	4603      	mov	r3, r0
 8000eb0:	71fb      	strb	r3, [r7, #7]
 8000eb2:	79fb      	ldrb	r3, [r7, #7]
 8000eb4:	461a      	mov	r2, r3
 8000eb6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000eba:	4803      	ldr	r0, [pc, #12]	@ (8000ec8 <Set_Flash_CS+0x20>)
 8000ebc:	f004 fd36 	bl	800592c <HAL_GPIO_WritePin>
 8000ec0:	bf00      	nop
 8000ec2:	3708      	adds	r7, #8
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	48000400 	.word	0x48000400

08000ecc <Set_Flash_WP>:
void Set_Flash_WP(GPIO_PinState PinState) 		{  HAL_GPIO_WritePin( GPIOA, GPIO_PIN_10, PinState ); }
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b082      	sub	sp, #8
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	71fb      	strb	r3, [r7, #7]
 8000ed6:	79fb      	ldrb	r3, [r7, #7]
 8000ed8:	461a      	mov	r2, r3
 8000eda:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000ede:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ee2:	f004 fd23 	bl	800592c <HAL_GPIO_WritePin>
 8000ee6:	bf00      	nop
 8000ee8:	3708      	adds	r7, #8
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}
	...

08000ef0 <Toggle_LED_HeartBeat>:

void Toggle_LED_HeartBeat(void)  {  HAL_GPIO_TogglePin( GPIOC, GPIO_PIN_13 ); }
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	af00      	add	r7, sp, #0
 8000ef4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000ef8:	4802      	ldr	r0, [pc, #8]	@ (8000f04 <Toggle_LED_HeartBeat+0x14>)
 8000efa:	f004 fd2f 	bl	800595c <HAL_GPIO_TogglePin>
 8000efe:	bf00      	nop
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	48000800 	.word	0x48000800

08000f08 <LED_Metal_Control>:

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////    LED Sensor Pin Control Functions /////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void LED_Metal_Control(GPIO_PinState PinState)		{  HAL_GPIO_WritePin( GPIOC, GPIO_PIN_14, PinState );  }
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b082      	sub	sp, #8
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	4603      	mov	r3, r0
 8000f10:	71fb      	strb	r3, [r7, #7]
 8000f12:	79fb      	ldrb	r3, [r7, #7]
 8000f14:	461a      	mov	r2, r3
 8000f16:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000f1a:	4803      	ldr	r0, [pc, #12]	@ (8000f28 <LED_Metal_Control+0x20>)
 8000f1c:	f004 fd06 	bl	800592c <HAL_GPIO_WritePin>
 8000f20:	bf00      	nop
 8000f22:	3708      	adds	r7, #8
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	48000800 	.word	0x48000800

08000f2c <LED_Turbidity_Control>:
void LED_Turbidity_Control(GPIO_PinState PinState) {  HAL_GPIO_WritePin( GPIOC, GPIO_PIN_15, PinState );  }
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b082      	sub	sp, #8
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	4603      	mov	r3, r0
 8000f34:	71fb      	strb	r3, [r7, #7]
 8000f36:	79fb      	ldrb	r3, [r7, #7]
 8000f38:	461a      	mov	r2, r3
 8000f3a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000f3e:	4803      	ldr	r0, [pc, #12]	@ (8000f4c <LED_Turbidity_Control+0x20>)
 8000f40:	f004 fcf4 	bl	800592c <HAL_GPIO_WritePin>
 8000f44:	bf00      	nop
 8000f46:	3708      	adds	r7, #8
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	48000800 	.word	0x48000800

08000f50 <Set_LED_Metal>:
///////////////////////////////// Sensor LED Activation Control Functions /////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


//Turn on Metal LED but ensure the Turbidity LED is disabled
void Set_LED_Metal(GPIO_PinState PinState){
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b082      	sub	sp, #8
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	4603      	mov	r3, r0
 8000f58:	71fb      	strb	r3, [r7, #7]

	//Turn off the metal LED
	if(PinState==GPIO_PIN_RESET){ LED_Metal_Control(GPIO_PIN_RESET); }
 8000f5a:	79fb      	ldrb	r3, [r7, #7]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d102      	bne.n	8000f66 <Set_LED_Metal+0x16>
 8000f60:	2000      	movs	r0, #0
 8000f62:	f7ff ffd1 	bl	8000f08 <LED_Metal_Control>

	//Turn on the metal LED
	if(PinState==GPIO_PIN_SET){
 8000f66:	79fb      	ldrb	r3, [r7, #7]
 8000f68:	2b01      	cmp	r3, #1
 8000f6a:	d10a      	bne.n	8000f82 <Set_LED_Metal+0x32>
		if( Read_LED_Turbidity() == GPIO_PIN_SET ){ LED_Turbidity_Control(GPIO_PIN_RESET); } 	//Check Turbidity LED state -> If on, turn off
 8000f6c:	f7ff ff24 	bl	8000db8 <Read_LED_Turbidity>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b01      	cmp	r3, #1
 8000f74:	d102      	bne.n	8000f7c <Set_LED_Metal+0x2c>
 8000f76:	2000      	movs	r0, #0
 8000f78:	f7ff ffd8 	bl	8000f2c <LED_Turbidity_Control>
		LED_Metal_Control(GPIO_PIN_SET);
 8000f7c:	2001      	movs	r0, #1
 8000f7e:	f7ff ffc3 	bl	8000f08 <LED_Metal_Control>
	}

}
 8000f82:	bf00      	nop
 8000f84:	3708      	adds	r7, #8
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}

08000f8a <Set_LED_Turbidity>:


//Turn on Turbidity LED but ensure the Metal LED is disabled
void Set_LED_Turbidity(GPIO_PinState PinState){
 8000f8a:	b580      	push	{r7, lr}
 8000f8c:	b082      	sub	sp, #8
 8000f8e:	af00      	add	r7, sp, #0
 8000f90:	4603      	mov	r3, r0
 8000f92:	71fb      	strb	r3, [r7, #7]

	//Turn off the turbidity LED
	if(PinState==GPIO_PIN_RESET){ LED_Turbidity_Control(GPIO_PIN_RESET); }
 8000f94:	79fb      	ldrb	r3, [r7, #7]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d102      	bne.n	8000fa0 <Set_LED_Turbidity+0x16>
 8000f9a:	2000      	movs	r0, #0
 8000f9c:	f7ff ffc6 	bl	8000f2c <LED_Turbidity_Control>

	//Turn on the turbidity LED
	if(PinState==GPIO_PIN_SET){
 8000fa0:	79fb      	ldrb	r3, [r7, #7]
 8000fa2:	2b01      	cmp	r3, #1
 8000fa4:	d10a      	bne.n	8000fbc <Set_LED_Turbidity+0x32>
		if( Read_LED_Metal() == GPIO_PIN_SET ){ LED_Metal_Control(GPIO_PIN_RESET); } 	//Check Metal LED state -> If on, turn off
 8000fa6:	f7ff fefb 	bl	8000da0 <Read_LED_Metal>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b01      	cmp	r3, #1
 8000fae:	d102      	bne.n	8000fb6 <Set_LED_Turbidity+0x2c>
 8000fb0:	2000      	movs	r0, #0
 8000fb2:	f7ff ffa9 	bl	8000f08 <LED_Metal_Control>
		LED_Turbidity_Control(GPIO_PIN_SET);
 8000fb6:	2001      	movs	r0, #1
 8000fb8:	f7ff ffb8 	bl	8000f2c <LED_Turbidity_Control>
	}

}
 8000fbc:	bf00      	nop
 8000fbe:	3708      	adds	r7, #8
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	0000      	movs	r0, r0
	...

08000fc8 <STM32_ADC_ReadVoltage>:

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////  uC ADC Sample  //////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

stm_adc_status_t STM32_ADC_ReadVoltage(float* ReturnValue, uint8_t Channel){
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b086      	sub	sp, #24
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
 8000fd0:	460b      	mov	r3, r1
 8000fd2:	70fb      	strb	r3, [r7, #3]

	HAL_StatusTypeDef ret_adc;

	//Change ADC to sample on the CC1 pin (Channel 2)
	if(Channel==CC1_CH){
 8000fd4:	78fb      	ldrb	r3, [r7, #3]
 8000fd6:	2b01      	cmp	r3, #1
 8000fd8:	d11d      	bne.n	8001016 <STM32_ADC_ReadVoltage+0x4e>
		  adcConfig1.Rank = ADC_REGULAR_RANK_14;
 8000fda:	4b51      	ldr	r3, [pc, #324]	@ (8001120 <STM32_ADC_ReadVoltage+0x158>)
 8000fdc:	220e      	movs	r2, #14
 8000fde:	605a      	str	r2, [r3, #4]
		  adcConfig2.Rank = ADC_REGULAR_RANK_1;
 8000fe0:	4b50      	ldr	r3, [pc, #320]	@ (8001124 <STM32_ADC_ReadVoltage+0x15c>)
 8000fe2:	2201      	movs	r2, #1
 8000fe4:	605a      	str	r2, [r3, #4]
		  ret_adc=HAL_ADC_ConfigChannel(&UC_ADC, &adcConfig1 );		//Modify channel 1 to be lowest rank
 8000fe6:	494e      	ldr	r1, [pc, #312]	@ (8001120 <STM32_ADC_ReadVoltage+0x158>)
 8000fe8:	484f      	ldr	r0, [pc, #316]	@ (8001128 <STM32_ADC_ReadVoltage+0x160>)
 8000fea:	f003 f8ad 	bl	8004148 <HAL_ADC_ConfigChannel>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	75fb      	strb	r3, [r7, #23]
		  if(ret_adc!=HAL_OK){ return ADC_STM_ERROR_HAL_CONFIG;}
 8000ff2:	7dfb      	ldrb	r3, [r7, #23]
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d002      	beq.n	8000ffe <STM32_ADC_ReadVoltage+0x36>
 8000ff8:	f04f 33ff 	mov.w	r3, #4294967295
 8000ffc:	e086      	b.n	800110c <STM32_ADC_ReadVoltage+0x144>
		  ret_adc=HAL_ADC_ConfigChannel(&UC_ADC, &adcConfig2 );		//Modify channel 2 to be highest rank
 8000ffe:	4949      	ldr	r1, [pc, #292]	@ (8001124 <STM32_ADC_ReadVoltage+0x15c>)
 8001000:	4849      	ldr	r0, [pc, #292]	@ (8001128 <STM32_ADC_ReadVoltage+0x160>)
 8001002:	f003 f8a1 	bl	8004148 <HAL_ADC_ConfigChannel>
 8001006:	4603      	mov	r3, r0
 8001008:	75fb      	strb	r3, [r7, #23]
		  if(ret_adc!=HAL_OK){ return ADC_STM_ERROR_HAL_CONFIG;}
 800100a:	7dfb      	ldrb	r3, [r7, #23]
 800100c:	2b00      	cmp	r3, #0
 800100e:	d026      	beq.n	800105e <STM32_ADC_ReadVoltage+0x96>
 8001010:	f04f 33ff 	mov.w	r3, #4294967295
 8001014:	e07a      	b.n	800110c <STM32_ADC_ReadVoltage+0x144>
	}
	//Change ADC to sample on the CC2 pin (Channel 1)
	else if(Channel==CC2_CH){
 8001016:	78fb      	ldrb	r3, [r7, #3]
 8001018:	2b02      	cmp	r3, #2
 800101a:	d11d      	bne.n	8001058 <STM32_ADC_ReadVoltage+0x90>
		  adcConfig1.Rank = ADC_REGULAR_RANK_1;
 800101c:	4b40      	ldr	r3, [pc, #256]	@ (8001120 <STM32_ADC_ReadVoltage+0x158>)
 800101e:	2201      	movs	r2, #1
 8001020:	605a      	str	r2, [r3, #4]
		  adcConfig2.Rank = ADC_REGULAR_RANK_14;
 8001022:	4b40      	ldr	r3, [pc, #256]	@ (8001124 <STM32_ADC_ReadVoltage+0x15c>)
 8001024:	220e      	movs	r2, #14
 8001026:	605a      	str	r2, [r3, #4]
		  ret_adc=HAL_ADC_ConfigChannel(&UC_ADC, &adcConfig2 );		//Modify channel 2 to be the lowest rank
 8001028:	493e      	ldr	r1, [pc, #248]	@ (8001124 <STM32_ADC_ReadVoltage+0x15c>)
 800102a:	483f      	ldr	r0, [pc, #252]	@ (8001128 <STM32_ADC_ReadVoltage+0x160>)
 800102c:	f003 f88c 	bl	8004148 <HAL_ADC_ConfigChannel>
 8001030:	4603      	mov	r3, r0
 8001032:	75fb      	strb	r3, [r7, #23]
		  if(ret_adc!=HAL_OK){ return ADC_STM_ERROR_HAL_CONFIG;}
 8001034:	7dfb      	ldrb	r3, [r7, #23]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d002      	beq.n	8001040 <STM32_ADC_ReadVoltage+0x78>
 800103a:	f04f 33ff 	mov.w	r3, #4294967295
 800103e:	e065      	b.n	800110c <STM32_ADC_ReadVoltage+0x144>
		  ret_adc=HAL_ADC_ConfigChannel(&UC_ADC, &adcConfig1 );		//Modify channel 1 to be the highest rank
 8001040:	4937      	ldr	r1, [pc, #220]	@ (8001120 <STM32_ADC_ReadVoltage+0x158>)
 8001042:	4839      	ldr	r0, [pc, #228]	@ (8001128 <STM32_ADC_ReadVoltage+0x160>)
 8001044:	f003 f880 	bl	8004148 <HAL_ADC_ConfigChannel>
 8001048:	4603      	mov	r3, r0
 800104a:	75fb      	strb	r3, [r7, #23]
		  if(ret_adc!=HAL_OK){ return ADC_STM_ERROR_HAL_CONFIG;}
 800104c:	7dfb      	ldrb	r3, [r7, #23]
 800104e:	2b00      	cmp	r3, #0
 8001050:	d005      	beq.n	800105e <STM32_ADC_ReadVoltage+0x96>
 8001052:	f04f 33ff 	mov.w	r3, #4294967295
 8001056:	e059      	b.n	800110c <STM32_ADC_ReadVoltage+0x144>
	}else{
		return ADC_STM_ERROR_PARAMETER;
 8001058:	f06f 0305 	mvn.w	r3, #5
 800105c:	e056      	b.n	800110c <STM32_ADC_ReadVoltage+0x144>
	}

	//Take ADC sample
	ret_adc=HAL_ADCEx_Calibration_Start(&UC_ADC, ADC_SINGLE_ENDED);		//Calibrate ADC
 800105e:	2100      	movs	r1, #0
 8001060:	4831      	ldr	r0, [pc, #196]	@ (8001128 <STM32_ADC_ReadVoltage+0x160>)
 8001062:	f002 fffe 	bl	8004062 <HAL_ADCEx_Calibration_Start>
 8001066:	4603      	mov	r3, r0
 8001068:	75fb      	strb	r3, [r7, #23]
	if(ret_adc!=HAL_OK){ return ADC_STM_ERROR_HAL_CALIBRATE;}
 800106a:	7dfb      	ldrb	r3, [r7, #23]
 800106c:	2b00      	cmp	r3, #0
 800106e:	d002      	beq.n	8001076 <STM32_ADC_ReadVoltage+0xae>
 8001070:	f06f 0304 	mvn.w	r3, #4
 8001074:	e04a      	b.n	800110c <STM32_ADC_ReadVoltage+0x144>
	ret_adc=HAL_ADC_Start(&UC_ADC);							       		//Start ADC
 8001076:	482c      	ldr	r0, [pc, #176]	@ (8001128 <STM32_ADC_ReadVoltage+0x160>)
 8001078:	f002 fe2c 	bl	8003cd4 <HAL_ADC_Start>
 800107c:	4603      	mov	r3, r0
 800107e:	75fb      	strb	r3, [r7, #23]
	if(ret_adc!=HAL_OK){ return ADC_STM_ERROR_HAL_START; }
 8001080:	7dfb      	ldrb	r3, [r7, #23]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d002      	beq.n	800108c <STM32_ADC_ReadVoltage+0xc4>
 8001086:	f06f 0301 	mvn.w	r3, #1
 800108a:	e03f      	b.n	800110c <STM32_ADC_ReadVoltage+0x144>
	ret_adc=HAL_ADC_PollForConversion(&UC_ADC, HAL_MAX_DELAY);			//Poll for ADC value
 800108c:	f04f 31ff 	mov.w	r1, #4294967295
 8001090:	4825      	ldr	r0, [pc, #148]	@ (8001128 <STM32_ADC_ReadVoltage+0x160>)
 8001092:	f002 ff0b 	bl	8003eac <HAL_ADC_PollForConversion>
 8001096:	4603      	mov	r3, r0
 8001098:	75fb      	strb	r3, [r7, #23]
	if(ret_adc!=HAL_OK){
 800109a:	7dfb      	ldrb	r3, [r7, #23]
 800109c:	2b00      	cmp	r3, #0
 800109e:	d005      	beq.n	80010ac <STM32_ADC_ReadVoltage+0xe4>
		HAL_ADC_Stop(&UC_ADC);
 80010a0:	4821      	ldr	r0, [pc, #132]	@ (8001128 <STM32_ADC_ReadVoltage+0x160>)
 80010a2:	f002 fecd 	bl	8003e40 <HAL_ADC_Stop>
		return ADC_STM_ERROR_HAL_POLL;
 80010a6:	f06f 0303 	mvn.w	r3, #3
 80010aa:	e02f      	b.n	800110c <STM32_ADC_ReadVoltage+0x144>
	}
	ret_adc=HAL_ADC_Stop(&UC_ADC);							       		//Stop ADC
 80010ac:	481e      	ldr	r0, [pc, #120]	@ (8001128 <STM32_ADC_ReadVoltage+0x160>)
 80010ae:	f002 fec7 	bl	8003e40 <HAL_ADC_Stop>
 80010b2:	4603      	mov	r3, r0
 80010b4:	75fb      	strb	r3, [r7, #23]
	if(ret_adc!=HAL_OK){ return ADC_STM_ERROR_HAL_STOP; }
 80010b6:	7dfb      	ldrb	r3, [r7, #23]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d002      	beq.n	80010c2 <STM32_ADC_ReadVoltage+0xfa>
 80010bc:	f06f 0302 	mvn.w	r3, #2
 80010c0:	e024      	b.n	800110c <STM32_ADC_ReadVoltage+0x144>

	//Process sample data into a float
	uint32_t Raw_ADCValue = HAL_ADC_GetValue(&UC_ADC) & 0x0FFF;  		//Read ADC value
 80010c2:	4819      	ldr	r0, [pc, #100]	@ (8001128 <STM32_ADC_ReadVoltage+0x160>)
 80010c4:	f002 ffc0 	bl	8004048 <HAL_ADC_GetValue>
 80010c8:	4603      	mov	r3, r0
 80010ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80010ce:	613b      	str	r3, [r7, #16]
	float ADC_Value = (float)Raw_ADCValue/4095 * 3.30;					//Convert ADC value to float
 80010d0:	693b      	ldr	r3, [r7, #16]
 80010d2:	ee07 3a90 	vmov	s15, r3
 80010d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80010da:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 800112c <STM32_ADC_ReadVoltage+0x164>
 80010de:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80010e2:	ee16 0a90 	vmov	r0, s13
 80010e6:	f7ff fa2f 	bl	8000548 <__aeabi_f2d>
 80010ea:	a30b      	add	r3, pc, #44	@ (adr r3, 8001118 <STM32_ADC_ReadVoltage+0x150>)
 80010ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010f0:	f7ff fa82 	bl	80005f8 <__aeabi_dmul>
 80010f4:	4602      	mov	r2, r0
 80010f6:	460b      	mov	r3, r1
 80010f8:	4610      	mov	r0, r2
 80010fa:	4619      	mov	r1, r3
 80010fc:	f7ff fd74 	bl	8000be8 <__aeabi_d2f>
 8001100:	4603      	mov	r3, r0
 8001102:	60fb      	str	r3, [r7, #12]
	*ReturnValue = ADC_Value;											//Save calculated value to return pointer
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	68fa      	ldr	r2, [r7, #12]
 8001108:	601a      	str	r2, [r3, #0]
	//memset(PrintBuffer, '\0', COMM_SIZE); snprintf(PrintBuffer, COMM_SIZE-1, "\n\rCC%u Value -> %0.3f", Channel, ADC_Value1 );
	//DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE );

	return ADC_STM_STATUS_OK;
 800110a:	2300      	movs	r3, #0

}
 800110c:	4618      	mov	r0, r3
 800110e:	3718      	adds	r7, #24
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}
 8001114:	f3af 8000 	nop.w
 8001118:	66666666 	.word	0x66666666
 800111c:	400a6666 	.word	0x400a6666
 8001120:	20000000 	.word	0x20000000
 8001124:	20000018 	.word	0x20000018
 8001128:	20000240 	.word	0x20000240
 800112c:	457ff000 	.word	0x457ff000

08001130 <DebugPrint>:
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////  CONSOLE PRINT  //////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//Print string data to console over UART
void DebugPrint(uint8_t PrintEnable, char* StringBuffer, uint16_t Size){
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
 8001136:	4603      	mov	r3, r0
 8001138:	6039      	str	r1, [r7, #0]
 800113a:	71fb      	strb	r3, [r7, #7]
 800113c:	4613      	mov	r3, r2
 800113e:	80bb      	strh	r3, [r7, #4]

	//If print condition is enabled, send data over UART
	if(PrintEnable == true){
 8001140:	79fb      	ldrb	r3, [r7, #7]
 8001142:	2b01      	cmp	r3, #1
 8001144:	d105      	bne.n	8001152 <DebugPrint+0x22>
		HAL_UART_Transmit(&UART_COMM, (uint8_t*)StringBuffer, Size, 100 );
 8001146:	88ba      	ldrh	r2, [r7, #4]
 8001148:	2364      	movs	r3, #100	@ 0x64
 800114a:	6839      	ldr	r1, [r7, #0]
 800114c:	4803      	ldr	r0, [pc, #12]	@ (800115c <DebugPrint+0x2c>)
 800114e:	f007 fa85 	bl	800865c <HAL_UART_Transmit>
	}

}
 8001152:	bf00      	nop
 8001154:	3708      	adds	r7, #8
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	20000454 	.word	0x20000454

08001160 <PrimaryStateMachine>:
//////////////////////////////////////  System State Machines /////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


//Setup for transmitting CANbus
void PrimaryStateMachine(void){
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0

	switch(PrimaryState){
 8001164:	4b1c      	ldr	r3, [pc, #112]	@ (80011d8 <PrimaryStateMachine+0x78>)
 8001166:	781b      	ldrb	r3, [r3, #0]
 8001168:	2b03      	cmp	r3, #3
 800116a:	d81d      	bhi.n	80011a8 <PrimaryStateMachine+0x48>
 800116c:	a201      	add	r2, pc, #4	@ (adr r2, 8001174 <PrimaryStateMachine+0x14>)
 800116e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001172:	bf00      	nop
 8001174:	080011d3 	.word	0x080011d3
 8001178:	08001185 	.word	0x08001185
 800117c:	08001191 	.word	0x08001191
 8001180:	0800119d 	.word	0x0800119d
		case 0x00:
			break;

		//Pairing Routine
		case 0x01:
			ControllerPairRoutine();
 8001184:	f001 fdf8 	bl	8002d78 <ControllerPairRoutine>
			PrimaryState=0x00;
 8001188:	4b13      	ldr	r3, [pc, #76]	@ (80011d8 <PrimaryStateMachine+0x78>)
 800118a:	2200      	movs	r2, #0
 800118c:	701a      	strb	r2, [r3, #0]
			break;
 800118e:	e021      	b.n	80011d4 <PrimaryStateMachine+0x74>

		//Connection Ping
		case 0x02:
			ControllerPingRoutine();
 8001190:	f001 fefe 	bl	8002f90 <ControllerPingRoutine>
			PrimaryState=0x00;
 8001194:	4b10      	ldr	r3, [pc, #64]	@ (80011d8 <PrimaryStateMachine+0x78>)
 8001196:	2200      	movs	r2, #0
 8001198:	701a      	strb	r2, [r3, #0]
			break;
 800119a:	e01b      	b.n	80011d4 <PrimaryStateMachine+0x74>

		//Sensor read
		case 0x03:
			SensorMeasurementRoutine();
 800119c:	f001 ff6c 	bl	8003078 <SensorMeasurementRoutine>
			PrimaryState=0x00;
 80011a0:	4b0d      	ldr	r3, [pc, #52]	@ (80011d8 <PrimaryStateMachine+0x78>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	701a      	strb	r2, [r3, #0]
			break;
 80011a6:	e015      	b.n	80011d4 <PrimaryStateMachine+0x74>

		//Fail case for unimplemented states
		default:
			memset(PrintBuffer, '\0', COMM_SIZE);  snprintf(PrintBuffer, COMM_SIZE-1, "\n\n\rInvalid Instruction Received - Transitioning to Standby State"  );
 80011a8:	2280      	movs	r2, #128	@ 0x80
 80011aa:	2100      	movs	r1, #0
 80011ac:	480b      	ldr	r0, [pc, #44]	@ (80011dc <PrimaryStateMachine+0x7c>)
 80011ae:	f008 fe8c 	bl	8009eca <memset>
 80011b2:	4a0b      	ldr	r2, [pc, #44]	@ (80011e0 <PrimaryStateMachine+0x80>)
 80011b4:	217f      	movs	r1, #127	@ 0x7f
 80011b6:	4809      	ldr	r0, [pc, #36]	@ (80011dc <PrimaryStateMachine+0x7c>)
 80011b8:	f008 fdf0 	bl	8009d9c <sniprintf>
			DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE);
 80011bc:	4b09      	ldr	r3, [pc, #36]	@ (80011e4 <PrimaryStateMachine+0x84>)
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	2280      	movs	r2, #128	@ 0x80
 80011c2:	4906      	ldr	r1, [pc, #24]	@ (80011dc <PrimaryStateMachine+0x7c>)
 80011c4:	4618      	mov	r0, r3
 80011c6:	f7ff ffb3 	bl	8001130 <DebugPrint>
			PrimaryState=0x00;
 80011ca:	4b03      	ldr	r3, [pc, #12]	@ (80011d8 <PrimaryStateMachine+0x78>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	701a      	strb	r2, [r3, #0]

	}  //End switch statement


}
 80011d0:	e000      	b.n	80011d4 <PrimaryStateMachine+0x74>
			break;
 80011d2:	bf00      	nop
}
 80011d4:	bf00      	nop
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	200005ae 	.word	0x200005ae
 80011dc:	200004ec 	.word	0x200004ec
 80011e0:	0800d690 	.word	0x0800d690
 80011e4:	2000004b 	.word	0x2000004b

080011e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b088      	sub	sp, #32
 80011ec:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011ee:	f002 fb55 	bl	800389c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011f2:	f000 fa75 	bl	80016e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011f6:	f000 fca7 	bl	8001b48 <MX_GPIO_Init>
  MX_CAN_Init();
 80011fa:	f000 fb3b 	bl	8001874 <MX_CAN_Init>
  MX_I2C1_Init();
 80011fe:	f000 fb6f 	bl	80018e0 <MX_I2C1_Init>
  MX_SPI2_Init();
 8001202:	f000 fbad 	bl	8001960 <MX_SPI2_Init>
  MX_TIM6_Init();
 8001206:	f000 fbe9 	bl	80019dc <MX_TIM6_Init>
  MX_TIM16_Init();
 800120a:	f000 fc1f 	bl	8001a4c <MX_TIM16_Init>
  MX_TIM17_Init();
 800120e:	f000 fc43 	bl	8001a98 <MX_TIM17_Init>
  MX_USART2_UART_Init();
 8001212:	f000 fc69 	bl	8001ae8 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8001216:	f000 fabd 	bl	8001794 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  //Prevents user code execution on firmware update
  HAL_Delay(1000);
 800121a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800121e:	f002 fba3 	bl	8003968 <HAL_Delay>

  //Print the opening splash message
  StartupPrint_Routine();
 8001222:	f001 fce3 	bl	8002bec <StartupPrint_Routine>

  memset(PrintBuffer, '\0', COMM_SIZE); snprintf(PrintBuffer, COMM_SIZE-1, "\n\n\rFirmware Version: %s", FirmwareVersion );
 8001226:	2280      	movs	r2, #128	@ 0x80
 8001228:	2100      	movs	r1, #0
 800122a:	488f      	ldr	r0, [pc, #572]	@ (8001468 <main+0x280>)
 800122c:	f008 fe4d 	bl	8009eca <memset>
 8001230:	4b8e      	ldr	r3, [pc, #568]	@ (800146c <main+0x284>)
 8001232:	4a8f      	ldr	r2, [pc, #572]	@ (8001470 <main+0x288>)
 8001234:	217f      	movs	r1, #127	@ 0x7f
 8001236:	488c      	ldr	r0, [pc, #560]	@ (8001468 <main+0x280>)
 8001238:	f008 fdb0 	bl	8009d9c <sniprintf>
  DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE);
 800123c:	4b8d      	ldr	r3, [pc, #564]	@ (8001474 <main+0x28c>)
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	2280      	movs	r2, #128	@ 0x80
 8001242:	4989      	ldr	r1, [pc, #548]	@ (8001468 <main+0x280>)
 8001244:	4618      	mov	r0, r3
 8001246:	f7ff ff73 	bl	8001130 <DebugPrint>
  memset(PrintBuffer, '\0', COMM_SIZE); snprintf(PrintBuffer, COMM_SIZE-1, "\n\rDevice Mode: %s", DeviceMode );
 800124a:	2280      	movs	r2, #128	@ 0x80
 800124c:	2100      	movs	r1, #0
 800124e:	4886      	ldr	r0, [pc, #536]	@ (8001468 <main+0x280>)
 8001250:	f008 fe3b 	bl	8009eca <memset>
 8001254:	4b88      	ldr	r3, [pc, #544]	@ (8001478 <main+0x290>)
 8001256:	4a89      	ldr	r2, [pc, #548]	@ (800147c <main+0x294>)
 8001258:	217f      	movs	r1, #127	@ 0x7f
 800125a:	4883      	ldr	r0, [pc, #524]	@ (8001468 <main+0x280>)
 800125c:	f008 fd9e 	bl	8009d9c <sniprintf>
  DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE);
 8001260:	4b84      	ldr	r3, [pc, #528]	@ (8001474 <main+0x28c>)
 8001262:	781b      	ldrb	r3, [r3, #0]
 8001264:	2280      	movs	r2, #128	@ 0x80
 8001266:	4980      	ldr	r1, [pc, #512]	@ (8001468 <main+0x280>)
 8001268:	4618      	mov	r0, r3
 800126a:	f7ff ff61 	bl	8001130 <DebugPrint>
  if(0){ ProgramEEPROM_All(); 		 }
  if(0){ ProgramEEPROM_CAN(); 		 }
  if(0){ ProgramEEPROM_SensorType(); }

  //Perform Ion Sensor activation routine
  if( SystemActivation() == true ){
 800126e:	f001 ff0b 	bl	8003088 <SystemActivation>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d011      	beq.n	800129c <main+0xb4>
	  memset(PrintBuffer, '\0', COMM_SIZE); snprintf(PrintBuffer, COMM_SIZE-1, "\n\rAll subsystems successfully activated"  );
 8001278:	2280      	movs	r2, #128	@ 0x80
 800127a:	2100      	movs	r1, #0
 800127c:	487a      	ldr	r0, [pc, #488]	@ (8001468 <main+0x280>)
 800127e:	f008 fe24 	bl	8009eca <memset>
 8001282:	4a7f      	ldr	r2, [pc, #508]	@ (8001480 <main+0x298>)
 8001284:	217f      	movs	r1, #127	@ 0x7f
 8001286:	4878      	ldr	r0, [pc, #480]	@ (8001468 <main+0x280>)
 8001288:	f008 fd88 	bl	8009d9c <sniprintf>
	  DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE);
 800128c:	4b79      	ldr	r3, [pc, #484]	@ (8001474 <main+0x28c>)
 800128e:	781b      	ldrb	r3, [r3, #0]
 8001290:	2280      	movs	r2, #128	@ 0x80
 8001292:	4975      	ldr	r1, [pc, #468]	@ (8001468 <main+0x280>)
 8001294:	4618      	mov	r0, r3
 8001296:	f7ff ff4b 	bl	8001130 <DebugPrint>
 800129a:	e013      	b.n	80012c4 <main+0xdc>
  }else{
	  MasterActivation = false;
 800129c:	4b79      	ldr	r3, [pc, #484]	@ (8001484 <main+0x29c>)
 800129e:	2200      	movs	r2, #0
 80012a0:	701a      	strb	r2, [r3, #0]
	  memset(PrintBuffer, '\0', COMM_SIZE); snprintf(PrintBuffer, COMM_SIZE-1, "\n\rCRITICAL ERROR - Could not activate all subsystems"  );
 80012a2:	2280      	movs	r2, #128	@ 0x80
 80012a4:	2100      	movs	r1, #0
 80012a6:	4870      	ldr	r0, [pc, #448]	@ (8001468 <main+0x280>)
 80012a8:	f008 fe0f 	bl	8009eca <memset>
 80012ac:	4a76      	ldr	r2, [pc, #472]	@ (8001488 <main+0x2a0>)
 80012ae:	217f      	movs	r1, #127	@ 0x7f
 80012b0:	486d      	ldr	r0, [pc, #436]	@ (8001468 <main+0x280>)
 80012b2:	f008 fd73 	bl	8009d9c <sniprintf>
	  DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE);
 80012b6:	4b6f      	ldr	r3, [pc, #444]	@ (8001474 <main+0x28c>)
 80012b8:	781b      	ldrb	r3, [r3, #0]
 80012ba:	2280      	movs	r2, #128	@ 0x80
 80012bc:	496a      	ldr	r1, [pc, #424]	@ (8001468 <main+0x280>)
 80012be:	4618      	mov	r0, r3
 80012c0:	f7ff ff36 	bl	8001130 <DebugPrint>
  }

  //Print the sensor information stored in the EEPROM
  SystemSettingPrint_Routine();
 80012c4:	f001 fce6 	bl	8002c94 <SystemSettingPrint_Routine>

  //Init the CANBus with retrieved system information
  CANSetup(SysInfo.CAN_Address);
 80012c8:	4b70      	ldr	r3, [pc, #448]	@ (800148c <main+0x2a4>)
 80012ca:	895b      	ldrh	r3, [r3, #10]
 80012cc:	4618      	mov	r0, r3
 80012ce:	f001 fb13 	bl	80028f8 <CANSetup>
  uint32_t ReadRegister=0;
 80012d2:	2300      	movs	r3, #0
 80012d4:	613b      	str	r3, [r7, #16]
  ReadRegister=CANBUS_EXT.Instance->MCR;
 80012d6:	4b6e      	ldr	r3, [pc, #440]	@ (8001490 <main+0x2a8>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	613b      	str	r3, [r7, #16]
  memset(PrintBuffer, '\0', COMM_SIZE); snprintf(PrintBuffer, COMM_SIZE-1, "\n\n\rCAN MCR Register: 0x%2lX", ReadRegister  );
 80012de:	2280      	movs	r2, #128	@ 0x80
 80012e0:	2100      	movs	r1, #0
 80012e2:	4861      	ldr	r0, [pc, #388]	@ (8001468 <main+0x280>)
 80012e4:	f008 fdf1 	bl	8009eca <memset>
 80012e8:	693b      	ldr	r3, [r7, #16]
 80012ea:	4a6a      	ldr	r2, [pc, #424]	@ (8001494 <main+0x2ac>)
 80012ec:	217f      	movs	r1, #127	@ 0x7f
 80012ee:	485e      	ldr	r0, [pc, #376]	@ (8001468 <main+0x280>)
 80012f0:	f008 fd54 	bl	8009d9c <sniprintf>
  DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE);
 80012f4:	4b5f      	ldr	r3, [pc, #380]	@ (8001474 <main+0x28c>)
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	2280      	movs	r2, #128	@ 0x80
 80012fa:	495b      	ldr	r1, [pc, #364]	@ (8001468 <main+0x280>)
 80012fc:	4618      	mov	r0, r3
 80012fe:	f7ff ff17 	bl	8001130 <DebugPrint>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  //Print message saying that the master while loop has been successfully entered
  if(MasterActivation==true){
 8001302:	4b60      	ldr	r3, [pc, #384]	@ (8001484 <main+0x29c>)
 8001304:	781b      	ldrb	r3, [r3, #0]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d010      	beq.n	800132c <main+0x144>
	  memset(PrintBuffer, '\0', COMM_SIZE); snprintf(PrintBuffer, COMM_SIZE-1, "\n\n\rMaster while loop entered" );
 800130a:	2280      	movs	r2, #128	@ 0x80
 800130c:	2100      	movs	r1, #0
 800130e:	4856      	ldr	r0, [pc, #344]	@ (8001468 <main+0x280>)
 8001310:	f008 fddb 	bl	8009eca <memset>
 8001314:	4a60      	ldr	r2, [pc, #384]	@ (8001498 <main+0x2b0>)
 8001316:	217f      	movs	r1, #127	@ 0x7f
 8001318:	4853      	ldr	r0, [pc, #332]	@ (8001468 <main+0x280>)
 800131a:	f008 fd3f 	bl	8009d9c <sniprintf>
	  DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE);
 800131e:	4b55      	ldr	r3, [pc, #340]	@ (8001474 <main+0x28c>)
 8001320:	781b      	ldrb	r3, [r3, #0]
 8001322:	2280      	movs	r2, #128	@ 0x80
 8001324:	4950      	ldr	r1, [pc, #320]	@ (8001468 <main+0x280>)
 8001326:	4618      	mov	r0, r3
 8001328:	f7ff ff02 	bl	8001130 <DebugPrint>
  }


  //uint8_t Status;
  //uint8_t ReadBuffer[6] = {0x00};
  uint8_t ctrlbool=0;
 800132c:	2300      	movs	r3, #0
 800132e:	75fb      	strb	r3, [r7, #23]

  while(MasterActivation==true){
 8001330:	e1a1      	b.n	8001676 <main+0x48e>

	  //Check heart beat LED
	  if( HeartBeatFlag == true ){
 8001332:	4b5a      	ldr	r3, [pc, #360]	@ (800149c <main+0x2b4>)
 8001334:	781b      	ldrb	r3, [r3, #0]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d004      	beq.n	8001344 <main+0x15c>
		  HeartBeatFlag = false;
 800133a:	4b58      	ldr	r3, [pc, #352]	@ (800149c <main+0x2b4>)
 800133c:	2200      	movs	r2, #0
 800133e:	701a      	strb	r2, [r3, #0]
		  Toggle_LED_HeartBeat();
 8001340:	f7ff fdd6 	bl	8000ef0 <Toggle_LED_HeartBeat>
	  }

	  //Check CC1 and CC2 voltage for cable state
	  if( SysInfo.USBConnStatus_Flag == true ){
 8001344:	4b51      	ldr	r3, [pc, #324]	@ (800148c <main+0x2a4>)
 8001346:	785b      	ldrb	r3, [r3, #1]
 8001348:	2b00      	cmp	r3, #0
 800134a:	d03d      	beq.n	80013c8 <main+0x1e0>
		  SysInfo.USBConnStatus_Flag = false;
 800134c:	4b4f      	ldr	r3, [pc, #316]	@ (800148c <main+0x2a4>)
 800134e:	2200      	movs	r2, #0
 8001350:	705a      	strb	r2, [r3, #1]
		  float CC_Voltage=0;
 8001352:	f04f 0300 	mov.w	r3, #0
 8001356:	60bb      	str	r3, [r7, #8]
		  STM32_ADC_ReadVoltage(&CC_Voltage, CC1_CH);
 8001358:	f107 0308 	add.w	r3, r7, #8
 800135c:	2101      	movs	r1, #1
 800135e:	4618      	mov	r0, r3
 8001360:	f7ff fe32 	bl	8000fc8 <STM32_ADC_ReadVoltage>
		  if(CC_Voltage>3.20){
 8001364:	68bb      	ldr	r3, [r7, #8]
 8001366:	4618      	mov	r0, r3
 8001368:	f7ff f8ee 	bl	8000548 <__aeabi_f2d>
 800136c:	a33c      	add	r3, pc, #240	@ (adr r3, 8001460 <main+0x278>)
 800136e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001372:	f7ff fbd1 	bl	8000b18 <__aeabi_dcmpgt>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d006      	beq.n	800138a <main+0x1a2>
			  SysInfo.USBConnection_State=true;
 800137c:	4b43      	ldr	r3, [pc, #268]	@ (800148c <main+0x2a4>)
 800137e:	2201      	movs	r2, #1
 8001380:	701a      	strb	r2, [r3, #0]
			  Set_LED_Indication2(1);
 8001382:	2001      	movs	r0, #1
 8001384:	f7ff fd48 	bl	8000e18 <Set_LED_Indication2>
			  break;
 8001388:	e17a      	b.n	8001680 <main+0x498>
		  }
		  STM32_ADC_ReadVoltage(&CC_Voltage, CC2_CH);
 800138a:	f107 0308 	add.w	r3, r7, #8
 800138e:	2102      	movs	r1, #2
 8001390:	4618      	mov	r0, r3
 8001392:	f7ff fe19 	bl	8000fc8 <STM32_ADC_ReadVoltage>
		  if(CC_Voltage>3.20){
 8001396:	68bb      	ldr	r3, [r7, #8]
 8001398:	4618      	mov	r0, r3
 800139a:	f7ff f8d5 	bl	8000548 <__aeabi_f2d>
 800139e:	a330      	add	r3, pc, #192	@ (adr r3, 8001460 <main+0x278>)
 80013a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013a4:	f7ff fbb8 	bl	8000b18 <__aeabi_dcmpgt>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d006      	beq.n	80013bc <main+0x1d4>
			  SysInfo.USBConnection_State=true;
 80013ae:	4b37      	ldr	r3, [pc, #220]	@ (800148c <main+0x2a4>)
 80013b0:	2201      	movs	r2, #1
 80013b2:	701a      	strb	r2, [r3, #0]
			  Set_LED_Indication3(1);
 80013b4:	2001      	movs	r0, #1
 80013b6:	f7ff fd41 	bl	8000e3c <Set_LED_Indication3>
			  break;
 80013ba:	e161      	b.n	8001680 <main+0x498>
		  }
		  SysInfo.USBConnection_State=false;
 80013bc:	4b33      	ldr	r3, [pc, #204]	@ (800148c <main+0x2a4>)
 80013be:	2200      	movs	r2, #0
 80013c0:	701a      	strb	r2, [r3, #0]
		  Set_LED_Indication1(0);
 80013c2:	2000      	movs	r0, #0
 80013c4:	f7ff fd16 	bl	8000df4 <Set_LED_Indication1>
	  }


	  //Check CAN FIFO0 for an instruction on the bus
  	  if(HAL_CAN_GetRxFifoFillLevel(&CANBUS_EXT, CAN_RX_FIFO0) != 0){		//If FIFO0 has a message, retrieve it
 80013c8:	2100      	movs	r1, #0
 80013ca:	4831      	ldr	r0, [pc, #196]	@ (8001490 <main+0x2a8>)
 80013cc:	f003 ffbb 	bl	8005346 <HAL_CAN_GetRxFifoFillLevel>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	f000 8084 	beq.w	80014e0 <main+0x2f8>
  		  CAN_ClearFIFO(CAN_RX_FIFO1);
 80013d8:	2001      	movs	r0, #1
 80013da:	f000 ffa5 	bl	8002328 <CAN_ClearFIFO>
  		  memset(CAN_ReceivedMessage, 0, 8);
 80013de:	2208      	movs	r2, #8
 80013e0:	2100      	movs	r1, #0
 80013e2:	482f      	ldr	r0, [pc, #188]	@ (80014a0 <main+0x2b8>)
 80013e4:	f008 fd71 	bl	8009eca <memset>
  		  ret = HAL_CAN_GetRxMessage(&CANBUS_EXT, CAN_RX_FIFO0, &pRxHeader, CAN_ReceivedMessage);
 80013e8:	4b2d      	ldr	r3, [pc, #180]	@ (80014a0 <main+0x2b8>)
 80013ea:	4a2e      	ldr	r2, [pc, #184]	@ (80014a4 <main+0x2bc>)
 80013ec:	2100      	movs	r1, #0
 80013ee:	4828      	ldr	r0, [pc, #160]	@ (8001490 <main+0x2a8>)
 80013f0:	f003 fe87 	bl	8005102 <HAL_CAN_GetRxMessage>
 80013f4:	4603      	mov	r3, r0
 80013f6:	461a      	mov	r2, r3
 80013f8:	4b2b      	ldr	r3, [pc, #172]	@ (80014a8 <main+0x2c0>)
 80013fa:	701a      	strb	r2, [r3, #0]
  		  if( ret == HAL_OK ) {
 80013fc:	4b2a      	ldr	r3, [pc, #168]	@ (80014a8 <main+0x2c0>)
 80013fe:	781b      	ldrb	r3, [r3, #0]
 8001400:	2b00      	cmp	r3, #0
 8001402:	d159      	bne.n	80014b8 <main+0x2d0>
  			  PrimaryState = CAN_ReceivedMessage[0];
 8001404:	4b26      	ldr	r3, [pc, #152]	@ (80014a0 <main+0x2b8>)
 8001406:	781a      	ldrb	r2, [r3, #0]
 8001408:	4b28      	ldr	r3, [pc, #160]	@ (80014ac <main+0x2c4>)
 800140a:	701a      	strb	r2, [r3, #0]
  			  memset(PrintBuffer, '\0', COMM_SIZE);  snprintf(PrintBuffer, COMM_SIZE-1, "\n\n\rCAN message received on FIFO0 from 0x%03lX", pRxHeader.StdId);
 800140c:	2280      	movs	r2, #128	@ 0x80
 800140e:	2100      	movs	r1, #0
 8001410:	4815      	ldr	r0, [pc, #84]	@ (8001468 <main+0x280>)
 8001412:	f008 fd5a 	bl	8009eca <memset>
 8001416:	4b23      	ldr	r3, [pc, #140]	@ (80014a4 <main+0x2bc>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	4a25      	ldr	r2, [pc, #148]	@ (80014b0 <main+0x2c8>)
 800141c:	217f      	movs	r1, #127	@ 0x7f
 800141e:	4812      	ldr	r0, [pc, #72]	@ (8001468 <main+0x280>)
 8001420:	f008 fcbc 	bl	8009d9c <sniprintf>
  			  DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE);
 8001424:	4b13      	ldr	r3, [pc, #76]	@ (8001474 <main+0x28c>)
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	2280      	movs	r2, #128	@ 0x80
 800142a:	490f      	ldr	r1, [pc, #60]	@ (8001468 <main+0x280>)
 800142c:	4618      	mov	r0, r3
 800142e:	f7ff fe7f 	bl	8001130 <DebugPrint>
  			  memset(PrintBuffer, '\0', COMM_SIZE);  snprintf(PrintBuffer, COMM_SIZE-1, "\n\r\t- PrimaryState = %u", PrimaryState);
 8001432:	2280      	movs	r2, #128	@ 0x80
 8001434:	2100      	movs	r1, #0
 8001436:	480c      	ldr	r0, [pc, #48]	@ (8001468 <main+0x280>)
 8001438:	f008 fd47 	bl	8009eca <memset>
 800143c:	4b1b      	ldr	r3, [pc, #108]	@ (80014ac <main+0x2c4>)
 800143e:	781b      	ldrb	r3, [r3, #0]
 8001440:	4a1c      	ldr	r2, [pc, #112]	@ (80014b4 <main+0x2cc>)
 8001442:	217f      	movs	r1, #127	@ 0x7f
 8001444:	4808      	ldr	r0, [pc, #32]	@ (8001468 <main+0x280>)
 8001446:	f008 fca9 	bl	8009d9c <sniprintf>
  			  DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE);
 800144a:	4b0a      	ldr	r3, [pc, #40]	@ (8001474 <main+0x28c>)
 800144c:	781b      	ldrb	r3, [r3, #0]
 800144e:	2280      	movs	r2, #128	@ 0x80
 8001450:	4905      	ldr	r1, [pc, #20]	@ (8001468 <main+0x280>)
 8001452:	4618      	mov	r0, r3
 8001454:	f7ff fe6c 	bl	8001130 <DebugPrint>
 8001458:	e042      	b.n	80014e0 <main+0x2f8>
 800145a:	bf00      	nop
 800145c:	f3af 8000 	nop.w
 8001460:	9999999a 	.word	0x9999999a
 8001464:	40099999 	.word	0x40099999
 8001468:	200004ec 	.word	0x200004ec
 800146c:	20000030 	.word	0x20000030
 8001470:	0800d6d4 	.word	0x0800d6d4
 8001474:	2000004b 	.word	0x2000004b
 8001478:	20000038 	.word	0x20000038
 800147c:	0800d6ec 	.word	0x0800d6ec
 8001480:	0800d700 	.word	0x0800d700
 8001484:	2000004c 	.word	0x2000004c
 8001488:	0800d728 	.word	0x0800d728
 800148c:	200004dc 	.word	0x200004dc
 8001490:	20000290 	.word	0x20000290
 8001494:	0800d760 	.word	0x0800d760
 8001498:	0800d77c 	.word	0x0800d77c
 800149c:	200005ad 	.word	0x200005ad
 80014a0:	200005a4 	.word	0x200005a4
 80014a4:	20000588 	.word	0x20000588
 80014a8:	200005ac 	.word	0x200005ac
 80014ac:	200005ae 	.word	0x200005ae
 80014b0:	0800d79c 	.word	0x0800d79c
 80014b4:	0800d7cc 	.word	0x0800d7cc
  		  }else{
  	  		  memset(PrintBuffer, '\0', COMM_SIZE);  snprintf(PrintBuffer, COMM_SIZE-1, "\n\rCAN message could not be received on FIFO0"  );
 80014b8:	2280      	movs	r2, #128	@ 0x80
 80014ba:	2100      	movs	r1, #0
 80014bc:	487b      	ldr	r0, [pc, #492]	@ (80016ac <main+0x4c4>)
 80014be:	f008 fd04 	bl	8009eca <memset>
 80014c2:	4a7b      	ldr	r2, [pc, #492]	@ (80016b0 <main+0x4c8>)
 80014c4:	217f      	movs	r1, #127	@ 0x7f
 80014c6:	4879      	ldr	r0, [pc, #484]	@ (80016ac <main+0x4c4>)
 80014c8:	f008 fc68 	bl	8009d9c <sniprintf>
  	  		  DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE);
 80014cc:	4b79      	ldr	r3, [pc, #484]	@ (80016b4 <main+0x4cc>)
 80014ce:	781b      	ldrb	r3, [r3, #0]
 80014d0:	2280      	movs	r2, #128	@ 0x80
 80014d2:	4976      	ldr	r1, [pc, #472]	@ (80016ac <main+0x4c4>)
 80014d4:	4618      	mov	r0, r3
 80014d6:	f7ff fe2b 	bl	8001130 <DebugPrint>
  	  		  PrimaryState=0x00;
 80014da:	4b77      	ldr	r3, [pc, #476]	@ (80016b8 <main+0x4d0>)
 80014dc:	2200      	movs	r2, #0
 80014de:	701a      	strb	r2, [r3, #0]
  		  }
  	  }

	  //Enter primary state machine
	  PrimaryStateMachine();
 80014e0:	f7ff fe3e 	bl	8001160 <PrimaryStateMachine>




	  if(SysInfo.Button1==true){
 80014e4:	4b75      	ldr	r3, [pc, #468]	@ (80016bc <main+0x4d4>)
 80014e6:	789b      	ldrb	r3, [r3, #2]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d05f      	beq.n	80015ac <main+0x3c4>
		  SysInfo.Button1=false;
 80014ec:	4b73      	ldr	r3, [pc, #460]	@ (80016bc <main+0x4d4>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	709a      	strb	r2, [r3, #2]
		  memset(PrintBuffer, '\0', COMM_SIZE); snprintf(PrintBuffer, COMM_SIZE-1, "\n\rButton 1 Pressed");
 80014f2:	2280      	movs	r2, #128	@ 0x80
 80014f4:	2100      	movs	r1, #0
 80014f6:	486d      	ldr	r0, [pc, #436]	@ (80016ac <main+0x4c4>)
 80014f8:	f008 fce7 	bl	8009eca <memset>
 80014fc:	4a70      	ldr	r2, [pc, #448]	@ (80016c0 <main+0x4d8>)
 80014fe:	217f      	movs	r1, #127	@ 0x7f
 8001500:	486a      	ldr	r0, [pc, #424]	@ (80016ac <main+0x4c4>)
 8001502:	f008 fc4b 	bl	8009d9c <sniprintf>
		  DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE);
 8001506:	4b6b      	ldr	r3, [pc, #428]	@ (80016b4 <main+0x4cc>)
 8001508:	781b      	ldrb	r3, [r3, #0]
 800150a:	2280      	movs	r2, #128	@ 0x80
 800150c:	4967      	ldr	r1, [pc, #412]	@ (80016ac <main+0x4c4>)
 800150e:	4618      	mov	r0, r3
 8001510:	f7ff fe0e 	bl	8001130 <DebugPrint>

		  memset(PrintBuffer, '\0', COMM_SIZE); snprintf(PrintBuffer, COMM_SIZE-1, "\n\rTS Pin -> Status %u", Read_USBC_SpareTS() );
 8001514:	2280      	movs	r2, #128	@ 0x80
 8001516:	2100      	movs	r1, #0
 8001518:	4864      	ldr	r0, [pc, #400]	@ (80016ac <main+0x4c4>)
 800151a:	f008 fcd6 	bl	8009eca <memset>
 800151e:	f7ff fc33 	bl	8000d88 <Read_USBC_SpareTS>
 8001522:	4603      	mov	r3, r0
 8001524:	4a67      	ldr	r2, [pc, #412]	@ (80016c4 <main+0x4dc>)
 8001526:	217f      	movs	r1, #127	@ 0x7f
 8001528:	4860      	ldr	r0, [pc, #384]	@ (80016ac <main+0x4c4>)
 800152a:	f008 fc37 	bl	8009d9c <sniprintf>
		  DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE);
 800152e:	4b61      	ldr	r3, [pc, #388]	@ (80016b4 <main+0x4cc>)
 8001530:	781b      	ldrb	r3, [r3, #0]
 8001532:	2280      	movs	r2, #128	@ 0x80
 8001534:	495d      	ldr	r1, [pc, #372]	@ (80016ac <main+0x4c4>)
 8001536:	4618      	mov	r0, r3
 8001538:	f7ff fdfa 	bl	8001130 <DebugPrint>

		  //HAL_ADCEx_Calibration_Start();
		  float VoltageValue1;
		  int8_t adc_error = STM32_ADC_ReadVoltage(&VoltageValue1, CC1_CH);
 800153c:	1d3b      	adds	r3, r7, #4
 800153e:	2101      	movs	r1, #1
 8001540:	4618      	mov	r0, r3
 8001542:	f7ff fd41 	bl	8000fc8 <STM32_ADC_ReadVoltage>
 8001546:	4603      	mov	r3, r0
 8001548:	73fb      	strb	r3, [r7, #15]
		  if( adc_error != 0 ){
 800154a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d012      	beq.n	8001578 <main+0x390>
			  memset(PrintBuffer, '\0', COMM_SIZE); snprintf(PrintBuffer, COMM_SIZE-1, "\n\rCC1 Error -> %d", adc_error );
 8001552:	2280      	movs	r2, #128	@ 0x80
 8001554:	2100      	movs	r1, #0
 8001556:	4855      	ldr	r0, [pc, #340]	@ (80016ac <main+0x4c4>)
 8001558:	f008 fcb7 	bl	8009eca <memset>
 800155c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001560:	4a59      	ldr	r2, [pc, #356]	@ (80016c8 <main+0x4e0>)
 8001562:	217f      	movs	r1, #127	@ 0x7f
 8001564:	4851      	ldr	r0, [pc, #324]	@ (80016ac <main+0x4c4>)
 8001566:	f008 fc19 	bl	8009d9c <sniprintf>
			  DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE );
 800156a:	4b52      	ldr	r3, [pc, #328]	@ (80016b4 <main+0x4cc>)
 800156c:	781b      	ldrb	r3, [r3, #0]
 800156e:	2280      	movs	r2, #128	@ 0x80
 8001570:	494e      	ldr	r1, [pc, #312]	@ (80016ac <main+0x4c4>)
 8001572:	4618      	mov	r0, r3
 8001574:	f7ff fddc 	bl	8001130 <DebugPrint>
		  }
		  memset(PrintBuffer, '\0', COMM_SIZE); snprintf(PrintBuffer, COMM_SIZE-1, "\n\rCC%u Value -> %0.3f", CC1_CH, VoltageValue1 );
 8001578:	2280      	movs	r2, #128	@ 0x80
 800157a:	2100      	movs	r1, #0
 800157c:	484b      	ldr	r0, [pc, #300]	@ (80016ac <main+0x4c4>)
 800157e:	f008 fca4 	bl	8009eca <memset>
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	4618      	mov	r0, r3
 8001586:	f7fe ffdf 	bl	8000548 <__aeabi_f2d>
 800158a:	4602      	mov	r2, r0
 800158c:	460b      	mov	r3, r1
 800158e:	e9cd 2300 	strd	r2, r3, [sp]
 8001592:	2301      	movs	r3, #1
 8001594:	4a4d      	ldr	r2, [pc, #308]	@ (80016cc <main+0x4e4>)
 8001596:	217f      	movs	r1, #127	@ 0x7f
 8001598:	4844      	ldr	r0, [pc, #272]	@ (80016ac <main+0x4c4>)
 800159a:	f008 fbff 	bl	8009d9c <sniprintf>
		  DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE );
 800159e:	4b45      	ldr	r3, [pc, #276]	@ (80016b4 <main+0x4cc>)
 80015a0:	781b      	ldrb	r3, [r3, #0]
 80015a2:	2280      	movs	r2, #128	@ 0x80
 80015a4:	4941      	ldr	r1, [pc, #260]	@ (80016ac <main+0x4c4>)
 80015a6:	4618      	mov	r0, r3
 80015a8:	f7ff fdc2 	bl	8001130 <DebugPrint>
		  */

	  }


	  if(SysInfo.Button2==true){
 80015ac:	4b43      	ldr	r3, [pc, #268]	@ (80016bc <main+0x4d4>)
 80015ae:	78db      	ldrb	r3, [r3, #3]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d032      	beq.n	800161a <main+0x432>
		  SysInfo.Button2=false;
 80015b4:	4b41      	ldr	r3, [pc, #260]	@ (80016bc <main+0x4d4>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	70da      	strb	r2, [r3, #3]
		  memset(PrintBuffer, '\0', COMM_SIZE); snprintf(PrintBuffer, COMM_SIZE-1, "\n\rButton 2 Pressed");
 80015ba:	2280      	movs	r2, #128	@ 0x80
 80015bc:	2100      	movs	r1, #0
 80015be:	483b      	ldr	r0, [pc, #236]	@ (80016ac <main+0x4c4>)
 80015c0:	f008 fc83 	bl	8009eca <memset>
 80015c4:	4a42      	ldr	r2, [pc, #264]	@ (80016d0 <main+0x4e8>)
 80015c6:	217f      	movs	r1, #127	@ 0x7f
 80015c8:	4838      	ldr	r0, [pc, #224]	@ (80016ac <main+0x4c4>)
 80015ca:	f008 fbe7 	bl	8009d9c <sniprintf>
		  DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE);
 80015ce:	4b39      	ldr	r3, [pc, #228]	@ (80016b4 <main+0x4cc>)
 80015d0:	781b      	ldrb	r3, [r3, #0]
 80015d2:	2280      	movs	r2, #128	@ 0x80
 80015d4:	4935      	ldr	r1, [pc, #212]	@ (80016ac <main+0x4c4>)
 80015d6:	4618      	mov	r0, r3
 80015d8:	f7ff fdaa 	bl	8001130 <DebugPrint>

		  //HAL_ADCEx_Calibration_Start();
		  float VoltageValue2;
		  STM32_ADC_ReadVoltage(&VoltageValue2, CC2_CH);
 80015dc:	463b      	mov	r3, r7
 80015de:	2102      	movs	r1, #2
 80015e0:	4618      	mov	r0, r3
 80015e2:	f7ff fcf1 	bl	8000fc8 <STM32_ADC_ReadVoltage>
		  memset(PrintBuffer, '\0', COMM_SIZE); snprintf(PrintBuffer, COMM_SIZE-1, "\n\rCC%u Value -> %0.3f", CC2_CH, VoltageValue2 );
 80015e6:	2280      	movs	r2, #128	@ 0x80
 80015e8:	2100      	movs	r1, #0
 80015ea:	4830      	ldr	r0, [pc, #192]	@ (80016ac <main+0x4c4>)
 80015ec:	f008 fc6d 	bl	8009eca <memset>
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	4618      	mov	r0, r3
 80015f4:	f7fe ffa8 	bl	8000548 <__aeabi_f2d>
 80015f8:	4602      	mov	r2, r0
 80015fa:	460b      	mov	r3, r1
 80015fc:	e9cd 2300 	strd	r2, r3, [sp]
 8001600:	2302      	movs	r3, #2
 8001602:	4a32      	ldr	r2, [pc, #200]	@ (80016cc <main+0x4e4>)
 8001604:	217f      	movs	r1, #127	@ 0x7f
 8001606:	4829      	ldr	r0, [pc, #164]	@ (80016ac <main+0x4c4>)
 8001608:	f008 fbc8 	bl	8009d9c <sniprintf>
		  DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE );
 800160c:	4b29      	ldr	r3, [pc, #164]	@ (80016b4 <main+0x4cc>)
 800160e:	781b      	ldrb	r3, [r3, #0]
 8001610:	2280      	movs	r2, #128	@ 0x80
 8001612:	4926      	ldr	r1, [pc, #152]	@ (80016ac <main+0x4c4>)
 8001614:	4618      	mov	r0, r3
 8001616:	f7ff fd8b 	bl	8001130 <DebugPrint>


	  }


	  if(SysInfo.Button3==true){
 800161a:	4b28      	ldr	r3, [pc, #160]	@ (80016bc <main+0x4d4>)
 800161c:	791b      	ldrb	r3, [r3, #4]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d029      	beq.n	8001676 <main+0x48e>
		  SysInfo.Button3=false;
 8001622:	4b26      	ldr	r3, [pc, #152]	@ (80016bc <main+0x4d4>)
 8001624:	2200      	movs	r2, #0
 8001626:	711a      	strb	r2, [r3, #4]
		  memset(PrintBuffer, '\0', COMM_SIZE); snprintf(PrintBuffer, COMM_SIZE-1, "\n\rButton 3 Pressed");
 8001628:	2280      	movs	r2, #128	@ 0x80
 800162a:	2100      	movs	r1, #0
 800162c:	481f      	ldr	r0, [pc, #124]	@ (80016ac <main+0x4c4>)
 800162e:	f008 fc4c 	bl	8009eca <memset>
 8001632:	4a28      	ldr	r2, [pc, #160]	@ (80016d4 <main+0x4ec>)
 8001634:	217f      	movs	r1, #127	@ 0x7f
 8001636:	481d      	ldr	r0, [pc, #116]	@ (80016ac <main+0x4c4>)
 8001638:	f008 fbb0 	bl	8009d9c <sniprintf>
		  DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE);
 800163c:	4b1d      	ldr	r3, [pc, #116]	@ (80016b4 <main+0x4cc>)
 800163e:	781b      	ldrb	r3, [r3, #0]
 8001640:	2280      	movs	r2, #128	@ 0x80
 8001642:	491a      	ldr	r1, [pc, #104]	@ (80016ac <main+0x4c4>)
 8001644:	4618      	mov	r0, r3
 8001646:	f7ff fd73 	bl	8001130 <DebugPrint>

		  Toggle_LED_HeartBeat();
 800164a:	f7ff fc51 	bl	8000ef0 <Toggle_LED_HeartBeat>
		  if(ctrlbool==0){
 800164e:	7dfb      	ldrb	r3, [r7, #23]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d108      	bne.n	8001666 <main+0x47e>
			 Set_LED_Metal(1);
 8001654:	2001      	movs	r0, #1
 8001656:	f7ff fc7b 	bl	8000f50 <Set_LED_Metal>
			 Set_LED_Turbidity(0);
 800165a:	2000      	movs	r0, #0
 800165c:	f7ff fc95 	bl	8000f8a <Set_LED_Turbidity>
			 ctrlbool = 1;
 8001660:	2301      	movs	r3, #1
 8001662:	75fb      	strb	r3, [r7, #23]
 8001664:	e007      	b.n	8001676 <main+0x48e>
		 }else{
			 Set_LED_Metal(0);
 8001666:	2000      	movs	r0, #0
 8001668:	f7ff fc72 	bl	8000f50 <Set_LED_Metal>
			 Set_LED_Turbidity(1);
 800166c:	2001      	movs	r0, #1
 800166e:	f7ff fc8c 	bl	8000f8a <Set_LED_Turbidity>
			 ctrlbool = 0;
 8001672:	2300      	movs	r3, #0
 8001674:	75fb      	strb	r3, [r7, #23]
  while(MasterActivation==true){
 8001676:	4b18      	ldr	r3, [pc, #96]	@ (80016d8 <main+0x4f0>)
 8001678:	781b      	ldrb	r3, [r3, #0]
 800167a:	2b00      	cmp	r3, #0
 800167c:	f47f ae59 	bne.w	8001332 <main+0x14a>

    /* USER CODE BEGIN 3 */
  }

  //Print message alerting user master while loops has been left
  memset(PrintBuffer, '\0', COMM_SIZE); snprintf(PrintBuffer, COMM_SIZE-1, "\n\n\rWARNING: Ion sensor shutting down" );
 8001680:	2280      	movs	r2, #128	@ 0x80
 8001682:	2100      	movs	r1, #0
 8001684:	4809      	ldr	r0, [pc, #36]	@ (80016ac <main+0x4c4>)
 8001686:	f008 fc20 	bl	8009eca <memset>
 800168a:	4a14      	ldr	r2, [pc, #80]	@ (80016dc <main+0x4f4>)
 800168c:	217f      	movs	r1, #127	@ 0x7f
 800168e:	4807      	ldr	r0, [pc, #28]	@ (80016ac <main+0x4c4>)
 8001690:	f008 fb84 	bl	8009d9c <sniprintf>
  DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE);
 8001694:	4b07      	ldr	r3, [pc, #28]	@ (80016b4 <main+0x4cc>)
 8001696:	781b      	ldrb	r3, [r3, #0]
 8001698:	2280      	movs	r2, #128	@ 0x80
 800169a:	4904      	ldr	r1, [pc, #16]	@ (80016ac <main+0x4c4>)
 800169c:	4618      	mov	r0, r3
 800169e:	f7ff fd47 	bl	8001130 <DebugPrint>
 80016a2:	2300      	movs	r3, #0


  /* USER CODE END 3 */
}
 80016a4:	4618      	mov	r0, r3
 80016a6:	3718      	adds	r7, #24
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	200004ec 	.word	0x200004ec
 80016b0:	0800d7e4 	.word	0x0800d7e4
 80016b4:	2000004b 	.word	0x2000004b
 80016b8:	200005ae 	.word	0x200005ae
 80016bc:	200004dc 	.word	0x200004dc
 80016c0:	0800d814 	.word	0x0800d814
 80016c4:	0800d828 	.word	0x0800d828
 80016c8:	0800d840 	.word	0x0800d840
 80016cc:	0800d854 	.word	0x0800d854
 80016d0:	0800d86c 	.word	0x0800d86c
 80016d4:	0800d880 	.word	0x0800d880
 80016d8:	2000004c 	.word	0x2000004c
 80016dc:	0800d894 	.word	0x0800d894

080016e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b09c      	sub	sp, #112	@ 0x70
 80016e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016e6:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80016ea:	2228      	movs	r2, #40	@ 0x28
 80016ec:	2100      	movs	r1, #0
 80016ee:	4618      	mov	r0, r3
 80016f0:	f008 fbeb 	bl	8009eca <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016f4:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80016f8:	2200      	movs	r2, #0
 80016fa:	601a      	str	r2, [r3, #0]
 80016fc:	605a      	str	r2, [r3, #4]
 80016fe:	609a      	str	r2, [r3, #8]
 8001700:	60da      	str	r2, [r3, #12]
 8001702:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001704:	463b      	mov	r3, r7
 8001706:	2234      	movs	r2, #52	@ 0x34
 8001708:	2100      	movs	r1, #0
 800170a:	4618      	mov	r0, r3
 800170c:	f008 fbdd 	bl	8009eca <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001710:	2302      	movs	r3, #2
 8001712:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001714:	2301      	movs	r3, #1
 8001716:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001718:	2310      	movs	r3, #16
 800171a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800171c:	2302      	movs	r3, #2
 800171e:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001720:	2300      	movs	r3, #0
 8001722:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8001724:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8001728:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800172a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800172e:	4618      	mov	r0, r3
 8001730:	f004 fef4 	bl	800651c <HAL_RCC_OscConfig>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	d001      	beq.n	800173e <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800173a:	f000 facf 	bl	8001cdc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800173e:	230f      	movs	r3, #15
 8001740:	637b      	str	r3, [r7, #52]	@ 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001742:	2302      	movs	r3, #2
 8001744:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001746:	2300      	movs	r3, #0
 8001748:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800174a:	2300      	movs	r3, #0
 800174c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800174e:	2300      	movs	r3, #0
 8001750:	647b      	str	r3, [r7, #68]	@ 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001752:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001756:	2100      	movs	r1, #0
 8001758:	4618      	mov	r0, r3
 800175a:	f005 ff1d 	bl	8007598 <HAL_RCC_ClockConfig>
 800175e:	4603      	mov	r3, r0
 8001760:	2b00      	cmp	r3, #0
 8001762:	d001      	beq.n	8001768 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8001764:	f000 faba 	bl	8001cdc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1
 8001768:	23a2      	movs	r3, #162	@ 0xa2
 800176a:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_ADC12;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800176c:	2300      	movs	r3, #0
 800176e:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8001770:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001774:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8001776:	2300      	movs	r3, #0
 8001778:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800177a:	463b      	mov	r3, r7
 800177c:	4618      	mov	r0, r3
 800177e:	f006 f941 	bl	8007a04 <HAL_RCCEx_PeriphCLKConfig>
 8001782:	4603      	mov	r3, r0
 8001784:	2b00      	cmp	r3, #0
 8001786:	d001      	beq.n	800178c <SystemClock_Config+0xac>
  {
    Error_Handler();
 8001788:	f000 faa8 	bl	8001cdc <Error_Handler>
  }
}
 800178c:	bf00      	nop
 800178e:	3770      	adds	r7, #112	@ 0x70
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}

08001794 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b08a      	sub	sp, #40	@ 0x28
 8001798:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800179a:	f107 031c 	add.w	r3, r7, #28
 800179e:	2200      	movs	r2, #0
 80017a0:	601a      	str	r2, [r3, #0]
 80017a2:	605a      	str	r2, [r3, #4]
 80017a4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80017a6:	1d3b      	adds	r3, r7, #4
 80017a8:	2200      	movs	r2, #0
 80017aa:	601a      	str	r2, [r3, #0]
 80017ac:	605a      	str	r2, [r3, #4]
 80017ae:	609a      	str	r2, [r3, #8]
 80017b0:	60da      	str	r2, [r3, #12]
 80017b2:	611a      	str	r2, [r3, #16]
 80017b4:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80017b6:	4b2e      	ldr	r3, [pc, #184]	@ (8001870 <MX_ADC1_Init+0xdc>)
 80017b8:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80017bc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80017be:	4b2c      	ldr	r3, [pc, #176]	@ (8001870 <MX_ADC1_Init+0xdc>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80017c4:	4b2a      	ldr	r3, [pc, #168]	@ (8001870 <MX_ADC1_Init+0xdc>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80017ca:	4b29      	ldr	r3, [pc, #164]	@ (8001870 <MX_ADC1_Init+0xdc>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80017d0:	4b27      	ldr	r3, [pc, #156]	@ (8001870 <MX_ADC1_Init+0xdc>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80017d6:	4b26      	ldr	r3, [pc, #152]	@ (8001870 <MX_ADC1_Init+0xdc>)
 80017d8:	2200      	movs	r2, #0
 80017da:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80017de:	4b24      	ldr	r3, [pc, #144]	@ (8001870 <MX_ADC1_Init+0xdc>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80017e4:	4b22      	ldr	r3, [pc, #136]	@ (8001870 <MX_ADC1_Init+0xdc>)
 80017e6:	2201      	movs	r2, #1
 80017e8:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80017ea:	4b21      	ldr	r3, [pc, #132]	@ (8001870 <MX_ADC1_Init+0xdc>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80017f0:	4b1f      	ldr	r3, [pc, #124]	@ (8001870 <MX_ADC1_Init+0xdc>)
 80017f2:	2201      	movs	r2, #1
 80017f4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80017f6:	4b1e      	ldr	r3, [pc, #120]	@ (8001870 <MX_ADC1_Init+0xdc>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80017fe:	4b1c      	ldr	r3, [pc, #112]	@ (8001870 <MX_ADC1_Init+0xdc>)
 8001800:	2204      	movs	r2, #4
 8001802:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001804:	4b1a      	ldr	r3, [pc, #104]	@ (8001870 <MX_ADC1_Init+0xdc>)
 8001806:	2200      	movs	r2, #0
 8001808:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800180a:	4b19      	ldr	r3, [pc, #100]	@ (8001870 <MX_ADC1_Init+0xdc>)
 800180c:	2200      	movs	r2, #0
 800180e:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001810:	4817      	ldr	r0, [pc, #92]	@ (8001870 <MX_ADC1_Init+0xdc>)
 8001812:	f002 f8cd 	bl	80039b0 <HAL_ADC_Init>
 8001816:	4603      	mov	r3, r0
 8001818:	2b00      	cmp	r3, #0
 800181a:	d001      	beq.n	8001820 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 800181c:	f000 fa5e 	bl	8001cdc <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001820:	2300      	movs	r3, #0
 8001822:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001824:	f107 031c 	add.w	r3, r7, #28
 8001828:	4619      	mov	r1, r3
 800182a:	4811      	ldr	r0, [pc, #68]	@ (8001870 <MX_ADC1_Init+0xdc>)
 800182c:	f002 ff4a 	bl	80046c4 <HAL_ADCEx_MultiModeConfigChannel>
 8001830:	4603      	mov	r3, r0
 8001832:	2b00      	cmp	r3, #0
 8001834:	d001      	beq.n	800183a <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8001836:	f000 fa51 	bl	8001cdc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800183a:	2301      	movs	r3, #1
 800183c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800183e:	2301      	movs	r3, #1
 8001840:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001842:	2300      	movs	r3, #0
 8001844:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001846:	2300      	movs	r3, #0
 8001848:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800184a:	2300      	movs	r3, #0
 800184c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800184e:	2300      	movs	r3, #0
 8001850:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001852:	1d3b      	adds	r3, r7, #4
 8001854:	4619      	mov	r1, r3
 8001856:	4806      	ldr	r0, [pc, #24]	@ (8001870 <MX_ADC1_Init+0xdc>)
 8001858:	f002 fc76 	bl	8004148 <HAL_ADC_ConfigChannel>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	d001      	beq.n	8001866 <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 8001862:	f000 fa3b 	bl	8001cdc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001866:	bf00      	nop
 8001868:	3728      	adds	r7, #40	@ 0x28
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	20000240 	.word	0x20000240

08001874 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 8001878:	4b17      	ldr	r3, [pc, #92]	@ (80018d8 <MX_CAN_Init+0x64>)
 800187a:	4a18      	ldr	r2, [pc, #96]	@ (80018dc <MX_CAN_Init+0x68>)
 800187c:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 800187e:	4b16      	ldr	r3, [pc, #88]	@ (80018d8 <MX_CAN_Init+0x64>)
 8001880:	2204      	movs	r2, #4
 8001882:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8001884:	4b14      	ldr	r3, [pc, #80]	@ (80018d8 <MX_CAN_Init+0x64>)
 8001886:	2200      	movs	r2, #0
 8001888:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800188a:	4b13      	ldr	r3, [pc, #76]	@ (80018d8 <MX_CAN_Init+0x64>)
 800188c:	2200      	movs	r2, #0
 800188e:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_13TQ;
 8001890:	4b11      	ldr	r3, [pc, #68]	@ (80018d8 <MX_CAN_Init+0x64>)
 8001892:	f44f 2240 	mov.w	r2, #786432	@ 0xc0000
 8001896:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001898:	4b0f      	ldr	r3, [pc, #60]	@ (80018d8 <MX_CAN_Init+0x64>)
 800189a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800189e:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80018a0:	4b0d      	ldr	r3, [pc, #52]	@ (80018d8 <MX_CAN_Init+0x64>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80018a6:	4b0c      	ldr	r3, [pc, #48]	@ (80018d8 <MX_CAN_Init+0x64>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80018ac:	4b0a      	ldr	r3, [pc, #40]	@ (80018d8 <MX_CAN_Init+0x64>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = ENABLE;
 80018b2:	4b09      	ldr	r3, [pc, #36]	@ (80018d8 <MX_CAN_Init+0x64>)
 80018b4:	2201      	movs	r2, #1
 80018b6:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80018b8:	4b07      	ldr	r3, [pc, #28]	@ (80018d8 <MX_CAN_Init+0x64>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80018be:	4b06      	ldr	r3, [pc, #24]	@ (80018d8 <MX_CAN_Init+0x64>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80018c4:	4804      	ldr	r0, [pc, #16]	@ (80018d8 <MX_CAN_Init+0x64>)
 80018c6:	f003 f943 	bl	8004b50 <HAL_CAN_Init>
 80018ca:	4603      	mov	r3, r0
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d001      	beq.n	80018d4 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 80018d0:	f000 fa04 	bl	8001cdc <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 80018d4:	bf00      	nop
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	20000290 	.word	0x20000290
 80018dc:	40006400 	.word	0x40006400

080018e0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80018e4:	4b1b      	ldr	r3, [pc, #108]	@ (8001954 <MX_I2C1_Init+0x74>)
 80018e6:	4a1c      	ldr	r2, [pc, #112]	@ (8001958 <MX_I2C1_Init+0x78>)
 80018e8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80018ea:	4b1a      	ldr	r3, [pc, #104]	@ (8001954 <MX_I2C1_Init+0x74>)
 80018ec:	4a1b      	ldr	r2, [pc, #108]	@ (800195c <MX_I2C1_Init+0x7c>)
 80018ee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80018f0:	4b18      	ldr	r3, [pc, #96]	@ (8001954 <MX_I2C1_Init+0x74>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80018f6:	4b17      	ldr	r3, [pc, #92]	@ (8001954 <MX_I2C1_Init+0x74>)
 80018f8:	2201      	movs	r2, #1
 80018fa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80018fc:	4b15      	ldr	r3, [pc, #84]	@ (8001954 <MX_I2C1_Init+0x74>)
 80018fe:	2200      	movs	r2, #0
 8001900:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001902:	4b14      	ldr	r3, [pc, #80]	@ (8001954 <MX_I2C1_Init+0x74>)
 8001904:	2200      	movs	r2, #0
 8001906:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001908:	4b12      	ldr	r3, [pc, #72]	@ (8001954 <MX_I2C1_Init+0x74>)
 800190a:	2200      	movs	r2, #0
 800190c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800190e:	4b11      	ldr	r3, [pc, #68]	@ (8001954 <MX_I2C1_Init+0x74>)
 8001910:	2200      	movs	r2, #0
 8001912:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001914:	4b0f      	ldr	r3, [pc, #60]	@ (8001954 <MX_I2C1_Init+0x74>)
 8001916:	2200      	movs	r2, #0
 8001918:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800191a:	480e      	ldr	r0, [pc, #56]	@ (8001954 <MX_I2C1_Init+0x74>)
 800191c:	f004 f85b 	bl	80059d6 <HAL_I2C_Init>
 8001920:	4603      	mov	r3, r0
 8001922:	2b00      	cmp	r3, #0
 8001924:	d001      	beq.n	800192a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001926:	f000 f9d9 	bl	8001cdc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800192a:	2100      	movs	r1, #0
 800192c:	4809      	ldr	r0, [pc, #36]	@ (8001954 <MX_I2C1_Init+0x74>)
 800192e:	f004 fd5d 	bl	80063ec <HAL_I2CEx_ConfigAnalogFilter>
 8001932:	4603      	mov	r3, r0
 8001934:	2b00      	cmp	r3, #0
 8001936:	d001      	beq.n	800193c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001938:	f000 f9d0 	bl	8001cdc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800193c:	2100      	movs	r1, #0
 800193e:	4805      	ldr	r0, [pc, #20]	@ (8001954 <MX_I2C1_Init+0x74>)
 8001940:	f004 fd9f 	bl	8006482 <HAL_I2CEx_ConfigDigitalFilter>
 8001944:	4603      	mov	r3, r0
 8001946:	2b00      	cmp	r3, #0
 8001948:	d001      	beq.n	800194e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800194a:	f000 f9c7 	bl	8001cdc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800194e:	bf00      	nop
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	200002b8 	.word	0x200002b8
 8001958:	40005400 	.word	0x40005400
 800195c:	2000090e 	.word	0x2000090e

08001960 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001964:	4b1b      	ldr	r3, [pc, #108]	@ (80019d4 <MX_SPI2_Init+0x74>)
 8001966:	4a1c      	ldr	r2, [pc, #112]	@ (80019d8 <MX_SPI2_Init+0x78>)
 8001968:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800196a:	4b1a      	ldr	r3, [pc, #104]	@ (80019d4 <MX_SPI2_Init+0x74>)
 800196c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001970:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001972:	4b18      	ldr	r3, [pc, #96]	@ (80019d4 <MX_SPI2_Init+0x74>)
 8001974:	2200      	movs	r2, #0
 8001976:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001978:	4b16      	ldr	r3, [pc, #88]	@ (80019d4 <MX_SPI2_Init+0x74>)
 800197a:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800197e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001980:	4b14      	ldr	r3, [pc, #80]	@ (80019d4 <MX_SPI2_Init+0x74>)
 8001982:	2202      	movs	r2, #2
 8001984:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001986:	4b13      	ldr	r3, [pc, #76]	@ (80019d4 <MX_SPI2_Init+0x74>)
 8001988:	2201      	movs	r2, #1
 800198a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800198c:	4b11      	ldr	r3, [pc, #68]	@ (80019d4 <MX_SPI2_Init+0x74>)
 800198e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001992:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001994:	4b0f      	ldr	r3, [pc, #60]	@ (80019d4 <MX_SPI2_Init+0x74>)
 8001996:	2210      	movs	r2, #16
 8001998:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800199a:	4b0e      	ldr	r3, [pc, #56]	@ (80019d4 <MX_SPI2_Init+0x74>)
 800199c:	2200      	movs	r2, #0
 800199e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80019a0:	4b0c      	ldr	r3, [pc, #48]	@ (80019d4 <MX_SPI2_Init+0x74>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80019a6:	4b0b      	ldr	r3, [pc, #44]	@ (80019d4 <MX_SPI2_Init+0x74>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 80019ac:	4b09      	ldr	r3, [pc, #36]	@ (80019d4 <MX_SPI2_Init+0x74>)
 80019ae:	2207      	movs	r2, #7
 80019b0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80019b2:	4b08      	ldr	r3, [pc, #32]	@ (80019d4 <MX_SPI2_Init+0x74>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80019b8:	4b06      	ldr	r3, [pc, #24]	@ (80019d4 <MX_SPI2_Init+0x74>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80019be:	4805      	ldr	r0, [pc, #20]	@ (80019d4 <MX_SPI2_Init+0x74>)
 80019c0:	f006 f9b2 	bl	8007d28 <HAL_SPI_Init>
 80019c4:	4603      	mov	r3, r0
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d001      	beq.n	80019ce <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80019ca:	f000 f987 	bl	8001cdc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80019ce:	bf00      	nop
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	2000030c 	.word	0x2000030c
 80019d8:	40003800 	.word	0x40003800

080019dc <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b084      	sub	sp, #16
 80019e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019e2:	1d3b      	adds	r3, r7, #4
 80019e4:	2200      	movs	r2, #0
 80019e6:	601a      	str	r2, [r3, #0]
 80019e8:	605a      	str	r2, [r3, #4]
 80019ea:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80019ec:	4b15      	ldr	r3, [pc, #84]	@ (8001a44 <MX_TIM6_Init+0x68>)
 80019ee:	4a16      	ldr	r2, [pc, #88]	@ (8001a48 <MX_TIM6_Init+0x6c>)
 80019f0:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 16000-1;
 80019f2:	4b14      	ldr	r3, [pc, #80]	@ (8001a44 <MX_TIM6_Init+0x68>)
 80019f4:	f643 627f 	movw	r2, #15999	@ 0x3e7f
 80019f8:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019fa:	4b12      	ldr	r3, [pc, #72]	@ (8001a44 <MX_TIM6_Init+0x68>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 500-1;
 8001a00:	4b10      	ldr	r3, [pc, #64]	@ (8001a44 <MX_TIM6_Init+0x68>)
 8001a02:	f240 12f3 	movw	r2, #499	@ 0x1f3
 8001a06:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a08:	4b0e      	ldr	r3, [pc, #56]	@ (8001a44 <MX_TIM6_Init+0x68>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001a0e:	480d      	ldr	r0, [pc, #52]	@ (8001a44 <MX_TIM6_Init+0x68>)
 8001a10:	f006 fa35 	bl	8007e7e <HAL_TIM_Base_Init>
 8001a14:	4603      	mov	r3, r0
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d001      	beq.n	8001a1e <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8001a1a:	f000 f95f 	bl	8001cdc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a22:	2300      	movs	r3, #0
 8001a24:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001a26:	1d3b      	adds	r3, r7, #4
 8001a28:	4619      	mov	r1, r3
 8001a2a:	4806      	ldr	r0, [pc, #24]	@ (8001a44 <MX_TIM6_Init+0x68>)
 8001a2c:	f006 fd36 	bl	800849c <HAL_TIMEx_MasterConfigSynchronization>
 8001a30:	4603      	mov	r3, r0
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d001      	beq.n	8001a3a <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8001a36:	f000 f951 	bl	8001cdc <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001a3a:	bf00      	nop
 8001a3c:	3710      	adds	r7, #16
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	20000370 	.word	0x20000370
 8001a48:	40001000 	.word	0x40001000

08001a4c <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001a50:	4b0f      	ldr	r3, [pc, #60]	@ (8001a90 <MX_TIM16_Init+0x44>)
 8001a52:	4a10      	ldr	r2, [pc, #64]	@ (8001a94 <MX_TIM16_Init+0x48>)
 8001a54:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 16-1;
 8001a56:	4b0e      	ldr	r3, [pc, #56]	@ (8001a90 <MX_TIM16_Init+0x44>)
 8001a58:	220f      	movs	r2, #15
 8001a5a:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a5c:	4b0c      	ldr	r3, [pc, #48]	@ (8001a90 <MX_TIM16_Init+0x44>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8001a62:	4b0b      	ldr	r3, [pc, #44]	@ (8001a90 <MX_TIM16_Init+0x44>)
 8001a64:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001a68:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a6a:	4b09      	ldr	r3, [pc, #36]	@ (8001a90 <MX_TIM16_Init+0x44>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001a70:	4b07      	ldr	r3, [pc, #28]	@ (8001a90 <MX_TIM16_Init+0x44>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a76:	4b06      	ldr	r3, [pc, #24]	@ (8001a90 <MX_TIM16_Init+0x44>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001a7c:	4804      	ldr	r0, [pc, #16]	@ (8001a90 <MX_TIM16_Init+0x44>)
 8001a7e:	f006 f9fe 	bl	8007e7e <HAL_TIM_Base_Init>
 8001a82:	4603      	mov	r3, r0
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d001      	beq.n	8001a8c <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8001a88:	f000 f928 	bl	8001cdc <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8001a8c:	bf00      	nop
 8001a8e:	bd80      	pop	{r7, pc}
 8001a90:	200003bc 	.word	0x200003bc
 8001a94:	40014400 	.word	0x40014400

08001a98 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8001a9c:	4b10      	ldr	r3, [pc, #64]	@ (8001ae0 <MX_TIM17_Init+0x48>)
 8001a9e:	4a11      	ldr	r2, [pc, #68]	@ (8001ae4 <MX_TIM17_Init+0x4c>)
 8001aa0:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 16000-1;
 8001aa2:	4b0f      	ldr	r3, [pc, #60]	@ (8001ae0 <MX_TIM17_Init+0x48>)
 8001aa4:	f643 627f 	movw	r2, #15999	@ 0x3e7f
 8001aa8:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001aaa:	4b0d      	ldr	r3, [pc, #52]	@ (8001ae0 <MX_TIM17_Init+0x48>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 8001ab0:	4b0b      	ldr	r3, [pc, #44]	@ (8001ae0 <MX_TIM17_Init+0x48>)
 8001ab2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001ab6:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ab8:	4b09      	ldr	r3, [pc, #36]	@ (8001ae0 <MX_TIM17_Init+0x48>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8001abe:	4b08      	ldr	r3, [pc, #32]	@ (8001ae0 <MX_TIM17_Init+0x48>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ac4:	4b06      	ldr	r3, [pc, #24]	@ (8001ae0 <MX_TIM17_Init+0x48>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8001aca:	4805      	ldr	r0, [pc, #20]	@ (8001ae0 <MX_TIM17_Init+0x48>)
 8001acc:	f006 f9d7 	bl	8007e7e <HAL_TIM_Base_Init>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d001      	beq.n	8001ada <MX_TIM17_Init+0x42>
  {
    Error_Handler();
 8001ad6:	f000 f901 	bl	8001cdc <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8001ada:	bf00      	nop
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	20000408 	.word	0x20000408
 8001ae4:	40014800 	.word	0x40014800

08001ae8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001aec:	4b14      	ldr	r3, [pc, #80]	@ (8001b40 <MX_USART2_UART_Init+0x58>)
 8001aee:	4a15      	ldr	r2, [pc, #84]	@ (8001b44 <MX_USART2_UART_Init+0x5c>)
 8001af0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8001af2:	4b13      	ldr	r3, [pc, #76]	@ (8001b40 <MX_USART2_UART_Init+0x58>)
 8001af4:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8001af8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001afa:	4b11      	ldr	r3, [pc, #68]	@ (8001b40 <MX_USART2_UART_Init+0x58>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001b00:	4b0f      	ldr	r3, [pc, #60]	@ (8001b40 <MX_USART2_UART_Init+0x58>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001b06:	4b0e      	ldr	r3, [pc, #56]	@ (8001b40 <MX_USART2_UART_Init+0x58>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001b0c:	4b0c      	ldr	r3, [pc, #48]	@ (8001b40 <MX_USART2_UART_Init+0x58>)
 8001b0e:	220c      	movs	r2, #12
 8001b10:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b12:	4b0b      	ldr	r3, [pc, #44]	@ (8001b40 <MX_USART2_UART_Init+0x58>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b18:	4b09      	ldr	r3, [pc, #36]	@ (8001b40 <MX_USART2_UART_Init+0x58>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b1e:	4b08      	ldr	r3, [pc, #32]	@ (8001b40 <MX_USART2_UART_Init+0x58>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b24:	4b06      	ldr	r3, [pc, #24]	@ (8001b40 <MX_USART2_UART_Init+0x58>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001b2a:	4805      	ldr	r0, [pc, #20]	@ (8001b40 <MX_USART2_UART_Init+0x58>)
 8001b2c:	f006 fd48 	bl	80085c0 <HAL_UART_Init>
 8001b30:	4603      	mov	r3, r0
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d001      	beq.n	8001b3a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001b36:	f000 f8d1 	bl	8001cdc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001b3a:	bf00      	nop
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	20000454 	.word	0x20000454
 8001b44:	40004400 	.word	0x40004400

08001b48 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b088      	sub	sp, #32
 8001b4c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b4e:	f107 030c 	add.w	r3, r7, #12
 8001b52:	2200      	movs	r2, #0
 8001b54:	601a      	str	r2, [r3, #0]
 8001b56:	605a      	str	r2, [r3, #4]
 8001b58:	609a      	str	r2, [r3, #8]
 8001b5a:	60da      	str	r2, [r3, #12]
 8001b5c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b5e:	4b5c      	ldr	r3, [pc, #368]	@ (8001cd0 <MX_GPIO_Init+0x188>)
 8001b60:	695b      	ldr	r3, [r3, #20]
 8001b62:	4a5b      	ldr	r2, [pc, #364]	@ (8001cd0 <MX_GPIO_Init+0x188>)
 8001b64:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001b68:	6153      	str	r3, [r2, #20]
 8001b6a:	4b59      	ldr	r3, [pc, #356]	@ (8001cd0 <MX_GPIO_Init+0x188>)
 8001b6c:	695b      	ldr	r3, [r3, #20]
 8001b6e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001b72:	60bb      	str	r3, [r7, #8]
 8001b74:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b76:	4b56      	ldr	r3, [pc, #344]	@ (8001cd0 <MX_GPIO_Init+0x188>)
 8001b78:	695b      	ldr	r3, [r3, #20]
 8001b7a:	4a55      	ldr	r2, [pc, #340]	@ (8001cd0 <MX_GPIO_Init+0x188>)
 8001b7c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b80:	6153      	str	r3, [r2, #20]
 8001b82:	4b53      	ldr	r3, [pc, #332]	@ (8001cd0 <MX_GPIO_Init+0x188>)
 8001b84:	695b      	ldr	r3, [r3, #20]
 8001b86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b8a:	607b      	str	r3, [r7, #4]
 8001b8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b8e:	4b50      	ldr	r3, [pc, #320]	@ (8001cd0 <MX_GPIO_Init+0x188>)
 8001b90:	695b      	ldr	r3, [r3, #20]
 8001b92:	4a4f      	ldr	r2, [pc, #316]	@ (8001cd0 <MX_GPIO_Init+0x188>)
 8001b94:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001b98:	6153      	str	r3, [r2, #20]
 8001b9a:	4b4d      	ldr	r3, [pc, #308]	@ (8001cd0 <MX_GPIO_Init+0x188>)
 8001b9c:	695b      	ldr	r3, [r3, #20]
 8001b9e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001ba2:	603b      	str	r3, [r7, #0]
 8001ba4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, HRTBEAT_LED_Pin|SENSOR_LED_1_Pin|SENSOR_LED_2_Pin, GPIO_PIN_RESET);
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 8001bac:	4849      	ldr	r0, [pc, #292]	@ (8001cd4 <MX_GPIO_Init+0x18c>)
 8001bae:	f003 febd 	bl	800592c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, INDICATION_LED_1_Pin|INDICATION_LED_2_Pin|INDICATION_LED_3_Pin|INDICATION_LED_4_Pin
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	f640 4107 	movw	r1, #3079	@ 0xc07
 8001bb8:	4847      	ldr	r0, [pc, #284]	@ (8001cd8 <MX_GPIO_Init+0x190>)
 8001bba:	f003 feb7 	bl	800592c <HAL_GPIO_WritePin>
                          |INDICATION_LED_5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FLASH_EN_GPIO_Port, FLASH_EN_Pin, GPIO_PIN_SET);
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001bc4:	4844      	ldr	r0, [pc, #272]	@ (8001cd8 <MX_GPIO_Init+0x190>)
 8001bc6:	f003 feb1 	bl	800592c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FLASH_WP_GPIO_Port, FLASH_WP_Pin, GPIO_PIN_SET);
 8001bca:	2201      	movs	r2, #1
 8001bcc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001bd0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001bd4:	f003 feaa 	bl	800592c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : HRTBEAT_LED_Pin */
  GPIO_InitStruct.Pin = HRTBEAT_LED_Pin;
 8001bd8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001bdc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bde:	2301      	movs	r3, #1
 8001be0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be2:	2300      	movs	r3, #0
 8001be4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001be6:	2300      	movs	r3, #0
 8001be8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HRTBEAT_LED_GPIO_Port, &GPIO_InitStruct);
 8001bea:	f107 030c 	add.w	r3, r7, #12
 8001bee:	4619      	mov	r1, r3
 8001bf0:	4838      	ldr	r0, [pc, #224]	@ (8001cd4 <MX_GPIO_Init+0x18c>)
 8001bf2:	f003 fd09 	bl	8005608 <HAL_GPIO_Init>

  /*Configure GPIO pins : SENSOR_LED_1_Pin SENSOR_LED_2_Pin */
  GPIO_InitStruct.Pin = SENSOR_LED_1_Pin|SENSOR_LED_2_Pin;
 8001bf6:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8001bfa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001c00:	2302      	movs	r3, #2
 8001c02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c04:	2300      	movs	r3, #0
 8001c06:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c08:	f107 030c 	add.w	r3, r7, #12
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	4831      	ldr	r0, [pc, #196]	@ (8001cd4 <MX_GPIO_Init+0x18c>)
 8001c10:	f003 fcfa 	bl	8005608 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON1_EXTI5_Pin BUTTON2_EXTI6_Pin BUTTON3_EXTI7_Pin */
  GPIO_InitStruct.Pin = BUTTON1_EXTI5_Pin|BUTTON2_EXTI6_Pin|BUTTON3_EXTI7_Pin;
 8001c14:	23e0      	movs	r3, #224	@ 0xe0
 8001c16:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001c18:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001c1c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c22:	f107 030c 	add.w	r3, r7, #12
 8001c26:	4619      	mov	r1, r3
 8001c28:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c2c:	f003 fcec 	bl	8005608 <HAL_GPIO_Init>

  /*Configure GPIO pins : INDICATION_LED_1_Pin INDICATION_LED_2_Pin INDICATION_LED_3_Pin INDICATION_LED_4_Pin
                           INDICATION_LED_5_Pin FLASH_EN_Pin */
  GPIO_InitStruct.Pin = INDICATION_LED_1_Pin|INDICATION_LED_2_Pin|INDICATION_LED_3_Pin|INDICATION_LED_4_Pin
 8001c30:	f641 4307 	movw	r3, #7175	@ 0x1c07
 8001c34:	60fb      	str	r3, [r7, #12]
                          |INDICATION_LED_5_Pin|FLASH_EN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c36:	2301      	movs	r3, #1
 8001c38:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c42:	f107 030c 	add.w	r3, r7, #12
 8001c46:	4619      	mov	r1, r3
 8001c48:	4823      	ldr	r0, [pc, #140]	@ (8001cd8 <MX_GPIO_Init+0x190>)
 8001c4a:	f003 fcdd 	bl	8005608 <HAL_GPIO_Init>

  /*Configure GPIO pin : FLASH_WP_Pin */
  GPIO_InitStruct.Pin = FLASH_WP_Pin;
 8001c4e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001c52:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c54:	2301      	movs	r3, #1
 8001c56:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(FLASH_WP_GPIO_Port, &GPIO_InitStruct);
 8001c60:	f107 030c 	add.w	r3, r7, #12
 8001c64:	4619      	mov	r1, r3
 8001c66:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c6a:	f003 fccd 	bl	8005608 <HAL_GPIO_Init>

  /*Configure GPIO pins : CC1_DETECT_EXTI11_Pin CC2_DETECT_EXTI12_Pin */
  GPIO_InitStruct.Pin = CC1_DETECT_EXTI11_Pin|CC2_DETECT_EXTI12_Pin;
 8001c6e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001c72:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001c74:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8001c78:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c7e:	f107 030c 	add.w	r3, r7, #12
 8001c82:	4619      	mov	r1, r3
 8001c84:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c88:	f003 fcbe 	bl	8005608 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPARE_TS_Pin */
  GPIO_InitStruct.Pin = SPARE_TS_Pin;
 8001c8c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001c90:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c92:	2300      	movs	r3, #0
 8001c94:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c96:	2300      	movs	r3, #0
 8001c98:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SPARE_TS_GPIO_Port, &GPIO_InitStruct);
 8001c9a:	f107 030c 	add.w	r3, r7, #12
 8001c9e:	4619      	mov	r1, r3
 8001ca0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ca4:	f003 fcb0 	bl	8005608 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001ca8:	2200      	movs	r2, #0
 8001caa:	2100      	movs	r1, #0
 8001cac:	2017      	movs	r0, #23
 8001cae:	f003 fc74 	bl	800559a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001cb2:	2017      	movs	r0, #23
 8001cb4:	f003 fc8d 	bl	80055d2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001cb8:	2200      	movs	r2, #0
 8001cba:	2100      	movs	r1, #0
 8001cbc:	2028      	movs	r0, #40	@ 0x28
 8001cbe:	f003 fc6c 	bl	800559a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001cc2:	2028      	movs	r0, #40	@ 0x28
 8001cc4:	f003 fc85 	bl	80055d2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001cc8:	bf00      	nop
 8001cca:	3720      	adds	r7, #32
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd80      	pop	{r7, pc}
 8001cd0:	40021000 	.word	0x40021000
 8001cd4:	48000800 	.word	0x48000800
 8001cd8:	48000400 	.word	0x48000400

08001cdc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ce0:	b672      	cpsid	i
}
 8001ce2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ce4:	bf00      	nop
 8001ce6:	e7fd      	b.n	8001ce4 <Error_Handler+0x8>

08001ce8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b083      	sub	sp, #12
 8001cec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cee:	4b0f      	ldr	r3, [pc, #60]	@ (8001d2c <HAL_MspInit+0x44>)
 8001cf0:	699b      	ldr	r3, [r3, #24]
 8001cf2:	4a0e      	ldr	r2, [pc, #56]	@ (8001d2c <HAL_MspInit+0x44>)
 8001cf4:	f043 0301 	orr.w	r3, r3, #1
 8001cf8:	6193      	str	r3, [r2, #24]
 8001cfa:	4b0c      	ldr	r3, [pc, #48]	@ (8001d2c <HAL_MspInit+0x44>)
 8001cfc:	699b      	ldr	r3, [r3, #24]
 8001cfe:	f003 0301 	and.w	r3, r3, #1
 8001d02:	607b      	str	r3, [r7, #4]
 8001d04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d06:	4b09      	ldr	r3, [pc, #36]	@ (8001d2c <HAL_MspInit+0x44>)
 8001d08:	69db      	ldr	r3, [r3, #28]
 8001d0a:	4a08      	ldr	r2, [pc, #32]	@ (8001d2c <HAL_MspInit+0x44>)
 8001d0c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d10:	61d3      	str	r3, [r2, #28]
 8001d12:	4b06      	ldr	r3, [pc, #24]	@ (8001d2c <HAL_MspInit+0x44>)
 8001d14:	69db      	ldr	r3, [r3, #28]
 8001d16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d1a:	603b      	str	r3, [r7, #0]
 8001d1c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d1e:	bf00      	nop
 8001d20:	370c      	adds	r7, #12
 8001d22:	46bd      	mov	sp, r7
 8001d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d28:	4770      	bx	lr
 8001d2a:	bf00      	nop
 8001d2c:	40021000 	.word	0x40021000

08001d30 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b08a      	sub	sp, #40	@ 0x28
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d38:	f107 0314 	add.w	r3, r7, #20
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	601a      	str	r2, [r3, #0]
 8001d40:	605a      	str	r2, [r3, #4]
 8001d42:	609a      	str	r2, [r3, #8]
 8001d44:	60da      	str	r2, [r3, #12]
 8001d46:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001d50:	d124      	bne.n	8001d9c <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001d52:	4b14      	ldr	r3, [pc, #80]	@ (8001da4 <HAL_ADC_MspInit+0x74>)
 8001d54:	695b      	ldr	r3, [r3, #20]
 8001d56:	4a13      	ldr	r2, [pc, #76]	@ (8001da4 <HAL_ADC_MspInit+0x74>)
 8001d58:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d5c:	6153      	str	r3, [r2, #20]
 8001d5e:	4b11      	ldr	r3, [pc, #68]	@ (8001da4 <HAL_ADC_MspInit+0x74>)
 8001d60:	695b      	ldr	r3, [r3, #20]
 8001d62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d66:	613b      	str	r3, [r7, #16]
 8001d68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d6a:	4b0e      	ldr	r3, [pc, #56]	@ (8001da4 <HAL_ADC_MspInit+0x74>)
 8001d6c:	695b      	ldr	r3, [r3, #20]
 8001d6e:	4a0d      	ldr	r2, [pc, #52]	@ (8001da4 <HAL_ADC_MspInit+0x74>)
 8001d70:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d74:	6153      	str	r3, [r2, #20]
 8001d76:	4b0b      	ldr	r3, [pc, #44]	@ (8001da4 <HAL_ADC_MspInit+0x74>)
 8001d78:	695b      	ldr	r3, [r3, #20]
 8001d7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d7e:	60fb      	str	r3, [r7, #12]
 8001d80:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = CC2_ADC1_IN1_Pin|CC1_ADC1_IN2_Pin;
 8001d82:	2303      	movs	r3, #3
 8001d84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d86:	2303      	movs	r3, #3
 8001d88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d8e:	f107 0314 	add.w	r3, r7, #20
 8001d92:	4619      	mov	r1, r3
 8001d94:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001d98:	f003 fc36 	bl	8005608 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001d9c:	bf00      	nop
 8001d9e:	3728      	adds	r7, #40	@ 0x28
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}
 8001da4:	40021000 	.word	0x40021000

08001da8 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b08a      	sub	sp, #40	@ 0x28
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001db0:	f107 0314 	add.w	r3, r7, #20
 8001db4:	2200      	movs	r2, #0
 8001db6:	601a      	str	r2, [r3, #0]
 8001db8:	605a      	str	r2, [r3, #4]
 8001dba:	609a      	str	r2, [r3, #8]
 8001dbc:	60da      	str	r2, [r3, #12]
 8001dbe:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a17      	ldr	r2, [pc, #92]	@ (8001e24 <HAL_CAN_MspInit+0x7c>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d128      	bne.n	8001e1c <HAL_CAN_MspInit+0x74>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001dca:	4b17      	ldr	r3, [pc, #92]	@ (8001e28 <HAL_CAN_MspInit+0x80>)
 8001dcc:	69db      	ldr	r3, [r3, #28]
 8001dce:	4a16      	ldr	r2, [pc, #88]	@ (8001e28 <HAL_CAN_MspInit+0x80>)
 8001dd0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001dd4:	61d3      	str	r3, [r2, #28]
 8001dd6:	4b14      	ldr	r3, [pc, #80]	@ (8001e28 <HAL_CAN_MspInit+0x80>)
 8001dd8:	69db      	ldr	r3, [r3, #28]
 8001dda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001dde:	613b      	str	r3, [r7, #16]
 8001de0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001de2:	4b11      	ldr	r3, [pc, #68]	@ (8001e28 <HAL_CAN_MspInit+0x80>)
 8001de4:	695b      	ldr	r3, [r3, #20]
 8001de6:	4a10      	ldr	r2, [pc, #64]	@ (8001e28 <HAL_CAN_MspInit+0x80>)
 8001de8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001dec:	6153      	str	r3, [r2, #20]
 8001dee:	4b0e      	ldr	r3, [pc, #56]	@ (8001e28 <HAL_CAN_MspInit+0x80>)
 8001df0:	695b      	ldr	r3, [r3, #20]
 8001df2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001df6:	60fb      	str	r3, [r7, #12]
 8001df8:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001dfa:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001dfe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e00:	2302      	movs	r3, #2
 8001e02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e04:	2300      	movs	r3, #0
 8001e06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e08:	2303      	movs	r3, #3
 8001e0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 8001e0c:	2309      	movs	r3, #9
 8001e0e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e10:	f107 0314 	add.w	r3, r7, #20
 8001e14:	4619      	mov	r1, r3
 8001e16:	4805      	ldr	r0, [pc, #20]	@ (8001e2c <HAL_CAN_MspInit+0x84>)
 8001e18:	f003 fbf6 	bl	8005608 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 8001e1c:	bf00      	nop
 8001e1e:	3728      	adds	r7, #40	@ 0x28
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}
 8001e24:	40006400 	.word	0x40006400
 8001e28:	40021000 	.word	0x40021000
 8001e2c:	48000400 	.word	0x48000400

08001e30 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b08a      	sub	sp, #40	@ 0x28
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e38:	f107 0314 	add.w	r3, r7, #20
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	601a      	str	r2, [r3, #0]
 8001e40:	605a      	str	r2, [r3, #4]
 8001e42:	609a      	str	r2, [r3, #8]
 8001e44:	60da      	str	r2, [r3, #12]
 8001e46:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4a17      	ldr	r2, [pc, #92]	@ (8001eac <HAL_I2C_MspInit+0x7c>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d127      	bne.n	8001ea2 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e52:	4b17      	ldr	r3, [pc, #92]	@ (8001eb0 <HAL_I2C_MspInit+0x80>)
 8001e54:	695b      	ldr	r3, [r3, #20]
 8001e56:	4a16      	ldr	r2, [pc, #88]	@ (8001eb0 <HAL_I2C_MspInit+0x80>)
 8001e58:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001e5c:	6153      	str	r3, [r2, #20]
 8001e5e:	4b14      	ldr	r3, [pc, #80]	@ (8001eb0 <HAL_I2C_MspInit+0x80>)
 8001e60:	695b      	ldr	r3, [r3, #20]
 8001e62:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001e66:	613b      	str	r3, [r7, #16]
 8001e68:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001e6a:	23c0      	movs	r3, #192	@ 0xc0
 8001e6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e6e:	2312      	movs	r3, #18
 8001e70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e72:	2300      	movs	r3, #0
 8001e74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e76:	2303      	movs	r3, #3
 8001e78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001e7a:	2304      	movs	r3, #4
 8001e7c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e7e:	f107 0314 	add.w	r3, r7, #20
 8001e82:	4619      	mov	r1, r3
 8001e84:	480b      	ldr	r0, [pc, #44]	@ (8001eb4 <HAL_I2C_MspInit+0x84>)
 8001e86:	f003 fbbf 	bl	8005608 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001e8a:	4b09      	ldr	r3, [pc, #36]	@ (8001eb0 <HAL_I2C_MspInit+0x80>)
 8001e8c:	69db      	ldr	r3, [r3, #28]
 8001e8e:	4a08      	ldr	r2, [pc, #32]	@ (8001eb0 <HAL_I2C_MspInit+0x80>)
 8001e90:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001e94:	61d3      	str	r3, [r2, #28]
 8001e96:	4b06      	ldr	r3, [pc, #24]	@ (8001eb0 <HAL_I2C_MspInit+0x80>)
 8001e98:	69db      	ldr	r3, [r3, #28]
 8001e9a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e9e:	60fb      	str	r3, [r7, #12]
 8001ea0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001ea2:	bf00      	nop
 8001ea4:	3728      	adds	r7, #40	@ 0x28
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	40005400 	.word	0x40005400
 8001eb0:	40021000 	.word	0x40021000
 8001eb4:	48000400 	.word	0x48000400

08001eb8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b08a      	sub	sp, #40	@ 0x28
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ec0:	f107 0314 	add.w	r3, r7, #20
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	601a      	str	r2, [r3, #0]
 8001ec8:	605a      	str	r2, [r3, #4]
 8001eca:	609a      	str	r2, [r3, #8]
 8001ecc:	60da      	str	r2, [r3, #12]
 8001ece:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a17      	ldr	r2, [pc, #92]	@ (8001f34 <HAL_SPI_MspInit+0x7c>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d128      	bne.n	8001f2c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001eda:	4b17      	ldr	r3, [pc, #92]	@ (8001f38 <HAL_SPI_MspInit+0x80>)
 8001edc:	69db      	ldr	r3, [r3, #28]
 8001ede:	4a16      	ldr	r2, [pc, #88]	@ (8001f38 <HAL_SPI_MspInit+0x80>)
 8001ee0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ee4:	61d3      	str	r3, [r2, #28]
 8001ee6:	4b14      	ldr	r3, [pc, #80]	@ (8001f38 <HAL_SPI_MspInit+0x80>)
 8001ee8:	69db      	ldr	r3, [r3, #28]
 8001eea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001eee:	613b      	str	r3, [r7, #16]
 8001ef0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ef2:	4b11      	ldr	r3, [pc, #68]	@ (8001f38 <HAL_SPI_MspInit+0x80>)
 8001ef4:	695b      	ldr	r3, [r3, #20]
 8001ef6:	4a10      	ldr	r2, [pc, #64]	@ (8001f38 <HAL_SPI_MspInit+0x80>)
 8001ef8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001efc:	6153      	str	r3, [r2, #20]
 8001efe:	4b0e      	ldr	r3, [pc, #56]	@ (8001f38 <HAL_SPI_MspInit+0x80>)
 8001f00:	695b      	ldr	r3, [r3, #20]
 8001f02:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001f06:	60fb      	str	r3, [r7, #12]
 8001f08:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001f0a:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8001f0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f10:	2302      	movs	r3, #2
 8001f12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f14:	2300      	movs	r3, #0
 8001f16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f18:	2303      	movs	r3, #3
 8001f1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001f1c:	2305      	movs	r3, #5
 8001f1e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f20:	f107 0314 	add.w	r3, r7, #20
 8001f24:	4619      	mov	r1, r3
 8001f26:	4805      	ldr	r0, [pc, #20]	@ (8001f3c <HAL_SPI_MspInit+0x84>)
 8001f28:	f003 fb6e 	bl	8005608 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001f2c:	bf00      	nop
 8001f2e:	3728      	adds	r7, #40	@ 0x28
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}
 8001f34:	40003800 	.word	0x40003800
 8001f38:	40021000 	.word	0x40021000
 8001f3c:	48000400 	.word	0x48000400

08001f40 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b086      	sub	sp, #24
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a1f      	ldr	r2, [pc, #124]	@ (8001fcc <HAL_TIM_Base_MspInit+0x8c>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d114      	bne.n	8001f7c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001f52:	4b1f      	ldr	r3, [pc, #124]	@ (8001fd0 <HAL_TIM_Base_MspInit+0x90>)
 8001f54:	69db      	ldr	r3, [r3, #28]
 8001f56:	4a1e      	ldr	r2, [pc, #120]	@ (8001fd0 <HAL_TIM_Base_MspInit+0x90>)
 8001f58:	f043 0310 	orr.w	r3, r3, #16
 8001f5c:	61d3      	str	r3, [r2, #28]
 8001f5e:	4b1c      	ldr	r3, [pc, #112]	@ (8001fd0 <HAL_TIM_Base_MspInit+0x90>)
 8001f60:	69db      	ldr	r3, [r3, #28]
 8001f62:	f003 0310 	and.w	r3, r3, #16
 8001f66:	617b      	str	r3, [r7, #20]
 8001f68:	697b      	ldr	r3, [r7, #20]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	2100      	movs	r1, #0
 8001f6e:	2036      	movs	r0, #54	@ 0x36
 8001f70:	f003 fb13 	bl	800559a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001f74:	2036      	movs	r0, #54	@ 0x36
 8001f76:	f003 fb2c 	bl	80055d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8001f7a:	e022      	b.n	8001fc2 <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM16)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a14      	ldr	r2, [pc, #80]	@ (8001fd4 <HAL_TIM_Base_MspInit+0x94>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d10c      	bne.n	8001fa0 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001f86:	4b12      	ldr	r3, [pc, #72]	@ (8001fd0 <HAL_TIM_Base_MspInit+0x90>)
 8001f88:	699b      	ldr	r3, [r3, #24]
 8001f8a:	4a11      	ldr	r2, [pc, #68]	@ (8001fd0 <HAL_TIM_Base_MspInit+0x90>)
 8001f8c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f90:	6193      	str	r3, [r2, #24]
 8001f92:	4b0f      	ldr	r3, [pc, #60]	@ (8001fd0 <HAL_TIM_Base_MspInit+0x90>)
 8001f94:	699b      	ldr	r3, [r3, #24]
 8001f96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f9a:	613b      	str	r3, [r7, #16]
 8001f9c:	693b      	ldr	r3, [r7, #16]
}
 8001f9e:	e010      	b.n	8001fc2 <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM17)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a0c      	ldr	r2, [pc, #48]	@ (8001fd8 <HAL_TIM_Base_MspInit+0x98>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d10b      	bne.n	8001fc2 <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8001faa:	4b09      	ldr	r3, [pc, #36]	@ (8001fd0 <HAL_TIM_Base_MspInit+0x90>)
 8001fac:	699b      	ldr	r3, [r3, #24]
 8001fae:	4a08      	ldr	r2, [pc, #32]	@ (8001fd0 <HAL_TIM_Base_MspInit+0x90>)
 8001fb0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001fb4:	6193      	str	r3, [r2, #24]
 8001fb6:	4b06      	ldr	r3, [pc, #24]	@ (8001fd0 <HAL_TIM_Base_MspInit+0x90>)
 8001fb8:	699b      	ldr	r3, [r3, #24]
 8001fba:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001fbe:	60fb      	str	r3, [r7, #12]
 8001fc0:	68fb      	ldr	r3, [r7, #12]
}
 8001fc2:	bf00      	nop
 8001fc4:	3718      	adds	r7, #24
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	40001000 	.word	0x40001000
 8001fd0:	40021000 	.word	0x40021000
 8001fd4:	40014400 	.word	0x40014400
 8001fd8:	40014800 	.word	0x40014800

08001fdc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b08a      	sub	sp, #40	@ 0x28
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fe4:	f107 0314 	add.w	r3, r7, #20
 8001fe8:	2200      	movs	r2, #0
 8001fea:	601a      	str	r2, [r3, #0]
 8001fec:	605a      	str	r2, [r3, #4]
 8001fee:	609a      	str	r2, [r3, #8]
 8001ff0:	60da      	str	r2, [r3, #12]
 8001ff2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a17      	ldr	r2, [pc, #92]	@ (8002058 <HAL_UART_MspInit+0x7c>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d128      	bne.n	8002050 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001ffe:	4b17      	ldr	r3, [pc, #92]	@ (800205c <HAL_UART_MspInit+0x80>)
 8002000:	69db      	ldr	r3, [r3, #28]
 8002002:	4a16      	ldr	r2, [pc, #88]	@ (800205c <HAL_UART_MspInit+0x80>)
 8002004:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002008:	61d3      	str	r3, [r2, #28]
 800200a:	4b14      	ldr	r3, [pc, #80]	@ (800205c <HAL_UART_MspInit+0x80>)
 800200c:	69db      	ldr	r3, [r3, #28]
 800200e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002012:	613b      	str	r3, [r7, #16]
 8002014:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002016:	4b11      	ldr	r3, [pc, #68]	@ (800205c <HAL_UART_MspInit+0x80>)
 8002018:	695b      	ldr	r3, [r3, #20]
 800201a:	4a10      	ldr	r2, [pc, #64]	@ (800205c <HAL_UART_MspInit+0x80>)
 800201c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002020:	6153      	str	r3, [r2, #20]
 8002022:	4b0e      	ldr	r3, [pc, #56]	@ (800205c <HAL_UART_MspInit+0x80>)
 8002024:	695b      	ldr	r3, [r3, #20]
 8002026:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800202a:	60fb      	str	r3, [r7, #12]
 800202c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800202e:	230c      	movs	r3, #12
 8002030:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002032:	2302      	movs	r3, #2
 8002034:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002036:	2300      	movs	r3, #0
 8002038:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800203a:	2303      	movs	r3, #3
 800203c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800203e:	2307      	movs	r3, #7
 8002040:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002042:	f107 0314 	add.w	r3, r7, #20
 8002046:	4619      	mov	r1, r3
 8002048:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800204c:	f003 fadc 	bl	8005608 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002050:	bf00      	nop
 8002052:	3728      	adds	r7, #40	@ 0x28
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}
 8002058:	40004400 	.word	0x40004400
 800205c:	40021000 	.word	0x40021000

08002060 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002060:	b480      	push	{r7}
 8002062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002064:	bf00      	nop
 8002066:	e7fd      	b.n	8002064 <NMI_Handler+0x4>

08002068 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002068:	b480      	push	{r7}
 800206a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800206c:	bf00      	nop
 800206e:	e7fd      	b.n	800206c <HardFault_Handler+0x4>

08002070 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002070:	b480      	push	{r7}
 8002072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002074:	bf00      	nop
 8002076:	e7fd      	b.n	8002074 <MemManage_Handler+0x4>

08002078 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002078:	b480      	push	{r7}
 800207a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800207c:	bf00      	nop
 800207e:	e7fd      	b.n	800207c <BusFault_Handler+0x4>

08002080 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002080:	b480      	push	{r7}
 8002082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002084:	bf00      	nop
 8002086:	e7fd      	b.n	8002084 <UsageFault_Handler+0x4>

08002088 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002088:	b480      	push	{r7}
 800208a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800208c:	bf00      	nop
 800208e:	46bd      	mov	sp, r7
 8002090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002094:	4770      	bx	lr

08002096 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002096:	b480      	push	{r7}
 8002098:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800209a:	bf00      	nop
 800209c:	46bd      	mov	sp, r7
 800209e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a2:	4770      	bx	lr

080020a4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80020a4:	b480      	push	{r7}
 80020a6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80020a8:	bf00      	nop
 80020aa:	46bd      	mov	sp, r7
 80020ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b0:	4770      	bx	lr

080020b2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80020b2:	b580      	push	{r7, lr}
 80020b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80020b6:	f001 fc37 	bl	8003928 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80020ba:	bf00      	nop
 80020bc:	bd80      	pop	{r7, pc}
	...

080020c0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b082      	sub	sp, #8
 80020c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
	  //EXTI0 triggers on rising or falling edge detection of the external button line
	  for(int i=0; i<30000; i++);					//Debounce button
 80020c6:	2300      	movs	r3, #0
 80020c8:	607b      	str	r3, [r7, #4]
 80020ca:	e002      	b.n	80020d2 <EXTI9_5_IRQHandler+0x12>
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	3301      	adds	r3, #1
 80020d0:	607b      	str	r3, [r7, #4]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	f247 522f 	movw	r2, #29999	@ 0x752f
 80020d8:	4293      	cmp	r3, r2
 80020da:	ddf7      	ble.n	80020cc <EXTI9_5_IRQHandler+0xc>
	  SysInfo.Button1 = Read_Button1();			//Set variable based on current state of the button after debounce
 80020dc:	f7fe fe36 	bl	8000d4c <Read_Button1>
 80020e0:	4603      	mov	r3, r0
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	bf14      	ite	ne
 80020e6:	2301      	movne	r3, #1
 80020e8:	2300      	moveq	r3, #0
 80020ea:	b2da      	uxtb	r2, r3
 80020ec:	4b11      	ldr	r3, [pc, #68]	@ (8002134 <EXTI9_5_IRQHandler+0x74>)
 80020ee:	709a      	strb	r2, [r3, #2]
	  SysInfo.Button2 = Read_Button2();			//Set variable based on current state of the button after debounce
 80020f0:	f7fe fe36 	bl	8000d60 <Read_Button2>
 80020f4:	4603      	mov	r3, r0
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	bf14      	ite	ne
 80020fa:	2301      	movne	r3, #1
 80020fc:	2300      	moveq	r3, #0
 80020fe:	b2da      	uxtb	r2, r3
 8002100:	4b0c      	ldr	r3, [pc, #48]	@ (8002134 <EXTI9_5_IRQHandler+0x74>)
 8002102:	70da      	strb	r2, [r3, #3]
	  SysInfo.Button3 = Read_Button3();			//Set variable based on current state of the button after debounce
 8002104:	f7fe fe36 	bl	8000d74 <Read_Button3>
 8002108:	4603      	mov	r3, r0
 800210a:	2b00      	cmp	r3, #0
 800210c:	bf14      	ite	ne
 800210e:	2301      	movne	r3, #1
 8002110:	2300      	moveq	r3, #0
 8002112:	b2da      	uxtb	r2, r3
 8002114:	4b07      	ldr	r3, [pc, #28]	@ (8002134 <EXTI9_5_IRQHandler+0x74>)
 8002116:	711a      	strb	r2, [r3, #4]


  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON1_EXTI5_Pin);
 8002118:	2020      	movs	r0, #32
 800211a:	f003 fc39 	bl	8005990 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON2_EXTI6_Pin);
 800211e:	2040      	movs	r0, #64	@ 0x40
 8002120:	f003 fc36 	bl	8005990 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON3_EXTI7_Pin);
 8002124:	2080      	movs	r0, #128	@ 0x80
 8002126:	f003 fc33 	bl	8005990 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800212a:	bf00      	nop
 800212c:	3708      	adds	r7, #8
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}
 8002132:	bf00      	nop
 8002134:	200004dc 	.word	0x200004dc

08002138 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	//for(int i=0; i<30000; i++);					//Debounce button
	SysInfo.USBConnStatus_Flag = true;
 800213c:	4b06      	ldr	r3, [pc, #24]	@ (8002158 <EXTI15_10_IRQHandler+0x20>)
 800213e:	2201      	movs	r2, #1
 8002140:	705a      	strb	r2, [r3, #1]
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(CC1_DETECT_EXTI11_Pin);
 8002142:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8002146:	f003 fc23 	bl	8005990 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(CC2_DETECT_EXTI12_Pin);
 800214a:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800214e:	f003 fc1f 	bl	8005990 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */
  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002152:	bf00      	nop
 8002154:	bd80      	pop	{r7, pc}
 8002156:	bf00      	nop
 8002158:	200004dc 	.word	0x200004dc

0800215c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles Timer 6 interrupt and DAC underrun interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */
	HeartBeatFlag = true;		//Set heartbeat LED to true when 1 second has elapsed
 8002160:	4b03      	ldr	r3, [pc, #12]	@ (8002170 <TIM6_DAC_IRQHandler+0x14>)
 8002162:	2201      	movs	r2, #1
 8002164:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002166:	4803      	ldr	r0, [pc, #12]	@ (8002174 <TIM6_DAC_IRQHandler+0x18>)
 8002168:	f005 ffc4 	bl	80080f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800216c:	bf00      	nop
 800216e:	bd80      	pop	{r7, pc}
 8002170:	200005ad 	.word	0x200005ad
 8002174:	20000370 	.word	0x20000370

08002178 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002178:	b480      	push	{r7}
 800217a:	af00      	add	r7, sp, #0
  return 1;
 800217c:	2301      	movs	r3, #1
}
 800217e:	4618      	mov	r0, r3
 8002180:	46bd      	mov	sp, r7
 8002182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002186:	4770      	bx	lr

08002188 <_kill>:

int _kill(int pid, int sig)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b082      	sub	sp, #8
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
 8002190:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002192:	f007 feed 	bl	8009f70 <__errno>
 8002196:	4603      	mov	r3, r0
 8002198:	2216      	movs	r2, #22
 800219a:	601a      	str	r2, [r3, #0]
  return -1;
 800219c:	f04f 33ff 	mov.w	r3, #4294967295
}
 80021a0:	4618      	mov	r0, r3
 80021a2:	3708      	adds	r7, #8
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd80      	pop	{r7, pc}

080021a8 <_exit>:

void _exit (int status)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b082      	sub	sp, #8
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80021b0:	f04f 31ff 	mov.w	r1, #4294967295
 80021b4:	6878      	ldr	r0, [r7, #4]
 80021b6:	f7ff ffe7 	bl	8002188 <_kill>
  while (1) {}    /* Make sure we hang here */
 80021ba:	bf00      	nop
 80021bc:	e7fd      	b.n	80021ba <_exit+0x12>

080021be <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80021be:	b580      	push	{r7, lr}
 80021c0:	b086      	sub	sp, #24
 80021c2:	af00      	add	r7, sp, #0
 80021c4:	60f8      	str	r0, [r7, #12]
 80021c6:	60b9      	str	r1, [r7, #8]
 80021c8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021ca:	2300      	movs	r3, #0
 80021cc:	617b      	str	r3, [r7, #20]
 80021ce:	e00a      	b.n	80021e6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80021d0:	f3af 8000 	nop.w
 80021d4:	4601      	mov	r1, r0
 80021d6:	68bb      	ldr	r3, [r7, #8]
 80021d8:	1c5a      	adds	r2, r3, #1
 80021da:	60ba      	str	r2, [r7, #8]
 80021dc:	b2ca      	uxtb	r2, r1
 80021de:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021e0:	697b      	ldr	r3, [r7, #20]
 80021e2:	3301      	adds	r3, #1
 80021e4:	617b      	str	r3, [r7, #20]
 80021e6:	697a      	ldr	r2, [r7, #20]
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	429a      	cmp	r2, r3
 80021ec:	dbf0      	blt.n	80021d0 <_read+0x12>
  }

  return len;
 80021ee:	687b      	ldr	r3, [r7, #4]
}
 80021f0:	4618      	mov	r0, r3
 80021f2:	3718      	adds	r7, #24
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}

080021f8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b086      	sub	sp, #24
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	60f8      	str	r0, [r7, #12]
 8002200:	60b9      	str	r1, [r7, #8]
 8002202:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002204:	2300      	movs	r3, #0
 8002206:	617b      	str	r3, [r7, #20]
 8002208:	e009      	b.n	800221e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800220a:	68bb      	ldr	r3, [r7, #8]
 800220c:	1c5a      	adds	r2, r3, #1
 800220e:	60ba      	str	r2, [r7, #8]
 8002210:	781b      	ldrb	r3, [r3, #0]
 8002212:	4618      	mov	r0, r3
 8002214:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002218:	697b      	ldr	r3, [r7, #20]
 800221a:	3301      	adds	r3, #1
 800221c:	617b      	str	r3, [r7, #20]
 800221e:	697a      	ldr	r2, [r7, #20]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	429a      	cmp	r2, r3
 8002224:	dbf1      	blt.n	800220a <_write+0x12>
  }
  return len;
 8002226:	687b      	ldr	r3, [r7, #4]
}
 8002228:	4618      	mov	r0, r3
 800222a:	3718      	adds	r7, #24
 800222c:	46bd      	mov	sp, r7
 800222e:	bd80      	pop	{r7, pc}

08002230 <_close>:

int _close(int file)
{
 8002230:	b480      	push	{r7}
 8002232:	b083      	sub	sp, #12
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002238:	f04f 33ff 	mov.w	r3, #4294967295
}
 800223c:	4618      	mov	r0, r3
 800223e:	370c      	adds	r7, #12
 8002240:	46bd      	mov	sp, r7
 8002242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002246:	4770      	bx	lr

08002248 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002248:	b480      	push	{r7}
 800224a:	b083      	sub	sp, #12
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
 8002250:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002258:	605a      	str	r2, [r3, #4]
  return 0;
 800225a:	2300      	movs	r3, #0
}
 800225c:	4618      	mov	r0, r3
 800225e:	370c      	adds	r7, #12
 8002260:	46bd      	mov	sp, r7
 8002262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002266:	4770      	bx	lr

08002268 <_isatty>:

int _isatty(int file)
{
 8002268:	b480      	push	{r7}
 800226a:	b083      	sub	sp, #12
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002270:	2301      	movs	r3, #1
}
 8002272:	4618      	mov	r0, r3
 8002274:	370c      	adds	r7, #12
 8002276:	46bd      	mov	sp, r7
 8002278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227c:	4770      	bx	lr

0800227e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800227e:	b480      	push	{r7}
 8002280:	b085      	sub	sp, #20
 8002282:	af00      	add	r7, sp, #0
 8002284:	60f8      	str	r0, [r7, #12]
 8002286:	60b9      	str	r1, [r7, #8]
 8002288:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800228a:	2300      	movs	r3, #0
}
 800228c:	4618      	mov	r0, r3
 800228e:	3714      	adds	r7, #20
 8002290:	46bd      	mov	sp, r7
 8002292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002296:	4770      	bx	lr

08002298 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b086      	sub	sp, #24
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80022a0:	4a14      	ldr	r2, [pc, #80]	@ (80022f4 <_sbrk+0x5c>)
 80022a2:	4b15      	ldr	r3, [pc, #84]	@ (80022f8 <_sbrk+0x60>)
 80022a4:	1ad3      	subs	r3, r2, r3
 80022a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80022ac:	4b13      	ldr	r3, [pc, #76]	@ (80022fc <_sbrk+0x64>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d102      	bne.n	80022ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80022b4:	4b11      	ldr	r3, [pc, #68]	@ (80022fc <_sbrk+0x64>)
 80022b6:	4a12      	ldr	r2, [pc, #72]	@ (8002300 <_sbrk+0x68>)
 80022b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80022ba:	4b10      	ldr	r3, [pc, #64]	@ (80022fc <_sbrk+0x64>)
 80022bc:	681a      	ldr	r2, [r3, #0]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	4413      	add	r3, r2
 80022c2:	693a      	ldr	r2, [r7, #16]
 80022c4:	429a      	cmp	r2, r3
 80022c6:	d207      	bcs.n	80022d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80022c8:	f007 fe52 	bl	8009f70 <__errno>
 80022cc:	4603      	mov	r3, r0
 80022ce:	220c      	movs	r2, #12
 80022d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80022d2:	f04f 33ff 	mov.w	r3, #4294967295
 80022d6:	e009      	b.n	80022ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80022d8:	4b08      	ldr	r3, [pc, #32]	@ (80022fc <_sbrk+0x64>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80022de:	4b07      	ldr	r3, [pc, #28]	@ (80022fc <_sbrk+0x64>)
 80022e0:	681a      	ldr	r2, [r3, #0]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	4413      	add	r3, r2
 80022e6:	4a05      	ldr	r2, [pc, #20]	@ (80022fc <_sbrk+0x64>)
 80022e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80022ea:	68fb      	ldr	r3, [r7, #12]
}
 80022ec:	4618      	mov	r0, r3
 80022ee:	3718      	adds	r7, #24
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}
 80022f4:	20008000 	.word	0x20008000
 80022f8:	00000400 	.word	0x00000400
 80022fc:	200005b0 	.word	0x200005b0
 8002300:	20000758 	.word	0x20000758

08002304 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002304:	b480      	push	{r7}
 8002306:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002308:	4b06      	ldr	r3, [pc, #24]	@ (8002324 <SystemInit+0x20>)
 800230a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800230e:	4a05      	ldr	r2, [pc, #20]	@ (8002324 <SystemInit+0x20>)
 8002310:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002314:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002318:	bf00      	nop
 800231a:	46bd      	mov	sp, r7
 800231c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002320:	4770      	bx	lr
 8002322:	bf00      	nop
 8002324:	e000ed00 	.word	0xe000ed00

08002328 <CAN_ClearFIFO>:
////////////////////////////////////////  uC CANBUS MANAGEMENT AND PROTOCOL FUNCTIONS /////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


//Clear the FIFO buffer of the specified CANBus FIFO
void CAN_ClearFIFO(uint32_t RxFifo){
 8002328:	b580      	push	{r7, lr}
 800232a:	b08c      	sub	sp, #48	@ 0x30
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]

	//Ensure the FIFO passed is valid
	if( RxFifo==CAN_RX_FIFO0 || RxFifo==CAN_RX_FIFO1 ){
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d012      	beq.n	800235c <CAN_ClearFIFO+0x34>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2b01      	cmp	r3, #1
 800233a:	d118      	bne.n	800236e <CAN_ClearFIFO+0x46>
		CAN_RxHeaderTypeDef cRxHeader;
		uint8_t cMessageBuffer[8];
		HAL_StatusTypeDef cRet;

		//Retrieve FIFO messages until the buffer is empty
		while( HAL_CAN_GetRxFifoFillLevel(&CANBUS_EXT, RxFifo) != 0 ){
 800233c:	e00e      	b.n	800235c <CAN_ClearFIFO+0x34>
			cRet=HAL_CAN_GetRxMessage(&CANBUS_EXT, RxFifo, &cRxHeader, cMessageBuffer);
 800233e:	f107 0308 	add.w	r3, r7, #8
 8002342:	f107 0210 	add.w	r2, r7, #16
 8002346:	6879      	ldr	r1, [r7, #4]
 8002348:	480b      	ldr	r0, [pc, #44]	@ (8002378 <CAN_ClearFIFO+0x50>)
 800234a:	f002 feda 	bl	8005102 <HAL_CAN_GetRxMessage>
 800234e:	4603      	mov	r3, r0
 8002350:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if(cRet!=HAL_OK){break;}
 8002354:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002358:	2b00      	cmp	r3, #0
 800235a:	d107      	bne.n	800236c <CAN_ClearFIFO+0x44>
		while( HAL_CAN_GetRxFifoFillLevel(&CANBUS_EXT, RxFifo) != 0 ){
 800235c:	6879      	ldr	r1, [r7, #4]
 800235e:	4806      	ldr	r0, [pc, #24]	@ (8002378 <CAN_ClearFIFO+0x50>)
 8002360:	f002 fff1 	bl	8005346 <HAL_CAN_GetRxFifoFillLevel>
 8002364:	4603      	mov	r3, r0
 8002366:	2b00      	cmp	r3, #0
 8002368:	d1e9      	bne.n	800233e <CAN_ClearFIFO+0x16>
		}

	}

}
 800236a:	e000      	b.n	800236e <CAN_ClearFIFO+0x46>
			if(cRet!=HAL_OK){break;}
 800236c:	bf00      	nop
}
 800236e:	bf00      	nop
 8002370:	3730      	adds	r7, #48	@ 0x30
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}
 8002376:	bf00      	nop
 8002378:	20000290 	.word	0x20000290

0800237c <eeprom_Read>:

}


//Function to read data from the EEPROM IC
eeprom_status_t eeprom_Read(uint16_t MemADDR, uint8_t* ReadArray, int ReadArraySize){
 800237c:	b580      	push	{r7, lr}
 800237e:	b088      	sub	sp, #32
 8002380:	af02      	add	r7, sp, #8
 8002382:	4603      	mov	r3, r0
 8002384:	60b9      	str	r1, [r7, #8]
 8002386:	607a      	str	r2, [r7, #4]
 8002388:	81fb      	strh	r3, [r7, #14]

	//Modify the I2C address value with the 3 most significant bits from MemADDR
	uint16_t DeviceADDR_Modified = DeviceADDR | ((MemADDR>>8)&0x0007) ;
 800238a:	89fb      	ldrh	r3, [r7, #14]
 800238c:	0a1b      	lsrs	r3, r3, #8
 800238e:	b29b      	uxth	r3, r3
 8002390:	b21b      	sxth	r3, r3
 8002392:	f003 0307 	and.w	r3, r3, #7
 8002396:	b21a      	sxth	r2, r3
 8002398:	2350      	movs	r3, #80	@ 0x50
 800239a:	b21b      	sxth	r3, r3
 800239c:	4313      	orrs	r3, r2
 800239e:	b21b      	sxth	r3, r3
 80023a0:	82fb      	strh	r3, [r7, #22]

	//Create a write buffer and store EEPROM read address
	uint8_t WriteBuffer[1] = {MemADDR} ;
 80023a2:	89fb      	ldrh	r3, [r7, #14]
 80023a4:	b2db      	uxtb	r3, r3
 80023a6:	753b      	strb	r3, [r7, #20]

	//Read data byte(s) from the EEPROM IC
	hal_i2c_status = HAL_I2C_Master_Transmit(&I2C_SYS, (DeviceADDR_Modified<<1), WriteBuffer, sizeof(WriteBuffer), 100);		//Set the read address in the EEPROM IC
 80023a8:	8afb      	ldrh	r3, [r7, #22]
 80023aa:	005b      	lsls	r3, r3, #1
 80023ac:	b299      	uxth	r1, r3
 80023ae:	f107 0214 	add.w	r2, r7, #20
 80023b2:	2364      	movs	r3, #100	@ 0x64
 80023b4:	9300      	str	r3, [sp, #0]
 80023b6:	2301      	movs	r3, #1
 80023b8:	4816      	ldr	r0, [pc, #88]	@ (8002414 <eeprom_Read+0x98>)
 80023ba:	f003 fb9b 	bl	8005af4 <HAL_I2C_Master_Transmit>
 80023be:	4603      	mov	r3, r0
 80023c0:	461a      	mov	r2, r3
 80023c2:	4b15      	ldr	r3, [pc, #84]	@ (8002418 <eeprom_Read+0x9c>)
 80023c4:	701a      	strb	r2, [r3, #0]
	if( hal_i2c_status != HAL_OK ){
 80023c6:	4b14      	ldr	r3, [pc, #80]	@ (8002418 <eeprom_Read+0x9c>)
 80023c8:	781b      	ldrb	r3, [r3, #0]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d002      	beq.n	80023d4 <eeprom_Read+0x58>
		return EEPROM_ERROR_I2C_WRITE;
 80023ce:	f06f 0301 	mvn.w	r3, #1
 80023d2:	e01a      	b.n	800240a <eeprom_Read+0x8e>
	}else{
		hal_i2c_status = HAL_I2C_Master_Receive(&I2C_SYS, (DeviceADDR_Modified<<1)|0x01, ReadArray, ReadArraySize, 100);		//Read data from the EEPROM IC starting at the previously set address
 80023d4:	8afb      	ldrh	r3, [r7, #22]
 80023d6:	005b      	lsls	r3, r3, #1
 80023d8:	b21b      	sxth	r3, r3
 80023da:	f043 0301 	orr.w	r3, r3, #1
 80023de:	b21b      	sxth	r3, r3
 80023e0:	b299      	uxth	r1, r3
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	b29b      	uxth	r3, r3
 80023e6:	2264      	movs	r2, #100	@ 0x64
 80023e8:	9200      	str	r2, [sp, #0]
 80023ea:	68ba      	ldr	r2, [r7, #8]
 80023ec:	4809      	ldr	r0, [pc, #36]	@ (8002414 <eeprom_Read+0x98>)
 80023ee:	f003 fc75 	bl	8005cdc <HAL_I2C_Master_Receive>
 80023f2:	4603      	mov	r3, r0
 80023f4:	461a      	mov	r2, r3
 80023f6:	4b08      	ldr	r3, [pc, #32]	@ (8002418 <eeprom_Read+0x9c>)
 80023f8:	701a      	strb	r2, [r3, #0]
		if( hal_i2c_status != HAL_OK ){	return EEPROM_ERROR_I2C_READ; }
 80023fa:	4b07      	ldr	r3, [pc, #28]	@ (8002418 <eeprom_Read+0x9c>)
 80023fc:	781b      	ldrb	r3, [r3, #0]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d002      	beq.n	8002408 <eeprom_Read+0x8c>
 8002402:	f04f 33ff 	mov.w	r3, #4294967295
 8002406:	e000      	b.n	800240a <eeprom_Read+0x8e>
	}

	//Return success code
	return EEPROM_STATUS_OK;
 8002408:	2300      	movs	r3, #0

}
 800240a:	4618      	mov	r0, r3
 800240c:	3718      	adds	r7, #24
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}
 8002412:	bf00      	nop
 8002414:	200002b8 	.word	0x200002b8
 8002418:	200005b4 	.word	0x200005b4

0800241c <MCP3421_ADC_Reset>:
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


//Reset the MCP3421A3T's configuration register to its POR value and validate the values
//This is needed because there is no way to force the chip's registers to a POR state, therefore if the system is reset, the IC will maintain its old values
mcp3421_status_t MCP3421_ADC_Reset(void){
 800241c:	b580      	push	{r7, lr}
 800241e:	b082      	sub	sp, #8
 8002420:	af00      	add	r7, sp, #0

	//Power-On-Reset value of the ADC's configuration register
	uint8_t POR_RegValue = 0x10;
 8002422:	2310      	movs	r3, #16
 8002424:	71fb      	strb	r3, [r7, #7]

	//Write the POR value to the config register
	if( MCP3421_ADC_Write_Config(&POR_RegValue) != ADC_STATUS_OK){ return ADC_ERROR_I2C_WRITE; }
 8002426:	1dfb      	adds	r3, r7, #7
 8002428:	4618      	mov	r0, r3
 800242a:	f000 f85f 	bl	80024ec <MCP3421_ADC_Write_Config>
 800242e:	4603      	mov	r3, r0
 8002430:	2b00      	cmp	r3, #0
 8002432:	d002      	beq.n	800243a <MCP3421_ADC_Reset+0x1e>
 8002434:	f06f 0301 	mvn.w	r3, #1
 8002438:	e011      	b.n	800245e <MCP3421_ADC_Reset+0x42>

	//Read the config byte from the MCP3421A3T and compare it to the POR value (RDY bit is masked by retrieval function)
	uint8_t ReadConfigByte;
	if( MCP3421_ADC_Read_Config(&ReadConfigByte) != ADC_STATUS_OK){ return ADC_ERROR_I2C_READ; }
 800243a:	1dbb      	adds	r3, r7, #6
 800243c:	4618      	mov	r0, r3
 800243e:	f000 f838 	bl	80024b2 <MCP3421_ADC_Read_Config>
 8002442:	4603      	mov	r3, r0
 8002444:	2b00      	cmp	r3, #0
 8002446:	d002      	beq.n	800244e <MCP3421_ADC_Reset+0x32>
 8002448:	f04f 33ff 	mov.w	r3, #4294967295
 800244c:	e007      	b.n	800245e <MCP3421_ADC_Reset+0x42>
	if( ReadConfigByte != POR_RegValue){ return ADC_ERROR_READBACK; }
 800244e:	79ba      	ldrb	r2, [r7, #6]
 8002450:	79fb      	ldrb	r3, [r7, #7]
 8002452:	429a      	cmp	r2, r3
 8002454:	d002      	beq.n	800245c <MCP3421_ADC_Reset+0x40>
 8002456:	f06f 0303 	mvn.w	r3, #3
 800245a:	e000      	b.n	800245e <MCP3421_ADC_Reset+0x42>

 	//memset(PrintBuffer, '\0', COMM_SIZE);	snprintf(PrintBuffer, COMM_SIZE-1, "\n\n\rRead ADC Config Value is 0x%02X", ReadConfigByte );
    //DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE );

	//Return operation success
	return ADC_STATUS_OK;
 800245c:	2300      	movs	r3, #0

}
 800245e:	4618      	mov	r0, r3
 8002460:	3708      	adds	r7, #8
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}

08002466 <MCP3421_ADC_Init>:



//Initiate the MCP3421A3T's configuration register and validate the values
mcp3421_status_t MCP3421_ADC_Init( uint8_t ConfigValue ){
 8002466:	b580      	push	{r7, lr}
 8002468:	b084      	sub	sp, #16
 800246a:	af00      	add	r7, sp, #0
 800246c:	4603      	mov	r3, r0
 800246e:	71fb      	strb	r3, [r7, #7]

	//Write the passed config value to the configuration register
	if( MCP3421_ADC_Write_Config(&ConfigValue) != ADC_STATUS_OK){ return ADC_ERROR_I2C_WRITE; }
 8002470:	1dfb      	adds	r3, r7, #7
 8002472:	4618      	mov	r0, r3
 8002474:	f000 f83a 	bl	80024ec <MCP3421_ADC_Write_Config>
 8002478:	4603      	mov	r3, r0
 800247a:	2b00      	cmp	r3, #0
 800247c:	d002      	beq.n	8002484 <MCP3421_ADC_Init+0x1e>
 800247e:	f06f 0301 	mvn.w	r3, #1
 8002482:	e012      	b.n	80024aa <MCP3421_ADC_Init+0x44>

	//Read the config byte from the MCP3421A3T and compare it to the expected value (RDY bit is masked by retrieval function)
	uint8_t ReadConfigByte;
	if( MCP3421_ADC_Read_Config(&ReadConfigByte) != ADC_STATUS_OK){ return ADC_ERROR_I2C_READ; }
 8002484:	f107 030f 	add.w	r3, r7, #15
 8002488:	4618      	mov	r0, r3
 800248a:	f000 f812 	bl	80024b2 <MCP3421_ADC_Read_Config>
 800248e:	4603      	mov	r3, r0
 8002490:	2b00      	cmp	r3, #0
 8002492:	d002      	beq.n	800249a <MCP3421_ADC_Init+0x34>
 8002494:	f04f 33ff 	mov.w	r3, #4294967295
 8002498:	e007      	b.n	80024aa <MCP3421_ADC_Init+0x44>
	if( ReadConfigByte != ConfigValue){ return ADC_ERROR_READBACK; }
 800249a:	7bfa      	ldrb	r2, [r7, #15]
 800249c:	79fb      	ldrb	r3, [r7, #7]
 800249e:	429a      	cmp	r2, r3
 80024a0:	d002      	beq.n	80024a8 <MCP3421_ADC_Init+0x42>
 80024a2:	f06f 0303 	mvn.w	r3, #3
 80024a6:	e000      	b.n	80024aa <MCP3421_ADC_Init+0x44>

 	//memset(PrintBuffer, '\0', COMM_SIZE);	snprintf(PrintBuffer, COMM_SIZE-1, "\n\n\rConfig Value is 0x%02X", ReadConfigByte );
    //DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE );

	//Return operation success
	return ADC_STATUS_OK;
 80024a8:	2300      	movs	r3, #0

}
 80024aa:	4618      	mov	r0, r3
 80024ac:	3710      	adds	r7, #16
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}

080024b2 <MCP3421_ADC_Read_Config>:




//Read the data in the MCP3421's configuration register (RDY bit is masked as its volatile)
mcp3421_status_t MCP3421_ADC_Read_Config( uint8_t* ReadByte ){
 80024b2:	b580      	push	{r7, lr}
 80024b4:	b084      	sub	sp, #16
 80024b6:	af00      	add	r7, sp, #0
 80024b8:	6078      	str	r0, [r7, #4]

	//Local function variables
	uint8_t ReadBuffer[4] = {0x00};
 80024ba:	2300      	movs	r3, #0
 80024bc:	60fb      	str	r3, [r7, #12]

	//Read 4-bytes from the MCP3421 assuming 18-bit mode operation
	//This is done as all sample modes repeat the config-byte at the end, so it is known that the 4th byte is the configuration byte across all modes due to the repetition
	if( MCP3421_ADC_Read( ReadBuffer, 4 ) != ADC_STATUS_OK){ return ADC_ERROR_I2C_READ; }
 80024be:	f107 030c 	add.w	r3, r7, #12
 80024c2:	2104      	movs	r1, #4
 80024c4:	4618      	mov	r0, r3
 80024c6:	f000 f83d 	bl	8002544 <MCP3421_ADC_Read>
 80024ca:	4603      	mov	r3, r0
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d002      	beq.n	80024d6 <MCP3421_ADC_Read_Config+0x24>
 80024d0:	f04f 33ff 	mov.w	r3, #4294967295
 80024d4:	e006      	b.n	80024e4 <MCP3421_ADC_Read_Config+0x32>

	//Mask the RDY bit and update the value of the passed memory address
	*ReadByte = ReadBuffer[3]&0x7F;
 80024d6:	7bfb      	ldrb	r3, [r7, #15]
 80024d8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80024dc:	b2da      	uxtb	r2, r3
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	701a      	strb	r2, [r3, #0]

	//Return operation success
	return ADC_STATUS_OK;
 80024e2:	2300      	movs	r3, #0

}
 80024e4:	4618      	mov	r0, r3
 80024e6:	3710      	adds	r7, #16
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}

080024ec <MCP3421_ADC_Write_Config>:
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////  I2C ADC Communication Functions  //////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//Write the passed byte to the MCP3421's configuration register
mcp3421_status_t MCP3421_ADC_Write_Config(uint8_t* WriteArray){
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b084      	sub	sp, #16
 80024f0:	af02      	add	r7, sp, #8
 80024f2:	6078      	str	r0, [r7, #4]

	//Check for invalid parameter conditions
	if(WriteArray==NULL){ return ADC_ERROR_PARAMETER; }
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d102      	bne.n	8002500 <MCP3421_ADC_Write_Config+0x14>
 80024fa:	f06f 0302 	mvn.w	r3, #2
 80024fe:	e018      	b.n	8002532 <MCP3421_ADC_Write_Config+0x46>

	//Issue the i2c write data command to the ADC with the config data package
	hal_i2c_status = HAL_I2C_Master_Transmit(&I2C_SYS, (ADC_DeviceADDR<<1), WriteArray, 1, 50);
 8002500:	236b      	movs	r3, #107	@ 0x6b
 8002502:	005b      	lsls	r3, r3, #1
 8002504:	b299      	uxth	r1, r3
 8002506:	2332      	movs	r3, #50	@ 0x32
 8002508:	9300      	str	r3, [sp, #0]
 800250a:	2301      	movs	r3, #1
 800250c:	687a      	ldr	r2, [r7, #4]
 800250e:	480b      	ldr	r0, [pc, #44]	@ (800253c <MCP3421_ADC_Write_Config+0x50>)
 8002510:	f003 faf0 	bl	8005af4 <HAL_I2C_Master_Transmit>
 8002514:	4603      	mov	r3, r0
 8002516:	461a      	mov	r2, r3
 8002518:	4b09      	ldr	r3, [pc, #36]	@ (8002540 <MCP3421_ADC_Write_Config+0x54>)
 800251a:	701a      	strb	r2, [r3, #0]
	if( hal_i2c_status != HAL_OK ){	return ADC_ERROR_I2C_WRITE;	}
 800251c:	4b08      	ldr	r3, [pc, #32]	@ (8002540 <MCP3421_ADC_Write_Config+0x54>)
 800251e:	781b      	ldrb	r3, [r3, #0]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d002      	beq.n	800252a <MCP3421_ADC_Write_Config+0x3e>
 8002524:	f06f 0301 	mvn.w	r3, #1
 8002528:	e003      	b.n	8002532 <MCP3421_ADC_Write_Config+0x46>

	//Return success
	HAL_Delay(100);
 800252a:	2064      	movs	r0, #100	@ 0x64
 800252c:	f001 fa1c 	bl	8003968 <HAL_Delay>
	return ADC_STATUS_OK;
 8002530:	2300      	movs	r3, #0

}
 8002532:	4618      	mov	r0, r3
 8002534:	3708      	adds	r7, #8
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}
 800253a:	bf00      	nop
 800253c:	200002b8 	.word	0x200002b8
 8002540:	200005b5 	.word	0x200005b5

08002544 <MCP3421_ADC_Read>:


//General purpose read function for the MCP3421 ADC
mcp3421_status_t MCP3421_ADC_Read( uint8_t* ReadArray, uint16_t ReadArraySize){
 8002544:	b580      	push	{r7, lr}
 8002546:	b084      	sub	sp, #16
 8002548:	af02      	add	r7, sp, #8
 800254a:	6078      	str	r0, [r7, #4]
 800254c:	460b      	mov	r3, r1
 800254e:	807b      	strh	r3, [r7, #2]

	//Check for invalid parameter conditions
	if(ReadArray==NULL || ReadArraySize==0){ return ADC_ERROR_PARAMETER; }
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d002      	beq.n	800255c <MCP3421_ADC_Read+0x18>
 8002556:	887b      	ldrh	r3, [r7, #2]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d102      	bne.n	8002562 <MCP3421_ADC_Read+0x1e>
 800255c:	f06f 0302 	mvn.w	r3, #2
 8002560:	e019      	b.n	8002596 <MCP3421_ADC_Read+0x52>

	//Issue read data instruction to ADC and read the specified number of bytes from the ADC's memory
	hal_i2c_status = HAL_I2C_Master_Receive(&I2C_SYS, (ADC_DeviceADDR<<1)|0x01, ReadArray, ReadArraySize, 50);
 8002562:	236b      	movs	r3, #107	@ 0x6b
 8002564:	005b      	lsls	r3, r3, #1
 8002566:	b21b      	sxth	r3, r3
 8002568:	f043 0301 	orr.w	r3, r3, #1
 800256c:	b21b      	sxth	r3, r3
 800256e:	b299      	uxth	r1, r3
 8002570:	887b      	ldrh	r3, [r7, #2]
 8002572:	2232      	movs	r2, #50	@ 0x32
 8002574:	9200      	str	r2, [sp, #0]
 8002576:	687a      	ldr	r2, [r7, #4]
 8002578:	4809      	ldr	r0, [pc, #36]	@ (80025a0 <MCP3421_ADC_Read+0x5c>)
 800257a:	f003 fbaf 	bl	8005cdc <HAL_I2C_Master_Receive>
 800257e:	4603      	mov	r3, r0
 8002580:	461a      	mov	r2, r3
 8002582:	4b08      	ldr	r3, [pc, #32]	@ (80025a4 <MCP3421_ADC_Read+0x60>)
 8002584:	701a      	strb	r2, [r3, #0]
	if( hal_i2c_status != HAL_OK ){	return ADC_ERROR_I2C_READ; }
 8002586:	4b07      	ldr	r3, [pc, #28]	@ (80025a4 <MCP3421_ADC_Read+0x60>)
 8002588:	781b      	ldrb	r3, [r3, #0]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d002      	beq.n	8002594 <MCP3421_ADC_Read+0x50>
 800258e:	f04f 33ff 	mov.w	r3, #4294967295
 8002592:	e000      	b.n	8002596 <MCP3421_ADC_Read+0x52>

	//Return success
	return ADC_STATUS_OK;
 8002594:	2300      	movs	r3, #0

}
 8002596:	4618      	mov	r0, r3
 8002598:	3708      	adds	r7, #8
 800259a:	46bd      	mov	sp, r7
 800259c:	bd80      	pop	{r7, pc}
 800259e:	bf00      	nop
 80025a0:	200002b8 	.word	0x200002b8
 80025a4:	200005b5 	.word	0x200005b5

080025a8 <MCP4726A1T_VoltageOut>:
//////////////////////////////////////  High Level DAC Control Functions //////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//Set the output voltage of the DAC
//Volatile config must have gain = 1 and voltage reference = VREF or results will be unexpected
dac_status_t MCP4726A1T_VoltageOut(float VoltageOutput){
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b086      	sub	sp, #24
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	ed87 0a01 	vstr	s0, [r7, #4]

	//Check passed parameters for invalid information
	if(VoltageOutput < 0 || VoltageOutput > 2.048){ return DAC_ERROR_PARAMETER; }
 80025b2:	edd7 7a01 	vldr	s15, [r7, #4]
 80025b6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80025ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025be:	d40a      	bmi.n	80025d6 <MCP4726A1T_VoltageOut+0x2e>
 80025c0:	6878      	ldr	r0, [r7, #4]
 80025c2:	f7fd ffc1 	bl	8000548 <__aeabi_f2d>
 80025c6:	a31b      	add	r3, pc, #108	@ (adr r3, 8002634 <MCP4726A1T_VoltageOut+0x8c>)
 80025c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025cc:	f7fe faa4 	bl	8000b18 <__aeabi_dcmpgt>
 80025d0:	4603      	mov	r3, r0
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d002      	beq.n	80025dc <MCP4726A1T_VoltageOut+0x34>
 80025d6:	f06f 0302 	mvn.w	r3, #2
 80025da:	e025      	b.n	8002628 <MCP4726A1T_VoltageOut+0x80>

	//Local function variables
	const float VoltageReference	 = 2.048;
 80025dc:	4b14      	ldr	r3, [pc, #80]	@ (8002630 <MCP4726A1T_VoltageOut+0x88>)
 80025de:	617b      	str	r3, [r7, #20]
	const uint16_t ResistorsInLadder = 4096;
 80025e0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80025e4:	827b      	strh	r3, [r7, #18]
	const uint16_t Gain = 1;
 80025e6:	2301      	movs	r3, #1
 80025e8:	823b      	strh	r3, [r7, #16]

	//Calculate the required DAC register value
	uint16_t DAC_RegValue = (uint16_t) ( (VoltageOutput*ResistorsInLadder)/(Gain*VoltageReference) );
 80025ea:	8a7b      	ldrh	r3, [r7, #18]
 80025ec:	ee07 3a90 	vmov	s15, r3
 80025f0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80025f4:	edd7 7a01 	vldr	s15, [r7, #4]
 80025f8:	ee67 6a27 	vmul.f32	s13, s14, s15
 80025fc:	8a3b      	ldrh	r3, [r7, #16]
 80025fe:	ee07 3a90 	vmov	s15, r3
 8002602:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002606:	edd7 7a05 	vldr	s15, [r7, #20]
 800260a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800260e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002612:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002616:	ee17 3a90 	vmov	r3, s15
 800261a:	81fb      	strh	r3, [r7, #14]

	//Write the DAC register value
	return MCP4726A1T_WriteVolatileDACRegister(PD_NO, DAC_RegValue);
 800261c:	89fb      	ldrh	r3, [r7, #14]
 800261e:	4619      	mov	r1, r3
 8002620:	2000      	movs	r0, #0
 8002622:	f000 f8d3 	bl	80027cc <MCP4726A1T_WriteVolatileDACRegister>
 8002626:	4603      	mov	r3, r0

}
 8002628:	4618      	mov	r0, r3
 800262a:	3718      	adds	r7, #24
 800262c:	46bd      	mov	sp, r7
 800262e:	bd80      	pop	{r7, pc}
 8002630:	4003126f 	.word	0x4003126f
 8002634:	d2f1a9fc 	.word	0xd2f1a9fc
 8002638:	4000624d 	.word	0x4000624d

0800263c <MCP4726A1T_WriteMemory>:
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////  Private DAC Memory Access Functions ///////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//Function to perform a generic memory write to either ALL memory or VOLATILE memory
dac_status_t MCP4726A1T_WriteMemory(uint8_t MemoryType, uint8_t VoltRefBits, uint8_t PowerDownBits, uint8_t GainBit, uint16_t DAC_Data){
 800263c:	b590      	push	{r4, r7, lr}
 800263e:	b089      	sub	sp, #36	@ 0x24
 8002640:	af02      	add	r7, sp, #8
 8002642:	4604      	mov	r4, r0
 8002644:	4608      	mov	r0, r1
 8002646:	4611      	mov	r1, r2
 8002648:	461a      	mov	r2, r3
 800264a:	4623      	mov	r3, r4
 800264c:	71fb      	strb	r3, [r7, #7]
 800264e:	4603      	mov	r3, r0
 8002650:	71bb      	strb	r3, [r7, #6]
 8002652:	460b      	mov	r3, r1
 8002654:	717b      	strb	r3, [r7, #5]
 8002656:	4613      	mov	r3, r2
 8002658:	713b      	strb	r3, [r7, #4]

	//Check passed parameters for invalid information
	if(MemoryType != DAC_MEMORY_ALL && MemoryType != DAC_MEMORY_VOLATILE){ return DAC_ERROR_PARAMETER; }
 800265a:	79fb      	ldrb	r3, [r7, #7]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d005      	beq.n	800266c <MCP4726A1T_WriteMemory+0x30>
 8002660:	79fb      	ldrb	r3, [r7, #7]
 8002662:	2b01      	cmp	r3, #1
 8002664:	d002      	beq.n	800266c <MCP4726A1T_WriteMemory+0x30>
 8002666:	f06f 0302 	mvn.w	r3, #2
 800266a:	e089      	b.n	8002780 <MCP4726A1T_WriteMemory+0x144>
	if(VoltRefBits != VDD_UNBUFF && VoltRefBits != VREF_UNBUFF && VoltRefBits != VREF_BUFF ){ return DAC_ERROR_PARAMETER; }
 800266c:	79bb      	ldrb	r3, [r7, #6]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d008      	beq.n	8002684 <MCP4726A1T_WriteMemory+0x48>
 8002672:	79bb      	ldrb	r3, [r7, #6]
 8002674:	2b02      	cmp	r3, #2
 8002676:	d005      	beq.n	8002684 <MCP4726A1T_WriteMemory+0x48>
 8002678:	79bb      	ldrb	r3, [r7, #6]
 800267a:	2b03      	cmp	r3, #3
 800267c:	d002      	beq.n	8002684 <MCP4726A1T_WriteMemory+0x48>
 800267e:	f06f 0302 	mvn.w	r3, #2
 8002682:	e07d      	b.n	8002780 <MCP4726A1T_WriteMemory+0x144>
	if(PowerDownBits != PD_NO && PowerDownBits != PD_1K && PowerDownBits != PD_100K && PowerDownBits != PD_500K ){ return DAC_ERROR_PARAMETER; }
 8002684:	797b      	ldrb	r3, [r7, #5]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d00b      	beq.n	80026a2 <MCP4726A1T_WriteMemory+0x66>
 800268a:	797b      	ldrb	r3, [r7, #5]
 800268c:	2b01      	cmp	r3, #1
 800268e:	d008      	beq.n	80026a2 <MCP4726A1T_WriteMemory+0x66>
 8002690:	797b      	ldrb	r3, [r7, #5]
 8002692:	2b02      	cmp	r3, #2
 8002694:	d005      	beq.n	80026a2 <MCP4726A1T_WriteMemory+0x66>
 8002696:	797b      	ldrb	r3, [r7, #5]
 8002698:	2b03      	cmp	r3, #3
 800269a:	d002      	beq.n	80026a2 <MCP4726A1T_WriteMemory+0x66>
 800269c:	f06f 0302 	mvn.w	r3, #2
 80026a0:	e06e      	b.n	8002780 <MCP4726A1T_WriteMemory+0x144>
	if(GainBit != G_1X && GainBit != G_2X){ return DAC_ERROR_PARAMETER; }
 80026a2:	793b      	ldrb	r3, [r7, #4]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d005      	beq.n	80026b4 <MCP4726A1T_WriteMemory+0x78>
 80026a8:	793b      	ldrb	r3, [r7, #4]
 80026aa:	2b01      	cmp	r3, #1
 80026ac:	d002      	beq.n	80026b4 <MCP4726A1T_WriteMemory+0x78>
 80026ae:	f06f 0302 	mvn.w	r3, #2
 80026b2:	e065      	b.n	8002780 <MCP4726A1T_WriteMemory+0x144>
	if(DAC_Data>0x0FFF){ return DAC_ERROR_PARAMETER; }
 80026b4:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80026b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80026ba:	d302      	bcc.n	80026c2 <MCP4726A1T_WriteMemory+0x86>
 80026bc:	f06f 0302 	mvn.w	r3, #2
 80026c0:	e05e      	b.n	8002780 <MCP4726A1T_WriteMemory+0x144>

	//Combined the I2C general call command and the device address information (shift device address by 1 for r/w bit)
	uint16_t I2C_DeviceAddress = (I2C_GeneralCall<<8) | (DeviceAddr<<1);
 80026c2:	2300      	movs	r3, #0
 80026c4:	021b      	lsls	r3, r3, #8
 80026c6:	b21a      	sxth	r2, r3
 80026c8:	2361      	movs	r3, #97	@ 0x61
 80026ca:	005b      	lsls	r3, r3, #1
 80026cc:	b21b      	sxth	r3, r3
 80026ce:	4313      	orrs	r3, r2
 80026d0:	b21b      	sxth	r3, r3
 80026d2:	82bb      	strh	r3, [r7, #20]

	//Determine command
	uint8_t MemoryTypeCMD;
	if(MemoryType==0){ MemoryTypeCMD = 0x60; }		//Command for ALL memory
 80026d4:	79fb      	ldrb	r3, [r7, #7]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d102      	bne.n	80026e0 <MCP4726A1T_WriteMemory+0xa4>
 80026da:	2360      	movs	r3, #96	@ 0x60
 80026dc:	75fb      	strb	r3, [r7, #23]
 80026de:	e001      	b.n	80026e4 <MCP4726A1T_WriteMemory+0xa8>
	else{ MemoryTypeCMD = 0x40;}					//Command for VOLATILE memory
 80026e0:	2340      	movs	r3, #64	@ 0x40
 80026e2:	75fb      	strb	r3, [r7, #23]

	//Format the passed DAC data to big endian
	uint8_t DAC_Data_BigEndian[2];
	DAC_Data = DAC_Data&0x0FFF;
 80026e4:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80026e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026ea:	853b      	strh	r3, [r7, #40]	@ 0x28
	DAC_Data_BigEndian[0] = (uint8_t)((DAC_Data>>8)&0x00FF);
 80026ec:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80026ee:	0a1b      	lsrs	r3, r3, #8
 80026f0:	b29b      	uxth	r3, r3
 80026f2:	b2db      	uxtb	r3, r3
 80026f4:	743b      	strb	r3, [r7, #16]
	DAC_Data_BigEndian[1] = (uint8_t)(DAC_Data&0x00FF);
 80026f6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80026f8:	b2db      	uxtb	r3, r3
 80026fa:	747b      	strb	r3, [r7, #17]

	//Create a data payload containing the write data
	uint8_t WriteBuffer[3];
	WriteBuffer[0] = MemoryTypeCMD | (VoltRefBits&0x03)<<3 | (PowerDownBits&0x03)<<1 | (0x01&GainBit);
 80026fc:	79bb      	ldrb	r3, [r7, #6]
 80026fe:	00db      	lsls	r3, r3, #3
 8002700:	b25b      	sxtb	r3, r3
 8002702:	f003 0318 	and.w	r3, r3, #24
 8002706:	b25a      	sxtb	r2, r3
 8002708:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800270c:	4313      	orrs	r3, r2
 800270e:	b25a      	sxtb	r2, r3
 8002710:	797b      	ldrb	r3, [r7, #5]
 8002712:	005b      	lsls	r3, r3, #1
 8002714:	b25b      	sxtb	r3, r3
 8002716:	f003 0306 	and.w	r3, r3, #6
 800271a:	b25b      	sxtb	r3, r3
 800271c:	4313      	orrs	r3, r2
 800271e:	b25a      	sxtb	r2, r3
 8002720:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8002724:	f003 0301 	and.w	r3, r3, #1
 8002728:	b25b      	sxtb	r3, r3
 800272a:	4313      	orrs	r3, r2
 800272c:	b25b      	sxtb	r3, r3
 800272e:	b2db      	uxtb	r3, r3
 8002730:	733b      	strb	r3, [r7, #12]
	WriteBuffer[1] = ((DAC_Data_BigEndian[0]<<4)&0xF0) | ((DAC_Data_BigEndian[1]>>4)&0x0F);
 8002732:	7c3b      	ldrb	r3, [r7, #16]
 8002734:	011b      	lsls	r3, r3, #4
 8002736:	b25a      	sxtb	r2, r3
 8002738:	7c7b      	ldrb	r3, [r7, #17]
 800273a:	091b      	lsrs	r3, r3, #4
 800273c:	b2db      	uxtb	r3, r3
 800273e:	b25b      	sxtb	r3, r3
 8002740:	4313      	orrs	r3, r2
 8002742:	b25b      	sxtb	r3, r3
 8002744:	b2db      	uxtb	r3, r3
 8002746:	737b      	strb	r3, [r7, #13]
	WriteBuffer[2] = ((DAC_Data_BigEndian[1]<<4)&0xF0);
 8002748:	7c7b      	ldrb	r3, [r7, #17]
 800274a:	011b      	lsls	r3, r3, #4
 800274c:	b2db      	uxtb	r3, r3
 800274e:	73bb      	strb	r3, [r7, #14]

	//Write the buffer data to the DAC IC
	hal_i2c_status = HAL_I2C_Master_Transmit(&I2C_SYS, I2C_DeviceAddress, WriteBuffer, 3, 100);
 8002750:	f107 020c 	add.w	r2, r7, #12
 8002754:	8ab9      	ldrh	r1, [r7, #20]
 8002756:	2364      	movs	r3, #100	@ 0x64
 8002758:	9300      	str	r3, [sp, #0]
 800275a:	2303      	movs	r3, #3
 800275c:	480a      	ldr	r0, [pc, #40]	@ (8002788 <MCP4726A1T_WriteMemory+0x14c>)
 800275e:	f003 f9c9 	bl	8005af4 <HAL_I2C_Master_Transmit>
 8002762:	4603      	mov	r3, r0
 8002764:	461a      	mov	r2, r3
 8002766:	4b09      	ldr	r3, [pc, #36]	@ (800278c <MCP4726A1T_WriteMemory+0x150>)
 8002768:	701a      	strb	r2, [r3, #0]
	if( hal_i2c_status != HAL_OK ){ return DAC_ERROR_I2C_WRITE; }
 800276a:	4b08      	ldr	r3, [pc, #32]	@ (800278c <MCP4726A1T_WriteMemory+0x150>)
 800276c:	781b      	ldrb	r3, [r3, #0]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d002      	beq.n	8002778 <MCP4726A1T_WriteMemory+0x13c>
 8002772:	f06f 0301 	mvn.w	r3, #1
 8002776:	e003      	b.n	8002780 <MCP4726A1T_WriteMemory+0x144>

	//Wait 50ms for max EEPROM programming time
	HAL_Delay(50);
 8002778:	2032      	movs	r0, #50	@ 0x32
 800277a:	f001 f8f5 	bl	8003968 <HAL_Delay>

	//Return success code
	return DAC_STATUS_OK;
 800277e:	2300      	movs	r3, #0

}
 8002780:	4618      	mov	r0, r3
 8002782:	371c      	adds	r7, #28
 8002784:	46bd      	mov	sp, r7
 8002786:	bd90      	pop	{r4, r7, pc}
 8002788:	200002b8 	.word	0x200002b8
 800278c:	200005b6 	.word	0x200005b6

08002790 <MCP4726A1T_WriteAllMemory>:
	return MCP4726A1T_WriteMemory( DAC_MEMORY_VOLATILE, VoltRefBits, PowerDownBits, GainBit, DAC_Data);

}

//Function to perform a write all memory operation
dac_status_t MCP4726A1T_WriteAllMemory(uint8_t VoltRefBits, uint8_t PowerDownBits, uint8_t GainBit, uint16_t DAC_Data){
 8002790:	b590      	push	{r4, r7, lr}
 8002792:	b085      	sub	sp, #20
 8002794:	af02      	add	r7, sp, #8
 8002796:	4604      	mov	r4, r0
 8002798:	4608      	mov	r0, r1
 800279a:	4611      	mov	r1, r2
 800279c:	461a      	mov	r2, r3
 800279e:	4623      	mov	r3, r4
 80027a0:	71fb      	strb	r3, [r7, #7]
 80027a2:	4603      	mov	r3, r0
 80027a4:	71bb      	strb	r3, [r7, #6]
 80027a6:	460b      	mov	r3, r1
 80027a8:	717b      	strb	r3, [r7, #5]
 80027aa:	4613      	mov	r3, r2
 80027ac:	807b      	strh	r3, [r7, #2]

	return MCP4726A1T_WriteMemory( DAC_MEMORY_ALL, VoltRefBits, PowerDownBits, GainBit, DAC_Data);
 80027ae:	7978      	ldrb	r0, [r7, #5]
 80027b0:	79ba      	ldrb	r2, [r7, #6]
 80027b2:	79f9      	ldrb	r1, [r7, #7]
 80027b4:	887b      	ldrh	r3, [r7, #2]
 80027b6:	9300      	str	r3, [sp, #0]
 80027b8:	4603      	mov	r3, r0
 80027ba:	2000      	movs	r0, #0
 80027bc:	f7ff ff3e 	bl	800263c <MCP4726A1T_WriteMemory>
 80027c0:	4603      	mov	r3, r0

}
 80027c2:	4618      	mov	r0, r3
 80027c4:	370c      	adds	r7, #12
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd90      	pop	{r4, r7, pc}
	...

080027cc <MCP4726A1T_WriteVolatileDACRegister>:



//Function to perform a volatile DAC data register write
dac_status_t MCP4726A1T_WriteVolatileDACRegister(uint8_t PowerDownBits, uint16_t DAC_Data){
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b086      	sub	sp, #24
 80027d0:	af02      	add	r7, sp, #8
 80027d2:	4603      	mov	r3, r0
 80027d4:	460a      	mov	r2, r1
 80027d6:	71fb      	strb	r3, [r7, #7]
 80027d8:	4613      	mov	r3, r2
 80027da:	80bb      	strh	r3, [r7, #4]

	//Check passed parameters for invalid information
	if(PowerDownBits != PD_NO && PowerDownBits != PD_1K && PowerDownBits != PD_100K && PowerDownBits != PD_500K ){ return DAC_ERROR_PARAMETER; }
 80027dc:	79fb      	ldrb	r3, [r7, #7]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d00b      	beq.n	80027fa <MCP4726A1T_WriteVolatileDACRegister+0x2e>
 80027e2:	79fb      	ldrb	r3, [r7, #7]
 80027e4:	2b01      	cmp	r3, #1
 80027e6:	d008      	beq.n	80027fa <MCP4726A1T_WriteVolatileDACRegister+0x2e>
 80027e8:	79fb      	ldrb	r3, [r7, #7]
 80027ea:	2b02      	cmp	r3, #2
 80027ec:	d005      	beq.n	80027fa <MCP4726A1T_WriteVolatileDACRegister+0x2e>
 80027ee:	79fb      	ldrb	r3, [r7, #7]
 80027f0:	2b03      	cmp	r3, #3
 80027f2:	d002      	beq.n	80027fa <MCP4726A1T_WriteVolatileDACRegister+0x2e>
 80027f4:	f06f 0302 	mvn.w	r3, #2
 80027f8:	e044      	b.n	8002884 <MCP4726A1T_WriteVolatileDACRegister+0xb8>
	if(DAC_Data>0x0FFF){ return DAC_ERROR_PARAMETER; }
 80027fa:	88bb      	ldrh	r3, [r7, #4]
 80027fc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002800:	d302      	bcc.n	8002808 <MCP4726A1T_WriteVolatileDACRegister+0x3c>
 8002802:	f06f 0302 	mvn.w	r3, #2
 8002806:	e03d      	b.n	8002884 <MCP4726A1T_WriteVolatileDACRegister+0xb8>

	//Combined the I2C general call command and the device address information (shift device address by 1 for r/w bit)
	uint16_t I2C_DeviceAddress = (I2C_GeneralCall<<8) | (DeviceAddr<<1);
 8002808:	2300      	movs	r3, #0
 800280a:	021b      	lsls	r3, r3, #8
 800280c:	b21a      	sxth	r2, r3
 800280e:	2361      	movs	r3, #97	@ 0x61
 8002810:	005b      	lsls	r3, r3, #1
 8002812:	b21b      	sxth	r3, r3
 8002814:	4313      	orrs	r3, r2
 8002816:	b21b      	sxth	r3, r3
 8002818:	81fb      	strh	r3, [r7, #14]

	//Format the passed DAC data to big endian
	uint8_t DAC_Data_BigEndian[2];
	DAC_Data = DAC_Data&0x0FFF;
 800281a:	88bb      	ldrh	r3, [r7, #4]
 800281c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002820:	80bb      	strh	r3, [r7, #4]
	DAC_Data_BigEndian[0] = (uint8_t)((DAC_Data>>8)&0x00FF);
 8002822:	88bb      	ldrh	r3, [r7, #4]
 8002824:	0a1b      	lsrs	r3, r3, #8
 8002826:	b29b      	uxth	r3, r3
 8002828:	b2db      	uxtb	r3, r3
 800282a:	733b      	strb	r3, [r7, #12]
	DAC_Data_BigEndian[1] = (uint8_t)(DAC_Data&0x00FF);
 800282c:	88bb      	ldrh	r3, [r7, #4]
 800282e:	b2db      	uxtb	r3, r3
 8002830:	737b      	strb	r3, [r7, #13]

	//Create a data payload containing the write data
	uint8_t WriteBuffer[2];
	WriteBuffer[0] = 0x00 | (PowerDownBits&0x03)<<4 | (DAC_Data_BigEndian[0]&0x0F);
 8002832:	79fb      	ldrb	r3, [r7, #7]
 8002834:	011b      	lsls	r3, r3, #4
 8002836:	b25b      	sxtb	r3, r3
 8002838:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800283c:	b25a      	sxtb	r2, r3
 800283e:	7b3b      	ldrb	r3, [r7, #12]
 8002840:	b25b      	sxtb	r3, r3
 8002842:	f003 030f 	and.w	r3, r3, #15
 8002846:	b25b      	sxtb	r3, r3
 8002848:	4313      	orrs	r3, r2
 800284a:	b25b      	sxtb	r3, r3
 800284c:	b2db      	uxtb	r3, r3
 800284e:	723b      	strb	r3, [r7, #8]
	WriteBuffer[1] = DAC_Data_BigEndian[1];
 8002850:	7b7b      	ldrb	r3, [r7, #13]
 8002852:	727b      	strb	r3, [r7, #9]

	//Write the buffer data to the DAC IC
	hal_i2c_status = HAL_I2C_Master_Transmit(&I2C_SYS, I2C_DeviceAddress, WriteBuffer, 2, 100);
 8002854:	f107 0208 	add.w	r2, r7, #8
 8002858:	89f9      	ldrh	r1, [r7, #14]
 800285a:	2364      	movs	r3, #100	@ 0x64
 800285c:	9300      	str	r3, [sp, #0]
 800285e:	2302      	movs	r3, #2
 8002860:	480a      	ldr	r0, [pc, #40]	@ (800288c <MCP4726A1T_WriteVolatileDACRegister+0xc0>)
 8002862:	f003 f947 	bl	8005af4 <HAL_I2C_Master_Transmit>
 8002866:	4603      	mov	r3, r0
 8002868:	461a      	mov	r2, r3
 800286a:	4b09      	ldr	r3, [pc, #36]	@ (8002890 <MCP4726A1T_WriteVolatileDACRegister+0xc4>)
 800286c:	701a      	strb	r2, [r3, #0]
	if( hal_i2c_status != HAL_OK ){	return DAC_ERROR_I2C_WRITE;	}
 800286e:	4b08      	ldr	r3, [pc, #32]	@ (8002890 <MCP4726A1T_WriteVolatileDACRegister+0xc4>)
 8002870:	781b      	ldrb	r3, [r3, #0]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d002      	beq.n	800287c <MCP4726A1T_WriteVolatileDACRegister+0xb0>
 8002876:	f06f 0301 	mvn.w	r3, #1
 800287a:	e003      	b.n	8002884 <MCP4726A1T_WriteVolatileDACRegister+0xb8>

	//Wait 50ms for max EEPROM programming time
	HAL_Delay(50);
 800287c:	2032      	movs	r0, #50	@ 0x32
 800287e:	f001 f873 	bl	8003968 <HAL_Delay>

	//Return success code
	return DAC_STATUS_OK;
 8002882:	2300      	movs	r3, #0

}
 8002884:	4618      	mov	r0, r3
 8002886:	3710      	adds	r7, #16
 8002888:	46bd      	mov	sp, r7
 800288a:	bd80      	pop	{r7, pc}
 800288c:	200002b8 	.word	0x200002b8
 8002890:	200005b6 	.word	0x200005b6

08002894 <MCP4726A1T_ReadAllMemory>:
}


//Function to read data from eeprom and volatile DAC memory
//Read array must be 6 bytes in length
dac_status_t MCP4726A1T_ReadAllMemory(uint8_t* ReadArray){
 8002894:	b580      	push	{r7, lr}
 8002896:	b086      	sub	sp, #24
 8002898:	af02      	add	r7, sp, #8
 800289a:	6078      	str	r0, [r7, #4]

	//Check passed parameters for invalid information
	if(ReadArray == NULL ){ return DAC_ERROR_PARAMETER; }
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d102      	bne.n	80028a8 <MCP4726A1T_ReadAllMemory+0x14>
 80028a2:	f06f 0302 	mvn.w	r3, #2
 80028a6:	e01f      	b.n	80028e8 <MCP4726A1T_ReadAllMemory+0x54>

	//Combined the I2C general call command and the device address information (shift device address by 1 for r/w bit)
	uint16_t I2C_DeviceAddress = (I2C_GeneralCall<<8) | (DeviceAddr<<1);
 80028a8:	2300      	movs	r3, #0
 80028aa:	021b      	lsls	r3, r3, #8
 80028ac:	b21a      	sxth	r2, r3
 80028ae:	2361      	movs	r3, #97	@ 0x61
 80028b0:	005b      	lsls	r3, r3, #1
 80028b2:	b21b      	sxth	r3, r3
 80028b4:	4313      	orrs	r3, r2
 80028b6:	b21b      	sxth	r3, r3
 80028b8:	81fb      	strh	r3, [r7, #14]

	//Issue the read command to the DAC and receive the data from memory
	hal_i2c_status = HAL_I2C_Master_Receive(&I2C_SYS, I2C_DeviceAddress|0x01, ReadArray, 6, 100);
 80028ba:	89fb      	ldrh	r3, [r7, #14]
 80028bc:	f043 0301 	orr.w	r3, r3, #1
 80028c0:	b299      	uxth	r1, r3
 80028c2:	2364      	movs	r3, #100	@ 0x64
 80028c4:	9300      	str	r3, [sp, #0]
 80028c6:	2306      	movs	r3, #6
 80028c8:	687a      	ldr	r2, [r7, #4]
 80028ca:	4809      	ldr	r0, [pc, #36]	@ (80028f0 <MCP4726A1T_ReadAllMemory+0x5c>)
 80028cc:	f003 fa06 	bl	8005cdc <HAL_I2C_Master_Receive>
 80028d0:	4603      	mov	r3, r0
 80028d2:	461a      	mov	r2, r3
 80028d4:	4b07      	ldr	r3, [pc, #28]	@ (80028f4 <MCP4726A1T_ReadAllMemory+0x60>)
 80028d6:	701a      	strb	r2, [r3, #0]
	if( hal_i2c_status != HAL_OK ){ return DAC_ERROR_I2C_READ; }
 80028d8:	4b06      	ldr	r3, [pc, #24]	@ (80028f4 <MCP4726A1T_ReadAllMemory+0x60>)
 80028da:	781b      	ldrb	r3, [r3, #0]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d002      	beq.n	80028e6 <MCP4726A1T_ReadAllMemory+0x52>
 80028e0:	f04f 33ff 	mov.w	r3, #4294967295
 80028e4:	e000      	b.n	80028e8 <MCP4726A1T_ReadAllMemory+0x54>

	//Return success code
	return DAC_STATUS_OK;
 80028e6:	2300      	movs	r3, #0

}
 80028e8:	4618      	mov	r0, r3
 80028ea:	3710      	adds	r7, #16
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bd80      	pop	{r7, pc}
 80028f0:	200002b8 	.word	0x200002b8
 80028f4:	200005b6 	.word	0x200005b6

080028f8 <CANSetup>:
////////////////////////////////////////    CANBus System Setup and Activation Function ///////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


//Setup for transmitting CANbus
void CANSetup(uint16_t CANBusID){
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b082      	sub	sp, #8
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	4603      	mov	r3, r0
 8002900:	80fb      	strh	r3, [r7, #6]

	//Setup transmit header 0 CAN headers
	pTxHeader.StdId = 0x0400;				 	 // 11 bit ID
 8002902:	4ba8      	ldr	r3, [pc, #672]	@ (8002ba4 <CANSetup+0x2ac>)
 8002904:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002908:	601a      	str	r2, [r3, #0]
	pTxHeader.DLC	= 8;						 // Specifies that 8 bytes will be transmitted per message
 800290a:	4ba6      	ldr	r3, [pc, #664]	@ (8002ba4 <CANSetup+0x2ac>)
 800290c:	2208      	movs	r2, #8
 800290e:	611a      	str	r2, [r3, #16]
	pTxHeader.IDE 	= CAN_ID_STD; 			     // Specifies standard ID (11-bit ID)
 8002910:	4ba4      	ldr	r3, [pc, #656]	@ (8002ba4 <CANSetup+0x2ac>)
 8002912:	2200      	movs	r2, #0
 8002914:	609a      	str	r2, [r3, #8]
	pTxHeader.RTR 	= CAN_RTR_DATA; 			 // Specifies data type as "Data Frame"
 8002916:	4ba3      	ldr	r3, [pc, #652]	@ (8002ba4 <CANSetup+0x2ac>)
 8002918:	2200      	movs	r2, #0
 800291a:	60da      	str	r2, [r3, #12]

	//Setup for CAN filter 0 - Used for FIFO0
	sFilterConfig0.FilterBank  		 	= 0;
 800291c:	4ba2      	ldr	r3, [pc, #648]	@ (8002ba8 <CANSetup+0x2b0>)
 800291e:	2200      	movs	r2, #0
 8002920:	615a      	str	r2, [r3, #20]
	sFilterConfig0.FilterMode   		= CAN_FILTERMODE_IDLIST;
 8002922:	4ba1      	ldr	r3, [pc, #644]	@ (8002ba8 <CANSetup+0x2b0>)
 8002924:	2201      	movs	r2, #1
 8002926:	619a      	str	r2, [r3, #24]
	sFilterConfig0.FilterScale  		= CAN_FILTERSCALE_16BIT;
 8002928:	4b9f      	ldr	r3, [pc, #636]	@ (8002ba8 <CANSetup+0x2b0>)
 800292a:	2200      	movs	r2, #0
 800292c:	61da      	str	r2, [r3, #28]
	sFilterConfig0.FilterIdHigh			= (CANBusID&0x01FF)<<5;
 800292e:	88fb      	ldrh	r3, [r7, #6]
 8002930:	015a      	lsls	r2, r3, #5
 8002932:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 8002936:	4013      	ands	r3, r2
 8002938:	4a9b      	ldr	r2, [pc, #620]	@ (8002ba8 <CANSetup+0x2b0>)
 800293a:	6013      	str	r3, [r2, #0]
	sFilterConfig0.FilterIdLow  		= (0x0000)<<5;
 800293c:	4b9a      	ldr	r3, [pc, #616]	@ (8002ba8 <CANSetup+0x2b0>)
 800293e:	2200      	movs	r2, #0
 8002940:	605a      	str	r2, [r3, #4]
	sFilterConfig0.FilterMaskIdHigh 	= (0x0000)<<5;
 8002942:	4b99      	ldr	r3, [pc, #612]	@ (8002ba8 <CANSetup+0x2b0>)
 8002944:	2200      	movs	r2, #0
 8002946:	609a      	str	r2, [r3, #8]
	sFilterConfig0.FilterMaskIdLow 		= (0x0000)<<5;
 8002948:	4b97      	ldr	r3, [pc, #604]	@ (8002ba8 <CANSetup+0x2b0>)
 800294a:	2200      	movs	r2, #0
 800294c:	60da      	str	r2, [r3, #12]
	sFilterConfig0.FilterFIFOAssignment = CAN_RX_FIFO0;
 800294e:	4b96      	ldr	r3, [pc, #600]	@ (8002ba8 <CANSetup+0x2b0>)
 8002950:	2200      	movs	r2, #0
 8002952:	611a      	str	r2, [r3, #16]
	sFilterConfig0.FilterActivation 	= ENABLE;
 8002954:	4b94      	ldr	r3, [pc, #592]	@ (8002ba8 <CANSetup+0x2b0>)
 8002956:	2201      	movs	r2, #1
 8002958:	621a      	str	r2, [r3, #32]

	//Setup for CAN filter 1 - Used for FIFO1
	sFilterConfig1.FilterBank 			= 1;
 800295a:	4b94      	ldr	r3, [pc, #592]	@ (8002bac <CANSetup+0x2b4>)
 800295c:	2201      	movs	r2, #1
 800295e:	615a      	str	r2, [r3, #20]
	sFilterConfig1.FilterMode 			= CAN_FILTERMODE_IDLIST;
 8002960:	4b92      	ldr	r3, [pc, #584]	@ (8002bac <CANSetup+0x2b4>)
 8002962:	2201      	movs	r2, #1
 8002964:	619a      	str	r2, [r3, #24]
	sFilterConfig1.FilterScale 			= CAN_FILTERSCALE_16BIT;
 8002966:	4b91      	ldr	r3, [pc, #580]	@ (8002bac <CANSetup+0x2b4>)
 8002968:	2200      	movs	r2, #0
 800296a:	61da      	str	r2, [r3, #28]
	sFilterConfig1.FilterIdHigh			= ((CANBusID&0x01FF)|0x0200)<<5;
 800296c:	88fb      	ldrh	r3, [r7, #6]
 800296e:	015a      	lsls	r2, r3, #5
 8002970:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 8002974:	4013      	ands	r3, r2
 8002976:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800297a:	461a      	mov	r2, r3
 800297c:	4b8b      	ldr	r3, [pc, #556]	@ (8002bac <CANSetup+0x2b4>)
 800297e:	601a      	str	r2, [r3, #0]
	sFilterConfig1.FilterIdLow 			= (0x0200)<<5;
 8002980:	4b8a      	ldr	r3, [pc, #552]	@ (8002bac <CANSetup+0x2b4>)
 8002982:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002986:	605a      	str	r2, [r3, #4]
	sFilterConfig1.FilterMaskIdHigh     = (0x0200)<<5;
 8002988:	4b88      	ldr	r3, [pc, #544]	@ (8002bac <CANSetup+0x2b4>)
 800298a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800298e:	609a      	str	r2, [r3, #8]
	sFilterConfig1.FilterMaskIdLow 	    = (0x0200)<<5;
 8002990:	4b86      	ldr	r3, [pc, #536]	@ (8002bac <CANSetup+0x2b4>)
 8002992:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002996:	60da      	str	r2, [r3, #12]
	sFilterConfig1.FilterFIFOAssignment = CAN_RX_FIFO1;
 8002998:	4b84      	ldr	r3, [pc, #528]	@ (8002bac <CANSetup+0x2b4>)
 800299a:	2201      	movs	r2, #1
 800299c:	611a      	str	r2, [r3, #16]
	sFilterConfig1.FilterActivation 	= ENABLE;
 800299e:	4b83      	ldr	r3, [pc, #524]	@ (8002bac <CANSetup+0x2b4>)
 80029a0:	2201      	movs	r2, #1
 80029a2:	621a      	str	r2, [r3, #32]


	//Print CANBus Initialization message
    memset(PrintBuffer, '\0', COMM_SIZE);  snprintf(PrintBuffer, COMM_SIZE-1, "\n\n\rCANBus Initialization Sequence:" );
 80029a4:	2280      	movs	r2, #128	@ 0x80
 80029a6:	2100      	movs	r1, #0
 80029a8:	4881      	ldr	r0, [pc, #516]	@ (8002bb0 <CANSetup+0x2b8>)
 80029aa:	f007 fa8e 	bl	8009eca <memset>
 80029ae:	4a81      	ldr	r2, [pc, #516]	@ (8002bb4 <CANSetup+0x2bc>)
 80029b0:	217f      	movs	r1, #127	@ 0x7f
 80029b2:	487f      	ldr	r0, [pc, #508]	@ (8002bb0 <CANSetup+0x2b8>)
 80029b4:	f007 f9f2 	bl	8009d9c <sniprintf>
  	DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE);
 80029b8:	4b7f      	ldr	r3, [pc, #508]	@ (8002bb8 <CANSetup+0x2c0>)
 80029ba:	781b      	ldrb	r3, [r3, #0]
 80029bc:	2280      	movs	r2, #128	@ 0x80
 80029be:	497c      	ldr	r1, [pc, #496]	@ (8002bb0 <CANSetup+0x2b8>)
 80029c0:	4618      	mov	r0, r3
 80029c2:	f7fe fbb5 	bl	8001130 <DebugPrint>


	//Init Config Filter 0
	ret=HAL_CAN_ConfigFilter(&CANBUS_EXT, &sFilterConfig0);
 80029c6:	4978      	ldr	r1, [pc, #480]	@ (8002ba8 <CANSetup+0x2b0>)
 80029c8:	487c      	ldr	r0, [pc, #496]	@ (8002bbc <CANSetup+0x2c4>)
 80029ca:	f002 f9bc 	bl	8004d46 <HAL_CAN_ConfigFilter>
 80029ce:	4603      	mov	r3, r0
 80029d0:	461a      	mov	r2, r3
 80029d2:	4b7b      	ldr	r3, [pc, #492]	@ (8002bc0 <CANSetup+0x2c8>)
 80029d4:	701a      	strb	r2, [r3, #0]
	if( ret != HAL_OK ) {
 80029d6:	4b7a      	ldr	r3, [pc, #488]	@ (8002bc0 <CANSetup+0x2c8>)
 80029d8:	781b      	ldrb	r3, [r3, #0]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d011      	beq.n	8002a02 <CANSetup+0x10a>
	    memset(PrintBuffer, '\0', COMM_SIZE);  snprintf(PrintBuffer, COMM_SIZE-1, "\n\r    - CAN ERROR - Config filter 0 failed to be set" );
 80029de:	2280      	movs	r2, #128	@ 0x80
 80029e0:	2100      	movs	r1, #0
 80029e2:	4873      	ldr	r0, [pc, #460]	@ (8002bb0 <CANSetup+0x2b8>)
 80029e4:	f007 fa71 	bl	8009eca <memset>
 80029e8:	4a76      	ldr	r2, [pc, #472]	@ (8002bc4 <CANSetup+0x2cc>)
 80029ea:	217f      	movs	r1, #127	@ 0x7f
 80029ec:	4870      	ldr	r0, [pc, #448]	@ (8002bb0 <CANSetup+0x2b8>)
 80029ee:	f007 f9d5 	bl	8009d9c <sniprintf>
	  	DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE);
 80029f2:	4b71      	ldr	r3, [pc, #452]	@ (8002bb8 <CANSetup+0x2c0>)
 80029f4:	781b      	ldrb	r3, [r3, #0]
 80029f6:	2280      	movs	r2, #128	@ 0x80
 80029f8:	496d      	ldr	r1, [pc, #436]	@ (8002bb0 <CANSetup+0x2b8>)
 80029fa:	4618      	mov	r0, r3
 80029fc:	f7fe fb98 	bl	8001130 <DebugPrint>
 8002a00:	e010      	b.n	8002a24 <CANSetup+0x12c>
	}else {
		memset(PrintBuffer, '\0', COMM_SIZE);  snprintf(PrintBuffer, COMM_SIZE-1, "\n\r    - Config Filter 0 Set" );
 8002a02:	2280      	movs	r2, #128	@ 0x80
 8002a04:	2100      	movs	r1, #0
 8002a06:	486a      	ldr	r0, [pc, #424]	@ (8002bb0 <CANSetup+0x2b8>)
 8002a08:	f007 fa5f 	bl	8009eca <memset>
 8002a0c:	4a6e      	ldr	r2, [pc, #440]	@ (8002bc8 <CANSetup+0x2d0>)
 8002a0e:	217f      	movs	r1, #127	@ 0x7f
 8002a10:	4867      	ldr	r0, [pc, #412]	@ (8002bb0 <CANSetup+0x2b8>)
 8002a12:	f007 f9c3 	bl	8009d9c <sniprintf>
		DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE);
 8002a16:	4b68      	ldr	r3, [pc, #416]	@ (8002bb8 <CANSetup+0x2c0>)
 8002a18:	781b      	ldrb	r3, [r3, #0]
 8002a1a:	2280      	movs	r2, #128	@ 0x80
 8002a1c:	4964      	ldr	r1, [pc, #400]	@ (8002bb0 <CANSetup+0x2b8>)
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f7fe fb86 	bl	8001130 <DebugPrint>
	}

	//Init Config Filter 1
	ret=HAL_CAN_ConfigFilter(&CANBUS_EXT, &sFilterConfig1);
 8002a24:	4961      	ldr	r1, [pc, #388]	@ (8002bac <CANSetup+0x2b4>)
 8002a26:	4865      	ldr	r0, [pc, #404]	@ (8002bbc <CANSetup+0x2c4>)
 8002a28:	f002 f98d 	bl	8004d46 <HAL_CAN_ConfigFilter>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	461a      	mov	r2, r3
 8002a30:	4b63      	ldr	r3, [pc, #396]	@ (8002bc0 <CANSetup+0x2c8>)
 8002a32:	701a      	strb	r2, [r3, #0]
	if( ret != HAL_OK ) {
 8002a34:	4b62      	ldr	r3, [pc, #392]	@ (8002bc0 <CANSetup+0x2c8>)
 8002a36:	781b      	ldrb	r3, [r3, #0]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d011      	beq.n	8002a60 <CANSetup+0x168>
	    memset(PrintBuffer, '\0', COMM_SIZE);  snprintf(PrintBuffer, COMM_SIZE-1, "\n\r    - CAN ERROR - Config Filter 1 Failed" );
 8002a3c:	2280      	movs	r2, #128	@ 0x80
 8002a3e:	2100      	movs	r1, #0
 8002a40:	485b      	ldr	r0, [pc, #364]	@ (8002bb0 <CANSetup+0x2b8>)
 8002a42:	f007 fa42 	bl	8009eca <memset>
 8002a46:	4a61      	ldr	r2, [pc, #388]	@ (8002bcc <CANSetup+0x2d4>)
 8002a48:	217f      	movs	r1, #127	@ 0x7f
 8002a4a:	4859      	ldr	r0, [pc, #356]	@ (8002bb0 <CANSetup+0x2b8>)
 8002a4c:	f007 f9a6 	bl	8009d9c <sniprintf>
	  	DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE);
 8002a50:	4b59      	ldr	r3, [pc, #356]	@ (8002bb8 <CANSetup+0x2c0>)
 8002a52:	781b      	ldrb	r3, [r3, #0]
 8002a54:	2280      	movs	r2, #128	@ 0x80
 8002a56:	4956      	ldr	r1, [pc, #344]	@ (8002bb0 <CANSetup+0x2b8>)
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f7fe fb69 	bl	8001130 <DebugPrint>
 8002a5e:	e010      	b.n	8002a82 <CANSetup+0x18a>
	}else {
		memset(PrintBuffer, '\0', COMM_SIZE);  snprintf(PrintBuffer, COMM_SIZE-1, "\n\r    - Config Filter 1 Set" );
 8002a60:	2280      	movs	r2, #128	@ 0x80
 8002a62:	2100      	movs	r1, #0
 8002a64:	4852      	ldr	r0, [pc, #328]	@ (8002bb0 <CANSetup+0x2b8>)
 8002a66:	f007 fa30 	bl	8009eca <memset>
 8002a6a:	4a59      	ldr	r2, [pc, #356]	@ (8002bd0 <CANSetup+0x2d8>)
 8002a6c:	217f      	movs	r1, #127	@ 0x7f
 8002a6e:	4850      	ldr	r0, [pc, #320]	@ (8002bb0 <CANSetup+0x2b8>)
 8002a70:	f007 f994 	bl	8009d9c <sniprintf>
		DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE);
 8002a74:	4b50      	ldr	r3, [pc, #320]	@ (8002bb8 <CANSetup+0x2c0>)
 8002a76:	781b      	ldrb	r3, [r3, #0]
 8002a78:	2280      	movs	r2, #128	@ 0x80
 8002a7a:	494d      	ldr	r1, [pc, #308]	@ (8002bb0 <CANSetup+0x2b8>)
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	f7fe fb57 	bl	8001130 <DebugPrint>
	}

	//Start Notifications on Receive for FIFO0
	ret=HAL_CAN_ActivateNotification(&CANBUS_EXT, CAN_IT_RX_FIFO0_MSG_PENDING);
 8002a82:	2102      	movs	r1, #2
 8002a84:	484d      	ldr	r0, [pc, #308]	@ (8002bbc <CANSetup+0x2c4>)
 8002a86:	f002 fc86 	bl	8005396 <HAL_CAN_ActivateNotification>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	461a      	mov	r2, r3
 8002a8e:	4b4c      	ldr	r3, [pc, #304]	@ (8002bc0 <CANSetup+0x2c8>)
 8002a90:	701a      	strb	r2, [r3, #0]
	if ( ret != HAL_OK ) {
 8002a92:	4b4b      	ldr	r3, [pc, #300]	@ (8002bc0 <CANSetup+0x2c8>)
 8002a94:	781b      	ldrb	r3, [r3, #0]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d011      	beq.n	8002abe <CANSetup+0x1c6>
		memset(PrintBuffer, '\0', COMM_SIZE);  snprintf(PrintBuffer, COMM_SIZE-1, "\n\r    - CAN ERROR - Activate FIFO0 Notification Failed"  );
 8002a9a:	2280      	movs	r2, #128	@ 0x80
 8002a9c:	2100      	movs	r1, #0
 8002a9e:	4844      	ldr	r0, [pc, #272]	@ (8002bb0 <CANSetup+0x2b8>)
 8002aa0:	f007 fa13 	bl	8009eca <memset>
 8002aa4:	4a4b      	ldr	r2, [pc, #300]	@ (8002bd4 <CANSetup+0x2dc>)
 8002aa6:	217f      	movs	r1, #127	@ 0x7f
 8002aa8:	4841      	ldr	r0, [pc, #260]	@ (8002bb0 <CANSetup+0x2b8>)
 8002aaa:	f007 f977 	bl	8009d9c <sniprintf>
		DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE);
 8002aae:	4b42      	ldr	r3, [pc, #264]	@ (8002bb8 <CANSetup+0x2c0>)
 8002ab0:	781b      	ldrb	r3, [r3, #0]
 8002ab2:	2280      	movs	r2, #128	@ 0x80
 8002ab4:	493e      	ldr	r1, [pc, #248]	@ (8002bb0 <CANSetup+0x2b8>)
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f7fe fb3a 	bl	8001130 <DebugPrint>
 8002abc:	e010      	b.n	8002ae0 <CANSetup+0x1e8>
	}else{
		memset(PrintBuffer, '\0', COMM_SIZE);  snprintf(PrintBuffer, COMM_SIZE-1, "\n\r    - Notification on FIFO0 Receive Started" );
 8002abe:	2280      	movs	r2, #128	@ 0x80
 8002ac0:	2100      	movs	r1, #0
 8002ac2:	483b      	ldr	r0, [pc, #236]	@ (8002bb0 <CANSetup+0x2b8>)
 8002ac4:	f007 fa01 	bl	8009eca <memset>
 8002ac8:	4a43      	ldr	r2, [pc, #268]	@ (8002bd8 <CANSetup+0x2e0>)
 8002aca:	217f      	movs	r1, #127	@ 0x7f
 8002acc:	4838      	ldr	r0, [pc, #224]	@ (8002bb0 <CANSetup+0x2b8>)
 8002ace:	f007 f965 	bl	8009d9c <sniprintf>
		DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE);
 8002ad2:	4b39      	ldr	r3, [pc, #228]	@ (8002bb8 <CANSetup+0x2c0>)
 8002ad4:	781b      	ldrb	r3, [r3, #0]
 8002ad6:	2280      	movs	r2, #128	@ 0x80
 8002ad8:	4935      	ldr	r1, [pc, #212]	@ (8002bb0 <CANSetup+0x2b8>)
 8002ada:	4618      	mov	r0, r3
 8002adc:	f7fe fb28 	bl	8001130 <DebugPrint>
	}


	//Start Notifications on Receive for FIFO1
		ret=HAL_CAN_ActivateNotification(&CANBUS_EXT, CAN_IT_RX_FIFO1_MSG_PENDING);
 8002ae0:	2110      	movs	r1, #16
 8002ae2:	4836      	ldr	r0, [pc, #216]	@ (8002bbc <CANSetup+0x2c4>)
 8002ae4:	f002 fc57 	bl	8005396 <HAL_CAN_ActivateNotification>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	461a      	mov	r2, r3
 8002aec:	4b34      	ldr	r3, [pc, #208]	@ (8002bc0 <CANSetup+0x2c8>)
 8002aee:	701a      	strb	r2, [r3, #0]
		if ( ret != HAL_OK ) {
 8002af0:	4b33      	ldr	r3, [pc, #204]	@ (8002bc0 <CANSetup+0x2c8>)
 8002af2:	781b      	ldrb	r3, [r3, #0]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d011      	beq.n	8002b1c <CANSetup+0x224>
			memset(PrintBuffer, '\0', COMM_SIZE);  snprintf(PrintBuffer, COMM_SIZE-1, "\n\r    - CAN ERROR - Activate FIFO1 Notification Failed"  );
 8002af8:	2280      	movs	r2, #128	@ 0x80
 8002afa:	2100      	movs	r1, #0
 8002afc:	482c      	ldr	r0, [pc, #176]	@ (8002bb0 <CANSetup+0x2b8>)
 8002afe:	f007 f9e4 	bl	8009eca <memset>
 8002b02:	4a36      	ldr	r2, [pc, #216]	@ (8002bdc <CANSetup+0x2e4>)
 8002b04:	217f      	movs	r1, #127	@ 0x7f
 8002b06:	482a      	ldr	r0, [pc, #168]	@ (8002bb0 <CANSetup+0x2b8>)
 8002b08:	f007 f948 	bl	8009d9c <sniprintf>
			DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE);
 8002b0c:	4b2a      	ldr	r3, [pc, #168]	@ (8002bb8 <CANSetup+0x2c0>)
 8002b0e:	781b      	ldrb	r3, [r3, #0]
 8002b10:	2280      	movs	r2, #128	@ 0x80
 8002b12:	4927      	ldr	r1, [pc, #156]	@ (8002bb0 <CANSetup+0x2b8>)
 8002b14:	4618      	mov	r0, r3
 8002b16:	f7fe fb0b 	bl	8001130 <DebugPrint>
 8002b1a:	e010      	b.n	8002b3e <CANSetup+0x246>
		}else{
			memset(PrintBuffer, '\0', COMM_SIZE);  snprintf(PrintBuffer, COMM_SIZE-1, "\n\r    - Notification on FIFO1 Receive Started" );
 8002b1c:	2280      	movs	r2, #128	@ 0x80
 8002b1e:	2100      	movs	r1, #0
 8002b20:	4823      	ldr	r0, [pc, #140]	@ (8002bb0 <CANSetup+0x2b8>)
 8002b22:	f007 f9d2 	bl	8009eca <memset>
 8002b26:	4a2e      	ldr	r2, [pc, #184]	@ (8002be0 <CANSetup+0x2e8>)
 8002b28:	217f      	movs	r1, #127	@ 0x7f
 8002b2a:	4821      	ldr	r0, [pc, #132]	@ (8002bb0 <CANSetup+0x2b8>)
 8002b2c:	f007 f936 	bl	8009d9c <sniprintf>
			DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE);
 8002b30:	4b21      	ldr	r3, [pc, #132]	@ (8002bb8 <CANSetup+0x2c0>)
 8002b32:	781b      	ldrb	r3, [r3, #0]
 8002b34:	2280      	movs	r2, #128	@ 0x80
 8002b36:	491e      	ldr	r1, [pc, #120]	@ (8002bb0 <CANSetup+0x2b8>)
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f7fe faf9 	bl	8001130 <DebugPrint>
		}


	//Start the CANBus
	ret=HAL_CAN_Start(&CANBUS_EXT);
 8002b3e:	481f      	ldr	r0, [pc, #124]	@ (8002bbc <CANSetup+0x2c4>)
 8002b40:	f002 f9cb 	bl	8004eda <HAL_CAN_Start>
 8002b44:	4603      	mov	r3, r0
 8002b46:	461a      	mov	r2, r3
 8002b48:	4b1d      	ldr	r3, [pc, #116]	@ (8002bc0 <CANSetup+0x2c8>)
 8002b4a:	701a      	strb	r2, [r3, #0]
	if ( ret != HAL_OK ) {
 8002b4c:	4b1c      	ldr	r3, [pc, #112]	@ (8002bc0 <CANSetup+0x2c8>)
 8002b4e:	781b      	ldrb	r3, [r3, #0]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d011      	beq.n	8002b78 <CANSetup+0x280>
		memset(PrintBuffer, '\0', COMM_SIZE);  snprintf(PrintBuffer, COMM_SIZE-1, "\n\rERROR - CANBus Hardware Start Failed"  );
 8002b54:	2280      	movs	r2, #128	@ 0x80
 8002b56:	2100      	movs	r1, #0
 8002b58:	4815      	ldr	r0, [pc, #84]	@ (8002bb0 <CANSetup+0x2b8>)
 8002b5a:	f007 f9b6 	bl	8009eca <memset>
 8002b5e:	4a21      	ldr	r2, [pc, #132]	@ (8002be4 <CANSetup+0x2ec>)
 8002b60:	217f      	movs	r1, #127	@ 0x7f
 8002b62:	4813      	ldr	r0, [pc, #76]	@ (8002bb0 <CANSetup+0x2b8>)
 8002b64:	f007 f91a 	bl	8009d9c <sniprintf>
		DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE);
 8002b68:	4b13      	ldr	r3, [pc, #76]	@ (8002bb8 <CANSetup+0x2c0>)
 8002b6a:	781b      	ldrb	r3, [r3, #0]
 8002b6c:	2280      	movs	r2, #128	@ 0x80
 8002b6e:	4910      	ldr	r1, [pc, #64]	@ (8002bb0 <CANSetup+0x2b8>)
 8002b70:	4618      	mov	r0, r3
 8002b72:	f7fe fadd 	bl	8001130 <DebugPrint>
		memset(PrintBuffer, '\0', COMM_SIZE);  snprintf(PrintBuffer, COMM_SIZE-1, "\n\rCANBus Hardware Activated"  );
		DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE);
	}


}
 8002b76:	e010      	b.n	8002b9a <CANSetup+0x2a2>
		memset(PrintBuffer, '\0', COMM_SIZE);  snprintf(PrintBuffer, COMM_SIZE-1, "\n\rCANBus Hardware Activated"  );
 8002b78:	2280      	movs	r2, #128	@ 0x80
 8002b7a:	2100      	movs	r1, #0
 8002b7c:	480c      	ldr	r0, [pc, #48]	@ (8002bb0 <CANSetup+0x2b8>)
 8002b7e:	f007 f9a4 	bl	8009eca <memset>
 8002b82:	4a19      	ldr	r2, [pc, #100]	@ (8002be8 <CANSetup+0x2f0>)
 8002b84:	217f      	movs	r1, #127	@ 0x7f
 8002b86:	480a      	ldr	r0, [pc, #40]	@ (8002bb0 <CANSetup+0x2b8>)
 8002b88:	f007 f908 	bl	8009d9c <sniprintf>
		DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE);
 8002b8c:	4b0a      	ldr	r3, [pc, #40]	@ (8002bb8 <CANSetup+0x2c0>)
 8002b8e:	781b      	ldrb	r3, [r3, #0]
 8002b90:	2280      	movs	r2, #128	@ 0x80
 8002b92:	4907      	ldr	r1, [pc, #28]	@ (8002bb0 <CANSetup+0x2b8>)
 8002b94:	4618      	mov	r0, r3
 8002b96:	f7fe facb 	bl	8001130 <DebugPrint>
}
 8002b9a:	bf00      	nop
 8002b9c:	3708      	adds	r7, #8
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bd80      	pop	{r7, pc}
 8002ba2:	bf00      	nop
 8002ba4:	20000570 	.word	0x20000570
 8002ba8:	200005b8 	.word	0x200005b8
 8002bac:	200005e0 	.word	0x200005e0
 8002bb0:	200004ec 	.word	0x200004ec
 8002bb4:	0800d8bc 	.word	0x0800d8bc
 8002bb8:	2000004b 	.word	0x2000004b
 8002bbc:	20000290 	.word	0x20000290
 8002bc0:	200005ac 	.word	0x200005ac
 8002bc4:	0800d8e0 	.word	0x0800d8e0
 8002bc8:	0800d918 	.word	0x0800d918
 8002bcc:	0800d934 	.word	0x0800d934
 8002bd0:	0800d960 	.word	0x0800d960
 8002bd4:	0800d97c 	.word	0x0800d97c
 8002bd8:	0800d9b4 	.word	0x0800d9b4
 8002bdc:	0800d9e4 	.word	0x0800d9e4
 8002be0:	0800da1c 	.word	0x0800da1c
 8002be4:	0800da4c 	.word	0x0800da4c
 8002be8:	0800da74 	.word	0x0800da74

08002bec <StartupPrint_Routine>:
//////////////////////////////////////// Functions to Print System Information to Debug Console  //////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


//Function to print the startup splash message
void StartupPrint_Routine(void){
 8002bec:	b580      	push	{r7, lr}
 8002bee:	af00      	add	r7, sp, #0

	memset(PrintBuffer, '\0', COMM_SIZE);  snprintf(PrintBuffer, COMM_SIZE-1, "\r\n\n\n\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~" );
 8002bf0:	2280      	movs	r2, #128	@ 0x80
 8002bf2:	2100      	movs	r1, #0
 8002bf4:	4821      	ldr	r0, [pc, #132]	@ (8002c7c <StartupPrint_Routine+0x90>)
 8002bf6:	f007 f968 	bl	8009eca <memset>
 8002bfa:	4a21      	ldr	r2, [pc, #132]	@ (8002c80 <StartupPrint_Routine+0x94>)
 8002bfc:	217f      	movs	r1, #127	@ 0x7f
 8002bfe:	481f      	ldr	r0, [pc, #124]	@ (8002c7c <StartupPrint_Routine+0x90>)
 8002c00:	f007 f8cc 	bl	8009d9c <sniprintf>
	DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE);
 8002c04:	4b1f      	ldr	r3, [pc, #124]	@ (8002c84 <StartupPrint_Routine+0x98>)
 8002c06:	781b      	ldrb	r3, [r3, #0]
 8002c08:	2280      	movs	r2, #128	@ 0x80
 8002c0a:	491c      	ldr	r1, [pc, #112]	@ (8002c7c <StartupPrint_Routine+0x90>)
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	f7fe fa8f 	bl	8001130 <DebugPrint>
	memset(PrintBuffer, '\0', COMM_SIZE);  snprintf(PrintBuffer, COMM_SIZE-1, "\n\r~~~~~~~~~~ emewCorporation Electrolyte Monitoring System ~~~~~~~~~~" );
 8002c12:	2280      	movs	r2, #128	@ 0x80
 8002c14:	2100      	movs	r1, #0
 8002c16:	4819      	ldr	r0, [pc, #100]	@ (8002c7c <StartupPrint_Routine+0x90>)
 8002c18:	f007 f957 	bl	8009eca <memset>
 8002c1c:	4a1a      	ldr	r2, [pc, #104]	@ (8002c88 <StartupPrint_Routine+0x9c>)
 8002c1e:	217f      	movs	r1, #127	@ 0x7f
 8002c20:	4816      	ldr	r0, [pc, #88]	@ (8002c7c <StartupPrint_Routine+0x90>)
 8002c22:	f007 f8bb 	bl	8009d9c <sniprintf>
	DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE);
 8002c26:	4b17      	ldr	r3, [pc, #92]	@ (8002c84 <StartupPrint_Routine+0x98>)
 8002c28:	781b      	ldrb	r3, [r3, #0]
 8002c2a:	2280      	movs	r2, #128	@ 0x80
 8002c2c:	4913      	ldr	r1, [pc, #76]	@ (8002c7c <StartupPrint_Routine+0x90>)
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f7fe fa7e 	bl	8001130 <DebugPrint>
	memset(PrintBuffer, '\0', COMM_SIZE);  snprintf(PrintBuffer, COMM_SIZE-1, "\n\r~~~~~~~~~~                   Ion Sensor                  ~~~~~~~~~~" );
 8002c34:	2280      	movs	r2, #128	@ 0x80
 8002c36:	2100      	movs	r1, #0
 8002c38:	4810      	ldr	r0, [pc, #64]	@ (8002c7c <StartupPrint_Routine+0x90>)
 8002c3a:	f007 f946 	bl	8009eca <memset>
 8002c3e:	4a13      	ldr	r2, [pc, #76]	@ (8002c8c <StartupPrint_Routine+0xa0>)
 8002c40:	217f      	movs	r1, #127	@ 0x7f
 8002c42:	480e      	ldr	r0, [pc, #56]	@ (8002c7c <StartupPrint_Routine+0x90>)
 8002c44:	f007 f8aa 	bl	8009d9c <sniprintf>
	DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE);
 8002c48:	4b0e      	ldr	r3, [pc, #56]	@ (8002c84 <StartupPrint_Routine+0x98>)
 8002c4a:	781b      	ldrb	r3, [r3, #0]
 8002c4c:	2280      	movs	r2, #128	@ 0x80
 8002c4e:	490b      	ldr	r1, [pc, #44]	@ (8002c7c <StartupPrint_Routine+0x90>)
 8002c50:	4618      	mov	r0, r3
 8002c52:	f7fe fa6d 	bl	8001130 <DebugPrint>
	memset(PrintBuffer, '\0', COMM_SIZE);  snprintf(PrintBuffer, COMM_SIZE-1, "\n\r~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~" );
 8002c56:	2280      	movs	r2, #128	@ 0x80
 8002c58:	2100      	movs	r1, #0
 8002c5a:	4808      	ldr	r0, [pc, #32]	@ (8002c7c <StartupPrint_Routine+0x90>)
 8002c5c:	f007 f935 	bl	8009eca <memset>
 8002c60:	4a0b      	ldr	r2, [pc, #44]	@ (8002c90 <StartupPrint_Routine+0xa4>)
 8002c62:	217f      	movs	r1, #127	@ 0x7f
 8002c64:	4805      	ldr	r0, [pc, #20]	@ (8002c7c <StartupPrint_Routine+0x90>)
 8002c66:	f007 f899 	bl	8009d9c <sniprintf>
	DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE);
 8002c6a:	4b06      	ldr	r3, [pc, #24]	@ (8002c84 <StartupPrint_Routine+0x98>)
 8002c6c:	781b      	ldrb	r3, [r3, #0]
 8002c6e:	2280      	movs	r2, #128	@ 0x80
 8002c70:	4902      	ldr	r1, [pc, #8]	@ (8002c7c <StartupPrint_Routine+0x90>)
 8002c72:	4618      	mov	r0, r3
 8002c74:	f7fe fa5c 	bl	8001130 <DebugPrint>

}
 8002c78:	bf00      	nop
 8002c7a:	bd80      	pop	{r7, pc}
 8002c7c:	200004ec 	.word	0x200004ec
 8002c80:	0800da90 	.word	0x0800da90
 8002c84:	2000004b 	.word	0x2000004b
 8002c88:	0800dadc 	.word	0x0800dadc
 8002c8c:	0800db24 	.word	0x0800db24
 8002c90:	0800db6c 	.word	0x0800db6c

08002c94 <SystemSettingPrint_Routine>:


//Function to print the sensor information retrieved from the EEPROM IC
void SystemSettingPrint_Routine(void){
 8002c94:	b580      	push	{r7, lr}
 8002c96:	af00      	add	r7, sp, #0

	//Print retrieved information
	memset(PrintBuffer, '\0', COMM_SIZE);  snprintf(PrintBuffer, COMM_SIZE-1, "\n\n\rSystem Information Retrieved:");
 8002c98:	2280      	movs	r2, #128	@ 0x80
 8002c9a:	2100      	movs	r1, #0
 8002c9c:	482e      	ldr	r0, [pc, #184]	@ (8002d58 <SystemSettingPrint_Routine+0xc4>)
 8002c9e:	f007 f914 	bl	8009eca <memset>
 8002ca2:	4a2e      	ldr	r2, [pc, #184]	@ (8002d5c <SystemSettingPrint_Routine+0xc8>)
 8002ca4:	217f      	movs	r1, #127	@ 0x7f
 8002ca6:	482c      	ldr	r0, [pc, #176]	@ (8002d58 <SystemSettingPrint_Routine+0xc4>)
 8002ca8:	f007 f878 	bl	8009d9c <sniprintf>
	DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE);
 8002cac:	4b2c      	ldr	r3, [pc, #176]	@ (8002d60 <SystemSettingPrint_Routine+0xcc>)
 8002cae:	781b      	ldrb	r3, [r3, #0]
 8002cb0:	2280      	movs	r2, #128	@ 0x80
 8002cb2:	4929      	ldr	r1, [pc, #164]	@ (8002d58 <SystemSettingPrint_Routine+0xc4>)
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f7fe fa3b 	bl	8001130 <DebugPrint>
	memset(PrintBuffer, '\0', COMM_SIZE);  snprintf(PrintBuffer, COMM_SIZE-1, "\n\r    - Serial Number:\t0x%04X", SysInfo.SerialNumber );
 8002cba:	2280      	movs	r2, #128	@ 0x80
 8002cbc:	2100      	movs	r1, #0
 8002cbe:	4826      	ldr	r0, [pc, #152]	@ (8002d58 <SystemSettingPrint_Routine+0xc4>)
 8002cc0:	f007 f903 	bl	8009eca <memset>
 8002cc4:	4b27      	ldr	r3, [pc, #156]	@ (8002d64 <SystemSettingPrint_Routine+0xd0>)
 8002cc6:	88db      	ldrh	r3, [r3, #6]
 8002cc8:	4a27      	ldr	r2, [pc, #156]	@ (8002d68 <SystemSettingPrint_Routine+0xd4>)
 8002cca:	217f      	movs	r1, #127	@ 0x7f
 8002ccc:	4822      	ldr	r0, [pc, #136]	@ (8002d58 <SystemSettingPrint_Routine+0xc4>)
 8002cce:	f007 f865 	bl	8009d9c <sniprintf>
	DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE);
 8002cd2:	4b23      	ldr	r3, [pc, #140]	@ (8002d60 <SystemSettingPrint_Routine+0xcc>)
 8002cd4:	781b      	ldrb	r3, [r3, #0]
 8002cd6:	2280      	movs	r2, #128	@ 0x80
 8002cd8:	491f      	ldr	r1, [pc, #124]	@ (8002d58 <SystemSettingPrint_Routine+0xc4>)
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f7fe fa28 	bl	8001130 <DebugPrint>
	memset(PrintBuffer, '\0', COMM_SIZE);  snprintf(PrintBuffer, COMM_SIZE-1, "\n\r    - CAN Address:\t0x%04X", SysInfo.CAN_Address );
 8002ce0:	2280      	movs	r2, #128	@ 0x80
 8002ce2:	2100      	movs	r1, #0
 8002ce4:	481c      	ldr	r0, [pc, #112]	@ (8002d58 <SystemSettingPrint_Routine+0xc4>)
 8002ce6:	f007 f8f0 	bl	8009eca <memset>
 8002cea:	4b1e      	ldr	r3, [pc, #120]	@ (8002d64 <SystemSettingPrint_Routine+0xd0>)
 8002cec:	895b      	ldrh	r3, [r3, #10]
 8002cee:	4a1f      	ldr	r2, [pc, #124]	@ (8002d6c <SystemSettingPrint_Routine+0xd8>)
 8002cf0:	217f      	movs	r1, #127	@ 0x7f
 8002cf2:	4819      	ldr	r0, [pc, #100]	@ (8002d58 <SystemSettingPrint_Routine+0xc4>)
 8002cf4:	f007 f852 	bl	8009d9c <sniprintf>
	DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE);
 8002cf8:	4b19      	ldr	r3, [pc, #100]	@ (8002d60 <SystemSettingPrint_Routine+0xcc>)
 8002cfa:	781b      	ldrb	r3, [r3, #0]
 8002cfc:	2280      	movs	r2, #128	@ 0x80
 8002cfe:	4916      	ldr	r1, [pc, #88]	@ (8002d58 <SystemSettingPrint_Routine+0xc4>)
 8002d00:	4618      	mov	r0, r3
 8002d02:	f7fe fa15 	bl	8001130 <DebugPrint>
	memset(PrintBuffer, '\0', COMM_SIZE);  snprintf(PrintBuffer, COMM_SIZE-1, "\n\r    - Sensor Type:\t%u", SysInfo.SensorType);
 8002d06:	2280      	movs	r2, #128	@ 0x80
 8002d08:	2100      	movs	r1, #0
 8002d0a:	4813      	ldr	r0, [pc, #76]	@ (8002d58 <SystemSettingPrint_Routine+0xc4>)
 8002d0c:	f007 f8dd 	bl	8009eca <memset>
 8002d10:	4b14      	ldr	r3, [pc, #80]	@ (8002d64 <SystemSettingPrint_Routine+0xd0>)
 8002d12:	7a1b      	ldrb	r3, [r3, #8]
 8002d14:	4a16      	ldr	r2, [pc, #88]	@ (8002d70 <SystemSettingPrint_Routine+0xdc>)
 8002d16:	217f      	movs	r1, #127	@ 0x7f
 8002d18:	480f      	ldr	r0, [pc, #60]	@ (8002d58 <SystemSettingPrint_Routine+0xc4>)
 8002d1a:	f007 f83f 	bl	8009d9c <sniprintf>
	DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE);
 8002d1e:	4b10      	ldr	r3, [pc, #64]	@ (8002d60 <SystemSettingPrint_Routine+0xcc>)
 8002d20:	781b      	ldrb	r3, [r3, #0]
 8002d22:	2280      	movs	r2, #128	@ 0x80
 8002d24:	490c      	ldr	r1, [pc, #48]	@ (8002d58 <SystemSettingPrint_Routine+0xc4>)
 8002d26:	4618      	mov	r0, r3
 8002d28:	f7fe fa02 	bl	8001130 <DebugPrint>
	memset(PrintBuffer, '\0', COMM_SIZE);  snprintf(PrintBuffer, COMM_SIZE-1, "\n\r    - EEPROM Address:\t0x%04X", SysInfo.EEPROM_Address );
 8002d2c:	2280      	movs	r2, #128	@ 0x80
 8002d2e:	2100      	movs	r1, #0
 8002d30:	4809      	ldr	r0, [pc, #36]	@ (8002d58 <SystemSettingPrint_Routine+0xc4>)
 8002d32:	f007 f8ca 	bl	8009eca <memset>
 8002d36:	4b0b      	ldr	r3, [pc, #44]	@ (8002d64 <SystemSettingPrint_Routine+0xd0>)
 8002d38:	899b      	ldrh	r3, [r3, #12]
 8002d3a:	4a0e      	ldr	r2, [pc, #56]	@ (8002d74 <SystemSettingPrint_Routine+0xe0>)
 8002d3c:	217f      	movs	r1, #127	@ 0x7f
 8002d3e:	4806      	ldr	r0, [pc, #24]	@ (8002d58 <SystemSettingPrint_Routine+0xc4>)
 8002d40:	f007 f82c 	bl	8009d9c <sniprintf>
	DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE);
 8002d44:	4b06      	ldr	r3, [pc, #24]	@ (8002d60 <SystemSettingPrint_Routine+0xcc>)
 8002d46:	781b      	ldrb	r3, [r3, #0]
 8002d48:	2280      	movs	r2, #128	@ 0x80
 8002d4a:	4903      	ldr	r1, [pc, #12]	@ (8002d58 <SystemSettingPrint_Routine+0xc4>)
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	f7fe f9ef 	bl	8001130 <DebugPrint>

}
 8002d52:	bf00      	nop
 8002d54:	bd80      	pop	{r7, pc}
 8002d56:	bf00      	nop
 8002d58:	200004ec 	.word	0x200004ec
 8002d5c:	0800dbb4 	.word	0x0800dbb4
 8002d60:	2000004b 	.word	0x2000004b
 8002d64:	200004dc 	.word	0x200004dc
 8002d68:	0800dbd8 	.word	0x0800dbd8
 8002d6c:	0800dbf8 	.word	0x0800dbf8
 8002d70:	0800dc14 	.word	0x0800dc14
 8002d74:	0800dc2c 	.word	0x0800dc2c

08002d78 <ControllerPairRoutine>:
////////////////////////////////////// CANBus Pairing System Routines /////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


//Routine to pair a sensor to a controller board when requested by the controller
void ControllerPairRoutine(void){
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b084      	sub	sp, #16
 8002d7c:	af00      	add	r7, sp, #0

	memset(PrintBuffer, '\0', COMM_SIZE);  snprintf(PrintBuffer, COMM_SIZE-1, "\n\n\rDevice Pairing Routine Entered"  );
 8002d7e:	2280      	movs	r2, #128	@ 0x80
 8002d80:	2100      	movs	r1, #0
 8002d82:	4874      	ldr	r0, [pc, #464]	@ (8002f54 <ControllerPairRoutine+0x1dc>)
 8002d84:	f007 f8a1 	bl	8009eca <memset>
 8002d88:	4a73      	ldr	r2, [pc, #460]	@ (8002f58 <ControllerPairRoutine+0x1e0>)
 8002d8a:	217f      	movs	r1, #127	@ 0x7f
 8002d8c:	4871      	ldr	r0, [pc, #452]	@ (8002f54 <ControllerPairRoutine+0x1dc>)
 8002d8e:	f007 f805 	bl	8009d9c <sniprintf>
	DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE);
 8002d92:	4b72      	ldr	r3, [pc, #456]	@ (8002f5c <ControllerPairRoutine+0x1e4>)
 8002d94:	781b      	ldrb	r3, [r3, #0]
 8002d96:	2280      	movs	r2, #128	@ 0x80
 8002d98:	496e      	ldr	r1, [pc, #440]	@ (8002f54 <ControllerPairRoutine+0x1dc>)
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f7fe f9c8 	bl	8001130 <DebugPrint>

	//Flag to indicate success of the operation
	_Bool SuccessFlag=true;
 8002da0:	2301      	movs	r3, #1
 8002da2:	73fb      	strb	r3, [r7, #15]
	_Bool TimeoutFlag=false;
 8002da4:	2300      	movs	r3, #0
 8002da6:	73bb      	strb	r3, [r7, #14]

	//Create CAN message with all sensor ID information
	uint8_t MessageBuffer[8] = {0x00};								//Create data buffer
 8002da8:	2300      	movs	r3, #0
 8002daa:	607b      	str	r3, [r7, #4]
 8002dac:	2300      	movs	r3, #0
 8002dae:	60bb      	str	r3, [r7, #8]
	MessageBuffer[0]=0xA0;											//Store instruction code
 8002db0:	23a0      	movs	r3, #160	@ 0xa0
 8002db2:	713b      	strb	r3, [r7, #4]
	uint16_to_bytes(SysInfo.CAN_Address,  &MessageBuffer[1]);		//Store device CANBus address
 8002db4:	4b6a      	ldr	r3, [pc, #424]	@ (8002f60 <ControllerPairRoutine+0x1e8>)
 8002db6:	895a      	ldrh	r2, [r3, #10]
 8002db8:	1d3b      	adds	r3, r7, #4
 8002dba:	3301      	adds	r3, #1
 8002dbc:	4619      	mov	r1, r3
 8002dbe:	4610      	mov	r0, r2
 8002dc0:	f7fd ff98 	bl	8000cf4 <uint16_to_bytes>
	uint16_to_bytes(SysInfo.SerialNumber, &MessageBuffer[3]);		//Store device serial number
 8002dc4:	4b66      	ldr	r3, [pc, #408]	@ (8002f60 <ControllerPairRoutine+0x1e8>)
 8002dc6:	88da      	ldrh	r2, [r3, #6]
 8002dc8:	1d3b      	adds	r3, r7, #4
 8002dca:	3303      	adds	r3, #3
 8002dcc:	4619      	mov	r1, r3
 8002dce:	4610      	mov	r0, r2
 8002dd0:	f7fd ff90 	bl	8000cf4 <uint16_to_bytes>
	MessageBuffer[5] = SysInfo.SensorType;							//Store device sensor type
 8002dd4:	4b62      	ldr	r3, [pc, #392]	@ (8002f60 <ControllerPairRoutine+0x1e8>)
 8002dd6:	7a1b      	ldrb	r3, [r3, #8]
 8002dd8:	727b      	strb	r3, [r7, #9]

	//Send device pair message to controller's FIFO1
	pTxHeader.StdId = 0x0600 | SysInfo.CAN_Address;
 8002dda:	4b61      	ldr	r3, [pc, #388]	@ (8002f60 <ControllerPairRoutine+0x1e8>)
 8002ddc:	895b      	ldrh	r3, [r3, #10]
 8002dde:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8002de2:	b29b      	uxth	r3, r3
 8002de4:	461a      	mov	r2, r3
 8002de6:	4b5f      	ldr	r3, [pc, #380]	@ (8002f64 <ControllerPairRoutine+0x1ec>)
 8002de8:	601a      	str	r2, [r3, #0]
	ret=HAL_CAN_AddTxMessage(&CANBUS_EXT, &pTxHeader, MessageBuffer, &TxMailbox);
 8002dea:	1d3a      	adds	r2, r7, #4
 8002dec:	4b5e      	ldr	r3, [pc, #376]	@ (8002f68 <ControllerPairRoutine+0x1f0>)
 8002dee:	495d      	ldr	r1, [pc, #372]	@ (8002f64 <ControllerPairRoutine+0x1ec>)
 8002df0:	485e      	ldr	r0, [pc, #376]	@ (8002f6c <ControllerPairRoutine+0x1f4>)
 8002df2:	f002 f8b6 	bl	8004f62 <HAL_CAN_AddTxMessage>
 8002df6:	4603      	mov	r3, r0
 8002df8:	461a      	mov	r2, r3
 8002dfa:	4b5d      	ldr	r3, [pc, #372]	@ (8002f70 <ControllerPairRoutine+0x1f8>)
 8002dfc:	701a      	strb	r2, [r3, #0]
	if(ret!=HAL_OK){
 8002dfe:	4b5c      	ldr	r3, [pc, #368]	@ (8002f70 <ControllerPairRoutine+0x1f8>)
 8002e00:	781b      	ldrb	r3, [r3, #0]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d013      	beq.n	8002e2e <ControllerPairRoutine+0xb6>
		SuccessFlag = false;
 8002e06:	2300      	movs	r3, #0
 8002e08:	73fb      	strb	r3, [r7, #15]
		memset(PrintBuffer, '\0', COMM_SIZE);  snprintf(PrintBuffer, COMM_SIZE-1, "\n\r\t- Pairing Failed - Message failed to Send"  );
 8002e0a:	2280      	movs	r2, #128	@ 0x80
 8002e0c:	2100      	movs	r1, #0
 8002e0e:	4851      	ldr	r0, [pc, #324]	@ (8002f54 <ControllerPairRoutine+0x1dc>)
 8002e10:	f007 f85b 	bl	8009eca <memset>
 8002e14:	4a57      	ldr	r2, [pc, #348]	@ (8002f74 <ControllerPairRoutine+0x1fc>)
 8002e16:	217f      	movs	r1, #127	@ 0x7f
 8002e18:	484e      	ldr	r0, [pc, #312]	@ (8002f54 <ControllerPairRoutine+0x1dc>)
 8002e1a:	f006 ffbf 	bl	8009d9c <sniprintf>
		DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE);
 8002e1e:	4b4f      	ldr	r3, [pc, #316]	@ (8002f5c <ControllerPairRoutine+0x1e4>)
 8002e20:	781b      	ldrb	r3, [r3, #0]
 8002e22:	2280      	movs	r2, #128	@ 0x80
 8002e24:	494b      	ldr	r1, [pc, #300]	@ (8002f54 <ControllerPairRoutine+0x1dc>)
 8002e26:	4618      	mov	r0, r3
 8002e28:	f7fe f982 	bl	8001130 <DebugPrint>
 8002e2c:	e010      	b.n	8002e50 <ControllerPairRoutine+0xd8>
	}else{
		memset(PrintBuffer, '\0', COMM_SIZE);  snprintf(PrintBuffer, COMM_SIZE-1, "\n\r\t- Pairing Data Sent"  );
 8002e2e:	2280      	movs	r2, #128	@ 0x80
 8002e30:	2100      	movs	r1, #0
 8002e32:	4848      	ldr	r0, [pc, #288]	@ (8002f54 <ControllerPairRoutine+0x1dc>)
 8002e34:	f007 f849 	bl	8009eca <memset>
 8002e38:	4a4f      	ldr	r2, [pc, #316]	@ (8002f78 <ControllerPairRoutine+0x200>)
 8002e3a:	217f      	movs	r1, #127	@ 0x7f
 8002e3c:	4845      	ldr	r0, [pc, #276]	@ (8002f54 <ControllerPairRoutine+0x1dc>)
 8002e3e:	f006 ffad 	bl	8009d9c <sniprintf>
		DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE);
 8002e42:	4b46      	ldr	r3, [pc, #280]	@ (8002f5c <ControllerPairRoutine+0x1e4>)
 8002e44:	781b      	ldrb	r3, [r3, #0]
 8002e46:	2280      	movs	r2, #128	@ 0x80
 8002e48:	4942      	ldr	r1, [pc, #264]	@ (8002f54 <ControllerPairRoutine+0x1dc>)
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f7fe f970 	bl	8001130 <DebugPrint>
	}

	//Setup parameters for the following routine to receive a validation message from the controller
	memset(MessageBuffer,0,8);				//Reset MessageBuffer
 8002e50:	1d3b      	adds	r3, r7, #4
 8002e52:	2208      	movs	r2, #8
 8002e54:	2100      	movs	r1, #0
 8002e56:	4618      	mov	r0, r3
 8002e58:	f007 f837 	bl	8009eca <memset>
	TIMER_TIMEOUT.Instance->CNT = 0;		//Set timeout timer to 0
 8002e5c:	4b47      	ldr	r3, [pc, #284]	@ (8002f7c <ControllerPairRoutine+0x204>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	2200      	movs	r2, #0
 8002e62:	625a      	str	r2, [r3, #36]	@ 0x24
	HAL_TIM_Base_Start(&TIMER_TIMEOUT);		//Start timeout timer
 8002e64:	4845      	ldr	r0, [pc, #276]	@ (8002f7c <ControllerPairRoutine+0x204>)
 8002e66:	f005 f861 	bl	8007f2c <HAL_TIM_Base_Start>

	//Wait for pair complete message from the controller over FIFO1 to validate operation
	while( SuccessFlag==true && TimeoutFlag==false ){
 8002e6a:	e022      	b.n	8002eb2 <ControllerPairRoutine+0x13a>

		//Check to see if a message has arrived over FIFO1
		if( HAL_CAN_GetRxFifoFillLevel(&CANBUS_EXT, CAN_RX_FIFO1) != 0 ){
 8002e6c:	2101      	movs	r1, #1
 8002e6e:	483f      	ldr	r0, [pc, #252]	@ (8002f6c <ControllerPairRoutine+0x1f4>)
 8002e70:	f002 fa69 	bl	8005346 <HAL_CAN_GetRxFifoFillLevel>
 8002e74:	4603      	mov	r3, r0
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d010      	beq.n	8002e9c <ControllerPairRoutine+0x124>
			ret = HAL_CAN_GetRxMessage(&CANBUS_EXT, CAN_RX_FIFO1, &pRxHeader, MessageBuffer);
 8002e7a:	1d3b      	adds	r3, r7, #4
 8002e7c:	4a40      	ldr	r2, [pc, #256]	@ (8002f80 <ControllerPairRoutine+0x208>)
 8002e7e:	2101      	movs	r1, #1
 8002e80:	483a      	ldr	r0, [pc, #232]	@ (8002f6c <ControllerPairRoutine+0x1f4>)
 8002e82:	f002 f93e 	bl	8005102 <HAL_CAN_GetRxMessage>
 8002e86:	4603      	mov	r3, r0
 8002e88:	461a      	mov	r2, r3
 8002e8a:	4b39      	ldr	r3, [pc, #228]	@ (8002f70 <ControllerPairRoutine+0x1f8>)
 8002e8c:	701a      	strb	r2, [r3, #0]
			if(ret!=HAL_OK){ SuccessFlag = false; }
 8002e8e:	4b38      	ldr	r3, [pc, #224]	@ (8002f70 <ControllerPairRoutine+0x1f8>)
 8002e90:	781b      	ldrb	r3, [r3, #0]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d017      	beq.n	8002ec6 <ControllerPairRoutine+0x14e>
 8002e96:	2300      	movs	r3, #0
 8002e98:	73fb      	strb	r3, [r7, #15]
			break;
 8002e9a:	e014      	b.n	8002ec6 <ControllerPairRoutine+0x14e>
		}

		//Check to see if the timeout period has elapsed
		if( __HAL_TIM_GET_COUNTER(&TIMER_TIMEOUT) > TimeoutPeriod  ){
 8002e9c:	4b37      	ldr	r3, [pc, #220]	@ (8002f7c <ControllerPairRoutine+0x204>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ea2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d903      	bls.n	8002eb2 <ControllerPairRoutine+0x13a>
			TimeoutFlag=true;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	73bb      	strb	r3, [r7, #14]
			SuccessFlag=false;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	73fb      	strb	r3, [r7, #15]
	while( SuccessFlag==true && TimeoutFlag==false ){
 8002eb2:	7bfb      	ldrb	r3, [r7, #15]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d007      	beq.n	8002ec8 <ControllerPairRoutine+0x150>
 8002eb8:	7bbb      	ldrb	r3, [r7, #14]
 8002eba:	f083 0301 	eor.w	r3, r3, #1
 8002ebe:	b2db      	uxtb	r3, r3
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d1d3      	bne.n	8002e6c <ControllerPairRoutine+0xf4>
 8002ec4:	e000      	b.n	8002ec8 <ControllerPairRoutine+0x150>
			break;
 8002ec6:	bf00      	nop
		}

	}

	//Stop timer before routine completion
	HAL_TIM_Base_Stop(&TIMER_TIMEOUT);
 8002ec8:	482c      	ldr	r0, [pc, #176]	@ (8002f7c <ControllerPairRoutine+0x204>)
 8002eca:	f005 f889 	bl	8007fe0 <HAL_TIM_Base_Stop>
	memset(PrintBuffer, '\0', COMM_SIZE);  snprintf(PrintBuffer, COMM_SIZE-1, "\n\r\t- Waited %lums for controller confirmation", __HAL_TIM_GET_COUNTER(&TIMER_TIMEOUT)  );
 8002ece:	2280      	movs	r2, #128	@ 0x80
 8002ed0:	2100      	movs	r1, #0
 8002ed2:	4820      	ldr	r0, [pc, #128]	@ (8002f54 <ControllerPairRoutine+0x1dc>)
 8002ed4:	f006 fff9 	bl	8009eca <memset>
 8002ed8:	4b28      	ldr	r3, [pc, #160]	@ (8002f7c <ControllerPairRoutine+0x204>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ede:	4a29      	ldr	r2, [pc, #164]	@ (8002f84 <ControllerPairRoutine+0x20c>)
 8002ee0:	217f      	movs	r1, #127	@ 0x7f
 8002ee2:	481c      	ldr	r0, [pc, #112]	@ (8002f54 <ControllerPairRoutine+0x1dc>)
 8002ee4:	f006 ff5a 	bl	8009d9c <sniprintf>
	DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE);
 8002ee8:	4b1c      	ldr	r3, [pc, #112]	@ (8002f5c <ControllerPairRoutine+0x1e4>)
 8002eea:	781b      	ldrb	r3, [r3, #0]
 8002eec:	2280      	movs	r2, #128	@ 0x80
 8002eee:	4919      	ldr	r1, [pc, #100]	@ (8002f54 <ControllerPairRoutine+0x1dc>)
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	f7fe f91d 	bl	8001130 <DebugPrint>
	TIMER_TIMEOUT.Instance->CNT = 0;
 8002ef6:	4b21      	ldr	r3, [pc, #132]	@ (8002f7c <ControllerPairRoutine+0x204>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	2200      	movs	r2, #0
 8002efc:	625a      	str	r2, [r3, #36]	@ 0x24

	//Print routine exit message
	if( SuccessFlag==true ){
 8002efe:	7bfb      	ldrb	r3, [r7, #15]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d011      	beq.n	8002f28 <ControllerPairRoutine+0x1b0>
  		  memset(PrintBuffer, '\0', COMM_SIZE);  snprintf(PrintBuffer, COMM_SIZE-1, "\n\rSensor pair SUCCESSFUL - Exiting Routine"  );
 8002f04:	2280      	movs	r2, #128	@ 0x80
 8002f06:	2100      	movs	r1, #0
 8002f08:	4812      	ldr	r0, [pc, #72]	@ (8002f54 <ControllerPairRoutine+0x1dc>)
 8002f0a:	f006 ffde 	bl	8009eca <memset>
 8002f0e:	4a1e      	ldr	r2, [pc, #120]	@ (8002f88 <ControllerPairRoutine+0x210>)
 8002f10:	217f      	movs	r1, #127	@ 0x7f
 8002f12:	4810      	ldr	r0, [pc, #64]	@ (8002f54 <ControllerPairRoutine+0x1dc>)
 8002f14:	f006 ff42 	bl	8009d9c <sniprintf>
  		  DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE);
 8002f18:	4b10      	ldr	r3, [pc, #64]	@ (8002f5c <ControllerPairRoutine+0x1e4>)
 8002f1a:	781b      	ldrb	r3, [r3, #0]
 8002f1c:	2280      	movs	r2, #128	@ 0x80
 8002f1e:	490d      	ldr	r1, [pc, #52]	@ (8002f54 <ControllerPairRoutine+0x1dc>)
 8002f20:	4618      	mov	r0, r3
 8002f22:	f7fe f905 	bl	8001130 <DebugPrint>
	}else{
		  memset(PrintBuffer, '\0', COMM_SIZE);  snprintf(PrintBuffer, COMM_SIZE-1, "\n\rSensor pair FAILED - Exiting Routine"  );
		  DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE);
	}

}
 8002f26:	e010      	b.n	8002f4a <ControllerPairRoutine+0x1d2>
		  memset(PrintBuffer, '\0', COMM_SIZE);  snprintf(PrintBuffer, COMM_SIZE-1, "\n\rSensor pair FAILED - Exiting Routine"  );
 8002f28:	2280      	movs	r2, #128	@ 0x80
 8002f2a:	2100      	movs	r1, #0
 8002f2c:	4809      	ldr	r0, [pc, #36]	@ (8002f54 <ControllerPairRoutine+0x1dc>)
 8002f2e:	f006 ffcc 	bl	8009eca <memset>
 8002f32:	4a16      	ldr	r2, [pc, #88]	@ (8002f8c <ControllerPairRoutine+0x214>)
 8002f34:	217f      	movs	r1, #127	@ 0x7f
 8002f36:	4807      	ldr	r0, [pc, #28]	@ (8002f54 <ControllerPairRoutine+0x1dc>)
 8002f38:	f006 ff30 	bl	8009d9c <sniprintf>
		  DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE);
 8002f3c:	4b07      	ldr	r3, [pc, #28]	@ (8002f5c <ControllerPairRoutine+0x1e4>)
 8002f3e:	781b      	ldrb	r3, [r3, #0]
 8002f40:	2280      	movs	r2, #128	@ 0x80
 8002f42:	4904      	ldr	r1, [pc, #16]	@ (8002f54 <ControllerPairRoutine+0x1dc>)
 8002f44:	4618      	mov	r0, r3
 8002f46:	f7fe f8f3 	bl	8001130 <DebugPrint>
}
 8002f4a:	bf00      	nop
 8002f4c:	3710      	adds	r7, #16
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}
 8002f52:	bf00      	nop
 8002f54:	200004ec 	.word	0x200004ec
 8002f58:	0800dc4c 	.word	0x0800dc4c
 8002f5c:	2000004b 	.word	0x2000004b
 8002f60:	200004dc 	.word	0x200004dc
 8002f64:	20000570 	.word	0x20000570
 8002f68:	2000056c 	.word	0x2000056c
 8002f6c:	20000290 	.word	0x20000290
 8002f70:	200005ac 	.word	0x200005ac
 8002f74:	0800dc70 	.word	0x0800dc70
 8002f78:	0800dca0 	.word	0x0800dca0
 8002f7c:	20000408 	.word	0x20000408
 8002f80:	20000588 	.word	0x20000588
 8002f84:	0800dcb8 	.word	0x0800dcb8
 8002f88:	0800dce8 	.word	0x0800dce8
 8002f8c:	0800dd14 	.word	0x0800dd14

08002f90 <ControllerPingRoutine>:




//Routine to ping the controller back when requested
void ControllerPingRoutine(void){
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b084      	sub	sp, #16
 8002f94:	af00      	add	r7, sp, #0

    //Print routine enter message
	memset(PrintBuffer, '\0', COMM_SIZE);  snprintf(PrintBuffer, COMM_SIZE-1, "\n\n\rSensor Ping Routine Entered"  );
 8002f96:	2280      	movs	r2, #128	@ 0x80
 8002f98:	2100      	movs	r1, #0
 8002f9a:	482c      	ldr	r0, [pc, #176]	@ (800304c <ControllerPingRoutine+0xbc>)
 8002f9c:	f006 ff95 	bl	8009eca <memset>
 8002fa0:	4a2b      	ldr	r2, [pc, #172]	@ (8003050 <ControllerPingRoutine+0xc0>)
 8002fa2:	217f      	movs	r1, #127	@ 0x7f
 8002fa4:	4829      	ldr	r0, [pc, #164]	@ (800304c <ControllerPingRoutine+0xbc>)
 8002fa6:	f006 fef9 	bl	8009d9c <sniprintf>
	DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE);
 8002faa:	4b2a      	ldr	r3, [pc, #168]	@ (8003054 <ControllerPingRoutine+0xc4>)
 8002fac:	781b      	ldrb	r3, [r3, #0]
 8002fae:	2280      	movs	r2, #128	@ 0x80
 8002fb0:	4926      	ldr	r1, [pc, #152]	@ (800304c <ControllerPingRoutine+0xbc>)
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	f7fe f8bc 	bl	8001130 <DebugPrint>

	//Flag to indicate success of the operation
	_Bool SuccessFlag=true;
 8002fb8:	2301      	movs	r3, #1
 8002fba:	73fb      	strb	r3, [r7, #15]

	//Create CAN message with ping return information
	uint8_t MessageBuffer[8] = {0xA2, 0xCD, 0x34, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8002fbc:	4a26      	ldr	r2, [pc, #152]	@ (8003058 <ControllerPingRoutine+0xc8>)
 8002fbe:	1d3b      	adds	r3, r7, #4
 8002fc0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002fc4:	e883 0003 	stmia.w	r3, {r0, r1}

	//Transmit ping message
	pTxHeader.StdId = 0x0600 | SysInfo.CAN_Address;
 8002fc8:	4b24      	ldr	r3, [pc, #144]	@ (800305c <ControllerPingRoutine+0xcc>)
 8002fca:	895b      	ldrh	r3, [r3, #10]
 8002fcc:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8002fd0:	b29b      	uxth	r3, r3
 8002fd2:	461a      	mov	r2, r3
 8002fd4:	4b22      	ldr	r3, [pc, #136]	@ (8003060 <ControllerPingRoutine+0xd0>)
 8002fd6:	601a      	str	r2, [r3, #0]
	ret=HAL_CAN_AddTxMessage(&CANBUS_EXT, &pTxHeader, MessageBuffer, &TxMailbox);
 8002fd8:	1d3a      	adds	r2, r7, #4
 8002fda:	4b22      	ldr	r3, [pc, #136]	@ (8003064 <ControllerPingRoutine+0xd4>)
 8002fdc:	4920      	ldr	r1, [pc, #128]	@ (8003060 <ControllerPingRoutine+0xd0>)
 8002fde:	4822      	ldr	r0, [pc, #136]	@ (8003068 <ControllerPingRoutine+0xd8>)
 8002fe0:	f001 ffbf 	bl	8004f62 <HAL_CAN_AddTxMessage>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	461a      	mov	r2, r3
 8002fe8:	4b20      	ldr	r3, [pc, #128]	@ (800306c <ControllerPingRoutine+0xdc>)
 8002fea:	701a      	strb	r2, [r3, #0]
	if(ret!=HAL_OK){ SuccessFlag = false; }
 8002fec:	4b1f      	ldr	r3, [pc, #124]	@ (800306c <ControllerPingRoutine+0xdc>)
 8002fee:	781b      	ldrb	r3, [r3, #0]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d001      	beq.n	8002ff8 <ControllerPingRoutine+0x68>
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	73fb      	strb	r3, [r7, #15]

	//Print routine exit message
	if(SuccessFlag==true){
 8002ff8:	7bfb      	ldrb	r3, [r7, #15]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d011      	beq.n	8003022 <ControllerPingRoutine+0x92>
  	    memset(PrintBuffer, '\0', COMM_SIZE);  snprintf(PrintBuffer, COMM_SIZE-1, "\n\rSensor Ping SUCCESS - Exiting Routine"  );
 8002ffe:	2280      	movs	r2, #128	@ 0x80
 8003000:	2100      	movs	r1, #0
 8003002:	4812      	ldr	r0, [pc, #72]	@ (800304c <ControllerPingRoutine+0xbc>)
 8003004:	f006 ff61 	bl	8009eca <memset>
 8003008:	4a19      	ldr	r2, [pc, #100]	@ (8003070 <ControllerPingRoutine+0xe0>)
 800300a:	217f      	movs	r1, #127	@ 0x7f
 800300c:	480f      	ldr	r0, [pc, #60]	@ (800304c <ControllerPingRoutine+0xbc>)
 800300e:	f006 fec5 	bl	8009d9c <sniprintf>
  		DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE);
 8003012:	4b10      	ldr	r3, [pc, #64]	@ (8003054 <ControllerPingRoutine+0xc4>)
 8003014:	781b      	ldrb	r3, [r3, #0]
 8003016:	2280      	movs	r2, #128	@ 0x80
 8003018:	490c      	ldr	r1, [pc, #48]	@ (800304c <ControllerPingRoutine+0xbc>)
 800301a:	4618      	mov	r0, r3
 800301c:	f7fe f888 	bl	8001130 <DebugPrint>
	}else{
	    memset(PrintBuffer, '\0', COMM_SIZE);  snprintf(PrintBuffer, COMM_SIZE-1, "\n\rSensor Ping FAILED - Exiting Routine"  );
		DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE);
	}

}
 8003020:	e010      	b.n	8003044 <ControllerPingRoutine+0xb4>
	    memset(PrintBuffer, '\0', COMM_SIZE);  snprintf(PrintBuffer, COMM_SIZE-1, "\n\rSensor Ping FAILED - Exiting Routine"  );
 8003022:	2280      	movs	r2, #128	@ 0x80
 8003024:	2100      	movs	r1, #0
 8003026:	4809      	ldr	r0, [pc, #36]	@ (800304c <ControllerPingRoutine+0xbc>)
 8003028:	f006 ff4f 	bl	8009eca <memset>
 800302c:	4a11      	ldr	r2, [pc, #68]	@ (8003074 <ControllerPingRoutine+0xe4>)
 800302e:	217f      	movs	r1, #127	@ 0x7f
 8003030:	4806      	ldr	r0, [pc, #24]	@ (800304c <ControllerPingRoutine+0xbc>)
 8003032:	f006 feb3 	bl	8009d9c <sniprintf>
		DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE);
 8003036:	4b07      	ldr	r3, [pc, #28]	@ (8003054 <ControllerPingRoutine+0xc4>)
 8003038:	781b      	ldrb	r3, [r3, #0]
 800303a:	2280      	movs	r2, #128	@ 0x80
 800303c:	4903      	ldr	r1, [pc, #12]	@ (800304c <ControllerPingRoutine+0xbc>)
 800303e:	4618      	mov	r0, r3
 8003040:	f7fe f876 	bl	8001130 <DebugPrint>
}
 8003044:	bf00      	nop
 8003046:	3710      	adds	r7, #16
 8003048:	46bd      	mov	sp, r7
 800304a:	bd80      	pop	{r7, pc}
 800304c:	200004ec 	.word	0x200004ec
 8003050:	0800dd3c 	.word	0x0800dd3c
 8003054:	2000004b 	.word	0x2000004b
 8003058:	0800ddac 	.word	0x0800ddac
 800305c:	200004dc 	.word	0x200004dc
 8003060:	20000570 	.word	0x20000570
 8003064:	2000056c 	.word	0x2000056c
 8003068:	20000290 	.word	0x20000290
 800306c:	200005ac 	.word	0x200005ac
 8003070:	0800dd5c 	.word	0x0800dd5c
 8003074:	0800dd84 	.word	0x0800dd84

08003078 <SensorMeasurementRoutine>:
////////////////////////////////////// Ion Measurement and Transmit Routines //////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


//Routine to measure data from the two sensors and send it to the controller
void SensorMeasurementRoutine(void){
 8003078:	b480      	push	{r7}
 800307a:	af00      	add	r7, sp, #0
		memset(PrintBuffer, '\0', COMM_SIZE);  snprintf(PrintBuffer, COMM_SIZE-1, "\n\rSensor Measurement Routine FAILED - Exiting Routine" );
		DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE);
	}
*/

}
 800307c:	bf00      	nop
 800307e:	46bd      	mov	sp, r7
 8003080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003084:	4770      	bx	lr
	...

08003088 <SystemActivation>:
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////// System Initialization and Activation Routine ///////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


_Bool SystemActivation(void){
 8003088:	b580      	push	{r7, lr}
 800308a:	b086      	sub	sp, #24
 800308c:	af00      	add	r7, sp, #0

	_Bool SystemActivationFlag = true;
 800308e:	2301      	movs	r3, #1
 8003090:	75fb      	strb	r3, [r7, #23]

	//////////////////////////////////////////////////////////
	//////////// INITIAL PRINT MESSAGE ///////////////////////
	//////////////////////////////////////////////////////////

	memset(PrintBuffer, '\0', COMM_SIZE); snprintf(PrintBuffer, COMM_SIZE-1,"\n\n\rStarting subsystem activation sequence:"  );
 8003092:	2280      	movs	r2, #128	@ 0x80
 8003094:	2100      	movs	r1, #0
 8003096:	48a6      	ldr	r0, [pc, #664]	@ (8003330 <SystemActivation+0x2a8>)
 8003098:	f006 ff17 	bl	8009eca <memset>
 800309c:	4aa5      	ldr	r2, [pc, #660]	@ (8003334 <SystemActivation+0x2ac>)
 800309e:	217f      	movs	r1, #127	@ 0x7f
 80030a0:	48a3      	ldr	r0, [pc, #652]	@ (8003330 <SystemActivation+0x2a8>)
 80030a2:	f006 fe7b 	bl	8009d9c <sniprintf>
	DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE);
 80030a6:	4ba4      	ldr	r3, [pc, #656]	@ (8003338 <SystemActivation+0x2b0>)
 80030a8:	781b      	ldrb	r3, [r3, #0]
 80030aa:	2280      	movs	r2, #128	@ 0x80
 80030ac:	49a0      	ldr	r1, [pc, #640]	@ (8003330 <SystemActivation+0x2a8>)
 80030ae:	4618      	mov	r0, r3
 80030b0:	f7fe f83e 	bl	8001130 <DebugPrint>
	////////////////////////////////////////////////////////////////
	/////////// Activate all system timers ///////////////////////
	////////////////////////////////////////////////////////////////

	//Start heartbeat timer
	ret = HAL_TIM_Base_Start_IT(&TIMER_HRT);
 80030b4:	48a1      	ldr	r0, [pc, #644]	@ (800333c <SystemActivation+0x2b4>)
 80030b6:	f004 ffbb 	bl	8008030 <HAL_TIM_Base_Start_IT>
 80030ba:	4603      	mov	r3, r0
 80030bc:	461a      	mov	r2, r3
 80030be:	4ba0      	ldr	r3, [pc, #640]	@ (8003340 <SystemActivation+0x2b8>)
 80030c0:	701a      	strb	r2, [r3, #0]
	if(ret == HAL_OK){
 80030c2:	4b9f      	ldr	r3, [pc, #636]	@ (8003340 <SystemActivation+0x2b8>)
 80030c4:	781b      	ldrb	r3, [r3, #0]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d111      	bne.n	80030ee <SystemActivation+0x66>
		memset(PrintBuffer, '\0', COMM_SIZE); snprintf(PrintBuffer, COMM_SIZE-1,"\n\r\t- Heartbeat timer started"  );
 80030ca:	2280      	movs	r2, #128	@ 0x80
 80030cc:	2100      	movs	r1, #0
 80030ce:	4898      	ldr	r0, [pc, #608]	@ (8003330 <SystemActivation+0x2a8>)
 80030d0:	f006 fefb 	bl	8009eca <memset>
 80030d4:	4a9b      	ldr	r2, [pc, #620]	@ (8003344 <SystemActivation+0x2bc>)
 80030d6:	217f      	movs	r1, #127	@ 0x7f
 80030d8:	4895      	ldr	r0, [pc, #596]	@ (8003330 <SystemActivation+0x2a8>)
 80030da:	f006 fe5f 	bl	8009d9c <sniprintf>
		DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE);
 80030de:	4b96      	ldr	r3, [pc, #600]	@ (8003338 <SystemActivation+0x2b0>)
 80030e0:	781b      	ldrb	r3, [r3, #0]
 80030e2:	2280      	movs	r2, #128	@ 0x80
 80030e4:	4992      	ldr	r1, [pc, #584]	@ (8003330 <SystemActivation+0x2a8>)
 80030e6:	4618      	mov	r0, r3
 80030e8:	f7fe f822 	bl	8001130 <DebugPrint>
 80030ec:	e012      	b.n	8003114 <SystemActivation+0x8c>
	}else{
		memset(PrintBuffer, '\0', COMM_SIZE); snprintf(PrintBuffer, COMM_SIZE-1,"\n\r\t- Heartbeat timer failed to start"  );
 80030ee:	2280      	movs	r2, #128	@ 0x80
 80030f0:	2100      	movs	r1, #0
 80030f2:	488f      	ldr	r0, [pc, #572]	@ (8003330 <SystemActivation+0x2a8>)
 80030f4:	f006 fee9 	bl	8009eca <memset>
 80030f8:	4a93      	ldr	r2, [pc, #588]	@ (8003348 <SystemActivation+0x2c0>)
 80030fa:	217f      	movs	r1, #127	@ 0x7f
 80030fc:	488c      	ldr	r0, [pc, #560]	@ (8003330 <SystemActivation+0x2a8>)
 80030fe:	f006 fe4d 	bl	8009d9c <sniprintf>
		DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE);
 8003102:	4b8d      	ldr	r3, [pc, #564]	@ (8003338 <SystemActivation+0x2b0>)
 8003104:	781b      	ldrb	r3, [r3, #0]
 8003106:	2280      	movs	r2, #128	@ 0x80
 8003108:	4989      	ldr	r1, [pc, #548]	@ (8003330 <SystemActivation+0x2a8>)
 800310a:	4618      	mov	r0, r3
 800310c:	f7fe f810 	bl	8001130 <DebugPrint>
		SystemActivationFlag = false;
 8003110:	2300      	movs	r3, #0
 8003112:	75fb      	strb	r3, [r7, #23]
	//////////////////////////////////////////////////////////////////////////////
	/////////////// Initialize all outputs to a known state //////////////////////
	//////////////////////////////////////////////////////////////////////////////

	//Set all output pins to the correct state
	Set_LED_HeartBeat(0);
 8003114:	2000      	movs	r0, #0
 8003116:	f7fd fe5b 	bl	8000dd0 <Set_LED_HeartBeat>
	Set_LED_Indication1(0);
 800311a:	2000      	movs	r0, #0
 800311c:	f7fd fe6a 	bl	8000df4 <Set_LED_Indication1>
	Set_LED_Indication2(0);
 8003120:	2000      	movs	r0, #0
 8003122:	f7fd fe79 	bl	8000e18 <Set_LED_Indication2>
	Set_LED_Indication3(0);
 8003126:	2000      	movs	r0, #0
 8003128:	f7fd fe88 	bl	8000e3c <Set_LED_Indication3>
	Set_LED_Indication4(0);
 800312c:	2000      	movs	r0, #0
 800312e:	f7fd fe97 	bl	8000e60 <Set_LED_Indication4>
	Set_LED_Indication5(0);
 8003132:	2000      	movs	r0, #0
 8003134:	f7fd fea6 	bl	8000e84 <Set_LED_Indication5>
	Set_LED_Metal(0);
 8003138:	2000      	movs	r0, #0
 800313a:	f7fd ff09 	bl	8000f50 <Set_LED_Metal>
	Set_LED_Turbidity(0);
 800313e:	2000      	movs	r0, #0
 8003140:	f7fd ff23 	bl	8000f8a <Set_LED_Turbidity>
	Set_Flash_CS(1);
 8003144:	2001      	movs	r0, #1
 8003146:	f7fd feaf 	bl	8000ea8 <Set_Flash_CS>
	Set_Flash_WP(1);
 800314a:	2001      	movs	r0, #1
 800314c:	f7fd febe 	bl	8000ecc <Set_Flash_WP>

	//Print sequence load message
	memset(PrintBuffer, '\0', COMM_SIZE); snprintf(PrintBuffer, COMM_SIZE-1,"\n\r\t- All output pins set"  );
 8003150:	2280      	movs	r2, #128	@ 0x80
 8003152:	2100      	movs	r1, #0
 8003154:	4876      	ldr	r0, [pc, #472]	@ (8003330 <SystemActivation+0x2a8>)
 8003156:	f006 feb8 	bl	8009eca <memset>
 800315a:	4a7c      	ldr	r2, [pc, #496]	@ (800334c <SystemActivation+0x2c4>)
 800315c:	217f      	movs	r1, #127	@ 0x7f
 800315e:	4874      	ldr	r0, [pc, #464]	@ (8003330 <SystemActivation+0x2a8>)
 8003160:	f006 fe1c 	bl	8009d9c <sniprintf>
	DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE);
 8003164:	4b74      	ldr	r3, [pc, #464]	@ (8003338 <SystemActivation+0x2b0>)
 8003166:	781b      	ldrb	r3, [r3, #0]
 8003168:	2280      	movs	r2, #128	@ 0x80
 800316a:	4971      	ldr	r1, [pc, #452]	@ (8003330 <SystemActivation+0x2a8>)
 800316c:	4618      	mov	r0, r3
 800316e:	f7fd ffdf 	bl	8001130 <DebugPrint>
	//////////////////////////////////////////////////////////////////////////////
	/////////////// Initialize MCP3421 ADC IC  ///////////////////////////////////
	//////////////////////////////////////////////////////////////////////////////

	//Print sequence load message
	memset(PrintBuffer, '\0', COMM_SIZE); snprintf(PrintBuffer,COMM_SIZE-1, "\n\rInitializing MCP3421 ADC: "  );
 8003172:	2280      	movs	r2, #128	@ 0x80
 8003174:	2100      	movs	r1, #0
 8003176:	486e      	ldr	r0, [pc, #440]	@ (8003330 <SystemActivation+0x2a8>)
 8003178:	f006 fea7 	bl	8009eca <memset>
 800317c:	4a74      	ldr	r2, [pc, #464]	@ (8003350 <SystemActivation+0x2c8>)
 800317e:	217f      	movs	r1, #127	@ 0x7f
 8003180:	486b      	ldr	r0, [pc, #428]	@ (8003330 <SystemActivation+0x2a8>)
 8003182:	f006 fe0b 	bl	8009d9c <sniprintf>
	DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE);
 8003186:	4b6c      	ldr	r3, [pc, #432]	@ (8003338 <SystemActivation+0x2b0>)
 8003188:	781b      	ldrb	r3, [r3, #0]
 800318a:	2280      	movs	r2, #128	@ 0x80
 800318c:	4968      	ldr	r1, [pc, #416]	@ (8003330 <SystemActivation+0x2a8>)
 800318e:	4618      	mov	r0, r3
 8003190:	f7fd ffce 	bl	8001130 <DebugPrint>

	//Reset MCP3421 ADC to a known state
	if( MCP3421_ADC_Reset() == ADC_STATUS_OK ){
 8003194:	f7ff f942 	bl	800241c <MCP3421_ADC_Reset>
 8003198:	4603      	mov	r3, r0
 800319a:	2b00      	cmp	r3, #0
 800319c:	d111      	bne.n	80031c2 <SystemActivation+0x13a>
		memset(PrintBuffer, '\0', COMM_SIZE); snprintf(PrintBuffer, COMM_SIZE-1, "\n\r\t- ACD Reset Passed");
 800319e:	2280      	movs	r2, #128	@ 0x80
 80031a0:	2100      	movs	r1, #0
 80031a2:	4863      	ldr	r0, [pc, #396]	@ (8003330 <SystemActivation+0x2a8>)
 80031a4:	f006 fe91 	bl	8009eca <memset>
 80031a8:	4a6a      	ldr	r2, [pc, #424]	@ (8003354 <SystemActivation+0x2cc>)
 80031aa:	217f      	movs	r1, #127	@ 0x7f
 80031ac:	4860      	ldr	r0, [pc, #384]	@ (8003330 <SystemActivation+0x2a8>)
 80031ae:	f006 fdf5 	bl	8009d9c <sniprintf>
		DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE );
 80031b2:	4b61      	ldr	r3, [pc, #388]	@ (8003338 <SystemActivation+0x2b0>)
 80031b4:	781b      	ldrb	r3, [r3, #0]
 80031b6:	2280      	movs	r2, #128	@ 0x80
 80031b8:	495d      	ldr	r1, [pc, #372]	@ (8003330 <SystemActivation+0x2a8>)
 80031ba:	4618      	mov	r0, r3
 80031bc:	f7fd ffb8 	bl	8001130 <DebugPrint>
 80031c0:	e012      	b.n	80031e8 <SystemActivation+0x160>
	}else{
		memset(PrintBuffer, '\0', COMM_SIZE); snprintf(PrintBuffer, COMM_SIZE-1, "\n\r\t- ACD Reset Failed");
 80031c2:	2280      	movs	r2, #128	@ 0x80
 80031c4:	2100      	movs	r1, #0
 80031c6:	485a      	ldr	r0, [pc, #360]	@ (8003330 <SystemActivation+0x2a8>)
 80031c8:	f006 fe7f 	bl	8009eca <memset>
 80031cc:	4a62      	ldr	r2, [pc, #392]	@ (8003358 <SystemActivation+0x2d0>)
 80031ce:	217f      	movs	r1, #127	@ 0x7f
 80031d0:	4857      	ldr	r0, [pc, #348]	@ (8003330 <SystemActivation+0x2a8>)
 80031d2:	f006 fde3 	bl	8009d9c <sniprintf>
		DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE );
 80031d6:	4b58      	ldr	r3, [pc, #352]	@ (8003338 <SystemActivation+0x2b0>)
 80031d8:	781b      	ldrb	r3, [r3, #0]
 80031da:	2280      	movs	r2, #128	@ 0x80
 80031dc:	4954      	ldr	r1, [pc, #336]	@ (8003330 <SystemActivation+0x2a8>)
 80031de:	4618      	mov	r0, r3
 80031e0:	f7fd ffa6 	bl	8001130 <DebugPrint>
		SystemActivationFlag = false;
 80031e4:	2300      	movs	r3, #0
 80031e6:	75fb      	strb	r3, [r7, #23]
	}

	//Configure the MCP3421 ADC's settings
	uint8_t ADC_Config = CONV_ONESHOT | SAMPLE_16BIT | PGA_X1;
 80031e8:	2308      	movs	r3, #8
 80031ea:	757b      	strb	r3, [r7, #21]
	if( MCP3421_ADC_Init(ADC_Config) == ADC_STATUS_OK ){
 80031ec:	7d7b      	ldrb	r3, [r7, #21]
 80031ee:	4618      	mov	r0, r3
 80031f0:	f7ff f939 	bl	8002466 <MCP3421_ADC_Init>
 80031f4:	4603      	mov	r3, r0
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d111      	bne.n	800321e <SystemActivation+0x196>
		memset(PrintBuffer, '\0', COMM_SIZE); snprintf(PrintBuffer, COMM_SIZE-1, "\n\r\t- ADC Config Passed");
 80031fa:	2280      	movs	r2, #128	@ 0x80
 80031fc:	2100      	movs	r1, #0
 80031fe:	484c      	ldr	r0, [pc, #304]	@ (8003330 <SystemActivation+0x2a8>)
 8003200:	f006 fe63 	bl	8009eca <memset>
 8003204:	4a55      	ldr	r2, [pc, #340]	@ (800335c <SystemActivation+0x2d4>)
 8003206:	217f      	movs	r1, #127	@ 0x7f
 8003208:	4849      	ldr	r0, [pc, #292]	@ (8003330 <SystemActivation+0x2a8>)
 800320a:	f006 fdc7 	bl	8009d9c <sniprintf>
		DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE );
 800320e:	4b4a      	ldr	r3, [pc, #296]	@ (8003338 <SystemActivation+0x2b0>)
 8003210:	781b      	ldrb	r3, [r3, #0]
 8003212:	2280      	movs	r2, #128	@ 0x80
 8003214:	4946      	ldr	r1, [pc, #280]	@ (8003330 <SystemActivation+0x2a8>)
 8003216:	4618      	mov	r0, r3
 8003218:	f7fd ff8a 	bl	8001130 <DebugPrint>
 800321c:	e012      	b.n	8003244 <SystemActivation+0x1bc>
	}else{
		memset(PrintBuffer, '\0', COMM_SIZE); snprintf(PrintBuffer, COMM_SIZE-1, "\n\r\t- ADC Config Failed");
 800321e:	2280      	movs	r2, #128	@ 0x80
 8003220:	2100      	movs	r1, #0
 8003222:	4843      	ldr	r0, [pc, #268]	@ (8003330 <SystemActivation+0x2a8>)
 8003224:	f006 fe51 	bl	8009eca <memset>
 8003228:	4a4d      	ldr	r2, [pc, #308]	@ (8003360 <SystemActivation+0x2d8>)
 800322a:	217f      	movs	r1, #127	@ 0x7f
 800322c:	4840      	ldr	r0, [pc, #256]	@ (8003330 <SystemActivation+0x2a8>)
 800322e:	f006 fdb5 	bl	8009d9c <sniprintf>
		DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE );
 8003232:	4b41      	ldr	r3, [pc, #260]	@ (8003338 <SystemActivation+0x2b0>)
 8003234:	781b      	ldrb	r3, [r3, #0]
 8003236:	2280      	movs	r2, #128	@ 0x80
 8003238:	493d      	ldr	r1, [pc, #244]	@ (8003330 <SystemActivation+0x2a8>)
 800323a:	4618      	mov	r0, r3
 800323c:	f7fd ff78 	bl	8001130 <DebugPrint>
		SystemActivationFlag = false;
 8003240:	2300      	movs	r3, #0
 8003242:	75fb      	strb	r3, [r7, #23]
	//////////////////////////////////////////////////////////////////////////////
	/////////////// Initialize MCP4726A1T_E DAC IC  //////////////////////////////
	//////////////////////////////////////////////////////////////////////////////

	//Print sequence load message
	memset(PrintBuffer, '\0', COMM_SIZE); snprintf(PrintBuffer,COMM_SIZE-1, "\n\rInitializing MCP4726A1T_E DAC: "  );
 8003244:	2280      	movs	r2, #128	@ 0x80
 8003246:	2100      	movs	r1, #0
 8003248:	4839      	ldr	r0, [pc, #228]	@ (8003330 <SystemActivation+0x2a8>)
 800324a:	f006 fe3e 	bl	8009eca <memset>
 800324e:	4a45      	ldr	r2, [pc, #276]	@ (8003364 <SystemActivation+0x2dc>)
 8003250:	217f      	movs	r1, #127	@ 0x7f
 8003252:	4837      	ldr	r0, [pc, #220]	@ (8003330 <SystemActivation+0x2a8>)
 8003254:	f006 fda2 	bl	8009d9c <sniprintf>
	DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE);
 8003258:	4b37      	ldr	r3, [pc, #220]	@ (8003338 <SystemActivation+0x2b0>)
 800325a:	781b      	ldrb	r3, [r3, #0]
 800325c:	2280      	movs	r2, #128	@ 0x80
 800325e:	4934      	ldr	r1, [pc, #208]	@ (8003330 <SystemActivation+0x2a8>)
 8003260:	4618      	mov	r0, r3
 8003262:	f7fd ff65 	bl	8001130 <DebugPrint>

	//DAC initialization variables
	_Bool EEPROM_ProgramFlag = false;
 8003266:	2300      	movs	r3, #0
 8003268:	75bb      	strb	r3, [r7, #22]
	uint8_t DAC_ReadBuffer[6] = {0xFF};
 800326a:	23ff      	movs	r3, #255	@ 0xff
 800326c:	60fb      	str	r3, [r7, #12]
 800326e:	2300      	movs	r3, #0
 8003270:	823b      	strh	r3, [r7, #16]

	//Read DAC memory to check expected configuration settings
	if( MCP4726A1T_ReadAllMemory(DAC_ReadBuffer) == DAC_STATUS_OK ){
 8003272:	f107 030c 	add.w	r3, r7, #12
 8003276:	4618      	mov	r0, r3
 8003278:	f7ff fb0c 	bl	8002894 <MCP4726A1T_ReadAllMemory>
 800327c:	4603      	mov	r3, r0
 800327e:	2b00      	cmp	r3, #0
 8003280:	d17a      	bne.n	8003378 <SystemActivation+0x2f0>

		//Check eeprom config data
		if( (DAC_ReadBuffer[3]&0xDE) == 0xDC ){
 8003282:	7bfb      	ldrb	r3, [r7, #15]
 8003284:	f003 03de 	and.w	r3, r3, #222	@ 0xde
 8003288:	2bdc      	cmp	r3, #220	@ 0xdc
 800328a:	d111      	bne.n	80032b0 <SystemActivation+0x228>
			memset(PrintBuffer, '\0', COMM_SIZE); snprintf(PrintBuffer, COMM_SIZE-1, "\n\r\t- EEPROM config verified");
 800328c:	2280      	movs	r2, #128	@ 0x80
 800328e:	2100      	movs	r1, #0
 8003290:	4827      	ldr	r0, [pc, #156]	@ (8003330 <SystemActivation+0x2a8>)
 8003292:	f006 fe1a 	bl	8009eca <memset>
 8003296:	4a34      	ldr	r2, [pc, #208]	@ (8003368 <SystemActivation+0x2e0>)
 8003298:	217f      	movs	r1, #127	@ 0x7f
 800329a:	4825      	ldr	r0, [pc, #148]	@ (8003330 <SystemActivation+0x2a8>)
 800329c:	f006 fd7e 	bl	8009d9c <sniprintf>
			DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE );
 80032a0:	4b25      	ldr	r3, [pc, #148]	@ (8003338 <SystemActivation+0x2b0>)
 80032a2:	781b      	ldrb	r3, [r3, #0]
 80032a4:	2280      	movs	r2, #128	@ 0x80
 80032a6:	4922      	ldr	r1, [pc, #136]	@ (8003330 <SystemActivation+0x2a8>)
 80032a8:	4618      	mov	r0, r3
 80032aa:	f7fd ff41 	bl	8001130 <DebugPrint>
 80032ae:	e013      	b.n	80032d8 <SystemActivation+0x250>
		}else{
			memset(PrintBuffer, '\0', COMM_SIZE); snprintf(PrintBuffer, COMM_SIZE-1, "\n\r\t- EEPROM config INVALID -> 0x%02X", DAC_ReadBuffer[3] );
 80032b0:	2280      	movs	r2, #128	@ 0x80
 80032b2:	2100      	movs	r1, #0
 80032b4:	481e      	ldr	r0, [pc, #120]	@ (8003330 <SystemActivation+0x2a8>)
 80032b6:	f006 fe08 	bl	8009eca <memset>
 80032ba:	7bfb      	ldrb	r3, [r7, #15]
 80032bc:	4a2b      	ldr	r2, [pc, #172]	@ (800336c <SystemActivation+0x2e4>)
 80032be:	217f      	movs	r1, #127	@ 0x7f
 80032c0:	481b      	ldr	r0, [pc, #108]	@ (8003330 <SystemActivation+0x2a8>)
 80032c2:	f006 fd6b 	bl	8009d9c <sniprintf>
			DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE );
 80032c6:	4b1c      	ldr	r3, [pc, #112]	@ (8003338 <SystemActivation+0x2b0>)
 80032c8:	781b      	ldrb	r3, [r3, #0]
 80032ca:	2280      	movs	r2, #128	@ 0x80
 80032cc:	4918      	ldr	r1, [pc, #96]	@ (8003330 <SystemActivation+0x2a8>)
 80032ce:	4618      	mov	r0, r3
 80032d0:	f7fd ff2e 	bl	8001130 <DebugPrint>
			EEPROM_ProgramFlag = true;
 80032d4:	2301      	movs	r3, #1
 80032d6:	75bb      	strb	r3, [r7, #22]
		}

		//Check volatile config data
		if( (DAC_ReadBuffer[0]&0xDE) == 0xD8 ){
 80032d8:	7b3b      	ldrb	r3, [r7, #12]
 80032da:	f003 03de 	and.w	r3, r3, #222	@ 0xde
 80032de:	2bd8      	cmp	r3, #216	@ 0xd8
 80032e0:	d111      	bne.n	8003306 <SystemActivation+0x27e>
			memset(PrintBuffer, '\0', COMM_SIZE); snprintf(PrintBuffer, COMM_SIZE-1, "\n\r\t- Volatile memory config verified");
 80032e2:	2280      	movs	r2, #128	@ 0x80
 80032e4:	2100      	movs	r1, #0
 80032e6:	4812      	ldr	r0, [pc, #72]	@ (8003330 <SystemActivation+0x2a8>)
 80032e8:	f006 fdef 	bl	8009eca <memset>
 80032ec:	4a20      	ldr	r2, [pc, #128]	@ (8003370 <SystemActivation+0x2e8>)
 80032ee:	217f      	movs	r1, #127	@ 0x7f
 80032f0:	480f      	ldr	r0, [pc, #60]	@ (8003330 <SystemActivation+0x2a8>)
 80032f2:	f006 fd53 	bl	8009d9c <sniprintf>
			DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE );
 80032f6:	4b10      	ldr	r3, [pc, #64]	@ (8003338 <SystemActivation+0x2b0>)
 80032f8:	781b      	ldrb	r3, [r3, #0]
 80032fa:	2280      	movs	r2, #128	@ 0x80
 80032fc:	490c      	ldr	r1, [pc, #48]	@ (8003330 <SystemActivation+0x2a8>)
 80032fe:	4618      	mov	r0, r3
 8003300:	f7fd ff16 	bl	8001130 <DebugPrint>
 8003304:	e04b      	b.n	800339e <SystemActivation+0x316>
		}else{
			memset(PrintBuffer, '\0', COMM_SIZE); snprintf(PrintBuffer, COMM_SIZE-1, "\n\r\t- Volatile memory config INVALID -> 0x%02X", DAC_ReadBuffer[0] );
 8003306:	2280      	movs	r2, #128	@ 0x80
 8003308:	2100      	movs	r1, #0
 800330a:	4809      	ldr	r0, [pc, #36]	@ (8003330 <SystemActivation+0x2a8>)
 800330c:	f006 fddd 	bl	8009eca <memset>
 8003310:	7b3b      	ldrb	r3, [r7, #12]
 8003312:	4a18      	ldr	r2, [pc, #96]	@ (8003374 <SystemActivation+0x2ec>)
 8003314:	217f      	movs	r1, #127	@ 0x7f
 8003316:	4806      	ldr	r0, [pc, #24]	@ (8003330 <SystemActivation+0x2a8>)
 8003318:	f006 fd40 	bl	8009d9c <sniprintf>
			DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE );
 800331c:	4b06      	ldr	r3, [pc, #24]	@ (8003338 <SystemActivation+0x2b0>)
 800331e:	781b      	ldrb	r3, [r3, #0]
 8003320:	2280      	movs	r2, #128	@ 0x80
 8003322:	4903      	ldr	r1, [pc, #12]	@ (8003330 <SystemActivation+0x2a8>)
 8003324:	4618      	mov	r0, r3
 8003326:	f7fd ff03 	bl	8001130 <DebugPrint>
			EEPROM_ProgramFlag = true;
 800332a:	2301      	movs	r3, #1
 800332c:	75bb      	strb	r3, [r7, #22]
 800332e:	e036      	b.n	800339e <SystemActivation+0x316>
 8003330:	200004ec 	.word	0x200004ec
 8003334:	0800ddb4 	.word	0x0800ddb4
 8003338:	2000004b 	.word	0x2000004b
 800333c:	20000370 	.word	0x20000370
 8003340:	200005ac 	.word	0x200005ac
 8003344:	0800dde0 	.word	0x0800dde0
 8003348:	0800de00 	.word	0x0800de00
 800334c:	0800de28 	.word	0x0800de28
 8003350:	0800de44 	.word	0x0800de44
 8003354:	0800de64 	.word	0x0800de64
 8003358:	0800de7c 	.word	0x0800de7c
 800335c:	0800de94 	.word	0x0800de94
 8003360:	0800deac 	.word	0x0800deac
 8003364:	0800dec4 	.word	0x0800dec4
 8003368:	0800dee8 	.word	0x0800dee8
 800336c:	0800df04 	.word	0x0800df04
 8003370:	0800df2c 	.word	0x0800df2c
 8003374:	0800df54 	.word	0x0800df54
		}

	}else{
		memset(PrintBuffer, '\0', COMM_SIZE); snprintf(PrintBuffer, COMM_SIZE-1, "\n\r\t- System Read Error during memory verification");
 8003378:	2280      	movs	r2, #128	@ 0x80
 800337a:	2100      	movs	r1, #0
 800337c:	489a      	ldr	r0, [pc, #616]	@ (80035e8 <SystemActivation+0x560>)
 800337e:	f006 fda4 	bl	8009eca <memset>
 8003382:	4a9a      	ldr	r2, [pc, #616]	@ (80035ec <SystemActivation+0x564>)
 8003384:	217f      	movs	r1, #127	@ 0x7f
 8003386:	4898      	ldr	r0, [pc, #608]	@ (80035e8 <SystemActivation+0x560>)
 8003388:	f006 fd08 	bl	8009d9c <sniprintf>
		DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE );
 800338c:	4b98      	ldr	r3, [pc, #608]	@ (80035f0 <SystemActivation+0x568>)
 800338e:	781b      	ldrb	r3, [r3, #0]
 8003390:	2280      	movs	r2, #128	@ 0x80
 8003392:	4995      	ldr	r1, [pc, #596]	@ (80035e8 <SystemActivation+0x560>)
 8003394:	4618      	mov	r0, r3
 8003396:	f7fd fecb 	bl	8001130 <DebugPrint>
		SystemActivationFlag = false;
 800339a:	2300      	movs	r3, #0
 800339c:	75fb      	strb	r3, [r7, #23]
	}


	//If DAC config settings are invalid, program all memory
	if( EEPROM_ProgramFlag == true ){
 800339e:	7dbb      	ldrb	r3, [r7, #22]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d01b      	beq.n	80033dc <SystemActivation+0x354>
		if(	MCP4726A1T_WriteAllMemory(VREF_BUFF, PD_100K, G_1X, 0 ) != DAC_STATUS_OK ){
 80033a4:	2300      	movs	r3, #0
 80033a6:	2200      	movs	r2, #0
 80033a8:	2102      	movs	r1, #2
 80033aa:	2003      	movs	r0, #3
 80033ac:	f7ff f9f0 	bl	8002790 <MCP4726A1T_WriteAllMemory>
 80033b0:	4603      	mov	r3, r0
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d012      	beq.n	80033dc <SystemActivation+0x354>
			memset(PrintBuffer, '\0', COMM_SIZE); snprintf(PrintBuffer, COMM_SIZE-1, "\n\r\t- Memory cofig program Failed");
 80033b6:	2280      	movs	r2, #128	@ 0x80
 80033b8:	2100      	movs	r1, #0
 80033ba:	488b      	ldr	r0, [pc, #556]	@ (80035e8 <SystemActivation+0x560>)
 80033bc:	f006 fd85 	bl	8009eca <memset>
 80033c0:	4a8c      	ldr	r2, [pc, #560]	@ (80035f4 <SystemActivation+0x56c>)
 80033c2:	217f      	movs	r1, #127	@ 0x7f
 80033c4:	4888      	ldr	r0, [pc, #544]	@ (80035e8 <SystemActivation+0x560>)
 80033c6:	f006 fce9 	bl	8009d9c <sniprintf>
			DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE );
 80033ca:	4b89      	ldr	r3, [pc, #548]	@ (80035f0 <SystemActivation+0x568>)
 80033cc:	781b      	ldrb	r3, [r3, #0]
 80033ce:	2280      	movs	r2, #128	@ 0x80
 80033d0:	4985      	ldr	r1, [pc, #532]	@ (80035e8 <SystemActivation+0x560>)
 80033d2:	4618      	mov	r0, r3
 80033d4:	f7fd feac 	bl	8001130 <DebugPrint>
			SystemActivationFlag = false;
 80033d8:	2300      	movs	r3, #0
 80033da:	75fb      	strb	r3, [r7, #23]
		}
	}


	//If DAC config has been reprogrammed, re-check the config data
	if( EEPROM_ProgramFlag == true ){
 80033dc:	7dbb      	ldrb	r3, [r7, #22]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d078      	beq.n	80034d4 <SystemActivation+0x44c>

		//Read newly programmed memory from DAC
		memset(DAC_ReadBuffer, 0xFF, 8);
 80033e2:	f107 030c 	add.w	r3, r7, #12
 80033e6:	2208      	movs	r2, #8
 80033e8:	21ff      	movs	r1, #255	@ 0xff
 80033ea:	4618      	mov	r0, r3
 80033ec:	f006 fd6d 	bl	8009eca <memset>
		if( MCP4726A1T_ReadAllMemory(DAC_ReadBuffer) == DAC_STATUS_OK ){
 80033f0:	f107 030c 	add.w	r3, r7, #12
 80033f4:	4618      	mov	r0, r3
 80033f6:	f7ff fa4d 	bl	8002894 <MCP4726A1T_ReadAllMemory>
 80033fa:	4603      	mov	r3, r0
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d156      	bne.n	80034ae <SystemActivation+0x426>

			//Check eeprom config data
			if( (DAC_ReadBuffer[3]&0xDE) == 0xDC ){
 8003400:	7bfb      	ldrb	r3, [r7, #15]
 8003402:	f003 03de 	and.w	r3, r3, #222	@ 0xde
 8003406:	2bdc      	cmp	r3, #220	@ 0xdc
 8003408:	d111      	bne.n	800342e <SystemActivation+0x3a6>
				memset(PrintBuffer, '\0', COMM_SIZE); snprintf(PrintBuffer, COMM_SIZE-1, "\n\r\t- EEPROM config re-check verified");
 800340a:	2280      	movs	r2, #128	@ 0x80
 800340c:	2100      	movs	r1, #0
 800340e:	4876      	ldr	r0, [pc, #472]	@ (80035e8 <SystemActivation+0x560>)
 8003410:	f006 fd5b 	bl	8009eca <memset>
 8003414:	4a78      	ldr	r2, [pc, #480]	@ (80035f8 <SystemActivation+0x570>)
 8003416:	217f      	movs	r1, #127	@ 0x7f
 8003418:	4873      	ldr	r0, [pc, #460]	@ (80035e8 <SystemActivation+0x560>)
 800341a:	f006 fcbf 	bl	8009d9c <sniprintf>
				DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE );
 800341e:	4b74      	ldr	r3, [pc, #464]	@ (80035f0 <SystemActivation+0x568>)
 8003420:	781b      	ldrb	r3, [r3, #0]
 8003422:	2280      	movs	r2, #128	@ 0x80
 8003424:	4970      	ldr	r1, [pc, #448]	@ (80035e8 <SystemActivation+0x560>)
 8003426:	4618      	mov	r0, r3
 8003428:	f7fd fe82 	bl	8001130 <DebugPrint>
 800342c:	e013      	b.n	8003456 <SystemActivation+0x3ce>
			}else{
				memset(PrintBuffer, '\0', COMM_SIZE); snprintf(PrintBuffer, COMM_SIZE-1, "\n\r\t- EEPROM config re-check failed -> 0x%02X", DAC_ReadBuffer[3] );
 800342e:	2280      	movs	r2, #128	@ 0x80
 8003430:	2100      	movs	r1, #0
 8003432:	486d      	ldr	r0, [pc, #436]	@ (80035e8 <SystemActivation+0x560>)
 8003434:	f006 fd49 	bl	8009eca <memset>
 8003438:	7bfb      	ldrb	r3, [r7, #15]
 800343a:	4a70      	ldr	r2, [pc, #448]	@ (80035fc <SystemActivation+0x574>)
 800343c:	217f      	movs	r1, #127	@ 0x7f
 800343e:	486a      	ldr	r0, [pc, #424]	@ (80035e8 <SystemActivation+0x560>)
 8003440:	f006 fcac 	bl	8009d9c <sniprintf>
				DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE );
 8003444:	4b6a      	ldr	r3, [pc, #424]	@ (80035f0 <SystemActivation+0x568>)
 8003446:	781b      	ldrb	r3, [r3, #0]
 8003448:	2280      	movs	r2, #128	@ 0x80
 800344a:	4967      	ldr	r1, [pc, #412]	@ (80035e8 <SystemActivation+0x560>)
 800344c:	4618      	mov	r0, r3
 800344e:	f7fd fe6f 	bl	8001130 <DebugPrint>
				SystemActivationFlag = false;
 8003452:	2300      	movs	r3, #0
 8003454:	75fb      	strb	r3, [r7, #23]
			}

			//Check volatile config data
			if( (DAC_ReadBuffer[0]&0xDE) == 0xD8 ){
 8003456:	7b3b      	ldrb	r3, [r7, #12]
 8003458:	f003 03de 	and.w	r3, r3, #222	@ 0xde
 800345c:	2bd8      	cmp	r3, #216	@ 0xd8
 800345e:	d111      	bne.n	8003484 <SystemActivation+0x3fc>
				memset(PrintBuffer, '\0', COMM_SIZE); snprintf(PrintBuffer, COMM_SIZE-1, "\n\r\t- Volatile memory config re-check verified");
 8003460:	2280      	movs	r2, #128	@ 0x80
 8003462:	2100      	movs	r1, #0
 8003464:	4860      	ldr	r0, [pc, #384]	@ (80035e8 <SystemActivation+0x560>)
 8003466:	f006 fd30 	bl	8009eca <memset>
 800346a:	4a65      	ldr	r2, [pc, #404]	@ (8003600 <SystemActivation+0x578>)
 800346c:	217f      	movs	r1, #127	@ 0x7f
 800346e:	485e      	ldr	r0, [pc, #376]	@ (80035e8 <SystemActivation+0x560>)
 8003470:	f006 fc94 	bl	8009d9c <sniprintf>
				DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE );
 8003474:	4b5e      	ldr	r3, [pc, #376]	@ (80035f0 <SystemActivation+0x568>)
 8003476:	781b      	ldrb	r3, [r3, #0]
 8003478:	2280      	movs	r2, #128	@ 0x80
 800347a:	495b      	ldr	r1, [pc, #364]	@ (80035e8 <SystemActivation+0x560>)
 800347c:	4618      	mov	r0, r3
 800347e:	f7fd fe57 	bl	8001130 <DebugPrint>
 8003482:	e027      	b.n	80034d4 <SystemActivation+0x44c>
			}else{
				memset(PrintBuffer, '\0', COMM_SIZE); snprintf(PrintBuffer, COMM_SIZE-1, "\n\r\t- Volatile memory config re-check INVALID -> 0x%02X", DAC_ReadBuffer[0] );
 8003484:	2280      	movs	r2, #128	@ 0x80
 8003486:	2100      	movs	r1, #0
 8003488:	4857      	ldr	r0, [pc, #348]	@ (80035e8 <SystemActivation+0x560>)
 800348a:	f006 fd1e 	bl	8009eca <memset>
 800348e:	7b3b      	ldrb	r3, [r7, #12]
 8003490:	4a5c      	ldr	r2, [pc, #368]	@ (8003604 <SystemActivation+0x57c>)
 8003492:	217f      	movs	r1, #127	@ 0x7f
 8003494:	4854      	ldr	r0, [pc, #336]	@ (80035e8 <SystemActivation+0x560>)
 8003496:	f006 fc81 	bl	8009d9c <sniprintf>
				DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE );
 800349a:	4b55      	ldr	r3, [pc, #340]	@ (80035f0 <SystemActivation+0x568>)
 800349c:	781b      	ldrb	r3, [r3, #0]
 800349e:	2280      	movs	r2, #128	@ 0x80
 80034a0:	4951      	ldr	r1, [pc, #324]	@ (80035e8 <SystemActivation+0x560>)
 80034a2:	4618      	mov	r0, r3
 80034a4:	f7fd fe44 	bl	8001130 <DebugPrint>
				SystemActivationFlag = false;
 80034a8:	2300      	movs	r3, #0
 80034aa:	75fb      	strb	r3, [r7, #23]
 80034ac:	e012      	b.n	80034d4 <SystemActivation+0x44c>
			}

		}else{
			memset(PrintBuffer, '\0', COMM_SIZE); snprintf(PrintBuffer, COMM_SIZE-1, "\n\r\t- DAC System Read Error during memory re-check verification");
 80034ae:	2280      	movs	r2, #128	@ 0x80
 80034b0:	2100      	movs	r1, #0
 80034b2:	484d      	ldr	r0, [pc, #308]	@ (80035e8 <SystemActivation+0x560>)
 80034b4:	f006 fd09 	bl	8009eca <memset>
 80034b8:	4a53      	ldr	r2, [pc, #332]	@ (8003608 <SystemActivation+0x580>)
 80034ba:	217f      	movs	r1, #127	@ 0x7f
 80034bc:	484a      	ldr	r0, [pc, #296]	@ (80035e8 <SystemActivation+0x560>)
 80034be:	f006 fc6d 	bl	8009d9c <sniprintf>
			DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE );
 80034c2:	4b4b      	ldr	r3, [pc, #300]	@ (80035f0 <SystemActivation+0x568>)
 80034c4:	781b      	ldrb	r3, [r3, #0]
 80034c6:	2280      	movs	r2, #128	@ 0x80
 80034c8:	4947      	ldr	r1, [pc, #284]	@ (80035e8 <SystemActivation+0x560>)
 80034ca:	4618      	mov	r0, r3
 80034cc:	f7fd fe30 	bl	8001130 <DebugPrint>
			SystemActivationFlag = false;
 80034d0:	2300      	movs	r3, #0
 80034d2:	75fb      	strb	r3, [r7, #23]
		}
	}


	//Check POR bit to ensure that the DAC is awake
	if( (DAC_ReadBuffer[0]&0x80) == 0x80 ){
 80034d4:	7b3b      	ldrb	r3, [r7, #12]
 80034d6:	b25b      	sxtb	r3, r3
 80034d8:	2b00      	cmp	r3, #0
 80034da:	da11      	bge.n	8003500 <SystemActivation+0x478>
		memset(PrintBuffer, '\0', COMM_SIZE); snprintf(PrintBuffer, COMM_SIZE-1, "\n\r\t- DAC successfully powered on");
 80034dc:	2280      	movs	r2, #128	@ 0x80
 80034de:	2100      	movs	r1, #0
 80034e0:	4841      	ldr	r0, [pc, #260]	@ (80035e8 <SystemActivation+0x560>)
 80034e2:	f006 fcf2 	bl	8009eca <memset>
 80034e6:	4a49      	ldr	r2, [pc, #292]	@ (800360c <SystemActivation+0x584>)
 80034e8:	217f      	movs	r1, #127	@ 0x7f
 80034ea:	483f      	ldr	r0, [pc, #252]	@ (80035e8 <SystemActivation+0x560>)
 80034ec:	f006 fc56 	bl	8009d9c <sniprintf>
		DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE );
 80034f0:	4b3f      	ldr	r3, [pc, #252]	@ (80035f0 <SystemActivation+0x568>)
 80034f2:	781b      	ldrb	r3, [r3, #0]
 80034f4:	2280      	movs	r2, #128	@ 0x80
 80034f6:	493c      	ldr	r1, [pc, #240]	@ (80035e8 <SystemActivation+0x560>)
 80034f8:	4618      	mov	r0, r3
 80034fa:	f7fd fe19 	bl	8001130 <DebugPrint>
 80034fe:	e012      	b.n	8003526 <SystemActivation+0x49e>
	}else{
		memset(PrintBuffer, '\0', COMM_SIZE); snprintf(PrintBuffer, COMM_SIZE-1, "\n\r\t- DAC failed to powered on");
 8003500:	2280      	movs	r2, #128	@ 0x80
 8003502:	2100      	movs	r1, #0
 8003504:	4838      	ldr	r0, [pc, #224]	@ (80035e8 <SystemActivation+0x560>)
 8003506:	f006 fce0 	bl	8009eca <memset>
 800350a:	4a41      	ldr	r2, [pc, #260]	@ (8003610 <SystemActivation+0x588>)
 800350c:	217f      	movs	r1, #127	@ 0x7f
 800350e:	4836      	ldr	r0, [pc, #216]	@ (80035e8 <SystemActivation+0x560>)
 8003510:	f006 fc44 	bl	8009d9c <sniprintf>
		DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE );
 8003514:	4b36      	ldr	r3, [pc, #216]	@ (80035f0 <SystemActivation+0x568>)
 8003516:	781b      	ldrb	r3, [r3, #0]
 8003518:	2280      	movs	r2, #128	@ 0x80
 800351a:	4933      	ldr	r1, [pc, #204]	@ (80035e8 <SystemActivation+0x560>)
 800351c:	4618      	mov	r0, r3
 800351e:	f7fd fe07 	bl	8001130 <DebugPrint>
		SystemActivationFlag = false;
 8003522:	2300      	movs	r3, #0
 8003524:	75fb      	strb	r3, [r7, #23]
	}


	//Set the DAC output voltage to 0V so it is in a known state
	if( MCP4726A1T_VoltageOut(0) == DAC_STATUS_OK ){
 8003526:	ed9f 0a3b 	vldr	s0, [pc, #236]	@ 8003614 <SystemActivation+0x58c>
 800352a:	f7ff f83d 	bl	80025a8 <MCP4726A1T_VoltageOut>
 800352e:	4603      	mov	r3, r0
 8003530:	2b00      	cmp	r3, #0
 8003532:	d111      	bne.n	8003558 <SystemActivation+0x4d0>
		memset(PrintBuffer, '\0', COMM_SIZE); snprintf(PrintBuffer, COMM_SIZE-1, "\n\r\t- DAC output voltage reset to know state");
 8003534:	2280      	movs	r2, #128	@ 0x80
 8003536:	2100      	movs	r1, #0
 8003538:	482b      	ldr	r0, [pc, #172]	@ (80035e8 <SystemActivation+0x560>)
 800353a:	f006 fcc6 	bl	8009eca <memset>
 800353e:	4a36      	ldr	r2, [pc, #216]	@ (8003618 <SystemActivation+0x590>)
 8003540:	217f      	movs	r1, #127	@ 0x7f
 8003542:	4829      	ldr	r0, [pc, #164]	@ (80035e8 <SystemActivation+0x560>)
 8003544:	f006 fc2a 	bl	8009d9c <sniprintf>
		DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE );
 8003548:	4b29      	ldr	r3, [pc, #164]	@ (80035f0 <SystemActivation+0x568>)
 800354a:	781b      	ldrb	r3, [r3, #0]
 800354c:	2280      	movs	r2, #128	@ 0x80
 800354e:	4926      	ldr	r1, [pc, #152]	@ (80035e8 <SystemActivation+0x560>)
 8003550:	4618      	mov	r0, r3
 8003552:	f7fd fded 	bl	8001130 <DebugPrint>
 8003556:	e012      	b.n	800357e <SystemActivation+0x4f6>
	}else{
		memset(PrintBuffer, '\0', COMM_SIZE); snprintf(PrintBuffer, COMM_SIZE-1, "\n\r\t- DAC output voltage failed to reset");
 8003558:	2280      	movs	r2, #128	@ 0x80
 800355a:	2100      	movs	r1, #0
 800355c:	4822      	ldr	r0, [pc, #136]	@ (80035e8 <SystemActivation+0x560>)
 800355e:	f006 fcb4 	bl	8009eca <memset>
 8003562:	4a2e      	ldr	r2, [pc, #184]	@ (800361c <SystemActivation+0x594>)
 8003564:	217f      	movs	r1, #127	@ 0x7f
 8003566:	4820      	ldr	r0, [pc, #128]	@ (80035e8 <SystemActivation+0x560>)
 8003568:	f006 fc18 	bl	8009d9c <sniprintf>
		DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE );
 800356c:	4b20      	ldr	r3, [pc, #128]	@ (80035f0 <SystemActivation+0x568>)
 800356e:	781b      	ldrb	r3, [r3, #0]
 8003570:	2280      	movs	r2, #128	@ 0x80
 8003572:	491d      	ldr	r1, [pc, #116]	@ (80035e8 <SystemActivation+0x560>)
 8003574:	4618      	mov	r0, r3
 8003576:	f7fd fddb 	bl	8001130 <DebugPrint>
		SystemActivationFlag = false;
 800357a:	2300      	movs	r3, #0
 800357c:	75fb      	strb	r3, [r7, #23]
	//////////////////////////////////////////////////////////////////////////////
	/////////////// Load System Information from EEPROM  /////////////////////////
	//////////////////////////////////////////////////////////////////////////////

	//Print sequence load message
	memset(PrintBuffer, '\0', COMM_SIZE); snprintf(PrintBuffer,COMM_SIZE-1, "\n\rInitializing system information from memory: "  );
 800357e:	2280      	movs	r2, #128	@ 0x80
 8003580:	2100      	movs	r1, #0
 8003582:	4819      	ldr	r0, [pc, #100]	@ (80035e8 <SystemActivation+0x560>)
 8003584:	f006 fca1 	bl	8009eca <memset>
 8003588:	4a25      	ldr	r2, [pc, #148]	@ (8003620 <SystemActivation+0x598>)
 800358a:	217f      	movs	r1, #127	@ 0x7f
 800358c:	4816      	ldr	r0, [pc, #88]	@ (80035e8 <SystemActivation+0x560>)
 800358e:	f006 fc05 	bl	8009d9c <sniprintf>
	DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE);
 8003592:	4b17      	ldr	r3, [pc, #92]	@ (80035f0 <SystemActivation+0x568>)
 8003594:	781b      	ldrb	r3, [r3, #0]
 8003596:	2280      	movs	r2, #128	@ 0x80
 8003598:	4913      	ldr	r1, [pc, #76]	@ (80035e8 <SystemActivation+0x560>)
 800359a:	4618      	mov	r0, r3
 800359c:	f7fd fdc8 	bl	8001130 <DebugPrint>


	//Read data from the EEPROM IC
	uint8_t EEPROM_ReadArray[7] = {0};
 80035a0:	2300      	movs	r3, #0
 80035a2:	607b      	str	r3, [r7, #4]
 80035a4:	f107 0308 	add.w	r3, r7, #8
 80035a8:	2100      	movs	r1, #0
 80035aa:	460a      	mov	r2, r1
 80035ac:	801a      	strh	r2, [r3, #0]
 80035ae:	460a      	mov	r2, r1
 80035b0:	709a      	strb	r2, [r3, #2]
	if( eeprom_Read(0x0000, EEPROM_ReadArray, sizeof(EEPROM_ReadArray) ) == EEPROM_STATUS_OK ){
 80035b2:	1d3b      	adds	r3, r7, #4
 80035b4:	2207      	movs	r2, #7
 80035b6:	4619      	mov	r1, r3
 80035b8:	2000      	movs	r0, #0
 80035ba:	f7fe fedf 	bl	800237c <eeprom_Read>
 80035be:	4603      	mov	r3, r0
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d131      	bne.n	8003628 <SystemActivation+0x5a0>
		memset(PrintBuffer, '\0', COMM_SIZE); snprintf(PrintBuffer,COMM_SIZE-1, "\n\r\t- Information successfully retrieved from EEPROM"  );
 80035c4:	2280      	movs	r2, #128	@ 0x80
 80035c6:	2100      	movs	r1, #0
 80035c8:	4807      	ldr	r0, [pc, #28]	@ (80035e8 <SystemActivation+0x560>)
 80035ca:	f006 fc7e 	bl	8009eca <memset>
 80035ce:	4a15      	ldr	r2, [pc, #84]	@ (8003624 <SystemActivation+0x59c>)
 80035d0:	217f      	movs	r1, #127	@ 0x7f
 80035d2:	4805      	ldr	r0, [pc, #20]	@ (80035e8 <SystemActivation+0x560>)
 80035d4:	f006 fbe2 	bl	8009d9c <sniprintf>
		DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE);
 80035d8:	4b05      	ldr	r3, [pc, #20]	@ (80035f0 <SystemActivation+0x568>)
 80035da:	781b      	ldrb	r3, [r3, #0]
 80035dc:	2280      	movs	r2, #128	@ 0x80
 80035de:	4902      	ldr	r1, [pc, #8]	@ (80035e8 <SystemActivation+0x560>)
 80035e0:	4618      	mov	r0, r3
 80035e2:	f7fd fda5 	bl	8001130 <DebugPrint>
 80035e6:	e032      	b.n	800364e <SystemActivation+0x5c6>
 80035e8:	200004ec 	.word	0x200004ec
 80035ec:	0800df84 	.word	0x0800df84
 80035f0:	2000004b 	.word	0x2000004b
 80035f4:	0800dfb8 	.word	0x0800dfb8
 80035f8:	0800dfdc 	.word	0x0800dfdc
 80035fc:	0800e004 	.word	0x0800e004
 8003600:	0800e034 	.word	0x0800e034
 8003604:	0800e064 	.word	0x0800e064
 8003608:	0800e09c 	.word	0x0800e09c
 800360c:	0800e0dc 	.word	0x0800e0dc
 8003610:	0800e100 	.word	0x0800e100
 8003614:	00000000 	.word	0x00000000
 8003618:	0800e120 	.word	0x0800e120
 800361c:	0800e14c 	.word	0x0800e14c
 8003620:	0800e174 	.word	0x0800e174
 8003624:	0800e1a4 	.word	0x0800e1a4
	}else{
		memset(PrintBuffer, '\0', COMM_SIZE); snprintf(PrintBuffer,COMM_SIZE-1, "\n\r\t- Information failed to be retrieved from EEPROM"  );
 8003628:	2280      	movs	r2, #128	@ 0x80
 800362a:	2100      	movs	r1, #0
 800362c:	487c      	ldr	r0, [pc, #496]	@ (8003820 <SystemActivation+0x798>)
 800362e:	f006 fc4c 	bl	8009eca <memset>
 8003632:	4a7c      	ldr	r2, [pc, #496]	@ (8003824 <SystemActivation+0x79c>)
 8003634:	217f      	movs	r1, #127	@ 0x7f
 8003636:	487a      	ldr	r0, [pc, #488]	@ (8003820 <SystemActivation+0x798>)
 8003638:	f006 fbb0 	bl	8009d9c <sniprintf>
		DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE);
 800363c:	4b7a      	ldr	r3, [pc, #488]	@ (8003828 <SystemActivation+0x7a0>)
 800363e:	781b      	ldrb	r3, [r3, #0]
 8003640:	2280      	movs	r2, #128	@ 0x80
 8003642:	4977      	ldr	r1, [pc, #476]	@ (8003820 <SystemActivation+0x798>)
 8003644:	4618      	mov	r0, r3
 8003646:	f7fd fd73 	bl	8001130 <DebugPrint>
		SystemActivationFlag = false;
 800364a:	2300      	movs	r3, #0
 800364c:	75fb      	strb	r3, [r7, #23]
	}

	//Set system info
	SysInfo.Button1     = false;
 800364e:	4b77      	ldr	r3, [pc, #476]	@ (800382c <SystemActivation+0x7a4>)
 8003650:	2200      	movs	r2, #0
 8003652:	709a      	strb	r2, [r3, #2]
	SysInfo.Button2     = false;
 8003654:	4b75      	ldr	r3, [pc, #468]	@ (800382c <SystemActivation+0x7a4>)
 8003656:	2200      	movs	r2, #0
 8003658:	70da      	strb	r2, [r3, #3]
	SysInfo.Button3     = false;
 800365a:	4b74      	ldr	r3, [pc, #464]	@ (800382c <SystemActivation+0x7a4>)
 800365c:	2200      	movs	r2, #0
 800365e:	711a      	strb	r2, [r3, #4]
	SysInfo.SerialNumber   = bytes_to_uint16(&EEPROM_ReadArray[0]);
 8003660:	1d3b      	adds	r3, r7, #4
 8003662:	4618      	mov	r0, r3
 8003664:	f7fd fb5d 	bl	8000d22 <bytes_to_uint16>
 8003668:	4603      	mov	r3, r0
 800366a:	461a      	mov	r2, r3
 800366c:	4b6f      	ldr	r3, [pc, #444]	@ (800382c <SystemActivation+0x7a4>)
 800366e:	80da      	strh	r2, [r3, #6]
	SysInfo.SensorType     = EEPROM_ReadArray[2];
 8003670:	79ba      	ldrb	r2, [r7, #6]
 8003672:	4b6e      	ldr	r3, [pc, #440]	@ (800382c <SystemActivation+0x7a4>)
 8003674:	721a      	strb	r2, [r3, #8]
	SysInfo.CAN_Address    = bytes_to_uint16(&EEPROM_ReadArray[3]);
 8003676:	1d3b      	adds	r3, r7, #4
 8003678:	3303      	adds	r3, #3
 800367a:	4618      	mov	r0, r3
 800367c:	f7fd fb51 	bl	8000d22 <bytes_to_uint16>
 8003680:	4603      	mov	r3, r0
 8003682:	461a      	mov	r2, r3
 8003684:	4b69      	ldr	r3, [pc, #420]	@ (800382c <SystemActivation+0x7a4>)
 8003686:	815a      	strh	r2, [r3, #10]
	SysInfo.EEPROM_Address = bytes_to_uint16(&EEPROM_ReadArray[5]);
 8003688:	1d3b      	adds	r3, r7, #4
 800368a:	3305      	adds	r3, #5
 800368c:	4618      	mov	r0, r3
 800368e:	f7fd fb48 	bl	8000d22 <bytes_to_uint16>
 8003692:	4603      	mov	r3, r0
 8003694:	461a      	mov	r2, r3
 8003696:	4b65      	ldr	r3, [pc, #404]	@ (800382c <SystemActivation+0x7a4>)
 8003698:	819a      	strh	r2, [r3, #12]

	//Verify that data read from EEPROM is valid
	if(SysInfo.SerialNumber==0xFFFF || SysInfo.SensorType==0xFF || SysInfo.CAN_Address==0xFFFF || SysInfo.EEPROM_Address==0xFFFF ){
 800369a:	4b64      	ldr	r3, [pc, #400]	@ (800382c <SystemActivation+0x7a4>)
 800369c:	88db      	ldrh	r3, [r3, #6]
 800369e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d00f      	beq.n	80036c6 <SystemActivation+0x63e>
 80036a6:	4b61      	ldr	r3, [pc, #388]	@ (800382c <SystemActivation+0x7a4>)
 80036a8:	7a1b      	ldrb	r3, [r3, #8]
 80036aa:	2bff      	cmp	r3, #255	@ 0xff
 80036ac:	d00b      	beq.n	80036c6 <SystemActivation+0x63e>
 80036ae:	4b5f      	ldr	r3, [pc, #380]	@ (800382c <SystemActivation+0x7a4>)
 80036b0:	895b      	ldrh	r3, [r3, #10]
 80036b2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d005      	beq.n	80036c6 <SystemActivation+0x63e>
 80036ba:	4b5c      	ldr	r3, [pc, #368]	@ (800382c <SystemActivation+0x7a4>)
 80036bc:	899b      	ldrh	r3, [r3, #12]
 80036be:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d15f      	bne.n	8003786 <SystemActivation+0x6fe>
		memset(PrintBuffer, '\0', COMM_SIZE); snprintf(PrintBuffer, COMM_SIZE-1, "\n\r\t- EEPROM data is invalid -> Memory Must be Programmed"  );
 80036c6:	2280      	movs	r2, #128	@ 0x80
 80036c8:	2100      	movs	r1, #0
 80036ca:	4855      	ldr	r0, [pc, #340]	@ (8003820 <SystemActivation+0x798>)
 80036cc:	f006 fbfd 	bl	8009eca <memset>
 80036d0:	4a57      	ldr	r2, [pc, #348]	@ (8003830 <SystemActivation+0x7a8>)
 80036d2:	217f      	movs	r1, #127	@ 0x7f
 80036d4:	4852      	ldr	r0, [pc, #328]	@ (8003820 <SystemActivation+0x798>)
 80036d6:	f006 fb61 	bl	8009d9c <sniprintf>
		DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE);
 80036da:	4b53      	ldr	r3, [pc, #332]	@ (8003828 <SystemActivation+0x7a0>)
 80036dc:	781b      	ldrb	r3, [r3, #0]
 80036de:	2280      	movs	r2, #128	@ 0x80
 80036e0:	494f      	ldr	r1, [pc, #316]	@ (8003820 <SystemActivation+0x798>)
 80036e2:	4618      	mov	r0, r3
 80036e4:	f7fd fd24 	bl	8001130 <DebugPrint>
		memset(PrintBuffer, '\0', COMM_SIZE); snprintf(PrintBuffer, COMM_SIZE-1, "\n\r\t- Serial Number:\t0x%04X", SysInfo.SerialNumber );
 80036e8:	2280      	movs	r2, #128	@ 0x80
 80036ea:	2100      	movs	r1, #0
 80036ec:	484c      	ldr	r0, [pc, #304]	@ (8003820 <SystemActivation+0x798>)
 80036ee:	f006 fbec 	bl	8009eca <memset>
 80036f2:	4b4e      	ldr	r3, [pc, #312]	@ (800382c <SystemActivation+0x7a4>)
 80036f4:	88db      	ldrh	r3, [r3, #6]
 80036f6:	4a4f      	ldr	r2, [pc, #316]	@ (8003834 <SystemActivation+0x7ac>)
 80036f8:	217f      	movs	r1, #127	@ 0x7f
 80036fa:	4849      	ldr	r0, [pc, #292]	@ (8003820 <SystemActivation+0x798>)
 80036fc:	f006 fb4e 	bl	8009d9c <sniprintf>
		DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE);
 8003700:	4b49      	ldr	r3, [pc, #292]	@ (8003828 <SystemActivation+0x7a0>)
 8003702:	781b      	ldrb	r3, [r3, #0]
 8003704:	2280      	movs	r2, #128	@ 0x80
 8003706:	4946      	ldr	r1, [pc, #280]	@ (8003820 <SystemActivation+0x798>)
 8003708:	4618      	mov	r0, r3
 800370a:	f7fd fd11 	bl	8001130 <DebugPrint>
		memset(PrintBuffer, '\0', COMM_SIZE); snprintf(PrintBuffer, COMM_SIZE-1, "\n\r\t- CAN Address:\t0x%04X", SysInfo.CAN_Address );
 800370e:	2280      	movs	r2, #128	@ 0x80
 8003710:	2100      	movs	r1, #0
 8003712:	4843      	ldr	r0, [pc, #268]	@ (8003820 <SystemActivation+0x798>)
 8003714:	f006 fbd9 	bl	8009eca <memset>
 8003718:	4b44      	ldr	r3, [pc, #272]	@ (800382c <SystemActivation+0x7a4>)
 800371a:	895b      	ldrh	r3, [r3, #10]
 800371c:	4a46      	ldr	r2, [pc, #280]	@ (8003838 <SystemActivation+0x7b0>)
 800371e:	217f      	movs	r1, #127	@ 0x7f
 8003720:	483f      	ldr	r0, [pc, #252]	@ (8003820 <SystemActivation+0x798>)
 8003722:	f006 fb3b 	bl	8009d9c <sniprintf>
		DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE);
 8003726:	4b40      	ldr	r3, [pc, #256]	@ (8003828 <SystemActivation+0x7a0>)
 8003728:	781b      	ldrb	r3, [r3, #0]
 800372a:	2280      	movs	r2, #128	@ 0x80
 800372c:	493c      	ldr	r1, [pc, #240]	@ (8003820 <SystemActivation+0x798>)
 800372e:	4618      	mov	r0, r3
 8003730:	f7fd fcfe 	bl	8001130 <DebugPrint>
		memset(PrintBuffer, '\0', COMM_SIZE); snprintf(PrintBuffer, COMM_SIZE-1, "\n\r\t- Sensor Type:\t%u", SysInfo.SensorType);
 8003734:	2280      	movs	r2, #128	@ 0x80
 8003736:	2100      	movs	r1, #0
 8003738:	4839      	ldr	r0, [pc, #228]	@ (8003820 <SystemActivation+0x798>)
 800373a:	f006 fbc6 	bl	8009eca <memset>
 800373e:	4b3b      	ldr	r3, [pc, #236]	@ (800382c <SystemActivation+0x7a4>)
 8003740:	7a1b      	ldrb	r3, [r3, #8]
 8003742:	4a3e      	ldr	r2, [pc, #248]	@ (800383c <SystemActivation+0x7b4>)
 8003744:	217f      	movs	r1, #127	@ 0x7f
 8003746:	4836      	ldr	r0, [pc, #216]	@ (8003820 <SystemActivation+0x798>)
 8003748:	f006 fb28 	bl	8009d9c <sniprintf>
		DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE);
 800374c:	4b36      	ldr	r3, [pc, #216]	@ (8003828 <SystemActivation+0x7a0>)
 800374e:	781b      	ldrb	r3, [r3, #0]
 8003750:	2280      	movs	r2, #128	@ 0x80
 8003752:	4933      	ldr	r1, [pc, #204]	@ (8003820 <SystemActivation+0x798>)
 8003754:	4618      	mov	r0, r3
 8003756:	f7fd fceb 	bl	8001130 <DebugPrint>
		memset(PrintBuffer, '\0', COMM_SIZE); snprintf(PrintBuffer, COMM_SIZE-1, "\n\r\t- EEPROM Address:\t0x%04X", SysInfo.EEPROM_Address );
 800375a:	2280      	movs	r2, #128	@ 0x80
 800375c:	2100      	movs	r1, #0
 800375e:	4830      	ldr	r0, [pc, #192]	@ (8003820 <SystemActivation+0x798>)
 8003760:	f006 fbb3 	bl	8009eca <memset>
 8003764:	4b31      	ldr	r3, [pc, #196]	@ (800382c <SystemActivation+0x7a4>)
 8003766:	899b      	ldrh	r3, [r3, #12]
 8003768:	4a35      	ldr	r2, [pc, #212]	@ (8003840 <SystemActivation+0x7b8>)
 800376a:	217f      	movs	r1, #127	@ 0x7f
 800376c:	482c      	ldr	r0, [pc, #176]	@ (8003820 <SystemActivation+0x798>)
 800376e:	f006 fb15 	bl	8009d9c <sniprintf>
		DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE);
 8003772:	4b2d      	ldr	r3, [pc, #180]	@ (8003828 <SystemActivation+0x7a0>)
 8003774:	781b      	ldrb	r3, [r3, #0]
 8003776:	2280      	movs	r2, #128	@ 0x80
 8003778:	4929      	ldr	r1, [pc, #164]	@ (8003820 <SystemActivation+0x798>)
 800377a:	4618      	mov	r0, r3
 800377c:	f7fd fcd8 	bl	8001130 <DebugPrint>
		SystemActivationFlag = false;
 8003780:	2300      	movs	r3, #0
 8003782:	75fb      	strb	r3, [r7, #23]
 8003784:	e010      	b.n	80037a8 <SystemActivation+0x720>
	}else{
		memset(PrintBuffer, '\0', COMM_SIZE); snprintf(PrintBuffer, COMM_SIZE-1, "\n\r\t- EEPROM data is valid");
 8003786:	2280      	movs	r2, #128	@ 0x80
 8003788:	2100      	movs	r1, #0
 800378a:	4825      	ldr	r0, [pc, #148]	@ (8003820 <SystemActivation+0x798>)
 800378c:	f006 fb9d 	bl	8009eca <memset>
 8003790:	4a2c      	ldr	r2, [pc, #176]	@ (8003844 <SystemActivation+0x7bc>)
 8003792:	217f      	movs	r1, #127	@ 0x7f
 8003794:	4822      	ldr	r0, [pc, #136]	@ (8003820 <SystemActivation+0x798>)
 8003796:	f006 fb01 	bl	8009d9c <sniprintf>
		DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE);
 800379a:	4b23      	ldr	r3, [pc, #140]	@ (8003828 <SystemActivation+0x7a0>)
 800379c:	781b      	ldrb	r3, [r3, #0]
 800379e:	2280      	movs	r2, #128	@ 0x80
 80037a0:	491f      	ldr	r1, [pc, #124]	@ (8003820 <SystemActivation+0x798>)
 80037a2:	4618      	mov	r0, r3
 80037a4:	f7fd fcc4 	bl	8001130 <DebugPrint>
	//////////////////////////////////////////////////////////////////////////////
	/////////////// Display Sensor Configuration on Indication LEDs //////////////
	//////////////////////////////////////////////////////////////////////////////

	//Set indication lights to show sensor type
	if(SysInfo.SensorType>15){
 80037a8:	4b20      	ldr	r3, [pc, #128]	@ (800382c <SystemActivation+0x7a4>)
 80037aa:	7a1b      	ldrb	r3, [r3, #8]
 80037ac:	2b0f      	cmp	r3, #15
 80037ae:	d90c      	bls.n	80037ca <SystemActivation+0x742>
		Set_LED_Indication5(1);
 80037b0:	2001      	movs	r0, #1
 80037b2:	f7fd fb67 	bl	8000e84 <Set_LED_Indication5>
		Set_LED_Indication4(1);
 80037b6:	2001      	movs	r0, #1
 80037b8:	f7fd fb52 	bl	8000e60 <Set_LED_Indication4>
		Set_LED_Indication3(1);
 80037bc:	2001      	movs	r0, #1
 80037be:	f7fd fb3d 	bl	8000e3c <Set_LED_Indication3>
		Set_LED_Indication2(1);
 80037c2:	2001      	movs	r0, #1
 80037c4:	f7fd fb28 	bl	8000e18 <Set_LED_Indication2>
 80037c8:	e025      	b.n	8003816 <SystemActivation+0x78e>
	}else{
		Set_LED_Indication5( (SysInfo.SensorType>>3)&0x01 );
 80037ca:	4b18      	ldr	r3, [pc, #96]	@ (800382c <SystemActivation+0x7a4>)
 80037cc:	7a1b      	ldrb	r3, [r3, #8]
 80037ce:	08db      	lsrs	r3, r3, #3
 80037d0:	b2db      	uxtb	r3, r3
 80037d2:	f003 0301 	and.w	r3, r3, #1
 80037d6:	b2db      	uxtb	r3, r3
 80037d8:	4618      	mov	r0, r3
 80037da:	f7fd fb53 	bl	8000e84 <Set_LED_Indication5>
		Set_LED_Indication4( (SysInfo.SensorType>>2)&0x01 );
 80037de:	4b13      	ldr	r3, [pc, #76]	@ (800382c <SystemActivation+0x7a4>)
 80037e0:	7a1b      	ldrb	r3, [r3, #8]
 80037e2:	089b      	lsrs	r3, r3, #2
 80037e4:	b2db      	uxtb	r3, r3
 80037e6:	f003 0301 	and.w	r3, r3, #1
 80037ea:	b2db      	uxtb	r3, r3
 80037ec:	4618      	mov	r0, r3
 80037ee:	f7fd fb37 	bl	8000e60 <Set_LED_Indication4>
		Set_LED_Indication3( (SysInfo.SensorType>>1)&0x01 );
 80037f2:	4b0e      	ldr	r3, [pc, #56]	@ (800382c <SystemActivation+0x7a4>)
 80037f4:	7a1b      	ldrb	r3, [r3, #8]
 80037f6:	085b      	lsrs	r3, r3, #1
 80037f8:	b2db      	uxtb	r3, r3
 80037fa:	f003 0301 	and.w	r3, r3, #1
 80037fe:	b2db      	uxtb	r3, r3
 8003800:	4618      	mov	r0, r3
 8003802:	f7fd fb1b 	bl	8000e3c <Set_LED_Indication3>
		Set_LED_Indication2( (SysInfo.SensorType>>0)&0x01 );
 8003806:	4b09      	ldr	r3, [pc, #36]	@ (800382c <SystemActivation+0x7a4>)
 8003808:	7a1b      	ldrb	r3, [r3, #8]
 800380a:	f003 0301 	and.w	r3, r3, #1
 800380e:	b2db      	uxtb	r3, r3
 8003810:	4618      	mov	r0, r3
 8003812:	f7fd fb01 	bl	8000e18 <Set_LED_Indication2>
	}




	return SystemActivationFlag;
 8003816:	7dfb      	ldrb	r3, [r7, #23]
}
 8003818:	4618      	mov	r0, r3
 800381a:	3718      	adds	r7, #24
 800381c:	46bd      	mov	sp, r7
 800381e:	bd80      	pop	{r7, pc}
 8003820:	200004ec 	.word	0x200004ec
 8003824:	0800e1d8 	.word	0x0800e1d8
 8003828:	2000004b 	.word	0x2000004b
 800382c:	200004dc 	.word	0x200004dc
 8003830:	0800e20c 	.word	0x0800e20c
 8003834:	0800e248 	.word	0x0800e248
 8003838:	0800e264 	.word	0x0800e264
 800383c:	0800e280 	.word	0x0800e280
 8003840:	0800e298 	.word	0x0800e298
 8003844:	0800e2b4 	.word	0x0800e2b4

08003848 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003848:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003880 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 800384c:	f7fe fd5a 	bl	8002304 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003850:	480c      	ldr	r0, [pc, #48]	@ (8003884 <LoopForever+0x6>)
  ldr r1, =_edata
 8003852:	490d      	ldr	r1, [pc, #52]	@ (8003888 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003854:	4a0d      	ldr	r2, [pc, #52]	@ (800388c <LoopForever+0xe>)
  movs r3, #0
 8003856:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003858:	e002      	b.n	8003860 <LoopCopyDataInit>

0800385a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800385a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800385c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800385e:	3304      	adds	r3, #4

08003860 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003860:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003862:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003864:	d3f9      	bcc.n	800385a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003866:	4a0a      	ldr	r2, [pc, #40]	@ (8003890 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003868:	4c0a      	ldr	r4, [pc, #40]	@ (8003894 <LoopForever+0x16>)
  movs r3, #0
 800386a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800386c:	e001      	b.n	8003872 <LoopFillZerobss>

0800386e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800386e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003870:	3204      	adds	r2, #4

08003872 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003872:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003874:	d3fb      	bcc.n	800386e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003876:	f006 fb81 	bl	8009f7c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800387a:	f7fd fcb5 	bl	80011e8 <main>

0800387e <LoopForever>:

LoopForever:
    b LoopForever
 800387e:	e7fe      	b.n	800387e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003880:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8003884:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003888:	20000224 	.word	0x20000224
  ldr r2, =_sidata
 800388c:	0800e748 	.word	0x0800e748
  ldr r2, =_sbss
 8003890:	20000224 	.word	0x20000224
  ldr r4, =_ebss
 8003894:	20000758 	.word	0x20000758

08003898 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003898:	e7fe      	b.n	8003898 <ADC1_2_IRQHandler>
	...

0800389c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80038a0:	4b08      	ldr	r3, [pc, #32]	@ (80038c4 <HAL_Init+0x28>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4a07      	ldr	r2, [pc, #28]	@ (80038c4 <HAL_Init+0x28>)
 80038a6:	f043 0310 	orr.w	r3, r3, #16
 80038aa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80038ac:	2003      	movs	r0, #3
 80038ae:	f001 fe69 	bl	8005584 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80038b2:	200f      	movs	r0, #15
 80038b4:	f000 f808 	bl	80038c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80038b8:	f7fe fa16 	bl	8001ce8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80038bc:	2300      	movs	r3, #0
}
 80038be:	4618      	mov	r0, r3
 80038c0:	bd80      	pop	{r7, pc}
 80038c2:	bf00      	nop
 80038c4:	40022000 	.word	0x40022000

080038c8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b082      	sub	sp, #8
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80038d0:	4b12      	ldr	r3, [pc, #72]	@ (800391c <HAL_InitTick+0x54>)
 80038d2:	681a      	ldr	r2, [r3, #0]
 80038d4:	4b12      	ldr	r3, [pc, #72]	@ (8003920 <HAL_InitTick+0x58>)
 80038d6:	781b      	ldrb	r3, [r3, #0]
 80038d8:	4619      	mov	r1, r3
 80038da:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80038de:	fbb3 f3f1 	udiv	r3, r3, r1
 80038e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80038e6:	4618      	mov	r0, r3
 80038e8:	f001 fe81 	bl	80055ee <HAL_SYSTICK_Config>
 80038ec:	4603      	mov	r3, r0
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d001      	beq.n	80038f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80038f2:	2301      	movs	r3, #1
 80038f4:	e00e      	b.n	8003914 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2b0f      	cmp	r3, #15
 80038fa:	d80a      	bhi.n	8003912 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80038fc:	2200      	movs	r2, #0
 80038fe:	6879      	ldr	r1, [r7, #4]
 8003900:	f04f 30ff 	mov.w	r0, #4294967295
 8003904:	f001 fe49 	bl	800559a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003908:	4a06      	ldr	r2, [pc, #24]	@ (8003924 <HAL_InitTick+0x5c>)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800390e:	2300      	movs	r3, #0
 8003910:	e000      	b.n	8003914 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003912:	2301      	movs	r3, #1
}
 8003914:	4618      	mov	r0, r3
 8003916:	3708      	adds	r7, #8
 8003918:	46bd      	mov	sp, r7
 800391a:	bd80      	pop	{r7, pc}
 800391c:	20000050 	.word	0x20000050
 8003920:	20000058 	.word	0x20000058
 8003924:	20000054 	.word	0x20000054

08003928 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003928:	b480      	push	{r7}
 800392a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800392c:	4b06      	ldr	r3, [pc, #24]	@ (8003948 <HAL_IncTick+0x20>)
 800392e:	781b      	ldrb	r3, [r3, #0]
 8003930:	461a      	mov	r2, r3
 8003932:	4b06      	ldr	r3, [pc, #24]	@ (800394c <HAL_IncTick+0x24>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4413      	add	r3, r2
 8003938:	4a04      	ldr	r2, [pc, #16]	@ (800394c <HAL_IncTick+0x24>)
 800393a:	6013      	str	r3, [r2, #0]
}
 800393c:	bf00      	nop
 800393e:	46bd      	mov	sp, r7
 8003940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003944:	4770      	bx	lr
 8003946:	bf00      	nop
 8003948:	20000058 	.word	0x20000058
 800394c:	20000608 	.word	0x20000608

08003950 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003950:	b480      	push	{r7}
 8003952:	af00      	add	r7, sp, #0
  return uwTick;  
 8003954:	4b03      	ldr	r3, [pc, #12]	@ (8003964 <HAL_GetTick+0x14>)
 8003956:	681b      	ldr	r3, [r3, #0]
}
 8003958:	4618      	mov	r0, r3
 800395a:	46bd      	mov	sp, r7
 800395c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003960:	4770      	bx	lr
 8003962:	bf00      	nop
 8003964:	20000608 	.word	0x20000608

08003968 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b084      	sub	sp, #16
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003970:	f7ff ffee 	bl	8003950 <HAL_GetTick>
 8003974:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003980:	d005      	beq.n	800398e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003982:	4b0a      	ldr	r3, [pc, #40]	@ (80039ac <HAL_Delay+0x44>)
 8003984:	781b      	ldrb	r3, [r3, #0]
 8003986:	461a      	mov	r2, r3
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	4413      	add	r3, r2
 800398c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800398e:	bf00      	nop
 8003990:	f7ff ffde 	bl	8003950 <HAL_GetTick>
 8003994:	4602      	mov	r2, r0
 8003996:	68bb      	ldr	r3, [r7, #8]
 8003998:	1ad3      	subs	r3, r2, r3
 800399a:	68fa      	ldr	r2, [r7, #12]
 800399c:	429a      	cmp	r2, r3
 800399e:	d8f7      	bhi.n	8003990 <HAL_Delay+0x28>
  {
  }
}
 80039a0:	bf00      	nop
 80039a2:	bf00      	nop
 80039a4:	3710      	adds	r7, #16
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bd80      	pop	{r7, pc}
 80039aa:	bf00      	nop
 80039ac:	20000058 	.word	0x20000058

080039b0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b09a      	sub	sp, #104	@ 0x68
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80039b8:	2300      	movs	r3, #0
 80039ba:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 80039be:	2300      	movs	r3, #0
 80039c0:	663b      	str	r3, [r7, #96]	@ 0x60
  __IO uint32_t wait_loop_index = 0U;
 80039c2:	2300      	movs	r3, #0
 80039c4:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d101      	bne.n	80039d0 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80039cc:	2301      	movs	r3, #1
 80039ce:	e172      	b.n	8003cb6 <HAL_ADC_Init+0x306>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	691b      	ldr	r3, [r3, #16]
 80039d4:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039da:	f003 0310 	and.w	r3, r3, #16
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d176      	bne.n	8003ad0 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d152      	bne.n	8003a90 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2200      	movs	r2, #0
 80039ee:	645a      	str	r2, [r3, #68]	@ 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2200      	movs	r2, #0
 80039f4:	64da      	str	r2, [r3, #76]	@ 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2200      	movs	r2, #0
 80039fa:	649a      	str	r2, [r3, #72]	@ 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2200      	movs	r2, #0
 8003a00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003a04:	6878      	ldr	r0, [r7, #4]
 8003a06:	f7fe f993 	bl	8001d30 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	689b      	ldr	r3, [r3, #8]
 8003a10:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d13b      	bne.n	8003a90 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8003a18:	6878      	ldr	r0, [r7, #4]
 8003a1a:	f000 ff7d 	bl	8004918 <ADC_Disable>
 8003a1e:	4603      	mov	r3, r0
 8003a20:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a28:	f003 0310 	and.w	r3, r3, #16
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d12f      	bne.n	8003a90 <HAL_ADC_Init+0xe0>
 8003a30:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d12b      	bne.n	8003a90 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a3c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003a40:	f023 0302 	bic.w	r3, r3, #2
 8003a44:	f043 0202 	orr.w	r2, r3, #2
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	641a      	str	r2, [r3, #64]	@ 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	689a      	ldr	r2, [r3, #8]
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003a5a:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	689a      	ldr	r2, [r3, #8]
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8003a6a:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003a6c:	4b94      	ldr	r3, [pc, #592]	@ (8003cc0 <HAL_ADC_Init+0x310>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a94      	ldr	r2, [pc, #592]	@ (8003cc4 <HAL_ADC_Init+0x314>)
 8003a72:	fba2 2303 	umull	r2, r3, r2, r3
 8003a76:	0c9a      	lsrs	r2, r3, #18
 8003a78:	4613      	mov	r3, r2
 8003a7a:	009b      	lsls	r3, r3, #2
 8003a7c:	4413      	add	r3, r2
 8003a7e:	005b      	lsls	r3, r3, #1
 8003a80:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003a82:	e002      	b.n	8003a8a <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8003a84:	68bb      	ldr	r3, [r7, #8]
 8003a86:	3b01      	subs	r3, #1
 8003a88:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003a8a:	68bb      	ldr	r3, [r7, #8]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d1f9      	bne.n	8003a84 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	689b      	ldr	r3, [r3, #8]
 8003a96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d007      	beq.n	8003aae <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	689b      	ldr	r3, [r3, #8]
 8003aa4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8003aa8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003aac:	d110      	bne.n	8003ad0 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ab2:	f023 0312 	bic.w	r3, r3, #18
 8003ab6:	f043 0210 	orr.w	r2, r3, #16
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ac2:	f043 0201 	orr.w	r2, r3, #1
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	645a      	str	r2, [r3, #68]	@ 0x44
      
      tmp_hal_status = HAL_ERROR;
 8003aca:	2301      	movs	r3, #1
 8003acc:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ad4:	f003 0310 	and.w	r3, r3, #16
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	f040 80df 	bne.w	8003c9c <HAL_ADC_Init+0x2ec>
 8003ade:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	f040 80da 	bne.w	8003c9c <HAL_ADC_Init+0x2ec>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	689b      	ldr	r3, [r3, #8]
 8003aee:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	f040 80d2 	bne.w	8003c9c <HAL_ADC_Init+0x2ec>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003afc:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8003b00:	f043 0202 	orr.w	r2, r3, #2
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003b08:	4b6f      	ldr	r3, [pc, #444]	@ (8003cc8 <HAL_ADC_Init+0x318>)
 8003b0a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003b14:	d102      	bne.n	8003b1c <HAL_ADC_Init+0x16c>
 8003b16:	4b6d      	ldr	r3, [pc, #436]	@ (8003ccc <HAL_ADC_Init+0x31c>)
 8003b18:	60fb      	str	r3, [r7, #12]
 8003b1a:	e002      	b.n	8003b22 <HAL_ADC_Init+0x172>
 8003b1c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003b20:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	689b      	ldr	r3, [r3, #8]
 8003b28:	f003 0303 	and.w	r3, r3, #3
 8003b2c:	2b01      	cmp	r3, #1
 8003b2e:	d108      	bne.n	8003b42 <HAL_ADC_Init+0x192>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f003 0301 	and.w	r3, r3, #1
 8003b3a:	2b01      	cmp	r3, #1
 8003b3c:	d101      	bne.n	8003b42 <HAL_ADC_Init+0x192>
 8003b3e:	2301      	movs	r3, #1
 8003b40:	e000      	b.n	8003b44 <HAL_ADC_Init+0x194>
 8003b42:	2300      	movs	r3, #0
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d11c      	bne.n	8003b82 <HAL_ADC_Init+0x1d2>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8003b48:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d010      	beq.n	8003b70 <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	689b      	ldr	r3, [r3, #8]
 8003b52:	f003 0303 	and.w	r3, r3, #3
 8003b56:	2b01      	cmp	r3, #1
 8003b58:	d107      	bne.n	8003b6a <HAL_ADC_Init+0x1ba>
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f003 0301 	and.w	r3, r3, #1
 8003b62:	2b01      	cmp	r3, #1
 8003b64:	d101      	bne.n	8003b6a <HAL_ADC_Init+0x1ba>
 8003b66:	2301      	movs	r3, #1
 8003b68:	e000      	b.n	8003b6c <HAL_ADC_Init+0x1bc>
 8003b6a:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d108      	bne.n	8003b82 <HAL_ADC_Init+0x1d2>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8003b70:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003b72:	689b      	ldr	r3, [r3, #8]
 8003b74:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	431a      	orrs	r2, r3
 8003b7e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003b80:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	7e5b      	ldrb	r3, [r3, #25]
 8003b86:	035b      	lsls	r3, r3, #13
 8003b88:	687a      	ldr	r2, [r7, #4]
 8003b8a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003b8c:	2a01      	cmp	r2, #1
 8003b8e:	d002      	beq.n	8003b96 <HAL_ADC_Init+0x1e6>
 8003b90:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003b94:	e000      	b.n	8003b98 <HAL_ADC_Init+0x1e8>
 8003b96:	2200      	movs	r2, #0
 8003b98:	431a      	orrs	r2, r3
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	68db      	ldr	r3, [r3, #12]
 8003b9e:	431a      	orrs	r2, r3
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	689b      	ldr	r3, [r3, #8]
 8003ba4:	4313      	orrs	r3, r2
 8003ba6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	663b      	str	r3, [r7, #96]	@ 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003bb2:	2b01      	cmp	r3, #1
 8003bb4:	d11b      	bne.n	8003bee <HAL_ADC_Init+0x23e>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	7e5b      	ldrb	r3, [r3, #25]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d109      	bne.n	8003bd2 <HAL_ADC_Init+0x222>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bc2:	3b01      	subs	r3, #1
 8003bc4:	045a      	lsls	r2, r3, #17
 8003bc6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003bce:	663b      	str	r3, [r7, #96]	@ 0x60
 8003bd0:	e00d      	b.n	8003bee <HAL_ADC_Init+0x23e>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bd6:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8003bda:	f043 0220 	orr.w	r2, r3, #32
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	641a      	str	r2, [r3, #64]	@ 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003be6:	f043 0201 	orr.w	r2, r3, #1
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bf2:	2b01      	cmp	r3, #1
 8003bf4:	d007      	beq.n	8003c06 <HAL_ADC_Init+0x256>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003c02:	4313      	orrs	r3, r2
 8003c04:	663b      	str	r3, [r7, #96]	@ 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	689b      	ldr	r3, [r3, #8]
 8003c0c:	f003 030c 	and.w	r3, r3, #12
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d114      	bne.n	8003c3e <HAL_ADC_Init+0x28e>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	68db      	ldr	r3, [r3, #12]
 8003c1a:	687a      	ldr	r2, [r7, #4]
 8003c1c:	6812      	ldr	r2, [r2, #0]
 8003c1e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003c22:	f023 0302 	bic.w	r3, r3, #2
 8003c26:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	7e1b      	ldrb	r3, [r3, #24]
 8003c2c:	039a      	lsls	r2, r3, #14
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003c34:	005b      	lsls	r3, r3, #1
 8003c36:	4313      	orrs	r3, r2
 8003c38:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	663b      	str	r3, [r7, #96]	@ 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	68da      	ldr	r2, [r3, #12]
 8003c44:	4b22      	ldr	r3, [pc, #136]	@ (8003cd0 <HAL_ADC_Init+0x320>)
 8003c46:	4013      	ands	r3, r2
 8003c48:	687a      	ldr	r2, [r7, #4]
 8003c4a:	6812      	ldr	r2, [r2, #0]
 8003c4c:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8003c4e:	430b      	orrs	r3, r1
 8003c50:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	691b      	ldr	r3, [r3, #16]
 8003c56:	2b01      	cmp	r3, #1
 8003c58:	d10c      	bne.n	8003c74 <HAL_ADC_Init+0x2c4>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c60:	f023 010f 	bic.w	r1, r3, #15
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	69db      	ldr	r3, [r3, #28]
 8003c68:	1e5a      	subs	r2, r3, #1
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	430a      	orrs	r2, r1
 8003c70:	631a      	str	r2, [r3, #48]	@ 0x30
 8003c72:	e007      	b.n	8003c84 <HAL_ADC_Init+0x2d4>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f022 020f 	bic.w	r2, r2, #15
 8003c82:	631a      	str	r2, [r3, #48]	@ 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2200      	movs	r2, #0
 8003c88:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c8e:	f023 0303 	bic.w	r3, r3, #3
 8003c92:	f043 0201 	orr.w	r2, r3, #1
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	641a      	str	r2, [r3, #64]	@ 0x40
 8003c9a:	e00a      	b.n	8003cb2 <HAL_ADC_Init+0x302>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ca0:	f023 0312 	bic.w	r3, r3, #18
 8003ca4:	f043 0210 	orr.w	r2, r3, #16
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8003cac:	2301      	movs	r3, #1
 8003cae:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8003cb2:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	3768      	adds	r7, #104	@ 0x68
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bd80      	pop	{r7, pc}
 8003cbe:	bf00      	nop
 8003cc0:	20000050 	.word	0x20000050
 8003cc4:	431bde83 	.word	0x431bde83
 8003cc8:	50000300 	.word	0x50000300
 8003ccc:	50000100 	.word	0x50000100
 8003cd0:	fff0c007 	.word	0xfff0c007

08003cd4 <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b084      	sub	sp, #16
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003cdc:	2300      	movs	r3, #0
 8003cde:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	689b      	ldr	r3, [r3, #8]
 8003ce6:	f003 0304 	and.w	r3, r3, #4
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	f040 809c 	bne.w	8003e28 <HAL_ADC_Start+0x154>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003cf6:	2b01      	cmp	r3, #1
 8003cf8:	d101      	bne.n	8003cfe <HAL_ADC_Start+0x2a>
 8003cfa:	2302      	movs	r3, #2
 8003cfc:	e097      	b.n	8003e2e <HAL_ADC_Start+0x15a>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2201      	movs	r2, #1
 8003d02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003d06:	6878      	ldr	r0, [r7, #4]
 8003d08:	f000 fda2 	bl	8004850 <ADC_Enable>
 8003d0c:	4603      	mov	r3, r0
 8003d0e:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003d10:	7bfb      	ldrb	r3, [r7, #15]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	f040 8083 	bne.w	8003e1e <HAL_ADC_Start+0x14a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d1c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003d20:	f023 0301 	bic.w	r3, r3, #1
 8003d24:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8003d2c:	4b42      	ldr	r3, [pc, #264]	@ (8003e38 <HAL_ADC_Start+0x164>)
 8003d2e:	689b      	ldr	r3, [r3, #8]
 8003d30:	f003 031f 	and.w	r3, r3, #31
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d004      	beq.n	8003d42 <HAL_ADC_Start+0x6e>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003d40:	d115      	bne.n	8003d6e <HAL_ADC_Start+0x9a>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d46:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	68db      	ldr	r3, [r3, #12]
 8003d54:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d027      	beq.n	8003dac <HAL_ADC_Start+0xd8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d60:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003d64:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	641a      	str	r2, [r3, #64]	@ 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8003d6c:	e01e      	b.n	8003dac <HAL_ADC_Start+0xd8>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d72:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003d82:	d004      	beq.n	8003d8e <HAL_ADC_Start+0xba>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4a2c      	ldr	r2, [pc, #176]	@ (8003e3c <HAL_ADC_Start+0x168>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d10e      	bne.n	8003dac <HAL_ADC_Start+0xd8>
 8003d8e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003d92:	68db      	ldr	r3, [r3, #12]
 8003d94:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d007      	beq.n	8003dac <HAL_ADC_Start+0xd8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003da0:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003da4:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	641a      	str	r2, [r3, #64]	@ 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003db0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003db4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003db8:	d106      	bne.n	8003dc8 <HAL_ADC_Start+0xf4>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dbe:	f023 0206 	bic.w	r2, r3, #6
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	645a      	str	r2, [r3, #68]	@ 0x44
 8003dc6:	e002      	b.n	8003dce <HAL_ADC_Start+0xfa>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2200      	movs	r2, #0
 8003dcc:	645a      	str	r2, [r3, #68]	@ 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	221c      	movs	r2, #28
 8003ddc:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8003dde:	4b16      	ldr	r3, [pc, #88]	@ (8003e38 <HAL_ADC_Start+0x164>)
 8003de0:	689b      	ldr	r3, [r3, #8]
 8003de2:	f003 031f 	and.w	r3, r3, #31
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d010      	beq.n	8003e0c <HAL_ADC_Start+0x138>
 8003dea:	4b13      	ldr	r3, [pc, #76]	@ (8003e38 <HAL_ADC_Start+0x164>)
 8003dec:	689b      	ldr	r3, [r3, #8]
 8003dee:	f003 031f 	and.w	r3, r3, #31
 8003df2:	2b05      	cmp	r3, #5
 8003df4:	d00a      	beq.n	8003e0c <HAL_ADC_Start+0x138>
 8003df6:	4b10      	ldr	r3, [pc, #64]	@ (8003e38 <HAL_ADC_Start+0x164>)
 8003df8:	689b      	ldr	r3, [r3, #8]
 8003dfa:	f003 031f 	and.w	r3, r3, #31
 8003dfe:	2b09      	cmp	r3, #9
 8003e00:	d004      	beq.n	8003e0c <HAL_ADC_Start+0x138>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003e0a:	d10f      	bne.n	8003e2c <HAL_ADC_Start+0x158>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	689a      	ldr	r2, [r3, #8]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f042 0204 	orr.w	r2, r2, #4
 8003e1a:	609a      	str	r2, [r3, #8]
 8003e1c:	e006      	b.n	8003e2c <HAL_ADC_Start+0x158>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2200      	movs	r2, #0
 8003e22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8003e26:	e001      	b.n	8003e2c <HAL_ADC_Start+0x158>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003e28:	2302      	movs	r3, #2
 8003e2a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003e2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e2e:	4618      	mov	r0, r3
 8003e30:	3710      	adds	r7, #16
 8003e32:	46bd      	mov	sp, r7
 8003e34:	bd80      	pop	{r7, pc}
 8003e36:	bf00      	nop
 8003e38:	50000300 	.word	0x50000300
 8003e3c:	50000100 	.word	0x50000100

08003e40 <HAL_ADC_Stop>:
  *         use function @ref HAL_ADCEx_RegularStop().
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b084      	sub	sp, #16
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003e48:	2300      	movs	r3, #0
 8003e4a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003e52:	2b01      	cmp	r3, #1
 8003e54:	d101      	bne.n	8003e5a <HAL_ADC_Stop+0x1a>
 8003e56:	2302      	movs	r3, #2
 8003e58:	e023      	b.n	8003ea2 <HAL_ADC_Stop+0x62>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2201      	movs	r2, #1
 8003e5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* 1. Stop potential conversion on going, on regular and injected groups */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8003e62:	216c      	movs	r1, #108	@ 0x6c
 8003e64:	6878      	ldr	r0, [r7, #4]
 8003e66:	f000 fdbd 	bl	80049e4 <ADC_ConversionStop>
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	73fb      	strb	r3, [r7, #15]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8003e6e:	7bfb      	ldrb	r3, [r7, #15]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d111      	bne.n	8003e98 <HAL_ADC_Stop+0x58>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8003e74:	6878      	ldr	r0, [r7, #4]
 8003e76:	f000 fd4f 	bl	8004918 <ADC_Disable>
 8003e7a:	4603      	mov	r3, r0
 8003e7c:	73fb      	strb	r3, [r7, #15]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8003e7e:	7bfb      	ldrb	r3, [r7, #15]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d109      	bne.n	8003e98 <HAL_ADC_Stop+0x58>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e88:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003e8c:	f023 0301 	bic.w	r3, r3, #1
 8003e90:	f043 0201 	orr.w	r2, r3, #1
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8003ea0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	3710      	adds	r7, #16
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	bd80      	pop	{r7, pc}
	...

08003eac <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b086      	sub	sp, #24
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
 8003eb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	695b      	ldr	r3, [r3, #20]
 8003ebe:	2b08      	cmp	r3, #8
 8003ec0:	d102      	bne.n	8003ec8 <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8003ec2:	2308      	movs	r3, #8
 8003ec4:	617b      	str	r3, [r7, #20]
 8003ec6:	e02e      	b.n	8003f26 <HAL_ADC_PollForConversion+0x7a>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003ec8:	4b5e      	ldr	r3, [pc, #376]	@ (8004044 <HAL_ADC_PollForConversion+0x198>)
 8003eca:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	689b      	ldr	r3, [r3, #8]
 8003ed0:	f003 031f 	and.w	r3, r3, #31
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d112      	bne.n	8003efe <HAL_ADC_PollForConversion+0x52>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	68db      	ldr	r3, [r3, #12]
 8003ede:	f003 0301 	and.w	r3, r3, #1
 8003ee2:	2b01      	cmp	r3, #1
 8003ee4:	d11d      	bne.n	8003f22 <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eea:	f043 0220 	orr.w	r2, r3, #32
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        
        return HAL_ERROR;
 8003efa:	2301      	movs	r3, #1
 8003efc:	e09d      	b.n	800403a <HAL_ADC_PollForConversion+0x18e>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	689b      	ldr	r3, [r3, #8]
 8003f02:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d00b      	beq.n	8003f22 <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f0e:	f043 0220 	orr.w	r2, r3, #32
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2200      	movs	r2, #0
 8003f1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        
        return HAL_ERROR;
 8003f1e:	2301      	movs	r3, #1
 8003f20:	e08b      	b.n	800403a <HAL_ADC_PollForConversion+0x18e>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8003f22:	230c      	movs	r3, #12
 8003f24:	617b      	str	r3, [r7, #20]
  }
  
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8003f26:	4b47      	ldr	r3, [pc, #284]	@ (8004044 <HAL_ADC_PollForConversion+0x198>)
 8003f28:	689b      	ldr	r3, [r3, #8]
 8003f2a:	f003 031f 	and.w	r3, r3, #31
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d004      	beq.n	8003f3c <HAL_ADC_PollForConversion+0x90>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003f3a:	d104      	bne.n	8003f46 <HAL_ADC_PollForConversion+0x9a>
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	68db      	ldr	r3, [r3, #12]
 8003f42:	613b      	str	r3, [r7, #16]
 8003f44:	e003      	b.n	8003f4e <HAL_ADC_PollForConversion+0xa2>
  }
  else
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8003f46:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003f4a:	68db      	ldr	r3, [r3, #12]
 8003f4c:	613b      	str	r3, [r7, #16]
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 8003f4e:	f7ff fcff 	bl	8003950 <HAL_GetTick>
 8003f52:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8003f54:	e021      	b.n	8003f9a <HAL_ADC_PollForConversion+0xee>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f5c:	d01d      	beq.n	8003f9a <HAL_ADC_PollForConversion+0xee>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d007      	beq.n	8003f74 <HAL_ADC_PollForConversion+0xc8>
 8003f64:	f7ff fcf4 	bl	8003950 <HAL_GetTick>
 8003f68:	4602      	mov	r2, r0
 8003f6a:	68bb      	ldr	r3, [r7, #8]
 8003f6c:	1ad3      	subs	r3, r2, r3
 8003f6e:	683a      	ldr	r2, [r7, #0]
 8003f70:	429a      	cmp	r2, r3
 8003f72:	d212      	bcs.n	8003f9a <HAL_ADC_PollForConversion+0xee>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	681a      	ldr	r2, [r3, #0]
 8003f7a:	697b      	ldr	r3, [r7, #20]
 8003f7c:	4013      	ands	r3, r2
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d10b      	bne.n	8003f9a <HAL_ADC_PollForConversion+0xee>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f86:	f043 0204 	orr.w	r2, r3, #4
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2200      	movs	r2, #0
 8003f92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8003f96:	2303      	movs	r3, #3
 8003f98:	e04f      	b.n	800403a <HAL_ADC_PollForConversion+0x18e>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	681a      	ldr	r2, [r3, #0]
 8003fa0:	697b      	ldr	r3, [r7, #20]
 8003fa2:	4013      	ands	r3, r2
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d0d6      	beq.n	8003f56 <HAL_ADC_PollForConversion+0xaa>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fac:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	641a      	str	r2, [r3, #64]	@ 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	68db      	ldr	r3, [r3, #12]
 8003fba:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d131      	bne.n	8004026 <HAL_ADC_PollForConversion+0x17a>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 8003fc2:	693b      	ldr	r3, [r7, #16]
 8003fc4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d12c      	bne.n	8004026 <HAL_ADC_PollForConversion+0x17a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f003 0308 	and.w	r3, r3, #8
 8003fd6:	2b08      	cmp	r3, #8
 8003fd8:	d125      	bne.n	8004026 <HAL_ADC_PollForConversion+0x17a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	689b      	ldr	r3, [r3, #8]
 8003fe0:	f003 0304 	and.w	r3, r3, #4
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d112      	bne.n	800400e <HAL_ADC_PollForConversion+0x162>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fec:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	641a      	str	r2, [r3, #64]	@ 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ff8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d112      	bne.n	8004026 <HAL_ADC_PollForConversion+0x17a>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004004:	f043 0201 	orr.w	r2, r3, #1
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	641a      	str	r2, [r3, #64]	@ 0x40
 800400c:	e00b      	b.n	8004026 <HAL_ADC_PollForConversion+0x17a>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004012:	f043 0220 	orr.w	r2, r3, #32
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800401e:	f043 0201 	orr.w	r2, r3, #1
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 8004026:	693b      	ldr	r3, [r7, #16]
 8004028:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800402c:	2b00      	cmp	r3, #0
 800402e:	d103      	bne.n	8004038 <HAL_ADC_PollForConversion+0x18c>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	697a      	ldr	r2, [r7, #20]
 8004036:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 8004038:	2300      	movs	r3, #0
}
 800403a:	4618      	mov	r0, r3
 800403c:	3718      	adds	r7, #24
 800403e:	46bd      	mov	sp, r7
 8004040:	bd80      	pop	{r7, pc}
 8004042:	bf00      	nop
 8004044:	50000300 	.word	0x50000300

08004048 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8004048:	b480      	push	{r7}
 800404a:	b083      	sub	sp, #12
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8004056:	4618      	mov	r0, r3
 8004058:	370c      	adds	r7, #12
 800405a:	46bd      	mov	sp, r7
 800405c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004060:	4770      	bx	lr

08004062 <HAL_ADCEx_Calibration_Start>:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  *            @arg ADC_DIFFERENTIAL_ENDED: Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 8004062:	b580      	push	{r7, lr}
 8004064:	b084      	sub	sp, #16
 8004066:	af00      	add	r7, sp, #0
 8004068:	6078      	str	r0, [r7, #4]
 800406a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800406c:	2300      	movs	r3, #0
 800406e:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004076:	2b01      	cmp	r3, #1
 8004078:	d101      	bne.n	800407e <HAL_ADCEx_Calibration_Start+0x1c>
 800407a:	2302      	movs	r3, #2
 800407c:	e05f      	b.n	800413e <HAL_ADCEx_Calibration_Start+0xdc>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2201      	movs	r2, #1
 8004082:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
   
  /* Calibration prerequisite: ADC must be disabled. */
   
  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8004086:	6878      	ldr	r0, [r7, #4]
 8004088:	f000 fc46 	bl	8004918 <ADC_Disable>
 800408c:	4603      	mov	r3, r0
 800408e:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8004090:	7bfb      	ldrb	r3, [r7, #15]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d14e      	bne.n	8004134 <HAL_ADCEx_Calibration_Start+0xd2>
  {
    /* Change ADC state */
    hadc->State = HAL_ADC_STATE_READY;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2201      	movs	r2, #1
 800409a:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Select calibration mode single ended or differential ended */
    hadc->Instance->CR &= (~ADC_CR_ADCALDIF);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	689a      	ldr	r2, [r3, #8]
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f022 4280 	bic.w	r2, r2, #1073741824	@ 0x40000000
 80040aa:	609a      	str	r2, [r3, #8]
    if (SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	2b01      	cmp	r3, #1
 80040b0:	d107      	bne.n	80040c2 <HAL_ADCEx_Calibration_Start+0x60>
    {
      hadc->Instance->CR |= ADC_CR_ADCALDIF;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	689a      	ldr	r2, [r3, #8]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80040c0:	609a      	str	r2, [r3, #8]
    }

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	689a      	ldr	r2, [r3, #8]
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80040d0:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 80040d2:	f7ff fc3d 	bl	8003950 <HAL_GetTick>
 80040d6:	60b8      	str	r0, [r7, #8]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80040d8:	e01c      	b.n	8004114 <HAL_ADCEx_Calibration_Start+0xb2>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80040da:	f7ff fc39 	bl	8003950 <HAL_GetTick>
 80040de:	4602      	mov	r2, r0
 80040e0:	68bb      	ldr	r3, [r7, #8]
 80040e2:	1ad3      	subs	r3, r2, r3
 80040e4:	2b0a      	cmp	r3, #10
 80040e6:	d915      	bls.n	8004114 <HAL_ADCEx_Calibration_Start+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	689b      	ldr	r3, [r3, #8]
 80040ee:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80040f2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80040f6:	d10d      	bne.n	8004114 <HAL_ADCEx_Calibration_Start+0xb2>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040fc:	f023 0312 	bic.w	r3, r3, #18
 8004100:	f043 0210 	orr.w	r2, r3, #16
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	641a      	str	r2, [r3, #64]	@ 0x40
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2200      	movs	r2, #0
 800410c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004110:	2301      	movs	r3, #1
 8004112:	e014      	b.n	800413e <HAL_ADCEx_Calibration_Start+0xdc>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	689b      	ldr	r3, [r3, #8]
 800411a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800411e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004122:	d0da      	beq.n	80040da <HAL_ADCEx_Calibration_Start+0x78>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004128:	f023 0303 	bic.w	r3, r3, #3
 800412c:	f043 0201 	orr.w	r2, r3, #1
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2200      	movs	r2, #0
 8004138:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800413c:	7bfb      	ldrb	r3, [r7, #15]
}
 800413e:	4618      	mov	r0, r3
 8004140:	3710      	adds	r7, #16
 8004142:	46bd      	mov	sp, r7
 8004144:	bd80      	pop	{r7, pc}
	...

08004148 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004148:	b480      	push	{r7}
 800414a:	b09b      	sub	sp, #108	@ 0x6c
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
 8004150:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004152:	2300      	movs	r3, #0
 8004154:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8004158:	2300      	movs	r3, #0
 800415a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004162:	2b01      	cmp	r3, #1
 8004164:	d101      	bne.n	800416a <HAL_ADC_ConfigChannel+0x22>
 8004166:	2302      	movs	r3, #2
 8004168:	e2a1      	b.n	80046ae <HAL_ADC_ConfigChannel+0x566>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2201      	movs	r2, #1
 800416e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	689b      	ldr	r3, [r3, #8]
 8004178:	f003 0304 	and.w	r3, r3, #4
 800417c:	2b00      	cmp	r3, #0
 800417e:	f040 8285 	bne.w	800468c <HAL_ADC_ConfigChannel+0x544>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	685b      	ldr	r3, [r3, #4]
 8004186:	2b04      	cmp	r3, #4
 8004188:	d81c      	bhi.n	80041c4 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	685a      	ldr	r2, [r3, #4]
 8004194:	4613      	mov	r3, r2
 8004196:	005b      	lsls	r3, r3, #1
 8004198:	4413      	add	r3, r2
 800419a:	005b      	lsls	r3, r3, #1
 800419c:	461a      	mov	r2, r3
 800419e:	231f      	movs	r3, #31
 80041a0:	4093      	lsls	r3, r2
 80041a2:	43db      	mvns	r3, r3
 80041a4:	4019      	ands	r1, r3
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	6818      	ldr	r0, [r3, #0]
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	685a      	ldr	r2, [r3, #4]
 80041ae:	4613      	mov	r3, r2
 80041b0:	005b      	lsls	r3, r3, #1
 80041b2:	4413      	add	r3, r2
 80041b4:	005b      	lsls	r3, r3, #1
 80041b6:	fa00 f203 	lsl.w	r2, r0, r3
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	430a      	orrs	r2, r1
 80041c0:	631a      	str	r2, [r3, #48]	@ 0x30
 80041c2:	e063      	b.n	800428c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	2b09      	cmp	r3, #9
 80041ca:	d81e      	bhi.n	800420a <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	685a      	ldr	r2, [r3, #4]
 80041d6:	4613      	mov	r3, r2
 80041d8:	005b      	lsls	r3, r3, #1
 80041da:	4413      	add	r3, r2
 80041dc:	005b      	lsls	r3, r3, #1
 80041de:	3b1e      	subs	r3, #30
 80041e0:	221f      	movs	r2, #31
 80041e2:	fa02 f303 	lsl.w	r3, r2, r3
 80041e6:	43db      	mvns	r3, r3
 80041e8:	4019      	ands	r1, r3
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	6818      	ldr	r0, [r3, #0]
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	685a      	ldr	r2, [r3, #4]
 80041f2:	4613      	mov	r3, r2
 80041f4:	005b      	lsls	r3, r3, #1
 80041f6:	4413      	add	r3, r2
 80041f8:	005b      	lsls	r3, r3, #1
 80041fa:	3b1e      	subs	r3, #30
 80041fc:	fa00 f203 	lsl.w	r2, r0, r3
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	430a      	orrs	r2, r1
 8004206:	635a      	str	r2, [r3, #52]	@ 0x34
 8004208:	e040      	b.n	800428c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	685b      	ldr	r3, [r3, #4]
 800420e:	2b0e      	cmp	r3, #14
 8004210:	d81e      	bhi.n	8004250 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	685a      	ldr	r2, [r3, #4]
 800421c:	4613      	mov	r3, r2
 800421e:	005b      	lsls	r3, r3, #1
 8004220:	4413      	add	r3, r2
 8004222:	005b      	lsls	r3, r3, #1
 8004224:	3b3c      	subs	r3, #60	@ 0x3c
 8004226:	221f      	movs	r2, #31
 8004228:	fa02 f303 	lsl.w	r3, r2, r3
 800422c:	43db      	mvns	r3, r3
 800422e:	4019      	ands	r1, r3
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	6818      	ldr	r0, [r3, #0]
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	685a      	ldr	r2, [r3, #4]
 8004238:	4613      	mov	r3, r2
 800423a:	005b      	lsls	r3, r3, #1
 800423c:	4413      	add	r3, r2
 800423e:	005b      	lsls	r3, r3, #1
 8004240:	3b3c      	subs	r3, #60	@ 0x3c
 8004242:	fa00 f203 	lsl.w	r2, r0, r3
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	430a      	orrs	r2, r1
 800424c:	639a      	str	r2, [r3, #56]	@ 0x38
 800424e:	e01d      	b.n	800428c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	685a      	ldr	r2, [r3, #4]
 800425a:	4613      	mov	r3, r2
 800425c:	005b      	lsls	r3, r3, #1
 800425e:	4413      	add	r3, r2
 8004260:	005b      	lsls	r3, r3, #1
 8004262:	3b5a      	subs	r3, #90	@ 0x5a
 8004264:	221f      	movs	r2, #31
 8004266:	fa02 f303 	lsl.w	r3, r2, r3
 800426a:	43db      	mvns	r3, r3
 800426c:	4019      	ands	r1, r3
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	6818      	ldr	r0, [r3, #0]
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	685a      	ldr	r2, [r3, #4]
 8004276:	4613      	mov	r3, r2
 8004278:	005b      	lsls	r3, r3, #1
 800427a:	4413      	add	r3, r2
 800427c:	005b      	lsls	r3, r3, #1
 800427e:	3b5a      	subs	r3, #90	@ 0x5a
 8004280:	fa00 f203 	lsl.w	r2, r0, r3
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	430a      	orrs	r2, r1
 800428a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	689b      	ldr	r3, [r3, #8]
 8004292:	f003 030c 	and.w	r3, r3, #12
 8004296:	2b00      	cmp	r3, #0
 8004298:	f040 80e5 	bne.w	8004466 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	2b09      	cmp	r3, #9
 80042a2:	d91c      	bls.n	80042de <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	6999      	ldr	r1, [r3, #24]
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	681a      	ldr	r2, [r3, #0]
 80042ae:	4613      	mov	r3, r2
 80042b0:	005b      	lsls	r3, r3, #1
 80042b2:	4413      	add	r3, r2
 80042b4:	3b1e      	subs	r3, #30
 80042b6:	2207      	movs	r2, #7
 80042b8:	fa02 f303 	lsl.w	r3, r2, r3
 80042bc:	43db      	mvns	r3, r3
 80042be:	4019      	ands	r1, r3
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	6898      	ldr	r0, [r3, #8]
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	681a      	ldr	r2, [r3, #0]
 80042c8:	4613      	mov	r3, r2
 80042ca:	005b      	lsls	r3, r3, #1
 80042cc:	4413      	add	r3, r2
 80042ce:	3b1e      	subs	r3, #30
 80042d0:	fa00 f203 	lsl.w	r2, r0, r3
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	430a      	orrs	r2, r1
 80042da:	619a      	str	r2, [r3, #24]
 80042dc:	e019      	b.n	8004312 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	6959      	ldr	r1, [r3, #20]
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	681a      	ldr	r2, [r3, #0]
 80042e8:	4613      	mov	r3, r2
 80042ea:	005b      	lsls	r3, r3, #1
 80042ec:	4413      	add	r3, r2
 80042ee:	2207      	movs	r2, #7
 80042f0:	fa02 f303 	lsl.w	r3, r2, r3
 80042f4:	43db      	mvns	r3, r3
 80042f6:	4019      	ands	r1, r3
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	6898      	ldr	r0, [r3, #8]
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	681a      	ldr	r2, [r3, #0]
 8004300:	4613      	mov	r3, r2
 8004302:	005b      	lsls	r3, r3, #1
 8004304:	4413      	add	r3, r2
 8004306:	fa00 f203 	lsl.w	r2, r0, r3
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	430a      	orrs	r2, r1
 8004310:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	695a      	ldr	r2, [r3, #20]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	68db      	ldr	r3, [r3, #12]
 800431c:	08db      	lsrs	r3, r3, #3
 800431e:	f003 0303 	and.w	r3, r3, #3
 8004322:	005b      	lsls	r3, r3, #1
 8004324:	fa02 f303 	lsl.w	r3, r2, r3
 8004328:	663b      	str	r3, [r7, #96]	@ 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	691b      	ldr	r3, [r3, #16]
 800432e:	3b01      	subs	r3, #1
 8004330:	2b03      	cmp	r3, #3
 8004332:	d84f      	bhi.n	80043d4 <HAL_ADC_ConfigChannel+0x28c>
 8004334:	a201      	add	r2, pc, #4	@ (adr r2, 800433c <HAL_ADC_ConfigChannel+0x1f4>)
 8004336:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800433a:	bf00      	nop
 800433c:	0800434d 	.word	0x0800434d
 8004340:	0800436f 	.word	0x0800436f
 8004344:	08004391 	.word	0x08004391
 8004348:	080043b3 	.word	0x080043b3
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004352:	4b9c      	ldr	r3, [pc, #624]	@ (80045c4 <HAL_ADC_ConfigChannel+0x47c>)
 8004354:	4013      	ands	r3, r2
 8004356:	683a      	ldr	r2, [r7, #0]
 8004358:	6812      	ldr	r2, [r2, #0]
 800435a:	0691      	lsls	r1, r2, #26
 800435c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800435e:	430a      	orrs	r2, r1
 8004360:	431a      	orrs	r2, r3
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800436a:	661a      	str	r2, [r3, #96]	@ 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800436c:	e07b      	b.n	8004466 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8004374:	4b93      	ldr	r3, [pc, #588]	@ (80045c4 <HAL_ADC_ConfigChannel+0x47c>)
 8004376:	4013      	ands	r3, r2
 8004378:	683a      	ldr	r2, [r7, #0]
 800437a:	6812      	ldr	r2, [r2, #0]
 800437c:	0691      	lsls	r1, r2, #26
 800437e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004380:	430a      	orrs	r2, r1
 8004382:	431a      	orrs	r2, r3
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800438c:	665a      	str	r2, [r3, #100]	@ 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800438e:	e06a      	b.n	8004466 <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8004396:	4b8b      	ldr	r3, [pc, #556]	@ (80045c4 <HAL_ADC_ConfigChannel+0x47c>)
 8004398:	4013      	ands	r3, r2
 800439a:	683a      	ldr	r2, [r7, #0]
 800439c:	6812      	ldr	r2, [r2, #0]
 800439e:	0691      	lsls	r1, r2, #26
 80043a0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80043a2:	430a      	orrs	r2, r1
 80043a4:	431a      	orrs	r2, r3
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80043ae:	669a      	str	r2, [r3, #104]	@ 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80043b0:	e059      	b.n	8004466 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80043b8:	4b82      	ldr	r3, [pc, #520]	@ (80045c4 <HAL_ADC_ConfigChannel+0x47c>)
 80043ba:	4013      	ands	r3, r2
 80043bc:	683a      	ldr	r2, [r7, #0]
 80043be:	6812      	ldr	r2, [r2, #0]
 80043c0:	0691      	lsls	r1, r2, #26
 80043c2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80043c4:	430a      	orrs	r2, r1
 80043c6:	431a      	orrs	r2, r3
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80043d0:	66da      	str	r2, [r3, #108]	@ 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80043d2:	e048      	b.n	8004466 <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80043da:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	069b      	lsls	r3, r3, #26
 80043e4:	429a      	cmp	r2, r3
 80043e6:	d107      	bne.n	80043f8 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80043f6:	661a      	str	r2, [r3, #96]	@ 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80043fe:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	069b      	lsls	r3, r3, #26
 8004408:	429a      	cmp	r2, r3
 800440a:	d107      	bne.n	800441c <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800441a:	665a      	str	r2, [r3, #100]	@ 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004422:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	069b      	lsls	r3, r3, #26
 800442c:	429a      	cmp	r2, r3
 800442e:	d107      	bne.n	8004440 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800443e:	669a      	str	r2, [r3, #104]	@ 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004446:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	069b      	lsls	r3, r3, #26
 8004450:	429a      	cmp	r2, r3
 8004452:	d107      	bne.n	8004464 <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8004462:	66da      	str	r2, [r3, #108]	@ 0x6c
      }
      break;
 8004464:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	689b      	ldr	r3, [r3, #8]
 800446c:	f003 0303 	and.w	r3, r3, #3
 8004470:	2b01      	cmp	r3, #1
 8004472:	d108      	bne.n	8004486 <HAL_ADC_ConfigChannel+0x33e>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f003 0301 	and.w	r3, r3, #1
 800447e:	2b01      	cmp	r3, #1
 8004480:	d101      	bne.n	8004486 <HAL_ADC_ConfigChannel+0x33e>
 8004482:	2301      	movs	r3, #1
 8004484:	e000      	b.n	8004488 <HAL_ADC_ConfigChannel+0x340>
 8004486:	2300      	movs	r3, #0
 8004488:	2b00      	cmp	r3, #0
 800448a:	f040 810a 	bne.w	80046a2 <HAL_ADC_ConfigChannel+0x55a>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	68db      	ldr	r3, [r3, #12]
 8004492:	2b01      	cmp	r3, #1
 8004494:	d00f      	beq.n	80044b6 <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	2201      	movs	r2, #1
 80044a4:	fa02 f303 	lsl.w	r3, r2, r3
 80044a8:	43da      	mvns	r2, r3
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	400a      	ands	r2, r1
 80044b0:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
 80044b4:	e049      	b.n	800454a <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	2201      	movs	r2, #1
 80044c4:	409a      	lsls	r2, r3
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	430a      	orrs	r2, r1
 80044cc:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	2b09      	cmp	r3, #9
 80044d6:	d91c      	bls.n	8004512 <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	6999      	ldr	r1, [r3, #24]
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	681a      	ldr	r2, [r3, #0]
 80044e2:	4613      	mov	r3, r2
 80044e4:	005b      	lsls	r3, r3, #1
 80044e6:	4413      	add	r3, r2
 80044e8:	3b1b      	subs	r3, #27
 80044ea:	2207      	movs	r2, #7
 80044ec:	fa02 f303 	lsl.w	r3, r2, r3
 80044f0:	43db      	mvns	r3, r3
 80044f2:	4019      	ands	r1, r3
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	6898      	ldr	r0, [r3, #8]
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	681a      	ldr	r2, [r3, #0]
 80044fc:	4613      	mov	r3, r2
 80044fe:	005b      	lsls	r3, r3, #1
 8004500:	4413      	add	r3, r2
 8004502:	3b1b      	subs	r3, #27
 8004504:	fa00 f203 	lsl.w	r2, r0, r3
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	430a      	orrs	r2, r1
 800450e:	619a      	str	r2, [r3, #24]
 8004510:	e01b      	b.n	800454a <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	6959      	ldr	r1, [r3, #20]
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	1c5a      	adds	r2, r3, #1
 800451e:	4613      	mov	r3, r2
 8004520:	005b      	lsls	r3, r3, #1
 8004522:	4413      	add	r3, r2
 8004524:	2207      	movs	r2, #7
 8004526:	fa02 f303 	lsl.w	r3, r2, r3
 800452a:	43db      	mvns	r3, r3
 800452c:	4019      	ands	r1, r3
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	6898      	ldr	r0, [r3, #8]
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	1c5a      	adds	r2, r3, #1
 8004538:	4613      	mov	r3, r2
 800453a:	005b      	lsls	r3, r3, #1
 800453c:	4413      	add	r3, r2
 800453e:	fa00 f203 	lsl.w	r2, r0, r3
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	430a      	orrs	r2, r1
 8004548:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800454a:	4b1f      	ldr	r3, [pc, #124]	@ (80045c8 <HAL_ADC_ConfigChannel+0x480>)
 800454c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	2b10      	cmp	r3, #16
 8004554:	d105      	bne.n	8004562 <HAL_ADC_ConfigChannel+0x41a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8004556:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004558:	689b      	ldr	r3, [r3, #8]
 800455a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800455e:	2b00      	cmp	r3, #0
 8004560:	d015      	beq.n	800458e <HAL_ADC_ConfigChannel+0x446>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8004566:	2b11      	cmp	r3, #17
 8004568:	d105      	bne.n	8004576 <HAL_ADC_ConfigChannel+0x42e>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800456a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800456c:	689b      	ldr	r3, [r3, #8]
 800456e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8004572:	2b00      	cmp	r3, #0
 8004574:	d00b      	beq.n	800458e <HAL_ADC_ConfigChannel+0x446>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800457a:	2b12      	cmp	r3, #18
 800457c:	f040 8091 	bne.w	80046a2 <HAL_ADC_ConfigChannel+0x55a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8004580:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004582:	689b      	ldr	r3, [r3, #8]
 8004584:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8004588:	2b00      	cmp	r3, #0
 800458a:	f040 808a 	bne.w	80046a2 <HAL_ADC_ConfigChannel+0x55a>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004596:	d102      	bne.n	800459e <HAL_ADC_ConfigChannel+0x456>
 8004598:	4b0c      	ldr	r3, [pc, #48]	@ (80045cc <HAL_ADC_ConfigChannel+0x484>)
 800459a:	60fb      	str	r3, [r7, #12]
 800459c:	e002      	b.n	80045a4 <HAL_ADC_ConfigChannel+0x45c>
 800459e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80045a2:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	689b      	ldr	r3, [r3, #8]
 80045aa:	f003 0303 	and.w	r3, r3, #3
 80045ae:	2b01      	cmp	r3, #1
 80045b0:	d10e      	bne.n	80045d0 <HAL_ADC_ConfigChannel+0x488>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f003 0301 	and.w	r3, r3, #1
 80045bc:	2b01      	cmp	r3, #1
 80045be:	d107      	bne.n	80045d0 <HAL_ADC_ConfigChannel+0x488>
 80045c0:	2301      	movs	r3, #1
 80045c2:	e006      	b.n	80045d2 <HAL_ADC_ConfigChannel+0x48a>
 80045c4:	83fff000 	.word	0x83fff000
 80045c8:	50000300 	.word	0x50000300
 80045cc:	50000100 	.word	0x50000100
 80045d0:	2300      	movs	r3, #0
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d150      	bne.n	8004678 <HAL_ADC_ConfigChannel+0x530>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80045d6:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d010      	beq.n	80045fe <HAL_ADC_ConfigChannel+0x4b6>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	689b      	ldr	r3, [r3, #8]
 80045e0:	f003 0303 	and.w	r3, r3, #3
 80045e4:	2b01      	cmp	r3, #1
 80045e6:	d107      	bne.n	80045f8 <HAL_ADC_ConfigChannel+0x4b0>
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f003 0301 	and.w	r3, r3, #1
 80045f0:	2b01      	cmp	r3, #1
 80045f2:	d101      	bne.n	80045f8 <HAL_ADC_ConfigChannel+0x4b0>
 80045f4:	2301      	movs	r3, #1
 80045f6:	e000      	b.n	80045fa <HAL_ADC_ConfigChannel+0x4b2>
 80045f8:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d13c      	bne.n	8004678 <HAL_ADC_ConfigChannel+0x530>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	2b10      	cmp	r3, #16
 8004604:	d11d      	bne.n	8004642 <HAL_ADC_ConfigChannel+0x4fa>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800460e:	d118      	bne.n	8004642 <HAL_ADC_ConfigChannel+0x4fa>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8004610:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004612:	689b      	ldr	r3, [r3, #8]
 8004614:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8004618:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800461a:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800461c:	4b27      	ldr	r3, [pc, #156]	@ (80046bc <HAL_ADC_ConfigChannel+0x574>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4a27      	ldr	r2, [pc, #156]	@ (80046c0 <HAL_ADC_ConfigChannel+0x578>)
 8004622:	fba2 2303 	umull	r2, r3, r2, r3
 8004626:	0c9a      	lsrs	r2, r3, #18
 8004628:	4613      	mov	r3, r2
 800462a:	009b      	lsls	r3, r3, #2
 800462c:	4413      	add	r3, r2
 800462e:	005b      	lsls	r3, r3, #1
 8004630:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004632:	e002      	b.n	800463a <HAL_ADC_ConfigChannel+0x4f2>
          {
            wait_loop_index--;
 8004634:	68bb      	ldr	r3, [r7, #8]
 8004636:	3b01      	subs	r3, #1
 8004638:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800463a:	68bb      	ldr	r3, [r7, #8]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d1f9      	bne.n	8004634 <HAL_ADC_ConfigChannel+0x4ec>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8004640:	e02e      	b.n	80046a0 <HAL_ADC_ConfigChannel+0x558>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	2b11      	cmp	r3, #17
 8004648:	d10b      	bne.n	8004662 <HAL_ADC_ConfigChannel+0x51a>
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004652:	d106      	bne.n	8004662 <HAL_ADC_ConfigChannel+0x51a>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8004654:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004656:	689b      	ldr	r3, [r3, #8]
 8004658:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 800465c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800465e:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8004660:	e01e      	b.n	80046a0 <HAL_ADC_ConfigChannel+0x558>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	2b12      	cmp	r3, #18
 8004668:	d11a      	bne.n	80046a0 <HAL_ADC_ConfigChannel+0x558>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 800466a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800466c:	689b      	ldr	r3, [r3, #8]
 800466e:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8004672:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004674:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8004676:	e013      	b.n	80046a0 <HAL_ADC_ConfigChannel+0x558>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800467c:	f043 0220 	orr.w	r2, r3, #32
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	641a      	str	r2, [r3, #64]	@ 0x40
        
        tmp_hal_status = HAL_ERROR;
 8004684:	2301      	movs	r3, #1
 8004686:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800468a:	e00a      	b.n	80046a2 <HAL_ADC_ConfigChannel+0x55a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004690:	f043 0220 	orr.w	r2, r3, #32
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 8004698:	2301      	movs	r3, #1
 800469a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800469e:	e000      	b.n	80046a2 <HAL_ADC_ConfigChannel+0x55a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80046a0:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2200      	movs	r2, #0
 80046a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80046aa:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 80046ae:	4618      	mov	r0, r3
 80046b0:	376c      	adds	r7, #108	@ 0x6c
 80046b2:	46bd      	mov	sp, r7
 80046b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b8:	4770      	bx	lr
 80046ba:	bf00      	nop
 80046bc:	20000050 	.word	0x20000050
 80046c0:	431bde83 	.word	0x431bde83

080046c4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 80046c4:	b480      	push	{r7}
 80046c6:	b099      	sub	sp, #100	@ 0x64
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
 80046cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80046ce:	2300      	movs	r3, #0
 80046d0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80046dc:	d102      	bne.n	80046e4 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 80046de:	4b5a      	ldr	r3, [pc, #360]	@ (8004848 <HAL_ADCEx_MultiModeConfigChannel+0x184>)
 80046e0:	60bb      	str	r3, [r7, #8]
 80046e2:	e002      	b.n	80046ea <HAL_ADCEx_MultiModeConfigChannel+0x26>
 80046e4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80046e8:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 80046ea:	68bb      	ldr	r3, [r7, #8]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d101      	bne.n	80046f4 <HAL_ADCEx_MultiModeConfigChannel+0x30>
  {
    /* Return function status */
    return HAL_ERROR;
 80046f0:	2301      	movs	r3, #1
 80046f2:	e0a2      	b.n	800483a <HAL_ADCEx_MultiModeConfigChannel+0x176>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80046fa:	2b01      	cmp	r3, #1
 80046fc:	d101      	bne.n	8004702 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80046fe:	2302      	movs	r3, #2
 8004700:	e09b      	b.n	800483a <HAL_ADCEx_MultiModeConfigChannel+0x176>
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2201      	movs	r2, #1
 8004706:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	689b      	ldr	r3, [r3, #8]
 8004710:	f003 0304 	and.w	r3, r3, #4
 8004714:	2b00      	cmp	r3, #0
 8004716:	d17f      	bne.n	8004818 <HAL_ADCEx_MultiModeConfigChannel+0x154>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8004718:	68bb      	ldr	r3, [r7, #8]
 800471a:	689b      	ldr	r3, [r3, #8]
 800471c:	f003 0304 	and.w	r3, r3, #4
 8004720:	2b00      	cmp	r3, #0
 8004722:	d179      	bne.n	8004818 <HAL_ADCEx_MultiModeConfigChannel+0x154>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004724:	4b49      	ldr	r3, [pc, #292]	@ (800484c <HAL_ADCEx_MultiModeConfigChannel+0x188>)
 8004726:	65bb      	str	r3, [r7, #88]	@ 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d040      	beq.n	80047b2 <HAL_ADCEx_MultiModeConfigChannel+0xee>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8004730:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004732:	689b      	ldr	r3, [r3, #8]
 8004734:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	6859      	ldr	r1, [r3, #4]
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004742:	035b      	lsls	r3, r3, #13
 8004744:	430b      	orrs	r3, r1
 8004746:	431a      	orrs	r2, r3
 8004748:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800474a:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	689b      	ldr	r3, [r3, #8]
 8004752:	f003 0303 	and.w	r3, r3, #3
 8004756:	2b01      	cmp	r3, #1
 8004758:	d108      	bne.n	800476c <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f003 0301 	and.w	r3, r3, #1
 8004764:	2b01      	cmp	r3, #1
 8004766:	d101      	bne.n	800476c <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8004768:	2301      	movs	r3, #1
 800476a:	e000      	b.n	800476e <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 800476c:	2300      	movs	r3, #0
 800476e:	2b00      	cmp	r3, #0
 8004770:	d15c      	bne.n	800482c <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8004772:	68bb      	ldr	r3, [r7, #8]
 8004774:	689b      	ldr	r3, [r3, #8]
 8004776:	f003 0303 	and.w	r3, r3, #3
 800477a:	2b01      	cmp	r3, #1
 800477c:	d107      	bne.n	800478e <HAL_ADCEx_MultiModeConfigChannel+0xca>
 800477e:	68bb      	ldr	r3, [r7, #8]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f003 0301 	and.w	r3, r3, #1
 8004786:	2b01      	cmp	r3, #1
 8004788:	d101      	bne.n	800478e <HAL_ADCEx_MultiModeConfigChannel+0xca>
 800478a:	2301      	movs	r3, #1
 800478c:	e000      	b.n	8004790 <HAL_ADCEx_MultiModeConfigChannel+0xcc>
 800478e:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8004790:	2b00      	cmp	r3, #0
 8004792:	d14b      	bne.n	800482c <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8004794:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004796:	689b      	ldr	r3, [r3, #8]
 8004798:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800479c:	f023 030f 	bic.w	r3, r3, #15
 80047a0:	683a      	ldr	r2, [r7, #0]
 80047a2:	6811      	ldr	r1, [r2, #0]
 80047a4:	683a      	ldr	r2, [r7, #0]
 80047a6:	6892      	ldr	r2, [r2, #8]
 80047a8:	430a      	orrs	r2, r1
 80047aa:	431a      	orrs	r2, r3
 80047ac:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80047ae:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80047b0:	e03c      	b.n	800482c <HAL_ADCEx_MultiModeConfigChannel+0x168>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80047b2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80047b4:	689b      	ldr	r3, [r3, #8]
 80047b6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80047ba:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80047bc:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	689b      	ldr	r3, [r3, #8]
 80047c4:	f003 0303 	and.w	r3, r3, #3
 80047c8:	2b01      	cmp	r3, #1
 80047ca:	d108      	bne.n	80047de <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f003 0301 	and.w	r3, r3, #1
 80047d6:	2b01      	cmp	r3, #1
 80047d8:	d101      	bne.n	80047de <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 80047da:	2301      	movs	r3, #1
 80047dc:	e000      	b.n	80047e0 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
 80047de:	2300      	movs	r3, #0
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d123      	bne.n	800482c <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80047e4:	68bb      	ldr	r3, [r7, #8]
 80047e6:	689b      	ldr	r3, [r3, #8]
 80047e8:	f003 0303 	and.w	r3, r3, #3
 80047ec:	2b01      	cmp	r3, #1
 80047ee:	d107      	bne.n	8004800 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 80047f0:	68bb      	ldr	r3, [r7, #8]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f003 0301 	and.w	r3, r3, #1
 80047f8:	2b01      	cmp	r3, #1
 80047fa:	d101      	bne.n	8004800 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 80047fc:	2301      	movs	r3, #1
 80047fe:	e000      	b.n	8004802 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8004800:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8004802:	2b00      	cmp	r3, #0
 8004804:	d112      	bne.n	800482c <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8004806:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004808:	689b      	ldr	r3, [r3, #8]
 800480a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800480e:	f023 030f 	bic.w	r3, r3, #15
 8004812:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004814:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8004816:	e009      	b.n	800482c <HAL_ADCEx_MultiModeConfigChannel+0x168>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800481c:	f043 0220 	orr.w	r2, r3, #32
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 8004824:	2301      	movs	r3, #1
 8004826:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800482a:	e000      	b.n	800482e <HAL_ADCEx_MultiModeConfigChannel+0x16a>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800482c:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2200      	movs	r2, #0
 8004832:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8004836:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
} 
 800483a:	4618      	mov	r0, r3
 800483c:	3764      	adds	r7, #100	@ 0x64
 800483e:	46bd      	mov	sp, r7
 8004840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004844:	4770      	bx	lr
 8004846:	bf00      	nop
 8004848:	50000100 	.word	0x50000100
 800484c:	50000300 	.word	0x50000300

08004850 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b084      	sub	sp, #16
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004858:	2300      	movs	r3, #0
 800485a:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	689b      	ldr	r3, [r3, #8]
 8004862:	f003 0303 	and.w	r3, r3, #3
 8004866:	2b01      	cmp	r3, #1
 8004868:	d108      	bne.n	800487c <ADC_Enable+0x2c>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f003 0301 	and.w	r3, r3, #1
 8004874:	2b01      	cmp	r3, #1
 8004876:	d101      	bne.n	800487c <ADC_Enable+0x2c>
 8004878:	2301      	movs	r3, #1
 800487a:	e000      	b.n	800487e <ADC_Enable+0x2e>
 800487c:	2300      	movs	r3, #0
 800487e:	2b00      	cmp	r3, #0
 8004880:	d143      	bne.n	800490a <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	689a      	ldr	r2, [r3, #8]
 8004888:	4b22      	ldr	r3, [pc, #136]	@ (8004914 <ADC_Enable+0xc4>)
 800488a:	4013      	ands	r3, r2
 800488c:	2b00      	cmp	r3, #0
 800488e:	d00d      	beq.n	80048ac <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004894:	f043 0210 	orr.w	r2, r3, #16
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	641a      	str	r2, [r3, #64]	@ 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048a0:	f043 0201 	orr.w	r2, r3, #1
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	645a      	str	r2, [r3, #68]	@ 0x44
      
      return HAL_ERROR;
 80048a8:	2301      	movs	r3, #1
 80048aa:	e02f      	b.n	800490c <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	689a      	ldr	r2, [r3, #8]
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f042 0201 	orr.w	r2, r2, #1
 80048ba:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 80048bc:	f7ff f848 	bl	8003950 <HAL_GetTick>
 80048c0:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80048c2:	e01b      	b.n	80048fc <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80048c4:	f7ff f844 	bl	8003950 <HAL_GetTick>
 80048c8:	4602      	mov	r2, r0
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	1ad3      	subs	r3, r2, r3
 80048ce:	2b02      	cmp	r3, #2
 80048d0:	d914      	bls.n	80048fc <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f003 0301 	and.w	r3, r3, #1
 80048dc:	2b01      	cmp	r3, #1
 80048de:	d00d      	beq.n	80048fc <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048e4:	f043 0210 	orr.w	r2, r3, #16
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048f0:	f043 0201 	orr.w	r2, r3, #1
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 80048f8:	2301      	movs	r3, #1
 80048fa:	e007      	b.n	800490c <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f003 0301 	and.w	r3, r3, #1
 8004906:	2b01      	cmp	r3, #1
 8004908:	d1dc      	bne.n	80048c4 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800490a:	2300      	movs	r3, #0
}
 800490c:	4618      	mov	r0, r3
 800490e:	3710      	adds	r7, #16
 8004910:	46bd      	mov	sp, r7
 8004912:	bd80      	pop	{r7, pc}
 8004914:	8000003f 	.word	0x8000003f

08004918 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b084      	sub	sp, #16
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004920:	2300      	movs	r3, #0
 8004922:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	689b      	ldr	r3, [r3, #8]
 800492a:	f003 0303 	and.w	r3, r3, #3
 800492e:	2b01      	cmp	r3, #1
 8004930:	d108      	bne.n	8004944 <ADC_Disable+0x2c>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f003 0301 	and.w	r3, r3, #1
 800493c:	2b01      	cmp	r3, #1
 800493e:	d101      	bne.n	8004944 <ADC_Disable+0x2c>
 8004940:	2301      	movs	r3, #1
 8004942:	e000      	b.n	8004946 <ADC_Disable+0x2e>
 8004944:	2300      	movs	r3, #0
 8004946:	2b00      	cmp	r3, #0
 8004948:	d047      	beq.n	80049da <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	689b      	ldr	r3, [r3, #8]
 8004950:	f003 030d 	and.w	r3, r3, #13
 8004954:	2b01      	cmp	r3, #1
 8004956:	d10f      	bne.n	8004978 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	689a      	ldr	r2, [r3, #8]
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f042 0202 	orr.w	r2, r2, #2
 8004966:	609a      	str	r2, [r3, #8]
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	2203      	movs	r2, #3
 800496e:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8004970:	f7fe ffee 	bl	8003950 <HAL_GetTick>
 8004974:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8004976:	e029      	b.n	80049cc <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800497c:	f043 0210 	orr.w	r2, r3, #16
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	641a      	str	r2, [r3, #64]	@ 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004988:	f043 0201 	orr.w	r2, r3, #1
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	645a      	str	r2, [r3, #68]	@ 0x44
      return HAL_ERROR;
 8004990:	2301      	movs	r3, #1
 8004992:	e023      	b.n	80049dc <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004994:	f7fe ffdc 	bl	8003950 <HAL_GetTick>
 8004998:	4602      	mov	r2, r0
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	1ad3      	subs	r3, r2, r3
 800499e:	2b02      	cmp	r3, #2
 80049a0:	d914      	bls.n	80049cc <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	689b      	ldr	r3, [r3, #8]
 80049a8:	f003 0301 	and.w	r3, r3, #1
 80049ac:	2b01      	cmp	r3, #1
 80049ae:	d10d      	bne.n	80049cc <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049b4:	f043 0210 	orr.w	r2, r3, #16
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049c0:	f043 0201 	orr.w	r2, r3, #1
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 80049c8:	2301      	movs	r3, #1
 80049ca:	e007      	b.n	80049dc <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	689b      	ldr	r3, [r3, #8]
 80049d2:	f003 0301 	and.w	r3, r3, #1
 80049d6:	2b01      	cmp	r3, #1
 80049d8:	d0dc      	beq.n	8004994 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80049da:	2300      	movs	r3, #0
}
 80049dc:	4618      	mov	r0, r3
 80049de:	3710      	adds	r7, #16
 80049e0:	46bd      	mov	sp, r7
 80049e2:	bd80      	pop	{r7, pc}

080049e4 <ADC_ConversionStop>:
  *            @arg ADC_INJECTED_GROUP: ADC injected conversion type.
  *            @arg ADC_REGULAR_INJECTED_GROUP: ADC regular and injected conversion type.
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc, uint32_t ConversionGroup)
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b086      	sub	sp, #24
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
 80049ec:	6039      	str	r1, [r7, #0]
  uint32_t tmp_ADC_CR_ADSTART_JADSTART = 0U;
 80049ee:	2300      	movs	r3, #0
 80049f0:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 80049f2:	2300      	movs	r3, #0
 80049f4:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80049f6:	2300      	movs	r3, #0
 80049f8:	613b      	str	r3, [r7, #16]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));
    
  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc))
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	689b      	ldr	r3, [r3, #8]
 8004a00:	f003 030c 	and.w	r3, r3, #12
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	f000 809b 	beq.w	8004b40 <ADC_ConversionStop+0x15c>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1U, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	68db      	ldr	r3, [r3, #12]
 8004a10:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a14:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004a18:	d12a      	bne.n	8004a70 <ADC_ConversionStop+0x8c>
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	7e5b      	ldrb	r3, [r3, #25]
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 8004a1e:	2b01      	cmp	r3, #1
 8004a20:	d126      	bne.n	8004a70 <ADC_ConversionStop+0x8c>
         (hadc->Init.LowPowerAutoWait==ENABLE)                   )
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	7e1b      	ldrb	r3, [r3, #24]
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 8004a26:	2b01      	cmp	r3, #1
 8004a28:	d122      	bne.n	8004a70 <ADC_ConversionStop+0x8c>
    {
      /* Use stop of regular group */
      ConversionGroup = ADC_REGULAR_GROUP;
 8004a2a:	230c      	movs	r3, #12
 8004a2c:	603b      	str	r3, [r7, #0]
      
      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8004a2e:	e014      	b.n	8004a5a <ADC_ConversionStop+0x76>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES *4U))
 8004a30:	693b      	ldr	r3, [r7, #16]
 8004a32:	4a46      	ldr	r2, [pc, #280]	@ (8004b4c <ADC_ConversionStop+0x168>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d90d      	bls.n	8004a54 <ADC_ConversionStop+0x70>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a3c:	f043 0210 	orr.w	r2, r3, #16
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a48:	f043 0201 	orr.w	r2, r3, #1
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	645a      	str	r2, [r3, #68]	@ 0x44
          
          return HAL_ERROR;
 8004a50:	2301      	movs	r3, #1
 8004a52:	e076      	b.n	8004b42 <ADC_ConversionStop+0x15e>
        }
        Conversion_Timeout_CPU_cycles ++;
 8004a54:	693b      	ldr	r3, [r7, #16]
 8004a56:	3301      	adds	r3, #1
 8004a58:	613b      	str	r3, [r7, #16]
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a64:	2b40      	cmp	r3, #64	@ 0x40
 8004a66:	d1e3      	bne.n	8004a30 <ADC_ConversionStop+0x4c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	2240      	movs	r2, #64	@ 0x40
 8004a6e:	601a      	str	r2, [r3, #0]
    }
    
    /* Stop potential conversion on going on regular group */
    if (ConversionGroup != ADC_INJECTED_GROUP)
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	2b60      	cmp	r3, #96	@ 0x60
 8004a74:	d015      	beq.n	8004aa2 <ADC_ConversionStop+0xbe>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	689b      	ldr	r3, [r3, #8]
 8004a7c:	f003 0304 	and.w	r3, r3, #4
 8004a80:	2b04      	cmp	r3, #4
 8004a82:	d10e      	bne.n	8004aa2 <ADC_ConversionStop+0xbe>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)     )
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	689b      	ldr	r3, [r3, #8]
 8004a8a:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d107      	bne.n	8004aa2 <ADC_ConversionStop+0xbe>
      {
        /* Stop conversions on regular group */
        hadc->Instance->CR |= ADC_CR_ADSTP;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	689a      	ldr	r2, [r3, #8]
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f042 0210 	orr.w	r2, r2, #16
 8004aa0:	609a      	str	r2, [r3, #8]
      }
    }

    /* Stop potential conversion on going on injected group */
    if (ConversionGroup != ADC_REGULAR_GROUP)
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	2b0c      	cmp	r3, #12
 8004aa6:	d015      	beq.n	8004ad4 <ADC_ConversionStop+0xf0>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	689b      	ldr	r3, [r3, #8]
 8004aae:	f003 0308 	and.w	r3, r3, #8
 8004ab2:	2b08      	cmp	r3, #8
 8004ab4:	d10e      	bne.n	8004ad4 <ADC_ConversionStop+0xf0>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)      )
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	689b      	ldr	r3, [r3, #8]
 8004abc:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d107      	bne.n	8004ad4 <ADC_ConversionStop+0xf0>
      {
        /* Stop conversions on injected group */
        hadc->Instance->CR |= ADC_CR_JADSTP;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	689a      	ldr	r2, [r3, #8]
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f042 0220 	orr.w	r2, r2, #32
 8004ad2:	609a      	str	r2, [r3, #8]
      }
    }

    /* Selection of start and stop bits in function of regular or injected group */
    switch(ConversionGroup)
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	2b60      	cmp	r3, #96	@ 0x60
 8004ad8:	d005      	beq.n	8004ae6 <ADC_ConversionStop+0x102>
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	2b6c      	cmp	r3, #108	@ 0x6c
 8004ade:	d105      	bne.n	8004aec <ADC_ConversionStop+0x108>
    {
    case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8004ae0:	230c      	movs	r3, #12
 8004ae2:	617b      	str	r3, [r7, #20]
        break;
 8004ae4:	e005      	b.n	8004af2 <ADC_ConversionStop+0x10e>
    case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8004ae6:	2308      	movs	r3, #8
 8004ae8:	617b      	str	r3, [r7, #20]
        break;
 8004aea:	e002      	b.n	8004af2 <ADC_ConversionStop+0x10e>
    /* Case ADC_REGULAR_GROUP */
    default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8004aec:	2304      	movs	r3, #4
 8004aee:	617b      	str	r3, [r7, #20]
        break;
 8004af0:	bf00      	nop
    }
    
    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8004af2:	f7fe ff2d 	bl	8003950 <HAL_GetTick>
 8004af6:	60f8      	str	r0, [r7, #12]
      
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8004af8:	e01b      	b.n	8004b32 <ADC_ConversionStop+0x14e>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8004afa:	f7fe ff29 	bl	8003950 <HAL_GetTick>
 8004afe:	4602      	mov	r2, r0
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	1ad3      	subs	r3, r2, r3
 8004b04:	2b0b      	cmp	r3, #11
 8004b06:	d914      	bls.n	8004b32 <ADC_ConversionStop+0x14e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	689a      	ldr	r2, [r3, #8]
 8004b0e:	697b      	ldr	r3, [r7, #20]
 8004b10:	4013      	ands	r3, r2
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d00d      	beq.n	8004b32 <ADC_ConversionStop+0x14e>
        {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b1a:	f043 0210 	orr.w	r2, r3, #16
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b26:	f043 0201 	orr.w	r2, r3, #1
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	645a      	str	r2, [r3, #68]	@ 0x44
        
        return HAL_ERROR;
 8004b2e:	2301      	movs	r3, #1
 8004b30:	e007      	b.n	8004b42 <ADC_ConversionStop+0x15e>
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	689a      	ldr	r2, [r3, #8]
 8004b38:	697b      	ldr	r3, [r7, #20]
 8004b3a:	4013      	ands	r3, r2
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d1dc      	bne.n	8004afa <ADC_ConversionStop+0x116>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8004b40:	2300      	movs	r3, #0
}
 8004b42:	4618      	mov	r0, r3
 8004b44:	3718      	adds	r7, #24
 8004b46:	46bd      	mov	sp, r7
 8004b48:	bd80      	pop	{r7, pc}
 8004b4a:	bf00      	nop
 8004b4c:	000993ff 	.word	0x000993ff

08004b50 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b084      	sub	sp, #16
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d101      	bne.n	8004b62 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8004b5e:	2301      	movs	r3, #1
 8004b60:	e0ed      	b.n	8004d3e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004b68:	b2db      	uxtb	r3, r3
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d102      	bne.n	8004b74 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8004b6e:	6878      	ldr	r0, [r7, #4]
 8004b70:	f7fd f91a 	bl	8001da8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	681a      	ldr	r2, [r3, #0]
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f042 0201 	orr.w	r2, r2, #1
 8004b82:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004b84:	f7fe fee4 	bl	8003950 <HAL_GetTick>
 8004b88:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004b8a:	e012      	b.n	8004bb2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004b8c:	f7fe fee0 	bl	8003950 <HAL_GetTick>
 8004b90:	4602      	mov	r2, r0
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	1ad3      	subs	r3, r2, r3
 8004b96:	2b0a      	cmp	r3, #10
 8004b98:	d90b      	bls.n	8004bb2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b9e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2205      	movs	r2, #5
 8004baa:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004bae:	2301      	movs	r3, #1
 8004bb0:	e0c5      	b.n	8004d3e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	685b      	ldr	r3, [r3, #4]
 8004bb8:	f003 0301 	and.w	r3, r3, #1
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d0e5      	beq.n	8004b8c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	681a      	ldr	r2, [r3, #0]
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f022 0202 	bic.w	r2, r2, #2
 8004bce:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004bd0:	f7fe febe 	bl	8003950 <HAL_GetTick>
 8004bd4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004bd6:	e012      	b.n	8004bfe <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004bd8:	f7fe feba 	bl	8003950 <HAL_GetTick>
 8004bdc:	4602      	mov	r2, r0
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	1ad3      	subs	r3, r2, r3
 8004be2:	2b0a      	cmp	r3, #10
 8004be4:	d90b      	bls.n	8004bfe <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bea:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2205      	movs	r2, #5
 8004bf6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	e09f      	b.n	8004d3e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	685b      	ldr	r3, [r3, #4]
 8004c04:	f003 0302 	and.w	r3, r3, #2
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d1e5      	bne.n	8004bd8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	7e1b      	ldrb	r3, [r3, #24]
 8004c10:	2b01      	cmp	r3, #1
 8004c12:	d108      	bne.n	8004c26 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	681a      	ldr	r2, [r3, #0]
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004c22:	601a      	str	r2, [r3, #0]
 8004c24:	e007      	b.n	8004c36 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	681a      	ldr	r2, [r3, #0]
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004c34:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	7e5b      	ldrb	r3, [r3, #25]
 8004c3a:	2b01      	cmp	r3, #1
 8004c3c:	d108      	bne.n	8004c50 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	681a      	ldr	r2, [r3, #0]
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004c4c:	601a      	str	r2, [r3, #0]
 8004c4e:	e007      	b.n	8004c60 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	681a      	ldr	r2, [r3, #0]
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004c5e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	7e9b      	ldrb	r3, [r3, #26]
 8004c64:	2b01      	cmp	r3, #1
 8004c66:	d108      	bne.n	8004c7a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	681a      	ldr	r2, [r3, #0]
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f042 0220 	orr.w	r2, r2, #32
 8004c76:	601a      	str	r2, [r3, #0]
 8004c78:	e007      	b.n	8004c8a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	681a      	ldr	r2, [r3, #0]
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f022 0220 	bic.w	r2, r2, #32
 8004c88:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	7edb      	ldrb	r3, [r3, #27]
 8004c8e:	2b01      	cmp	r3, #1
 8004c90:	d108      	bne.n	8004ca4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	681a      	ldr	r2, [r3, #0]
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f022 0210 	bic.w	r2, r2, #16
 8004ca0:	601a      	str	r2, [r3, #0]
 8004ca2:	e007      	b.n	8004cb4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	681a      	ldr	r2, [r3, #0]
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f042 0210 	orr.w	r2, r2, #16
 8004cb2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	7f1b      	ldrb	r3, [r3, #28]
 8004cb8:	2b01      	cmp	r3, #1
 8004cba:	d108      	bne.n	8004cce <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	681a      	ldr	r2, [r3, #0]
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f042 0208 	orr.w	r2, r2, #8
 8004cca:	601a      	str	r2, [r3, #0]
 8004ccc:	e007      	b.n	8004cde <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	681a      	ldr	r2, [r3, #0]
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f022 0208 	bic.w	r2, r2, #8
 8004cdc:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	7f5b      	ldrb	r3, [r3, #29]
 8004ce2:	2b01      	cmp	r3, #1
 8004ce4:	d108      	bne.n	8004cf8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	681a      	ldr	r2, [r3, #0]
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f042 0204 	orr.w	r2, r2, #4
 8004cf4:	601a      	str	r2, [r3, #0]
 8004cf6:	e007      	b.n	8004d08 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	681a      	ldr	r2, [r3, #0]
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f022 0204 	bic.w	r2, r2, #4
 8004d06:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	689a      	ldr	r2, [r3, #8]
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	68db      	ldr	r3, [r3, #12]
 8004d10:	431a      	orrs	r2, r3
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	691b      	ldr	r3, [r3, #16]
 8004d16:	431a      	orrs	r2, r3
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	695b      	ldr	r3, [r3, #20]
 8004d1c:	ea42 0103 	orr.w	r1, r2, r3
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	685b      	ldr	r3, [r3, #4]
 8004d24:	1e5a      	subs	r2, r3, #1
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	430a      	orrs	r2, r1
 8004d2c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2200      	movs	r2, #0
 8004d32:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2201      	movs	r2, #1
 8004d38:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8004d3c:	2300      	movs	r3, #0
}
 8004d3e:	4618      	mov	r0, r3
 8004d40:	3710      	adds	r7, #16
 8004d42:	46bd      	mov	sp, r7
 8004d44:	bd80      	pop	{r7, pc}

08004d46 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8004d46:	b480      	push	{r7}
 8004d48:	b087      	sub	sp, #28
 8004d4a:	af00      	add	r7, sp, #0
 8004d4c:	6078      	str	r0, [r7, #4]
 8004d4e:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004d5c:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8004d5e:	7cfb      	ldrb	r3, [r7, #19]
 8004d60:	2b01      	cmp	r3, #1
 8004d62:	d003      	beq.n	8004d6c <HAL_CAN_ConfigFilter+0x26>
 8004d64:	7cfb      	ldrb	r3, [r7, #19]
 8004d66:	2b02      	cmp	r3, #2
 8004d68:	f040 80aa 	bne.w	8004ec0 <HAL_CAN_ConfigFilter+0x17a>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004d6c:	697b      	ldr	r3, [r7, #20]
 8004d6e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8004d72:	f043 0201 	orr.w	r2, r3, #1
 8004d76:	697b      	ldr	r3, [r7, #20]
 8004d78:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	695b      	ldr	r3, [r3, #20]
 8004d80:	f003 031f 	and.w	r3, r3, #31
 8004d84:	2201      	movs	r2, #1
 8004d86:	fa02 f303 	lsl.w	r3, r2, r3
 8004d8a:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8004d8c:	697b      	ldr	r3, [r7, #20]
 8004d8e:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	43db      	mvns	r3, r3
 8004d96:	401a      	ands	r2, r3
 8004d98:	697b      	ldr	r3, [r7, #20]
 8004d9a:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	69db      	ldr	r3, [r3, #28]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d123      	bne.n	8004dee <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8004da6:	697b      	ldr	r3, [r7, #20]
 8004da8:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	43db      	mvns	r3, r3
 8004db0:	401a      	ands	r2, r3
 8004db2:	697b      	ldr	r3, [r7, #20]
 8004db4:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	68db      	ldr	r3, [r3, #12]
 8004dbc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	685b      	ldr	r3, [r3, #4]
 8004dc2:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004dc4:	683a      	ldr	r2, [r7, #0]
 8004dc6:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004dc8:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004dca:	697b      	ldr	r3, [r7, #20]
 8004dcc:	3248      	adds	r2, #72	@ 0x48
 8004dce:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	689b      	ldr	r3, [r3, #8]
 8004dd6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004de2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004de4:	6979      	ldr	r1, [r7, #20]
 8004de6:	3348      	adds	r3, #72	@ 0x48
 8004de8:	00db      	lsls	r3, r3, #3
 8004dea:	440b      	add	r3, r1
 8004dec:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	69db      	ldr	r3, [r3, #28]
 8004df2:	2b01      	cmp	r3, #1
 8004df4:	d122      	bne.n	8004e3c <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8004df6:	697b      	ldr	r3, [r7, #20]
 8004df8:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	431a      	orrs	r2, r3
 8004e00:	697b      	ldr	r3, [r7, #20]
 8004e02:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	685b      	ldr	r3, [r3, #4]
 8004e10:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004e12:	683a      	ldr	r2, [r7, #0]
 8004e14:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004e16:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004e18:	697b      	ldr	r3, [r7, #20]
 8004e1a:	3248      	adds	r2, #72	@ 0x48
 8004e1c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	689b      	ldr	r3, [r3, #8]
 8004e24:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	68db      	ldr	r3, [r3, #12]
 8004e2a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004e30:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004e32:	6979      	ldr	r1, [r7, #20]
 8004e34:	3348      	adds	r3, #72	@ 0x48
 8004e36:	00db      	lsls	r3, r3, #3
 8004e38:	440b      	add	r3, r1
 8004e3a:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	699b      	ldr	r3, [r3, #24]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d109      	bne.n	8004e58 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8004e44:	697b      	ldr	r3, [r7, #20]
 8004e46:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	43db      	mvns	r3, r3
 8004e4e:	401a      	ands	r2, r3
 8004e50:	697b      	ldr	r3, [r7, #20]
 8004e52:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8004e56:	e007      	b.n	8004e68 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8004e58:	697b      	ldr	r3, [r7, #20]
 8004e5a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	431a      	orrs	r2, r3
 8004e62:	697b      	ldr	r3, [r7, #20]
 8004e64:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	691b      	ldr	r3, [r3, #16]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d109      	bne.n	8004e84 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8004e70:	697b      	ldr	r3, [r7, #20]
 8004e72:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	43db      	mvns	r3, r3
 8004e7a:	401a      	ands	r2, r3
 8004e7c:	697b      	ldr	r3, [r7, #20]
 8004e7e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8004e82:	e007      	b.n	8004e94 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8004e84:	697b      	ldr	r3, [r7, #20]
 8004e86:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	431a      	orrs	r2, r3
 8004e8e:	697b      	ldr	r3, [r7, #20]
 8004e90:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	6a1b      	ldr	r3, [r3, #32]
 8004e98:	2b01      	cmp	r3, #1
 8004e9a:	d107      	bne.n	8004eac <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8004e9c:	697b      	ldr	r3, [r7, #20]
 8004e9e:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	431a      	orrs	r2, r3
 8004ea6:	697b      	ldr	r3, [r7, #20]
 8004ea8:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004eac:	697b      	ldr	r3, [r7, #20]
 8004eae:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8004eb2:	f023 0201 	bic.w	r2, r3, #1
 8004eb6:	697b      	ldr	r3, [r7, #20]
 8004eb8:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	e006      	b.n	8004ece <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ec4:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8004ecc:	2301      	movs	r3, #1
  }
}
 8004ece:	4618      	mov	r0, r3
 8004ed0:	371c      	adds	r7, #28
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed8:	4770      	bx	lr

08004eda <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8004eda:	b580      	push	{r7, lr}
 8004edc:	b084      	sub	sp, #16
 8004ede:	af00      	add	r7, sp, #0
 8004ee0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004ee8:	b2db      	uxtb	r3, r3
 8004eea:	2b01      	cmp	r3, #1
 8004eec:	d12e      	bne.n	8004f4c <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2202      	movs	r2, #2
 8004ef2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	681a      	ldr	r2, [r3, #0]
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f022 0201 	bic.w	r2, r2, #1
 8004f04:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004f06:	f7fe fd23 	bl	8003950 <HAL_GetTick>
 8004f0a:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004f0c:	e012      	b.n	8004f34 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004f0e:	f7fe fd1f 	bl	8003950 <HAL_GetTick>
 8004f12:	4602      	mov	r2, r0
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	1ad3      	subs	r3, r2, r3
 8004f18:	2b0a      	cmp	r3, #10
 8004f1a:	d90b      	bls.n	8004f34 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f20:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2205      	movs	r2, #5
 8004f2c:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8004f30:	2301      	movs	r3, #1
 8004f32:	e012      	b.n	8004f5a <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	685b      	ldr	r3, [r3, #4]
 8004f3a:	f003 0301 	and.w	r3, r3, #1
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d1e5      	bne.n	8004f0e <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2200      	movs	r2, #0
 8004f46:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8004f48:	2300      	movs	r3, #0
 8004f4a:	e006      	b.n	8004f5a <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f50:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8004f58:	2301      	movs	r3, #1
  }
}
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	3710      	adds	r7, #16
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	bd80      	pop	{r7, pc}

08004f62 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8004f62:	b480      	push	{r7}
 8004f64:	b089      	sub	sp, #36	@ 0x24
 8004f66:	af00      	add	r7, sp, #0
 8004f68:	60f8      	str	r0, [r7, #12]
 8004f6a:	60b9      	str	r1, [r7, #8]
 8004f6c:	607a      	str	r2, [r7, #4]
 8004f6e:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004f76:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	689b      	ldr	r3, [r3, #8]
 8004f7e:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8004f80:	7ffb      	ldrb	r3, [r7, #31]
 8004f82:	2b01      	cmp	r3, #1
 8004f84:	d003      	beq.n	8004f8e <HAL_CAN_AddTxMessage+0x2c>
 8004f86:	7ffb      	ldrb	r3, [r7, #31]
 8004f88:	2b02      	cmp	r3, #2
 8004f8a:	f040 80ad 	bne.w	80050e8 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8004f8e:	69bb      	ldr	r3, [r7, #24]
 8004f90:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d10a      	bne.n	8004fae <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8004f98:	69bb      	ldr	r3, [r7, #24]
 8004f9a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d105      	bne.n	8004fae <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8004fa2:	69bb      	ldr	r3, [r7, #24]
 8004fa4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	f000 8095 	beq.w	80050d8 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8004fae:	69bb      	ldr	r3, [r7, #24]
 8004fb0:	0e1b      	lsrs	r3, r3, #24
 8004fb2:	f003 0303 	and.w	r3, r3, #3
 8004fb6:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8004fb8:	2201      	movs	r2, #1
 8004fba:	697b      	ldr	r3, [r7, #20]
 8004fbc:	409a      	lsls	r2, r3
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8004fc2:	68bb      	ldr	r3, [r7, #8]
 8004fc4:	689b      	ldr	r3, [r3, #8]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d10d      	bne.n	8004fe6 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8004fca:	68bb      	ldr	r3, [r7, #8]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8004fd0:	68bb      	ldr	r3, [r7, #8]
 8004fd2:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8004fd4:	68f9      	ldr	r1, [r7, #12]
 8004fd6:	6809      	ldr	r1, [r1, #0]
 8004fd8:	431a      	orrs	r2, r3
 8004fda:	697b      	ldr	r3, [r7, #20]
 8004fdc:	3318      	adds	r3, #24
 8004fde:	011b      	lsls	r3, r3, #4
 8004fe0:	440b      	add	r3, r1
 8004fe2:	601a      	str	r2, [r3, #0]
 8004fe4:	e00f      	b.n	8005006 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004fe6:	68bb      	ldr	r3, [r7, #8]
 8004fe8:	685b      	ldr	r3, [r3, #4]
 8004fea:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8004fec:	68bb      	ldr	r3, [r7, #8]
 8004fee:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004ff0:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8004ff2:	68bb      	ldr	r3, [r7, #8]
 8004ff4:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004ff6:	68f9      	ldr	r1, [r7, #12]
 8004ff8:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8004ffa:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004ffc:	697b      	ldr	r3, [r7, #20]
 8004ffe:	3318      	adds	r3, #24
 8005000:	011b      	lsls	r3, r3, #4
 8005002:	440b      	add	r3, r1
 8005004:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	6819      	ldr	r1, [r3, #0]
 800500a:	68bb      	ldr	r3, [r7, #8]
 800500c:	691a      	ldr	r2, [r3, #16]
 800500e:	697b      	ldr	r3, [r7, #20]
 8005010:	3318      	adds	r3, #24
 8005012:	011b      	lsls	r3, r3, #4
 8005014:	440b      	add	r3, r1
 8005016:	3304      	adds	r3, #4
 8005018:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800501a:	68bb      	ldr	r3, [r7, #8]
 800501c:	7d1b      	ldrb	r3, [r3, #20]
 800501e:	2b01      	cmp	r3, #1
 8005020:	d111      	bne.n	8005046 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681a      	ldr	r2, [r3, #0]
 8005026:	697b      	ldr	r3, [r7, #20]
 8005028:	3318      	adds	r3, #24
 800502a:	011b      	lsls	r3, r3, #4
 800502c:	4413      	add	r3, r2
 800502e:	3304      	adds	r3, #4
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	68fa      	ldr	r2, [r7, #12]
 8005034:	6811      	ldr	r1, [r2, #0]
 8005036:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800503a:	697b      	ldr	r3, [r7, #20]
 800503c:	3318      	adds	r3, #24
 800503e:	011b      	lsls	r3, r3, #4
 8005040:	440b      	add	r3, r1
 8005042:	3304      	adds	r3, #4
 8005044:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	3307      	adds	r3, #7
 800504a:	781b      	ldrb	r3, [r3, #0]
 800504c:	061a      	lsls	r2, r3, #24
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	3306      	adds	r3, #6
 8005052:	781b      	ldrb	r3, [r3, #0]
 8005054:	041b      	lsls	r3, r3, #16
 8005056:	431a      	orrs	r2, r3
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	3305      	adds	r3, #5
 800505c:	781b      	ldrb	r3, [r3, #0]
 800505e:	021b      	lsls	r3, r3, #8
 8005060:	4313      	orrs	r3, r2
 8005062:	687a      	ldr	r2, [r7, #4]
 8005064:	3204      	adds	r2, #4
 8005066:	7812      	ldrb	r2, [r2, #0]
 8005068:	4610      	mov	r0, r2
 800506a:	68fa      	ldr	r2, [r7, #12]
 800506c:	6811      	ldr	r1, [r2, #0]
 800506e:	ea43 0200 	orr.w	r2, r3, r0
 8005072:	697b      	ldr	r3, [r7, #20]
 8005074:	011b      	lsls	r3, r3, #4
 8005076:	440b      	add	r3, r1
 8005078:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 800507c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	3303      	adds	r3, #3
 8005082:	781b      	ldrb	r3, [r3, #0]
 8005084:	061a      	lsls	r2, r3, #24
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	3302      	adds	r3, #2
 800508a:	781b      	ldrb	r3, [r3, #0]
 800508c:	041b      	lsls	r3, r3, #16
 800508e:	431a      	orrs	r2, r3
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	3301      	adds	r3, #1
 8005094:	781b      	ldrb	r3, [r3, #0]
 8005096:	021b      	lsls	r3, r3, #8
 8005098:	4313      	orrs	r3, r2
 800509a:	687a      	ldr	r2, [r7, #4]
 800509c:	7812      	ldrb	r2, [r2, #0]
 800509e:	4610      	mov	r0, r2
 80050a0:	68fa      	ldr	r2, [r7, #12]
 80050a2:	6811      	ldr	r1, [r2, #0]
 80050a4:	ea43 0200 	orr.w	r2, r3, r0
 80050a8:	697b      	ldr	r3, [r7, #20]
 80050aa:	011b      	lsls	r3, r3, #4
 80050ac:	440b      	add	r3, r1
 80050ae:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 80050b2:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681a      	ldr	r2, [r3, #0]
 80050b8:	697b      	ldr	r3, [r7, #20]
 80050ba:	3318      	adds	r3, #24
 80050bc:	011b      	lsls	r3, r3, #4
 80050be:	4413      	add	r3, r2
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	68fa      	ldr	r2, [r7, #12]
 80050c4:	6811      	ldr	r1, [r2, #0]
 80050c6:	f043 0201 	orr.w	r2, r3, #1
 80050ca:	697b      	ldr	r3, [r7, #20]
 80050cc:	3318      	adds	r3, #24
 80050ce:	011b      	lsls	r3, r3, #4
 80050d0:	440b      	add	r3, r1
 80050d2:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80050d4:	2300      	movs	r3, #0
 80050d6:	e00e      	b.n	80050f6 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050dc:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 80050e4:	2301      	movs	r3, #1
 80050e6:	e006      	b.n	80050f6 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050ec:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80050f4:	2301      	movs	r3, #1
  }
}
 80050f6:	4618      	mov	r0, r3
 80050f8:	3724      	adds	r7, #36	@ 0x24
 80050fa:	46bd      	mov	sp, r7
 80050fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005100:	4770      	bx	lr

08005102 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8005102:	b480      	push	{r7}
 8005104:	b087      	sub	sp, #28
 8005106:	af00      	add	r7, sp, #0
 8005108:	60f8      	str	r0, [r7, #12]
 800510a:	60b9      	str	r1, [r7, #8]
 800510c:	607a      	str	r2, [r7, #4]
 800510e:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005116:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8005118:	7dfb      	ldrb	r3, [r7, #23]
 800511a:	2b01      	cmp	r3, #1
 800511c:	d003      	beq.n	8005126 <HAL_CAN_GetRxMessage+0x24>
 800511e:	7dfb      	ldrb	r3, [r7, #23]
 8005120:	2b02      	cmp	r3, #2
 8005122:	f040 8103 	bne.w	800532c <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8005126:	68bb      	ldr	r3, [r7, #8]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d10e      	bne.n	800514a <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	68db      	ldr	r3, [r3, #12]
 8005132:	f003 0303 	and.w	r3, r3, #3
 8005136:	2b00      	cmp	r3, #0
 8005138:	d116      	bne.n	8005168 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800513e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8005146:	2301      	movs	r3, #1
 8005148:	e0f7      	b.n	800533a <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	691b      	ldr	r3, [r3, #16]
 8005150:	f003 0303 	and.w	r3, r3, #3
 8005154:	2b00      	cmp	r3, #0
 8005156:	d107      	bne.n	8005168 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800515c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8005164:	2301      	movs	r3, #1
 8005166:	e0e8      	b.n	800533a <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681a      	ldr	r2, [r3, #0]
 800516c:	68bb      	ldr	r3, [r7, #8]
 800516e:	331b      	adds	r3, #27
 8005170:	011b      	lsls	r3, r3, #4
 8005172:	4413      	add	r3, r2
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f003 0204 	and.w	r2, r3, #4
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	689b      	ldr	r3, [r3, #8]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d10c      	bne.n	80051a0 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681a      	ldr	r2, [r3, #0]
 800518a:	68bb      	ldr	r3, [r7, #8]
 800518c:	331b      	adds	r3, #27
 800518e:	011b      	lsls	r3, r3, #4
 8005190:	4413      	add	r3, r2
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	0d5b      	lsrs	r3, r3, #21
 8005196:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	601a      	str	r2, [r3, #0]
 800519e:	e00b      	b.n	80051b8 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681a      	ldr	r2, [r3, #0]
 80051a4:	68bb      	ldr	r3, [r7, #8]
 80051a6:	331b      	adds	r3, #27
 80051a8:	011b      	lsls	r3, r3, #4
 80051aa:	4413      	add	r3, r2
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	08db      	lsrs	r3, r3, #3
 80051b0:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681a      	ldr	r2, [r3, #0]
 80051bc:	68bb      	ldr	r3, [r7, #8]
 80051be:	331b      	adds	r3, #27
 80051c0:	011b      	lsls	r3, r3, #4
 80051c2:	4413      	add	r3, r2
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f003 0202 	and.w	r2, r3, #2
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681a      	ldr	r2, [r3, #0]
 80051d2:	68bb      	ldr	r3, [r7, #8]
 80051d4:	331b      	adds	r3, #27
 80051d6:	011b      	lsls	r3, r3, #4
 80051d8:	4413      	add	r3, r2
 80051da:	3304      	adds	r3, #4
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f003 0308 	and.w	r3, r3, #8
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d003      	beq.n	80051ee <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2208      	movs	r2, #8
 80051ea:	611a      	str	r2, [r3, #16]
 80051ec:	e00b      	b.n	8005206 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681a      	ldr	r2, [r3, #0]
 80051f2:	68bb      	ldr	r3, [r7, #8]
 80051f4:	331b      	adds	r3, #27
 80051f6:	011b      	lsls	r3, r3, #4
 80051f8:	4413      	add	r3, r2
 80051fa:	3304      	adds	r3, #4
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f003 020f 	and.w	r2, r3, #15
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681a      	ldr	r2, [r3, #0]
 800520a:	68bb      	ldr	r3, [r7, #8]
 800520c:	331b      	adds	r3, #27
 800520e:	011b      	lsls	r3, r3, #4
 8005210:	4413      	add	r3, r2
 8005212:	3304      	adds	r3, #4
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	0a1b      	lsrs	r3, r3, #8
 8005218:	b2da      	uxtb	r2, r3
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681a      	ldr	r2, [r3, #0]
 8005222:	68bb      	ldr	r3, [r7, #8]
 8005224:	331b      	adds	r3, #27
 8005226:	011b      	lsls	r3, r3, #4
 8005228:	4413      	add	r3, r2
 800522a:	3304      	adds	r3, #4
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	0c1b      	lsrs	r3, r3, #16
 8005230:	b29a      	uxth	r2, r3
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681a      	ldr	r2, [r3, #0]
 800523a:	68bb      	ldr	r3, [r7, #8]
 800523c:	011b      	lsls	r3, r3, #4
 800523e:	4413      	add	r3, r2
 8005240:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	b2da      	uxtb	r2, r3
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681a      	ldr	r2, [r3, #0]
 8005250:	68bb      	ldr	r3, [r7, #8]
 8005252:	011b      	lsls	r3, r3, #4
 8005254:	4413      	add	r3, r2
 8005256:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	0a1a      	lsrs	r2, r3, #8
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	3301      	adds	r3, #1
 8005262:	b2d2      	uxtb	r2, r2
 8005264:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681a      	ldr	r2, [r3, #0]
 800526a:	68bb      	ldr	r3, [r7, #8]
 800526c:	011b      	lsls	r3, r3, #4
 800526e:	4413      	add	r3, r2
 8005270:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	0c1a      	lsrs	r2, r3, #16
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	3302      	adds	r3, #2
 800527c:	b2d2      	uxtb	r2, r2
 800527e:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681a      	ldr	r2, [r3, #0]
 8005284:	68bb      	ldr	r3, [r7, #8]
 8005286:	011b      	lsls	r3, r3, #4
 8005288:	4413      	add	r3, r2
 800528a:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	0e1a      	lsrs	r2, r3, #24
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	3303      	adds	r3, #3
 8005296:	b2d2      	uxtb	r2, r2
 8005298:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681a      	ldr	r2, [r3, #0]
 800529e:	68bb      	ldr	r3, [r7, #8]
 80052a0:	011b      	lsls	r3, r3, #4
 80052a2:	4413      	add	r3, r2
 80052a4:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80052a8:	681a      	ldr	r2, [r3, #0]
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	3304      	adds	r3, #4
 80052ae:	b2d2      	uxtb	r2, r2
 80052b0:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681a      	ldr	r2, [r3, #0]
 80052b6:	68bb      	ldr	r3, [r7, #8]
 80052b8:	011b      	lsls	r3, r3, #4
 80052ba:	4413      	add	r3, r2
 80052bc:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	0a1a      	lsrs	r2, r3, #8
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	3305      	adds	r3, #5
 80052c8:	b2d2      	uxtb	r2, r2
 80052ca:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681a      	ldr	r2, [r3, #0]
 80052d0:	68bb      	ldr	r3, [r7, #8]
 80052d2:	011b      	lsls	r3, r3, #4
 80052d4:	4413      	add	r3, r2
 80052d6:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	0c1a      	lsrs	r2, r3, #16
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	3306      	adds	r3, #6
 80052e2:	b2d2      	uxtb	r2, r2
 80052e4:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681a      	ldr	r2, [r3, #0]
 80052ea:	68bb      	ldr	r3, [r7, #8]
 80052ec:	011b      	lsls	r3, r3, #4
 80052ee:	4413      	add	r3, r2
 80052f0:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	0e1a      	lsrs	r2, r3, #24
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	3307      	adds	r3, #7
 80052fc:	b2d2      	uxtb	r2, r2
 80052fe:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8005300:	68bb      	ldr	r3, [r7, #8]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d108      	bne.n	8005318 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	68da      	ldr	r2, [r3, #12]
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f042 0220 	orr.w	r2, r2, #32
 8005314:	60da      	str	r2, [r3, #12]
 8005316:	e007      	b.n	8005328 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	691a      	ldr	r2, [r3, #16]
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f042 0220 	orr.w	r2, r2, #32
 8005326:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8005328:	2300      	movs	r3, #0
 800532a:	e006      	b.n	800533a <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005330:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8005338:	2301      	movs	r3, #1
  }
}
 800533a:	4618      	mov	r0, r3
 800533c:	371c      	adds	r7, #28
 800533e:	46bd      	mov	sp, r7
 8005340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005344:	4770      	bx	lr

08005346 <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(const CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 8005346:	b480      	push	{r7}
 8005348:	b085      	sub	sp, #20
 800534a:	af00      	add	r7, sp, #0
 800534c:	6078      	str	r0, [r7, #4]
 800534e:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 8005350:	2300      	movs	r3, #0
 8005352:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	f893 3020 	ldrb.w	r3, [r3, #32]
 800535a:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800535c:	7afb      	ldrb	r3, [r7, #11]
 800535e:	2b01      	cmp	r3, #1
 8005360:	d002      	beq.n	8005368 <HAL_CAN_GetRxFifoFillLevel+0x22>
 8005362:	7afb      	ldrb	r3, [r7, #11]
 8005364:	2b02      	cmp	r3, #2
 8005366:	d10f      	bne.n	8005388 <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d106      	bne.n	800537c <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	68db      	ldr	r3, [r3, #12]
 8005374:	f003 0303 	and.w	r3, r3, #3
 8005378:	60fb      	str	r3, [r7, #12]
 800537a:	e005      	b.n	8005388 <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	691b      	ldr	r3, [r3, #16]
 8005382:	f003 0303 	and.w	r3, r3, #3
 8005386:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 8005388:	68fb      	ldr	r3, [r7, #12]
}
 800538a:	4618      	mov	r0, r3
 800538c:	3714      	adds	r7, #20
 800538e:	46bd      	mov	sp, r7
 8005390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005394:	4770      	bx	lr

08005396 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8005396:	b480      	push	{r7}
 8005398:	b085      	sub	sp, #20
 800539a:	af00      	add	r7, sp, #0
 800539c:	6078      	str	r0, [r7, #4]
 800539e:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80053a6:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80053a8:	7bfb      	ldrb	r3, [r7, #15]
 80053aa:	2b01      	cmp	r3, #1
 80053ac:	d002      	beq.n	80053b4 <HAL_CAN_ActivateNotification+0x1e>
 80053ae:	7bfb      	ldrb	r3, [r7, #15]
 80053b0:	2b02      	cmp	r3, #2
 80053b2:	d109      	bne.n	80053c8 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	6959      	ldr	r1, [r3, #20]
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	683a      	ldr	r2, [r7, #0]
 80053c0:	430a      	orrs	r2, r1
 80053c2:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80053c4:	2300      	movs	r3, #0
 80053c6:	e006      	b.n	80053d6 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053cc:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80053d4:	2301      	movs	r3, #1
  }
}
 80053d6:	4618      	mov	r0, r3
 80053d8:	3714      	adds	r7, #20
 80053da:	46bd      	mov	sp, r7
 80053dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e0:	4770      	bx	lr
	...

080053e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80053e4:	b480      	push	{r7}
 80053e6:	b085      	sub	sp, #20
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	f003 0307 	and.w	r3, r3, #7
 80053f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80053f4:	4b0c      	ldr	r3, [pc, #48]	@ (8005428 <__NVIC_SetPriorityGrouping+0x44>)
 80053f6:	68db      	ldr	r3, [r3, #12]
 80053f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80053fa:	68ba      	ldr	r2, [r7, #8]
 80053fc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005400:	4013      	ands	r3, r2
 8005402:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005408:	68bb      	ldr	r3, [r7, #8]
 800540a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800540c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005410:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005414:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005416:	4a04      	ldr	r2, [pc, #16]	@ (8005428 <__NVIC_SetPriorityGrouping+0x44>)
 8005418:	68bb      	ldr	r3, [r7, #8]
 800541a:	60d3      	str	r3, [r2, #12]
}
 800541c:	bf00      	nop
 800541e:	3714      	adds	r7, #20
 8005420:	46bd      	mov	sp, r7
 8005422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005426:	4770      	bx	lr
 8005428:	e000ed00 	.word	0xe000ed00

0800542c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800542c:	b480      	push	{r7}
 800542e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005430:	4b04      	ldr	r3, [pc, #16]	@ (8005444 <__NVIC_GetPriorityGrouping+0x18>)
 8005432:	68db      	ldr	r3, [r3, #12]
 8005434:	0a1b      	lsrs	r3, r3, #8
 8005436:	f003 0307 	and.w	r3, r3, #7
}
 800543a:	4618      	mov	r0, r3
 800543c:	46bd      	mov	sp, r7
 800543e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005442:	4770      	bx	lr
 8005444:	e000ed00 	.word	0xe000ed00

08005448 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005448:	b480      	push	{r7}
 800544a:	b083      	sub	sp, #12
 800544c:	af00      	add	r7, sp, #0
 800544e:	4603      	mov	r3, r0
 8005450:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005452:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005456:	2b00      	cmp	r3, #0
 8005458:	db0b      	blt.n	8005472 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800545a:	79fb      	ldrb	r3, [r7, #7]
 800545c:	f003 021f 	and.w	r2, r3, #31
 8005460:	4907      	ldr	r1, [pc, #28]	@ (8005480 <__NVIC_EnableIRQ+0x38>)
 8005462:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005466:	095b      	lsrs	r3, r3, #5
 8005468:	2001      	movs	r0, #1
 800546a:	fa00 f202 	lsl.w	r2, r0, r2
 800546e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005472:	bf00      	nop
 8005474:	370c      	adds	r7, #12
 8005476:	46bd      	mov	sp, r7
 8005478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547c:	4770      	bx	lr
 800547e:	bf00      	nop
 8005480:	e000e100 	.word	0xe000e100

08005484 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005484:	b480      	push	{r7}
 8005486:	b083      	sub	sp, #12
 8005488:	af00      	add	r7, sp, #0
 800548a:	4603      	mov	r3, r0
 800548c:	6039      	str	r1, [r7, #0]
 800548e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005490:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005494:	2b00      	cmp	r3, #0
 8005496:	db0a      	blt.n	80054ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	b2da      	uxtb	r2, r3
 800549c:	490c      	ldr	r1, [pc, #48]	@ (80054d0 <__NVIC_SetPriority+0x4c>)
 800549e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054a2:	0112      	lsls	r2, r2, #4
 80054a4:	b2d2      	uxtb	r2, r2
 80054a6:	440b      	add	r3, r1
 80054a8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80054ac:	e00a      	b.n	80054c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	b2da      	uxtb	r2, r3
 80054b2:	4908      	ldr	r1, [pc, #32]	@ (80054d4 <__NVIC_SetPriority+0x50>)
 80054b4:	79fb      	ldrb	r3, [r7, #7]
 80054b6:	f003 030f 	and.w	r3, r3, #15
 80054ba:	3b04      	subs	r3, #4
 80054bc:	0112      	lsls	r2, r2, #4
 80054be:	b2d2      	uxtb	r2, r2
 80054c0:	440b      	add	r3, r1
 80054c2:	761a      	strb	r2, [r3, #24]
}
 80054c4:	bf00      	nop
 80054c6:	370c      	adds	r7, #12
 80054c8:	46bd      	mov	sp, r7
 80054ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ce:	4770      	bx	lr
 80054d0:	e000e100 	.word	0xe000e100
 80054d4:	e000ed00 	.word	0xe000ed00

080054d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80054d8:	b480      	push	{r7}
 80054da:	b089      	sub	sp, #36	@ 0x24
 80054dc:	af00      	add	r7, sp, #0
 80054de:	60f8      	str	r0, [r7, #12]
 80054e0:	60b9      	str	r1, [r7, #8]
 80054e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	f003 0307 	and.w	r3, r3, #7
 80054ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80054ec:	69fb      	ldr	r3, [r7, #28]
 80054ee:	f1c3 0307 	rsb	r3, r3, #7
 80054f2:	2b04      	cmp	r3, #4
 80054f4:	bf28      	it	cs
 80054f6:	2304      	movcs	r3, #4
 80054f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80054fa:	69fb      	ldr	r3, [r7, #28]
 80054fc:	3304      	adds	r3, #4
 80054fe:	2b06      	cmp	r3, #6
 8005500:	d902      	bls.n	8005508 <NVIC_EncodePriority+0x30>
 8005502:	69fb      	ldr	r3, [r7, #28]
 8005504:	3b03      	subs	r3, #3
 8005506:	e000      	b.n	800550a <NVIC_EncodePriority+0x32>
 8005508:	2300      	movs	r3, #0
 800550a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800550c:	f04f 32ff 	mov.w	r2, #4294967295
 8005510:	69bb      	ldr	r3, [r7, #24]
 8005512:	fa02 f303 	lsl.w	r3, r2, r3
 8005516:	43da      	mvns	r2, r3
 8005518:	68bb      	ldr	r3, [r7, #8]
 800551a:	401a      	ands	r2, r3
 800551c:	697b      	ldr	r3, [r7, #20]
 800551e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005520:	f04f 31ff 	mov.w	r1, #4294967295
 8005524:	697b      	ldr	r3, [r7, #20]
 8005526:	fa01 f303 	lsl.w	r3, r1, r3
 800552a:	43d9      	mvns	r1, r3
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005530:	4313      	orrs	r3, r2
         );
}
 8005532:	4618      	mov	r0, r3
 8005534:	3724      	adds	r7, #36	@ 0x24
 8005536:	46bd      	mov	sp, r7
 8005538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553c:	4770      	bx	lr
	...

08005540 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b082      	sub	sp, #8
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	3b01      	subs	r3, #1
 800554c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005550:	d301      	bcc.n	8005556 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005552:	2301      	movs	r3, #1
 8005554:	e00f      	b.n	8005576 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005556:	4a0a      	ldr	r2, [pc, #40]	@ (8005580 <SysTick_Config+0x40>)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	3b01      	subs	r3, #1
 800555c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800555e:	210f      	movs	r1, #15
 8005560:	f04f 30ff 	mov.w	r0, #4294967295
 8005564:	f7ff ff8e 	bl	8005484 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005568:	4b05      	ldr	r3, [pc, #20]	@ (8005580 <SysTick_Config+0x40>)
 800556a:	2200      	movs	r2, #0
 800556c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800556e:	4b04      	ldr	r3, [pc, #16]	@ (8005580 <SysTick_Config+0x40>)
 8005570:	2207      	movs	r2, #7
 8005572:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005574:	2300      	movs	r3, #0
}
 8005576:	4618      	mov	r0, r3
 8005578:	3708      	adds	r7, #8
 800557a:	46bd      	mov	sp, r7
 800557c:	bd80      	pop	{r7, pc}
 800557e:	bf00      	nop
 8005580:	e000e010 	.word	0xe000e010

08005584 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005584:	b580      	push	{r7, lr}
 8005586:	b082      	sub	sp, #8
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800558c:	6878      	ldr	r0, [r7, #4]
 800558e:	f7ff ff29 	bl	80053e4 <__NVIC_SetPriorityGrouping>
}
 8005592:	bf00      	nop
 8005594:	3708      	adds	r7, #8
 8005596:	46bd      	mov	sp, r7
 8005598:	bd80      	pop	{r7, pc}

0800559a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800559a:	b580      	push	{r7, lr}
 800559c:	b086      	sub	sp, #24
 800559e:	af00      	add	r7, sp, #0
 80055a0:	4603      	mov	r3, r0
 80055a2:	60b9      	str	r1, [r7, #8]
 80055a4:	607a      	str	r2, [r7, #4]
 80055a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80055a8:	2300      	movs	r3, #0
 80055aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80055ac:	f7ff ff3e 	bl	800542c <__NVIC_GetPriorityGrouping>
 80055b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80055b2:	687a      	ldr	r2, [r7, #4]
 80055b4:	68b9      	ldr	r1, [r7, #8]
 80055b6:	6978      	ldr	r0, [r7, #20]
 80055b8:	f7ff ff8e 	bl	80054d8 <NVIC_EncodePriority>
 80055bc:	4602      	mov	r2, r0
 80055be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80055c2:	4611      	mov	r1, r2
 80055c4:	4618      	mov	r0, r3
 80055c6:	f7ff ff5d 	bl	8005484 <__NVIC_SetPriority>
}
 80055ca:	bf00      	nop
 80055cc:	3718      	adds	r7, #24
 80055ce:	46bd      	mov	sp, r7
 80055d0:	bd80      	pop	{r7, pc}

080055d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80055d2:	b580      	push	{r7, lr}
 80055d4:	b082      	sub	sp, #8
 80055d6:	af00      	add	r7, sp, #0
 80055d8:	4603      	mov	r3, r0
 80055da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80055dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055e0:	4618      	mov	r0, r3
 80055e2:	f7ff ff31 	bl	8005448 <__NVIC_EnableIRQ>
}
 80055e6:	bf00      	nop
 80055e8:	3708      	adds	r7, #8
 80055ea:	46bd      	mov	sp, r7
 80055ec:	bd80      	pop	{r7, pc}

080055ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80055ee:	b580      	push	{r7, lr}
 80055f0:	b082      	sub	sp, #8
 80055f2:	af00      	add	r7, sp, #0
 80055f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80055f6:	6878      	ldr	r0, [r7, #4]
 80055f8:	f7ff ffa2 	bl	8005540 <SysTick_Config>
 80055fc:	4603      	mov	r3, r0
}
 80055fe:	4618      	mov	r0, r3
 8005600:	3708      	adds	r7, #8
 8005602:	46bd      	mov	sp, r7
 8005604:	bd80      	pop	{r7, pc}
	...

08005608 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005608:	b480      	push	{r7}
 800560a:	b087      	sub	sp, #28
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
 8005610:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005612:	2300      	movs	r3, #0
 8005614:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005616:	e154      	b.n	80058c2 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	681a      	ldr	r2, [r3, #0]
 800561c:	2101      	movs	r1, #1
 800561e:	697b      	ldr	r3, [r7, #20]
 8005620:	fa01 f303 	lsl.w	r3, r1, r3
 8005624:	4013      	ands	r3, r2
 8005626:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	2b00      	cmp	r3, #0
 800562c:	f000 8146 	beq.w	80058bc <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	685b      	ldr	r3, [r3, #4]
 8005634:	f003 0303 	and.w	r3, r3, #3
 8005638:	2b01      	cmp	r3, #1
 800563a:	d005      	beq.n	8005648 <HAL_GPIO_Init+0x40>
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	685b      	ldr	r3, [r3, #4]
 8005640:	f003 0303 	and.w	r3, r3, #3
 8005644:	2b02      	cmp	r3, #2
 8005646:	d130      	bne.n	80056aa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	689b      	ldr	r3, [r3, #8]
 800564c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800564e:	697b      	ldr	r3, [r7, #20]
 8005650:	005b      	lsls	r3, r3, #1
 8005652:	2203      	movs	r2, #3
 8005654:	fa02 f303 	lsl.w	r3, r2, r3
 8005658:	43db      	mvns	r3, r3
 800565a:	693a      	ldr	r2, [r7, #16]
 800565c:	4013      	ands	r3, r2
 800565e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	68da      	ldr	r2, [r3, #12]
 8005664:	697b      	ldr	r3, [r7, #20]
 8005666:	005b      	lsls	r3, r3, #1
 8005668:	fa02 f303 	lsl.w	r3, r2, r3
 800566c:	693a      	ldr	r2, [r7, #16]
 800566e:	4313      	orrs	r3, r2
 8005670:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	693a      	ldr	r2, [r7, #16]
 8005676:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	685b      	ldr	r3, [r3, #4]
 800567c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800567e:	2201      	movs	r2, #1
 8005680:	697b      	ldr	r3, [r7, #20]
 8005682:	fa02 f303 	lsl.w	r3, r2, r3
 8005686:	43db      	mvns	r3, r3
 8005688:	693a      	ldr	r2, [r7, #16]
 800568a:	4013      	ands	r3, r2
 800568c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	685b      	ldr	r3, [r3, #4]
 8005692:	091b      	lsrs	r3, r3, #4
 8005694:	f003 0201 	and.w	r2, r3, #1
 8005698:	697b      	ldr	r3, [r7, #20]
 800569a:	fa02 f303 	lsl.w	r3, r2, r3
 800569e:	693a      	ldr	r2, [r7, #16]
 80056a0:	4313      	orrs	r3, r2
 80056a2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	693a      	ldr	r2, [r7, #16]
 80056a8:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	685b      	ldr	r3, [r3, #4]
 80056ae:	f003 0303 	and.w	r3, r3, #3
 80056b2:	2b03      	cmp	r3, #3
 80056b4:	d017      	beq.n	80056e6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	68db      	ldr	r3, [r3, #12]
 80056ba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80056bc:	697b      	ldr	r3, [r7, #20]
 80056be:	005b      	lsls	r3, r3, #1
 80056c0:	2203      	movs	r2, #3
 80056c2:	fa02 f303 	lsl.w	r3, r2, r3
 80056c6:	43db      	mvns	r3, r3
 80056c8:	693a      	ldr	r2, [r7, #16]
 80056ca:	4013      	ands	r3, r2
 80056cc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	689a      	ldr	r2, [r3, #8]
 80056d2:	697b      	ldr	r3, [r7, #20]
 80056d4:	005b      	lsls	r3, r3, #1
 80056d6:	fa02 f303 	lsl.w	r3, r2, r3
 80056da:	693a      	ldr	r2, [r7, #16]
 80056dc:	4313      	orrs	r3, r2
 80056de:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	693a      	ldr	r2, [r7, #16]
 80056e4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	685b      	ldr	r3, [r3, #4]
 80056ea:	f003 0303 	and.w	r3, r3, #3
 80056ee:	2b02      	cmp	r3, #2
 80056f0:	d123      	bne.n	800573a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80056f2:	697b      	ldr	r3, [r7, #20]
 80056f4:	08da      	lsrs	r2, r3, #3
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	3208      	adds	r2, #8
 80056fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056fe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005700:	697b      	ldr	r3, [r7, #20]
 8005702:	f003 0307 	and.w	r3, r3, #7
 8005706:	009b      	lsls	r3, r3, #2
 8005708:	220f      	movs	r2, #15
 800570a:	fa02 f303 	lsl.w	r3, r2, r3
 800570e:	43db      	mvns	r3, r3
 8005710:	693a      	ldr	r2, [r7, #16]
 8005712:	4013      	ands	r3, r2
 8005714:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	691a      	ldr	r2, [r3, #16]
 800571a:	697b      	ldr	r3, [r7, #20]
 800571c:	f003 0307 	and.w	r3, r3, #7
 8005720:	009b      	lsls	r3, r3, #2
 8005722:	fa02 f303 	lsl.w	r3, r2, r3
 8005726:	693a      	ldr	r2, [r7, #16]
 8005728:	4313      	orrs	r3, r2
 800572a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800572c:	697b      	ldr	r3, [r7, #20]
 800572e:	08da      	lsrs	r2, r3, #3
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	3208      	adds	r2, #8
 8005734:	6939      	ldr	r1, [r7, #16]
 8005736:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8005740:	697b      	ldr	r3, [r7, #20]
 8005742:	005b      	lsls	r3, r3, #1
 8005744:	2203      	movs	r2, #3
 8005746:	fa02 f303 	lsl.w	r3, r2, r3
 800574a:	43db      	mvns	r3, r3
 800574c:	693a      	ldr	r2, [r7, #16]
 800574e:	4013      	ands	r3, r2
 8005750:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	685b      	ldr	r3, [r3, #4]
 8005756:	f003 0203 	and.w	r2, r3, #3
 800575a:	697b      	ldr	r3, [r7, #20]
 800575c:	005b      	lsls	r3, r3, #1
 800575e:	fa02 f303 	lsl.w	r3, r2, r3
 8005762:	693a      	ldr	r2, [r7, #16]
 8005764:	4313      	orrs	r3, r2
 8005766:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	693a      	ldr	r2, [r7, #16]
 800576c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	685b      	ldr	r3, [r3, #4]
 8005772:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005776:	2b00      	cmp	r3, #0
 8005778:	f000 80a0 	beq.w	80058bc <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800577c:	4b58      	ldr	r3, [pc, #352]	@ (80058e0 <HAL_GPIO_Init+0x2d8>)
 800577e:	699b      	ldr	r3, [r3, #24]
 8005780:	4a57      	ldr	r2, [pc, #348]	@ (80058e0 <HAL_GPIO_Init+0x2d8>)
 8005782:	f043 0301 	orr.w	r3, r3, #1
 8005786:	6193      	str	r3, [r2, #24]
 8005788:	4b55      	ldr	r3, [pc, #340]	@ (80058e0 <HAL_GPIO_Init+0x2d8>)
 800578a:	699b      	ldr	r3, [r3, #24]
 800578c:	f003 0301 	and.w	r3, r3, #1
 8005790:	60bb      	str	r3, [r7, #8]
 8005792:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8005794:	4a53      	ldr	r2, [pc, #332]	@ (80058e4 <HAL_GPIO_Init+0x2dc>)
 8005796:	697b      	ldr	r3, [r7, #20]
 8005798:	089b      	lsrs	r3, r3, #2
 800579a:	3302      	adds	r3, #2
 800579c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80057a0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80057a2:	697b      	ldr	r3, [r7, #20]
 80057a4:	f003 0303 	and.w	r3, r3, #3
 80057a8:	009b      	lsls	r3, r3, #2
 80057aa:	220f      	movs	r2, #15
 80057ac:	fa02 f303 	lsl.w	r3, r2, r3
 80057b0:	43db      	mvns	r3, r3
 80057b2:	693a      	ldr	r2, [r7, #16]
 80057b4:	4013      	ands	r3, r2
 80057b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80057be:	d019      	beq.n	80057f4 <HAL_GPIO_Init+0x1ec>
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	4a49      	ldr	r2, [pc, #292]	@ (80058e8 <HAL_GPIO_Init+0x2e0>)
 80057c4:	4293      	cmp	r3, r2
 80057c6:	d013      	beq.n	80057f0 <HAL_GPIO_Init+0x1e8>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	4a48      	ldr	r2, [pc, #288]	@ (80058ec <HAL_GPIO_Init+0x2e4>)
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d00d      	beq.n	80057ec <HAL_GPIO_Init+0x1e4>
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	4a47      	ldr	r2, [pc, #284]	@ (80058f0 <HAL_GPIO_Init+0x2e8>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d007      	beq.n	80057e8 <HAL_GPIO_Init+0x1e0>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	4a46      	ldr	r2, [pc, #280]	@ (80058f4 <HAL_GPIO_Init+0x2ec>)
 80057dc:	4293      	cmp	r3, r2
 80057de:	d101      	bne.n	80057e4 <HAL_GPIO_Init+0x1dc>
 80057e0:	2304      	movs	r3, #4
 80057e2:	e008      	b.n	80057f6 <HAL_GPIO_Init+0x1ee>
 80057e4:	2305      	movs	r3, #5
 80057e6:	e006      	b.n	80057f6 <HAL_GPIO_Init+0x1ee>
 80057e8:	2303      	movs	r3, #3
 80057ea:	e004      	b.n	80057f6 <HAL_GPIO_Init+0x1ee>
 80057ec:	2302      	movs	r3, #2
 80057ee:	e002      	b.n	80057f6 <HAL_GPIO_Init+0x1ee>
 80057f0:	2301      	movs	r3, #1
 80057f2:	e000      	b.n	80057f6 <HAL_GPIO_Init+0x1ee>
 80057f4:	2300      	movs	r3, #0
 80057f6:	697a      	ldr	r2, [r7, #20]
 80057f8:	f002 0203 	and.w	r2, r2, #3
 80057fc:	0092      	lsls	r2, r2, #2
 80057fe:	4093      	lsls	r3, r2
 8005800:	693a      	ldr	r2, [r7, #16]
 8005802:	4313      	orrs	r3, r2
 8005804:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005806:	4937      	ldr	r1, [pc, #220]	@ (80058e4 <HAL_GPIO_Init+0x2dc>)
 8005808:	697b      	ldr	r3, [r7, #20]
 800580a:	089b      	lsrs	r3, r3, #2
 800580c:	3302      	adds	r3, #2
 800580e:	693a      	ldr	r2, [r7, #16]
 8005810:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005814:	4b38      	ldr	r3, [pc, #224]	@ (80058f8 <HAL_GPIO_Init+0x2f0>)
 8005816:	689b      	ldr	r3, [r3, #8]
 8005818:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	43db      	mvns	r3, r3
 800581e:	693a      	ldr	r2, [r7, #16]
 8005820:	4013      	ands	r3, r2
 8005822:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	685b      	ldr	r3, [r3, #4]
 8005828:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800582c:	2b00      	cmp	r3, #0
 800582e:	d003      	beq.n	8005838 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8005830:	693a      	ldr	r2, [r7, #16]
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	4313      	orrs	r3, r2
 8005836:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8005838:	4a2f      	ldr	r2, [pc, #188]	@ (80058f8 <HAL_GPIO_Init+0x2f0>)
 800583a:	693b      	ldr	r3, [r7, #16]
 800583c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800583e:	4b2e      	ldr	r3, [pc, #184]	@ (80058f8 <HAL_GPIO_Init+0x2f0>)
 8005840:	68db      	ldr	r3, [r3, #12]
 8005842:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	43db      	mvns	r3, r3
 8005848:	693a      	ldr	r2, [r7, #16]
 800584a:	4013      	ands	r3, r2
 800584c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	685b      	ldr	r3, [r3, #4]
 8005852:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005856:	2b00      	cmp	r3, #0
 8005858:	d003      	beq.n	8005862 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800585a:	693a      	ldr	r2, [r7, #16]
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	4313      	orrs	r3, r2
 8005860:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8005862:	4a25      	ldr	r2, [pc, #148]	@ (80058f8 <HAL_GPIO_Init+0x2f0>)
 8005864:	693b      	ldr	r3, [r7, #16]
 8005866:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005868:	4b23      	ldr	r3, [pc, #140]	@ (80058f8 <HAL_GPIO_Init+0x2f0>)
 800586a:	685b      	ldr	r3, [r3, #4]
 800586c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	43db      	mvns	r3, r3
 8005872:	693a      	ldr	r2, [r7, #16]
 8005874:	4013      	ands	r3, r2
 8005876:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	685b      	ldr	r3, [r3, #4]
 800587c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005880:	2b00      	cmp	r3, #0
 8005882:	d003      	beq.n	800588c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8005884:	693a      	ldr	r2, [r7, #16]
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	4313      	orrs	r3, r2
 800588a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800588c:	4a1a      	ldr	r2, [pc, #104]	@ (80058f8 <HAL_GPIO_Init+0x2f0>)
 800588e:	693b      	ldr	r3, [r7, #16]
 8005890:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005892:	4b19      	ldr	r3, [pc, #100]	@ (80058f8 <HAL_GPIO_Init+0x2f0>)
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	43db      	mvns	r3, r3
 800589c:	693a      	ldr	r2, [r7, #16]
 800589e:	4013      	ands	r3, r2
 80058a0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	685b      	ldr	r3, [r3, #4]
 80058a6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d003      	beq.n	80058b6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80058ae:	693a      	ldr	r2, [r7, #16]
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	4313      	orrs	r3, r2
 80058b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80058b6:	4a10      	ldr	r2, [pc, #64]	@ (80058f8 <HAL_GPIO_Init+0x2f0>)
 80058b8:	693b      	ldr	r3, [r7, #16]
 80058ba:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80058bc:	697b      	ldr	r3, [r7, #20]
 80058be:	3301      	adds	r3, #1
 80058c0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	681a      	ldr	r2, [r3, #0]
 80058c6:	697b      	ldr	r3, [r7, #20]
 80058c8:	fa22 f303 	lsr.w	r3, r2, r3
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	f47f aea3 	bne.w	8005618 <HAL_GPIO_Init+0x10>
  }
}
 80058d2:	bf00      	nop
 80058d4:	bf00      	nop
 80058d6:	371c      	adds	r7, #28
 80058d8:	46bd      	mov	sp, r7
 80058da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058de:	4770      	bx	lr
 80058e0:	40021000 	.word	0x40021000
 80058e4:	40010000 	.word	0x40010000
 80058e8:	48000400 	.word	0x48000400
 80058ec:	48000800 	.word	0x48000800
 80058f0:	48000c00 	.word	0x48000c00
 80058f4:	48001000 	.word	0x48001000
 80058f8:	40010400 	.word	0x40010400

080058fc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80058fc:	b480      	push	{r7}
 80058fe:	b085      	sub	sp, #20
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
 8005904:	460b      	mov	r3, r1
 8005906:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	691a      	ldr	r2, [r3, #16]
 800590c:	887b      	ldrh	r3, [r7, #2]
 800590e:	4013      	ands	r3, r2
 8005910:	2b00      	cmp	r3, #0
 8005912:	d002      	beq.n	800591a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005914:	2301      	movs	r3, #1
 8005916:	73fb      	strb	r3, [r7, #15]
 8005918:	e001      	b.n	800591e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800591a:	2300      	movs	r3, #0
 800591c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800591e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005920:	4618      	mov	r0, r3
 8005922:	3714      	adds	r7, #20
 8005924:	46bd      	mov	sp, r7
 8005926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592a:	4770      	bx	lr

0800592c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800592c:	b480      	push	{r7}
 800592e:	b083      	sub	sp, #12
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
 8005934:	460b      	mov	r3, r1
 8005936:	807b      	strh	r3, [r7, #2]
 8005938:	4613      	mov	r3, r2
 800593a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800593c:	787b      	ldrb	r3, [r7, #1]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d003      	beq.n	800594a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005942:	887a      	ldrh	r2, [r7, #2]
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005948:	e002      	b.n	8005950 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800594a:	887a      	ldrh	r2, [r7, #2]
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005950:	bf00      	nop
 8005952:	370c      	adds	r7, #12
 8005954:	46bd      	mov	sp, r7
 8005956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595a:	4770      	bx	lr

0800595c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800595c:	b480      	push	{r7}
 800595e:	b085      	sub	sp, #20
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
 8005964:	460b      	mov	r3, r1
 8005966:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	695b      	ldr	r3, [r3, #20]
 800596c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800596e:	887a      	ldrh	r2, [r7, #2]
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	4013      	ands	r3, r2
 8005974:	041a      	lsls	r2, r3, #16
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	43d9      	mvns	r1, r3
 800597a:	887b      	ldrh	r3, [r7, #2]
 800597c:	400b      	ands	r3, r1
 800597e:	431a      	orrs	r2, r3
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	619a      	str	r2, [r3, #24]
}
 8005984:	bf00      	nop
 8005986:	3714      	adds	r7, #20
 8005988:	46bd      	mov	sp, r7
 800598a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598e:	4770      	bx	lr

08005990 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005990:	b580      	push	{r7, lr}
 8005992:	b082      	sub	sp, #8
 8005994:	af00      	add	r7, sp, #0
 8005996:	4603      	mov	r3, r0
 8005998:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800599a:	4b08      	ldr	r3, [pc, #32]	@ (80059bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800599c:	695a      	ldr	r2, [r3, #20]
 800599e:	88fb      	ldrh	r3, [r7, #6]
 80059a0:	4013      	ands	r3, r2
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d006      	beq.n	80059b4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80059a6:	4a05      	ldr	r2, [pc, #20]	@ (80059bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80059a8:	88fb      	ldrh	r3, [r7, #6]
 80059aa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80059ac:	88fb      	ldrh	r3, [r7, #6]
 80059ae:	4618      	mov	r0, r3
 80059b0:	f000 f806 	bl	80059c0 <HAL_GPIO_EXTI_Callback>
  }
}
 80059b4:	bf00      	nop
 80059b6:	3708      	adds	r7, #8
 80059b8:	46bd      	mov	sp, r7
 80059ba:	bd80      	pop	{r7, pc}
 80059bc:	40010400 	.word	0x40010400

080059c0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80059c0:	b480      	push	{r7}
 80059c2:	b083      	sub	sp, #12
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	4603      	mov	r3, r0
 80059c8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80059ca:	bf00      	nop
 80059cc:	370c      	adds	r7, #12
 80059ce:	46bd      	mov	sp, r7
 80059d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d4:	4770      	bx	lr

080059d6 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80059d6:	b580      	push	{r7, lr}
 80059d8:	b082      	sub	sp, #8
 80059da:	af00      	add	r7, sp, #0
 80059dc:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d101      	bne.n	80059e8 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80059e4:	2301      	movs	r3, #1
 80059e6:	e081      	b.n	8005aec <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80059ee:	b2db      	uxtb	r3, r3
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d106      	bne.n	8005a02 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2200      	movs	r2, #0
 80059f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80059fc:	6878      	ldr	r0, [r7, #4]
 80059fe:	f7fc fa17 	bl	8001e30 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	2224      	movs	r2, #36	@ 0x24
 8005a06:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	681a      	ldr	r2, [r3, #0]
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f022 0201 	bic.w	r2, r2, #1
 8005a18:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	685a      	ldr	r2, [r3, #4]
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005a26:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	689a      	ldr	r2, [r3, #8]
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005a36:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	68db      	ldr	r3, [r3, #12]
 8005a3c:	2b01      	cmp	r3, #1
 8005a3e:	d107      	bne.n	8005a50 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	689a      	ldr	r2, [r3, #8]
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005a4c:	609a      	str	r2, [r3, #8]
 8005a4e:	e006      	b.n	8005a5e <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	689a      	ldr	r2, [r3, #8]
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8005a5c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	68db      	ldr	r3, [r3, #12]
 8005a62:	2b02      	cmp	r3, #2
 8005a64:	d104      	bne.n	8005a70 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005a6e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	685b      	ldr	r3, [r3, #4]
 8005a76:	687a      	ldr	r2, [r7, #4]
 8005a78:	6812      	ldr	r2, [r2, #0]
 8005a7a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8005a7e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005a82:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	68da      	ldr	r2, [r3, #12]
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005a92:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	691a      	ldr	r2, [r3, #16]
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	695b      	ldr	r3, [r3, #20]
 8005a9c:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	699b      	ldr	r3, [r3, #24]
 8005aa4:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	430a      	orrs	r2, r1
 8005aac:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	69d9      	ldr	r1, [r3, #28]
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6a1a      	ldr	r2, [r3, #32]
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	430a      	orrs	r2, r1
 8005abc:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	681a      	ldr	r2, [r3, #0]
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f042 0201 	orr.w	r2, r2, #1
 8005acc:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2220      	movs	r2, #32
 8005ad8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2200      	movs	r2, #0
 8005ae0:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8005aea:	2300      	movs	r3, #0
}
 8005aec:	4618      	mov	r0, r3
 8005aee:	3708      	adds	r7, #8
 8005af0:	46bd      	mov	sp, r7
 8005af2:	bd80      	pop	{r7, pc}

08005af4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b088      	sub	sp, #32
 8005af8:	af02      	add	r7, sp, #8
 8005afa:	60f8      	str	r0, [r7, #12]
 8005afc:	607a      	str	r2, [r7, #4]
 8005afe:	461a      	mov	r2, r3
 8005b00:	460b      	mov	r3, r1
 8005b02:	817b      	strh	r3, [r7, #10]
 8005b04:	4613      	mov	r3, r2
 8005b06:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005b0e:	b2db      	uxtb	r3, r3
 8005b10:	2b20      	cmp	r3, #32
 8005b12:	f040 80da 	bne.w	8005cca <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005b1c:	2b01      	cmp	r3, #1
 8005b1e:	d101      	bne.n	8005b24 <HAL_I2C_Master_Transmit+0x30>
 8005b20:	2302      	movs	r3, #2
 8005b22:	e0d3      	b.n	8005ccc <HAL_I2C_Master_Transmit+0x1d8>
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	2201      	movs	r2, #1
 8005b28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005b2c:	f7fd ff10 	bl	8003950 <HAL_GetTick>
 8005b30:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005b32:	697b      	ldr	r3, [r7, #20]
 8005b34:	9300      	str	r3, [sp, #0]
 8005b36:	2319      	movs	r3, #25
 8005b38:	2201      	movs	r2, #1
 8005b3a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005b3e:	68f8      	ldr	r0, [r7, #12]
 8005b40:	f000 f9e6 	bl	8005f10 <I2C_WaitOnFlagUntilTimeout>
 8005b44:	4603      	mov	r3, r0
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d001      	beq.n	8005b4e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8005b4a:	2301      	movs	r3, #1
 8005b4c:	e0be      	b.n	8005ccc <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	2221      	movs	r2, #33	@ 0x21
 8005b52:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	2210      	movs	r2, #16
 8005b5a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	2200      	movs	r2, #0
 8005b62:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	687a      	ldr	r2, [r7, #4]
 8005b68:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	893a      	ldrh	r2, [r7, #8]
 8005b6e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	2200      	movs	r2, #0
 8005b74:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b7a:	b29b      	uxth	r3, r3
 8005b7c:	2bff      	cmp	r3, #255	@ 0xff
 8005b7e:	d90e      	bls.n	8005b9e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	22ff      	movs	r2, #255	@ 0xff
 8005b84:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b8a:	b2da      	uxtb	r2, r3
 8005b8c:	8979      	ldrh	r1, [r7, #10]
 8005b8e:	4b51      	ldr	r3, [pc, #324]	@ (8005cd4 <HAL_I2C_Master_Transmit+0x1e0>)
 8005b90:	9300      	str	r3, [sp, #0]
 8005b92:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005b96:	68f8      	ldr	r0, [r7, #12]
 8005b98:	f000 fbf6 	bl	8006388 <I2C_TransferConfig>
 8005b9c:	e06c      	b.n	8005c78 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ba2:	b29a      	uxth	r2, r3
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005bac:	b2da      	uxtb	r2, r3
 8005bae:	8979      	ldrh	r1, [r7, #10]
 8005bb0:	4b48      	ldr	r3, [pc, #288]	@ (8005cd4 <HAL_I2C_Master_Transmit+0x1e0>)
 8005bb2:	9300      	str	r3, [sp, #0]
 8005bb4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005bb8:	68f8      	ldr	r0, [r7, #12]
 8005bba:	f000 fbe5 	bl	8006388 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8005bbe:	e05b      	b.n	8005c78 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005bc0:	697a      	ldr	r2, [r7, #20]
 8005bc2:	6a39      	ldr	r1, [r7, #32]
 8005bc4:	68f8      	ldr	r0, [r7, #12]
 8005bc6:	f000 f9f2 	bl	8005fae <I2C_WaitOnTXISFlagUntilTimeout>
 8005bca:	4603      	mov	r3, r0
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d001      	beq.n	8005bd4 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8005bd0:	2301      	movs	r3, #1
 8005bd2:	e07b      	b.n	8005ccc <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bd8:	781a      	ldrb	r2, [r3, #0]
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005be4:	1c5a      	adds	r2, r3, #1
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005bee:	b29b      	uxth	r3, r3
 8005bf0:	3b01      	subs	r3, #1
 8005bf2:	b29a      	uxth	r2, r3
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005bfc:	3b01      	subs	r3, #1
 8005bfe:	b29a      	uxth	r2, r3
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c08:	b29b      	uxth	r3, r3
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d034      	beq.n	8005c78 <HAL_I2C_Master_Transmit+0x184>
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d130      	bne.n	8005c78 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005c16:	697b      	ldr	r3, [r7, #20]
 8005c18:	9300      	str	r3, [sp, #0]
 8005c1a:	6a3b      	ldr	r3, [r7, #32]
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	2180      	movs	r1, #128	@ 0x80
 8005c20:	68f8      	ldr	r0, [r7, #12]
 8005c22:	f000 f975 	bl	8005f10 <I2C_WaitOnFlagUntilTimeout>
 8005c26:	4603      	mov	r3, r0
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d001      	beq.n	8005c30 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8005c2c:	2301      	movs	r3, #1
 8005c2e:	e04d      	b.n	8005ccc <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c34:	b29b      	uxth	r3, r3
 8005c36:	2bff      	cmp	r3, #255	@ 0xff
 8005c38:	d90e      	bls.n	8005c58 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	22ff      	movs	r2, #255	@ 0xff
 8005c3e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c44:	b2da      	uxtb	r2, r3
 8005c46:	8979      	ldrh	r1, [r7, #10]
 8005c48:	2300      	movs	r3, #0
 8005c4a:	9300      	str	r3, [sp, #0]
 8005c4c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005c50:	68f8      	ldr	r0, [r7, #12]
 8005c52:	f000 fb99 	bl	8006388 <I2C_TransferConfig>
 8005c56:	e00f      	b.n	8005c78 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c5c:	b29a      	uxth	r2, r3
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c66:	b2da      	uxtb	r2, r3
 8005c68:	8979      	ldrh	r1, [r7, #10]
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	9300      	str	r3, [sp, #0]
 8005c6e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005c72:	68f8      	ldr	r0, [r7, #12]
 8005c74:	f000 fb88 	bl	8006388 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c7c:	b29b      	uxth	r3, r3
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d19e      	bne.n	8005bc0 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005c82:	697a      	ldr	r2, [r7, #20]
 8005c84:	6a39      	ldr	r1, [r7, #32]
 8005c86:	68f8      	ldr	r0, [r7, #12]
 8005c88:	f000 f9d8 	bl	800603c <I2C_WaitOnSTOPFlagUntilTimeout>
 8005c8c:	4603      	mov	r3, r0
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d001      	beq.n	8005c96 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8005c92:	2301      	movs	r3, #1
 8005c94:	e01a      	b.n	8005ccc <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	2220      	movs	r2, #32
 8005c9c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	6859      	ldr	r1, [r3, #4]
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	681a      	ldr	r2, [r3, #0]
 8005ca8:	4b0b      	ldr	r3, [pc, #44]	@ (8005cd8 <HAL_I2C_Master_Transmit+0x1e4>)
 8005caa:	400b      	ands	r3, r1
 8005cac:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	2220      	movs	r2, #32
 8005cb2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	2200      	movs	r2, #0
 8005cba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	e000      	b.n	8005ccc <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8005cca:	2302      	movs	r3, #2
  }
}
 8005ccc:	4618      	mov	r0, r3
 8005cce:	3718      	adds	r7, #24
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	bd80      	pop	{r7, pc}
 8005cd4:	80002000 	.word	0x80002000
 8005cd8:	fe00e800 	.word	0xfe00e800

08005cdc <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b088      	sub	sp, #32
 8005ce0:	af02      	add	r7, sp, #8
 8005ce2:	60f8      	str	r0, [r7, #12]
 8005ce4:	607a      	str	r2, [r7, #4]
 8005ce6:	461a      	mov	r2, r3
 8005ce8:	460b      	mov	r3, r1
 8005cea:	817b      	strh	r3, [r7, #10]
 8005cec:	4613      	mov	r3, r2
 8005cee:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005cf6:	b2db      	uxtb	r3, r3
 8005cf8:	2b20      	cmp	r3, #32
 8005cfa:	f040 80db 	bne.w	8005eb4 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005d04:	2b01      	cmp	r3, #1
 8005d06:	d101      	bne.n	8005d0c <HAL_I2C_Master_Receive+0x30>
 8005d08:	2302      	movs	r3, #2
 8005d0a:	e0d4      	b.n	8005eb6 <HAL_I2C_Master_Receive+0x1da>
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	2201      	movs	r2, #1
 8005d10:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005d14:	f7fd fe1c 	bl	8003950 <HAL_GetTick>
 8005d18:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005d1a:	697b      	ldr	r3, [r7, #20]
 8005d1c:	9300      	str	r3, [sp, #0]
 8005d1e:	2319      	movs	r3, #25
 8005d20:	2201      	movs	r2, #1
 8005d22:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005d26:	68f8      	ldr	r0, [r7, #12]
 8005d28:	f000 f8f2 	bl	8005f10 <I2C_WaitOnFlagUntilTimeout>
 8005d2c:	4603      	mov	r3, r0
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d001      	beq.n	8005d36 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8005d32:	2301      	movs	r3, #1
 8005d34:	e0bf      	b.n	8005eb6 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	2222      	movs	r2, #34	@ 0x22
 8005d3a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	2210      	movs	r2, #16
 8005d42:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	2200      	movs	r2, #0
 8005d4a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	687a      	ldr	r2, [r7, #4]
 8005d50:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	893a      	ldrh	r2, [r7, #8]
 8005d56:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d62:	b29b      	uxth	r3, r3
 8005d64:	2bff      	cmp	r3, #255	@ 0xff
 8005d66:	d90e      	bls.n	8005d86 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	22ff      	movs	r2, #255	@ 0xff
 8005d6c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d72:	b2da      	uxtb	r2, r3
 8005d74:	8979      	ldrh	r1, [r7, #10]
 8005d76:	4b52      	ldr	r3, [pc, #328]	@ (8005ec0 <HAL_I2C_Master_Receive+0x1e4>)
 8005d78:	9300      	str	r3, [sp, #0]
 8005d7a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005d7e:	68f8      	ldr	r0, [r7, #12]
 8005d80:	f000 fb02 	bl	8006388 <I2C_TransferConfig>
 8005d84:	e06d      	b.n	8005e62 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d8a:	b29a      	uxth	r2, r3
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d94:	b2da      	uxtb	r2, r3
 8005d96:	8979      	ldrh	r1, [r7, #10]
 8005d98:	4b49      	ldr	r3, [pc, #292]	@ (8005ec0 <HAL_I2C_Master_Receive+0x1e4>)
 8005d9a:	9300      	str	r3, [sp, #0]
 8005d9c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005da0:	68f8      	ldr	r0, [r7, #12]
 8005da2:	f000 faf1 	bl	8006388 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8005da6:	e05c      	b.n	8005e62 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005da8:	697a      	ldr	r2, [r7, #20]
 8005daa:	6a39      	ldr	r1, [r7, #32]
 8005dac:	68f8      	ldr	r0, [r7, #12]
 8005dae:	f000 f989 	bl	80060c4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005db2:	4603      	mov	r3, r0
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d001      	beq.n	8005dbc <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8005db8:	2301      	movs	r3, #1
 8005dba:	e07c      	b.n	8005eb6 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dc6:	b2d2      	uxtb	r2, r2
 8005dc8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dce:	1c5a      	adds	r2, r3, #1
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005dd8:	3b01      	subs	r3, #1
 8005dda:	b29a      	uxth	r2, r3
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005de4:	b29b      	uxth	r3, r3
 8005de6:	3b01      	subs	r3, #1
 8005de8:	b29a      	uxth	r2, r3
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005df2:	b29b      	uxth	r3, r3
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d034      	beq.n	8005e62 <HAL_I2C_Master_Receive+0x186>
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d130      	bne.n	8005e62 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005e00:	697b      	ldr	r3, [r7, #20]
 8005e02:	9300      	str	r3, [sp, #0]
 8005e04:	6a3b      	ldr	r3, [r7, #32]
 8005e06:	2200      	movs	r2, #0
 8005e08:	2180      	movs	r1, #128	@ 0x80
 8005e0a:	68f8      	ldr	r0, [r7, #12]
 8005e0c:	f000 f880 	bl	8005f10 <I2C_WaitOnFlagUntilTimeout>
 8005e10:	4603      	mov	r3, r0
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d001      	beq.n	8005e1a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8005e16:	2301      	movs	r3, #1
 8005e18:	e04d      	b.n	8005eb6 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e1e:	b29b      	uxth	r3, r3
 8005e20:	2bff      	cmp	r3, #255	@ 0xff
 8005e22:	d90e      	bls.n	8005e42 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	22ff      	movs	r2, #255	@ 0xff
 8005e28:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e2e:	b2da      	uxtb	r2, r3
 8005e30:	8979      	ldrh	r1, [r7, #10]
 8005e32:	2300      	movs	r3, #0
 8005e34:	9300      	str	r3, [sp, #0]
 8005e36:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005e3a:	68f8      	ldr	r0, [r7, #12]
 8005e3c:	f000 faa4 	bl	8006388 <I2C_TransferConfig>
 8005e40:	e00f      	b.n	8005e62 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e46:	b29a      	uxth	r2, r3
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e50:	b2da      	uxtb	r2, r3
 8005e52:	8979      	ldrh	r1, [r7, #10]
 8005e54:	2300      	movs	r3, #0
 8005e56:	9300      	str	r3, [sp, #0]
 8005e58:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005e5c:	68f8      	ldr	r0, [r7, #12]
 8005e5e:	f000 fa93 	bl	8006388 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e66:	b29b      	uxth	r3, r3
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d19d      	bne.n	8005da8 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005e6c:	697a      	ldr	r2, [r7, #20]
 8005e6e:	6a39      	ldr	r1, [r7, #32]
 8005e70:	68f8      	ldr	r0, [r7, #12]
 8005e72:	f000 f8e3 	bl	800603c <I2C_WaitOnSTOPFlagUntilTimeout>
 8005e76:	4603      	mov	r3, r0
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d001      	beq.n	8005e80 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8005e7c:	2301      	movs	r3, #1
 8005e7e:	e01a      	b.n	8005eb6 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	2220      	movs	r2, #32
 8005e86:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	6859      	ldr	r1, [r3, #4]
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	681a      	ldr	r2, [r3, #0]
 8005e92:	4b0c      	ldr	r3, [pc, #48]	@ (8005ec4 <HAL_I2C_Master_Receive+0x1e8>)
 8005e94:	400b      	ands	r3, r1
 8005e96:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	2220      	movs	r2, #32
 8005e9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	2200      	movs	r2, #0
 8005eac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	e000      	b.n	8005eb6 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8005eb4:	2302      	movs	r3, #2
  }
}
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	3718      	adds	r7, #24
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	bd80      	pop	{r7, pc}
 8005ebe:	bf00      	nop
 8005ec0:	80002400 	.word	0x80002400
 8005ec4:	fe00e800 	.word	0xfe00e800

08005ec8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005ec8:	b480      	push	{r7}
 8005eca:	b083      	sub	sp, #12
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	699b      	ldr	r3, [r3, #24]
 8005ed6:	f003 0302 	and.w	r3, r3, #2
 8005eda:	2b02      	cmp	r3, #2
 8005edc:	d103      	bne.n	8005ee6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	699b      	ldr	r3, [r3, #24]
 8005eec:	f003 0301 	and.w	r3, r3, #1
 8005ef0:	2b01      	cmp	r3, #1
 8005ef2:	d007      	beq.n	8005f04 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	699a      	ldr	r2, [r3, #24]
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f042 0201 	orr.w	r2, r2, #1
 8005f02:	619a      	str	r2, [r3, #24]
  }
}
 8005f04:	bf00      	nop
 8005f06:	370c      	adds	r7, #12
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0e:	4770      	bx	lr

08005f10 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005f10:	b580      	push	{r7, lr}
 8005f12:	b084      	sub	sp, #16
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	60f8      	str	r0, [r7, #12]
 8005f18:	60b9      	str	r1, [r7, #8]
 8005f1a:	603b      	str	r3, [r7, #0]
 8005f1c:	4613      	mov	r3, r2
 8005f1e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005f20:	e031      	b.n	8005f86 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f28:	d02d      	beq.n	8005f86 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f2a:	f7fd fd11 	bl	8003950 <HAL_GetTick>
 8005f2e:	4602      	mov	r2, r0
 8005f30:	69bb      	ldr	r3, [r7, #24]
 8005f32:	1ad3      	subs	r3, r2, r3
 8005f34:	683a      	ldr	r2, [r7, #0]
 8005f36:	429a      	cmp	r2, r3
 8005f38:	d302      	bcc.n	8005f40 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d122      	bne.n	8005f86 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	699a      	ldr	r2, [r3, #24]
 8005f46:	68bb      	ldr	r3, [r7, #8]
 8005f48:	4013      	ands	r3, r2
 8005f4a:	68ba      	ldr	r2, [r7, #8]
 8005f4c:	429a      	cmp	r2, r3
 8005f4e:	bf0c      	ite	eq
 8005f50:	2301      	moveq	r3, #1
 8005f52:	2300      	movne	r3, #0
 8005f54:	b2db      	uxtb	r3, r3
 8005f56:	461a      	mov	r2, r3
 8005f58:	79fb      	ldrb	r3, [r7, #7]
 8005f5a:	429a      	cmp	r2, r3
 8005f5c:	d113      	bne.n	8005f86 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f62:	f043 0220 	orr.w	r2, r3, #32
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	2220      	movs	r2, #32
 8005f6e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	2200      	movs	r2, #0
 8005f76:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8005f82:	2301      	movs	r3, #1
 8005f84:	e00f      	b.n	8005fa6 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	699a      	ldr	r2, [r3, #24]
 8005f8c:	68bb      	ldr	r3, [r7, #8]
 8005f8e:	4013      	ands	r3, r2
 8005f90:	68ba      	ldr	r2, [r7, #8]
 8005f92:	429a      	cmp	r2, r3
 8005f94:	bf0c      	ite	eq
 8005f96:	2301      	moveq	r3, #1
 8005f98:	2300      	movne	r3, #0
 8005f9a:	b2db      	uxtb	r3, r3
 8005f9c:	461a      	mov	r2, r3
 8005f9e:	79fb      	ldrb	r3, [r7, #7]
 8005fa0:	429a      	cmp	r2, r3
 8005fa2:	d0be      	beq.n	8005f22 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005fa4:	2300      	movs	r3, #0
}
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	3710      	adds	r7, #16
 8005faa:	46bd      	mov	sp, r7
 8005fac:	bd80      	pop	{r7, pc}

08005fae <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005fae:	b580      	push	{r7, lr}
 8005fb0:	b084      	sub	sp, #16
 8005fb2:	af00      	add	r7, sp, #0
 8005fb4:	60f8      	str	r0, [r7, #12]
 8005fb6:	60b9      	str	r1, [r7, #8]
 8005fb8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005fba:	e033      	b.n	8006024 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005fbc:	687a      	ldr	r2, [r7, #4]
 8005fbe:	68b9      	ldr	r1, [r7, #8]
 8005fc0:	68f8      	ldr	r0, [r7, #12]
 8005fc2:	f000 f901 	bl	80061c8 <I2C_IsErrorOccurred>
 8005fc6:	4603      	mov	r3, r0
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d001      	beq.n	8005fd0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005fcc:	2301      	movs	r3, #1
 8005fce:	e031      	b.n	8006034 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005fd0:	68bb      	ldr	r3, [r7, #8]
 8005fd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fd6:	d025      	beq.n	8006024 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005fd8:	f7fd fcba 	bl	8003950 <HAL_GetTick>
 8005fdc:	4602      	mov	r2, r0
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	1ad3      	subs	r3, r2, r3
 8005fe2:	68ba      	ldr	r2, [r7, #8]
 8005fe4:	429a      	cmp	r2, r3
 8005fe6:	d302      	bcc.n	8005fee <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005fe8:	68bb      	ldr	r3, [r7, #8]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d11a      	bne.n	8006024 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	699b      	ldr	r3, [r3, #24]
 8005ff4:	f003 0302 	and.w	r3, r3, #2
 8005ff8:	2b02      	cmp	r3, #2
 8005ffa:	d013      	beq.n	8006024 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006000:	f043 0220 	orr.w	r2, r3, #32
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	2220      	movs	r2, #32
 800600c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	2200      	movs	r2, #0
 8006014:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	2200      	movs	r2, #0
 800601c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8006020:	2301      	movs	r3, #1
 8006022:	e007      	b.n	8006034 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	699b      	ldr	r3, [r3, #24]
 800602a:	f003 0302 	and.w	r3, r3, #2
 800602e:	2b02      	cmp	r3, #2
 8006030:	d1c4      	bne.n	8005fbc <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006032:	2300      	movs	r3, #0
}
 8006034:	4618      	mov	r0, r3
 8006036:	3710      	adds	r7, #16
 8006038:	46bd      	mov	sp, r7
 800603a:	bd80      	pop	{r7, pc}

0800603c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800603c:	b580      	push	{r7, lr}
 800603e:	b084      	sub	sp, #16
 8006040:	af00      	add	r7, sp, #0
 8006042:	60f8      	str	r0, [r7, #12]
 8006044:	60b9      	str	r1, [r7, #8]
 8006046:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006048:	e02f      	b.n	80060aa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800604a:	687a      	ldr	r2, [r7, #4]
 800604c:	68b9      	ldr	r1, [r7, #8]
 800604e:	68f8      	ldr	r0, [r7, #12]
 8006050:	f000 f8ba 	bl	80061c8 <I2C_IsErrorOccurred>
 8006054:	4603      	mov	r3, r0
 8006056:	2b00      	cmp	r3, #0
 8006058:	d001      	beq.n	800605e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800605a:	2301      	movs	r3, #1
 800605c:	e02d      	b.n	80060ba <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800605e:	f7fd fc77 	bl	8003950 <HAL_GetTick>
 8006062:	4602      	mov	r2, r0
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	1ad3      	subs	r3, r2, r3
 8006068:	68ba      	ldr	r2, [r7, #8]
 800606a:	429a      	cmp	r2, r3
 800606c:	d302      	bcc.n	8006074 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800606e:	68bb      	ldr	r3, [r7, #8]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d11a      	bne.n	80060aa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	699b      	ldr	r3, [r3, #24]
 800607a:	f003 0320 	and.w	r3, r3, #32
 800607e:	2b20      	cmp	r3, #32
 8006080:	d013      	beq.n	80060aa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006086:	f043 0220 	orr.w	r2, r3, #32
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	2220      	movs	r2, #32
 8006092:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	2200      	movs	r2, #0
 800609a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	2200      	movs	r2, #0
 80060a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80060a6:	2301      	movs	r3, #1
 80060a8:	e007      	b.n	80060ba <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	699b      	ldr	r3, [r3, #24]
 80060b0:	f003 0320 	and.w	r3, r3, #32
 80060b4:	2b20      	cmp	r3, #32
 80060b6:	d1c8      	bne.n	800604a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80060b8:	2300      	movs	r3, #0
}
 80060ba:	4618      	mov	r0, r3
 80060bc:	3710      	adds	r7, #16
 80060be:	46bd      	mov	sp, r7
 80060c0:	bd80      	pop	{r7, pc}
	...

080060c4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80060c4:	b580      	push	{r7, lr}
 80060c6:	b084      	sub	sp, #16
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	60f8      	str	r0, [r7, #12]
 80060cc:	60b9      	str	r1, [r7, #8]
 80060ce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80060d0:	e06b      	b.n	80061aa <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80060d2:	687a      	ldr	r2, [r7, #4]
 80060d4:	68b9      	ldr	r1, [r7, #8]
 80060d6:	68f8      	ldr	r0, [r7, #12]
 80060d8:	f000 f876 	bl	80061c8 <I2C_IsErrorOccurred>
 80060dc:	4603      	mov	r3, r0
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d001      	beq.n	80060e6 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80060e2:	2301      	movs	r3, #1
 80060e4:	e069      	b.n	80061ba <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	699b      	ldr	r3, [r3, #24]
 80060ec:	f003 0320 	and.w	r3, r3, #32
 80060f0:	2b20      	cmp	r3, #32
 80060f2:	d138      	bne.n	8006166 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	699b      	ldr	r3, [r3, #24]
 80060fa:	f003 0304 	and.w	r3, r3, #4
 80060fe:	2b04      	cmp	r3, #4
 8006100:	d105      	bne.n	800610e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006106:	2b00      	cmp	r3, #0
 8006108:	d001      	beq.n	800610e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800610a:	2300      	movs	r3, #0
 800610c:	e055      	b.n	80061ba <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	699b      	ldr	r3, [r3, #24]
 8006114:	f003 0310 	and.w	r3, r3, #16
 8006118:	2b10      	cmp	r3, #16
 800611a:	d107      	bne.n	800612c <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	2210      	movs	r2, #16
 8006122:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	2204      	movs	r2, #4
 8006128:	645a      	str	r2, [r3, #68]	@ 0x44
 800612a:	e002      	b.n	8006132 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	2200      	movs	r2, #0
 8006130:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	2220      	movs	r2, #32
 8006138:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	6859      	ldr	r1, [r3, #4]
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	681a      	ldr	r2, [r3, #0]
 8006144:	4b1f      	ldr	r3, [pc, #124]	@ (80061c4 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 8006146:	400b      	ands	r3, r1
 8006148:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	2220      	movs	r2, #32
 800614e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	2200      	movs	r2, #0
 8006156:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	2200      	movs	r2, #0
 800615e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8006162:	2301      	movs	r3, #1
 8006164:	e029      	b.n	80061ba <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006166:	f7fd fbf3 	bl	8003950 <HAL_GetTick>
 800616a:	4602      	mov	r2, r0
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	1ad3      	subs	r3, r2, r3
 8006170:	68ba      	ldr	r2, [r7, #8]
 8006172:	429a      	cmp	r2, r3
 8006174:	d302      	bcc.n	800617c <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8006176:	68bb      	ldr	r3, [r7, #8]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d116      	bne.n	80061aa <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	699b      	ldr	r3, [r3, #24]
 8006182:	f003 0304 	and.w	r3, r3, #4
 8006186:	2b04      	cmp	r3, #4
 8006188:	d00f      	beq.n	80061aa <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800618e:	f043 0220 	orr.w	r2, r3, #32
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	2220      	movs	r2, #32
 800619a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	2200      	movs	r2, #0
 80061a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80061a6:	2301      	movs	r3, #1
 80061a8:	e007      	b.n	80061ba <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	699b      	ldr	r3, [r3, #24]
 80061b0:	f003 0304 	and.w	r3, r3, #4
 80061b4:	2b04      	cmp	r3, #4
 80061b6:	d18c      	bne.n	80060d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80061b8:	2300      	movs	r3, #0
}
 80061ba:	4618      	mov	r0, r3
 80061bc:	3710      	adds	r7, #16
 80061be:	46bd      	mov	sp, r7
 80061c0:	bd80      	pop	{r7, pc}
 80061c2:	bf00      	nop
 80061c4:	fe00e800 	.word	0xfe00e800

080061c8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80061c8:	b580      	push	{r7, lr}
 80061ca:	b08a      	sub	sp, #40	@ 0x28
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	60f8      	str	r0, [r7, #12]
 80061d0:	60b9      	str	r1, [r7, #8]
 80061d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80061d4:	2300      	movs	r3, #0
 80061d6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	699b      	ldr	r3, [r3, #24]
 80061e0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80061e2:	2300      	movs	r3, #0
 80061e4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80061ea:	69bb      	ldr	r3, [r7, #24]
 80061ec:	f003 0310 	and.w	r3, r3, #16
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d068      	beq.n	80062c6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	2210      	movs	r2, #16
 80061fa:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80061fc:	e049      	b.n	8006292 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80061fe:	68bb      	ldr	r3, [r7, #8]
 8006200:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006204:	d045      	beq.n	8006292 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006206:	f7fd fba3 	bl	8003950 <HAL_GetTick>
 800620a:	4602      	mov	r2, r0
 800620c:	69fb      	ldr	r3, [r7, #28]
 800620e:	1ad3      	subs	r3, r2, r3
 8006210:	68ba      	ldr	r2, [r7, #8]
 8006212:	429a      	cmp	r2, r3
 8006214:	d302      	bcc.n	800621c <I2C_IsErrorOccurred+0x54>
 8006216:	68bb      	ldr	r3, [r7, #8]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d13a      	bne.n	8006292 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	685b      	ldr	r3, [r3, #4]
 8006222:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006226:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800622e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	699b      	ldr	r3, [r3, #24]
 8006236:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800623a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800623e:	d121      	bne.n	8006284 <I2C_IsErrorOccurred+0xbc>
 8006240:	697b      	ldr	r3, [r7, #20]
 8006242:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006246:	d01d      	beq.n	8006284 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8006248:	7cfb      	ldrb	r3, [r7, #19]
 800624a:	2b20      	cmp	r3, #32
 800624c:	d01a      	beq.n	8006284 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	685a      	ldr	r2, [r3, #4]
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800625c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800625e:	f7fd fb77 	bl	8003950 <HAL_GetTick>
 8006262:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006264:	e00e      	b.n	8006284 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8006266:	f7fd fb73 	bl	8003950 <HAL_GetTick>
 800626a:	4602      	mov	r2, r0
 800626c:	69fb      	ldr	r3, [r7, #28]
 800626e:	1ad3      	subs	r3, r2, r3
 8006270:	2b19      	cmp	r3, #25
 8006272:	d907      	bls.n	8006284 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8006274:	6a3b      	ldr	r3, [r7, #32]
 8006276:	f043 0320 	orr.w	r3, r3, #32
 800627a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800627c:	2301      	movs	r3, #1
 800627e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8006282:	e006      	b.n	8006292 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	699b      	ldr	r3, [r3, #24]
 800628a:	f003 0320 	and.w	r3, r3, #32
 800628e:	2b20      	cmp	r3, #32
 8006290:	d1e9      	bne.n	8006266 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	699b      	ldr	r3, [r3, #24]
 8006298:	f003 0320 	and.w	r3, r3, #32
 800629c:	2b20      	cmp	r3, #32
 800629e:	d003      	beq.n	80062a8 <I2C_IsErrorOccurred+0xe0>
 80062a0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d0aa      	beq.n	80061fe <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80062a8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d103      	bne.n	80062b8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	2220      	movs	r2, #32
 80062b6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80062b8:	6a3b      	ldr	r3, [r7, #32]
 80062ba:	f043 0304 	orr.w	r3, r3, #4
 80062be:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80062c0:	2301      	movs	r3, #1
 80062c2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	699b      	ldr	r3, [r3, #24]
 80062cc:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80062ce:	69bb      	ldr	r3, [r7, #24]
 80062d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d00b      	beq.n	80062f0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80062d8:	6a3b      	ldr	r3, [r7, #32]
 80062da:	f043 0301 	orr.w	r3, r3, #1
 80062de:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80062e8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80062ea:	2301      	movs	r3, #1
 80062ec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80062f0:	69bb      	ldr	r3, [r7, #24]
 80062f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d00b      	beq.n	8006312 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80062fa:	6a3b      	ldr	r3, [r7, #32]
 80062fc:	f043 0308 	orr.w	r3, r3, #8
 8006300:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800630a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800630c:	2301      	movs	r3, #1
 800630e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006312:	69bb      	ldr	r3, [r7, #24]
 8006314:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006318:	2b00      	cmp	r3, #0
 800631a:	d00b      	beq.n	8006334 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800631c:	6a3b      	ldr	r3, [r7, #32]
 800631e:	f043 0302 	orr.w	r3, r3, #2
 8006322:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800632c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800632e:	2301      	movs	r3, #1
 8006330:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8006334:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006338:	2b00      	cmp	r3, #0
 800633a:	d01c      	beq.n	8006376 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800633c:	68f8      	ldr	r0, [r7, #12]
 800633e:	f7ff fdc3 	bl	8005ec8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	6859      	ldr	r1, [r3, #4]
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	681a      	ldr	r2, [r3, #0]
 800634c:	4b0d      	ldr	r3, [pc, #52]	@ (8006384 <I2C_IsErrorOccurred+0x1bc>)
 800634e:	400b      	ands	r3, r1
 8006350:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006356:	6a3b      	ldr	r3, [r7, #32]
 8006358:	431a      	orrs	r2, r3
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	2220      	movs	r2, #32
 8006362:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	2200      	movs	r2, #0
 800636a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	2200      	movs	r2, #0
 8006372:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8006376:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800637a:	4618      	mov	r0, r3
 800637c:	3728      	adds	r7, #40	@ 0x28
 800637e:	46bd      	mov	sp, r7
 8006380:	bd80      	pop	{r7, pc}
 8006382:	bf00      	nop
 8006384:	fe00e800 	.word	0xfe00e800

08006388 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006388:	b480      	push	{r7}
 800638a:	b087      	sub	sp, #28
 800638c:	af00      	add	r7, sp, #0
 800638e:	60f8      	str	r0, [r7, #12]
 8006390:	607b      	str	r3, [r7, #4]
 8006392:	460b      	mov	r3, r1
 8006394:	817b      	strh	r3, [r7, #10]
 8006396:	4613      	mov	r3, r2
 8006398:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800639a:	897b      	ldrh	r3, [r7, #10]
 800639c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80063a0:	7a7b      	ldrb	r3, [r7, #9]
 80063a2:	041b      	lsls	r3, r3, #16
 80063a4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80063a8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80063ae:	6a3b      	ldr	r3, [r7, #32]
 80063b0:	4313      	orrs	r3, r2
 80063b2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80063b6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	685a      	ldr	r2, [r3, #4]
 80063be:	6a3b      	ldr	r3, [r7, #32]
 80063c0:	0d5b      	lsrs	r3, r3, #21
 80063c2:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80063c6:	4b08      	ldr	r3, [pc, #32]	@ (80063e8 <I2C_TransferConfig+0x60>)
 80063c8:	430b      	orrs	r3, r1
 80063ca:	43db      	mvns	r3, r3
 80063cc:	ea02 0103 	and.w	r1, r2, r3
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	697a      	ldr	r2, [r7, #20]
 80063d6:	430a      	orrs	r2, r1
 80063d8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80063da:	bf00      	nop
 80063dc:	371c      	adds	r7, #28
 80063de:	46bd      	mov	sp, r7
 80063e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e4:	4770      	bx	lr
 80063e6:	bf00      	nop
 80063e8:	03ff63ff 	.word	0x03ff63ff

080063ec <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80063ec:	b480      	push	{r7}
 80063ee:	b083      	sub	sp, #12
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
 80063f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80063fc:	b2db      	uxtb	r3, r3
 80063fe:	2b20      	cmp	r3, #32
 8006400:	d138      	bne.n	8006474 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006408:	2b01      	cmp	r3, #1
 800640a:	d101      	bne.n	8006410 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800640c:	2302      	movs	r3, #2
 800640e:	e032      	b.n	8006476 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2201      	movs	r2, #1
 8006414:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2224      	movs	r2, #36	@ 0x24
 800641c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	681a      	ldr	r2, [r3, #0]
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f022 0201 	bic.w	r2, r2, #1
 800642e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	681a      	ldr	r2, [r3, #0]
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800643e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	6819      	ldr	r1, [r3, #0]
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	683a      	ldr	r2, [r7, #0]
 800644c:	430a      	orrs	r2, r1
 800644e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	681a      	ldr	r2, [r3, #0]
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f042 0201 	orr.w	r2, r2, #1
 800645e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2220      	movs	r2, #32
 8006464:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2200      	movs	r2, #0
 800646c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006470:	2300      	movs	r3, #0
 8006472:	e000      	b.n	8006476 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006474:	2302      	movs	r3, #2
  }
}
 8006476:	4618      	mov	r0, r3
 8006478:	370c      	adds	r7, #12
 800647a:	46bd      	mov	sp, r7
 800647c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006480:	4770      	bx	lr

08006482 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006482:	b480      	push	{r7}
 8006484:	b085      	sub	sp, #20
 8006486:	af00      	add	r7, sp, #0
 8006488:	6078      	str	r0, [r7, #4]
 800648a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006492:	b2db      	uxtb	r3, r3
 8006494:	2b20      	cmp	r3, #32
 8006496:	d139      	bne.n	800650c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800649e:	2b01      	cmp	r3, #1
 80064a0:	d101      	bne.n	80064a6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80064a2:	2302      	movs	r3, #2
 80064a4:	e033      	b.n	800650e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	2201      	movs	r2, #1
 80064aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	2224      	movs	r2, #36	@ 0x24
 80064b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	681a      	ldr	r2, [r3, #0]
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f022 0201 	bic.w	r2, r2, #1
 80064c4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80064d4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	021b      	lsls	r3, r3, #8
 80064da:	68fa      	ldr	r2, [r7, #12]
 80064dc:	4313      	orrs	r3, r2
 80064de:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	68fa      	ldr	r2, [r7, #12]
 80064e6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	681a      	ldr	r2, [r3, #0]
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f042 0201 	orr.w	r2, r2, #1
 80064f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2220      	movs	r2, #32
 80064fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2200      	movs	r2, #0
 8006504:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006508:	2300      	movs	r3, #0
 800650a:	e000      	b.n	800650e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800650c:	2302      	movs	r3, #2
  }
}
 800650e:	4618      	mov	r0, r3
 8006510:	3714      	adds	r7, #20
 8006512:	46bd      	mov	sp, r7
 8006514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006518:	4770      	bx	lr
	...

0800651c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800651c:	b580      	push	{r7, lr}
 800651e:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8006522:	af00      	add	r7, sp, #0
 8006524:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006528:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800652c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800652e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006532:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d102      	bne.n	8006542 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 800653c:	2301      	movs	r3, #1
 800653e:	f001 b823 	b.w	8007588 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006542:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006546:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	f003 0301 	and.w	r3, r3, #1
 8006552:	2b00      	cmp	r3, #0
 8006554:	f000 817d 	beq.w	8006852 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8006558:	4bbc      	ldr	r3, [pc, #752]	@ (800684c <HAL_RCC_OscConfig+0x330>)
 800655a:	685b      	ldr	r3, [r3, #4]
 800655c:	f003 030c 	and.w	r3, r3, #12
 8006560:	2b04      	cmp	r3, #4
 8006562:	d00c      	beq.n	800657e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006564:	4bb9      	ldr	r3, [pc, #740]	@ (800684c <HAL_RCC_OscConfig+0x330>)
 8006566:	685b      	ldr	r3, [r3, #4]
 8006568:	f003 030c 	and.w	r3, r3, #12
 800656c:	2b08      	cmp	r3, #8
 800656e:	d15c      	bne.n	800662a <HAL_RCC_OscConfig+0x10e>
 8006570:	4bb6      	ldr	r3, [pc, #728]	@ (800684c <HAL_RCC_OscConfig+0x330>)
 8006572:	685b      	ldr	r3, [r3, #4]
 8006574:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006578:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800657c:	d155      	bne.n	800662a <HAL_RCC_OscConfig+0x10e>
 800657e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8006582:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006586:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 800658a:	fa93 f3a3 	rbit	r3, r3
 800658e:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8006592:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006596:	fab3 f383 	clz	r3, r3
 800659a:	b2db      	uxtb	r3, r3
 800659c:	095b      	lsrs	r3, r3, #5
 800659e:	b2db      	uxtb	r3, r3
 80065a0:	f043 0301 	orr.w	r3, r3, #1
 80065a4:	b2db      	uxtb	r3, r3
 80065a6:	2b01      	cmp	r3, #1
 80065a8:	d102      	bne.n	80065b0 <HAL_RCC_OscConfig+0x94>
 80065aa:	4ba8      	ldr	r3, [pc, #672]	@ (800684c <HAL_RCC_OscConfig+0x330>)
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	e015      	b.n	80065dc <HAL_RCC_OscConfig+0xc0>
 80065b0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80065b4:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80065b8:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 80065bc:	fa93 f3a3 	rbit	r3, r3
 80065c0:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 80065c4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80065c8:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 80065cc:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 80065d0:	fa93 f3a3 	rbit	r3, r3
 80065d4:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 80065d8:	4b9c      	ldr	r3, [pc, #624]	@ (800684c <HAL_RCC_OscConfig+0x330>)
 80065da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065dc:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80065e0:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 80065e4:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 80065e8:	fa92 f2a2 	rbit	r2, r2
 80065ec:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 80065f0:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 80065f4:	fab2 f282 	clz	r2, r2
 80065f8:	b2d2      	uxtb	r2, r2
 80065fa:	f042 0220 	orr.w	r2, r2, #32
 80065fe:	b2d2      	uxtb	r2, r2
 8006600:	f002 021f 	and.w	r2, r2, #31
 8006604:	2101      	movs	r1, #1
 8006606:	fa01 f202 	lsl.w	r2, r1, r2
 800660a:	4013      	ands	r3, r2
 800660c:	2b00      	cmp	r3, #0
 800660e:	f000 811f 	beq.w	8006850 <HAL_RCC_OscConfig+0x334>
 8006612:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006616:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	685b      	ldr	r3, [r3, #4]
 800661e:	2b00      	cmp	r3, #0
 8006620:	f040 8116 	bne.w	8006850 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8006624:	2301      	movs	r3, #1
 8006626:	f000 bfaf 	b.w	8007588 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800662a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800662e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	685b      	ldr	r3, [r3, #4]
 8006636:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800663a:	d106      	bne.n	800664a <HAL_RCC_OscConfig+0x12e>
 800663c:	4b83      	ldr	r3, [pc, #524]	@ (800684c <HAL_RCC_OscConfig+0x330>)
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	4a82      	ldr	r2, [pc, #520]	@ (800684c <HAL_RCC_OscConfig+0x330>)
 8006642:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006646:	6013      	str	r3, [r2, #0]
 8006648:	e036      	b.n	80066b8 <HAL_RCC_OscConfig+0x19c>
 800664a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800664e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	685b      	ldr	r3, [r3, #4]
 8006656:	2b00      	cmp	r3, #0
 8006658:	d10c      	bne.n	8006674 <HAL_RCC_OscConfig+0x158>
 800665a:	4b7c      	ldr	r3, [pc, #496]	@ (800684c <HAL_RCC_OscConfig+0x330>)
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	4a7b      	ldr	r2, [pc, #492]	@ (800684c <HAL_RCC_OscConfig+0x330>)
 8006660:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006664:	6013      	str	r3, [r2, #0]
 8006666:	4b79      	ldr	r3, [pc, #484]	@ (800684c <HAL_RCC_OscConfig+0x330>)
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	4a78      	ldr	r2, [pc, #480]	@ (800684c <HAL_RCC_OscConfig+0x330>)
 800666c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006670:	6013      	str	r3, [r2, #0]
 8006672:	e021      	b.n	80066b8 <HAL_RCC_OscConfig+0x19c>
 8006674:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006678:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	685b      	ldr	r3, [r3, #4]
 8006680:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006684:	d10c      	bne.n	80066a0 <HAL_RCC_OscConfig+0x184>
 8006686:	4b71      	ldr	r3, [pc, #452]	@ (800684c <HAL_RCC_OscConfig+0x330>)
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	4a70      	ldr	r2, [pc, #448]	@ (800684c <HAL_RCC_OscConfig+0x330>)
 800668c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006690:	6013      	str	r3, [r2, #0]
 8006692:	4b6e      	ldr	r3, [pc, #440]	@ (800684c <HAL_RCC_OscConfig+0x330>)
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	4a6d      	ldr	r2, [pc, #436]	@ (800684c <HAL_RCC_OscConfig+0x330>)
 8006698:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800669c:	6013      	str	r3, [r2, #0]
 800669e:	e00b      	b.n	80066b8 <HAL_RCC_OscConfig+0x19c>
 80066a0:	4b6a      	ldr	r3, [pc, #424]	@ (800684c <HAL_RCC_OscConfig+0x330>)
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	4a69      	ldr	r2, [pc, #420]	@ (800684c <HAL_RCC_OscConfig+0x330>)
 80066a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80066aa:	6013      	str	r3, [r2, #0]
 80066ac:	4b67      	ldr	r3, [pc, #412]	@ (800684c <HAL_RCC_OscConfig+0x330>)
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	4a66      	ldr	r2, [pc, #408]	@ (800684c <HAL_RCC_OscConfig+0x330>)
 80066b2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80066b6:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80066b8:	4b64      	ldr	r3, [pc, #400]	@ (800684c <HAL_RCC_OscConfig+0x330>)
 80066ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066bc:	f023 020f 	bic.w	r2, r3, #15
 80066c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80066c4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	689b      	ldr	r3, [r3, #8]
 80066cc:	495f      	ldr	r1, [pc, #380]	@ (800684c <HAL_RCC_OscConfig+0x330>)
 80066ce:	4313      	orrs	r3, r2
 80066d0:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80066d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80066d6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	685b      	ldr	r3, [r3, #4]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d059      	beq.n	8006796 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80066e2:	f7fd f935 	bl	8003950 <HAL_GetTick>
 80066e6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80066ea:	e00a      	b.n	8006702 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80066ec:	f7fd f930 	bl	8003950 <HAL_GetTick>
 80066f0:	4602      	mov	r2, r0
 80066f2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80066f6:	1ad3      	subs	r3, r2, r3
 80066f8:	2b64      	cmp	r3, #100	@ 0x64
 80066fa:	d902      	bls.n	8006702 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80066fc:	2303      	movs	r3, #3
 80066fe:	f000 bf43 	b.w	8007588 <HAL_RCC_OscConfig+0x106c>
 8006702:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8006706:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800670a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 800670e:	fa93 f3a3 	rbit	r3, r3
 8006712:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8006716:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800671a:	fab3 f383 	clz	r3, r3
 800671e:	b2db      	uxtb	r3, r3
 8006720:	095b      	lsrs	r3, r3, #5
 8006722:	b2db      	uxtb	r3, r3
 8006724:	f043 0301 	orr.w	r3, r3, #1
 8006728:	b2db      	uxtb	r3, r3
 800672a:	2b01      	cmp	r3, #1
 800672c:	d102      	bne.n	8006734 <HAL_RCC_OscConfig+0x218>
 800672e:	4b47      	ldr	r3, [pc, #284]	@ (800684c <HAL_RCC_OscConfig+0x330>)
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	e015      	b.n	8006760 <HAL_RCC_OscConfig+0x244>
 8006734:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8006738:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800673c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8006740:	fa93 f3a3 	rbit	r3, r3
 8006744:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8006748:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800674c:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8006750:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8006754:	fa93 f3a3 	rbit	r3, r3
 8006758:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 800675c:	4b3b      	ldr	r3, [pc, #236]	@ (800684c <HAL_RCC_OscConfig+0x330>)
 800675e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006760:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8006764:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8006768:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 800676c:	fa92 f2a2 	rbit	r2, r2
 8006770:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8006774:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8006778:	fab2 f282 	clz	r2, r2
 800677c:	b2d2      	uxtb	r2, r2
 800677e:	f042 0220 	orr.w	r2, r2, #32
 8006782:	b2d2      	uxtb	r2, r2
 8006784:	f002 021f 	and.w	r2, r2, #31
 8006788:	2101      	movs	r1, #1
 800678a:	fa01 f202 	lsl.w	r2, r1, r2
 800678e:	4013      	ands	r3, r2
 8006790:	2b00      	cmp	r3, #0
 8006792:	d0ab      	beq.n	80066ec <HAL_RCC_OscConfig+0x1d0>
 8006794:	e05d      	b.n	8006852 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006796:	f7fd f8db 	bl	8003950 <HAL_GetTick>
 800679a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800679e:	e00a      	b.n	80067b6 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80067a0:	f7fd f8d6 	bl	8003950 <HAL_GetTick>
 80067a4:	4602      	mov	r2, r0
 80067a6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80067aa:	1ad3      	subs	r3, r2, r3
 80067ac:	2b64      	cmp	r3, #100	@ 0x64
 80067ae:	d902      	bls.n	80067b6 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80067b0:	2303      	movs	r3, #3
 80067b2:	f000 bee9 	b.w	8007588 <HAL_RCC_OscConfig+0x106c>
 80067b6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80067ba:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80067be:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 80067c2:	fa93 f3a3 	rbit	r3, r3
 80067c6:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 80067ca:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80067ce:	fab3 f383 	clz	r3, r3
 80067d2:	b2db      	uxtb	r3, r3
 80067d4:	095b      	lsrs	r3, r3, #5
 80067d6:	b2db      	uxtb	r3, r3
 80067d8:	f043 0301 	orr.w	r3, r3, #1
 80067dc:	b2db      	uxtb	r3, r3
 80067de:	2b01      	cmp	r3, #1
 80067e0:	d102      	bne.n	80067e8 <HAL_RCC_OscConfig+0x2cc>
 80067e2:	4b1a      	ldr	r3, [pc, #104]	@ (800684c <HAL_RCC_OscConfig+0x330>)
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	e015      	b.n	8006814 <HAL_RCC_OscConfig+0x2f8>
 80067e8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80067ec:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80067f0:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 80067f4:	fa93 f3a3 	rbit	r3, r3
 80067f8:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 80067fc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8006800:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8006804:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8006808:	fa93 f3a3 	rbit	r3, r3
 800680c:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8006810:	4b0e      	ldr	r3, [pc, #56]	@ (800684c <HAL_RCC_OscConfig+0x330>)
 8006812:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006814:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8006818:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 800681c:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8006820:	fa92 f2a2 	rbit	r2, r2
 8006824:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8006828:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 800682c:	fab2 f282 	clz	r2, r2
 8006830:	b2d2      	uxtb	r2, r2
 8006832:	f042 0220 	orr.w	r2, r2, #32
 8006836:	b2d2      	uxtb	r2, r2
 8006838:	f002 021f 	and.w	r2, r2, #31
 800683c:	2101      	movs	r1, #1
 800683e:	fa01 f202 	lsl.w	r2, r1, r2
 8006842:	4013      	ands	r3, r2
 8006844:	2b00      	cmp	r3, #0
 8006846:	d1ab      	bne.n	80067a0 <HAL_RCC_OscConfig+0x284>
 8006848:	e003      	b.n	8006852 <HAL_RCC_OscConfig+0x336>
 800684a:	bf00      	nop
 800684c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006850:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006852:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006856:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f003 0302 	and.w	r3, r3, #2
 8006862:	2b00      	cmp	r3, #0
 8006864:	f000 817d 	beq.w	8006b62 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8006868:	4ba6      	ldr	r3, [pc, #664]	@ (8006b04 <HAL_RCC_OscConfig+0x5e8>)
 800686a:	685b      	ldr	r3, [r3, #4]
 800686c:	f003 030c 	and.w	r3, r3, #12
 8006870:	2b00      	cmp	r3, #0
 8006872:	d00b      	beq.n	800688c <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8006874:	4ba3      	ldr	r3, [pc, #652]	@ (8006b04 <HAL_RCC_OscConfig+0x5e8>)
 8006876:	685b      	ldr	r3, [r3, #4]
 8006878:	f003 030c 	and.w	r3, r3, #12
 800687c:	2b08      	cmp	r3, #8
 800687e:	d172      	bne.n	8006966 <HAL_RCC_OscConfig+0x44a>
 8006880:	4ba0      	ldr	r3, [pc, #640]	@ (8006b04 <HAL_RCC_OscConfig+0x5e8>)
 8006882:	685b      	ldr	r3, [r3, #4]
 8006884:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006888:	2b00      	cmp	r3, #0
 800688a:	d16c      	bne.n	8006966 <HAL_RCC_OscConfig+0x44a>
 800688c:	2302      	movs	r3, #2
 800688e:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006892:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8006896:	fa93 f3a3 	rbit	r3, r3
 800689a:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 800689e:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80068a2:	fab3 f383 	clz	r3, r3
 80068a6:	b2db      	uxtb	r3, r3
 80068a8:	095b      	lsrs	r3, r3, #5
 80068aa:	b2db      	uxtb	r3, r3
 80068ac:	f043 0301 	orr.w	r3, r3, #1
 80068b0:	b2db      	uxtb	r3, r3
 80068b2:	2b01      	cmp	r3, #1
 80068b4:	d102      	bne.n	80068bc <HAL_RCC_OscConfig+0x3a0>
 80068b6:	4b93      	ldr	r3, [pc, #588]	@ (8006b04 <HAL_RCC_OscConfig+0x5e8>)
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	e013      	b.n	80068e4 <HAL_RCC_OscConfig+0x3c8>
 80068bc:	2302      	movs	r3, #2
 80068be:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80068c2:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 80068c6:	fa93 f3a3 	rbit	r3, r3
 80068ca:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 80068ce:	2302      	movs	r3, #2
 80068d0:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 80068d4:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80068d8:	fa93 f3a3 	rbit	r3, r3
 80068dc:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 80068e0:	4b88      	ldr	r3, [pc, #544]	@ (8006b04 <HAL_RCC_OscConfig+0x5e8>)
 80068e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068e4:	2202      	movs	r2, #2
 80068e6:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 80068ea:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 80068ee:	fa92 f2a2 	rbit	r2, r2
 80068f2:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 80068f6:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 80068fa:	fab2 f282 	clz	r2, r2
 80068fe:	b2d2      	uxtb	r2, r2
 8006900:	f042 0220 	orr.w	r2, r2, #32
 8006904:	b2d2      	uxtb	r2, r2
 8006906:	f002 021f 	and.w	r2, r2, #31
 800690a:	2101      	movs	r1, #1
 800690c:	fa01 f202 	lsl.w	r2, r1, r2
 8006910:	4013      	ands	r3, r2
 8006912:	2b00      	cmp	r3, #0
 8006914:	d00a      	beq.n	800692c <HAL_RCC_OscConfig+0x410>
 8006916:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800691a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	691b      	ldr	r3, [r3, #16]
 8006922:	2b01      	cmp	r3, #1
 8006924:	d002      	beq.n	800692c <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8006926:	2301      	movs	r3, #1
 8006928:	f000 be2e 	b.w	8007588 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800692c:	4b75      	ldr	r3, [pc, #468]	@ (8006b04 <HAL_RCC_OscConfig+0x5e8>)
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006934:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006938:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	695b      	ldr	r3, [r3, #20]
 8006940:	21f8      	movs	r1, #248	@ 0xf8
 8006942:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006946:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 800694a:	fa91 f1a1 	rbit	r1, r1
 800694e:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8006952:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8006956:	fab1 f181 	clz	r1, r1
 800695a:	b2c9      	uxtb	r1, r1
 800695c:	408b      	lsls	r3, r1
 800695e:	4969      	ldr	r1, [pc, #420]	@ (8006b04 <HAL_RCC_OscConfig+0x5e8>)
 8006960:	4313      	orrs	r3, r2
 8006962:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006964:	e0fd      	b.n	8006b62 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006966:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800696a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	691b      	ldr	r3, [r3, #16]
 8006972:	2b00      	cmp	r3, #0
 8006974:	f000 8088 	beq.w	8006a88 <HAL_RCC_OscConfig+0x56c>
 8006978:	2301      	movs	r3, #1
 800697a:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800697e:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8006982:	fa93 f3a3 	rbit	r3, r3
 8006986:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 800698a:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800698e:	fab3 f383 	clz	r3, r3
 8006992:	b2db      	uxtb	r3, r3
 8006994:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8006998:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800699c:	009b      	lsls	r3, r3, #2
 800699e:	461a      	mov	r2, r3
 80069a0:	2301      	movs	r3, #1
 80069a2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80069a4:	f7fc ffd4 	bl	8003950 <HAL_GetTick>
 80069a8:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80069ac:	e00a      	b.n	80069c4 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80069ae:	f7fc ffcf 	bl	8003950 <HAL_GetTick>
 80069b2:	4602      	mov	r2, r0
 80069b4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80069b8:	1ad3      	subs	r3, r2, r3
 80069ba:	2b02      	cmp	r3, #2
 80069bc:	d902      	bls.n	80069c4 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80069be:	2303      	movs	r3, #3
 80069c0:	f000 bde2 	b.w	8007588 <HAL_RCC_OscConfig+0x106c>
 80069c4:	2302      	movs	r3, #2
 80069c6:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80069ca:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 80069ce:	fa93 f3a3 	rbit	r3, r3
 80069d2:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 80069d6:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80069da:	fab3 f383 	clz	r3, r3
 80069de:	b2db      	uxtb	r3, r3
 80069e0:	095b      	lsrs	r3, r3, #5
 80069e2:	b2db      	uxtb	r3, r3
 80069e4:	f043 0301 	orr.w	r3, r3, #1
 80069e8:	b2db      	uxtb	r3, r3
 80069ea:	2b01      	cmp	r3, #1
 80069ec:	d102      	bne.n	80069f4 <HAL_RCC_OscConfig+0x4d8>
 80069ee:	4b45      	ldr	r3, [pc, #276]	@ (8006b04 <HAL_RCC_OscConfig+0x5e8>)
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	e013      	b.n	8006a1c <HAL_RCC_OscConfig+0x500>
 80069f4:	2302      	movs	r3, #2
 80069f6:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80069fa:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 80069fe:	fa93 f3a3 	rbit	r3, r3
 8006a02:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8006a06:	2302      	movs	r3, #2
 8006a08:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8006a0c:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8006a10:	fa93 f3a3 	rbit	r3, r3
 8006a14:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8006a18:	4b3a      	ldr	r3, [pc, #232]	@ (8006b04 <HAL_RCC_OscConfig+0x5e8>)
 8006a1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a1c:	2202      	movs	r2, #2
 8006a1e:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8006a22:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8006a26:	fa92 f2a2 	rbit	r2, r2
 8006a2a:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8006a2e:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8006a32:	fab2 f282 	clz	r2, r2
 8006a36:	b2d2      	uxtb	r2, r2
 8006a38:	f042 0220 	orr.w	r2, r2, #32
 8006a3c:	b2d2      	uxtb	r2, r2
 8006a3e:	f002 021f 	and.w	r2, r2, #31
 8006a42:	2101      	movs	r1, #1
 8006a44:	fa01 f202 	lsl.w	r2, r1, r2
 8006a48:	4013      	ands	r3, r2
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d0af      	beq.n	80069ae <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a4e:	4b2d      	ldr	r3, [pc, #180]	@ (8006b04 <HAL_RCC_OscConfig+0x5e8>)
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006a56:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006a5a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	695b      	ldr	r3, [r3, #20]
 8006a62:	21f8      	movs	r1, #248	@ 0xf8
 8006a64:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a68:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8006a6c:	fa91 f1a1 	rbit	r1, r1
 8006a70:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8006a74:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8006a78:	fab1 f181 	clz	r1, r1
 8006a7c:	b2c9      	uxtb	r1, r1
 8006a7e:	408b      	lsls	r3, r1
 8006a80:	4920      	ldr	r1, [pc, #128]	@ (8006b04 <HAL_RCC_OscConfig+0x5e8>)
 8006a82:	4313      	orrs	r3, r2
 8006a84:	600b      	str	r3, [r1, #0]
 8006a86:	e06c      	b.n	8006b62 <HAL_RCC_OscConfig+0x646>
 8006a88:	2301      	movs	r3, #1
 8006a8a:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a8e:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8006a92:	fa93 f3a3 	rbit	r3, r3
 8006a96:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8006a9a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006a9e:	fab3 f383 	clz	r3, r3
 8006aa2:	b2db      	uxtb	r3, r3
 8006aa4:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8006aa8:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8006aac:	009b      	lsls	r3, r3, #2
 8006aae:	461a      	mov	r2, r3
 8006ab0:	2300      	movs	r3, #0
 8006ab2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ab4:	f7fc ff4c 	bl	8003950 <HAL_GetTick>
 8006ab8:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006abc:	e00a      	b.n	8006ad4 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006abe:	f7fc ff47 	bl	8003950 <HAL_GetTick>
 8006ac2:	4602      	mov	r2, r0
 8006ac4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8006ac8:	1ad3      	subs	r3, r2, r3
 8006aca:	2b02      	cmp	r3, #2
 8006acc:	d902      	bls.n	8006ad4 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8006ace:	2303      	movs	r3, #3
 8006ad0:	f000 bd5a 	b.w	8007588 <HAL_RCC_OscConfig+0x106c>
 8006ad4:	2302      	movs	r3, #2
 8006ad6:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ada:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8006ade:	fa93 f3a3 	rbit	r3, r3
 8006ae2:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8006ae6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006aea:	fab3 f383 	clz	r3, r3
 8006aee:	b2db      	uxtb	r3, r3
 8006af0:	095b      	lsrs	r3, r3, #5
 8006af2:	b2db      	uxtb	r3, r3
 8006af4:	f043 0301 	orr.w	r3, r3, #1
 8006af8:	b2db      	uxtb	r3, r3
 8006afa:	2b01      	cmp	r3, #1
 8006afc:	d104      	bne.n	8006b08 <HAL_RCC_OscConfig+0x5ec>
 8006afe:	4b01      	ldr	r3, [pc, #4]	@ (8006b04 <HAL_RCC_OscConfig+0x5e8>)
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	e015      	b.n	8006b30 <HAL_RCC_OscConfig+0x614>
 8006b04:	40021000 	.word	0x40021000
 8006b08:	2302      	movs	r3, #2
 8006b0a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b0e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006b12:	fa93 f3a3 	rbit	r3, r3
 8006b16:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8006b1a:	2302      	movs	r3, #2
 8006b1c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8006b20:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8006b24:	fa93 f3a3 	rbit	r3, r3
 8006b28:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8006b2c:	4bc8      	ldr	r3, [pc, #800]	@ (8006e50 <HAL_RCC_OscConfig+0x934>)
 8006b2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b30:	2202      	movs	r2, #2
 8006b32:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8006b36:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8006b3a:	fa92 f2a2 	rbit	r2, r2
 8006b3e:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8006b42:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8006b46:	fab2 f282 	clz	r2, r2
 8006b4a:	b2d2      	uxtb	r2, r2
 8006b4c:	f042 0220 	orr.w	r2, r2, #32
 8006b50:	b2d2      	uxtb	r2, r2
 8006b52:	f002 021f 	and.w	r2, r2, #31
 8006b56:	2101      	movs	r1, #1
 8006b58:	fa01 f202 	lsl.w	r2, r1, r2
 8006b5c:	4013      	ands	r3, r2
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d1ad      	bne.n	8006abe <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006b62:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006b66:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	f003 0308 	and.w	r3, r3, #8
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	f000 8110 	beq.w	8006d98 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006b78:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006b7c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	699b      	ldr	r3, [r3, #24]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d079      	beq.n	8006c7c <HAL_RCC_OscConfig+0x760>
 8006b88:	2301      	movs	r3, #1
 8006b8a:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b8e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8006b92:	fa93 f3a3 	rbit	r3, r3
 8006b96:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8006b9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006b9e:	fab3 f383 	clz	r3, r3
 8006ba2:	b2db      	uxtb	r3, r3
 8006ba4:	461a      	mov	r2, r3
 8006ba6:	4bab      	ldr	r3, [pc, #684]	@ (8006e54 <HAL_RCC_OscConfig+0x938>)
 8006ba8:	4413      	add	r3, r2
 8006baa:	009b      	lsls	r3, r3, #2
 8006bac:	461a      	mov	r2, r3
 8006bae:	2301      	movs	r3, #1
 8006bb0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006bb2:	f7fc fecd 	bl	8003950 <HAL_GetTick>
 8006bb6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006bba:	e00a      	b.n	8006bd2 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006bbc:	f7fc fec8 	bl	8003950 <HAL_GetTick>
 8006bc0:	4602      	mov	r2, r0
 8006bc2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8006bc6:	1ad3      	subs	r3, r2, r3
 8006bc8:	2b02      	cmp	r3, #2
 8006bca:	d902      	bls.n	8006bd2 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8006bcc:	2303      	movs	r3, #3
 8006bce:	f000 bcdb 	b.w	8007588 <HAL_RCC_OscConfig+0x106c>
 8006bd2:	2302      	movs	r3, #2
 8006bd4:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006bd8:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8006bdc:	fa93 f3a3 	rbit	r3, r3
 8006be0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8006be4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006be8:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8006bec:	2202      	movs	r2, #2
 8006bee:	601a      	str	r2, [r3, #0]
 8006bf0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006bf4:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	fa93 f2a3 	rbit	r2, r3
 8006bfe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006c02:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006c06:	601a      	str	r2, [r3, #0]
 8006c08:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006c0c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c10:	2202      	movs	r2, #2
 8006c12:	601a      	str	r2, [r3, #0]
 8006c14:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006c18:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	fa93 f2a3 	rbit	r2, r3
 8006c22:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006c26:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8006c2a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006c2c:	4b88      	ldr	r3, [pc, #544]	@ (8006e50 <HAL_RCC_OscConfig+0x934>)
 8006c2e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006c30:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006c34:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8006c38:	2102      	movs	r1, #2
 8006c3a:	6019      	str	r1, [r3, #0]
 8006c3c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006c40:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	fa93 f1a3 	rbit	r1, r3
 8006c4a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006c4e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8006c52:	6019      	str	r1, [r3, #0]
  return result;
 8006c54:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006c58:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	fab3 f383 	clz	r3, r3
 8006c62:	b2db      	uxtb	r3, r3
 8006c64:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8006c68:	b2db      	uxtb	r3, r3
 8006c6a:	f003 031f 	and.w	r3, r3, #31
 8006c6e:	2101      	movs	r1, #1
 8006c70:	fa01 f303 	lsl.w	r3, r1, r3
 8006c74:	4013      	ands	r3, r2
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d0a0      	beq.n	8006bbc <HAL_RCC_OscConfig+0x6a0>
 8006c7a:	e08d      	b.n	8006d98 <HAL_RCC_OscConfig+0x87c>
 8006c7c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006c80:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8006c84:	2201      	movs	r2, #1
 8006c86:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c88:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006c8c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	fa93 f2a3 	rbit	r2, r3
 8006c96:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006c9a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8006c9e:	601a      	str	r2, [r3, #0]
  return result;
 8006ca0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006ca4:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8006ca8:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006caa:	fab3 f383 	clz	r3, r3
 8006cae:	b2db      	uxtb	r3, r3
 8006cb0:	461a      	mov	r2, r3
 8006cb2:	4b68      	ldr	r3, [pc, #416]	@ (8006e54 <HAL_RCC_OscConfig+0x938>)
 8006cb4:	4413      	add	r3, r2
 8006cb6:	009b      	lsls	r3, r3, #2
 8006cb8:	461a      	mov	r2, r3
 8006cba:	2300      	movs	r3, #0
 8006cbc:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006cbe:	f7fc fe47 	bl	8003950 <HAL_GetTick>
 8006cc2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006cc6:	e00a      	b.n	8006cde <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006cc8:	f7fc fe42 	bl	8003950 <HAL_GetTick>
 8006ccc:	4602      	mov	r2, r0
 8006cce:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8006cd2:	1ad3      	subs	r3, r2, r3
 8006cd4:	2b02      	cmp	r3, #2
 8006cd6:	d902      	bls.n	8006cde <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8006cd8:	2303      	movs	r3, #3
 8006cda:	f000 bc55 	b.w	8007588 <HAL_RCC_OscConfig+0x106c>
 8006cde:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006ce2:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8006ce6:	2202      	movs	r2, #2
 8006ce8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006cea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006cee:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	fa93 f2a3 	rbit	r2, r3
 8006cf8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006cfc:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8006d00:	601a      	str	r2, [r3, #0]
 8006d02:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006d06:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8006d0a:	2202      	movs	r2, #2
 8006d0c:	601a      	str	r2, [r3, #0]
 8006d0e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006d12:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	fa93 f2a3 	rbit	r2, r3
 8006d1c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006d20:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006d24:	601a      	str	r2, [r3, #0]
 8006d26:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006d2a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8006d2e:	2202      	movs	r2, #2
 8006d30:	601a      	str	r2, [r3, #0]
 8006d32:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006d36:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	fa93 f2a3 	rbit	r2, r3
 8006d40:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006d44:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8006d48:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006d4a:	4b41      	ldr	r3, [pc, #260]	@ (8006e50 <HAL_RCC_OscConfig+0x934>)
 8006d4c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006d4e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006d52:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8006d56:	2102      	movs	r1, #2
 8006d58:	6019      	str	r1, [r3, #0]
 8006d5a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006d5e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	fa93 f1a3 	rbit	r1, r3
 8006d68:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006d6c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8006d70:	6019      	str	r1, [r3, #0]
  return result;
 8006d72:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006d76:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	fab3 f383 	clz	r3, r3
 8006d80:	b2db      	uxtb	r3, r3
 8006d82:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8006d86:	b2db      	uxtb	r3, r3
 8006d88:	f003 031f 	and.w	r3, r3, #31
 8006d8c:	2101      	movs	r1, #1
 8006d8e:	fa01 f303 	lsl.w	r3, r1, r3
 8006d92:	4013      	ands	r3, r2
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d197      	bne.n	8006cc8 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006d98:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006d9c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	f003 0304 	and.w	r3, r3, #4
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	f000 81a1 	beq.w	80070f0 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006dae:	2300      	movs	r3, #0
 8006db0:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006db4:	4b26      	ldr	r3, [pc, #152]	@ (8006e50 <HAL_RCC_OscConfig+0x934>)
 8006db6:	69db      	ldr	r3, [r3, #28]
 8006db8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d116      	bne.n	8006dee <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006dc0:	4b23      	ldr	r3, [pc, #140]	@ (8006e50 <HAL_RCC_OscConfig+0x934>)
 8006dc2:	69db      	ldr	r3, [r3, #28]
 8006dc4:	4a22      	ldr	r2, [pc, #136]	@ (8006e50 <HAL_RCC_OscConfig+0x934>)
 8006dc6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006dca:	61d3      	str	r3, [r2, #28]
 8006dcc:	4b20      	ldr	r3, [pc, #128]	@ (8006e50 <HAL_RCC_OscConfig+0x934>)
 8006dce:	69db      	ldr	r3, [r3, #28]
 8006dd0:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8006dd4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006dd8:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8006ddc:	601a      	str	r2, [r3, #0]
 8006dde:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006de2:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8006de6:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8006de8:	2301      	movs	r3, #1
 8006dea:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006dee:	4b1a      	ldr	r3, [pc, #104]	@ (8006e58 <HAL_RCC_OscConfig+0x93c>)
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d11a      	bne.n	8006e30 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006dfa:	4b17      	ldr	r3, [pc, #92]	@ (8006e58 <HAL_RCC_OscConfig+0x93c>)
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	4a16      	ldr	r2, [pc, #88]	@ (8006e58 <HAL_RCC_OscConfig+0x93c>)
 8006e00:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006e04:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006e06:	f7fc fda3 	bl	8003950 <HAL_GetTick>
 8006e0a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e0e:	e009      	b.n	8006e24 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006e10:	f7fc fd9e 	bl	8003950 <HAL_GetTick>
 8006e14:	4602      	mov	r2, r0
 8006e16:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8006e1a:	1ad3      	subs	r3, r2, r3
 8006e1c:	2b64      	cmp	r3, #100	@ 0x64
 8006e1e:	d901      	bls.n	8006e24 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8006e20:	2303      	movs	r3, #3
 8006e22:	e3b1      	b.n	8007588 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e24:	4b0c      	ldr	r3, [pc, #48]	@ (8006e58 <HAL_RCC_OscConfig+0x93c>)
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d0ef      	beq.n	8006e10 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006e30:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006e34:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	68db      	ldr	r3, [r3, #12]
 8006e3c:	2b01      	cmp	r3, #1
 8006e3e:	d10d      	bne.n	8006e5c <HAL_RCC_OscConfig+0x940>
 8006e40:	4b03      	ldr	r3, [pc, #12]	@ (8006e50 <HAL_RCC_OscConfig+0x934>)
 8006e42:	6a1b      	ldr	r3, [r3, #32]
 8006e44:	4a02      	ldr	r2, [pc, #8]	@ (8006e50 <HAL_RCC_OscConfig+0x934>)
 8006e46:	f043 0301 	orr.w	r3, r3, #1
 8006e4a:	6213      	str	r3, [r2, #32]
 8006e4c:	e03c      	b.n	8006ec8 <HAL_RCC_OscConfig+0x9ac>
 8006e4e:	bf00      	nop
 8006e50:	40021000 	.word	0x40021000
 8006e54:	10908120 	.word	0x10908120
 8006e58:	40007000 	.word	0x40007000
 8006e5c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006e60:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	68db      	ldr	r3, [r3, #12]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d10c      	bne.n	8006e86 <HAL_RCC_OscConfig+0x96a>
 8006e6c:	4bc1      	ldr	r3, [pc, #772]	@ (8007174 <HAL_RCC_OscConfig+0xc58>)
 8006e6e:	6a1b      	ldr	r3, [r3, #32]
 8006e70:	4ac0      	ldr	r2, [pc, #768]	@ (8007174 <HAL_RCC_OscConfig+0xc58>)
 8006e72:	f023 0301 	bic.w	r3, r3, #1
 8006e76:	6213      	str	r3, [r2, #32]
 8006e78:	4bbe      	ldr	r3, [pc, #760]	@ (8007174 <HAL_RCC_OscConfig+0xc58>)
 8006e7a:	6a1b      	ldr	r3, [r3, #32]
 8006e7c:	4abd      	ldr	r2, [pc, #756]	@ (8007174 <HAL_RCC_OscConfig+0xc58>)
 8006e7e:	f023 0304 	bic.w	r3, r3, #4
 8006e82:	6213      	str	r3, [r2, #32]
 8006e84:	e020      	b.n	8006ec8 <HAL_RCC_OscConfig+0x9ac>
 8006e86:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006e8a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	68db      	ldr	r3, [r3, #12]
 8006e92:	2b05      	cmp	r3, #5
 8006e94:	d10c      	bne.n	8006eb0 <HAL_RCC_OscConfig+0x994>
 8006e96:	4bb7      	ldr	r3, [pc, #732]	@ (8007174 <HAL_RCC_OscConfig+0xc58>)
 8006e98:	6a1b      	ldr	r3, [r3, #32]
 8006e9a:	4ab6      	ldr	r2, [pc, #728]	@ (8007174 <HAL_RCC_OscConfig+0xc58>)
 8006e9c:	f043 0304 	orr.w	r3, r3, #4
 8006ea0:	6213      	str	r3, [r2, #32]
 8006ea2:	4bb4      	ldr	r3, [pc, #720]	@ (8007174 <HAL_RCC_OscConfig+0xc58>)
 8006ea4:	6a1b      	ldr	r3, [r3, #32]
 8006ea6:	4ab3      	ldr	r2, [pc, #716]	@ (8007174 <HAL_RCC_OscConfig+0xc58>)
 8006ea8:	f043 0301 	orr.w	r3, r3, #1
 8006eac:	6213      	str	r3, [r2, #32]
 8006eae:	e00b      	b.n	8006ec8 <HAL_RCC_OscConfig+0x9ac>
 8006eb0:	4bb0      	ldr	r3, [pc, #704]	@ (8007174 <HAL_RCC_OscConfig+0xc58>)
 8006eb2:	6a1b      	ldr	r3, [r3, #32]
 8006eb4:	4aaf      	ldr	r2, [pc, #700]	@ (8007174 <HAL_RCC_OscConfig+0xc58>)
 8006eb6:	f023 0301 	bic.w	r3, r3, #1
 8006eba:	6213      	str	r3, [r2, #32]
 8006ebc:	4bad      	ldr	r3, [pc, #692]	@ (8007174 <HAL_RCC_OscConfig+0xc58>)
 8006ebe:	6a1b      	ldr	r3, [r3, #32]
 8006ec0:	4aac      	ldr	r2, [pc, #688]	@ (8007174 <HAL_RCC_OscConfig+0xc58>)
 8006ec2:	f023 0304 	bic.w	r3, r3, #4
 8006ec6:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006ec8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006ecc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	68db      	ldr	r3, [r3, #12]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	f000 8081 	beq.w	8006fdc <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006eda:	f7fc fd39 	bl	8003950 <HAL_GetTick>
 8006ede:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006ee2:	e00b      	b.n	8006efc <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006ee4:	f7fc fd34 	bl	8003950 <HAL_GetTick>
 8006ee8:	4602      	mov	r2, r0
 8006eea:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8006eee:	1ad3      	subs	r3, r2, r3
 8006ef0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006ef4:	4293      	cmp	r3, r2
 8006ef6:	d901      	bls.n	8006efc <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8006ef8:	2303      	movs	r3, #3
 8006efa:	e345      	b.n	8007588 <HAL_RCC_OscConfig+0x106c>
 8006efc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006f00:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8006f04:	2202      	movs	r2, #2
 8006f06:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f08:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006f0c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	fa93 f2a3 	rbit	r2, r3
 8006f16:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006f1a:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8006f1e:	601a      	str	r2, [r3, #0]
 8006f20:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006f24:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8006f28:	2202      	movs	r2, #2
 8006f2a:	601a      	str	r2, [r3, #0]
 8006f2c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006f30:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	fa93 f2a3 	rbit	r2, r3
 8006f3a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006f3e:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8006f42:	601a      	str	r2, [r3, #0]
  return result;
 8006f44:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006f48:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8006f4c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006f4e:	fab3 f383 	clz	r3, r3
 8006f52:	b2db      	uxtb	r3, r3
 8006f54:	095b      	lsrs	r3, r3, #5
 8006f56:	b2db      	uxtb	r3, r3
 8006f58:	f043 0302 	orr.w	r3, r3, #2
 8006f5c:	b2db      	uxtb	r3, r3
 8006f5e:	2b02      	cmp	r3, #2
 8006f60:	d102      	bne.n	8006f68 <HAL_RCC_OscConfig+0xa4c>
 8006f62:	4b84      	ldr	r3, [pc, #528]	@ (8007174 <HAL_RCC_OscConfig+0xc58>)
 8006f64:	6a1b      	ldr	r3, [r3, #32]
 8006f66:	e013      	b.n	8006f90 <HAL_RCC_OscConfig+0xa74>
 8006f68:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006f6c:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8006f70:	2202      	movs	r2, #2
 8006f72:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f74:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006f78:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	fa93 f2a3 	rbit	r2, r3
 8006f82:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006f86:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8006f8a:	601a      	str	r2, [r3, #0]
 8006f8c:	4b79      	ldr	r3, [pc, #484]	@ (8007174 <HAL_RCC_OscConfig+0xc58>)
 8006f8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f90:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8006f94:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8006f98:	2102      	movs	r1, #2
 8006f9a:	6011      	str	r1, [r2, #0]
 8006f9c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8006fa0:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8006fa4:	6812      	ldr	r2, [r2, #0]
 8006fa6:	fa92 f1a2 	rbit	r1, r2
 8006faa:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8006fae:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8006fb2:	6011      	str	r1, [r2, #0]
  return result;
 8006fb4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8006fb8:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8006fbc:	6812      	ldr	r2, [r2, #0]
 8006fbe:	fab2 f282 	clz	r2, r2
 8006fc2:	b2d2      	uxtb	r2, r2
 8006fc4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006fc8:	b2d2      	uxtb	r2, r2
 8006fca:	f002 021f 	and.w	r2, r2, #31
 8006fce:	2101      	movs	r1, #1
 8006fd0:	fa01 f202 	lsl.w	r2, r1, r2
 8006fd4:	4013      	ands	r3, r2
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d084      	beq.n	8006ee4 <HAL_RCC_OscConfig+0x9c8>
 8006fda:	e07f      	b.n	80070dc <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006fdc:	f7fc fcb8 	bl	8003950 <HAL_GetTick>
 8006fe0:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006fe4:	e00b      	b.n	8006ffe <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006fe6:	f7fc fcb3 	bl	8003950 <HAL_GetTick>
 8006fea:	4602      	mov	r2, r0
 8006fec:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8006ff0:	1ad3      	subs	r3, r2, r3
 8006ff2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006ff6:	4293      	cmp	r3, r2
 8006ff8:	d901      	bls.n	8006ffe <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8006ffa:	2303      	movs	r3, #3
 8006ffc:	e2c4      	b.n	8007588 <HAL_RCC_OscConfig+0x106c>
 8006ffe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8007002:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8007006:	2202      	movs	r2, #2
 8007008:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800700a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800700e:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	fa93 f2a3 	rbit	r2, r3
 8007018:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800701c:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8007020:	601a      	str	r2, [r3, #0]
 8007022:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8007026:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 800702a:	2202      	movs	r2, #2
 800702c:	601a      	str	r2, [r3, #0]
 800702e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8007032:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	fa93 f2a3 	rbit	r2, r3
 800703c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8007040:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8007044:	601a      	str	r2, [r3, #0]
  return result;
 8007046:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800704a:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800704e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007050:	fab3 f383 	clz	r3, r3
 8007054:	b2db      	uxtb	r3, r3
 8007056:	095b      	lsrs	r3, r3, #5
 8007058:	b2db      	uxtb	r3, r3
 800705a:	f043 0302 	orr.w	r3, r3, #2
 800705e:	b2db      	uxtb	r3, r3
 8007060:	2b02      	cmp	r3, #2
 8007062:	d102      	bne.n	800706a <HAL_RCC_OscConfig+0xb4e>
 8007064:	4b43      	ldr	r3, [pc, #268]	@ (8007174 <HAL_RCC_OscConfig+0xc58>)
 8007066:	6a1b      	ldr	r3, [r3, #32]
 8007068:	e013      	b.n	8007092 <HAL_RCC_OscConfig+0xb76>
 800706a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800706e:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8007072:	2202      	movs	r2, #2
 8007074:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007076:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800707a:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	fa93 f2a3 	rbit	r2, r3
 8007084:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8007088:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 800708c:	601a      	str	r2, [r3, #0]
 800708e:	4b39      	ldr	r3, [pc, #228]	@ (8007174 <HAL_RCC_OscConfig+0xc58>)
 8007090:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007092:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8007096:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 800709a:	2102      	movs	r1, #2
 800709c:	6011      	str	r1, [r2, #0]
 800709e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80070a2:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 80070a6:	6812      	ldr	r2, [r2, #0]
 80070a8:	fa92 f1a2 	rbit	r1, r2
 80070ac:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80070b0:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80070b4:	6011      	str	r1, [r2, #0]
  return result;
 80070b6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80070ba:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80070be:	6812      	ldr	r2, [r2, #0]
 80070c0:	fab2 f282 	clz	r2, r2
 80070c4:	b2d2      	uxtb	r2, r2
 80070c6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80070ca:	b2d2      	uxtb	r2, r2
 80070cc:	f002 021f 	and.w	r2, r2, #31
 80070d0:	2101      	movs	r1, #1
 80070d2:	fa01 f202 	lsl.w	r2, r1, r2
 80070d6:	4013      	ands	r3, r2
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d184      	bne.n	8006fe6 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80070dc:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 80070e0:	2b01      	cmp	r3, #1
 80070e2:	d105      	bne.n	80070f0 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80070e4:	4b23      	ldr	r3, [pc, #140]	@ (8007174 <HAL_RCC_OscConfig+0xc58>)
 80070e6:	69db      	ldr	r3, [r3, #28]
 80070e8:	4a22      	ldr	r2, [pc, #136]	@ (8007174 <HAL_RCC_OscConfig+0xc58>)
 80070ea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80070ee:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80070f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80070f4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	69db      	ldr	r3, [r3, #28]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	f000 8242 	beq.w	8007586 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007102:	4b1c      	ldr	r3, [pc, #112]	@ (8007174 <HAL_RCC_OscConfig+0xc58>)
 8007104:	685b      	ldr	r3, [r3, #4]
 8007106:	f003 030c 	and.w	r3, r3, #12
 800710a:	2b08      	cmp	r3, #8
 800710c:	f000 8213 	beq.w	8007536 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007110:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8007114:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	69db      	ldr	r3, [r3, #28]
 800711c:	2b02      	cmp	r3, #2
 800711e:	f040 8162 	bne.w	80073e6 <HAL_RCC_OscConfig+0xeca>
 8007122:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8007126:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 800712a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800712e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007130:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8007134:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	fa93 f2a3 	rbit	r2, r3
 800713e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8007142:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8007146:	601a      	str	r2, [r3, #0]
  return result;
 8007148:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800714c:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8007150:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007152:	fab3 f383 	clz	r3, r3
 8007156:	b2db      	uxtb	r3, r3
 8007158:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800715c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8007160:	009b      	lsls	r3, r3, #2
 8007162:	461a      	mov	r2, r3
 8007164:	2300      	movs	r3, #0
 8007166:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007168:	f7fc fbf2 	bl	8003950 <HAL_GetTick>
 800716c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007170:	e00c      	b.n	800718c <HAL_RCC_OscConfig+0xc70>
 8007172:	bf00      	nop
 8007174:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007178:	f7fc fbea 	bl	8003950 <HAL_GetTick>
 800717c:	4602      	mov	r2, r0
 800717e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8007182:	1ad3      	subs	r3, r2, r3
 8007184:	2b02      	cmp	r3, #2
 8007186:	d901      	bls.n	800718c <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8007188:	2303      	movs	r3, #3
 800718a:	e1fd      	b.n	8007588 <HAL_RCC_OscConfig+0x106c>
 800718c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8007190:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8007194:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8007198:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800719a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800719e:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	fa93 f2a3 	rbit	r2, r3
 80071a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80071ac:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80071b0:	601a      	str	r2, [r3, #0]
  return result;
 80071b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80071b6:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80071ba:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80071bc:	fab3 f383 	clz	r3, r3
 80071c0:	b2db      	uxtb	r3, r3
 80071c2:	095b      	lsrs	r3, r3, #5
 80071c4:	b2db      	uxtb	r3, r3
 80071c6:	f043 0301 	orr.w	r3, r3, #1
 80071ca:	b2db      	uxtb	r3, r3
 80071cc:	2b01      	cmp	r3, #1
 80071ce:	d102      	bne.n	80071d6 <HAL_RCC_OscConfig+0xcba>
 80071d0:	4bb0      	ldr	r3, [pc, #704]	@ (8007494 <HAL_RCC_OscConfig+0xf78>)
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	e027      	b.n	8007226 <HAL_RCC_OscConfig+0xd0a>
 80071d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80071da:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80071de:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80071e2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80071e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80071e8:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	fa93 f2a3 	rbit	r2, r3
 80071f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80071f6:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80071fa:	601a      	str	r2, [r3, #0]
 80071fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8007200:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8007204:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8007208:	601a      	str	r2, [r3, #0]
 800720a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800720e:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	fa93 f2a3 	rbit	r2, r3
 8007218:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800721c:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8007220:	601a      	str	r2, [r3, #0]
 8007222:	4b9c      	ldr	r3, [pc, #624]	@ (8007494 <HAL_RCC_OscConfig+0xf78>)
 8007224:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007226:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800722a:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 800722e:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8007232:	6011      	str	r1, [r2, #0]
 8007234:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8007238:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 800723c:	6812      	ldr	r2, [r2, #0]
 800723e:	fa92 f1a2 	rbit	r1, r2
 8007242:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8007246:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 800724a:	6011      	str	r1, [r2, #0]
  return result;
 800724c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8007250:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8007254:	6812      	ldr	r2, [r2, #0]
 8007256:	fab2 f282 	clz	r2, r2
 800725a:	b2d2      	uxtb	r2, r2
 800725c:	f042 0220 	orr.w	r2, r2, #32
 8007260:	b2d2      	uxtb	r2, r2
 8007262:	f002 021f 	and.w	r2, r2, #31
 8007266:	2101      	movs	r1, #1
 8007268:	fa01 f202 	lsl.w	r2, r1, r2
 800726c:	4013      	ands	r3, r2
 800726e:	2b00      	cmp	r3, #0
 8007270:	d182      	bne.n	8007178 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007272:	4b88      	ldr	r3, [pc, #544]	@ (8007494 <HAL_RCC_OscConfig+0xf78>)
 8007274:	685b      	ldr	r3, [r3, #4]
 8007276:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800727a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800727e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8007286:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800728a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	6a1b      	ldr	r3, [r3, #32]
 8007292:	430b      	orrs	r3, r1
 8007294:	497f      	ldr	r1, [pc, #508]	@ (8007494 <HAL_RCC_OscConfig+0xf78>)
 8007296:	4313      	orrs	r3, r2
 8007298:	604b      	str	r3, [r1, #4]
 800729a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800729e:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 80072a2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80072a6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80072a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80072ac:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	fa93 f2a3 	rbit	r2, r3
 80072b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80072ba:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80072be:	601a      	str	r2, [r3, #0]
  return result;
 80072c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80072c4:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80072c8:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80072ca:	fab3 f383 	clz	r3, r3
 80072ce:	b2db      	uxtb	r3, r3
 80072d0:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80072d4:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80072d8:	009b      	lsls	r3, r3, #2
 80072da:	461a      	mov	r2, r3
 80072dc:	2301      	movs	r3, #1
 80072de:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80072e0:	f7fc fb36 	bl	8003950 <HAL_GetTick>
 80072e4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80072e8:	e009      	b.n	80072fe <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80072ea:	f7fc fb31 	bl	8003950 <HAL_GetTick>
 80072ee:	4602      	mov	r2, r0
 80072f0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80072f4:	1ad3      	subs	r3, r2, r3
 80072f6:	2b02      	cmp	r3, #2
 80072f8:	d901      	bls.n	80072fe <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80072fa:	2303      	movs	r3, #3
 80072fc:	e144      	b.n	8007588 <HAL_RCC_OscConfig+0x106c>
 80072fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8007302:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8007306:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800730a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800730c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8007310:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	fa93 f2a3 	rbit	r2, r3
 800731a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800731e:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8007322:	601a      	str	r2, [r3, #0]
  return result;
 8007324:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8007328:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 800732c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800732e:	fab3 f383 	clz	r3, r3
 8007332:	b2db      	uxtb	r3, r3
 8007334:	095b      	lsrs	r3, r3, #5
 8007336:	b2db      	uxtb	r3, r3
 8007338:	f043 0301 	orr.w	r3, r3, #1
 800733c:	b2db      	uxtb	r3, r3
 800733e:	2b01      	cmp	r3, #1
 8007340:	d102      	bne.n	8007348 <HAL_RCC_OscConfig+0xe2c>
 8007342:	4b54      	ldr	r3, [pc, #336]	@ (8007494 <HAL_RCC_OscConfig+0xf78>)
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	e027      	b.n	8007398 <HAL_RCC_OscConfig+0xe7c>
 8007348:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800734c:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8007350:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8007354:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007356:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800735a:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	fa93 f2a3 	rbit	r2, r3
 8007364:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8007368:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800736c:	601a      	str	r2, [r3, #0]
 800736e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8007372:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8007376:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800737a:	601a      	str	r2, [r3, #0]
 800737c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8007380:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	fa93 f2a3 	rbit	r2, r3
 800738a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800738e:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8007392:	601a      	str	r2, [r3, #0]
 8007394:	4b3f      	ldr	r3, [pc, #252]	@ (8007494 <HAL_RCC_OscConfig+0xf78>)
 8007396:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007398:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800739c:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 80073a0:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80073a4:	6011      	str	r1, [r2, #0]
 80073a6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80073aa:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 80073ae:	6812      	ldr	r2, [r2, #0]
 80073b0:	fa92 f1a2 	rbit	r1, r2
 80073b4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80073b8:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80073bc:	6011      	str	r1, [r2, #0]
  return result;
 80073be:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80073c2:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80073c6:	6812      	ldr	r2, [r2, #0]
 80073c8:	fab2 f282 	clz	r2, r2
 80073cc:	b2d2      	uxtb	r2, r2
 80073ce:	f042 0220 	orr.w	r2, r2, #32
 80073d2:	b2d2      	uxtb	r2, r2
 80073d4:	f002 021f 	and.w	r2, r2, #31
 80073d8:	2101      	movs	r1, #1
 80073da:	fa01 f202 	lsl.w	r2, r1, r2
 80073de:	4013      	ands	r3, r2
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d082      	beq.n	80072ea <HAL_RCC_OscConfig+0xdce>
 80073e4:	e0cf      	b.n	8007586 <HAL_RCC_OscConfig+0x106a>
 80073e6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80073ea:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80073ee:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80073f2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80073f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80073f8:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	fa93 f2a3 	rbit	r2, r3
 8007402:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8007406:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 800740a:	601a      	str	r2, [r3, #0]
  return result;
 800740c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8007410:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8007414:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007416:	fab3 f383 	clz	r3, r3
 800741a:	b2db      	uxtb	r3, r3
 800741c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8007420:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8007424:	009b      	lsls	r3, r3, #2
 8007426:	461a      	mov	r2, r3
 8007428:	2300      	movs	r3, #0
 800742a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800742c:	f7fc fa90 	bl	8003950 <HAL_GetTick>
 8007430:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007434:	e009      	b.n	800744a <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007436:	f7fc fa8b 	bl	8003950 <HAL_GetTick>
 800743a:	4602      	mov	r2, r0
 800743c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8007440:	1ad3      	subs	r3, r2, r3
 8007442:	2b02      	cmp	r3, #2
 8007444:	d901      	bls.n	800744a <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8007446:	2303      	movs	r3, #3
 8007448:	e09e      	b.n	8007588 <HAL_RCC_OscConfig+0x106c>
 800744a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800744e:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8007452:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8007456:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007458:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800745c:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	fa93 f2a3 	rbit	r2, r3
 8007466:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800746a:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 800746e:	601a      	str	r2, [r3, #0]
  return result;
 8007470:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8007474:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8007478:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800747a:	fab3 f383 	clz	r3, r3
 800747e:	b2db      	uxtb	r3, r3
 8007480:	095b      	lsrs	r3, r3, #5
 8007482:	b2db      	uxtb	r3, r3
 8007484:	f043 0301 	orr.w	r3, r3, #1
 8007488:	b2db      	uxtb	r3, r3
 800748a:	2b01      	cmp	r3, #1
 800748c:	d104      	bne.n	8007498 <HAL_RCC_OscConfig+0xf7c>
 800748e:	4b01      	ldr	r3, [pc, #4]	@ (8007494 <HAL_RCC_OscConfig+0xf78>)
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	e029      	b.n	80074e8 <HAL_RCC_OscConfig+0xfcc>
 8007494:	40021000 	.word	0x40021000
 8007498:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800749c:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80074a0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80074a4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80074a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80074aa:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	fa93 f2a3 	rbit	r2, r3
 80074b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80074b8:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 80074bc:	601a      	str	r2, [r3, #0]
 80074be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80074c2:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80074c6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80074ca:	601a      	str	r2, [r3, #0]
 80074cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80074d0:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	fa93 f2a3 	rbit	r2, r3
 80074da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80074de:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80074e2:	601a      	str	r2, [r3, #0]
 80074e4:	4b2b      	ldr	r3, [pc, #172]	@ (8007594 <HAL_RCC_OscConfig+0x1078>)
 80074e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074e8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80074ec:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 80074f0:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80074f4:	6011      	str	r1, [r2, #0]
 80074f6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80074fa:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 80074fe:	6812      	ldr	r2, [r2, #0]
 8007500:	fa92 f1a2 	rbit	r1, r2
 8007504:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8007508:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 800750c:	6011      	str	r1, [r2, #0]
  return result;
 800750e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8007512:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8007516:	6812      	ldr	r2, [r2, #0]
 8007518:	fab2 f282 	clz	r2, r2
 800751c:	b2d2      	uxtb	r2, r2
 800751e:	f042 0220 	orr.w	r2, r2, #32
 8007522:	b2d2      	uxtb	r2, r2
 8007524:	f002 021f 	and.w	r2, r2, #31
 8007528:	2101      	movs	r1, #1
 800752a:	fa01 f202 	lsl.w	r2, r1, r2
 800752e:	4013      	ands	r3, r2
 8007530:	2b00      	cmp	r3, #0
 8007532:	d180      	bne.n	8007436 <HAL_RCC_OscConfig+0xf1a>
 8007534:	e027      	b.n	8007586 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007536:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800753a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	69db      	ldr	r3, [r3, #28]
 8007542:	2b01      	cmp	r3, #1
 8007544:	d101      	bne.n	800754a <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8007546:	2301      	movs	r3, #1
 8007548:	e01e      	b.n	8007588 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800754a:	4b12      	ldr	r3, [pc, #72]	@ (8007594 <HAL_RCC_OscConfig+0x1078>)
 800754c:	685b      	ldr	r3, [r3, #4]
 800754e:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8007552:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8007556:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800755a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800755e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	6a1b      	ldr	r3, [r3, #32]
 8007566:	429a      	cmp	r2, r3
 8007568:	d10b      	bne.n	8007582 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800756a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 800756e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8007572:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8007576:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800757e:	429a      	cmp	r2, r3
 8007580:	d001      	beq.n	8007586 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8007582:	2301      	movs	r3, #1
 8007584:	e000      	b.n	8007588 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8007586:	2300      	movs	r3, #0
}
 8007588:	4618      	mov	r0, r3
 800758a:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 800758e:	46bd      	mov	sp, r7
 8007590:	bd80      	pop	{r7, pc}
 8007592:	bf00      	nop
 8007594:	40021000 	.word	0x40021000

08007598 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007598:	b580      	push	{r7, lr}
 800759a:	b09e      	sub	sp, #120	@ 0x78
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
 80075a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80075a2:	2300      	movs	r3, #0
 80075a4:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d101      	bne.n	80075b0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80075ac:	2301      	movs	r3, #1
 80075ae:	e162      	b.n	8007876 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80075b0:	4b90      	ldr	r3, [pc, #576]	@ (80077f4 <HAL_RCC_ClockConfig+0x25c>)
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	f003 0307 	and.w	r3, r3, #7
 80075b8:	683a      	ldr	r2, [r7, #0]
 80075ba:	429a      	cmp	r2, r3
 80075bc:	d910      	bls.n	80075e0 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80075be:	4b8d      	ldr	r3, [pc, #564]	@ (80077f4 <HAL_RCC_ClockConfig+0x25c>)
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	f023 0207 	bic.w	r2, r3, #7
 80075c6:	498b      	ldr	r1, [pc, #556]	@ (80077f4 <HAL_RCC_ClockConfig+0x25c>)
 80075c8:	683b      	ldr	r3, [r7, #0]
 80075ca:	4313      	orrs	r3, r2
 80075cc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80075ce:	4b89      	ldr	r3, [pc, #548]	@ (80077f4 <HAL_RCC_ClockConfig+0x25c>)
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	f003 0307 	and.w	r3, r3, #7
 80075d6:	683a      	ldr	r2, [r7, #0]
 80075d8:	429a      	cmp	r2, r3
 80075da:	d001      	beq.n	80075e0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80075dc:	2301      	movs	r3, #1
 80075de:	e14a      	b.n	8007876 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	f003 0302 	and.w	r3, r3, #2
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d008      	beq.n	80075fe <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80075ec:	4b82      	ldr	r3, [pc, #520]	@ (80077f8 <HAL_RCC_ClockConfig+0x260>)
 80075ee:	685b      	ldr	r3, [r3, #4]
 80075f0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	689b      	ldr	r3, [r3, #8]
 80075f8:	497f      	ldr	r1, [pc, #508]	@ (80077f8 <HAL_RCC_ClockConfig+0x260>)
 80075fa:	4313      	orrs	r3, r2
 80075fc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	f003 0301 	and.w	r3, r3, #1
 8007606:	2b00      	cmp	r3, #0
 8007608:	f000 80dc 	beq.w	80077c4 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	685b      	ldr	r3, [r3, #4]
 8007610:	2b01      	cmp	r3, #1
 8007612:	d13c      	bne.n	800768e <HAL_RCC_ClockConfig+0xf6>
 8007614:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8007618:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800761a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800761c:	fa93 f3a3 	rbit	r3, r3
 8007620:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8007622:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007624:	fab3 f383 	clz	r3, r3
 8007628:	b2db      	uxtb	r3, r3
 800762a:	095b      	lsrs	r3, r3, #5
 800762c:	b2db      	uxtb	r3, r3
 800762e:	f043 0301 	orr.w	r3, r3, #1
 8007632:	b2db      	uxtb	r3, r3
 8007634:	2b01      	cmp	r3, #1
 8007636:	d102      	bne.n	800763e <HAL_RCC_ClockConfig+0xa6>
 8007638:	4b6f      	ldr	r3, [pc, #444]	@ (80077f8 <HAL_RCC_ClockConfig+0x260>)
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	e00f      	b.n	800765e <HAL_RCC_ClockConfig+0xc6>
 800763e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8007642:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007644:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007646:	fa93 f3a3 	rbit	r3, r3
 800764a:	667b      	str	r3, [r7, #100]	@ 0x64
 800764c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8007650:	663b      	str	r3, [r7, #96]	@ 0x60
 8007652:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007654:	fa93 f3a3 	rbit	r3, r3
 8007658:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800765a:	4b67      	ldr	r3, [pc, #412]	@ (80077f8 <HAL_RCC_ClockConfig+0x260>)
 800765c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800765e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8007662:	65ba      	str	r2, [r7, #88]	@ 0x58
 8007664:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007666:	fa92 f2a2 	rbit	r2, r2
 800766a:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 800766c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800766e:	fab2 f282 	clz	r2, r2
 8007672:	b2d2      	uxtb	r2, r2
 8007674:	f042 0220 	orr.w	r2, r2, #32
 8007678:	b2d2      	uxtb	r2, r2
 800767a:	f002 021f 	and.w	r2, r2, #31
 800767e:	2101      	movs	r1, #1
 8007680:	fa01 f202 	lsl.w	r2, r1, r2
 8007684:	4013      	ands	r3, r2
 8007686:	2b00      	cmp	r3, #0
 8007688:	d17b      	bne.n	8007782 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800768a:	2301      	movs	r3, #1
 800768c:	e0f3      	b.n	8007876 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	685b      	ldr	r3, [r3, #4]
 8007692:	2b02      	cmp	r3, #2
 8007694:	d13c      	bne.n	8007710 <HAL_RCC_ClockConfig+0x178>
 8007696:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800769a:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800769c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800769e:	fa93 f3a3 	rbit	r3, r3
 80076a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80076a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80076a6:	fab3 f383 	clz	r3, r3
 80076aa:	b2db      	uxtb	r3, r3
 80076ac:	095b      	lsrs	r3, r3, #5
 80076ae:	b2db      	uxtb	r3, r3
 80076b0:	f043 0301 	orr.w	r3, r3, #1
 80076b4:	b2db      	uxtb	r3, r3
 80076b6:	2b01      	cmp	r3, #1
 80076b8:	d102      	bne.n	80076c0 <HAL_RCC_ClockConfig+0x128>
 80076ba:	4b4f      	ldr	r3, [pc, #316]	@ (80077f8 <HAL_RCC_ClockConfig+0x260>)
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	e00f      	b.n	80076e0 <HAL_RCC_ClockConfig+0x148>
 80076c0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80076c4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80076c6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80076c8:	fa93 f3a3 	rbit	r3, r3
 80076cc:	647b      	str	r3, [r7, #68]	@ 0x44
 80076ce:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80076d2:	643b      	str	r3, [r7, #64]	@ 0x40
 80076d4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80076d6:	fa93 f3a3 	rbit	r3, r3
 80076da:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80076dc:	4b46      	ldr	r3, [pc, #280]	@ (80077f8 <HAL_RCC_ClockConfig+0x260>)
 80076de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076e0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80076e4:	63ba      	str	r2, [r7, #56]	@ 0x38
 80076e6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80076e8:	fa92 f2a2 	rbit	r2, r2
 80076ec:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 80076ee:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80076f0:	fab2 f282 	clz	r2, r2
 80076f4:	b2d2      	uxtb	r2, r2
 80076f6:	f042 0220 	orr.w	r2, r2, #32
 80076fa:	b2d2      	uxtb	r2, r2
 80076fc:	f002 021f 	and.w	r2, r2, #31
 8007700:	2101      	movs	r1, #1
 8007702:	fa01 f202 	lsl.w	r2, r1, r2
 8007706:	4013      	ands	r3, r2
 8007708:	2b00      	cmp	r3, #0
 800770a:	d13a      	bne.n	8007782 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800770c:	2301      	movs	r3, #1
 800770e:	e0b2      	b.n	8007876 <HAL_RCC_ClockConfig+0x2de>
 8007710:	2302      	movs	r3, #2
 8007712:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007714:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007716:	fa93 f3a3 	rbit	r3, r3
 800771a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 800771c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800771e:	fab3 f383 	clz	r3, r3
 8007722:	b2db      	uxtb	r3, r3
 8007724:	095b      	lsrs	r3, r3, #5
 8007726:	b2db      	uxtb	r3, r3
 8007728:	f043 0301 	orr.w	r3, r3, #1
 800772c:	b2db      	uxtb	r3, r3
 800772e:	2b01      	cmp	r3, #1
 8007730:	d102      	bne.n	8007738 <HAL_RCC_ClockConfig+0x1a0>
 8007732:	4b31      	ldr	r3, [pc, #196]	@ (80077f8 <HAL_RCC_ClockConfig+0x260>)
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	e00d      	b.n	8007754 <HAL_RCC_ClockConfig+0x1bc>
 8007738:	2302      	movs	r3, #2
 800773a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800773c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800773e:	fa93 f3a3 	rbit	r3, r3
 8007742:	627b      	str	r3, [r7, #36]	@ 0x24
 8007744:	2302      	movs	r3, #2
 8007746:	623b      	str	r3, [r7, #32]
 8007748:	6a3b      	ldr	r3, [r7, #32]
 800774a:	fa93 f3a3 	rbit	r3, r3
 800774e:	61fb      	str	r3, [r7, #28]
 8007750:	4b29      	ldr	r3, [pc, #164]	@ (80077f8 <HAL_RCC_ClockConfig+0x260>)
 8007752:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007754:	2202      	movs	r2, #2
 8007756:	61ba      	str	r2, [r7, #24]
 8007758:	69ba      	ldr	r2, [r7, #24]
 800775a:	fa92 f2a2 	rbit	r2, r2
 800775e:	617a      	str	r2, [r7, #20]
  return result;
 8007760:	697a      	ldr	r2, [r7, #20]
 8007762:	fab2 f282 	clz	r2, r2
 8007766:	b2d2      	uxtb	r2, r2
 8007768:	f042 0220 	orr.w	r2, r2, #32
 800776c:	b2d2      	uxtb	r2, r2
 800776e:	f002 021f 	and.w	r2, r2, #31
 8007772:	2101      	movs	r1, #1
 8007774:	fa01 f202 	lsl.w	r2, r1, r2
 8007778:	4013      	ands	r3, r2
 800777a:	2b00      	cmp	r3, #0
 800777c:	d101      	bne.n	8007782 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800777e:	2301      	movs	r3, #1
 8007780:	e079      	b.n	8007876 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007782:	4b1d      	ldr	r3, [pc, #116]	@ (80077f8 <HAL_RCC_ClockConfig+0x260>)
 8007784:	685b      	ldr	r3, [r3, #4]
 8007786:	f023 0203 	bic.w	r2, r3, #3
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	685b      	ldr	r3, [r3, #4]
 800778e:	491a      	ldr	r1, [pc, #104]	@ (80077f8 <HAL_RCC_ClockConfig+0x260>)
 8007790:	4313      	orrs	r3, r2
 8007792:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007794:	f7fc f8dc 	bl	8003950 <HAL_GetTick>
 8007798:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800779a:	e00a      	b.n	80077b2 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800779c:	f7fc f8d8 	bl	8003950 <HAL_GetTick>
 80077a0:	4602      	mov	r2, r0
 80077a2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80077a4:	1ad3      	subs	r3, r2, r3
 80077a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80077aa:	4293      	cmp	r3, r2
 80077ac:	d901      	bls.n	80077b2 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80077ae:	2303      	movs	r3, #3
 80077b0:	e061      	b.n	8007876 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80077b2:	4b11      	ldr	r3, [pc, #68]	@ (80077f8 <HAL_RCC_ClockConfig+0x260>)
 80077b4:	685b      	ldr	r3, [r3, #4]
 80077b6:	f003 020c 	and.w	r2, r3, #12
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	685b      	ldr	r3, [r3, #4]
 80077be:	009b      	lsls	r3, r3, #2
 80077c0:	429a      	cmp	r2, r3
 80077c2:	d1eb      	bne.n	800779c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80077c4:	4b0b      	ldr	r3, [pc, #44]	@ (80077f4 <HAL_RCC_ClockConfig+0x25c>)
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	f003 0307 	and.w	r3, r3, #7
 80077cc:	683a      	ldr	r2, [r7, #0]
 80077ce:	429a      	cmp	r2, r3
 80077d0:	d214      	bcs.n	80077fc <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80077d2:	4b08      	ldr	r3, [pc, #32]	@ (80077f4 <HAL_RCC_ClockConfig+0x25c>)
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	f023 0207 	bic.w	r2, r3, #7
 80077da:	4906      	ldr	r1, [pc, #24]	@ (80077f4 <HAL_RCC_ClockConfig+0x25c>)
 80077dc:	683b      	ldr	r3, [r7, #0]
 80077de:	4313      	orrs	r3, r2
 80077e0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80077e2:	4b04      	ldr	r3, [pc, #16]	@ (80077f4 <HAL_RCC_ClockConfig+0x25c>)
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	f003 0307 	and.w	r3, r3, #7
 80077ea:	683a      	ldr	r2, [r7, #0]
 80077ec:	429a      	cmp	r2, r3
 80077ee:	d005      	beq.n	80077fc <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80077f0:	2301      	movs	r3, #1
 80077f2:	e040      	b.n	8007876 <HAL_RCC_ClockConfig+0x2de>
 80077f4:	40022000 	.word	0x40022000
 80077f8:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	f003 0304 	and.w	r3, r3, #4
 8007804:	2b00      	cmp	r3, #0
 8007806:	d008      	beq.n	800781a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007808:	4b1d      	ldr	r3, [pc, #116]	@ (8007880 <HAL_RCC_ClockConfig+0x2e8>)
 800780a:	685b      	ldr	r3, [r3, #4]
 800780c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	68db      	ldr	r3, [r3, #12]
 8007814:	491a      	ldr	r1, [pc, #104]	@ (8007880 <HAL_RCC_ClockConfig+0x2e8>)
 8007816:	4313      	orrs	r3, r2
 8007818:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	f003 0308 	and.w	r3, r3, #8
 8007822:	2b00      	cmp	r3, #0
 8007824:	d009      	beq.n	800783a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007826:	4b16      	ldr	r3, [pc, #88]	@ (8007880 <HAL_RCC_ClockConfig+0x2e8>)
 8007828:	685b      	ldr	r3, [r3, #4]
 800782a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	691b      	ldr	r3, [r3, #16]
 8007832:	00db      	lsls	r3, r3, #3
 8007834:	4912      	ldr	r1, [pc, #72]	@ (8007880 <HAL_RCC_ClockConfig+0x2e8>)
 8007836:	4313      	orrs	r3, r2
 8007838:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800783a:	f000 f829 	bl	8007890 <HAL_RCC_GetSysClockFreq>
 800783e:	4601      	mov	r1, r0
 8007840:	4b0f      	ldr	r3, [pc, #60]	@ (8007880 <HAL_RCC_ClockConfig+0x2e8>)
 8007842:	685b      	ldr	r3, [r3, #4]
 8007844:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007848:	22f0      	movs	r2, #240	@ 0xf0
 800784a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800784c:	693a      	ldr	r2, [r7, #16]
 800784e:	fa92 f2a2 	rbit	r2, r2
 8007852:	60fa      	str	r2, [r7, #12]
  return result;
 8007854:	68fa      	ldr	r2, [r7, #12]
 8007856:	fab2 f282 	clz	r2, r2
 800785a:	b2d2      	uxtb	r2, r2
 800785c:	40d3      	lsrs	r3, r2
 800785e:	4a09      	ldr	r2, [pc, #36]	@ (8007884 <HAL_RCC_ClockConfig+0x2ec>)
 8007860:	5cd3      	ldrb	r3, [r2, r3]
 8007862:	fa21 f303 	lsr.w	r3, r1, r3
 8007866:	4a08      	ldr	r2, [pc, #32]	@ (8007888 <HAL_RCC_ClockConfig+0x2f0>)
 8007868:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800786a:	4b08      	ldr	r3, [pc, #32]	@ (800788c <HAL_RCC_ClockConfig+0x2f4>)
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	4618      	mov	r0, r3
 8007870:	f7fc f82a 	bl	80038c8 <HAL_InitTick>
  
  return HAL_OK;
 8007874:	2300      	movs	r3, #0
}
 8007876:	4618      	mov	r0, r3
 8007878:	3778      	adds	r7, #120	@ 0x78
 800787a:	46bd      	mov	sp, r7
 800787c:	bd80      	pop	{r7, pc}
 800787e:	bf00      	nop
 8007880:	40021000 	.word	0x40021000
 8007884:	0800e2d0 	.word	0x0800e2d0
 8007888:	20000050 	.word	0x20000050
 800788c:	20000054 	.word	0x20000054

08007890 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007890:	b480      	push	{r7}
 8007892:	b08b      	sub	sp, #44	@ 0x2c
 8007894:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8007896:	2300      	movs	r3, #0
 8007898:	61fb      	str	r3, [r7, #28]
 800789a:	2300      	movs	r3, #0
 800789c:	61bb      	str	r3, [r7, #24]
 800789e:	2300      	movs	r3, #0
 80078a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80078a2:	2300      	movs	r3, #0
 80078a4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80078a6:	2300      	movs	r3, #0
 80078a8:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80078aa:	4b29      	ldr	r3, [pc, #164]	@ (8007950 <HAL_RCC_GetSysClockFreq+0xc0>)
 80078ac:	685b      	ldr	r3, [r3, #4]
 80078ae:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80078b0:	69fb      	ldr	r3, [r7, #28]
 80078b2:	f003 030c 	and.w	r3, r3, #12
 80078b6:	2b04      	cmp	r3, #4
 80078b8:	d002      	beq.n	80078c0 <HAL_RCC_GetSysClockFreq+0x30>
 80078ba:	2b08      	cmp	r3, #8
 80078bc:	d003      	beq.n	80078c6 <HAL_RCC_GetSysClockFreq+0x36>
 80078be:	e03c      	b.n	800793a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80078c0:	4b24      	ldr	r3, [pc, #144]	@ (8007954 <HAL_RCC_GetSysClockFreq+0xc4>)
 80078c2:	623b      	str	r3, [r7, #32]
      break;
 80078c4:	e03c      	b.n	8007940 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80078c6:	69fb      	ldr	r3, [r7, #28]
 80078c8:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 80078cc:	f44f 1270 	mov.w	r2, #3932160	@ 0x3c0000
 80078d0:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80078d2:	68ba      	ldr	r2, [r7, #8]
 80078d4:	fa92 f2a2 	rbit	r2, r2
 80078d8:	607a      	str	r2, [r7, #4]
  return result;
 80078da:	687a      	ldr	r2, [r7, #4]
 80078dc:	fab2 f282 	clz	r2, r2
 80078e0:	b2d2      	uxtb	r2, r2
 80078e2:	40d3      	lsrs	r3, r2
 80078e4:	4a1c      	ldr	r2, [pc, #112]	@ (8007958 <HAL_RCC_GetSysClockFreq+0xc8>)
 80078e6:	5cd3      	ldrb	r3, [r2, r3]
 80078e8:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80078ea:	4b19      	ldr	r3, [pc, #100]	@ (8007950 <HAL_RCC_GetSysClockFreq+0xc0>)
 80078ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078ee:	f003 030f 	and.w	r3, r3, #15
 80078f2:	220f      	movs	r2, #15
 80078f4:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80078f6:	693a      	ldr	r2, [r7, #16]
 80078f8:	fa92 f2a2 	rbit	r2, r2
 80078fc:	60fa      	str	r2, [r7, #12]
  return result;
 80078fe:	68fa      	ldr	r2, [r7, #12]
 8007900:	fab2 f282 	clz	r2, r2
 8007904:	b2d2      	uxtb	r2, r2
 8007906:	40d3      	lsrs	r3, r2
 8007908:	4a14      	ldr	r2, [pc, #80]	@ (800795c <HAL_RCC_GetSysClockFreq+0xcc>)
 800790a:	5cd3      	ldrb	r3, [r2, r3]
 800790c:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800790e:	69fb      	ldr	r3, [r7, #28]
 8007910:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007914:	2b00      	cmp	r3, #0
 8007916:	d008      	beq.n	800792a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8007918:	4a0e      	ldr	r2, [pc, #56]	@ (8007954 <HAL_RCC_GetSysClockFreq+0xc4>)
 800791a:	69bb      	ldr	r3, [r7, #24]
 800791c:	fbb2 f2f3 	udiv	r2, r2, r3
 8007920:	697b      	ldr	r3, [r7, #20]
 8007922:	fb02 f303 	mul.w	r3, r2, r3
 8007926:	627b      	str	r3, [r7, #36]	@ 0x24
 8007928:	e004      	b.n	8007934 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800792a:	697b      	ldr	r3, [r7, #20]
 800792c:	4a0c      	ldr	r2, [pc, #48]	@ (8007960 <HAL_RCC_GetSysClockFreq+0xd0>)
 800792e:	fb02 f303 	mul.w	r3, r2, r3
 8007932:	627b      	str	r3, [r7, #36]	@ 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8007934:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007936:	623b      	str	r3, [r7, #32]
      break;
 8007938:	e002      	b.n	8007940 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800793a:	4b06      	ldr	r3, [pc, #24]	@ (8007954 <HAL_RCC_GetSysClockFreq+0xc4>)
 800793c:	623b      	str	r3, [r7, #32]
      break;
 800793e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007940:	6a3b      	ldr	r3, [r7, #32]
}
 8007942:	4618      	mov	r0, r3
 8007944:	372c      	adds	r7, #44	@ 0x2c
 8007946:	46bd      	mov	sp, r7
 8007948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794c:	4770      	bx	lr
 800794e:	bf00      	nop
 8007950:	40021000 	.word	0x40021000
 8007954:	007a1200 	.word	0x007a1200
 8007958:	0800e2e8 	.word	0x0800e2e8
 800795c:	0800e2f8 	.word	0x0800e2f8
 8007960:	003d0900 	.word	0x003d0900

08007964 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007964:	b480      	push	{r7}
 8007966:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007968:	4b03      	ldr	r3, [pc, #12]	@ (8007978 <HAL_RCC_GetHCLKFreq+0x14>)
 800796a:	681b      	ldr	r3, [r3, #0]
}
 800796c:	4618      	mov	r0, r3
 800796e:	46bd      	mov	sp, r7
 8007970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007974:	4770      	bx	lr
 8007976:	bf00      	nop
 8007978:	20000050 	.word	0x20000050

0800797c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800797c:	b580      	push	{r7, lr}
 800797e:	b082      	sub	sp, #8
 8007980:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8007982:	f7ff ffef 	bl	8007964 <HAL_RCC_GetHCLKFreq>
 8007986:	4601      	mov	r1, r0
 8007988:	4b0b      	ldr	r3, [pc, #44]	@ (80079b8 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800798a:	685b      	ldr	r3, [r3, #4]
 800798c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007990:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8007994:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007996:	687a      	ldr	r2, [r7, #4]
 8007998:	fa92 f2a2 	rbit	r2, r2
 800799c:	603a      	str	r2, [r7, #0]
  return result;
 800799e:	683a      	ldr	r2, [r7, #0]
 80079a0:	fab2 f282 	clz	r2, r2
 80079a4:	b2d2      	uxtb	r2, r2
 80079a6:	40d3      	lsrs	r3, r2
 80079a8:	4a04      	ldr	r2, [pc, #16]	@ (80079bc <HAL_RCC_GetPCLK1Freq+0x40>)
 80079aa:	5cd3      	ldrb	r3, [r2, r3]
 80079ac:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80079b0:	4618      	mov	r0, r3
 80079b2:	3708      	adds	r7, #8
 80079b4:	46bd      	mov	sp, r7
 80079b6:	bd80      	pop	{r7, pc}
 80079b8:	40021000 	.word	0x40021000
 80079bc:	0800e2e0 	.word	0x0800e2e0

080079c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80079c0:	b580      	push	{r7, lr}
 80079c2:	b082      	sub	sp, #8
 80079c4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80079c6:	f7ff ffcd 	bl	8007964 <HAL_RCC_GetHCLKFreq>
 80079ca:	4601      	mov	r1, r0
 80079cc:	4b0b      	ldr	r3, [pc, #44]	@ (80079fc <HAL_RCC_GetPCLK2Freq+0x3c>)
 80079ce:	685b      	ldr	r3, [r3, #4]
 80079d0:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 80079d4:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 80079d8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80079da:	687a      	ldr	r2, [r7, #4]
 80079dc:	fa92 f2a2 	rbit	r2, r2
 80079e0:	603a      	str	r2, [r7, #0]
  return result;
 80079e2:	683a      	ldr	r2, [r7, #0]
 80079e4:	fab2 f282 	clz	r2, r2
 80079e8:	b2d2      	uxtb	r2, r2
 80079ea:	40d3      	lsrs	r3, r2
 80079ec:	4a04      	ldr	r2, [pc, #16]	@ (8007a00 <HAL_RCC_GetPCLK2Freq+0x40>)
 80079ee:	5cd3      	ldrb	r3, [r2, r3]
 80079f0:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80079f4:	4618      	mov	r0, r3
 80079f6:	3708      	adds	r7, #8
 80079f8:	46bd      	mov	sp, r7
 80079fa:	bd80      	pop	{r7, pc}
 80079fc:	40021000 	.word	0x40021000
 8007a00:	0800e2e0 	.word	0x0800e2e0

08007a04 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007a04:	b580      	push	{r7, lr}
 8007a06:	b092      	sub	sp, #72	@ 0x48
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007a0c:	2300      	movs	r3, #0
 8007a0e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8007a10:	2300      	movs	r3, #0
 8007a12:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8007a14:	2300      	movs	r3, #0
 8007a16:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	f000 80d4 	beq.w	8007bd0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007a28:	4b4e      	ldr	r3, [pc, #312]	@ (8007b64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007a2a:	69db      	ldr	r3, [r3, #28]
 8007a2c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d10e      	bne.n	8007a52 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007a34:	4b4b      	ldr	r3, [pc, #300]	@ (8007b64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007a36:	69db      	ldr	r3, [r3, #28]
 8007a38:	4a4a      	ldr	r2, [pc, #296]	@ (8007b64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007a3a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007a3e:	61d3      	str	r3, [r2, #28]
 8007a40:	4b48      	ldr	r3, [pc, #288]	@ (8007b64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007a42:	69db      	ldr	r3, [r3, #28]
 8007a44:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007a48:	60bb      	str	r3, [r7, #8]
 8007a4a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007a4c:	2301      	movs	r3, #1
 8007a4e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007a52:	4b45      	ldr	r3, [pc, #276]	@ (8007b68 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d118      	bne.n	8007a90 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007a5e:	4b42      	ldr	r3, [pc, #264]	@ (8007b68 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	4a41      	ldr	r2, [pc, #260]	@ (8007b68 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007a64:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007a68:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007a6a:	f7fb ff71 	bl	8003950 <HAL_GetTick>
 8007a6e:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007a70:	e008      	b.n	8007a84 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007a72:	f7fb ff6d 	bl	8003950 <HAL_GetTick>
 8007a76:	4602      	mov	r2, r0
 8007a78:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007a7a:	1ad3      	subs	r3, r2, r3
 8007a7c:	2b64      	cmp	r3, #100	@ 0x64
 8007a7e:	d901      	bls.n	8007a84 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8007a80:	2303      	movs	r3, #3
 8007a82:	e14b      	b.n	8007d1c <HAL_RCCEx_PeriphCLKConfig+0x318>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007a84:	4b38      	ldr	r3, [pc, #224]	@ (8007b68 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d0f0      	beq.n	8007a72 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007a90:	4b34      	ldr	r3, [pc, #208]	@ (8007b64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007a92:	6a1b      	ldr	r3, [r3, #32]
 8007a94:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007a98:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007a9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	f000 8084 	beq.w	8007baa <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	685b      	ldr	r3, [r3, #4]
 8007aa6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007aaa:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8007aac:	429a      	cmp	r2, r3
 8007aae:	d07c      	beq.n	8007baa <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007ab0:	4b2c      	ldr	r3, [pc, #176]	@ (8007b64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007ab2:	6a1b      	ldr	r3, [r3, #32]
 8007ab4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007ab8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007aba:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8007abe:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007ac0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ac2:	fa93 f3a3 	rbit	r3, r3
 8007ac6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8007ac8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007aca:	fab3 f383 	clz	r3, r3
 8007ace:	b2db      	uxtb	r3, r3
 8007ad0:	461a      	mov	r2, r3
 8007ad2:	4b26      	ldr	r3, [pc, #152]	@ (8007b6c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007ad4:	4413      	add	r3, r2
 8007ad6:	009b      	lsls	r3, r3, #2
 8007ad8:	461a      	mov	r2, r3
 8007ada:	2301      	movs	r3, #1
 8007adc:	6013      	str	r3, [r2, #0]
 8007ade:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8007ae2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007ae4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ae6:	fa93 f3a3 	rbit	r3, r3
 8007aea:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8007aec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007aee:	fab3 f383 	clz	r3, r3
 8007af2:	b2db      	uxtb	r3, r3
 8007af4:	461a      	mov	r2, r3
 8007af6:	4b1d      	ldr	r3, [pc, #116]	@ (8007b6c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007af8:	4413      	add	r3, r2
 8007afa:	009b      	lsls	r3, r3, #2
 8007afc:	461a      	mov	r2, r3
 8007afe:	2300      	movs	r3, #0
 8007b00:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8007b02:	4a18      	ldr	r2, [pc, #96]	@ (8007b64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007b04:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007b06:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8007b08:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007b0a:	f003 0301 	and.w	r3, r3, #1
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d04b      	beq.n	8007baa <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007b12:	f7fb ff1d 	bl	8003950 <HAL_GetTick>
 8007b16:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007b18:	e00a      	b.n	8007b30 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007b1a:	f7fb ff19 	bl	8003950 <HAL_GetTick>
 8007b1e:	4602      	mov	r2, r0
 8007b20:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007b22:	1ad3      	subs	r3, r2, r3
 8007b24:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007b28:	4293      	cmp	r3, r2
 8007b2a:	d901      	bls.n	8007b30 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8007b2c:	2303      	movs	r3, #3
 8007b2e:	e0f5      	b.n	8007d1c <HAL_RCCEx_PeriphCLKConfig+0x318>
 8007b30:	2302      	movs	r3, #2
 8007b32:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007b34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b36:	fa93 f3a3 	rbit	r3, r3
 8007b3a:	627b      	str	r3, [r7, #36]	@ 0x24
 8007b3c:	2302      	movs	r3, #2
 8007b3e:	623b      	str	r3, [r7, #32]
 8007b40:	6a3b      	ldr	r3, [r7, #32]
 8007b42:	fa93 f3a3 	rbit	r3, r3
 8007b46:	61fb      	str	r3, [r7, #28]
  return result;
 8007b48:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007b4a:	fab3 f383 	clz	r3, r3
 8007b4e:	b2db      	uxtb	r3, r3
 8007b50:	095b      	lsrs	r3, r3, #5
 8007b52:	b2db      	uxtb	r3, r3
 8007b54:	f043 0302 	orr.w	r3, r3, #2
 8007b58:	b2db      	uxtb	r3, r3
 8007b5a:	2b02      	cmp	r3, #2
 8007b5c:	d108      	bne.n	8007b70 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8007b5e:	4b01      	ldr	r3, [pc, #4]	@ (8007b64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007b60:	6a1b      	ldr	r3, [r3, #32]
 8007b62:	e00d      	b.n	8007b80 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8007b64:	40021000 	.word	0x40021000
 8007b68:	40007000 	.word	0x40007000
 8007b6c:	10908100 	.word	0x10908100
 8007b70:	2302      	movs	r3, #2
 8007b72:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007b74:	69bb      	ldr	r3, [r7, #24]
 8007b76:	fa93 f3a3 	rbit	r3, r3
 8007b7a:	617b      	str	r3, [r7, #20]
 8007b7c:	4b69      	ldr	r3, [pc, #420]	@ (8007d24 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8007b7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b80:	2202      	movs	r2, #2
 8007b82:	613a      	str	r2, [r7, #16]
 8007b84:	693a      	ldr	r2, [r7, #16]
 8007b86:	fa92 f2a2 	rbit	r2, r2
 8007b8a:	60fa      	str	r2, [r7, #12]
  return result;
 8007b8c:	68fa      	ldr	r2, [r7, #12]
 8007b8e:	fab2 f282 	clz	r2, r2
 8007b92:	b2d2      	uxtb	r2, r2
 8007b94:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007b98:	b2d2      	uxtb	r2, r2
 8007b9a:	f002 021f 	and.w	r2, r2, #31
 8007b9e:	2101      	movs	r1, #1
 8007ba0:	fa01 f202 	lsl.w	r2, r1, r2
 8007ba4:	4013      	ands	r3, r2
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d0b7      	beq.n	8007b1a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8007baa:	4b5e      	ldr	r3, [pc, #376]	@ (8007d24 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8007bac:	6a1b      	ldr	r3, [r3, #32]
 8007bae:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	685b      	ldr	r3, [r3, #4]
 8007bb6:	495b      	ldr	r1, [pc, #364]	@ (8007d24 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8007bb8:	4313      	orrs	r3, r2
 8007bba:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8007bbc:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8007bc0:	2b01      	cmp	r3, #1
 8007bc2:	d105      	bne.n	8007bd0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007bc4:	4b57      	ldr	r3, [pc, #348]	@ (8007d24 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8007bc6:	69db      	ldr	r3, [r3, #28]
 8007bc8:	4a56      	ldr	r2, [pc, #344]	@ (8007d24 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8007bca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007bce:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	f003 0301 	and.w	r3, r3, #1
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d008      	beq.n	8007bee <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007bdc:	4b51      	ldr	r3, [pc, #324]	@ (8007d24 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8007bde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007be0:	f023 0203 	bic.w	r2, r3, #3
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	689b      	ldr	r3, [r3, #8]
 8007be8:	494e      	ldr	r1, [pc, #312]	@ (8007d24 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8007bea:	4313      	orrs	r3, r2
 8007bec:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	f003 0302 	and.w	r3, r3, #2
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d008      	beq.n	8007c0c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007bfa:	4b4a      	ldr	r3, [pc, #296]	@ (8007d24 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8007bfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007bfe:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	68db      	ldr	r3, [r3, #12]
 8007c06:	4947      	ldr	r1, [pc, #284]	@ (8007d24 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8007c08:	4313      	orrs	r3, r2
 8007c0a:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	f003 0304 	and.w	r3, r3, #4
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d008      	beq.n	8007c2a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007c18:	4b42      	ldr	r3, [pc, #264]	@ (8007d24 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8007c1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c1c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	691b      	ldr	r3, [r3, #16]
 8007c24:	493f      	ldr	r1, [pc, #252]	@ (8007d24 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8007c26:	4313      	orrs	r3, r2
 8007c28:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	f003 0320 	and.w	r3, r3, #32
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d008      	beq.n	8007c48 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007c36:	4b3b      	ldr	r3, [pc, #236]	@ (8007d24 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8007c38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c3a:	f023 0210 	bic.w	r2, r3, #16
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	69db      	ldr	r3, [r3, #28]
 8007c42:	4938      	ldr	r1, [pc, #224]	@ (8007d24 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8007c44:	4313      	orrs	r3, r2
 8007c46:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d008      	beq.n	8007c66 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8007c54:	4b33      	ldr	r3, [pc, #204]	@ (8007d24 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8007c56:	685b      	ldr	r3, [r3, #4]
 8007c58:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c60:	4930      	ldr	r1, [pc, #192]	@ (8007d24 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8007c62:	4313      	orrs	r3, r2
 8007c64:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d008      	beq.n	8007c84 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007c72:	4b2c      	ldr	r3, [pc, #176]	@ (8007d24 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8007c74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c76:	f023 0220 	bic.w	r2, r3, #32
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	6a1b      	ldr	r3, [r3, #32]
 8007c7e:	4929      	ldr	r1, [pc, #164]	@ (8007d24 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8007c80:	4313      	orrs	r3, r2
 8007c82:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	f003 0308 	and.w	r3, r3, #8
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d008      	beq.n	8007ca2 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007c90:	4b24      	ldr	r3, [pc, #144]	@ (8007d24 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8007c92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c94:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	695b      	ldr	r3, [r3, #20]
 8007c9c:	4921      	ldr	r1, [pc, #132]	@ (8007d24 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8007c9e:	4313      	orrs	r3, r2
 8007ca0:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	f003 0310 	and.w	r3, r3, #16
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d008      	beq.n	8007cc0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007cae:	4b1d      	ldr	r3, [pc, #116]	@ (8007d24 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8007cb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007cb2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	699b      	ldr	r3, [r3, #24]
 8007cba:	491a      	ldr	r1, [pc, #104]	@ (8007d24 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8007cbc:	4313      	orrs	r3, r2
 8007cbe:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d008      	beq.n	8007cde <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007ccc:	4b15      	ldr	r3, [pc, #84]	@ (8007d24 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8007cce:	685b      	ldr	r3, [r3, #4]
 8007cd0:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007cd8:	4912      	ldr	r1, [pc, #72]	@ (8007d24 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8007cda:	4313      	orrs	r3, r2
 8007cdc:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d008      	beq.n	8007cfc <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8007cea:	4b0e      	ldr	r3, [pc, #56]	@ (8007d24 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8007cec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cee:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007cf6:	490b      	ldr	r1, [pc, #44]	@ (8007d24 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8007cf8:	4313      	orrs	r3, r2
 8007cfa:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d008      	beq.n	8007d1a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8007d08:	4b06      	ldr	r3, [pc, #24]	@ (8007d24 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8007d0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d0c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d14:	4903      	ldr	r1, [pc, #12]	@ (8007d24 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8007d16:	4313      	orrs	r3, r2
 8007d18:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8007d1a:	2300      	movs	r3, #0
}
 8007d1c:	4618      	mov	r0, r3
 8007d1e:	3748      	adds	r7, #72	@ 0x48
 8007d20:	46bd      	mov	sp, r7
 8007d22:	bd80      	pop	{r7, pc}
 8007d24:	40021000 	.word	0x40021000

08007d28 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007d28:	b580      	push	{r7, lr}
 8007d2a:	b084      	sub	sp, #16
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d101      	bne.n	8007d3a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007d36:	2301      	movs	r3, #1
 8007d38:	e09d      	b.n	8007e76 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d108      	bne.n	8007d54 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	685b      	ldr	r3, [r3, #4]
 8007d46:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007d4a:	d009      	beq.n	8007d60 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	2200      	movs	r2, #0
 8007d50:	61da      	str	r2, [r3, #28]
 8007d52:	e005      	b.n	8007d60 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	2200      	movs	r2, #0
 8007d58:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	2200      	movs	r2, #0
 8007d5e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	2200      	movs	r2, #0
 8007d64:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007d6c:	b2db      	uxtb	r3, r3
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d106      	bne.n	8007d80 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	2200      	movs	r2, #0
 8007d76:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007d7a:	6878      	ldr	r0, [r7, #4]
 8007d7c:	f7fa f89c 	bl	8001eb8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	2202      	movs	r2, #2
 8007d84:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	681a      	ldr	r2, [r3, #0]
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007d96:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	68db      	ldr	r3, [r3, #12]
 8007d9c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007da0:	d902      	bls.n	8007da8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007da2:	2300      	movs	r3, #0
 8007da4:	60fb      	str	r3, [r7, #12]
 8007da6:	e002      	b.n	8007dae <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007da8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007dac:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	68db      	ldr	r3, [r3, #12]
 8007db2:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8007db6:	d007      	beq.n	8007dc8 <HAL_SPI_Init+0xa0>
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	68db      	ldr	r3, [r3, #12]
 8007dbc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007dc0:	d002      	beq.n	8007dc8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	2200      	movs	r2, #0
 8007dc6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	685b      	ldr	r3, [r3, #4]
 8007dcc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	689b      	ldr	r3, [r3, #8]
 8007dd4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8007dd8:	431a      	orrs	r2, r3
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	691b      	ldr	r3, [r3, #16]
 8007dde:	f003 0302 	and.w	r3, r3, #2
 8007de2:	431a      	orrs	r2, r3
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	695b      	ldr	r3, [r3, #20]
 8007de8:	f003 0301 	and.w	r3, r3, #1
 8007dec:	431a      	orrs	r2, r3
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	699b      	ldr	r3, [r3, #24]
 8007df2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007df6:	431a      	orrs	r2, r3
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	69db      	ldr	r3, [r3, #28]
 8007dfc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007e00:	431a      	orrs	r2, r3
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	6a1b      	ldr	r3, [r3, #32]
 8007e06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007e0a:	ea42 0103 	orr.w	r1, r2, r3
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e12:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	430a      	orrs	r2, r1
 8007e1c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	699b      	ldr	r3, [r3, #24]
 8007e22:	0c1b      	lsrs	r3, r3, #16
 8007e24:	f003 0204 	and.w	r2, r3, #4
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e2c:	f003 0310 	and.w	r3, r3, #16
 8007e30:	431a      	orrs	r2, r3
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007e36:	f003 0308 	and.w	r3, r3, #8
 8007e3a:	431a      	orrs	r2, r3
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	68db      	ldr	r3, [r3, #12]
 8007e40:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8007e44:	ea42 0103 	orr.w	r1, r2, r3
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	430a      	orrs	r2, r1
 8007e54:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	69da      	ldr	r2, [r3, #28]
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007e64:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	2200      	movs	r2, #0
 8007e6a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	2201      	movs	r2, #1
 8007e70:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8007e74:	2300      	movs	r3, #0
}
 8007e76:	4618      	mov	r0, r3
 8007e78:	3710      	adds	r7, #16
 8007e7a:	46bd      	mov	sp, r7
 8007e7c:	bd80      	pop	{r7, pc}

08007e7e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007e7e:	b580      	push	{r7, lr}
 8007e80:	b082      	sub	sp, #8
 8007e82:	af00      	add	r7, sp, #0
 8007e84:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d101      	bne.n	8007e90 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007e8c:	2301      	movs	r3, #1
 8007e8e:	e049      	b.n	8007f24 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007e96:	b2db      	uxtb	r3, r3
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d106      	bne.n	8007eaa <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	2200      	movs	r2, #0
 8007ea0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007ea4:	6878      	ldr	r0, [r7, #4]
 8007ea6:	f7fa f84b 	bl	8001f40 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	2202      	movs	r2, #2
 8007eae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681a      	ldr	r2, [r3, #0]
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	3304      	adds	r3, #4
 8007eba:	4619      	mov	r1, r3
 8007ebc:	4610      	mov	r0, r2
 8007ebe:	f000 fa6b 	bl	8008398 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	2201      	movs	r2, #1
 8007ec6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	2201      	movs	r2, #1
 8007ece:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	2201      	movs	r2, #1
 8007ed6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	2201      	movs	r2, #1
 8007ede:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	2201      	movs	r2, #1
 8007ee6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	2201      	movs	r2, #1
 8007eee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	2201      	movs	r2, #1
 8007ef6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	2201      	movs	r2, #1
 8007efe:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	2201      	movs	r2, #1
 8007f06:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	2201      	movs	r2, #1
 8007f0e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	2201      	movs	r2, #1
 8007f16:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	2201      	movs	r2, #1
 8007f1e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007f22:	2300      	movs	r3, #0
}
 8007f24:	4618      	mov	r0, r3
 8007f26:	3708      	adds	r7, #8
 8007f28:	46bd      	mov	sp, r7
 8007f2a:	bd80      	pop	{r7, pc}

08007f2c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007f2c:	b480      	push	{r7}
 8007f2e:	b085      	sub	sp, #20
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007f3a:	b2db      	uxtb	r3, r3
 8007f3c:	2b01      	cmp	r3, #1
 8007f3e:	d001      	beq.n	8007f44 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007f40:	2301      	movs	r3, #1
 8007f42:	e03d      	b.n	8007fc0 <HAL_TIM_Base_Start+0x94>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	2202      	movs	r2, #2
 8007f48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	4a1e      	ldr	r2, [pc, #120]	@ (8007fcc <HAL_TIM_Base_Start+0xa0>)
 8007f52:	4293      	cmp	r3, r2
 8007f54:	d013      	beq.n	8007f7e <HAL_TIM_Base_Start+0x52>
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007f5e:	d00e      	beq.n	8007f7e <HAL_TIM_Base_Start+0x52>
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	4a1a      	ldr	r2, [pc, #104]	@ (8007fd0 <HAL_TIM_Base_Start+0xa4>)
 8007f66:	4293      	cmp	r3, r2
 8007f68:	d009      	beq.n	8007f7e <HAL_TIM_Base_Start+0x52>
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	4a19      	ldr	r2, [pc, #100]	@ (8007fd4 <HAL_TIM_Base_Start+0xa8>)
 8007f70:	4293      	cmp	r3, r2
 8007f72:	d004      	beq.n	8007f7e <HAL_TIM_Base_Start+0x52>
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	4a17      	ldr	r2, [pc, #92]	@ (8007fd8 <HAL_TIM_Base_Start+0xac>)
 8007f7a:	4293      	cmp	r3, r2
 8007f7c:	d115      	bne.n	8007faa <HAL_TIM_Base_Start+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	689a      	ldr	r2, [r3, #8]
 8007f84:	4b15      	ldr	r3, [pc, #84]	@ (8007fdc <HAL_TIM_Base_Start+0xb0>)
 8007f86:	4013      	ands	r3, r2
 8007f88:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	2b06      	cmp	r3, #6
 8007f8e:	d015      	beq.n	8007fbc <HAL_TIM_Base_Start+0x90>
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007f96:	d011      	beq.n	8007fbc <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	681a      	ldr	r2, [r3, #0]
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	f042 0201 	orr.w	r2, r2, #1
 8007fa6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007fa8:	e008      	b.n	8007fbc <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	681a      	ldr	r2, [r3, #0]
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	f042 0201 	orr.w	r2, r2, #1
 8007fb8:	601a      	str	r2, [r3, #0]
 8007fba:	e000      	b.n	8007fbe <HAL_TIM_Base_Start+0x92>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007fbc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007fbe:	2300      	movs	r3, #0
}
 8007fc0:	4618      	mov	r0, r3
 8007fc2:	3714      	adds	r7, #20
 8007fc4:	46bd      	mov	sp, r7
 8007fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fca:	4770      	bx	lr
 8007fcc:	40012c00 	.word	0x40012c00
 8007fd0:	40000400 	.word	0x40000400
 8007fd4:	40000800 	.word	0x40000800
 8007fd8:	40014000 	.word	0x40014000
 8007fdc:	00010007 	.word	0x00010007

08007fe0 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8007fe0:	b480      	push	{r7}
 8007fe2:	b083      	sub	sp, #12
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	6a1a      	ldr	r2, [r3, #32]
 8007fee:	f241 1311 	movw	r3, #4369	@ 0x1111
 8007ff2:	4013      	ands	r3, r2
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d10f      	bne.n	8008018 <HAL_TIM_Base_Stop+0x38>
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	6a1a      	ldr	r2, [r3, #32]
 8007ffe:	f240 4344 	movw	r3, #1092	@ 0x444
 8008002:	4013      	ands	r3, r2
 8008004:	2b00      	cmp	r3, #0
 8008006:	d107      	bne.n	8008018 <HAL_TIM_Base_Stop+0x38>
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	681a      	ldr	r2, [r3, #0]
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	f022 0201 	bic.w	r2, r2, #1
 8008016:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	2201      	movs	r2, #1
 800801c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8008020:	2300      	movs	r3, #0
}
 8008022:	4618      	mov	r0, r3
 8008024:	370c      	adds	r7, #12
 8008026:	46bd      	mov	sp, r7
 8008028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802c:	4770      	bx	lr
	...

08008030 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008030:	b480      	push	{r7}
 8008032:	b085      	sub	sp, #20
 8008034:	af00      	add	r7, sp, #0
 8008036:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800803e:	b2db      	uxtb	r3, r3
 8008040:	2b01      	cmp	r3, #1
 8008042:	d001      	beq.n	8008048 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008044:	2301      	movs	r3, #1
 8008046:	e045      	b.n	80080d4 <HAL_TIM_Base_Start_IT+0xa4>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	2202      	movs	r2, #2
 800804c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	68da      	ldr	r2, [r3, #12]
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	f042 0201 	orr.w	r2, r2, #1
 800805e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	4a1e      	ldr	r2, [pc, #120]	@ (80080e0 <HAL_TIM_Base_Start_IT+0xb0>)
 8008066:	4293      	cmp	r3, r2
 8008068:	d013      	beq.n	8008092 <HAL_TIM_Base_Start_IT+0x62>
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008072:	d00e      	beq.n	8008092 <HAL_TIM_Base_Start_IT+0x62>
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	4a1a      	ldr	r2, [pc, #104]	@ (80080e4 <HAL_TIM_Base_Start_IT+0xb4>)
 800807a:	4293      	cmp	r3, r2
 800807c:	d009      	beq.n	8008092 <HAL_TIM_Base_Start_IT+0x62>
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	4a19      	ldr	r2, [pc, #100]	@ (80080e8 <HAL_TIM_Base_Start_IT+0xb8>)
 8008084:	4293      	cmp	r3, r2
 8008086:	d004      	beq.n	8008092 <HAL_TIM_Base_Start_IT+0x62>
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	4a17      	ldr	r2, [pc, #92]	@ (80080ec <HAL_TIM_Base_Start_IT+0xbc>)
 800808e:	4293      	cmp	r3, r2
 8008090:	d115      	bne.n	80080be <HAL_TIM_Base_Start_IT+0x8e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	689a      	ldr	r2, [r3, #8]
 8008098:	4b15      	ldr	r3, [pc, #84]	@ (80080f0 <HAL_TIM_Base_Start_IT+0xc0>)
 800809a:	4013      	ands	r3, r2
 800809c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	2b06      	cmp	r3, #6
 80080a2:	d015      	beq.n	80080d0 <HAL_TIM_Base_Start_IT+0xa0>
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80080aa:	d011      	beq.n	80080d0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	681a      	ldr	r2, [r3, #0]
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	f042 0201 	orr.w	r2, r2, #1
 80080ba:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80080bc:	e008      	b.n	80080d0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	681a      	ldr	r2, [r3, #0]
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	f042 0201 	orr.w	r2, r2, #1
 80080cc:	601a      	str	r2, [r3, #0]
 80080ce:	e000      	b.n	80080d2 <HAL_TIM_Base_Start_IT+0xa2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80080d0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80080d2:	2300      	movs	r3, #0
}
 80080d4:	4618      	mov	r0, r3
 80080d6:	3714      	adds	r7, #20
 80080d8:	46bd      	mov	sp, r7
 80080da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080de:	4770      	bx	lr
 80080e0:	40012c00 	.word	0x40012c00
 80080e4:	40000400 	.word	0x40000400
 80080e8:	40000800 	.word	0x40000800
 80080ec:	40014000 	.word	0x40014000
 80080f0:	00010007 	.word	0x00010007

080080f4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80080f4:	b580      	push	{r7, lr}
 80080f6:	b082      	sub	sp, #8
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	691b      	ldr	r3, [r3, #16]
 8008102:	f003 0302 	and.w	r3, r3, #2
 8008106:	2b02      	cmp	r3, #2
 8008108:	d122      	bne.n	8008150 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	68db      	ldr	r3, [r3, #12]
 8008110:	f003 0302 	and.w	r3, r3, #2
 8008114:	2b02      	cmp	r3, #2
 8008116:	d11b      	bne.n	8008150 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	f06f 0202 	mvn.w	r2, #2
 8008120:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	2201      	movs	r2, #1
 8008126:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	699b      	ldr	r3, [r3, #24]
 800812e:	f003 0303 	and.w	r3, r3, #3
 8008132:	2b00      	cmp	r3, #0
 8008134:	d003      	beq.n	800813e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008136:	6878      	ldr	r0, [r7, #4]
 8008138:	f000 f90f 	bl	800835a <HAL_TIM_IC_CaptureCallback>
 800813c:	e005      	b.n	800814a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800813e:	6878      	ldr	r0, [r7, #4]
 8008140:	f000 f901 	bl	8008346 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008144:	6878      	ldr	r0, [r7, #4]
 8008146:	f000 f912 	bl	800836e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	2200      	movs	r2, #0
 800814e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	691b      	ldr	r3, [r3, #16]
 8008156:	f003 0304 	and.w	r3, r3, #4
 800815a:	2b04      	cmp	r3, #4
 800815c:	d122      	bne.n	80081a4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	68db      	ldr	r3, [r3, #12]
 8008164:	f003 0304 	and.w	r3, r3, #4
 8008168:	2b04      	cmp	r3, #4
 800816a:	d11b      	bne.n	80081a4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	f06f 0204 	mvn.w	r2, #4
 8008174:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	2202      	movs	r2, #2
 800817a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	699b      	ldr	r3, [r3, #24]
 8008182:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008186:	2b00      	cmp	r3, #0
 8008188:	d003      	beq.n	8008192 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800818a:	6878      	ldr	r0, [r7, #4]
 800818c:	f000 f8e5 	bl	800835a <HAL_TIM_IC_CaptureCallback>
 8008190:	e005      	b.n	800819e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008192:	6878      	ldr	r0, [r7, #4]
 8008194:	f000 f8d7 	bl	8008346 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008198:	6878      	ldr	r0, [r7, #4]
 800819a:	f000 f8e8 	bl	800836e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	2200      	movs	r2, #0
 80081a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	691b      	ldr	r3, [r3, #16]
 80081aa:	f003 0308 	and.w	r3, r3, #8
 80081ae:	2b08      	cmp	r3, #8
 80081b0:	d122      	bne.n	80081f8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	68db      	ldr	r3, [r3, #12]
 80081b8:	f003 0308 	and.w	r3, r3, #8
 80081bc:	2b08      	cmp	r3, #8
 80081be:	d11b      	bne.n	80081f8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	f06f 0208 	mvn.w	r2, #8
 80081c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	2204      	movs	r2, #4
 80081ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	69db      	ldr	r3, [r3, #28]
 80081d6:	f003 0303 	and.w	r3, r3, #3
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d003      	beq.n	80081e6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80081de:	6878      	ldr	r0, [r7, #4]
 80081e0:	f000 f8bb 	bl	800835a <HAL_TIM_IC_CaptureCallback>
 80081e4:	e005      	b.n	80081f2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80081e6:	6878      	ldr	r0, [r7, #4]
 80081e8:	f000 f8ad 	bl	8008346 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80081ec:	6878      	ldr	r0, [r7, #4]
 80081ee:	f000 f8be 	bl	800836e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	2200      	movs	r2, #0
 80081f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	691b      	ldr	r3, [r3, #16]
 80081fe:	f003 0310 	and.w	r3, r3, #16
 8008202:	2b10      	cmp	r3, #16
 8008204:	d122      	bne.n	800824c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	68db      	ldr	r3, [r3, #12]
 800820c:	f003 0310 	and.w	r3, r3, #16
 8008210:	2b10      	cmp	r3, #16
 8008212:	d11b      	bne.n	800824c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	f06f 0210 	mvn.w	r2, #16
 800821c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	2208      	movs	r2, #8
 8008222:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	69db      	ldr	r3, [r3, #28]
 800822a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800822e:	2b00      	cmp	r3, #0
 8008230:	d003      	beq.n	800823a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008232:	6878      	ldr	r0, [r7, #4]
 8008234:	f000 f891 	bl	800835a <HAL_TIM_IC_CaptureCallback>
 8008238:	e005      	b.n	8008246 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800823a:	6878      	ldr	r0, [r7, #4]
 800823c:	f000 f883 	bl	8008346 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008240:	6878      	ldr	r0, [r7, #4]
 8008242:	f000 f894 	bl	800836e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	2200      	movs	r2, #0
 800824a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	691b      	ldr	r3, [r3, #16]
 8008252:	f003 0301 	and.w	r3, r3, #1
 8008256:	2b01      	cmp	r3, #1
 8008258:	d10e      	bne.n	8008278 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	68db      	ldr	r3, [r3, #12]
 8008260:	f003 0301 	and.w	r3, r3, #1
 8008264:	2b01      	cmp	r3, #1
 8008266:	d107      	bne.n	8008278 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	f06f 0201 	mvn.w	r2, #1
 8008270:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008272:	6878      	ldr	r0, [r7, #4]
 8008274:	f000 f85d 	bl	8008332 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	691b      	ldr	r3, [r3, #16]
 800827e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008282:	2b80      	cmp	r3, #128	@ 0x80
 8008284:	d10e      	bne.n	80082a4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	68db      	ldr	r3, [r3, #12]
 800828c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008290:	2b80      	cmp	r3, #128	@ 0x80
 8008292:	d107      	bne.n	80082a4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800829c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800829e:	6878      	ldr	r0, [r7, #4]
 80082a0:	f000 f97a 	bl	8008598 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	691b      	ldr	r3, [r3, #16]
 80082aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80082ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80082b2:	d10e      	bne.n	80082d2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	68db      	ldr	r3, [r3, #12]
 80082ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80082be:	2b80      	cmp	r3, #128	@ 0x80
 80082c0:	d107      	bne.n	80082d2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80082ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80082cc:	6878      	ldr	r0, [r7, #4]
 80082ce:	f000 f96d 	bl	80085ac <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	691b      	ldr	r3, [r3, #16]
 80082d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80082dc:	2b40      	cmp	r3, #64	@ 0x40
 80082de:	d10e      	bne.n	80082fe <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	68db      	ldr	r3, [r3, #12]
 80082e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80082ea:	2b40      	cmp	r3, #64	@ 0x40
 80082ec:	d107      	bne.n	80082fe <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80082f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80082f8:	6878      	ldr	r0, [r7, #4]
 80082fa:	f000 f842 	bl	8008382 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	691b      	ldr	r3, [r3, #16]
 8008304:	f003 0320 	and.w	r3, r3, #32
 8008308:	2b20      	cmp	r3, #32
 800830a:	d10e      	bne.n	800832a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	68db      	ldr	r3, [r3, #12]
 8008312:	f003 0320 	and.w	r3, r3, #32
 8008316:	2b20      	cmp	r3, #32
 8008318:	d107      	bne.n	800832a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	f06f 0220 	mvn.w	r2, #32
 8008322:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008324:	6878      	ldr	r0, [r7, #4]
 8008326:	f000 f92d 	bl	8008584 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800832a:	bf00      	nop
 800832c:	3708      	adds	r7, #8
 800832e:	46bd      	mov	sp, r7
 8008330:	bd80      	pop	{r7, pc}

08008332 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008332:	b480      	push	{r7}
 8008334:	b083      	sub	sp, #12
 8008336:	af00      	add	r7, sp, #0
 8008338:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800833a:	bf00      	nop
 800833c:	370c      	adds	r7, #12
 800833e:	46bd      	mov	sp, r7
 8008340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008344:	4770      	bx	lr

08008346 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008346:	b480      	push	{r7}
 8008348:	b083      	sub	sp, #12
 800834a:	af00      	add	r7, sp, #0
 800834c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800834e:	bf00      	nop
 8008350:	370c      	adds	r7, #12
 8008352:	46bd      	mov	sp, r7
 8008354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008358:	4770      	bx	lr

0800835a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800835a:	b480      	push	{r7}
 800835c:	b083      	sub	sp, #12
 800835e:	af00      	add	r7, sp, #0
 8008360:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008362:	bf00      	nop
 8008364:	370c      	adds	r7, #12
 8008366:	46bd      	mov	sp, r7
 8008368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800836c:	4770      	bx	lr

0800836e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800836e:	b480      	push	{r7}
 8008370:	b083      	sub	sp, #12
 8008372:	af00      	add	r7, sp, #0
 8008374:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008376:	bf00      	nop
 8008378:	370c      	adds	r7, #12
 800837a:	46bd      	mov	sp, r7
 800837c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008380:	4770      	bx	lr

08008382 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008382:	b480      	push	{r7}
 8008384:	b083      	sub	sp, #12
 8008386:	af00      	add	r7, sp, #0
 8008388:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800838a:	bf00      	nop
 800838c:	370c      	adds	r7, #12
 800838e:	46bd      	mov	sp, r7
 8008390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008394:	4770      	bx	lr
	...

08008398 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008398:	b480      	push	{r7}
 800839a:	b085      	sub	sp, #20
 800839c:	af00      	add	r7, sp, #0
 800839e:	6078      	str	r0, [r7, #4]
 80083a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	4a36      	ldr	r2, [pc, #216]	@ (8008484 <TIM_Base_SetConfig+0xec>)
 80083ac:	4293      	cmp	r3, r2
 80083ae:	d00b      	beq.n	80083c8 <TIM_Base_SetConfig+0x30>
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80083b6:	d007      	beq.n	80083c8 <TIM_Base_SetConfig+0x30>
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	4a33      	ldr	r2, [pc, #204]	@ (8008488 <TIM_Base_SetConfig+0xf0>)
 80083bc:	4293      	cmp	r3, r2
 80083be:	d003      	beq.n	80083c8 <TIM_Base_SetConfig+0x30>
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	4a32      	ldr	r2, [pc, #200]	@ (800848c <TIM_Base_SetConfig+0xf4>)
 80083c4:	4293      	cmp	r3, r2
 80083c6:	d108      	bne.n	80083da <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80083ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80083d0:	683b      	ldr	r3, [r7, #0]
 80083d2:	685b      	ldr	r3, [r3, #4]
 80083d4:	68fa      	ldr	r2, [r7, #12]
 80083d6:	4313      	orrs	r3, r2
 80083d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	4a29      	ldr	r2, [pc, #164]	@ (8008484 <TIM_Base_SetConfig+0xec>)
 80083de:	4293      	cmp	r3, r2
 80083e0:	d017      	beq.n	8008412 <TIM_Base_SetConfig+0x7a>
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80083e8:	d013      	beq.n	8008412 <TIM_Base_SetConfig+0x7a>
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	4a26      	ldr	r2, [pc, #152]	@ (8008488 <TIM_Base_SetConfig+0xf0>)
 80083ee:	4293      	cmp	r3, r2
 80083f0:	d00f      	beq.n	8008412 <TIM_Base_SetConfig+0x7a>
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	4a25      	ldr	r2, [pc, #148]	@ (800848c <TIM_Base_SetConfig+0xf4>)
 80083f6:	4293      	cmp	r3, r2
 80083f8:	d00b      	beq.n	8008412 <TIM_Base_SetConfig+0x7a>
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	4a24      	ldr	r2, [pc, #144]	@ (8008490 <TIM_Base_SetConfig+0xf8>)
 80083fe:	4293      	cmp	r3, r2
 8008400:	d007      	beq.n	8008412 <TIM_Base_SetConfig+0x7a>
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	4a23      	ldr	r2, [pc, #140]	@ (8008494 <TIM_Base_SetConfig+0xfc>)
 8008406:	4293      	cmp	r3, r2
 8008408:	d003      	beq.n	8008412 <TIM_Base_SetConfig+0x7a>
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	4a22      	ldr	r2, [pc, #136]	@ (8008498 <TIM_Base_SetConfig+0x100>)
 800840e:	4293      	cmp	r3, r2
 8008410:	d108      	bne.n	8008424 <TIM_Base_SetConfig+0x8c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008418:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800841a:	683b      	ldr	r3, [r7, #0]
 800841c:	68db      	ldr	r3, [r3, #12]
 800841e:	68fa      	ldr	r2, [r7, #12]
 8008420:	4313      	orrs	r3, r2
 8008422:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800842a:	683b      	ldr	r3, [r7, #0]
 800842c:	695b      	ldr	r3, [r3, #20]
 800842e:	4313      	orrs	r3, r2
 8008430:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	68fa      	ldr	r2, [r7, #12]
 8008436:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008438:	683b      	ldr	r3, [r7, #0]
 800843a:	689a      	ldr	r2, [r3, #8]
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008440:	683b      	ldr	r3, [r7, #0]
 8008442:	681a      	ldr	r2, [r3, #0]
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	4a0e      	ldr	r2, [pc, #56]	@ (8008484 <TIM_Base_SetConfig+0xec>)
 800844c:	4293      	cmp	r3, r2
 800844e:	d00b      	beq.n	8008468 <TIM_Base_SetConfig+0xd0>
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	4a0f      	ldr	r2, [pc, #60]	@ (8008490 <TIM_Base_SetConfig+0xf8>)
 8008454:	4293      	cmp	r3, r2
 8008456:	d007      	beq.n	8008468 <TIM_Base_SetConfig+0xd0>
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	4a0e      	ldr	r2, [pc, #56]	@ (8008494 <TIM_Base_SetConfig+0xfc>)
 800845c:	4293      	cmp	r3, r2
 800845e:	d003      	beq.n	8008468 <TIM_Base_SetConfig+0xd0>
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	4a0d      	ldr	r2, [pc, #52]	@ (8008498 <TIM_Base_SetConfig+0x100>)
 8008464:	4293      	cmp	r3, r2
 8008466:	d103      	bne.n	8008470 <TIM_Base_SetConfig+0xd8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008468:	683b      	ldr	r3, [r7, #0]
 800846a:	691a      	ldr	r2, [r3, #16]
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	2201      	movs	r2, #1
 8008474:	615a      	str	r2, [r3, #20]
}
 8008476:	bf00      	nop
 8008478:	3714      	adds	r7, #20
 800847a:	46bd      	mov	sp, r7
 800847c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008480:	4770      	bx	lr
 8008482:	bf00      	nop
 8008484:	40012c00 	.word	0x40012c00
 8008488:	40000400 	.word	0x40000400
 800848c:	40000800 	.word	0x40000800
 8008490:	40014000 	.word	0x40014000
 8008494:	40014400 	.word	0x40014400
 8008498:	40014800 	.word	0x40014800

0800849c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800849c:	b480      	push	{r7}
 800849e:	b085      	sub	sp, #20
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	6078      	str	r0, [r7, #4]
 80084a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80084ac:	2b01      	cmp	r3, #1
 80084ae:	d101      	bne.n	80084b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80084b0:	2302      	movs	r3, #2
 80084b2:	e059      	b.n	8008568 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	2201      	movs	r2, #1
 80084b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	2202      	movs	r2, #2
 80084c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	685b      	ldr	r3, [r3, #4]
 80084ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	689b      	ldr	r3, [r3, #8]
 80084d2:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	4a26      	ldr	r2, [pc, #152]	@ (8008574 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80084da:	4293      	cmp	r3, r2
 80084dc:	d108      	bne.n	80084f0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80084e4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80084e6:	683b      	ldr	r3, [r7, #0]
 80084e8:	685b      	ldr	r3, [r3, #4]
 80084ea:	68fa      	ldr	r2, [r7, #12]
 80084ec:	4313      	orrs	r3, r2
 80084ee:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80084f6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80084f8:	683b      	ldr	r3, [r7, #0]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	68fa      	ldr	r2, [r7, #12]
 80084fe:	4313      	orrs	r3, r2
 8008500:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	68fa      	ldr	r2, [r7, #12]
 8008508:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	4a19      	ldr	r2, [pc, #100]	@ (8008574 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8008510:	4293      	cmp	r3, r2
 8008512:	d013      	beq.n	800853c <HAL_TIMEx_MasterConfigSynchronization+0xa0>
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800851c:	d00e      	beq.n	800853c <HAL_TIMEx_MasterConfigSynchronization+0xa0>
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	4a15      	ldr	r2, [pc, #84]	@ (8008578 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008524:	4293      	cmp	r3, r2
 8008526:	d009      	beq.n	800853c <HAL_TIMEx_MasterConfigSynchronization+0xa0>
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	4a13      	ldr	r2, [pc, #76]	@ (800857c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800852e:	4293      	cmp	r3, r2
 8008530:	d004      	beq.n	800853c <HAL_TIMEx_MasterConfigSynchronization+0xa0>
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	4a12      	ldr	r2, [pc, #72]	@ (8008580 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008538:	4293      	cmp	r3, r2
 800853a:	d10c      	bne.n	8008556 <HAL_TIMEx_MasterConfigSynchronization+0xba>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800853c:	68bb      	ldr	r3, [r7, #8]
 800853e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008542:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008544:	683b      	ldr	r3, [r7, #0]
 8008546:	689b      	ldr	r3, [r3, #8]
 8008548:	68ba      	ldr	r2, [r7, #8]
 800854a:	4313      	orrs	r3, r2
 800854c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	68ba      	ldr	r2, [r7, #8]
 8008554:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	2201      	movs	r2, #1
 800855a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	2200      	movs	r2, #0
 8008562:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008566:	2300      	movs	r3, #0
}
 8008568:	4618      	mov	r0, r3
 800856a:	3714      	adds	r7, #20
 800856c:	46bd      	mov	sp, r7
 800856e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008572:	4770      	bx	lr
 8008574:	40012c00 	.word	0x40012c00
 8008578:	40000400 	.word	0x40000400
 800857c:	40000800 	.word	0x40000800
 8008580:	40014000 	.word	0x40014000

08008584 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008584:	b480      	push	{r7}
 8008586:	b083      	sub	sp, #12
 8008588:	af00      	add	r7, sp, #0
 800858a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800858c:	bf00      	nop
 800858e:	370c      	adds	r7, #12
 8008590:	46bd      	mov	sp, r7
 8008592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008596:	4770      	bx	lr

08008598 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008598:	b480      	push	{r7}
 800859a:	b083      	sub	sp, #12
 800859c:	af00      	add	r7, sp, #0
 800859e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80085a0:	bf00      	nop
 80085a2:	370c      	adds	r7, #12
 80085a4:	46bd      	mov	sp, r7
 80085a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085aa:	4770      	bx	lr

080085ac <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80085ac:	b480      	push	{r7}
 80085ae:	b083      	sub	sp, #12
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80085b4:	bf00      	nop
 80085b6:	370c      	adds	r7, #12
 80085b8:	46bd      	mov	sp, r7
 80085ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085be:	4770      	bx	lr

080085c0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80085c0:	b580      	push	{r7, lr}
 80085c2:	b082      	sub	sp, #8
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d101      	bne.n	80085d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80085ce:	2301      	movs	r3, #1
 80085d0:	e040      	b.n	8008654 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d106      	bne.n	80085e8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	2200      	movs	r2, #0
 80085de:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80085e2:	6878      	ldr	r0, [r7, #4]
 80085e4:	f7f9 fcfa 	bl	8001fdc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	2224      	movs	r2, #36	@ 0x24
 80085ec:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	681a      	ldr	r2, [r3, #0]
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	f022 0201 	bic.w	r2, r2, #1
 80085fc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80085fe:	6878      	ldr	r0, [r7, #4]
 8008600:	f000 f8b6 	bl	8008770 <UART_SetConfig>
 8008604:	4603      	mov	r3, r0
 8008606:	2b01      	cmp	r3, #1
 8008608:	d101      	bne.n	800860e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800860a:	2301      	movs	r3, #1
 800860c:	e022      	b.n	8008654 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008612:	2b00      	cmp	r3, #0
 8008614:	d002      	beq.n	800861c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8008616:	6878      	ldr	r0, [r7, #4]
 8008618:	f000 fa7e 	bl	8008b18 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	685a      	ldr	r2, [r3, #4]
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800862a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	689a      	ldr	r2, [r3, #8]
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800863a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	681a      	ldr	r2, [r3, #0]
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	f042 0201 	orr.w	r2, r2, #1
 800864a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800864c:	6878      	ldr	r0, [r7, #4]
 800864e:	f000 fb05 	bl	8008c5c <UART_CheckIdleState>
 8008652:	4603      	mov	r3, r0
}
 8008654:	4618      	mov	r0, r3
 8008656:	3708      	adds	r7, #8
 8008658:	46bd      	mov	sp, r7
 800865a:	bd80      	pop	{r7, pc}

0800865c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800865c:	b580      	push	{r7, lr}
 800865e:	b08a      	sub	sp, #40	@ 0x28
 8008660:	af02      	add	r7, sp, #8
 8008662:	60f8      	str	r0, [r7, #12]
 8008664:	60b9      	str	r1, [r7, #8]
 8008666:	603b      	str	r3, [r7, #0]
 8008668:	4613      	mov	r3, r2
 800866a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008670:	2b20      	cmp	r3, #32
 8008672:	d177      	bne.n	8008764 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8008674:	68bb      	ldr	r3, [r7, #8]
 8008676:	2b00      	cmp	r3, #0
 8008678:	d002      	beq.n	8008680 <HAL_UART_Transmit+0x24>
 800867a:	88fb      	ldrh	r3, [r7, #6]
 800867c:	2b00      	cmp	r3, #0
 800867e:	d101      	bne.n	8008684 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8008680:	2301      	movs	r3, #1
 8008682:	e070      	b.n	8008766 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	2200      	movs	r2, #0
 8008688:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	2221      	movs	r2, #33	@ 0x21
 8008690:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008692:	f7fb f95d 	bl	8003950 <HAL_GetTick>
 8008696:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	88fa      	ldrh	r2, [r7, #6]
 800869c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	88fa      	ldrh	r2, [r7, #6]
 80086a4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	689b      	ldr	r3, [r3, #8]
 80086ac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80086b0:	d108      	bne.n	80086c4 <HAL_UART_Transmit+0x68>
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	691b      	ldr	r3, [r3, #16]
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d104      	bne.n	80086c4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80086ba:	2300      	movs	r3, #0
 80086bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80086be:	68bb      	ldr	r3, [r7, #8]
 80086c0:	61bb      	str	r3, [r7, #24]
 80086c2:	e003      	b.n	80086cc <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80086c4:	68bb      	ldr	r3, [r7, #8]
 80086c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80086c8:	2300      	movs	r3, #0
 80086ca:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80086cc:	e02f      	b.n	800872e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80086ce:	683b      	ldr	r3, [r7, #0]
 80086d0:	9300      	str	r3, [sp, #0]
 80086d2:	697b      	ldr	r3, [r7, #20]
 80086d4:	2200      	movs	r2, #0
 80086d6:	2180      	movs	r1, #128	@ 0x80
 80086d8:	68f8      	ldr	r0, [r7, #12]
 80086da:	f000 fb67 	bl	8008dac <UART_WaitOnFlagUntilTimeout>
 80086de:	4603      	mov	r3, r0
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d004      	beq.n	80086ee <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	2220      	movs	r2, #32
 80086e8:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80086ea:	2303      	movs	r3, #3
 80086ec:	e03b      	b.n	8008766 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80086ee:	69fb      	ldr	r3, [r7, #28]
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d10b      	bne.n	800870c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80086f4:	69bb      	ldr	r3, [r7, #24]
 80086f6:	881a      	ldrh	r2, [r3, #0]
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008700:	b292      	uxth	r2, r2
 8008702:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8008704:	69bb      	ldr	r3, [r7, #24]
 8008706:	3302      	adds	r3, #2
 8008708:	61bb      	str	r3, [r7, #24]
 800870a:	e007      	b.n	800871c <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800870c:	69fb      	ldr	r3, [r7, #28]
 800870e:	781a      	ldrb	r2, [r3, #0]
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8008716:	69fb      	ldr	r3, [r7, #28]
 8008718:	3301      	adds	r3, #1
 800871a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8008722:	b29b      	uxth	r3, r3
 8008724:	3b01      	subs	r3, #1
 8008726:	b29a      	uxth	r2, r3
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8008734:	b29b      	uxth	r3, r3
 8008736:	2b00      	cmp	r3, #0
 8008738:	d1c9      	bne.n	80086ce <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800873a:	683b      	ldr	r3, [r7, #0]
 800873c:	9300      	str	r3, [sp, #0]
 800873e:	697b      	ldr	r3, [r7, #20]
 8008740:	2200      	movs	r2, #0
 8008742:	2140      	movs	r1, #64	@ 0x40
 8008744:	68f8      	ldr	r0, [r7, #12]
 8008746:	f000 fb31 	bl	8008dac <UART_WaitOnFlagUntilTimeout>
 800874a:	4603      	mov	r3, r0
 800874c:	2b00      	cmp	r3, #0
 800874e:	d004      	beq.n	800875a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	2220      	movs	r2, #32
 8008754:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8008756:	2303      	movs	r3, #3
 8008758:	e005      	b.n	8008766 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	2220      	movs	r2, #32
 800875e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8008760:	2300      	movs	r3, #0
 8008762:	e000      	b.n	8008766 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8008764:	2302      	movs	r3, #2
  }
}
 8008766:	4618      	mov	r0, r3
 8008768:	3720      	adds	r7, #32
 800876a:	46bd      	mov	sp, r7
 800876c:	bd80      	pop	{r7, pc}
	...

08008770 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008770:	b580      	push	{r7, lr}
 8008772:	b088      	sub	sp, #32
 8008774:	af00      	add	r7, sp, #0
 8008776:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008778:	2300      	movs	r3, #0
 800877a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	689a      	ldr	r2, [r3, #8]
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	691b      	ldr	r3, [r3, #16]
 8008784:	431a      	orrs	r2, r3
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	695b      	ldr	r3, [r3, #20]
 800878a:	431a      	orrs	r2, r3
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	69db      	ldr	r3, [r3, #28]
 8008790:	4313      	orrs	r3, r2
 8008792:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 800879e:	f023 030c 	bic.w	r3, r3, #12
 80087a2:	687a      	ldr	r2, [r7, #4]
 80087a4:	6812      	ldr	r2, [r2, #0]
 80087a6:	6979      	ldr	r1, [r7, #20]
 80087a8:	430b      	orrs	r3, r1
 80087aa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	685b      	ldr	r3, [r3, #4]
 80087b2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	68da      	ldr	r2, [r3, #12]
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	430a      	orrs	r2, r1
 80087c0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	699b      	ldr	r3, [r3, #24]
 80087c6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	6a1b      	ldr	r3, [r3, #32]
 80087cc:	697a      	ldr	r2, [r7, #20]
 80087ce:	4313      	orrs	r3, r2
 80087d0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	689b      	ldr	r3, [r3, #8]
 80087d8:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	697a      	ldr	r2, [r7, #20]
 80087e2:	430a      	orrs	r2, r1
 80087e4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	4aa7      	ldr	r2, [pc, #668]	@ (8008a88 <UART_SetConfig+0x318>)
 80087ec:	4293      	cmp	r3, r2
 80087ee:	d120      	bne.n	8008832 <UART_SetConfig+0xc2>
 80087f0:	4ba6      	ldr	r3, [pc, #664]	@ (8008a8c <UART_SetConfig+0x31c>)
 80087f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80087f4:	f003 0303 	and.w	r3, r3, #3
 80087f8:	2b03      	cmp	r3, #3
 80087fa:	d817      	bhi.n	800882c <UART_SetConfig+0xbc>
 80087fc:	a201      	add	r2, pc, #4	@ (adr r2, 8008804 <UART_SetConfig+0x94>)
 80087fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008802:	bf00      	nop
 8008804:	08008815 	.word	0x08008815
 8008808:	08008821 	.word	0x08008821
 800880c:	08008827 	.word	0x08008827
 8008810:	0800881b 	.word	0x0800881b
 8008814:	2301      	movs	r3, #1
 8008816:	77fb      	strb	r3, [r7, #31]
 8008818:	e0b5      	b.n	8008986 <UART_SetConfig+0x216>
 800881a:	2302      	movs	r3, #2
 800881c:	77fb      	strb	r3, [r7, #31]
 800881e:	e0b2      	b.n	8008986 <UART_SetConfig+0x216>
 8008820:	2304      	movs	r3, #4
 8008822:	77fb      	strb	r3, [r7, #31]
 8008824:	e0af      	b.n	8008986 <UART_SetConfig+0x216>
 8008826:	2308      	movs	r3, #8
 8008828:	77fb      	strb	r3, [r7, #31]
 800882a:	e0ac      	b.n	8008986 <UART_SetConfig+0x216>
 800882c:	2310      	movs	r3, #16
 800882e:	77fb      	strb	r3, [r7, #31]
 8008830:	e0a9      	b.n	8008986 <UART_SetConfig+0x216>
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	4a96      	ldr	r2, [pc, #600]	@ (8008a90 <UART_SetConfig+0x320>)
 8008838:	4293      	cmp	r3, r2
 800883a:	d124      	bne.n	8008886 <UART_SetConfig+0x116>
 800883c:	4b93      	ldr	r3, [pc, #588]	@ (8008a8c <UART_SetConfig+0x31c>)
 800883e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008840:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8008844:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008848:	d011      	beq.n	800886e <UART_SetConfig+0xfe>
 800884a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800884e:	d817      	bhi.n	8008880 <UART_SetConfig+0x110>
 8008850:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008854:	d011      	beq.n	800887a <UART_SetConfig+0x10a>
 8008856:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800885a:	d811      	bhi.n	8008880 <UART_SetConfig+0x110>
 800885c:	2b00      	cmp	r3, #0
 800885e:	d003      	beq.n	8008868 <UART_SetConfig+0xf8>
 8008860:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008864:	d006      	beq.n	8008874 <UART_SetConfig+0x104>
 8008866:	e00b      	b.n	8008880 <UART_SetConfig+0x110>
 8008868:	2300      	movs	r3, #0
 800886a:	77fb      	strb	r3, [r7, #31]
 800886c:	e08b      	b.n	8008986 <UART_SetConfig+0x216>
 800886e:	2302      	movs	r3, #2
 8008870:	77fb      	strb	r3, [r7, #31]
 8008872:	e088      	b.n	8008986 <UART_SetConfig+0x216>
 8008874:	2304      	movs	r3, #4
 8008876:	77fb      	strb	r3, [r7, #31]
 8008878:	e085      	b.n	8008986 <UART_SetConfig+0x216>
 800887a:	2308      	movs	r3, #8
 800887c:	77fb      	strb	r3, [r7, #31]
 800887e:	e082      	b.n	8008986 <UART_SetConfig+0x216>
 8008880:	2310      	movs	r3, #16
 8008882:	77fb      	strb	r3, [r7, #31]
 8008884:	e07f      	b.n	8008986 <UART_SetConfig+0x216>
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	4a82      	ldr	r2, [pc, #520]	@ (8008a94 <UART_SetConfig+0x324>)
 800888c:	4293      	cmp	r3, r2
 800888e:	d124      	bne.n	80088da <UART_SetConfig+0x16a>
 8008890:	4b7e      	ldr	r3, [pc, #504]	@ (8008a8c <UART_SetConfig+0x31c>)
 8008892:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008894:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8008898:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800889c:	d011      	beq.n	80088c2 <UART_SetConfig+0x152>
 800889e:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80088a2:	d817      	bhi.n	80088d4 <UART_SetConfig+0x164>
 80088a4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80088a8:	d011      	beq.n	80088ce <UART_SetConfig+0x15e>
 80088aa:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80088ae:	d811      	bhi.n	80088d4 <UART_SetConfig+0x164>
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d003      	beq.n	80088bc <UART_SetConfig+0x14c>
 80088b4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80088b8:	d006      	beq.n	80088c8 <UART_SetConfig+0x158>
 80088ba:	e00b      	b.n	80088d4 <UART_SetConfig+0x164>
 80088bc:	2300      	movs	r3, #0
 80088be:	77fb      	strb	r3, [r7, #31]
 80088c0:	e061      	b.n	8008986 <UART_SetConfig+0x216>
 80088c2:	2302      	movs	r3, #2
 80088c4:	77fb      	strb	r3, [r7, #31]
 80088c6:	e05e      	b.n	8008986 <UART_SetConfig+0x216>
 80088c8:	2304      	movs	r3, #4
 80088ca:	77fb      	strb	r3, [r7, #31]
 80088cc:	e05b      	b.n	8008986 <UART_SetConfig+0x216>
 80088ce:	2308      	movs	r3, #8
 80088d0:	77fb      	strb	r3, [r7, #31]
 80088d2:	e058      	b.n	8008986 <UART_SetConfig+0x216>
 80088d4:	2310      	movs	r3, #16
 80088d6:	77fb      	strb	r3, [r7, #31]
 80088d8:	e055      	b.n	8008986 <UART_SetConfig+0x216>
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	4a6e      	ldr	r2, [pc, #440]	@ (8008a98 <UART_SetConfig+0x328>)
 80088e0:	4293      	cmp	r3, r2
 80088e2:	d124      	bne.n	800892e <UART_SetConfig+0x1be>
 80088e4:	4b69      	ldr	r3, [pc, #420]	@ (8008a8c <UART_SetConfig+0x31c>)
 80088e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80088e8:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80088ec:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80088f0:	d011      	beq.n	8008916 <UART_SetConfig+0x1a6>
 80088f2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80088f6:	d817      	bhi.n	8008928 <UART_SetConfig+0x1b8>
 80088f8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80088fc:	d011      	beq.n	8008922 <UART_SetConfig+0x1b2>
 80088fe:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008902:	d811      	bhi.n	8008928 <UART_SetConfig+0x1b8>
 8008904:	2b00      	cmp	r3, #0
 8008906:	d003      	beq.n	8008910 <UART_SetConfig+0x1a0>
 8008908:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800890c:	d006      	beq.n	800891c <UART_SetConfig+0x1ac>
 800890e:	e00b      	b.n	8008928 <UART_SetConfig+0x1b8>
 8008910:	2300      	movs	r3, #0
 8008912:	77fb      	strb	r3, [r7, #31]
 8008914:	e037      	b.n	8008986 <UART_SetConfig+0x216>
 8008916:	2302      	movs	r3, #2
 8008918:	77fb      	strb	r3, [r7, #31]
 800891a:	e034      	b.n	8008986 <UART_SetConfig+0x216>
 800891c:	2304      	movs	r3, #4
 800891e:	77fb      	strb	r3, [r7, #31]
 8008920:	e031      	b.n	8008986 <UART_SetConfig+0x216>
 8008922:	2308      	movs	r3, #8
 8008924:	77fb      	strb	r3, [r7, #31]
 8008926:	e02e      	b.n	8008986 <UART_SetConfig+0x216>
 8008928:	2310      	movs	r3, #16
 800892a:	77fb      	strb	r3, [r7, #31]
 800892c:	e02b      	b.n	8008986 <UART_SetConfig+0x216>
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	4a5a      	ldr	r2, [pc, #360]	@ (8008a9c <UART_SetConfig+0x32c>)
 8008934:	4293      	cmp	r3, r2
 8008936:	d124      	bne.n	8008982 <UART_SetConfig+0x212>
 8008938:	4b54      	ldr	r3, [pc, #336]	@ (8008a8c <UART_SetConfig+0x31c>)
 800893a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800893c:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8008940:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8008944:	d011      	beq.n	800896a <UART_SetConfig+0x1fa>
 8008946:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800894a:	d817      	bhi.n	800897c <UART_SetConfig+0x20c>
 800894c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008950:	d011      	beq.n	8008976 <UART_SetConfig+0x206>
 8008952:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008956:	d811      	bhi.n	800897c <UART_SetConfig+0x20c>
 8008958:	2b00      	cmp	r3, #0
 800895a:	d003      	beq.n	8008964 <UART_SetConfig+0x1f4>
 800895c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008960:	d006      	beq.n	8008970 <UART_SetConfig+0x200>
 8008962:	e00b      	b.n	800897c <UART_SetConfig+0x20c>
 8008964:	2300      	movs	r3, #0
 8008966:	77fb      	strb	r3, [r7, #31]
 8008968:	e00d      	b.n	8008986 <UART_SetConfig+0x216>
 800896a:	2302      	movs	r3, #2
 800896c:	77fb      	strb	r3, [r7, #31]
 800896e:	e00a      	b.n	8008986 <UART_SetConfig+0x216>
 8008970:	2304      	movs	r3, #4
 8008972:	77fb      	strb	r3, [r7, #31]
 8008974:	e007      	b.n	8008986 <UART_SetConfig+0x216>
 8008976:	2308      	movs	r3, #8
 8008978:	77fb      	strb	r3, [r7, #31]
 800897a:	e004      	b.n	8008986 <UART_SetConfig+0x216>
 800897c:	2310      	movs	r3, #16
 800897e:	77fb      	strb	r3, [r7, #31]
 8008980:	e001      	b.n	8008986 <UART_SetConfig+0x216>
 8008982:	2310      	movs	r3, #16
 8008984:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	69db      	ldr	r3, [r3, #28]
 800898a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800898e:	d15b      	bne.n	8008a48 <UART_SetConfig+0x2d8>
  {
    switch (clocksource)
 8008990:	7ffb      	ldrb	r3, [r7, #31]
 8008992:	2b08      	cmp	r3, #8
 8008994:	d827      	bhi.n	80089e6 <UART_SetConfig+0x276>
 8008996:	a201      	add	r2, pc, #4	@ (adr r2, 800899c <UART_SetConfig+0x22c>)
 8008998:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800899c:	080089c1 	.word	0x080089c1
 80089a0:	080089c9 	.word	0x080089c9
 80089a4:	080089d1 	.word	0x080089d1
 80089a8:	080089e7 	.word	0x080089e7
 80089ac:	080089d7 	.word	0x080089d7
 80089b0:	080089e7 	.word	0x080089e7
 80089b4:	080089e7 	.word	0x080089e7
 80089b8:	080089e7 	.word	0x080089e7
 80089bc:	080089df 	.word	0x080089df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80089c0:	f7fe ffdc 	bl	800797c <HAL_RCC_GetPCLK1Freq>
 80089c4:	61b8      	str	r0, [r7, #24]
        break;
 80089c6:	e013      	b.n	80089f0 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80089c8:	f7fe fffa 	bl	80079c0 <HAL_RCC_GetPCLK2Freq>
 80089cc:	61b8      	str	r0, [r7, #24]
        break;
 80089ce:	e00f      	b.n	80089f0 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80089d0:	4b33      	ldr	r3, [pc, #204]	@ (8008aa0 <UART_SetConfig+0x330>)
 80089d2:	61bb      	str	r3, [r7, #24]
        break;
 80089d4:	e00c      	b.n	80089f0 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80089d6:	f7fe ff5b 	bl	8007890 <HAL_RCC_GetSysClockFreq>
 80089da:	61b8      	str	r0, [r7, #24]
        break;
 80089dc:	e008      	b.n	80089f0 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80089de:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80089e2:	61bb      	str	r3, [r7, #24]
        break;
 80089e4:	e004      	b.n	80089f0 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 80089e6:	2300      	movs	r3, #0
 80089e8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80089ea:	2301      	movs	r3, #1
 80089ec:	77bb      	strb	r3, [r7, #30]
        break;
 80089ee:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80089f0:	69bb      	ldr	r3, [r7, #24]
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	f000 8082 	beq.w	8008afc <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80089f8:	69bb      	ldr	r3, [r7, #24]
 80089fa:	005a      	lsls	r2, r3, #1
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	685b      	ldr	r3, [r3, #4]
 8008a00:	085b      	lsrs	r3, r3, #1
 8008a02:	441a      	add	r2, r3
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	685b      	ldr	r3, [r3, #4]
 8008a08:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a0c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008a0e:	693b      	ldr	r3, [r7, #16]
 8008a10:	2b0f      	cmp	r3, #15
 8008a12:	d916      	bls.n	8008a42 <UART_SetConfig+0x2d2>
 8008a14:	693b      	ldr	r3, [r7, #16]
 8008a16:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008a1a:	d212      	bcs.n	8008a42 <UART_SetConfig+0x2d2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008a1c:	693b      	ldr	r3, [r7, #16]
 8008a1e:	b29b      	uxth	r3, r3
 8008a20:	f023 030f 	bic.w	r3, r3, #15
 8008a24:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008a26:	693b      	ldr	r3, [r7, #16]
 8008a28:	085b      	lsrs	r3, r3, #1
 8008a2a:	b29b      	uxth	r3, r3
 8008a2c:	f003 0307 	and.w	r3, r3, #7
 8008a30:	b29a      	uxth	r2, r3
 8008a32:	89fb      	ldrh	r3, [r7, #14]
 8008a34:	4313      	orrs	r3, r2
 8008a36:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	89fa      	ldrh	r2, [r7, #14]
 8008a3e:	60da      	str	r2, [r3, #12]
 8008a40:	e05c      	b.n	8008afc <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8008a42:	2301      	movs	r3, #1
 8008a44:	77bb      	strb	r3, [r7, #30]
 8008a46:	e059      	b.n	8008afc <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008a48:	7ffb      	ldrb	r3, [r7, #31]
 8008a4a:	2b08      	cmp	r3, #8
 8008a4c:	d835      	bhi.n	8008aba <UART_SetConfig+0x34a>
 8008a4e:	a201      	add	r2, pc, #4	@ (adr r2, 8008a54 <UART_SetConfig+0x2e4>)
 8008a50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a54:	08008a79 	.word	0x08008a79
 8008a58:	08008a81 	.word	0x08008a81
 8008a5c:	08008aa5 	.word	0x08008aa5
 8008a60:	08008abb 	.word	0x08008abb
 8008a64:	08008aab 	.word	0x08008aab
 8008a68:	08008abb 	.word	0x08008abb
 8008a6c:	08008abb 	.word	0x08008abb
 8008a70:	08008abb 	.word	0x08008abb
 8008a74:	08008ab3 	.word	0x08008ab3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008a78:	f7fe ff80 	bl	800797c <HAL_RCC_GetPCLK1Freq>
 8008a7c:	61b8      	str	r0, [r7, #24]
        break;
 8008a7e:	e021      	b.n	8008ac4 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008a80:	f7fe ff9e 	bl	80079c0 <HAL_RCC_GetPCLK2Freq>
 8008a84:	61b8      	str	r0, [r7, #24]
        break;
 8008a86:	e01d      	b.n	8008ac4 <UART_SetConfig+0x354>
 8008a88:	40013800 	.word	0x40013800
 8008a8c:	40021000 	.word	0x40021000
 8008a90:	40004400 	.word	0x40004400
 8008a94:	40004800 	.word	0x40004800
 8008a98:	40004c00 	.word	0x40004c00
 8008a9c:	40005000 	.word	0x40005000
 8008aa0:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008aa4:	4b1b      	ldr	r3, [pc, #108]	@ (8008b14 <UART_SetConfig+0x3a4>)
 8008aa6:	61bb      	str	r3, [r7, #24]
        break;
 8008aa8:	e00c      	b.n	8008ac4 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008aaa:	f7fe fef1 	bl	8007890 <HAL_RCC_GetSysClockFreq>
 8008aae:	61b8      	str	r0, [r7, #24]
        break;
 8008ab0:	e008      	b.n	8008ac4 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008ab2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008ab6:	61bb      	str	r3, [r7, #24]
        break;
 8008ab8:	e004      	b.n	8008ac4 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8008aba:	2300      	movs	r3, #0
 8008abc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008abe:	2301      	movs	r3, #1
 8008ac0:	77bb      	strb	r3, [r7, #30]
        break;
 8008ac2:	bf00      	nop
    }

    if (pclk != 0U)
 8008ac4:	69bb      	ldr	r3, [r7, #24]
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d018      	beq.n	8008afc <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	685b      	ldr	r3, [r3, #4]
 8008ace:	085a      	lsrs	r2, r3, #1
 8008ad0:	69bb      	ldr	r3, [r7, #24]
 8008ad2:	441a      	add	r2, r3
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	685b      	ldr	r3, [r3, #4]
 8008ad8:	fbb2 f3f3 	udiv	r3, r2, r3
 8008adc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008ade:	693b      	ldr	r3, [r7, #16]
 8008ae0:	2b0f      	cmp	r3, #15
 8008ae2:	d909      	bls.n	8008af8 <UART_SetConfig+0x388>
 8008ae4:	693b      	ldr	r3, [r7, #16]
 8008ae6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008aea:	d205      	bcs.n	8008af8 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008aec:	693b      	ldr	r3, [r7, #16]
 8008aee:	b29a      	uxth	r2, r3
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	60da      	str	r2, [r3, #12]
 8008af6:	e001      	b.n	8008afc <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8008af8:	2301      	movs	r3, #1
 8008afa:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	2200      	movs	r2, #0
 8008b00:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	2200      	movs	r2, #0
 8008b06:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8008b08:	7fbb      	ldrb	r3, [r7, #30]
}
 8008b0a:	4618      	mov	r0, r3
 8008b0c:	3720      	adds	r7, #32
 8008b0e:	46bd      	mov	sp, r7
 8008b10:	bd80      	pop	{r7, pc}
 8008b12:	bf00      	nop
 8008b14:	007a1200 	.word	0x007a1200

08008b18 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008b18:	b480      	push	{r7}
 8008b1a:	b083      	sub	sp, #12
 8008b1c:	af00      	add	r7, sp, #0
 8008b1e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b24:	f003 0301 	and.w	r3, r3, #1
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d00a      	beq.n	8008b42 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	685b      	ldr	r3, [r3, #4]
 8008b32:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	430a      	orrs	r2, r1
 8008b40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b46:	f003 0302 	and.w	r3, r3, #2
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d00a      	beq.n	8008b64 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	685b      	ldr	r3, [r3, #4]
 8008b54:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	430a      	orrs	r2, r1
 8008b62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b68:	f003 0304 	and.w	r3, r3, #4
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d00a      	beq.n	8008b86 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	685b      	ldr	r3, [r3, #4]
 8008b76:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	430a      	orrs	r2, r1
 8008b84:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b8a:	f003 0308 	and.w	r3, r3, #8
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d00a      	beq.n	8008ba8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	685b      	ldr	r3, [r3, #4]
 8008b98:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	430a      	orrs	r2, r1
 8008ba6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008bac:	f003 0310 	and.w	r3, r3, #16
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d00a      	beq.n	8008bca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	689b      	ldr	r3, [r3, #8]
 8008bba:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	430a      	orrs	r2, r1
 8008bc8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008bce:	f003 0320 	and.w	r3, r3, #32
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d00a      	beq.n	8008bec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	689b      	ldr	r3, [r3, #8]
 8008bdc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	430a      	orrs	r2, r1
 8008bea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008bf0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d01a      	beq.n	8008c2e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	685b      	ldr	r3, [r3, #4]
 8008bfe:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	430a      	orrs	r2, r1
 8008c0c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c12:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008c16:	d10a      	bne.n	8008c2e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	685b      	ldr	r3, [r3, #4]
 8008c1e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	430a      	orrs	r2, r1
 8008c2c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d00a      	beq.n	8008c50 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	685b      	ldr	r3, [r3, #4]
 8008c40:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	430a      	orrs	r2, r1
 8008c4e:	605a      	str	r2, [r3, #4]
  }
}
 8008c50:	bf00      	nop
 8008c52:	370c      	adds	r7, #12
 8008c54:	46bd      	mov	sp, r7
 8008c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c5a:	4770      	bx	lr

08008c5c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008c5c:	b580      	push	{r7, lr}
 8008c5e:	b098      	sub	sp, #96	@ 0x60
 8008c60:	af02      	add	r7, sp, #8
 8008c62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	2200      	movs	r2, #0
 8008c68:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008c6c:	f7fa fe70 	bl	8003950 <HAL_GetTick>
 8008c70:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	f003 0308 	and.w	r3, r3, #8
 8008c7c:	2b08      	cmp	r3, #8
 8008c7e:	d12e      	bne.n	8008cde <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008c80:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008c84:	9300      	str	r3, [sp, #0]
 8008c86:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008c88:	2200      	movs	r2, #0
 8008c8a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008c8e:	6878      	ldr	r0, [r7, #4]
 8008c90:	f000 f88c 	bl	8008dac <UART_WaitOnFlagUntilTimeout>
 8008c94:	4603      	mov	r3, r0
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d021      	beq.n	8008cde <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ca0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ca2:	e853 3f00 	ldrex	r3, [r3]
 8008ca6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008ca8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008caa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008cae:	653b      	str	r3, [r7, #80]	@ 0x50
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	461a      	mov	r2, r3
 8008cb6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008cb8:	647b      	str	r3, [r7, #68]	@ 0x44
 8008cba:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cbc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008cbe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008cc0:	e841 2300 	strex	r3, r2, [r1]
 8008cc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008cc6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d1e6      	bne.n	8008c9a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	2220      	movs	r2, #32
 8008cd0:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	2200      	movs	r2, #0
 8008cd6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008cda:	2303      	movs	r3, #3
 8008cdc:	e062      	b.n	8008da4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	f003 0304 	and.w	r3, r3, #4
 8008ce8:	2b04      	cmp	r3, #4
 8008cea:	d149      	bne.n	8008d80 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008cec:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008cf0:	9300      	str	r3, [sp, #0]
 8008cf2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008cf4:	2200      	movs	r2, #0
 8008cf6:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008cfa:	6878      	ldr	r0, [r7, #4]
 8008cfc:	f000 f856 	bl	8008dac <UART_WaitOnFlagUntilTimeout>
 8008d00:	4603      	mov	r3, r0
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d03c      	beq.n	8008d80 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d0e:	e853 3f00 	ldrex	r3, [r3]
 8008d12:	623b      	str	r3, [r7, #32]
   return(result);
 8008d14:	6a3b      	ldr	r3, [r7, #32]
 8008d16:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008d1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	461a      	mov	r2, r3
 8008d22:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008d24:	633b      	str	r3, [r7, #48]	@ 0x30
 8008d26:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d28:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008d2a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008d2c:	e841 2300 	strex	r3, r2, [r1]
 8008d30:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008d32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d1e6      	bne.n	8008d06 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	3308      	adds	r3, #8
 8008d3e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d40:	693b      	ldr	r3, [r7, #16]
 8008d42:	e853 3f00 	ldrex	r3, [r3]
 8008d46:	60fb      	str	r3, [r7, #12]
   return(result);
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	f023 0301 	bic.w	r3, r3, #1
 8008d4e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	3308      	adds	r3, #8
 8008d56:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008d58:	61fa      	str	r2, [r7, #28]
 8008d5a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d5c:	69b9      	ldr	r1, [r7, #24]
 8008d5e:	69fa      	ldr	r2, [r7, #28]
 8008d60:	e841 2300 	strex	r3, r2, [r1]
 8008d64:	617b      	str	r3, [r7, #20]
   return(result);
 8008d66:	697b      	ldr	r3, [r7, #20]
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d1e5      	bne.n	8008d38 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	2220      	movs	r2, #32
 8008d70:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	2200      	movs	r2, #0
 8008d78:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008d7c:	2303      	movs	r3, #3
 8008d7e:	e011      	b.n	8008da4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	2220      	movs	r2, #32
 8008d84:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	2220      	movs	r2, #32
 8008d8a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	2200      	movs	r2, #0
 8008d92:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	2200      	movs	r2, #0
 8008d98:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	2200      	movs	r2, #0
 8008d9e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8008da2:	2300      	movs	r3, #0
}
 8008da4:	4618      	mov	r0, r3
 8008da6:	3758      	adds	r7, #88	@ 0x58
 8008da8:	46bd      	mov	sp, r7
 8008daa:	bd80      	pop	{r7, pc}

08008dac <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008dac:	b580      	push	{r7, lr}
 8008dae:	b084      	sub	sp, #16
 8008db0:	af00      	add	r7, sp, #0
 8008db2:	60f8      	str	r0, [r7, #12]
 8008db4:	60b9      	str	r1, [r7, #8]
 8008db6:	603b      	str	r3, [r7, #0]
 8008db8:	4613      	mov	r3, r2
 8008dba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008dbc:	e049      	b.n	8008e52 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008dbe:	69bb      	ldr	r3, [r7, #24]
 8008dc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008dc4:	d045      	beq.n	8008e52 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008dc6:	f7fa fdc3 	bl	8003950 <HAL_GetTick>
 8008dca:	4602      	mov	r2, r0
 8008dcc:	683b      	ldr	r3, [r7, #0]
 8008dce:	1ad3      	subs	r3, r2, r3
 8008dd0:	69ba      	ldr	r2, [r7, #24]
 8008dd2:	429a      	cmp	r2, r3
 8008dd4:	d302      	bcc.n	8008ddc <UART_WaitOnFlagUntilTimeout+0x30>
 8008dd6:	69bb      	ldr	r3, [r7, #24]
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d101      	bne.n	8008de0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008ddc:	2303      	movs	r3, #3
 8008dde:	e048      	b.n	8008e72 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	f003 0304 	and.w	r3, r3, #4
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d031      	beq.n	8008e52 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	69db      	ldr	r3, [r3, #28]
 8008df4:	f003 0308 	and.w	r3, r3, #8
 8008df8:	2b08      	cmp	r3, #8
 8008dfa:	d110      	bne.n	8008e1e <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	2208      	movs	r2, #8
 8008e02:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8008e04:	68f8      	ldr	r0, [r7, #12]
 8008e06:	f000 f838 	bl	8008e7a <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	2208      	movs	r2, #8
 8008e0e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	2200      	movs	r2, #0
 8008e16:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

           return HAL_ERROR;
 8008e1a:	2301      	movs	r3, #1
 8008e1c:	e029      	b.n	8008e72 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	69db      	ldr	r3, [r3, #28]
 8008e24:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008e28:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008e2c:	d111      	bne.n	8008e52 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008e36:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008e38:	68f8      	ldr	r0, [r7, #12]
 8008e3a:	f000 f81e 	bl	8008e7a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	2220      	movs	r2, #32
 8008e42:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	2200      	movs	r2, #0
 8008e4a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8008e4e:	2303      	movs	r3, #3
 8008e50:	e00f      	b.n	8008e72 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	69da      	ldr	r2, [r3, #28]
 8008e58:	68bb      	ldr	r3, [r7, #8]
 8008e5a:	4013      	ands	r3, r2
 8008e5c:	68ba      	ldr	r2, [r7, #8]
 8008e5e:	429a      	cmp	r2, r3
 8008e60:	bf0c      	ite	eq
 8008e62:	2301      	moveq	r3, #1
 8008e64:	2300      	movne	r3, #0
 8008e66:	b2db      	uxtb	r3, r3
 8008e68:	461a      	mov	r2, r3
 8008e6a:	79fb      	ldrb	r3, [r7, #7]
 8008e6c:	429a      	cmp	r2, r3
 8008e6e:	d0a6      	beq.n	8008dbe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008e70:	2300      	movs	r3, #0
}
 8008e72:	4618      	mov	r0, r3
 8008e74:	3710      	adds	r7, #16
 8008e76:	46bd      	mov	sp, r7
 8008e78:	bd80      	pop	{r7, pc}

08008e7a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008e7a:	b480      	push	{r7}
 8008e7c:	b095      	sub	sp, #84	@ 0x54
 8008e7e:	af00      	add	r7, sp, #0
 8008e80:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e8a:	e853 3f00 	ldrex	r3, [r3]
 8008e8e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008e90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e92:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008e96:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	461a      	mov	r2, r3
 8008e9e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008ea0:	643b      	str	r3, [r7, #64]	@ 0x40
 8008ea2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ea4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008ea6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008ea8:	e841 2300 	strex	r3, r2, [r1]
 8008eac:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008eae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d1e6      	bne.n	8008e82 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	3308      	adds	r3, #8
 8008eba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ebc:	6a3b      	ldr	r3, [r7, #32]
 8008ebe:	e853 3f00 	ldrex	r3, [r3]
 8008ec2:	61fb      	str	r3, [r7, #28]
   return(result);
 8008ec4:	69fb      	ldr	r3, [r7, #28]
 8008ec6:	f023 0301 	bic.w	r3, r3, #1
 8008eca:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	3308      	adds	r3, #8
 8008ed2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008ed4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008ed6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ed8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008eda:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008edc:	e841 2300 	strex	r3, r2, [r1]
 8008ee0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008ee2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d1e5      	bne.n	8008eb4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008eec:	2b01      	cmp	r3, #1
 8008eee:	d118      	bne.n	8008f22 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	e853 3f00 	ldrex	r3, [r3]
 8008efc:	60bb      	str	r3, [r7, #8]
   return(result);
 8008efe:	68bb      	ldr	r3, [r7, #8]
 8008f00:	f023 0310 	bic.w	r3, r3, #16
 8008f04:	647b      	str	r3, [r7, #68]	@ 0x44
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	461a      	mov	r2, r3
 8008f0c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008f0e:	61bb      	str	r3, [r7, #24]
 8008f10:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f12:	6979      	ldr	r1, [r7, #20]
 8008f14:	69ba      	ldr	r2, [r7, #24]
 8008f16:	e841 2300 	strex	r3, r2, [r1]
 8008f1a:	613b      	str	r3, [r7, #16]
   return(result);
 8008f1c:	693b      	ldr	r3, [r7, #16]
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d1e6      	bne.n	8008ef0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	2220      	movs	r2, #32
 8008f26:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	2200      	movs	r2, #0
 8008f2e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	2200      	movs	r2, #0
 8008f34:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8008f36:	bf00      	nop
 8008f38:	3754      	adds	r7, #84	@ 0x54
 8008f3a:	46bd      	mov	sp, r7
 8008f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f40:	4770      	bx	lr

08008f42 <__cvt>:
 8008f42:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008f46:	ec57 6b10 	vmov	r6, r7, d0
 8008f4a:	2f00      	cmp	r7, #0
 8008f4c:	460c      	mov	r4, r1
 8008f4e:	4619      	mov	r1, r3
 8008f50:	463b      	mov	r3, r7
 8008f52:	bfbb      	ittet	lt
 8008f54:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8008f58:	461f      	movlt	r7, r3
 8008f5a:	2300      	movge	r3, #0
 8008f5c:	232d      	movlt	r3, #45	@ 0x2d
 8008f5e:	700b      	strb	r3, [r1, #0]
 8008f60:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008f62:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8008f66:	4691      	mov	r9, r2
 8008f68:	f023 0820 	bic.w	r8, r3, #32
 8008f6c:	bfbc      	itt	lt
 8008f6e:	4632      	movlt	r2, r6
 8008f70:	4616      	movlt	r6, r2
 8008f72:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008f76:	d005      	beq.n	8008f84 <__cvt+0x42>
 8008f78:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8008f7c:	d100      	bne.n	8008f80 <__cvt+0x3e>
 8008f7e:	3401      	adds	r4, #1
 8008f80:	2102      	movs	r1, #2
 8008f82:	e000      	b.n	8008f86 <__cvt+0x44>
 8008f84:	2103      	movs	r1, #3
 8008f86:	ab03      	add	r3, sp, #12
 8008f88:	9301      	str	r3, [sp, #4]
 8008f8a:	ab02      	add	r3, sp, #8
 8008f8c:	9300      	str	r3, [sp, #0]
 8008f8e:	ec47 6b10 	vmov	d0, r6, r7
 8008f92:	4653      	mov	r3, sl
 8008f94:	4622      	mov	r2, r4
 8008f96:	f001 f8a7 	bl	800a0e8 <_dtoa_r>
 8008f9a:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8008f9e:	4605      	mov	r5, r0
 8008fa0:	d119      	bne.n	8008fd6 <__cvt+0x94>
 8008fa2:	f019 0f01 	tst.w	r9, #1
 8008fa6:	d00e      	beq.n	8008fc6 <__cvt+0x84>
 8008fa8:	eb00 0904 	add.w	r9, r0, r4
 8008fac:	2200      	movs	r2, #0
 8008fae:	2300      	movs	r3, #0
 8008fb0:	4630      	mov	r0, r6
 8008fb2:	4639      	mov	r1, r7
 8008fb4:	f7f7 fd88 	bl	8000ac8 <__aeabi_dcmpeq>
 8008fb8:	b108      	cbz	r0, 8008fbe <__cvt+0x7c>
 8008fba:	f8cd 900c 	str.w	r9, [sp, #12]
 8008fbe:	2230      	movs	r2, #48	@ 0x30
 8008fc0:	9b03      	ldr	r3, [sp, #12]
 8008fc2:	454b      	cmp	r3, r9
 8008fc4:	d31e      	bcc.n	8009004 <__cvt+0xc2>
 8008fc6:	9b03      	ldr	r3, [sp, #12]
 8008fc8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008fca:	1b5b      	subs	r3, r3, r5
 8008fcc:	4628      	mov	r0, r5
 8008fce:	6013      	str	r3, [r2, #0]
 8008fd0:	b004      	add	sp, #16
 8008fd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008fd6:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008fda:	eb00 0904 	add.w	r9, r0, r4
 8008fde:	d1e5      	bne.n	8008fac <__cvt+0x6a>
 8008fe0:	7803      	ldrb	r3, [r0, #0]
 8008fe2:	2b30      	cmp	r3, #48	@ 0x30
 8008fe4:	d10a      	bne.n	8008ffc <__cvt+0xba>
 8008fe6:	2200      	movs	r2, #0
 8008fe8:	2300      	movs	r3, #0
 8008fea:	4630      	mov	r0, r6
 8008fec:	4639      	mov	r1, r7
 8008fee:	f7f7 fd6b 	bl	8000ac8 <__aeabi_dcmpeq>
 8008ff2:	b918      	cbnz	r0, 8008ffc <__cvt+0xba>
 8008ff4:	f1c4 0401 	rsb	r4, r4, #1
 8008ff8:	f8ca 4000 	str.w	r4, [sl]
 8008ffc:	f8da 3000 	ldr.w	r3, [sl]
 8009000:	4499      	add	r9, r3
 8009002:	e7d3      	b.n	8008fac <__cvt+0x6a>
 8009004:	1c59      	adds	r1, r3, #1
 8009006:	9103      	str	r1, [sp, #12]
 8009008:	701a      	strb	r2, [r3, #0]
 800900a:	e7d9      	b.n	8008fc0 <__cvt+0x7e>

0800900c <__exponent>:
 800900c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800900e:	2900      	cmp	r1, #0
 8009010:	bfba      	itte	lt
 8009012:	4249      	neglt	r1, r1
 8009014:	232d      	movlt	r3, #45	@ 0x2d
 8009016:	232b      	movge	r3, #43	@ 0x2b
 8009018:	2909      	cmp	r1, #9
 800901a:	7002      	strb	r2, [r0, #0]
 800901c:	7043      	strb	r3, [r0, #1]
 800901e:	dd29      	ble.n	8009074 <__exponent+0x68>
 8009020:	f10d 0307 	add.w	r3, sp, #7
 8009024:	461d      	mov	r5, r3
 8009026:	270a      	movs	r7, #10
 8009028:	461a      	mov	r2, r3
 800902a:	fbb1 f6f7 	udiv	r6, r1, r7
 800902e:	fb07 1416 	mls	r4, r7, r6, r1
 8009032:	3430      	adds	r4, #48	@ 0x30
 8009034:	f802 4c01 	strb.w	r4, [r2, #-1]
 8009038:	460c      	mov	r4, r1
 800903a:	2c63      	cmp	r4, #99	@ 0x63
 800903c:	f103 33ff 	add.w	r3, r3, #4294967295
 8009040:	4631      	mov	r1, r6
 8009042:	dcf1      	bgt.n	8009028 <__exponent+0x1c>
 8009044:	3130      	adds	r1, #48	@ 0x30
 8009046:	1e94      	subs	r4, r2, #2
 8009048:	f803 1c01 	strb.w	r1, [r3, #-1]
 800904c:	1c41      	adds	r1, r0, #1
 800904e:	4623      	mov	r3, r4
 8009050:	42ab      	cmp	r3, r5
 8009052:	d30a      	bcc.n	800906a <__exponent+0x5e>
 8009054:	f10d 0309 	add.w	r3, sp, #9
 8009058:	1a9b      	subs	r3, r3, r2
 800905a:	42ac      	cmp	r4, r5
 800905c:	bf88      	it	hi
 800905e:	2300      	movhi	r3, #0
 8009060:	3302      	adds	r3, #2
 8009062:	4403      	add	r3, r0
 8009064:	1a18      	subs	r0, r3, r0
 8009066:	b003      	add	sp, #12
 8009068:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800906a:	f813 6b01 	ldrb.w	r6, [r3], #1
 800906e:	f801 6f01 	strb.w	r6, [r1, #1]!
 8009072:	e7ed      	b.n	8009050 <__exponent+0x44>
 8009074:	2330      	movs	r3, #48	@ 0x30
 8009076:	3130      	adds	r1, #48	@ 0x30
 8009078:	7083      	strb	r3, [r0, #2]
 800907a:	70c1      	strb	r1, [r0, #3]
 800907c:	1d03      	adds	r3, r0, #4
 800907e:	e7f1      	b.n	8009064 <__exponent+0x58>

08009080 <_printf_float>:
 8009080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009084:	b08d      	sub	sp, #52	@ 0x34
 8009086:	460c      	mov	r4, r1
 8009088:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800908c:	4616      	mov	r6, r2
 800908e:	461f      	mov	r7, r3
 8009090:	4605      	mov	r5, r0
 8009092:	f000 ff23 	bl	8009edc <_localeconv_r>
 8009096:	6803      	ldr	r3, [r0, #0]
 8009098:	9304      	str	r3, [sp, #16]
 800909a:	4618      	mov	r0, r3
 800909c:	f7f7 f8e8 	bl	8000270 <strlen>
 80090a0:	2300      	movs	r3, #0
 80090a2:	930a      	str	r3, [sp, #40]	@ 0x28
 80090a4:	f8d8 3000 	ldr.w	r3, [r8]
 80090a8:	9005      	str	r0, [sp, #20]
 80090aa:	3307      	adds	r3, #7
 80090ac:	f023 0307 	bic.w	r3, r3, #7
 80090b0:	f103 0208 	add.w	r2, r3, #8
 80090b4:	f894 a018 	ldrb.w	sl, [r4, #24]
 80090b8:	f8d4 b000 	ldr.w	fp, [r4]
 80090bc:	f8c8 2000 	str.w	r2, [r8]
 80090c0:	e9d3 8900 	ldrd	r8, r9, [r3]
 80090c4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80090c8:	9307      	str	r3, [sp, #28]
 80090ca:	f8cd 8018 	str.w	r8, [sp, #24]
 80090ce:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80090d2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80090d6:	4b9c      	ldr	r3, [pc, #624]	@ (8009348 <_printf_float+0x2c8>)
 80090d8:	f04f 32ff 	mov.w	r2, #4294967295
 80090dc:	f7f7 fd26 	bl	8000b2c <__aeabi_dcmpun>
 80090e0:	bb70      	cbnz	r0, 8009140 <_printf_float+0xc0>
 80090e2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80090e6:	4b98      	ldr	r3, [pc, #608]	@ (8009348 <_printf_float+0x2c8>)
 80090e8:	f04f 32ff 	mov.w	r2, #4294967295
 80090ec:	f7f7 fd00 	bl	8000af0 <__aeabi_dcmple>
 80090f0:	bb30      	cbnz	r0, 8009140 <_printf_float+0xc0>
 80090f2:	2200      	movs	r2, #0
 80090f4:	2300      	movs	r3, #0
 80090f6:	4640      	mov	r0, r8
 80090f8:	4649      	mov	r1, r9
 80090fa:	f7f7 fcef 	bl	8000adc <__aeabi_dcmplt>
 80090fe:	b110      	cbz	r0, 8009106 <_printf_float+0x86>
 8009100:	232d      	movs	r3, #45	@ 0x2d
 8009102:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009106:	4a91      	ldr	r2, [pc, #580]	@ (800934c <_printf_float+0x2cc>)
 8009108:	4b91      	ldr	r3, [pc, #580]	@ (8009350 <_printf_float+0x2d0>)
 800910a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800910e:	bf94      	ite	ls
 8009110:	4690      	movls	r8, r2
 8009112:	4698      	movhi	r8, r3
 8009114:	2303      	movs	r3, #3
 8009116:	6123      	str	r3, [r4, #16]
 8009118:	f02b 0304 	bic.w	r3, fp, #4
 800911c:	6023      	str	r3, [r4, #0]
 800911e:	f04f 0900 	mov.w	r9, #0
 8009122:	9700      	str	r7, [sp, #0]
 8009124:	4633      	mov	r3, r6
 8009126:	aa0b      	add	r2, sp, #44	@ 0x2c
 8009128:	4621      	mov	r1, r4
 800912a:	4628      	mov	r0, r5
 800912c:	f000 f9d2 	bl	80094d4 <_printf_common>
 8009130:	3001      	adds	r0, #1
 8009132:	f040 808d 	bne.w	8009250 <_printf_float+0x1d0>
 8009136:	f04f 30ff 	mov.w	r0, #4294967295
 800913a:	b00d      	add	sp, #52	@ 0x34
 800913c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009140:	4642      	mov	r2, r8
 8009142:	464b      	mov	r3, r9
 8009144:	4640      	mov	r0, r8
 8009146:	4649      	mov	r1, r9
 8009148:	f7f7 fcf0 	bl	8000b2c <__aeabi_dcmpun>
 800914c:	b140      	cbz	r0, 8009160 <_printf_float+0xe0>
 800914e:	464b      	mov	r3, r9
 8009150:	2b00      	cmp	r3, #0
 8009152:	bfbc      	itt	lt
 8009154:	232d      	movlt	r3, #45	@ 0x2d
 8009156:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800915a:	4a7e      	ldr	r2, [pc, #504]	@ (8009354 <_printf_float+0x2d4>)
 800915c:	4b7e      	ldr	r3, [pc, #504]	@ (8009358 <_printf_float+0x2d8>)
 800915e:	e7d4      	b.n	800910a <_printf_float+0x8a>
 8009160:	6863      	ldr	r3, [r4, #4]
 8009162:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8009166:	9206      	str	r2, [sp, #24]
 8009168:	1c5a      	adds	r2, r3, #1
 800916a:	d13b      	bne.n	80091e4 <_printf_float+0x164>
 800916c:	2306      	movs	r3, #6
 800916e:	6063      	str	r3, [r4, #4]
 8009170:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8009174:	2300      	movs	r3, #0
 8009176:	6022      	str	r2, [r4, #0]
 8009178:	9303      	str	r3, [sp, #12]
 800917a:	ab0a      	add	r3, sp, #40	@ 0x28
 800917c:	e9cd a301 	strd	sl, r3, [sp, #4]
 8009180:	ab09      	add	r3, sp, #36	@ 0x24
 8009182:	9300      	str	r3, [sp, #0]
 8009184:	6861      	ldr	r1, [r4, #4]
 8009186:	ec49 8b10 	vmov	d0, r8, r9
 800918a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800918e:	4628      	mov	r0, r5
 8009190:	f7ff fed7 	bl	8008f42 <__cvt>
 8009194:	9b06      	ldr	r3, [sp, #24]
 8009196:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009198:	2b47      	cmp	r3, #71	@ 0x47
 800919a:	4680      	mov	r8, r0
 800919c:	d129      	bne.n	80091f2 <_printf_float+0x172>
 800919e:	1cc8      	adds	r0, r1, #3
 80091a0:	db02      	blt.n	80091a8 <_printf_float+0x128>
 80091a2:	6863      	ldr	r3, [r4, #4]
 80091a4:	4299      	cmp	r1, r3
 80091a6:	dd41      	ble.n	800922c <_printf_float+0x1ac>
 80091a8:	f1aa 0a02 	sub.w	sl, sl, #2
 80091ac:	fa5f fa8a 	uxtb.w	sl, sl
 80091b0:	3901      	subs	r1, #1
 80091b2:	4652      	mov	r2, sl
 80091b4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80091b8:	9109      	str	r1, [sp, #36]	@ 0x24
 80091ba:	f7ff ff27 	bl	800900c <__exponent>
 80091be:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80091c0:	1813      	adds	r3, r2, r0
 80091c2:	2a01      	cmp	r2, #1
 80091c4:	4681      	mov	r9, r0
 80091c6:	6123      	str	r3, [r4, #16]
 80091c8:	dc02      	bgt.n	80091d0 <_printf_float+0x150>
 80091ca:	6822      	ldr	r2, [r4, #0]
 80091cc:	07d2      	lsls	r2, r2, #31
 80091ce:	d501      	bpl.n	80091d4 <_printf_float+0x154>
 80091d0:	3301      	adds	r3, #1
 80091d2:	6123      	str	r3, [r4, #16]
 80091d4:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d0a2      	beq.n	8009122 <_printf_float+0xa2>
 80091dc:	232d      	movs	r3, #45	@ 0x2d
 80091de:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80091e2:	e79e      	b.n	8009122 <_printf_float+0xa2>
 80091e4:	9a06      	ldr	r2, [sp, #24]
 80091e6:	2a47      	cmp	r2, #71	@ 0x47
 80091e8:	d1c2      	bne.n	8009170 <_printf_float+0xf0>
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d1c0      	bne.n	8009170 <_printf_float+0xf0>
 80091ee:	2301      	movs	r3, #1
 80091f0:	e7bd      	b.n	800916e <_printf_float+0xee>
 80091f2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80091f6:	d9db      	bls.n	80091b0 <_printf_float+0x130>
 80091f8:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80091fc:	d118      	bne.n	8009230 <_printf_float+0x1b0>
 80091fe:	2900      	cmp	r1, #0
 8009200:	6863      	ldr	r3, [r4, #4]
 8009202:	dd0b      	ble.n	800921c <_printf_float+0x19c>
 8009204:	6121      	str	r1, [r4, #16]
 8009206:	b913      	cbnz	r3, 800920e <_printf_float+0x18e>
 8009208:	6822      	ldr	r2, [r4, #0]
 800920a:	07d0      	lsls	r0, r2, #31
 800920c:	d502      	bpl.n	8009214 <_printf_float+0x194>
 800920e:	3301      	adds	r3, #1
 8009210:	440b      	add	r3, r1
 8009212:	6123      	str	r3, [r4, #16]
 8009214:	65a1      	str	r1, [r4, #88]	@ 0x58
 8009216:	f04f 0900 	mov.w	r9, #0
 800921a:	e7db      	b.n	80091d4 <_printf_float+0x154>
 800921c:	b913      	cbnz	r3, 8009224 <_printf_float+0x1a4>
 800921e:	6822      	ldr	r2, [r4, #0]
 8009220:	07d2      	lsls	r2, r2, #31
 8009222:	d501      	bpl.n	8009228 <_printf_float+0x1a8>
 8009224:	3302      	adds	r3, #2
 8009226:	e7f4      	b.n	8009212 <_printf_float+0x192>
 8009228:	2301      	movs	r3, #1
 800922a:	e7f2      	b.n	8009212 <_printf_float+0x192>
 800922c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8009230:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009232:	4299      	cmp	r1, r3
 8009234:	db05      	blt.n	8009242 <_printf_float+0x1c2>
 8009236:	6823      	ldr	r3, [r4, #0]
 8009238:	6121      	str	r1, [r4, #16]
 800923a:	07d8      	lsls	r0, r3, #31
 800923c:	d5ea      	bpl.n	8009214 <_printf_float+0x194>
 800923e:	1c4b      	adds	r3, r1, #1
 8009240:	e7e7      	b.n	8009212 <_printf_float+0x192>
 8009242:	2900      	cmp	r1, #0
 8009244:	bfd4      	ite	le
 8009246:	f1c1 0202 	rsble	r2, r1, #2
 800924a:	2201      	movgt	r2, #1
 800924c:	4413      	add	r3, r2
 800924e:	e7e0      	b.n	8009212 <_printf_float+0x192>
 8009250:	6823      	ldr	r3, [r4, #0]
 8009252:	055a      	lsls	r2, r3, #21
 8009254:	d407      	bmi.n	8009266 <_printf_float+0x1e6>
 8009256:	6923      	ldr	r3, [r4, #16]
 8009258:	4642      	mov	r2, r8
 800925a:	4631      	mov	r1, r6
 800925c:	4628      	mov	r0, r5
 800925e:	47b8      	blx	r7
 8009260:	3001      	adds	r0, #1
 8009262:	d12b      	bne.n	80092bc <_printf_float+0x23c>
 8009264:	e767      	b.n	8009136 <_printf_float+0xb6>
 8009266:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800926a:	f240 80dd 	bls.w	8009428 <_printf_float+0x3a8>
 800926e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009272:	2200      	movs	r2, #0
 8009274:	2300      	movs	r3, #0
 8009276:	f7f7 fc27 	bl	8000ac8 <__aeabi_dcmpeq>
 800927a:	2800      	cmp	r0, #0
 800927c:	d033      	beq.n	80092e6 <_printf_float+0x266>
 800927e:	4a37      	ldr	r2, [pc, #220]	@ (800935c <_printf_float+0x2dc>)
 8009280:	2301      	movs	r3, #1
 8009282:	4631      	mov	r1, r6
 8009284:	4628      	mov	r0, r5
 8009286:	47b8      	blx	r7
 8009288:	3001      	adds	r0, #1
 800928a:	f43f af54 	beq.w	8009136 <_printf_float+0xb6>
 800928e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8009292:	4543      	cmp	r3, r8
 8009294:	db02      	blt.n	800929c <_printf_float+0x21c>
 8009296:	6823      	ldr	r3, [r4, #0]
 8009298:	07d8      	lsls	r0, r3, #31
 800929a:	d50f      	bpl.n	80092bc <_printf_float+0x23c>
 800929c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80092a0:	4631      	mov	r1, r6
 80092a2:	4628      	mov	r0, r5
 80092a4:	47b8      	blx	r7
 80092a6:	3001      	adds	r0, #1
 80092a8:	f43f af45 	beq.w	8009136 <_printf_float+0xb6>
 80092ac:	f04f 0900 	mov.w	r9, #0
 80092b0:	f108 38ff 	add.w	r8, r8, #4294967295
 80092b4:	f104 0a1a 	add.w	sl, r4, #26
 80092b8:	45c8      	cmp	r8, r9
 80092ba:	dc09      	bgt.n	80092d0 <_printf_float+0x250>
 80092bc:	6823      	ldr	r3, [r4, #0]
 80092be:	079b      	lsls	r3, r3, #30
 80092c0:	f100 8103 	bmi.w	80094ca <_printf_float+0x44a>
 80092c4:	68e0      	ldr	r0, [r4, #12]
 80092c6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80092c8:	4298      	cmp	r0, r3
 80092ca:	bfb8      	it	lt
 80092cc:	4618      	movlt	r0, r3
 80092ce:	e734      	b.n	800913a <_printf_float+0xba>
 80092d0:	2301      	movs	r3, #1
 80092d2:	4652      	mov	r2, sl
 80092d4:	4631      	mov	r1, r6
 80092d6:	4628      	mov	r0, r5
 80092d8:	47b8      	blx	r7
 80092da:	3001      	adds	r0, #1
 80092dc:	f43f af2b 	beq.w	8009136 <_printf_float+0xb6>
 80092e0:	f109 0901 	add.w	r9, r9, #1
 80092e4:	e7e8      	b.n	80092b8 <_printf_float+0x238>
 80092e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	dc39      	bgt.n	8009360 <_printf_float+0x2e0>
 80092ec:	4a1b      	ldr	r2, [pc, #108]	@ (800935c <_printf_float+0x2dc>)
 80092ee:	2301      	movs	r3, #1
 80092f0:	4631      	mov	r1, r6
 80092f2:	4628      	mov	r0, r5
 80092f4:	47b8      	blx	r7
 80092f6:	3001      	adds	r0, #1
 80092f8:	f43f af1d 	beq.w	8009136 <_printf_float+0xb6>
 80092fc:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8009300:	ea59 0303 	orrs.w	r3, r9, r3
 8009304:	d102      	bne.n	800930c <_printf_float+0x28c>
 8009306:	6823      	ldr	r3, [r4, #0]
 8009308:	07d9      	lsls	r1, r3, #31
 800930a:	d5d7      	bpl.n	80092bc <_printf_float+0x23c>
 800930c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009310:	4631      	mov	r1, r6
 8009312:	4628      	mov	r0, r5
 8009314:	47b8      	blx	r7
 8009316:	3001      	adds	r0, #1
 8009318:	f43f af0d 	beq.w	8009136 <_printf_float+0xb6>
 800931c:	f04f 0a00 	mov.w	sl, #0
 8009320:	f104 0b1a 	add.w	fp, r4, #26
 8009324:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009326:	425b      	negs	r3, r3
 8009328:	4553      	cmp	r3, sl
 800932a:	dc01      	bgt.n	8009330 <_printf_float+0x2b0>
 800932c:	464b      	mov	r3, r9
 800932e:	e793      	b.n	8009258 <_printf_float+0x1d8>
 8009330:	2301      	movs	r3, #1
 8009332:	465a      	mov	r2, fp
 8009334:	4631      	mov	r1, r6
 8009336:	4628      	mov	r0, r5
 8009338:	47b8      	blx	r7
 800933a:	3001      	adds	r0, #1
 800933c:	f43f aefb 	beq.w	8009136 <_printf_float+0xb6>
 8009340:	f10a 0a01 	add.w	sl, sl, #1
 8009344:	e7ee      	b.n	8009324 <_printf_float+0x2a4>
 8009346:	bf00      	nop
 8009348:	7fefffff 	.word	0x7fefffff
 800934c:	0800e308 	.word	0x0800e308
 8009350:	0800e30c 	.word	0x0800e30c
 8009354:	0800e310 	.word	0x0800e310
 8009358:	0800e314 	.word	0x0800e314
 800935c:	0800e318 	.word	0x0800e318
 8009360:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009362:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009366:	4553      	cmp	r3, sl
 8009368:	bfa8      	it	ge
 800936a:	4653      	movge	r3, sl
 800936c:	2b00      	cmp	r3, #0
 800936e:	4699      	mov	r9, r3
 8009370:	dc36      	bgt.n	80093e0 <_printf_float+0x360>
 8009372:	f04f 0b00 	mov.w	fp, #0
 8009376:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800937a:	f104 021a 	add.w	r2, r4, #26
 800937e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009380:	9306      	str	r3, [sp, #24]
 8009382:	eba3 0309 	sub.w	r3, r3, r9
 8009386:	455b      	cmp	r3, fp
 8009388:	dc31      	bgt.n	80093ee <_printf_float+0x36e>
 800938a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800938c:	459a      	cmp	sl, r3
 800938e:	dc3a      	bgt.n	8009406 <_printf_float+0x386>
 8009390:	6823      	ldr	r3, [r4, #0]
 8009392:	07da      	lsls	r2, r3, #31
 8009394:	d437      	bmi.n	8009406 <_printf_float+0x386>
 8009396:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009398:	ebaa 0903 	sub.w	r9, sl, r3
 800939c:	9b06      	ldr	r3, [sp, #24]
 800939e:	ebaa 0303 	sub.w	r3, sl, r3
 80093a2:	4599      	cmp	r9, r3
 80093a4:	bfa8      	it	ge
 80093a6:	4699      	movge	r9, r3
 80093a8:	f1b9 0f00 	cmp.w	r9, #0
 80093ac:	dc33      	bgt.n	8009416 <_printf_float+0x396>
 80093ae:	f04f 0800 	mov.w	r8, #0
 80093b2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80093b6:	f104 0b1a 	add.w	fp, r4, #26
 80093ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80093bc:	ebaa 0303 	sub.w	r3, sl, r3
 80093c0:	eba3 0309 	sub.w	r3, r3, r9
 80093c4:	4543      	cmp	r3, r8
 80093c6:	f77f af79 	ble.w	80092bc <_printf_float+0x23c>
 80093ca:	2301      	movs	r3, #1
 80093cc:	465a      	mov	r2, fp
 80093ce:	4631      	mov	r1, r6
 80093d0:	4628      	mov	r0, r5
 80093d2:	47b8      	blx	r7
 80093d4:	3001      	adds	r0, #1
 80093d6:	f43f aeae 	beq.w	8009136 <_printf_float+0xb6>
 80093da:	f108 0801 	add.w	r8, r8, #1
 80093de:	e7ec      	b.n	80093ba <_printf_float+0x33a>
 80093e0:	4642      	mov	r2, r8
 80093e2:	4631      	mov	r1, r6
 80093e4:	4628      	mov	r0, r5
 80093e6:	47b8      	blx	r7
 80093e8:	3001      	adds	r0, #1
 80093ea:	d1c2      	bne.n	8009372 <_printf_float+0x2f2>
 80093ec:	e6a3      	b.n	8009136 <_printf_float+0xb6>
 80093ee:	2301      	movs	r3, #1
 80093f0:	4631      	mov	r1, r6
 80093f2:	4628      	mov	r0, r5
 80093f4:	9206      	str	r2, [sp, #24]
 80093f6:	47b8      	blx	r7
 80093f8:	3001      	adds	r0, #1
 80093fa:	f43f ae9c 	beq.w	8009136 <_printf_float+0xb6>
 80093fe:	9a06      	ldr	r2, [sp, #24]
 8009400:	f10b 0b01 	add.w	fp, fp, #1
 8009404:	e7bb      	b.n	800937e <_printf_float+0x2fe>
 8009406:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800940a:	4631      	mov	r1, r6
 800940c:	4628      	mov	r0, r5
 800940e:	47b8      	blx	r7
 8009410:	3001      	adds	r0, #1
 8009412:	d1c0      	bne.n	8009396 <_printf_float+0x316>
 8009414:	e68f      	b.n	8009136 <_printf_float+0xb6>
 8009416:	9a06      	ldr	r2, [sp, #24]
 8009418:	464b      	mov	r3, r9
 800941a:	4442      	add	r2, r8
 800941c:	4631      	mov	r1, r6
 800941e:	4628      	mov	r0, r5
 8009420:	47b8      	blx	r7
 8009422:	3001      	adds	r0, #1
 8009424:	d1c3      	bne.n	80093ae <_printf_float+0x32e>
 8009426:	e686      	b.n	8009136 <_printf_float+0xb6>
 8009428:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800942c:	f1ba 0f01 	cmp.w	sl, #1
 8009430:	dc01      	bgt.n	8009436 <_printf_float+0x3b6>
 8009432:	07db      	lsls	r3, r3, #31
 8009434:	d536      	bpl.n	80094a4 <_printf_float+0x424>
 8009436:	2301      	movs	r3, #1
 8009438:	4642      	mov	r2, r8
 800943a:	4631      	mov	r1, r6
 800943c:	4628      	mov	r0, r5
 800943e:	47b8      	blx	r7
 8009440:	3001      	adds	r0, #1
 8009442:	f43f ae78 	beq.w	8009136 <_printf_float+0xb6>
 8009446:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800944a:	4631      	mov	r1, r6
 800944c:	4628      	mov	r0, r5
 800944e:	47b8      	blx	r7
 8009450:	3001      	adds	r0, #1
 8009452:	f43f ae70 	beq.w	8009136 <_printf_float+0xb6>
 8009456:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800945a:	2200      	movs	r2, #0
 800945c:	2300      	movs	r3, #0
 800945e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009462:	f7f7 fb31 	bl	8000ac8 <__aeabi_dcmpeq>
 8009466:	b9c0      	cbnz	r0, 800949a <_printf_float+0x41a>
 8009468:	4653      	mov	r3, sl
 800946a:	f108 0201 	add.w	r2, r8, #1
 800946e:	4631      	mov	r1, r6
 8009470:	4628      	mov	r0, r5
 8009472:	47b8      	blx	r7
 8009474:	3001      	adds	r0, #1
 8009476:	d10c      	bne.n	8009492 <_printf_float+0x412>
 8009478:	e65d      	b.n	8009136 <_printf_float+0xb6>
 800947a:	2301      	movs	r3, #1
 800947c:	465a      	mov	r2, fp
 800947e:	4631      	mov	r1, r6
 8009480:	4628      	mov	r0, r5
 8009482:	47b8      	blx	r7
 8009484:	3001      	adds	r0, #1
 8009486:	f43f ae56 	beq.w	8009136 <_printf_float+0xb6>
 800948a:	f108 0801 	add.w	r8, r8, #1
 800948e:	45d0      	cmp	r8, sl
 8009490:	dbf3      	blt.n	800947a <_printf_float+0x3fa>
 8009492:	464b      	mov	r3, r9
 8009494:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8009498:	e6df      	b.n	800925a <_printf_float+0x1da>
 800949a:	f04f 0800 	mov.w	r8, #0
 800949e:	f104 0b1a 	add.w	fp, r4, #26
 80094a2:	e7f4      	b.n	800948e <_printf_float+0x40e>
 80094a4:	2301      	movs	r3, #1
 80094a6:	4642      	mov	r2, r8
 80094a8:	e7e1      	b.n	800946e <_printf_float+0x3ee>
 80094aa:	2301      	movs	r3, #1
 80094ac:	464a      	mov	r2, r9
 80094ae:	4631      	mov	r1, r6
 80094b0:	4628      	mov	r0, r5
 80094b2:	47b8      	blx	r7
 80094b4:	3001      	adds	r0, #1
 80094b6:	f43f ae3e 	beq.w	8009136 <_printf_float+0xb6>
 80094ba:	f108 0801 	add.w	r8, r8, #1
 80094be:	68e3      	ldr	r3, [r4, #12]
 80094c0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80094c2:	1a5b      	subs	r3, r3, r1
 80094c4:	4543      	cmp	r3, r8
 80094c6:	dcf0      	bgt.n	80094aa <_printf_float+0x42a>
 80094c8:	e6fc      	b.n	80092c4 <_printf_float+0x244>
 80094ca:	f04f 0800 	mov.w	r8, #0
 80094ce:	f104 0919 	add.w	r9, r4, #25
 80094d2:	e7f4      	b.n	80094be <_printf_float+0x43e>

080094d4 <_printf_common>:
 80094d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80094d8:	4616      	mov	r6, r2
 80094da:	4698      	mov	r8, r3
 80094dc:	688a      	ldr	r2, [r1, #8]
 80094de:	690b      	ldr	r3, [r1, #16]
 80094e0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80094e4:	4293      	cmp	r3, r2
 80094e6:	bfb8      	it	lt
 80094e8:	4613      	movlt	r3, r2
 80094ea:	6033      	str	r3, [r6, #0]
 80094ec:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80094f0:	4607      	mov	r7, r0
 80094f2:	460c      	mov	r4, r1
 80094f4:	b10a      	cbz	r2, 80094fa <_printf_common+0x26>
 80094f6:	3301      	adds	r3, #1
 80094f8:	6033      	str	r3, [r6, #0]
 80094fa:	6823      	ldr	r3, [r4, #0]
 80094fc:	0699      	lsls	r1, r3, #26
 80094fe:	bf42      	ittt	mi
 8009500:	6833      	ldrmi	r3, [r6, #0]
 8009502:	3302      	addmi	r3, #2
 8009504:	6033      	strmi	r3, [r6, #0]
 8009506:	6825      	ldr	r5, [r4, #0]
 8009508:	f015 0506 	ands.w	r5, r5, #6
 800950c:	d106      	bne.n	800951c <_printf_common+0x48>
 800950e:	f104 0a19 	add.w	sl, r4, #25
 8009512:	68e3      	ldr	r3, [r4, #12]
 8009514:	6832      	ldr	r2, [r6, #0]
 8009516:	1a9b      	subs	r3, r3, r2
 8009518:	42ab      	cmp	r3, r5
 800951a:	dc26      	bgt.n	800956a <_printf_common+0x96>
 800951c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009520:	6822      	ldr	r2, [r4, #0]
 8009522:	3b00      	subs	r3, #0
 8009524:	bf18      	it	ne
 8009526:	2301      	movne	r3, #1
 8009528:	0692      	lsls	r2, r2, #26
 800952a:	d42b      	bmi.n	8009584 <_printf_common+0xb0>
 800952c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009530:	4641      	mov	r1, r8
 8009532:	4638      	mov	r0, r7
 8009534:	47c8      	blx	r9
 8009536:	3001      	adds	r0, #1
 8009538:	d01e      	beq.n	8009578 <_printf_common+0xa4>
 800953a:	6823      	ldr	r3, [r4, #0]
 800953c:	6922      	ldr	r2, [r4, #16]
 800953e:	f003 0306 	and.w	r3, r3, #6
 8009542:	2b04      	cmp	r3, #4
 8009544:	bf02      	ittt	eq
 8009546:	68e5      	ldreq	r5, [r4, #12]
 8009548:	6833      	ldreq	r3, [r6, #0]
 800954a:	1aed      	subeq	r5, r5, r3
 800954c:	68a3      	ldr	r3, [r4, #8]
 800954e:	bf0c      	ite	eq
 8009550:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009554:	2500      	movne	r5, #0
 8009556:	4293      	cmp	r3, r2
 8009558:	bfc4      	itt	gt
 800955a:	1a9b      	subgt	r3, r3, r2
 800955c:	18ed      	addgt	r5, r5, r3
 800955e:	2600      	movs	r6, #0
 8009560:	341a      	adds	r4, #26
 8009562:	42b5      	cmp	r5, r6
 8009564:	d11a      	bne.n	800959c <_printf_common+0xc8>
 8009566:	2000      	movs	r0, #0
 8009568:	e008      	b.n	800957c <_printf_common+0xa8>
 800956a:	2301      	movs	r3, #1
 800956c:	4652      	mov	r2, sl
 800956e:	4641      	mov	r1, r8
 8009570:	4638      	mov	r0, r7
 8009572:	47c8      	blx	r9
 8009574:	3001      	adds	r0, #1
 8009576:	d103      	bne.n	8009580 <_printf_common+0xac>
 8009578:	f04f 30ff 	mov.w	r0, #4294967295
 800957c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009580:	3501      	adds	r5, #1
 8009582:	e7c6      	b.n	8009512 <_printf_common+0x3e>
 8009584:	18e1      	adds	r1, r4, r3
 8009586:	1c5a      	adds	r2, r3, #1
 8009588:	2030      	movs	r0, #48	@ 0x30
 800958a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800958e:	4422      	add	r2, r4
 8009590:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009594:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009598:	3302      	adds	r3, #2
 800959a:	e7c7      	b.n	800952c <_printf_common+0x58>
 800959c:	2301      	movs	r3, #1
 800959e:	4622      	mov	r2, r4
 80095a0:	4641      	mov	r1, r8
 80095a2:	4638      	mov	r0, r7
 80095a4:	47c8      	blx	r9
 80095a6:	3001      	adds	r0, #1
 80095a8:	d0e6      	beq.n	8009578 <_printf_common+0xa4>
 80095aa:	3601      	adds	r6, #1
 80095ac:	e7d9      	b.n	8009562 <_printf_common+0x8e>
	...

080095b0 <_printf_i>:
 80095b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80095b4:	7e0f      	ldrb	r7, [r1, #24]
 80095b6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80095b8:	2f78      	cmp	r7, #120	@ 0x78
 80095ba:	4691      	mov	r9, r2
 80095bc:	4680      	mov	r8, r0
 80095be:	460c      	mov	r4, r1
 80095c0:	469a      	mov	sl, r3
 80095c2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80095c6:	d807      	bhi.n	80095d8 <_printf_i+0x28>
 80095c8:	2f62      	cmp	r7, #98	@ 0x62
 80095ca:	d80a      	bhi.n	80095e2 <_printf_i+0x32>
 80095cc:	2f00      	cmp	r7, #0
 80095ce:	f000 80d2 	beq.w	8009776 <_printf_i+0x1c6>
 80095d2:	2f58      	cmp	r7, #88	@ 0x58
 80095d4:	f000 80b9 	beq.w	800974a <_printf_i+0x19a>
 80095d8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80095dc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80095e0:	e03a      	b.n	8009658 <_printf_i+0xa8>
 80095e2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80095e6:	2b15      	cmp	r3, #21
 80095e8:	d8f6      	bhi.n	80095d8 <_printf_i+0x28>
 80095ea:	a101      	add	r1, pc, #4	@ (adr r1, 80095f0 <_printf_i+0x40>)
 80095ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80095f0:	08009649 	.word	0x08009649
 80095f4:	0800965d 	.word	0x0800965d
 80095f8:	080095d9 	.word	0x080095d9
 80095fc:	080095d9 	.word	0x080095d9
 8009600:	080095d9 	.word	0x080095d9
 8009604:	080095d9 	.word	0x080095d9
 8009608:	0800965d 	.word	0x0800965d
 800960c:	080095d9 	.word	0x080095d9
 8009610:	080095d9 	.word	0x080095d9
 8009614:	080095d9 	.word	0x080095d9
 8009618:	080095d9 	.word	0x080095d9
 800961c:	0800975d 	.word	0x0800975d
 8009620:	08009687 	.word	0x08009687
 8009624:	08009717 	.word	0x08009717
 8009628:	080095d9 	.word	0x080095d9
 800962c:	080095d9 	.word	0x080095d9
 8009630:	0800977f 	.word	0x0800977f
 8009634:	080095d9 	.word	0x080095d9
 8009638:	08009687 	.word	0x08009687
 800963c:	080095d9 	.word	0x080095d9
 8009640:	080095d9 	.word	0x080095d9
 8009644:	0800971f 	.word	0x0800971f
 8009648:	6833      	ldr	r3, [r6, #0]
 800964a:	1d1a      	adds	r2, r3, #4
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	6032      	str	r2, [r6, #0]
 8009650:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009654:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009658:	2301      	movs	r3, #1
 800965a:	e09d      	b.n	8009798 <_printf_i+0x1e8>
 800965c:	6833      	ldr	r3, [r6, #0]
 800965e:	6820      	ldr	r0, [r4, #0]
 8009660:	1d19      	adds	r1, r3, #4
 8009662:	6031      	str	r1, [r6, #0]
 8009664:	0606      	lsls	r6, r0, #24
 8009666:	d501      	bpl.n	800966c <_printf_i+0xbc>
 8009668:	681d      	ldr	r5, [r3, #0]
 800966a:	e003      	b.n	8009674 <_printf_i+0xc4>
 800966c:	0645      	lsls	r5, r0, #25
 800966e:	d5fb      	bpl.n	8009668 <_printf_i+0xb8>
 8009670:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009674:	2d00      	cmp	r5, #0
 8009676:	da03      	bge.n	8009680 <_printf_i+0xd0>
 8009678:	232d      	movs	r3, #45	@ 0x2d
 800967a:	426d      	negs	r5, r5
 800967c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009680:	4859      	ldr	r0, [pc, #356]	@ (80097e8 <_printf_i+0x238>)
 8009682:	230a      	movs	r3, #10
 8009684:	e011      	b.n	80096aa <_printf_i+0xfa>
 8009686:	6821      	ldr	r1, [r4, #0]
 8009688:	6833      	ldr	r3, [r6, #0]
 800968a:	0608      	lsls	r0, r1, #24
 800968c:	f853 5b04 	ldr.w	r5, [r3], #4
 8009690:	d402      	bmi.n	8009698 <_printf_i+0xe8>
 8009692:	0649      	lsls	r1, r1, #25
 8009694:	bf48      	it	mi
 8009696:	b2ad      	uxthmi	r5, r5
 8009698:	2f6f      	cmp	r7, #111	@ 0x6f
 800969a:	4853      	ldr	r0, [pc, #332]	@ (80097e8 <_printf_i+0x238>)
 800969c:	6033      	str	r3, [r6, #0]
 800969e:	bf14      	ite	ne
 80096a0:	230a      	movne	r3, #10
 80096a2:	2308      	moveq	r3, #8
 80096a4:	2100      	movs	r1, #0
 80096a6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80096aa:	6866      	ldr	r6, [r4, #4]
 80096ac:	60a6      	str	r6, [r4, #8]
 80096ae:	2e00      	cmp	r6, #0
 80096b0:	bfa2      	ittt	ge
 80096b2:	6821      	ldrge	r1, [r4, #0]
 80096b4:	f021 0104 	bicge.w	r1, r1, #4
 80096b8:	6021      	strge	r1, [r4, #0]
 80096ba:	b90d      	cbnz	r5, 80096c0 <_printf_i+0x110>
 80096bc:	2e00      	cmp	r6, #0
 80096be:	d04b      	beq.n	8009758 <_printf_i+0x1a8>
 80096c0:	4616      	mov	r6, r2
 80096c2:	fbb5 f1f3 	udiv	r1, r5, r3
 80096c6:	fb03 5711 	mls	r7, r3, r1, r5
 80096ca:	5dc7      	ldrb	r7, [r0, r7]
 80096cc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80096d0:	462f      	mov	r7, r5
 80096d2:	42bb      	cmp	r3, r7
 80096d4:	460d      	mov	r5, r1
 80096d6:	d9f4      	bls.n	80096c2 <_printf_i+0x112>
 80096d8:	2b08      	cmp	r3, #8
 80096da:	d10b      	bne.n	80096f4 <_printf_i+0x144>
 80096dc:	6823      	ldr	r3, [r4, #0]
 80096de:	07df      	lsls	r7, r3, #31
 80096e0:	d508      	bpl.n	80096f4 <_printf_i+0x144>
 80096e2:	6923      	ldr	r3, [r4, #16]
 80096e4:	6861      	ldr	r1, [r4, #4]
 80096e6:	4299      	cmp	r1, r3
 80096e8:	bfde      	ittt	le
 80096ea:	2330      	movle	r3, #48	@ 0x30
 80096ec:	f806 3c01 	strble.w	r3, [r6, #-1]
 80096f0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80096f4:	1b92      	subs	r2, r2, r6
 80096f6:	6122      	str	r2, [r4, #16]
 80096f8:	f8cd a000 	str.w	sl, [sp]
 80096fc:	464b      	mov	r3, r9
 80096fe:	aa03      	add	r2, sp, #12
 8009700:	4621      	mov	r1, r4
 8009702:	4640      	mov	r0, r8
 8009704:	f7ff fee6 	bl	80094d4 <_printf_common>
 8009708:	3001      	adds	r0, #1
 800970a:	d14a      	bne.n	80097a2 <_printf_i+0x1f2>
 800970c:	f04f 30ff 	mov.w	r0, #4294967295
 8009710:	b004      	add	sp, #16
 8009712:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009716:	6823      	ldr	r3, [r4, #0]
 8009718:	f043 0320 	orr.w	r3, r3, #32
 800971c:	6023      	str	r3, [r4, #0]
 800971e:	4833      	ldr	r0, [pc, #204]	@ (80097ec <_printf_i+0x23c>)
 8009720:	2778      	movs	r7, #120	@ 0x78
 8009722:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009726:	6823      	ldr	r3, [r4, #0]
 8009728:	6831      	ldr	r1, [r6, #0]
 800972a:	061f      	lsls	r7, r3, #24
 800972c:	f851 5b04 	ldr.w	r5, [r1], #4
 8009730:	d402      	bmi.n	8009738 <_printf_i+0x188>
 8009732:	065f      	lsls	r7, r3, #25
 8009734:	bf48      	it	mi
 8009736:	b2ad      	uxthmi	r5, r5
 8009738:	6031      	str	r1, [r6, #0]
 800973a:	07d9      	lsls	r1, r3, #31
 800973c:	bf44      	itt	mi
 800973e:	f043 0320 	orrmi.w	r3, r3, #32
 8009742:	6023      	strmi	r3, [r4, #0]
 8009744:	b11d      	cbz	r5, 800974e <_printf_i+0x19e>
 8009746:	2310      	movs	r3, #16
 8009748:	e7ac      	b.n	80096a4 <_printf_i+0xf4>
 800974a:	4827      	ldr	r0, [pc, #156]	@ (80097e8 <_printf_i+0x238>)
 800974c:	e7e9      	b.n	8009722 <_printf_i+0x172>
 800974e:	6823      	ldr	r3, [r4, #0]
 8009750:	f023 0320 	bic.w	r3, r3, #32
 8009754:	6023      	str	r3, [r4, #0]
 8009756:	e7f6      	b.n	8009746 <_printf_i+0x196>
 8009758:	4616      	mov	r6, r2
 800975a:	e7bd      	b.n	80096d8 <_printf_i+0x128>
 800975c:	6833      	ldr	r3, [r6, #0]
 800975e:	6825      	ldr	r5, [r4, #0]
 8009760:	6961      	ldr	r1, [r4, #20]
 8009762:	1d18      	adds	r0, r3, #4
 8009764:	6030      	str	r0, [r6, #0]
 8009766:	062e      	lsls	r6, r5, #24
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	d501      	bpl.n	8009770 <_printf_i+0x1c0>
 800976c:	6019      	str	r1, [r3, #0]
 800976e:	e002      	b.n	8009776 <_printf_i+0x1c6>
 8009770:	0668      	lsls	r0, r5, #25
 8009772:	d5fb      	bpl.n	800976c <_printf_i+0x1bc>
 8009774:	8019      	strh	r1, [r3, #0]
 8009776:	2300      	movs	r3, #0
 8009778:	6123      	str	r3, [r4, #16]
 800977a:	4616      	mov	r6, r2
 800977c:	e7bc      	b.n	80096f8 <_printf_i+0x148>
 800977e:	6833      	ldr	r3, [r6, #0]
 8009780:	1d1a      	adds	r2, r3, #4
 8009782:	6032      	str	r2, [r6, #0]
 8009784:	681e      	ldr	r6, [r3, #0]
 8009786:	6862      	ldr	r2, [r4, #4]
 8009788:	2100      	movs	r1, #0
 800978a:	4630      	mov	r0, r6
 800978c:	f7f6 fd20 	bl	80001d0 <memchr>
 8009790:	b108      	cbz	r0, 8009796 <_printf_i+0x1e6>
 8009792:	1b80      	subs	r0, r0, r6
 8009794:	6060      	str	r0, [r4, #4]
 8009796:	6863      	ldr	r3, [r4, #4]
 8009798:	6123      	str	r3, [r4, #16]
 800979a:	2300      	movs	r3, #0
 800979c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80097a0:	e7aa      	b.n	80096f8 <_printf_i+0x148>
 80097a2:	6923      	ldr	r3, [r4, #16]
 80097a4:	4632      	mov	r2, r6
 80097a6:	4649      	mov	r1, r9
 80097a8:	4640      	mov	r0, r8
 80097aa:	47d0      	blx	sl
 80097ac:	3001      	adds	r0, #1
 80097ae:	d0ad      	beq.n	800970c <_printf_i+0x15c>
 80097b0:	6823      	ldr	r3, [r4, #0]
 80097b2:	079b      	lsls	r3, r3, #30
 80097b4:	d413      	bmi.n	80097de <_printf_i+0x22e>
 80097b6:	68e0      	ldr	r0, [r4, #12]
 80097b8:	9b03      	ldr	r3, [sp, #12]
 80097ba:	4298      	cmp	r0, r3
 80097bc:	bfb8      	it	lt
 80097be:	4618      	movlt	r0, r3
 80097c0:	e7a6      	b.n	8009710 <_printf_i+0x160>
 80097c2:	2301      	movs	r3, #1
 80097c4:	4632      	mov	r2, r6
 80097c6:	4649      	mov	r1, r9
 80097c8:	4640      	mov	r0, r8
 80097ca:	47d0      	blx	sl
 80097cc:	3001      	adds	r0, #1
 80097ce:	d09d      	beq.n	800970c <_printf_i+0x15c>
 80097d0:	3501      	adds	r5, #1
 80097d2:	68e3      	ldr	r3, [r4, #12]
 80097d4:	9903      	ldr	r1, [sp, #12]
 80097d6:	1a5b      	subs	r3, r3, r1
 80097d8:	42ab      	cmp	r3, r5
 80097da:	dcf2      	bgt.n	80097c2 <_printf_i+0x212>
 80097dc:	e7eb      	b.n	80097b6 <_printf_i+0x206>
 80097de:	2500      	movs	r5, #0
 80097e0:	f104 0619 	add.w	r6, r4, #25
 80097e4:	e7f5      	b.n	80097d2 <_printf_i+0x222>
 80097e6:	bf00      	nop
 80097e8:	0800e31a 	.word	0x0800e31a
 80097ec:	0800e32b 	.word	0x0800e32b

080097f0 <_scanf_float>:
 80097f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097f4:	b087      	sub	sp, #28
 80097f6:	4617      	mov	r7, r2
 80097f8:	9303      	str	r3, [sp, #12]
 80097fa:	688b      	ldr	r3, [r1, #8]
 80097fc:	1e5a      	subs	r2, r3, #1
 80097fe:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8009802:	bf81      	itttt	hi
 8009804:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8009808:	eb03 0b05 	addhi.w	fp, r3, r5
 800980c:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8009810:	608b      	strhi	r3, [r1, #8]
 8009812:	680b      	ldr	r3, [r1, #0]
 8009814:	460a      	mov	r2, r1
 8009816:	f04f 0500 	mov.w	r5, #0
 800981a:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800981e:	f842 3b1c 	str.w	r3, [r2], #28
 8009822:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8009826:	4680      	mov	r8, r0
 8009828:	460c      	mov	r4, r1
 800982a:	bf98      	it	ls
 800982c:	f04f 0b00 	movls.w	fp, #0
 8009830:	9201      	str	r2, [sp, #4]
 8009832:	4616      	mov	r6, r2
 8009834:	46aa      	mov	sl, r5
 8009836:	46a9      	mov	r9, r5
 8009838:	9502      	str	r5, [sp, #8]
 800983a:	68a2      	ldr	r2, [r4, #8]
 800983c:	b152      	cbz	r2, 8009854 <_scanf_float+0x64>
 800983e:	683b      	ldr	r3, [r7, #0]
 8009840:	781b      	ldrb	r3, [r3, #0]
 8009842:	2b4e      	cmp	r3, #78	@ 0x4e
 8009844:	d864      	bhi.n	8009910 <_scanf_float+0x120>
 8009846:	2b40      	cmp	r3, #64	@ 0x40
 8009848:	d83c      	bhi.n	80098c4 <_scanf_float+0xd4>
 800984a:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800984e:	b2c8      	uxtb	r0, r1
 8009850:	280e      	cmp	r0, #14
 8009852:	d93a      	bls.n	80098ca <_scanf_float+0xda>
 8009854:	f1b9 0f00 	cmp.w	r9, #0
 8009858:	d003      	beq.n	8009862 <_scanf_float+0x72>
 800985a:	6823      	ldr	r3, [r4, #0]
 800985c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009860:	6023      	str	r3, [r4, #0]
 8009862:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009866:	f1ba 0f01 	cmp.w	sl, #1
 800986a:	f200 8117 	bhi.w	8009a9c <_scanf_float+0x2ac>
 800986e:	9b01      	ldr	r3, [sp, #4]
 8009870:	429e      	cmp	r6, r3
 8009872:	f200 8108 	bhi.w	8009a86 <_scanf_float+0x296>
 8009876:	2001      	movs	r0, #1
 8009878:	b007      	add	sp, #28
 800987a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800987e:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8009882:	2a0d      	cmp	r2, #13
 8009884:	d8e6      	bhi.n	8009854 <_scanf_float+0x64>
 8009886:	a101      	add	r1, pc, #4	@ (adr r1, 800988c <_scanf_float+0x9c>)
 8009888:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800988c:	080099d3 	.word	0x080099d3
 8009890:	08009855 	.word	0x08009855
 8009894:	08009855 	.word	0x08009855
 8009898:	08009855 	.word	0x08009855
 800989c:	08009a33 	.word	0x08009a33
 80098a0:	08009a0b 	.word	0x08009a0b
 80098a4:	08009855 	.word	0x08009855
 80098a8:	08009855 	.word	0x08009855
 80098ac:	080099e1 	.word	0x080099e1
 80098b0:	08009855 	.word	0x08009855
 80098b4:	08009855 	.word	0x08009855
 80098b8:	08009855 	.word	0x08009855
 80098bc:	08009855 	.word	0x08009855
 80098c0:	08009999 	.word	0x08009999
 80098c4:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 80098c8:	e7db      	b.n	8009882 <_scanf_float+0x92>
 80098ca:	290e      	cmp	r1, #14
 80098cc:	d8c2      	bhi.n	8009854 <_scanf_float+0x64>
 80098ce:	a001      	add	r0, pc, #4	@ (adr r0, 80098d4 <_scanf_float+0xe4>)
 80098d0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80098d4:	08009989 	.word	0x08009989
 80098d8:	08009855 	.word	0x08009855
 80098dc:	08009989 	.word	0x08009989
 80098e0:	08009a1f 	.word	0x08009a1f
 80098e4:	08009855 	.word	0x08009855
 80098e8:	08009931 	.word	0x08009931
 80098ec:	0800996f 	.word	0x0800996f
 80098f0:	0800996f 	.word	0x0800996f
 80098f4:	0800996f 	.word	0x0800996f
 80098f8:	0800996f 	.word	0x0800996f
 80098fc:	0800996f 	.word	0x0800996f
 8009900:	0800996f 	.word	0x0800996f
 8009904:	0800996f 	.word	0x0800996f
 8009908:	0800996f 	.word	0x0800996f
 800990c:	0800996f 	.word	0x0800996f
 8009910:	2b6e      	cmp	r3, #110	@ 0x6e
 8009912:	d809      	bhi.n	8009928 <_scanf_float+0x138>
 8009914:	2b60      	cmp	r3, #96	@ 0x60
 8009916:	d8b2      	bhi.n	800987e <_scanf_float+0x8e>
 8009918:	2b54      	cmp	r3, #84	@ 0x54
 800991a:	d07b      	beq.n	8009a14 <_scanf_float+0x224>
 800991c:	2b59      	cmp	r3, #89	@ 0x59
 800991e:	d199      	bne.n	8009854 <_scanf_float+0x64>
 8009920:	2d07      	cmp	r5, #7
 8009922:	d197      	bne.n	8009854 <_scanf_float+0x64>
 8009924:	2508      	movs	r5, #8
 8009926:	e02c      	b.n	8009982 <_scanf_float+0x192>
 8009928:	2b74      	cmp	r3, #116	@ 0x74
 800992a:	d073      	beq.n	8009a14 <_scanf_float+0x224>
 800992c:	2b79      	cmp	r3, #121	@ 0x79
 800992e:	e7f6      	b.n	800991e <_scanf_float+0x12e>
 8009930:	6821      	ldr	r1, [r4, #0]
 8009932:	05c8      	lsls	r0, r1, #23
 8009934:	d51b      	bpl.n	800996e <_scanf_float+0x17e>
 8009936:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800993a:	6021      	str	r1, [r4, #0]
 800993c:	f109 0901 	add.w	r9, r9, #1
 8009940:	f1bb 0f00 	cmp.w	fp, #0
 8009944:	d003      	beq.n	800994e <_scanf_float+0x15e>
 8009946:	3201      	adds	r2, #1
 8009948:	f10b 3bff 	add.w	fp, fp, #4294967295
 800994c:	60a2      	str	r2, [r4, #8]
 800994e:	68a3      	ldr	r3, [r4, #8]
 8009950:	3b01      	subs	r3, #1
 8009952:	60a3      	str	r3, [r4, #8]
 8009954:	6923      	ldr	r3, [r4, #16]
 8009956:	3301      	adds	r3, #1
 8009958:	6123      	str	r3, [r4, #16]
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	3b01      	subs	r3, #1
 800995e:	2b00      	cmp	r3, #0
 8009960:	607b      	str	r3, [r7, #4]
 8009962:	f340 8087 	ble.w	8009a74 <_scanf_float+0x284>
 8009966:	683b      	ldr	r3, [r7, #0]
 8009968:	3301      	adds	r3, #1
 800996a:	603b      	str	r3, [r7, #0]
 800996c:	e765      	b.n	800983a <_scanf_float+0x4a>
 800996e:	eb1a 0105 	adds.w	r1, sl, r5
 8009972:	f47f af6f 	bne.w	8009854 <_scanf_float+0x64>
 8009976:	6822      	ldr	r2, [r4, #0]
 8009978:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800997c:	6022      	str	r2, [r4, #0]
 800997e:	460d      	mov	r5, r1
 8009980:	468a      	mov	sl, r1
 8009982:	f806 3b01 	strb.w	r3, [r6], #1
 8009986:	e7e2      	b.n	800994e <_scanf_float+0x15e>
 8009988:	6822      	ldr	r2, [r4, #0]
 800998a:	0610      	lsls	r0, r2, #24
 800998c:	f57f af62 	bpl.w	8009854 <_scanf_float+0x64>
 8009990:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009994:	6022      	str	r2, [r4, #0]
 8009996:	e7f4      	b.n	8009982 <_scanf_float+0x192>
 8009998:	f1ba 0f00 	cmp.w	sl, #0
 800999c:	d10e      	bne.n	80099bc <_scanf_float+0x1cc>
 800999e:	f1b9 0f00 	cmp.w	r9, #0
 80099a2:	d10e      	bne.n	80099c2 <_scanf_float+0x1d2>
 80099a4:	6822      	ldr	r2, [r4, #0]
 80099a6:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80099aa:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80099ae:	d108      	bne.n	80099c2 <_scanf_float+0x1d2>
 80099b0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80099b4:	6022      	str	r2, [r4, #0]
 80099b6:	f04f 0a01 	mov.w	sl, #1
 80099ba:	e7e2      	b.n	8009982 <_scanf_float+0x192>
 80099bc:	f1ba 0f02 	cmp.w	sl, #2
 80099c0:	d055      	beq.n	8009a6e <_scanf_float+0x27e>
 80099c2:	2d01      	cmp	r5, #1
 80099c4:	d002      	beq.n	80099cc <_scanf_float+0x1dc>
 80099c6:	2d04      	cmp	r5, #4
 80099c8:	f47f af44 	bne.w	8009854 <_scanf_float+0x64>
 80099cc:	3501      	adds	r5, #1
 80099ce:	b2ed      	uxtb	r5, r5
 80099d0:	e7d7      	b.n	8009982 <_scanf_float+0x192>
 80099d2:	f1ba 0f01 	cmp.w	sl, #1
 80099d6:	f47f af3d 	bne.w	8009854 <_scanf_float+0x64>
 80099da:	f04f 0a02 	mov.w	sl, #2
 80099de:	e7d0      	b.n	8009982 <_scanf_float+0x192>
 80099e0:	b97d      	cbnz	r5, 8009a02 <_scanf_float+0x212>
 80099e2:	f1b9 0f00 	cmp.w	r9, #0
 80099e6:	f47f af38 	bne.w	800985a <_scanf_float+0x6a>
 80099ea:	6822      	ldr	r2, [r4, #0]
 80099ec:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80099f0:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80099f4:	f040 8108 	bne.w	8009c08 <_scanf_float+0x418>
 80099f8:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80099fc:	6022      	str	r2, [r4, #0]
 80099fe:	2501      	movs	r5, #1
 8009a00:	e7bf      	b.n	8009982 <_scanf_float+0x192>
 8009a02:	2d03      	cmp	r5, #3
 8009a04:	d0e2      	beq.n	80099cc <_scanf_float+0x1dc>
 8009a06:	2d05      	cmp	r5, #5
 8009a08:	e7de      	b.n	80099c8 <_scanf_float+0x1d8>
 8009a0a:	2d02      	cmp	r5, #2
 8009a0c:	f47f af22 	bne.w	8009854 <_scanf_float+0x64>
 8009a10:	2503      	movs	r5, #3
 8009a12:	e7b6      	b.n	8009982 <_scanf_float+0x192>
 8009a14:	2d06      	cmp	r5, #6
 8009a16:	f47f af1d 	bne.w	8009854 <_scanf_float+0x64>
 8009a1a:	2507      	movs	r5, #7
 8009a1c:	e7b1      	b.n	8009982 <_scanf_float+0x192>
 8009a1e:	6822      	ldr	r2, [r4, #0]
 8009a20:	0591      	lsls	r1, r2, #22
 8009a22:	f57f af17 	bpl.w	8009854 <_scanf_float+0x64>
 8009a26:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8009a2a:	6022      	str	r2, [r4, #0]
 8009a2c:	f8cd 9008 	str.w	r9, [sp, #8]
 8009a30:	e7a7      	b.n	8009982 <_scanf_float+0x192>
 8009a32:	6822      	ldr	r2, [r4, #0]
 8009a34:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8009a38:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8009a3c:	d006      	beq.n	8009a4c <_scanf_float+0x25c>
 8009a3e:	0550      	lsls	r0, r2, #21
 8009a40:	f57f af08 	bpl.w	8009854 <_scanf_float+0x64>
 8009a44:	f1b9 0f00 	cmp.w	r9, #0
 8009a48:	f000 80de 	beq.w	8009c08 <_scanf_float+0x418>
 8009a4c:	0591      	lsls	r1, r2, #22
 8009a4e:	bf58      	it	pl
 8009a50:	9902      	ldrpl	r1, [sp, #8]
 8009a52:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8009a56:	bf58      	it	pl
 8009a58:	eba9 0101 	subpl.w	r1, r9, r1
 8009a5c:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8009a60:	bf58      	it	pl
 8009a62:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8009a66:	6022      	str	r2, [r4, #0]
 8009a68:	f04f 0900 	mov.w	r9, #0
 8009a6c:	e789      	b.n	8009982 <_scanf_float+0x192>
 8009a6e:	f04f 0a03 	mov.w	sl, #3
 8009a72:	e786      	b.n	8009982 <_scanf_float+0x192>
 8009a74:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8009a78:	4639      	mov	r1, r7
 8009a7a:	4640      	mov	r0, r8
 8009a7c:	4798      	blx	r3
 8009a7e:	2800      	cmp	r0, #0
 8009a80:	f43f aedb 	beq.w	800983a <_scanf_float+0x4a>
 8009a84:	e6e6      	b.n	8009854 <_scanf_float+0x64>
 8009a86:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009a8a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009a8e:	463a      	mov	r2, r7
 8009a90:	4640      	mov	r0, r8
 8009a92:	4798      	blx	r3
 8009a94:	6923      	ldr	r3, [r4, #16]
 8009a96:	3b01      	subs	r3, #1
 8009a98:	6123      	str	r3, [r4, #16]
 8009a9a:	e6e8      	b.n	800986e <_scanf_float+0x7e>
 8009a9c:	1e6b      	subs	r3, r5, #1
 8009a9e:	2b06      	cmp	r3, #6
 8009aa0:	d824      	bhi.n	8009aec <_scanf_float+0x2fc>
 8009aa2:	2d02      	cmp	r5, #2
 8009aa4:	d836      	bhi.n	8009b14 <_scanf_float+0x324>
 8009aa6:	9b01      	ldr	r3, [sp, #4]
 8009aa8:	429e      	cmp	r6, r3
 8009aaa:	f67f aee4 	bls.w	8009876 <_scanf_float+0x86>
 8009aae:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009ab2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009ab6:	463a      	mov	r2, r7
 8009ab8:	4640      	mov	r0, r8
 8009aba:	4798      	blx	r3
 8009abc:	6923      	ldr	r3, [r4, #16]
 8009abe:	3b01      	subs	r3, #1
 8009ac0:	6123      	str	r3, [r4, #16]
 8009ac2:	e7f0      	b.n	8009aa6 <_scanf_float+0x2b6>
 8009ac4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009ac8:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8009acc:	463a      	mov	r2, r7
 8009ace:	4640      	mov	r0, r8
 8009ad0:	4798      	blx	r3
 8009ad2:	6923      	ldr	r3, [r4, #16]
 8009ad4:	3b01      	subs	r3, #1
 8009ad6:	6123      	str	r3, [r4, #16]
 8009ad8:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009adc:	fa5f fa8a 	uxtb.w	sl, sl
 8009ae0:	f1ba 0f02 	cmp.w	sl, #2
 8009ae4:	d1ee      	bne.n	8009ac4 <_scanf_float+0x2d4>
 8009ae6:	3d03      	subs	r5, #3
 8009ae8:	b2ed      	uxtb	r5, r5
 8009aea:	1b76      	subs	r6, r6, r5
 8009aec:	6823      	ldr	r3, [r4, #0]
 8009aee:	05da      	lsls	r2, r3, #23
 8009af0:	d530      	bpl.n	8009b54 <_scanf_float+0x364>
 8009af2:	055b      	lsls	r3, r3, #21
 8009af4:	d511      	bpl.n	8009b1a <_scanf_float+0x32a>
 8009af6:	9b01      	ldr	r3, [sp, #4]
 8009af8:	429e      	cmp	r6, r3
 8009afa:	f67f aebc 	bls.w	8009876 <_scanf_float+0x86>
 8009afe:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009b02:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009b06:	463a      	mov	r2, r7
 8009b08:	4640      	mov	r0, r8
 8009b0a:	4798      	blx	r3
 8009b0c:	6923      	ldr	r3, [r4, #16]
 8009b0e:	3b01      	subs	r3, #1
 8009b10:	6123      	str	r3, [r4, #16]
 8009b12:	e7f0      	b.n	8009af6 <_scanf_float+0x306>
 8009b14:	46aa      	mov	sl, r5
 8009b16:	46b3      	mov	fp, r6
 8009b18:	e7de      	b.n	8009ad8 <_scanf_float+0x2e8>
 8009b1a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8009b1e:	6923      	ldr	r3, [r4, #16]
 8009b20:	2965      	cmp	r1, #101	@ 0x65
 8009b22:	f103 33ff 	add.w	r3, r3, #4294967295
 8009b26:	f106 35ff 	add.w	r5, r6, #4294967295
 8009b2a:	6123      	str	r3, [r4, #16]
 8009b2c:	d00c      	beq.n	8009b48 <_scanf_float+0x358>
 8009b2e:	2945      	cmp	r1, #69	@ 0x45
 8009b30:	d00a      	beq.n	8009b48 <_scanf_float+0x358>
 8009b32:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009b36:	463a      	mov	r2, r7
 8009b38:	4640      	mov	r0, r8
 8009b3a:	4798      	blx	r3
 8009b3c:	6923      	ldr	r3, [r4, #16]
 8009b3e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8009b42:	3b01      	subs	r3, #1
 8009b44:	1eb5      	subs	r5, r6, #2
 8009b46:	6123      	str	r3, [r4, #16]
 8009b48:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009b4c:	463a      	mov	r2, r7
 8009b4e:	4640      	mov	r0, r8
 8009b50:	4798      	blx	r3
 8009b52:	462e      	mov	r6, r5
 8009b54:	6822      	ldr	r2, [r4, #0]
 8009b56:	f012 0210 	ands.w	r2, r2, #16
 8009b5a:	d001      	beq.n	8009b60 <_scanf_float+0x370>
 8009b5c:	2000      	movs	r0, #0
 8009b5e:	e68b      	b.n	8009878 <_scanf_float+0x88>
 8009b60:	7032      	strb	r2, [r6, #0]
 8009b62:	6823      	ldr	r3, [r4, #0]
 8009b64:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8009b68:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009b6c:	d11c      	bne.n	8009ba8 <_scanf_float+0x3b8>
 8009b6e:	9b02      	ldr	r3, [sp, #8]
 8009b70:	454b      	cmp	r3, r9
 8009b72:	eba3 0209 	sub.w	r2, r3, r9
 8009b76:	d123      	bne.n	8009bc0 <_scanf_float+0x3d0>
 8009b78:	9901      	ldr	r1, [sp, #4]
 8009b7a:	2200      	movs	r2, #0
 8009b7c:	4640      	mov	r0, r8
 8009b7e:	f002 fc2b 	bl	800c3d8 <_strtod_r>
 8009b82:	9b03      	ldr	r3, [sp, #12]
 8009b84:	6821      	ldr	r1, [r4, #0]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	f011 0f02 	tst.w	r1, #2
 8009b8c:	ec57 6b10 	vmov	r6, r7, d0
 8009b90:	f103 0204 	add.w	r2, r3, #4
 8009b94:	d01f      	beq.n	8009bd6 <_scanf_float+0x3e6>
 8009b96:	9903      	ldr	r1, [sp, #12]
 8009b98:	600a      	str	r2, [r1, #0]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	e9c3 6700 	strd	r6, r7, [r3]
 8009ba0:	68e3      	ldr	r3, [r4, #12]
 8009ba2:	3301      	adds	r3, #1
 8009ba4:	60e3      	str	r3, [r4, #12]
 8009ba6:	e7d9      	b.n	8009b5c <_scanf_float+0x36c>
 8009ba8:	9b04      	ldr	r3, [sp, #16]
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d0e4      	beq.n	8009b78 <_scanf_float+0x388>
 8009bae:	9905      	ldr	r1, [sp, #20]
 8009bb0:	230a      	movs	r3, #10
 8009bb2:	3101      	adds	r1, #1
 8009bb4:	4640      	mov	r0, r8
 8009bb6:	f002 fc8f 	bl	800c4d8 <_strtol_r>
 8009bba:	9b04      	ldr	r3, [sp, #16]
 8009bbc:	9e05      	ldr	r6, [sp, #20]
 8009bbe:	1ac2      	subs	r2, r0, r3
 8009bc0:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8009bc4:	429e      	cmp	r6, r3
 8009bc6:	bf28      	it	cs
 8009bc8:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8009bcc:	4910      	ldr	r1, [pc, #64]	@ (8009c10 <_scanf_float+0x420>)
 8009bce:	4630      	mov	r0, r6
 8009bd0:	f000 f918 	bl	8009e04 <siprintf>
 8009bd4:	e7d0      	b.n	8009b78 <_scanf_float+0x388>
 8009bd6:	f011 0f04 	tst.w	r1, #4
 8009bda:	9903      	ldr	r1, [sp, #12]
 8009bdc:	600a      	str	r2, [r1, #0]
 8009bde:	d1dc      	bne.n	8009b9a <_scanf_float+0x3aa>
 8009be0:	681d      	ldr	r5, [r3, #0]
 8009be2:	4632      	mov	r2, r6
 8009be4:	463b      	mov	r3, r7
 8009be6:	4630      	mov	r0, r6
 8009be8:	4639      	mov	r1, r7
 8009bea:	f7f6 ff9f 	bl	8000b2c <__aeabi_dcmpun>
 8009bee:	b128      	cbz	r0, 8009bfc <_scanf_float+0x40c>
 8009bf0:	4808      	ldr	r0, [pc, #32]	@ (8009c14 <_scanf_float+0x424>)
 8009bf2:	f000 f9eb 	bl	8009fcc <nanf>
 8009bf6:	ed85 0a00 	vstr	s0, [r5]
 8009bfa:	e7d1      	b.n	8009ba0 <_scanf_float+0x3b0>
 8009bfc:	4630      	mov	r0, r6
 8009bfe:	4639      	mov	r1, r7
 8009c00:	f7f6 fff2 	bl	8000be8 <__aeabi_d2f>
 8009c04:	6028      	str	r0, [r5, #0]
 8009c06:	e7cb      	b.n	8009ba0 <_scanf_float+0x3b0>
 8009c08:	f04f 0900 	mov.w	r9, #0
 8009c0c:	e629      	b.n	8009862 <_scanf_float+0x72>
 8009c0e:	bf00      	nop
 8009c10:	0800e33c 	.word	0x0800e33c
 8009c14:	0800e6d5 	.word	0x0800e6d5

08009c18 <std>:
 8009c18:	2300      	movs	r3, #0
 8009c1a:	b510      	push	{r4, lr}
 8009c1c:	4604      	mov	r4, r0
 8009c1e:	e9c0 3300 	strd	r3, r3, [r0]
 8009c22:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009c26:	6083      	str	r3, [r0, #8]
 8009c28:	8181      	strh	r1, [r0, #12]
 8009c2a:	6643      	str	r3, [r0, #100]	@ 0x64
 8009c2c:	81c2      	strh	r2, [r0, #14]
 8009c2e:	6183      	str	r3, [r0, #24]
 8009c30:	4619      	mov	r1, r3
 8009c32:	2208      	movs	r2, #8
 8009c34:	305c      	adds	r0, #92	@ 0x5c
 8009c36:	f000 f948 	bl	8009eca <memset>
 8009c3a:	4b0d      	ldr	r3, [pc, #52]	@ (8009c70 <std+0x58>)
 8009c3c:	6263      	str	r3, [r4, #36]	@ 0x24
 8009c3e:	4b0d      	ldr	r3, [pc, #52]	@ (8009c74 <std+0x5c>)
 8009c40:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009c42:	4b0d      	ldr	r3, [pc, #52]	@ (8009c78 <std+0x60>)
 8009c44:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009c46:	4b0d      	ldr	r3, [pc, #52]	@ (8009c7c <std+0x64>)
 8009c48:	6323      	str	r3, [r4, #48]	@ 0x30
 8009c4a:	4b0d      	ldr	r3, [pc, #52]	@ (8009c80 <std+0x68>)
 8009c4c:	6224      	str	r4, [r4, #32]
 8009c4e:	429c      	cmp	r4, r3
 8009c50:	d006      	beq.n	8009c60 <std+0x48>
 8009c52:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009c56:	4294      	cmp	r4, r2
 8009c58:	d002      	beq.n	8009c60 <std+0x48>
 8009c5a:	33d0      	adds	r3, #208	@ 0xd0
 8009c5c:	429c      	cmp	r4, r3
 8009c5e:	d105      	bne.n	8009c6c <std+0x54>
 8009c60:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009c64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009c68:	f000 b9ac 	b.w	8009fc4 <__retarget_lock_init_recursive>
 8009c6c:	bd10      	pop	{r4, pc}
 8009c6e:	bf00      	nop
 8009c70:	08009e45 	.word	0x08009e45
 8009c74:	08009e67 	.word	0x08009e67
 8009c78:	08009e9f 	.word	0x08009e9f
 8009c7c:	08009ec3 	.word	0x08009ec3
 8009c80:	2000060c 	.word	0x2000060c

08009c84 <stdio_exit_handler>:
 8009c84:	4a02      	ldr	r2, [pc, #8]	@ (8009c90 <stdio_exit_handler+0xc>)
 8009c86:	4903      	ldr	r1, [pc, #12]	@ (8009c94 <stdio_exit_handler+0x10>)
 8009c88:	4803      	ldr	r0, [pc, #12]	@ (8009c98 <stdio_exit_handler+0x14>)
 8009c8a:	f000 b869 	b.w	8009d60 <_fwalk_sglue>
 8009c8e:	bf00      	nop
 8009c90:	2000005c 	.word	0x2000005c
 8009c94:	0800c895 	.word	0x0800c895
 8009c98:	2000006c 	.word	0x2000006c

08009c9c <cleanup_stdio>:
 8009c9c:	6841      	ldr	r1, [r0, #4]
 8009c9e:	4b0c      	ldr	r3, [pc, #48]	@ (8009cd0 <cleanup_stdio+0x34>)
 8009ca0:	4299      	cmp	r1, r3
 8009ca2:	b510      	push	{r4, lr}
 8009ca4:	4604      	mov	r4, r0
 8009ca6:	d001      	beq.n	8009cac <cleanup_stdio+0x10>
 8009ca8:	f002 fdf4 	bl	800c894 <_fflush_r>
 8009cac:	68a1      	ldr	r1, [r4, #8]
 8009cae:	4b09      	ldr	r3, [pc, #36]	@ (8009cd4 <cleanup_stdio+0x38>)
 8009cb0:	4299      	cmp	r1, r3
 8009cb2:	d002      	beq.n	8009cba <cleanup_stdio+0x1e>
 8009cb4:	4620      	mov	r0, r4
 8009cb6:	f002 fded 	bl	800c894 <_fflush_r>
 8009cba:	68e1      	ldr	r1, [r4, #12]
 8009cbc:	4b06      	ldr	r3, [pc, #24]	@ (8009cd8 <cleanup_stdio+0x3c>)
 8009cbe:	4299      	cmp	r1, r3
 8009cc0:	d004      	beq.n	8009ccc <cleanup_stdio+0x30>
 8009cc2:	4620      	mov	r0, r4
 8009cc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009cc8:	f002 bde4 	b.w	800c894 <_fflush_r>
 8009ccc:	bd10      	pop	{r4, pc}
 8009cce:	bf00      	nop
 8009cd0:	2000060c 	.word	0x2000060c
 8009cd4:	20000674 	.word	0x20000674
 8009cd8:	200006dc 	.word	0x200006dc

08009cdc <global_stdio_init.part.0>:
 8009cdc:	b510      	push	{r4, lr}
 8009cde:	4b0b      	ldr	r3, [pc, #44]	@ (8009d0c <global_stdio_init.part.0+0x30>)
 8009ce0:	4c0b      	ldr	r4, [pc, #44]	@ (8009d10 <global_stdio_init.part.0+0x34>)
 8009ce2:	4a0c      	ldr	r2, [pc, #48]	@ (8009d14 <global_stdio_init.part.0+0x38>)
 8009ce4:	601a      	str	r2, [r3, #0]
 8009ce6:	4620      	mov	r0, r4
 8009ce8:	2200      	movs	r2, #0
 8009cea:	2104      	movs	r1, #4
 8009cec:	f7ff ff94 	bl	8009c18 <std>
 8009cf0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009cf4:	2201      	movs	r2, #1
 8009cf6:	2109      	movs	r1, #9
 8009cf8:	f7ff ff8e 	bl	8009c18 <std>
 8009cfc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009d00:	2202      	movs	r2, #2
 8009d02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009d06:	2112      	movs	r1, #18
 8009d08:	f7ff bf86 	b.w	8009c18 <std>
 8009d0c:	20000744 	.word	0x20000744
 8009d10:	2000060c 	.word	0x2000060c
 8009d14:	08009c85 	.word	0x08009c85

08009d18 <__sfp_lock_acquire>:
 8009d18:	4801      	ldr	r0, [pc, #4]	@ (8009d20 <__sfp_lock_acquire+0x8>)
 8009d1a:	f000 b954 	b.w	8009fc6 <__retarget_lock_acquire_recursive>
 8009d1e:	bf00      	nop
 8009d20:	2000074d 	.word	0x2000074d

08009d24 <__sfp_lock_release>:
 8009d24:	4801      	ldr	r0, [pc, #4]	@ (8009d2c <__sfp_lock_release+0x8>)
 8009d26:	f000 b94f 	b.w	8009fc8 <__retarget_lock_release_recursive>
 8009d2a:	bf00      	nop
 8009d2c:	2000074d 	.word	0x2000074d

08009d30 <__sinit>:
 8009d30:	b510      	push	{r4, lr}
 8009d32:	4604      	mov	r4, r0
 8009d34:	f7ff fff0 	bl	8009d18 <__sfp_lock_acquire>
 8009d38:	6a23      	ldr	r3, [r4, #32]
 8009d3a:	b11b      	cbz	r3, 8009d44 <__sinit+0x14>
 8009d3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009d40:	f7ff bff0 	b.w	8009d24 <__sfp_lock_release>
 8009d44:	4b04      	ldr	r3, [pc, #16]	@ (8009d58 <__sinit+0x28>)
 8009d46:	6223      	str	r3, [r4, #32]
 8009d48:	4b04      	ldr	r3, [pc, #16]	@ (8009d5c <__sinit+0x2c>)
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d1f5      	bne.n	8009d3c <__sinit+0xc>
 8009d50:	f7ff ffc4 	bl	8009cdc <global_stdio_init.part.0>
 8009d54:	e7f2      	b.n	8009d3c <__sinit+0xc>
 8009d56:	bf00      	nop
 8009d58:	08009c9d 	.word	0x08009c9d
 8009d5c:	20000744 	.word	0x20000744

08009d60 <_fwalk_sglue>:
 8009d60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009d64:	4607      	mov	r7, r0
 8009d66:	4688      	mov	r8, r1
 8009d68:	4614      	mov	r4, r2
 8009d6a:	2600      	movs	r6, #0
 8009d6c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009d70:	f1b9 0901 	subs.w	r9, r9, #1
 8009d74:	d505      	bpl.n	8009d82 <_fwalk_sglue+0x22>
 8009d76:	6824      	ldr	r4, [r4, #0]
 8009d78:	2c00      	cmp	r4, #0
 8009d7a:	d1f7      	bne.n	8009d6c <_fwalk_sglue+0xc>
 8009d7c:	4630      	mov	r0, r6
 8009d7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009d82:	89ab      	ldrh	r3, [r5, #12]
 8009d84:	2b01      	cmp	r3, #1
 8009d86:	d907      	bls.n	8009d98 <_fwalk_sglue+0x38>
 8009d88:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009d8c:	3301      	adds	r3, #1
 8009d8e:	d003      	beq.n	8009d98 <_fwalk_sglue+0x38>
 8009d90:	4629      	mov	r1, r5
 8009d92:	4638      	mov	r0, r7
 8009d94:	47c0      	blx	r8
 8009d96:	4306      	orrs	r6, r0
 8009d98:	3568      	adds	r5, #104	@ 0x68
 8009d9a:	e7e9      	b.n	8009d70 <_fwalk_sglue+0x10>

08009d9c <sniprintf>:
 8009d9c:	b40c      	push	{r2, r3}
 8009d9e:	b530      	push	{r4, r5, lr}
 8009da0:	4b17      	ldr	r3, [pc, #92]	@ (8009e00 <sniprintf+0x64>)
 8009da2:	1e0c      	subs	r4, r1, #0
 8009da4:	681d      	ldr	r5, [r3, #0]
 8009da6:	b09d      	sub	sp, #116	@ 0x74
 8009da8:	da08      	bge.n	8009dbc <sniprintf+0x20>
 8009daa:	238b      	movs	r3, #139	@ 0x8b
 8009dac:	602b      	str	r3, [r5, #0]
 8009dae:	f04f 30ff 	mov.w	r0, #4294967295
 8009db2:	b01d      	add	sp, #116	@ 0x74
 8009db4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009db8:	b002      	add	sp, #8
 8009dba:	4770      	bx	lr
 8009dbc:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8009dc0:	f8ad 3014 	strh.w	r3, [sp, #20]
 8009dc4:	bf14      	ite	ne
 8009dc6:	f104 33ff 	addne.w	r3, r4, #4294967295
 8009dca:	4623      	moveq	r3, r4
 8009dcc:	9304      	str	r3, [sp, #16]
 8009dce:	9307      	str	r3, [sp, #28]
 8009dd0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8009dd4:	9002      	str	r0, [sp, #8]
 8009dd6:	9006      	str	r0, [sp, #24]
 8009dd8:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009ddc:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8009dde:	ab21      	add	r3, sp, #132	@ 0x84
 8009de0:	a902      	add	r1, sp, #8
 8009de2:	4628      	mov	r0, r5
 8009de4:	9301      	str	r3, [sp, #4]
 8009de6:	f002 fbd5 	bl	800c594 <_svfiprintf_r>
 8009dea:	1c43      	adds	r3, r0, #1
 8009dec:	bfbc      	itt	lt
 8009dee:	238b      	movlt	r3, #139	@ 0x8b
 8009df0:	602b      	strlt	r3, [r5, #0]
 8009df2:	2c00      	cmp	r4, #0
 8009df4:	d0dd      	beq.n	8009db2 <sniprintf+0x16>
 8009df6:	9b02      	ldr	r3, [sp, #8]
 8009df8:	2200      	movs	r2, #0
 8009dfa:	701a      	strb	r2, [r3, #0]
 8009dfc:	e7d9      	b.n	8009db2 <sniprintf+0x16>
 8009dfe:	bf00      	nop
 8009e00:	20000068 	.word	0x20000068

08009e04 <siprintf>:
 8009e04:	b40e      	push	{r1, r2, r3}
 8009e06:	b500      	push	{lr}
 8009e08:	b09c      	sub	sp, #112	@ 0x70
 8009e0a:	ab1d      	add	r3, sp, #116	@ 0x74
 8009e0c:	9002      	str	r0, [sp, #8]
 8009e0e:	9006      	str	r0, [sp, #24]
 8009e10:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8009e14:	4809      	ldr	r0, [pc, #36]	@ (8009e3c <siprintf+0x38>)
 8009e16:	9107      	str	r1, [sp, #28]
 8009e18:	9104      	str	r1, [sp, #16]
 8009e1a:	4909      	ldr	r1, [pc, #36]	@ (8009e40 <siprintf+0x3c>)
 8009e1c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009e20:	9105      	str	r1, [sp, #20]
 8009e22:	6800      	ldr	r0, [r0, #0]
 8009e24:	9301      	str	r3, [sp, #4]
 8009e26:	a902      	add	r1, sp, #8
 8009e28:	f002 fbb4 	bl	800c594 <_svfiprintf_r>
 8009e2c:	9b02      	ldr	r3, [sp, #8]
 8009e2e:	2200      	movs	r2, #0
 8009e30:	701a      	strb	r2, [r3, #0]
 8009e32:	b01c      	add	sp, #112	@ 0x70
 8009e34:	f85d eb04 	ldr.w	lr, [sp], #4
 8009e38:	b003      	add	sp, #12
 8009e3a:	4770      	bx	lr
 8009e3c:	20000068 	.word	0x20000068
 8009e40:	ffff0208 	.word	0xffff0208

08009e44 <__sread>:
 8009e44:	b510      	push	{r4, lr}
 8009e46:	460c      	mov	r4, r1
 8009e48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e4c:	f000 f86c 	bl	8009f28 <_read_r>
 8009e50:	2800      	cmp	r0, #0
 8009e52:	bfab      	itete	ge
 8009e54:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009e56:	89a3      	ldrhlt	r3, [r4, #12]
 8009e58:	181b      	addge	r3, r3, r0
 8009e5a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009e5e:	bfac      	ite	ge
 8009e60:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009e62:	81a3      	strhlt	r3, [r4, #12]
 8009e64:	bd10      	pop	{r4, pc}

08009e66 <__swrite>:
 8009e66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e6a:	461f      	mov	r7, r3
 8009e6c:	898b      	ldrh	r3, [r1, #12]
 8009e6e:	05db      	lsls	r3, r3, #23
 8009e70:	4605      	mov	r5, r0
 8009e72:	460c      	mov	r4, r1
 8009e74:	4616      	mov	r6, r2
 8009e76:	d505      	bpl.n	8009e84 <__swrite+0x1e>
 8009e78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e7c:	2302      	movs	r3, #2
 8009e7e:	2200      	movs	r2, #0
 8009e80:	f000 f840 	bl	8009f04 <_lseek_r>
 8009e84:	89a3      	ldrh	r3, [r4, #12]
 8009e86:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009e8a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009e8e:	81a3      	strh	r3, [r4, #12]
 8009e90:	4632      	mov	r2, r6
 8009e92:	463b      	mov	r3, r7
 8009e94:	4628      	mov	r0, r5
 8009e96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009e9a:	f000 b857 	b.w	8009f4c <_write_r>

08009e9e <__sseek>:
 8009e9e:	b510      	push	{r4, lr}
 8009ea0:	460c      	mov	r4, r1
 8009ea2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ea6:	f000 f82d 	bl	8009f04 <_lseek_r>
 8009eaa:	1c43      	adds	r3, r0, #1
 8009eac:	89a3      	ldrh	r3, [r4, #12]
 8009eae:	bf15      	itete	ne
 8009eb0:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009eb2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009eb6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009eba:	81a3      	strheq	r3, [r4, #12]
 8009ebc:	bf18      	it	ne
 8009ebe:	81a3      	strhne	r3, [r4, #12]
 8009ec0:	bd10      	pop	{r4, pc}

08009ec2 <__sclose>:
 8009ec2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ec6:	f000 b80d 	b.w	8009ee4 <_close_r>

08009eca <memset>:
 8009eca:	4402      	add	r2, r0
 8009ecc:	4603      	mov	r3, r0
 8009ece:	4293      	cmp	r3, r2
 8009ed0:	d100      	bne.n	8009ed4 <memset+0xa>
 8009ed2:	4770      	bx	lr
 8009ed4:	f803 1b01 	strb.w	r1, [r3], #1
 8009ed8:	e7f9      	b.n	8009ece <memset+0x4>
	...

08009edc <_localeconv_r>:
 8009edc:	4800      	ldr	r0, [pc, #0]	@ (8009ee0 <_localeconv_r+0x4>)
 8009ede:	4770      	bx	lr
 8009ee0:	200001a8 	.word	0x200001a8

08009ee4 <_close_r>:
 8009ee4:	b538      	push	{r3, r4, r5, lr}
 8009ee6:	4d06      	ldr	r5, [pc, #24]	@ (8009f00 <_close_r+0x1c>)
 8009ee8:	2300      	movs	r3, #0
 8009eea:	4604      	mov	r4, r0
 8009eec:	4608      	mov	r0, r1
 8009eee:	602b      	str	r3, [r5, #0]
 8009ef0:	f7f8 f99e 	bl	8002230 <_close>
 8009ef4:	1c43      	adds	r3, r0, #1
 8009ef6:	d102      	bne.n	8009efe <_close_r+0x1a>
 8009ef8:	682b      	ldr	r3, [r5, #0]
 8009efa:	b103      	cbz	r3, 8009efe <_close_r+0x1a>
 8009efc:	6023      	str	r3, [r4, #0]
 8009efe:	bd38      	pop	{r3, r4, r5, pc}
 8009f00:	20000748 	.word	0x20000748

08009f04 <_lseek_r>:
 8009f04:	b538      	push	{r3, r4, r5, lr}
 8009f06:	4d07      	ldr	r5, [pc, #28]	@ (8009f24 <_lseek_r+0x20>)
 8009f08:	4604      	mov	r4, r0
 8009f0a:	4608      	mov	r0, r1
 8009f0c:	4611      	mov	r1, r2
 8009f0e:	2200      	movs	r2, #0
 8009f10:	602a      	str	r2, [r5, #0]
 8009f12:	461a      	mov	r2, r3
 8009f14:	f7f8 f9b3 	bl	800227e <_lseek>
 8009f18:	1c43      	adds	r3, r0, #1
 8009f1a:	d102      	bne.n	8009f22 <_lseek_r+0x1e>
 8009f1c:	682b      	ldr	r3, [r5, #0]
 8009f1e:	b103      	cbz	r3, 8009f22 <_lseek_r+0x1e>
 8009f20:	6023      	str	r3, [r4, #0]
 8009f22:	bd38      	pop	{r3, r4, r5, pc}
 8009f24:	20000748 	.word	0x20000748

08009f28 <_read_r>:
 8009f28:	b538      	push	{r3, r4, r5, lr}
 8009f2a:	4d07      	ldr	r5, [pc, #28]	@ (8009f48 <_read_r+0x20>)
 8009f2c:	4604      	mov	r4, r0
 8009f2e:	4608      	mov	r0, r1
 8009f30:	4611      	mov	r1, r2
 8009f32:	2200      	movs	r2, #0
 8009f34:	602a      	str	r2, [r5, #0]
 8009f36:	461a      	mov	r2, r3
 8009f38:	f7f8 f941 	bl	80021be <_read>
 8009f3c:	1c43      	adds	r3, r0, #1
 8009f3e:	d102      	bne.n	8009f46 <_read_r+0x1e>
 8009f40:	682b      	ldr	r3, [r5, #0]
 8009f42:	b103      	cbz	r3, 8009f46 <_read_r+0x1e>
 8009f44:	6023      	str	r3, [r4, #0]
 8009f46:	bd38      	pop	{r3, r4, r5, pc}
 8009f48:	20000748 	.word	0x20000748

08009f4c <_write_r>:
 8009f4c:	b538      	push	{r3, r4, r5, lr}
 8009f4e:	4d07      	ldr	r5, [pc, #28]	@ (8009f6c <_write_r+0x20>)
 8009f50:	4604      	mov	r4, r0
 8009f52:	4608      	mov	r0, r1
 8009f54:	4611      	mov	r1, r2
 8009f56:	2200      	movs	r2, #0
 8009f58:	602a      	str	r2, [r5, #0]
 8009f5a:	461a      	mov	r2, r3
 8009f5c:	f7f8 f94c 	bl	80021f8 <_write>
 8009f60:	1c43      	adds	r3, r0, #1
 8009f62:	d102      	bne.n	8009f6a <_write_r+0x1e>
 8009f64:	682b      	ldr	r3, [r5, #0]
 8009f66:	b103      	cbz	r3, 8009f6a <_write_r+0x1e>
 8009f68:	6023      	str	r3, [r4, #0]
 8009f6a:	bd38      	pop	{r3, r4, r5, pc}
 8009f6c:	20000748 	.word	0x20000748

08009f70 <__errno>:
 8009f70:	4b01      	ldr	r3, [pc, #4]	@ (8009f78 <__errno+0x8>)
 8009f72:	6818      	ldr	r0, [r3, #0]
 8009f74:	4770      	bx	lr
 8009f76:	bf00      	nop
 8009f78:	20000068 	.word	0x20000068

08009f7c <__libc_init_array>:
 8009f7c:	b570      	push	{r4, r5, r6, lr}
 8009f7e:	4d0d      	ldr	r5, [pc, #52]	@ (8009fb4 <__libc_init_array+0x38>)
 8009f80:	4c0d      	ldr	r4, [pc, #52]	@ (8009fb8 <__libc_init_array+0x3c>)
 8009f82:	1b64      	subs	r4, r4, r5
 8009f84:	10a4      	asrs	r4, r4, #2
 8009f86:	2600      	movs	r6, #0
 8009f88:	42a6      	cmp	r6, r4
 8009f8a:	d109      	bne.n	8009fa0 <__libc_init_array+0x24>
 8009f8c:	4d0b      	ldr	r5, [pc, #44]	@ (8009fbc <__libc_init_array+0x40>)
 8009f8e:	4c0c      	ldr	r4, [pc, #48]	@ (8009fc0 <__libc_init_array+0x44>)
 8009f90:	f003 fb70 	bl	800d674 <_init>
 8009f94:	1b64      	subs	r4, r4, r5
 8009f96:	10a4      	asrs	r4, r4, #2
 8009f98:	2600      	movs	r6, #0
 8009f9a:	42a6      	cmp	r6, r4
 8009f9c:	d105      	bne.n	8009faa <__libc_init_array+0x2e>
 8009f9e:	bd70      	pop	{r4, r5, r6, pc}
 8009fa0:	f855 3b04 	ldr.w	r3, [r5], #4
 8009fa4:	4798      	blx	r3
 8009fa6:	3601      	adds	r6, #1
 8009fa8:	e7ee      	b.n	8009f88 <__libc_init_array+0xc>
 8009faa:	f855 3b04 	ldr.w	r3, [r5], #4
 8009fae:	4798      	blx	r3
 8009fb0:	3601      	adds	r6, #1
 8009fb2:	e7f2      	b.n	8009f9a <__libc_init_array+0x1e>
 8009fb4:	0800e740 	.word	0x0800e740
 8009fb8:	0800e740 	.word	0x0800e740
 8009fbc:	0800e740 	.word	0x0800e740
 8009fc0:	0800e744 	.word	0x0800e744

08009fc4 <__retarget_lock_init_recursive>:
 8009fc4:	4770      	bx	lr

08009fc6 <__retarget_lock_acquire_recursive>:
 8009fc6:	4770      	bx	lr

08009fc8 <__retarget_lock_release_recursive>:
 8009fc8:	4770      	bx	lr
	...

08009fcc <nanf>:
 8009fcc:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8009fd4 <nanf+0x8>
 8009fd0:	4770      	bx	lr
 8009fd2:	bf00      	nop
 8009fd4:	7fc00000 	.word	0x7fc00000

08009fd8 <quorem>:
 8009fd8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fdc:	6903      	ldr	r3, [r0, #16]
 8009fde:	690c      	ldr	r4, [r1, #16]
 8009fe0:	42a3      	cmp	r3, r4
 8009fe2:	4607      	mov	r7, r0
 8009fe4:	db7e      	blt.n	800a0e4 <quorem+0x10c>
 8009fe6:	3c01      	subs	r4, #1
 8009fe8:	f101 0814 	add.w	r8, r1, #20
 8009fec:	00a3      	lsls	r3, r4, #2
 8009fee:	f100 0514 	add.w	r5, r0, #20
 8009ff2:	9300      	str	r3, [sp, #0]
 8009ff4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009ff8:	9301      	str	r3, [sp, #4]
 8009ffa:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009ffe:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a002:	3301      	adds	r3, #1
 800a004:	429a      	cmp	r2, r3
 800a006:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a00a:	fbb2 f6f3 	udiv	r6, r2, r3
 800a00e:	d32e      	bcc.n	800a06e <quorem+0x96>
 800a010:	f04f 0a00 	mov.w	sl, #0
 800a014:	46c4      	mov	ip, r8
 800a016:	46ae      	mov	lr, r5
 800a018:	46d3      	mov	fp, sl
 800a01a:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a01e:	b298      	uxth	r0, r3
 800a020:	fb06 a000 	mla	r0, r6, r0, sl
 800a024:	0c02      	lsrs	r2, r0, #16
 800a026:	0c1b      	lsrs	r3, r3, #16
 800a028:	fb06 2303 	mla	r3, r6, r3, r2
 800a02c:	f8de 2000 	ldr.w	r2, [lr]
 800a030:	b280      	uxth	r0, r0
 800a032:	b292      	uxth	r2, r2
 800a034:	1a12      	subs	r2, r2, r0
 800a036:	445a      	add	r2, fp
 800a038:	f8de 0000 	ldr.w	r0, [lr]
 800a03c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a040:	b29b      	uxth	r3, r3
 800a042:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800a046:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800a04a:	b292      	uxth	r2, r2
 800a04c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800a050:	45e1      	cmp	r9, ip
 800a052:	f84e 2b04 	str.w	r2, [lr], #4
 800a056:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800a05a:	d2de      	bcs.n	800a01a <quorem+0x42>
 800a05c:	9b00      	ldr	r3, [sp, #0]
 800a05e:	58eb      	ldr	r3, [r5, r3]
 800a060:	b92b      	cbnz	r3, 800a06e <quorem+0x96>
 800a062:	9b01      	ldr	r3, [sp, #4]
 800a064:	3b04      	subs	r3, #4
 800a066:	429d      	cmp	r5, r3
 800a068:	461a      	mov	r2, r3
 800a06a:	d32f      	bcc.n	800a0cc <quorem+0xf4>
 800a06c:	613c      	str	r4, [r7, #16]
 800a06e:	4638      	mov	r0, r7
 800a070:	f001 f9c2 	bl	800b3f8 <__mcmp>
 800a074:	2800      	cmp	r0, #0
 800a076:	db25      	blt.n	800a0c4 <quorem+0xec>
 800a078:	4629      	mov	r1, r5
 800a07a:	2000      	movs	r0, #0
 800a07c:	f858 2b04 	ldr.w	r2, [r8], #4
 800a080:	f8d1 c000 	ldr.w	ip, [r1]
 800a084:	fa1f fe82 	uxth.w	lr, r2
 800a088:	fa1f f38c 	uxth.w	r3, ip
 800a08c:	eba3 030e 	sub.w	r3, r3, lr
 800a090:	4403      	add	r3, r0
 800a092:	0c12      	lsrs	r2, r2, #16
 800a094:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800a098:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800a09c:	b29b      	uxth	r3, r3
 800a09e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a0a2:	45c1      	cmp	r9, r8
 800a0a4:	f841 3b04 	str.w	r3, [r1], #4
 800a0a8:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a0ac:	d2e6      	bcs.n	800a07c <quorem+0xa4>
 800a0ae:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a0b2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a0b6:	b922      	cbnz	r2, 800a0c2 <quorem+0xea>
 800a0b8:	3b04      	subs	r3, #4
 800a0ba:	429d      	cmp	r5, r3
 800a0bc:	461a      	mov	r2, r3
 800a0be:	d30b      	bcc.n	800a0d8 <quorem+0x100>
 800a0c0:	613c      	str	r4, [r7, #16]
 800a0c2:	3601      	adds	r6, #1
 800a0c4:	4630      	mov	r0, r6
 800a0c6:	b003      	add	sp, #12
 800a0c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0cc:	6812      	ldr	r2, [r2, #0]
 800a0ce:	3b04      	subs	r3, #4
 800a0d0:	2a00      	cmp	r2, #0
 800a0d2:	d1cb      	bne.n	800a06c <quorem+0x94>
 800a0d4:	3c01      	subs	r4, #1
 800a0d6:	e7c6      	b.n	800a066 <quorem+0x8e>
 800a0d8:	6812      	ldr	r2, [r2, #0]
 800a0da:	3b04      	subs	r3, #4
 800a0dc:	2a00      	cmp	r2, #0
 800a0de:	d1ef      	bne.n	800a0c0 <quorem+0xe8>
 800a0e0:	3c01      	subs	r4, #1
 800a0e2:	e7ea      	b.n	800a0ba <quorem+0xe2>
 800a0e4:	2000      	movs	r0, #0
 800a0e6:	e7ee      	b.n	800a0c6 <quorem+0xee>

0800a0e8 <_dtoa_r>:
 800a0e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0ec:	69c7      	ldr	r7, [r0, #28]
 800a0ee:	b099      	sub	sp, #100	@ 0x64
 800a0f0:	ed8d 0b02 	vstr	d0, [sp, #8]
 800a0f4:	ec55 4b10 	vmov	r4, r5, d0
 800a0f8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800a0fa:	9109      	str	r1, [sp, #36]	@ 0x24
 800a0fc:	4683      	mov	fp, r0
 800a0fe:	920e      	str	r2, [sp, #56]	@ 0x38
 800a100:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a102:	b97f      	cbnz	r7, 800a124 <_dtoa_r+0x3c>
 800a104:	2010      	movs	r0, #16
 800a106:	f000 fdfd 	bl	800ad04 <malloc>
 800a10a:	4602      	mov	r2, r0
 800a10c:	f8cb 001c 	str.w	r0, [fp, #28]
 800a110:	b920      	cbnz	r0, 800a11c <_dtoa_r+0x34>
 800a112:	4ba7      	ldr	r3, [pc, #668]	@ (800a3b0 <_dtoa_r+0x2c8>)
 800a114:	21ef      	movs	r1, #239	@ 0xef
 800a116:	48a7      	ldr	r0, [pc, #668]	@ (800a3b4 <_dtoa_r+0x2cc>)
 800a118:	f002 fc36 	bl	800c988 <__assert_func>
 800a11c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800a120:	6007      	str	r7, [r0, #0]
 800a122:	60c7      	str	r7, [r0, #12]
 800a124:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a128:	6819      	ldr	r1, [r3, #0]
 800a12a:	b159      	cbz	r1, 800a144 <_dtoa_r+0x5c>
 800a12c:	685a      	ldr	r2, [r3, #4]
 800a12e:	604a      	str	r2, [r1, #4]
 800a130:	2301      	movs	r3, #1
 800a132:	4093      	lsls	r3, r2
 800a134:	608b      	str	r3, [r1, #8]
 800a136:	4658      	mov	r0, fp
 800a138:	f000 feda 	bl	800aef0 <_Bfree>
 800a13c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a140:	2200      	movs	r2, #0
 800a142:	601a      	str	r2, [r3, #0]
 800a144:	1e2b      	subs	r3, r5, #0
 800a146:	bfb9      	ittee	lt
 800a148:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800a14c:	9303      	strlt	r3, [sp, #12]
 800a14e:	2300      	movge	r3, #0
 800a150:	6033      	strge	r3, [r6, #0]
 800a152:	9f03      	ldr	r7, [sp, #12]
 800a154:	4b98      	ldr	r3, [pc, #608]	@ (800a3b8 <_dtoa_r+0x2d0>)
 800a156:	bfbc      	itt	lt
 800a158:	2201      	movlt	r2, #1
 800a15a:	6032      	strlt	r2, [r6, #0]
 800a15c:	43bb      	bics	r3, r7
 800a15e:	d112      	bne.n	800a186 <_dtoa_r+0x9e>
 800a160:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800a162:	f242 730f 	movw	r3, #9999	@ 0x270f
 800a166:	6013      	str	r3, [r2, #0]
 800a168:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a16c:	4323      	orrs	r3, r4
 800a16e:	f000 854d 	beq.w	800ac0c <_dtoa_r+0xb24>
 800a172:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a174:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800a3cc <_dtoa_r+0x2e4>
 800a178:	2b00      	cmp	r3, #0
 800a17a:	f000 854f 	beq.w	800ac1c <_dtoa_r+0xb34>
 800a17e:	f10a 0303 	add.w	r3, sl, #3
 800a182:	f000 bd49 	b.w	800ac18 <_dtoa_r+0xb30>
 800a186:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a18a:	2200      	movs	r2, #0
 800a18c:	ec51 0b17 	vmov	r0, r1, d7
 800a190:	2300      	movs	r3, #0
 800a192:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800a196:	f7f6 fc97 	bl	8000ac8 <__aeabi_dcmpeq>
 800a19a:	4680      	mov	r8, r0
 800a19c:	b158      	cbz	r0, 800a1b6 <_dtoa_r+0xce>
 800a19e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800a1a0:	2301      	movs	r3, #1
 800a1a2:	6013      	str	r3, [r2, #0]
 800a1a4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a1a6:	b113      	cbz	r3, 800a1ae <_dtoa_r+0xc6>
 800a1a8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800a1aa:	4b84      	ldr	r3, [pc, #528]	@ (800a3bc <_dtoa_r+0x2d4>)
 800a1ac:	6013      	str	r3, [r2, #0]
 800a1ae:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800a3d0 <_dtoa_r+0x2e8>
 800a1b2:	f000 bd33 	b.w	800ac1c <_dtoa_r+0xb34>
 800a1b6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800a1ba:	aa16      	add	r2, sp, #88	@ 0x58
 800a1bc:	a917      	add	r1, sp, #92	@ 0x5c
 800a1be:	4658      	mov	r0, fp
 800a1c0:	f001 fa3a 	bl	800b638 <__d2b>
 800a1c4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800a1c8:	4681      	mov	r9, r0
 800a1ca:	2e00      	cmp	r6, #0
 800a1cc:	d077      	beq.n	800a2be <_dtoa_r+0x1d6>
 800a1ce:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a1d0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800a1d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a1d8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a1dc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800a1e0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800a1e4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800a1e8:	4619      	mov	r1, r3
 800a1ea:	2200      	movs	r2, #0
 800a1ec:	4b74      	ldr	r3, [pc, #464]	@ (800a3c0 <_dtoa_r+0x2d8>)
 800a1ee:	f7f6 f84b 	bl	8000288 <__aeabi_dsub>
 800a1f2:	a369      	add	r3, pc, #420	@ (adr r3, 800a398 <_dtoa_r+0x2b0>)
 800a1f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1f8:	f7f6 f9fe 	bl	80005f8 <__aeabi_dmul>
 800a1fc:	a368      	add	r3, pc, #416	@ (adr r3, 800a3a0 <_dtoa_r+0x2b8>)
 800a1fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a202:	f7f6 f843 	bl	800028c <__adddf3>
 800a206:	4604      	mov	r4, r0
 800a208:	4630      	mov	r0, r6
 800a20a:	460d      	mov	r5, r1
 800a20c:	f7f6 f98a 	bl	8000524 <__aeabi_i2d>
 800a210:	a365      	add	r3, pc, #404	@ (adr r3, 800a3a8 <_dtoa_r+0x2c0>)
 800a212:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a216:	f7f6 f9ef 	bl	80005f8 <__aeabi_dmul>
 800a21a:	4602      	mov	r2, r0
 800a21c:	460b      	mov	r3, r1
 800a21e:	4620      	mov	r0, r4
 800a220:	4629      	mov	r1, r5
 800a222:	f7f6 f833 	bl	800028c <__adddf3>
 800a226:	4604      	mov	r4, r0
 800a228:	460d      	mov	r5, r1
 800a22a:	f7f6 fc95 	bl	8000b58 <__aeabi_d2iz>
 800a22e:	2200      	movs	r2, #0
 800a230:	4607      	mov	r7, r0
 800a232:	2300      	movs	r3, #0
 800a234:	4620      	mov	r0, r4
 800a236:	4629      	mov	r1, r5
 800a238:	f7f6 fc50 	bl	8000adc <__aeabi_dcmplt>
 800a23c:	b140      	cbz	r0, 800a250 <_dtoa_r+0x168>
 800a23e:	4638      	mov	r0, r7
 800a240:	f7f6 f970 	bl	8000524 <__aeabi_i2d>
 800a244:	4622      	mov	r2, r4
 800a246:	462b      	mov	r3, r5
 800a248:	f7f6 fc3e 	bl	8000ac8 <__aeabi_dcmpeq>
 800a24c:	b900      	cbnz	r0, 800a250 <_dtoa_r+0x168>
 800a24e:	3f01      	subs	r7, #1
 800a250:	2f16      	cmp	r7, #22
 800a252:	d851      	bhi.n	800a2f8 <_dtoa_r+0x210>
 800a254:	4b5b      	ldr	r3, [pc, #364]	@ (800a3c4 <_dtoa_r+0x2dc>)
 800a256:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a25a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a25e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a262:	f7f6 fc3b 	bl	8000adc <__aeabi_dcmplt>
 800a266:	2800      	cmp	r0, #0
 800a268:	d048      	beq.n	800a2fc <_dtoa_r+0x214>
 800a26a:	3f01      	subs	r7, #1
 800a26c:	2300      	movs	r3, #0
 800a26e:	9312      	str	r3, [sp, #72]	@ 0x48
 800a270:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800a272:	1b9b      	subs	r3, r3, r6
 800a274:	1e5a      	subs	r2, r3, #1
 800a276:	bf44      	itt	mi
 800a278:	f1c3 0801 	rsbmi	r8, r3, #1
 800a27c:	2300      	movmi	r3, #0
 800a27e:	9208      	str	r2, [sp, #32]
 800a280:	bf54      	ite	pl
 800a282:	f04f 0800 	movpl.w	r8, #0
 800a286:	9308      	strmi	r3, [sp, #32]
 800a288:	2f00      	cmp	r7, #0
 800a28a:	db39      	blt.n	800a300 <_dtoa_r+0x218>
 800a28c:	9b08      	ldr	r3, [sp, #32]
 800a28e:	970f      	str	r7, [sp, #60]	@ 0x3c
 800a290:	443b      	add	r3, r7
 800a292:	9308      	str	r3, [sp, #32]
 800a294:	2300      	movs	r3, #0
 800a296:	930a      	str	r3, [sp, #40]	@ 0x28
 800a298:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a29a:	2b09      	cmp	r3, #9
 800a29c:	d864      	bhi.n	800a368 <_dtoa_r+0x280>
 800a29e:	2b05      	cmp	r3, #5
 800a2a0:	bfc4      	itt	gt
 800a2a2:	3b04      	subgt	r3, #4
 800a2a4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800a2a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a2a8:	f1a3 0302 	sub.w	r3, r3, #2
 800a2ac:	bfcc      	ite	gt
 800a2ae:	2400      	movgt	r4, #0
 800a2b0:	2401      	movle	r4, #1
 800a2b2:	2b03      	cmp	r3, #3
 800a2b4:	d863      	bhi.n	800a37e <_dtoa_r+0x296>
 800a2b6:	e8df f003 	tbb	[pc, r3]
 800a2ba:	372a      	.short	0x372a
 800a2bc:	5535      	.short	0x5535
 800a2be:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800a2c2:	441e      	add	r6, r3
 800a2c4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800a2c8:	2b20      	cmp	r3, #32
 800a2ca:	bfc1      	itttt	gt
 800a2cc:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800a2d0:	409f      	lslgt	r7, r3
 800a2d2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800a2d6:	fa24 f303 	lsrgt.w	r3, r4, r3
 800a2da:	bfd6      	itet	le
 800a2dc:	f1c3 0320 	rsble	r3, r3, #32
 800a2e0:	ea47 0003 	orrgt.w	r0, r7, r3
 800a2e4:	fa04 f003 	lslle.w	r0, r4, r3
 800a2e8:	f7f6 f90c 	bl	8000504 <__aeabi_ui2d>
 800a2ec:	2201      	movs	r2, #1
 800a2ee:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800a2f2:	3e01      	subs	r6, #1
 800a2f4:	9214      	str	r2, [sp, #80]	@ 0x50
 800a2f6:	e777      	b.n	800a1e8 <_dtoa_r+0x100>
 800a2f8:	2301      	movs	r3, #1
 800a2fa:	e7b8      	b.n	800a26e <_dtoa_r+0x186>
 800a2fc:	9012      	str	r0, [sp, #72]	@ 0x48
 800a2fe:	e7b7      	b.n	800a270 <_dtoa_r+0x188>
 800a300:	427b      	negs	r3, r7
 800a302:	930a      	str	r3, [sp, #40]	@ 0x28
 800a304:	2300      	movs	r3, #0
 800a306:	eba8 0807 	sub.w	r8, r8, r7
 800a30a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a30c:	e7c4      	b.n	800a298 <_dtoa_r+0x1b0>
 800a30e:	2300      	movs	r3, #0
 800a310:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a312:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a314:	2b00      	cmp	r3, #0
 800a316:	dc35      	bgt.n	800a384 <_dtoa_r+0x29c>
 800a318:	2301      	movs	r3, #1
 800a31a:	9300      	str	r3, [sp, #0]
 800a31c:	9307      	str	r3, [sp, #28]
 800a31e:	461a      	mov	r2, r3
 800a320:	920e      	str	r2, [sp, #56]	@ 0x38
 800a322:	e00b      	b.n	800a33c <_dtoa_r+0x254>
 800a324:	2301      	movs	r3, #1
 800a326:	e7f3      	b.n	800a310 <_dtoa_r+0x228>
 800a328:	2300      	movs	r3, #0
 800a32a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a32c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a32e:	18fb      	adds	r3, r7, r3
 800a330:	9300      	str	r3, [sp, #0]
 800a332:	3301      	adds	r3, #1
 800a334:	2b01      	cmp	r3, #1
 800a336:	9307      	str	r3, [sp, #28]
 800a338:	bfb8      	it	lt
 800a33a:	2301      	movlt	r3, #1
 800a33c:	f8db 001c 	ldr.w	r0, [fp, #28]
 800a340:	2100      	movs	r1, #0
 800a342:	2204      	movs	r2, #4
 800a344:	f102 0514 	add.w	r5, r2, #20
 800a348:	429d      	cmp	r5, r3
 800a34a:	d91f      	bls.n	800a38c <_dtoa_r+0x2a4>
 800a34c:	6041      	str	r1, [r0, #4]
 800a34e:	4658      	mov	r0, fp
 800a350:	f000 fd8e 	bl	800ae70 <_Balloc>
 800a354:	4682      	mov	sl, r0
 800a356:	2800      	cmp	r0, #0
 800a358:	d13c      	bne.n	800a3d4 <_dtoa_r+0x2ec>
 800a35a:	4b1b      	ldr	r3, [pc, #108]	@ (800a3c8 <_dtoa_r+0x2e0>)
 800a35c:	4602      	mov	r2, r0
 800a35e:	f240 11af 	movw	r1, #431	@ 0x1af
 800a362:	e6d8      	b.n	800a116 <_dtoa_r+0x2e>
 800a364:	2301      	movs	r3, #1
 800a366:	e7e0      	b.n	800a32a <_dtoa_r+0x242>
 800a368:	2401      	movs	r4, #1
 800a36a:	2300      	movs	r3, #0
 800a36c:	9309      	str	r3, [sp, #36]	@ 0x24
 800a36e:	940b      	str	r4, [sp, #44]	@ 0x2c
 800a370:	f04f 33ff 	mov.w	r3, #4294967295
 800a374:	9300      	str	r3, [sp, #0]
 800a376:	9307      	str	r3, [sp, #28]
 800a378:	2200      	movs	r2, #0
 800a37a:	2312      	movs	r3, #18
 800a37c:	e7d0      	b.n	800a320 <_dtoa_r+0x238>
 800a37e:	2301      	movs	r3, #1
 800a380:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a382:	e7f5      	b.n	800a370 <_dtoa_r+0x288>
 800a384:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a386:	9300      	str	r3, [sp, #0]
 800a388:	9307      	str	r3, [sp, #28]
 800a38a:	e7d7      	b.n	800a33c <_dtoa_r+0x254>
 800a38c:	3101      	adds	r1, #1
 800a38e:	0052      	lsls	r2, r2, #1
 800a390:	e7d8      	b.n	800a344 <_dtoa_r+0x25c>
 800a392:	bf00      	nop
 800a394:	f3af 8000 	nop.w
 800a398:	636f4361 	.word	0x636f4361
 800a39c:	3fd287a7 	.word	0x3fd287a7
 800a3a0:	8b60c8b3 	.word	0x8b60c8b3
 800a3a4:	3fc68a28 	.word	0x3fc68a28
 800a3a8:	509f79fb 	.word	0x509f79fb
 800a3ac:	3fd34413 	.word	0x3fd34413
 800a3b0:	0800e34e 	.word	0x0800e34e
 800a3b4:	0800e365 	.word	0x0800e365
 800a3b8:	7ff00000 	.word	0x7ff00000
 800a3bc:	0800e319 	.word	0x0800e319
 800a3c0:	3ff80000 	.word	0x3ff80000
 800a3c4:	0800e460 	.word	0x0800e460
 800a3c8:	0800e3bd 	.word	0x0800e3bd
 800a3cc:	0800e34a 	.word	0x0800e34a
 800a3d0:	0800e318 	.word	0x0800e318
 800a3d4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a3d8:	6018      	str	r0, [r3, #0]
 800a3da:	9b07      	ldr	r3, [sp, #28]
 800a3dc:	2b0e      	cmp	r3, #14
 800a3de:	f200 80a4 	bhi.w	800a52a <_dtoa_r+0x442>
 800a3e2:	2c00      	cmp	r4, #0
 800a3e4:	f000 80a1 	beq.w	800a52a <_dtoa_r+0x442>
 800a3e8:	2f00      	cmp	r7, #0
 800a3ea:	dd33      	ble.n	800a454 <_dtoa_r+0x36c>
 800a3ec:	4bad      	ldr	r3, [pc, #692]	@ (800a6a4 <_dtoa_r+0x5bc>)
 800a3ee:	f007 020f 	and.w	r2, r7, #15
 800a3f2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a3f6:	ed93 7b00 	vldr	d7, [r3]
 800a3fa:	05f8      	lsls	r0, r7, #23
 800a3fc:	ed8d 7b04 	vstr	d7, [sp, #16]
 800a400:	ea4f 1427 	mov.w	r4, r7, asr #4
 800a404:	d516      	bpl.n	800a434 <_dtoa_r+0x34c>
 800a406:	4ba8      	ldr	r3, [pc, #672]	@ (800a6a8 <_dtoa_r+0x5c0>)
 800a408:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a40c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a410:	f7f6 fa1c 	bl	800084c <__aeabi_ddiv>
 800a414:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a418:	f004 040f 	and.w	r4, r4, #15
 800a41c:	2603      	movs	r6, #3
 800a41e:	4da2      	ldr	r5, [pc, #648]	@ (800a6a8 <_dtoa_r+0x5c0>)
 800a420:	b954      	cbnz	r4, 800a438 <_dtoa_r+0x350>
 800a422:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a426:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a42a:	f7f6 fa0f 	bl	800084c <__aeabi_ddiv>
 800a42e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a432:	e028      	b.n	800a486 <_dtoa_r+0x39e>
 800a434:	2602      	movs	r6, #2
 800a436:	e7f2      	b.n	800a41e <_dtoa_r+0x336>
 800a438:	07e1      	lsls	r1, r4, #31
 800a43a:	d508      	bpl.n	800a44e <_dtoa_r+0x366>
 800a43c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a440:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a444:	f7f6 f8d8 	bl	80005f8 <__aeabi_dmul>
 800a448:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a44c:	3601      	adds	r6, #1
 800a44e:	1064      	asrs	r4, r4, #1
 800a450:	3508      	adds	r5, #8
 800a452:	e7e5      	b.n	800a420 <_dtoa_r+0x338>
 800a454:	f000 80d2 	beq.w	800a5fc <_dtoa_r+0x514>
 800a458:	427c      	negs	r4, r7
 800a45a:	4b92      	ldr	r3, [pc, #584]	@ (800a6a4 <_dtoa_r+0x5bc>)
 800a45c:	4d92      	ldr	r5, [pc, #584]	@ (800a6a8 <_dtoa_r+0x5c0>)
 800a45e:	f004 020f 	and.w	r2, r4, #15
 800a462:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a466:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a46a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a46e:	f7f6 f8c3 	bl	80005f8 <__aeabi_dmul>
 800a472:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a476:	1124      	asrs	r4, r4, #4
 800a478:	2300      	movs	r3, #0
 800a47a:	2602      	movs	r6, #2
 800a47c:	2c00      	cmp	r4, #0
 800a47e:	f040 80b2 	bne.w	800a5e6 <_dtoa_r+0x4fe>
 800a482:	2b00      	cmp	r3, #0
 800a484:	d1d3      	bne.n	800a42e <_dtoa_r+0x346>
 800a486:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a488:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	f000 80b7 	beq.w	800a600 <_dtoa_r+0x518>
 800a492:	4b86      	ldr	r3, [pc, #536]	@ (800a6ac <_dtoa_r+0x5c4>)
 800a494:	2200      	movs	r2, #0
 800a496:	4620      	mov	r0, r4
 800a498:	4629      	mov	r1, r5
 800a49a:	f7f6 fb1f 	bl	8000adc <__aeabi_dcmplt>
 800a49e:	2800      	cmp	r0, #0
 800a4a0:	f000 80ae 	beq.w	800a600 <_dtoa_r+0x518>
 800a4a4:	9b07      	ldr	r3, [sp, #28]
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	f000 80aa 	beq.w	800a600 <_dtoa_r+0x518>
 800a4ac:	9b00      	ldr	r3, [sp, #0]
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	dd37      	ble.n	800a522 <_dtoa_r+0x43a>
 800a4b2:	1e7b      	subs	r3, r7, #1
 800a4b4:	9304      	str	r3, [sp, #16]
 800a4b6:	4620      	mov	r0, r4
 800a4b8:	4b7d      	ldr	r3, [pc, #500]	@ (800a6b0 <_dtoa_r+0x5c8>)
 800a4ba:	2200      	movs	r2, #0
 800a4bc:	4629      	mov	r1, r5
 800a4be:	f7f6 f89b 	bl	80005f8 <__aeabi_dmul>
 800a4c2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a4c6:	9c00      	ldr	r4, [sp, #0]
 800a4c8:	3601      	adds	r6, #1
 800a4ca:	4630      	mov	r0, r6
 800a4cc:	f7f6 f82a 	bl	8000524 <__aeabi_i2d>
 800a4d0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a4d4:	f7f6 f890 	bl	80005f8 <__aeabi_dmul>
 800a4d8:	4b76      	ldr	r3, [pc, #472]	@ (800a6b4 <_dtoa_r+0x5cc>)
 800a4da:	2200      	movs	r2, #0
 800a4dc:	f7f5 fed6 	bl	800028c <__adddf3>
 800a4e0:	4605      	mov	r5, r0
 800a4e2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800a4e6:	2c00      	cmp	r4, #0
 800a4e8:	f040 808d 	bne.w	800a606 <_dtoa_r+0x51e>
 800a4ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a4f0:	4b71      	ldr	r3, [pc, #452]	@ (800a6b8 <_dtoa_r+0x5d0>)
 800a4f2:	2200      	movs	r2, #0
 800a4f4:	f7f5 fec8 	bl	8000288 <__aeabi_dsub>
 800a4f8:	4602      	mov	r2, r0
 800a4fa:	460b      	mov	r3, r1
 800a4fc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a500:	462a      	mov	r2, r5
 800a502:	4633      	mov	r3, r6
 800a504:	f7f6 fb08 	bl	8000b18 <__aeabi_dcmpgt>
 800a508:	2800      	cmp	r0, #0
 800a50a:	f040 828b 	bne.w	800aa24 <_dtoa_r+0x93c>
 800a50e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a512:	462a      	mov	r2, r5
 800a514:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800a518:	f7f6 fae0 	bl	8000adc <__aeabi_dcmplt>
 800a51c:	2800      	cmp	r0, #0
 800a51e:	f040 8128 	bne.w	800a772 <_dtoa_r+0x68a>
 800a522:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800a526:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800a52a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	f2c0 815a 	blt.w	800a7e6 <_dtoa_r+0x6fe>
 800a532:	2f0e      	cmp	r7, #14
 800a534:	f300 8157 	bgt.w	800a7e6 <_dtoa_r+0x6fe>
 800a538:	4b5a      	ldr	r3, [pc, #360]	@ (800a6a4 <_dtoa_r+0x5bc>)
 800a53a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a53e:	ed93 7b00 	vldr	d7, [r3]
 800a542:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a544:	2b00      	cmp	r3, #0
 800a546:	ed8d 7b00 	vstr	d7, [sp]
 800a54a:	da03      	bge.n	800a554 <_dtoa_r+0x46c>
 800a54c:	9b07      	ldr	r3, [sp, #28]
 800a54e:	2b00      	cmp	r3, #0
 800a550:	f340 8101 	ble.w	800a756 <_dtoa_r+0x66e>
 800a554:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800a558:	4656      	mov	r6, sl
 800a55a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a55e:	4620      	mov	r0, r4
 800a560:	4629      	mov	r1, r5
 800a562:	f7f6 f973 	bl	800084c <__aeabi_ddiv>
 800a566:	f7f6 faf7 	bl	8000b58 <__aeabi_d2iz>
 800a56a:	4680      	mov	r8, r0
 800a56c:	f7f5 ffda 	bl	8000524 <__aeabi_i2d>
 800a570:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a574:	f7f6 f840 	bl	80005f8 <__aeabi_dmul>
 800a578:	4602      	mov	r2, r0
 800a57a:	460b      	mov	r3, r1
 800a57c:	4620      	mov	r0, r4
 800a57e:	4629      	mov	r1, r5
 800a580:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800a584:	f7f5 fe80 	bl	8000288 <__aeabi_dsub>
 800a588:	f806 4b01 	strb.w	r4, [r6], #1
 800a58c:	9d07      	ldr	r5, [sp, #28]
 800a58e:	eba6 040a 	sub.w	r4, r6, sl
 800a592:	42a5      	cmp	r5, r4
 800a594:	4602      	mov	r2, r0
 800a596:	460b      	mov	r3, r1
 800a598:	f040 8117 	bne.w	800a7ca <_dtoa_r+0x6e2>
 800a59c:	f7f5 fe76 	bl	800028c <__adddf3>
 800a5a0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a5a4:	4604      	mov	r4, r0
 800a5a6:	460d      	mov	r5, r1
 800a5a8:	f7f6 fab6 	bl	8000b18 <__aeabi_dcmpgt>
 800a5ac:	2800      	cmp	r0, #0
 800a5ae:	f040 80f9 	bne.w	800a7a4 <_dtoa_r+0x6bc>
 800a5b2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a5b6:	4620      	mov	r0, r4
 800a5b8:	4629      	mov	r1, r5
 800a5ba:	f7f6 fa85 	bl	8000ac8 <__aeabi_dcmpeq>
 800a5be:	b118      	cbz	r0, 800a5c8 <_dtoa_r+0x4e0>
 800a5c0:	f018 0f01 	tst.w	r8, #1
 800a5c4:	f040 80ee 	bne.w	800a7a4 <_dtoa_r+0x6bc>
 800a5c8:	4649      	mov	r1, r9
 800a5ca:	4658      	mov	r0, fp
 800a5cc:	f000 fc90 	bl	800aef0 <_Bfree>
 800a5d0:	2300      	movs	r3, #0
 800a5d2:	7033      	strb	r3, [r6, #0]
 800a5d4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a5d6:	3701      	adds	r7, #1
 800a5d8:	601f      	str	r7, [r3, #0]
 800a5da:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	f000 831d 	beq.w	800ac1c <_dtoa_r+0xb34>
 800a5e2:	601e      	str	r6, [r3, #0]
 800a5e4:	e31a      	b.n	800ac1c <_dtoa_r+0xb34>
 800a5e6:	07e2      	lsls	r2, r4, #31
 800a5e8:	d505      	bpl.n	800a5f6 <_dtoa_r+0x50e>
 800a5ea:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a5ee:	f7f6 f803 	bl	80005f8 <__aeabi_dmul>
 800a5f2:	3601      	adds	r6, #1
 800a5f4:	2301      	movs	r3, #1
 800a5f6:	1064      	asrs	r4, r4, #1
 800a5f8:	3508      	adds	r5, #8
 800a5fa:	e73f      	b.n	800a47c <_dtoa_r+0x394>
 800a5fc:	2602      	movs	r6, #2
 800a5fe:	e742      	b.n	800a486 <_dtoa_r+0x39e>
 800a600:	9c07      	ldr	r4, [sp, #28]
 800a602:	9704      	str	r7, [sp, #16]
 800a604:	e761      	b.n	800a4ca <_dtoa_r+0x3e2>
 800a606:	4b27      	ldr	r3, [pc, #156]	@ (800a6a4 <_dtoa_r+0x5bc>)
 800a608:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a60a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a60e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a612:	4454      	add	r4, sl
 800a614:	2900      	cmp	r1, #0
 800a616:	d053      	beq.n	800a6c0 <_dtoa_r+0x5d8>
 800a618:	4928      	ldr	r1, [pc, #160]	@ (800a6bc <_dtoa_r+0x5d4>)
 800a61a:	2000      	movs	r0, #0
 800a61c:	f7f6 f916 	bl	800084c <__aeabi_ddiv>
 800a620:	4633      	mov	r3, r6
 800a622:	462a      	mov	r2, r5
 800a624:	f7f5 fe30 	bl	8000288 <__aeabi_dsub>
 800a628:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a62c:	4656      	mov	r6, sl
 800a62e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a632:	f7f6 fa91 	bl	8000b58 <__aeabi_d2iz>
 800a636:	4605      	mov	r5, r0
 800a638:	f7f5 ff74 	bl	8000524 <__aeabi_i2d>
 800a63c:	4602      	mov	r2, r0
 800a63e:	460b      	mov	r3, r1
 800a640:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a644:	f7f5 fe20 	bl	8000288 <__aeabi_dsub>
 800a648:	3530      	adds	r5, #48	@ 0x30
 800a64a:	4602      	mov	r2, r0
 800a64c:	460b      	mov	r3, r1
 800a64e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a652:	f806 5b01 	strb.w	r5, [r6], #1
 800a656:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a65a:	f7f6 fa3f 	bl	8000adc <__aeabi_dcmplt>
 800a65e:	2800      	cmp	r0, #0
 800a660:	d171      	bne.n	800a746 <_dtoa_r+0x65e>
 800a662:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a666:	4911      	ldr	r1, [pc, #68]	@ (800a6ac <_dtoa_r+0x5c4>)
 800a668:	2000      	movs	r0, #0
 800a66a:	f7f5 fe0d 	bl	8000288 <__aeabi_dsub>
 800a66e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a672:	f7f6 fa33 	bl	8000adc <__aeabi_dcmplt>
 800a676:	2800      	cmp	r0, #0
 800a678:	f040 8095 	bne.w	800a7a6 <_dtoa_r+0x6be>
 800a67c:	42a6      	cmp	r6, r4
 800a67e:	f43f af50 	beq.w	800a522 <_dtoa_r+0x43a>
 800a682:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800a686:	4b0a      	ldr	r3, [pc, #40]	@ (800a6b0 <_dtoa_r+0x5c8>)
 800a688:	2200      	movs	r2, #0
 800a68a:	f7f5 ffb5 	bl	80005f8 <__aeabi_dmul>
 800a68e:	4b08      	ldr	r3, [pc, #32]	@ (800a6b0 <_dtoa_r+0x5c8>)
 800a690:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a694:	2200      	movs	r2, #0
 800a696:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a69a:	f7f5 ffad 	bl	80005f8 <__aeabi_dmul>
 800a69e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a6a2:	e7c4      	b.n	800a62e <_dtoa_r+0x546>
 800a6a4:	0800e460 	.word	0x0800e460
 800a6a8:	0800e438 	.word	0x0800e438
 800a6ac:	3ff00000 	.word	0x3ff00000
 800a6b0:	40240000 	.word	0x40240000
 800a6b4:	401c0000 	.word	0x401c0000
 800a6b8:	40140000 	.word	0x40140000
 800a6bc:	3fe00000 	.word	0x3fe00000
 800a6c0:	4631      	mov	r1, r6
 800a6c2:	4628      	mov	r0, r5
 800a6c4:	f7f5 ff98 	bl	80005f8 <__aeabi_dmul>
 800a6c8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a6cc:	9415      	str	r4, [sp, #84]	@ 0x54
 800a6ce:	4656      	mov	r6, sl
 800a6d0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a6d4:	f7f6 fa40 	bl	8000b58 <__aeabi_d2iz>
 800a6d8:	4605      	mov	r5, r0
 800a6da:	f7f5 ff23 	bl	8000524 <__aeabi_i2d>
 800a6de:	4602      	mov	r2, r0
 800a6e0:	460b      	mov	r3, r1
 800a6e2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a6e6:	f7f5 fdcf 	bl	8000288 <__aeabi_dsub>
 800a6ea:	3530      	adds	r5, #48	@ 0x30
 800a6ec:	f806 5b01 	strb.w	r5, [r6], #1
 800a6f0:	4602      	mov	r2, r0
 800a6f2:	460b      	mov	r3, r1
 800a6f4:	42a6      	cmp	r6, r4
 800a6f6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a6fa:	f04f 0200 	mov.w	r2, #0
 800a6fe:	d124      	bne.n	800a74a <_dtoa_r+0x662>
 800a700:	4bac      	ldr	r3, [pc, #688]	@ (800a9b4 <_dtoa_r+0x8cc>)
 800a702:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800a706:	f7f5 fdc1 	bl	800028c <__adddf3>
 800a70a:	4602      	mov	r2, r0
 800a70c:	460b      	mov	r3, r1
 800a70e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a712:	f7f6 fa01 	bl	8000b18 <__aeabi_dcmpgt>
 800a716:	2800      	cmp	r0, #0
 800a718:	d145      	bne.n	800a7a6 <_dtoa_r+0x6be>
 800a71a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a71e:	49a5      	ldr	r1, [pc, #660]	@ (800a9b4 <_dtoa_r+0x8cc>)
 800a720:	2000      	movs	r0, #0
 800a722:	f7f5 fdb1 	bl	8000288 <__aeabi_dsub>
 800a726:	4602      	mov	r2, r0
 800a728:	460b      	mov	r3, r1
 800a72a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a72e:	f7f6 f9d5 	bl	8000adc <__aeabi_dcmplt>
 800a732:	2800      	cmp	r0, #0
 800a734:	f43f aef5 	beq.w	800a522 <_dtoa_r+0x43a>
 800a738:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800a73a:	1e73      	subs	r3, r6, #1
 800a73c:	9315      	str	r3, [sp, #84]	@ 0x54
 800a73e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a742:	2b30      	cmp	r3, #48	@ 0x30
 800a744:	d0f8      	beq.n	800a738 <_dtoa_r+0x650>
 800a746:	9f04      	ldr	r7, [sp, #16]
 800a748:	e73e      	b.n	800a5c8 <_dtoa_r+0x4e0>
 800a74a:	4b9b      	ldr	r3, [pc, #620]	@ (800a9b8 <_dtoa_r+0x8d0>)
 800a74c:	f7f5 ff54 	bl	80005f8 <__aeabi_dmul>
 800a750:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a754:	e7bc      	b.n	800a6d0 <_dtoa_r+0x5e8>
 800a756:	d10c      	bne.n	800a772 <_dtoa_r+0x68a>
 800a758:	4b98      	ldr	r3, [pc, #608]	@ (800a9bc <_dtoa_r+0x8d4>)
 800a75a:	2200      	movs	r2, #0
 800a75c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a760:	f7f5 ff4a 	bl	80005f8 <__aeabi_dmul>
 800a764:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a768:	f7f6 f9cc 	bl	8000b04 <__aeabi_dcmpge>
 800a76c:	2800      	cmp	r0, #0
 800a76e:	f000 8157 	beq.w	800aa20 <_dtoa_r+0x938>
 800a772:	2400      	movs	r4, #0
 800a774:	4625      	mov	r5, r4
 800a776:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a778:	43db      	mvns	r3, r3
 800a77a:	9304      	str	r3, [sp, #16]
 800a77c:	4656      	mov	r6, sl
 800a77e:	2700      	movs	r7, #0
 800a780:	4621      	mov	r1, r4
 800a782:	4658      	mov	r0, fp
 800a784:	f000 fbb4 	bl	800aef0 <_Bfree>
 800a788:	2d00      	cmp	r5, #0
 800a78a:	d0dc      	beq.n	800a746 <_dtoa_r+0x65e>
 800a78c:	b12f      	cbz	r7, 800a79a <_dtoa_r+0x6b2>
 800a78e:	42af      	cmp	r7, r5
 800a790:	d003      	beq.n	800a79a <_dtoa_r+0x6b2>
 800a792:	4639      	mov	r1, r7
 800a794:	4658      	mov	r0, fp
 800a796:	f000 fbab 	bl	800aef0 <_Bfree>
 800a79a:	4629      	mov	r1, r5
 800a79c:	4658      	mov	r0, fp
 800a79e:	f000 fba7 	bl	800aef0 <_Bfree>
 800a7a2:	e7d0      	b.n	800a746 <_dtoa_r+0x65e>
 800a7a4:	9704      	str	r7, [sp, #16]
 800a7a6:	4633      	mov	r3, r6
 800a7a8:	461e      	mov	r6, r3
 800a7aa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a7ae:	2a39      	cmp	r2, #57	@ 0x39
 800a7b0:	d107      	bne.n	800a7c2 <_dtoa_r+0x6da>
 800a7b2:	459a      	cmp	sl, r3
 800a7b4:	d1f8      	bne.n	800a7a8 <_dtoa_r+0x6c0>
 800a7b6:	9a04      	ldr	r2, [sp, #16]
 800a7b8:	3201      	adds	r2, #1
 800a7ba:	9204      	str	r2, [sp, #16]
 800a7bc:	2230      	movs	r2, #48	@ 0x30
 800a7be:	f88a 2000 	strb.w	r2, [sl]
 800a7c2:	781a      	ldrb	r2, [r3, #0]
 800a7c4:	3201      	adds	r2, #1
 800a7c6:	701a      	strb	r2, [r3, #0]
 800a7c8:	e7bd      	b.n	800a746 <_dtoa_r+0x65e>
 800a7ca:	4b7b      	ldr	r3, [pc, #492]	@ (800a9b8 <_dtoa_r+0x8d0>)
 800a7cc:	2200      	movs	r2, #0
 800a7ce:	f7f5 ff13 	bl	80005f8 <__aeabi_dmul>
 800a7d2:	2200      	movs	r2, #0
 800a7d4:	2300      	movs	r3, #0
 800a7d6:	4604      	mov	r4, r0
 800a7d8:	460d      	mov	r5, r1
 800a7da:	f7f6 f975 	bl	8000ac8 <__aeabi_dcmpeq>
 800a7de:	2800      	cmp	r0, #0
 800a7e0:	f43f aebb 	beq.w	800a55a <_dtoa_r+0x472>
 800a7e4:	e6f0      	b.n	800a5c8 <_dtoa_r+0x4e0>
 800a7e6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800a7e8:	2a00      	cmp	r2, #0
 800a7ea:	f000 80db 	beq.w	800a9a4 <_dtoa_r+0x8bc>
 800a7ee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a7f0:	2a01      	cmp	r2, #1
 800a7f2:	f300 80bf 	bgt.w	800a974 <_dtoa_r+0x88c>
 800a7f6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800a7f8:	2a00      	cmp	r2, #0
 800a7fa:	f000 80b7 	beq.w	800a96c <_dtoa_r+0x884>
 800a7fe:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800a802:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a804:	4646      	mov	r6, r8
 800a806:	9a08      	ldr	r2, [sp, #32]
 800a808:	2101      	movs	r1, #1
 800a80a:	441a      	add	r2, r3
 800a80c:	4658      	mov	r0, fp
 800a80e:	4498      	add	r8, r3
 800a810:	9208      	str	r2, [sp, #32]
 800a812:	f000 fc6b 	bl	800b0ec <__i2b>
 800a816:	4605      	mov	r5, r0
 800a818:	b15e      	cbz	r6, 800a832 <_dtoa_r+0x74a>
 800a81a:	9b08      	ldr	r3, [sp, #32]
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	dd08      	ble.n	800a832 <_dtoa_r+0x74a>
 800a820:	42b3      	cmp	r3, r6
 800a822:	9a08      	ldr	r2, [sp, #32]
 800a824:	bfa8      	it	ge
 800a826:	4633      	movge	r3, r6
 800a828:	eba8 0803 	sub.w	r8, r8, r3
 800a82c:	1af6      	subs	r6, r6, r3
 800a82e:	1ad3      	subs	r3, r2, r3
 800a830:	9308      	str	r3, [sp, #32]
 800a832:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a834:	b1f3      	cbz	r3, 800a874 <_dtoa_r+0x78c>
 800a836:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a838:	2b00      	cmp	r3, #0
 800a83a:	f000 80b7 	beq.w	800a9ac <_dtoa_r+0x8c4>
 800a83e:	b18c      	cbz	r4, 800a864 <_dtoa_r+0x77c>
 800a840:	4629      	mov	r1, r5
 800a842:	4622      	mov	r2, r4
 800a844:	4658      	mov	r0, fp
 800a846:	f000 fd11 	bl	800b26c <__pow5mult>
 800a84a:	464a      	mov	r2, r9
 800a84c:	4601      	mov	r1, r0
 800a84e:	4605      	mov	r5, r0
 800a850:	4658      	mov	r0, fp
 800a852:	f000 fc61 	bl	800b118 <__multiply>
 800a856:	4649      	mov	r1, r9
 800a858:	9004      	str	r0, [sp, #16]
 800a85a:	4658      	mov	r0, fp
 800a85c:	f000 fb48 	bl	800aef0 <_Bfree>
 800a860:	9b04      	ldr	r3, [sp, #16]
 800a862:	4699      	mov	r9, r3
 800a864:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a866:	1b1a      	subs	r2, r3, r4
 800a868:	d004      	beq.n	800a874 <_dtoa_r+0x78c>
 800a86a:	4649      	mov	r1, r9
 800a86c:	4658      	mov	r0, fp
 800a86e:	f000 fcfd 	bl	800b26c <__pow5mult>
 800a872:	4681      	mov	r9, r0
 800a874:	2101      	movs	r1, #1
 800a876:	4658      	mov	r0, fp
 800a878:	f000 fc38 	bl	800b0ec <__i2b>
 800a87c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a87e:	4604      	mov	r4, r0
 800a880:	2b00      	cmp	r3, #0
 800a882:	f000 81cf 	beq.w	800ac24 <_dtoa_r+0xb3c>
 800a886:	461a      	mov	r2, r3
 800a888:	4601      	mov	r1, r0
 800a88a:	4658      	mov	r0, fp
 800a88c:	f000 fcee 	bl	800b26c <__pow5mult>
 800a890:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a892:	2b01      	cmp	r3, #1
 800a894:	4604      	mov	r4, r0
 800a896:	f300 8095 	bgt.w	800a9c4 <_dtoa_r+0x8dc>
 800a89a:	9b02      	ldr	r3, [sp, #8]
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	f040 8087 	bne.w	800a9b0 <_dtoa_r+0x8c8>
 800a8a2:	9b03      	ldr	r3, [sp, #12]
 800a8a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	f040 8089 	bne.w	800a9c0 <_dtoa_r+0x8d8>
 800a8ae:	9b03      	ldr	r3, [sp, #12]
 800a8b0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a8b4:	0d1b      	lsrs	r3, r3, #20
 800a8b6:	051b      	lsls	r3, r3, #20
 800a8b8:	b12b      	cbz	r3, 800a8c6 <_dtoa_r+0x7de>
 800a8ba:	9b08      	ldr	r3, [sp, #32]
 800a8bc:	3301      	adds	r3, #1
 800a8be:	9308      	str	r3, [sp, #32]
 800a8c0:	f108 0801 	add.w	r8, r8, #1
 800a8c4:	2301      	movs	r3, #1
 800a8c6:	930a      	str	r3, [sp, #40]	@ 0x28
 800a8c8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	f000 81b0 	beq.w	800ac30 <_dtoa_r+0xb48>
 800a8d0:	6923      	ldr	r3, [r4, #16]
 800a8d2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a8d6:	6918      	ldr	r0, [r3, #16]
 800a8d8:	f000 fbbc 	bl	800b054 <__hi0bits>
 800a8dc:	f1c0 0020 	rsb	r0, r0, #32
 800a8e0:	9b08      	ldr	r3, [sp, #32]
 800a8e2:	4418      	add	r0, r3
 800a8e4:	f010 001f 	ands.w	r0, r0, #31
 800a8e8:	d077      	beq.n	800a9da <_dtoa_r+0x8f2>
 800a8ea:	f1c0 0320 	rsb	r3, r0, #32
 800a8ee:	2b04      	cmp	r3, #4
 800a8f0:	dd6b      	ble.n	800a9ca <_dtoa_r+0x8e2>
 800a8f2:	9b08      	ldr	r3, [sp, #32]
 800a8f4:	f1c0 001c 	rsb	r0, r0, #28
 800a8f8:	4403      	add	r3, r0
 800a8fa:	4480      	add	r8, r0
 800a8fc:	4406      	add	r6, r0
 800a8fe:	9308      	str	r3, [sp, #32]
 800a900:	f1b8 0f00 	cmp.w	r8, #0
 800a904:	dd05      	ble.n	800a912 <_dtoa_r+0x82a>
 800a906:	4649      	mov	r1, r9
 800a908:	4642      	mov	r2, r8
 800a90a:	4658      	mov	r0, fp
 800a90c:	f000 fd08 	bl	800b320 <__lshift>
 800a910:	4681      	mov	r9, r0
 800a912:	9b08      	ldr	r3, [sp, #32]
 800a914:	2b00      	cmp	r3, #0
 800a916:	dd05      	ble.n	800a924 <_dtoa_r+0x83c>
 800a918:	4621      	mov	r1, r4
 800a91a:	461a      	mov	r2, r3
 800a91c:	4658      	mov	r0, fp
 800a91e:	f000 fcff 	bl	800b320 <__lshift>
 800a922:	4604      	mov	r4, r0
 800a924:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a926:	2b00      	cmp	r3, #0
 800a928:	d059      	beq.n	800a9de <_dtoa_r+0x8f6>
 800a92a:	4621      	mov	r1, r4
 800a92c:	4648      	mov	r0, r9
 800a92e:	f000 fd63 	bl	800b3f8 <__mcmp>
 800a932:	2800      	cmp	r0, #0
 800a934:	da53      	bge.n	800a9de <_dtoa_r+0x8f6>
 800a936:	1e7b      	subs	r3, r7, #1
 800a938:	9304      	str	r3, [sp, #16]
 800a93a:	4649      	mov	r1, r9
 800a93c:	2300      	movs	r3, #0
 800a93e:	220a      	movs	r2, #10
 800a940:	4658      	mov	r0, fp
 800a942:	f000 faf7 	bl	800af34 <__multadd>
 800a946:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a948:	4681      	mov	r9, r0
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	f000 8172 	beq.w	800ac34 <_dtoa_r+0xb4c>
 800a950:	2300      	movs	r3, #0
 800a952:	4629      	mov	r1, r5
 800a954:	220a      	movs	r2, #10
 800a956:	4658      	mov	r0, fp
 800a958:	f000 faec 	bl	800af34 <__multadd>
 800a95c:	9b00      	ldr	r3, [sp, #0]
 800a95e:	2b00      	cmp	r3, #0
 800a960:	4605      	mov	r5, r0
 800a962:	dc67      	bgt.n	800aa34 <_dtoa_r+0x94c>
 800a964:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a966:	2b02      	cmp	r3, #2
 800a968:	dc41      	bgt.n	800a9ee <_dtoa_r+0x906>
 800a96a:	e063      	b.n	800aa34 <_dtoa_r+0x94c>
 800a96c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800a96e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800a972:	e746      	b.n	800a802 <_dtoa_r+0x71a>
 800a974:	9b07      	ldr	r3, [sp, #28]
 800a976:	1e5c      	subs	r4, r3, #1
 800a978:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a97a:	42a3      	cmp	r3, r4
 800a97c:	bfbf      	itttt	lt
 800a97e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800a980:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800a982:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800a984:	1ae3      	sublt	r3, r4, r3
 800a986:	bfb4      	ite	lt
 800a988:	18d2      	addlt	r2, r2, r3
 800a98a:	1b1c      	subge	r4, r3, r4
 800a98c:	9b07      	ldr	r3, [sp, #28]
 800a98e:	bfbc      	itt	lt
 800a990:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800a992:	2400      	movlt	r4, #0
 800a994:	2b00      	cmp	r3, #0
 800a996:	bfb5      	itete	lt
 800a998:	eba8 0603 	sublt.w	r6, r8, r3
 800a99c:	9b07      	ldrge	r3, [sp, #28]
 800a99e:	2300      	movlt	r3, #0
 800a9a0:	4646      	movge	r6, r8
 800a9a2:	e730      	b.n	800a806 <_dtoa_r+0x71e>
 800a9a4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a9a6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800a9a8:	4646      	mov	r6, r8
 800a9aa:	e735      	b.n	800a818 <_dtoa_r+0x730>
 800a9ac:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a9ae:	e75c      	b.n	800a86a <_dtoa_r+0x782>
 800a9b0:	2300      	movs	r3, #0
 800a9b2:	e788      	b.n	800a8c6 <_dtoa_r+0x7de>
 800a9b4:	3fe00000 	.word	0x3fe00000
 800a9b8:	40240000 	.word	0x40240000
 800a9bc:	40140000 	.word	0x40140000
 800a9c0:	9b02      	ldr	r3, [sp, #8]
 800a9c2:	e780      	b.n	800a8c6 <_dtoa_r+0x7de>
 800a9c4:	2300      	movs	r3, #0
 800a9c6:	930a      	str	r3, [sp, #40]	@ 0x28
 800a9c8:	e782      	b.n	800a8d0 <_dtoa_r+0x7e8>
 800a9ca:	d099      	beq.n	800a900 <_dtoa_r+0x818>
 800a9cc:	9a08      	ldr	r2, [sp, #32]
 800a9ce:	331c      	adds	r3, #28
 800a9d0:	441a      	add	r2, r3
 800a9d2:	4498      	add	r8, r3
 800a9d4:	441e      	add	r6, r3
 800a9d6:	9208      	str	r2, [sp, #32]
 800a9d8:	e792      	b.n	800a900 <_dtoa_r+0x818>
 800a9da:	4603      	mov	r3, r0
 800a9dc:	e7f6      	b.n	800a9cc <_dtoa_r+0x8e4>
 800a9de:	9b07      	ldr	r3, [sp, #28]
 800a9e0:	9704      	str	r7, [sp, #16]
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	dc20      	bgt.n	800aa28 <_dtoa_r+0x940>
 800a9e6:	9300      	str	r3, [sp, #0]
 800a9e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a9ea:	2b02      	cmp	r3, #2
 800a9ec:	dd1e      	ble.n	800aa2c <_dtoa_r+0x944>
 800a9ee:	9b00      	ldr	r3, [sp, #0]
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	f47f aec0 	bne.w	800a776 <_dtoa_r+0x68e>
 800a9f6:	4621      	mov	r1, r4
 800a9f8:	2205      	movs	r2, #5
 800a9fa:	4658      	mov	r0, fp
 800a9fc:	f000 fa9a 	bl	800af34 <__multadd>
 800aa00:	4601      	mov	r1, r0
 800aa02:	4604      	mov	r4, r0
 800aa04:	4648      	mov	r0, r9
 800aa06:	f000 fcf7 	bl	800b3f8 <__mcmp>
 800aa0a:	2800      	cmp	r0, #0
 800aa0c:	f77f aeb3 	ble.w	800a776 <_dtoa_r+0x68e>
 800aa10:	4656      	mov	r6, sl
 800aa12:	2331      	movs	r3, #49	@ 0x31
 800aa14:	f806 3b01 	strb.w	r3, [r6], #1
 800aa18:	9b04      	ldr	r3, [sp, #16]
 800aa1a:	3301      	adds	r3, #1
 800aa1c:	9304      	str	r3, [sp, #16]
 800aa1e:	e6ae      	b.n	800a77e <_dtoa_r+0x696>
 800aa20:	9c07      	ldr	r4, [sp, #28]
 800aa22:	9704      	str	r7, [sp, #16]
 800aa24:	4625      	mov	r5, r4
 800aa26:	e7f3      	b.n	800aa10 <_dtoa_r+0x928>
 800aa28:	9b07      	ldr	r3, [sp, #28]
 800aa2a:	9300      	str	r3, [sp, #0]
 800aa2c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	f000 8104 	beq.w	800ac3c <_dtoa_r+0xb54>
 800aa34:	2e00      	cmp	r6, #0
 800aa36:	dd05      	ble.n	800aa44 <_dtoa_r+0x95c>
 800aa38:	4629      	mov	r1, r5
 800aa3a:	4632      	mov	r2, r6
 800aa3c:	4658      	mov	r0, fp
 800aa3e:	f000 fc6f 	bl	800b320 <__lshift>
 800aa42:	4605      	mov	r5, r0
 800aa44:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	d05a      	beq.n	800ab00 <_dtoa_r+0xa18>
 800aa4a:	6869      	ldr	r1, [r5, #4]
 800aa4c:	4658      	mov	r0, fp
 800aa4e:	f000 fa0f 	bl	800ae70 <_Balloc>
 800aa52:	4606      	mov	r6, r0
 800aa54:	b928      	cbnz	r0, 800aa62 <_dtoa_r+0x97a>
 800aa56:	4b84      	ldr	r3, [pc, #528]	@ (800ac68 <_dtoa_r+0xb80>)
 800aa58:	4602      	mov	r2, r0
 800aa5a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800aa5e:	f7ff bb5a 	b.w	800a116 <_dtoa_r+0x2e>
 800aa62:	692a      	ldr	r2, [r5, #16]
 800aa64:	3202      	adds	r2, #2
 800aa66:	0092      	lsls	r2, r2, #2
 800aa68:	f105 010c 	add.w	r1, r5, #12
 800aa6c:	300c      	adds	r0, #12
 800aa6e:	f001 ff75 	bl	800c95c <memcpy>
 800aa72:	2201      	movs	r2, #1
 800aa74:	4631      	mov	r1, r6
 800aa76:	4658      	mov	r0, fp
 800aa78:	f000 fc52 	bl	800b320 <__lshift>
 800aa7c:	f10a 0301 	add.w	r3, sl, #1
 800aa80:	9307      	str	r3, [sp, #28]
 800aa82:	9b00      	ldr	r3, [sp, #0]
 800aa84:	4453      	add	r3, sl
 800aa86:	930b      	str	r3, [sp, #44]	@ 0x2c
 800aa88:	9b02      	ldr	r3, [sp, #8]
 800aa8a:	f003 0301 	and.w	r3, r3, #1
 800aa8e:	462f      	mov	r7, r5
 800aa90:	930a      	str	r3, [sp, #40]	@ 0x28
 800aa92:	4605      	mov	r5, r0
 800aa94:	9b07      	ldr	r3, [sp, #28]
 800aa96:	4621      	mov	r1, r4
 800aa98:	3b01      	subs	r3, #1
 800aa9a:	4648      	mov	r0, r9
 800aa9c:	9300      	str	r3, [sp, #0]
 800aa9e:	f7ff fa9b 	bl	8009fd8 <quorem>
 800aaa2:	4639      	mov	r1, r7
 800aaa4:	9002      	str	r0, [sp, #8]
 800aaa6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800aaaa:	4648      	mov	r0, r9
 800aaac:	f000 fca4 	bl	800b3f8 <__mcmp>
 800aab0:	462a      	mov	r2, r5
 800aab2:	9008      	str	r0, [sp, #32]
 800aab4:	4621      	mov	r1, r4
 800aab6:	4658      	mov	r0, fp
 800aab8:	f000 fcba 	bl	800b430 <__mdiff>
 800aabc:	68c2      	ldr	r2, [r0, #12]
 800aabe:	4606      	mov	r6, r0
 800aac0:	bb02      	cbnz	r2, 800ab04 <_dtoa_r+0xa1c>
 800aac2:	4601      	mov	r1, r0
 800aac4:	4648      	mov	r0, r9
 800aac6:	f000 fc97 	bl	800b3f8 <__mcmp>
 800aaca:	4602      	mov	r2, r0
 800aacc:	4631      	mov	r1, r6
 800aace:	4658      	mov	r0, fp
 800aad0:	920e      	str	r2, [sp, #56]	@ 0x38
 800aad2:	f000 fa0d 	bl	800aef0 <_Bfree>
 800aad6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aad8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800aada:	9e07      	ldr	r6, [sp, #28]
 800aadc:	ea43 0102 	orr.w	r1, r3, r2
 800aae0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800aae2:	4319      	orrs	r1, r3
 800aae4:	d110      	bne.n	800ab08 <_dtoa_r+0xa20>
 800aae6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800aaea:	d029      	beq.n	800ab40 <_dtoa_r+0xa58>
 800aaec:	9b08      	ldr	r3, [sp, #32]
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	dd02      	ble.n	800aaf8 <_dtoa_r+0xa10>
 800aaf2:	9b02      	ldr	r3, [sp, #8]
 800aaf4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800aaf8:	9b00      	ldr	r3, [sp, #0]
 800aafa:	f883 8000 	strb.w	r8, [r3]
 800aafe:	e63f      	b.n	800a780 <_dtoa_r+0x698>
 800ab00:	4628      	mov	r0, r5
 800ab02:	e7bb      	b.n	800aa7c <_dtoa_r+0x994>
 800ab04:	2201      	movs	r2, #1
 800ab06:	e7e1      	b.n	800aacc <_dtoa_r+0x9e4>
 800ab08:	9b08      	ldr	r3, [sp, #32]
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	db04      	blt.n	800ab18 <_dtoa_r+0xa30>
 800ab0e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ab10:	430b      	orrs	r3, r1
 800ab12:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ab14:	430b      	orrs	r3, r1
 800ab16:	d120      	bne.n	800ab5a <_dtoa_r+0xa72>
 800ab18:	2a00      	cmp	r2, #0
 800ab1a:	dded      	ble.n	800aaf8 <_dtoa_r+0xa10>
 800ab1c:	4649      	mov	r1, r9
 800ab1e:	2201      	movs	r2, #1
 800ab20:	4658      	mov	r0, fp
 800ab22:	f000 fbfd 	bl	800b320 <__lshift>
 800ab26:	4621      	mov	r1, r4
 800ab28:	4681      	mov	r9, r0
 800ab2a:	f000 fc65 	bl	800b3f8 <__mcmp>
 800ab2e:	2800      	cmp	r0, #0
 800ab30:	dc03      	bgt.n	800ab3a <_dtoa_r+0xa52>
 800ab32:	d1e1      	bne.n	800aaf8 <_dtoa_r+0xa10>
 800ab34:	f018 0f01 	tst.w	r8, #1
 800ab38:	d0de      	beq.n	800aaf8 <_dtoa_r+0xa10>
 800ab3a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ab3e:	d1d8      	bne.n	800aaf2 <_dtoa_r+0xa0a>
 800ab40:	9a00      	ldr	r2, [sp, #0]
 800ab42:	2339      	movs	r3, #57	@ 0x39
 800ab44:	7013      	strb	r3, [r2, #0]
 800ab46:	4633      	mov	r3, r6
 800ab48:	461e      	mov	r6, r3
 800ab4a:	3b01      	subs	r3, #1
 800ab4c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800ab50:	2a39      	cmp	r2, #57	@ 0x39
 800ab52:	d052      	beq.n	800abfa <_dtoa_r+0xb12>
 800ab54:	3201      	adds	r2, #1
 800ab56:	701a      	strb	r2, [r3, #0]
 800ab58:	e612      	b.n	800a780 <_dtoa_r+0x698>
 800ab5a:	2a00      	cmp	r2, #0
 800ab5c:	dd07      	ble.n	800ab6e <_dtoa_r+0xa86>
 800ab5e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ab62:	d0ed      	beq.n	800ab40 <_dtoa_r+0xa58>
 800ab64:	9a00      	ldr	r2, [sp, #0]
 800ab66:	f108 0301 	add.w	r3, r8, #1
 800ab6a:	7013      	strb	r3, [r2, #0]
 800ab6c:	e608      	b.n	800a780 <_dtoa_r+0x698>
 800ab6e:	9b07      	ldr	r3, [sp, #28]
 800ab70:	9a07      	ldr	r2, [sp, #28]
 800ab72:	f803 8c01 	strb.w	r8, [r3, #-1]
 800ab76:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ab78:	4293      	cmp	r3, r2
 800ab7a:	d028      	beq.n	800abce <_dtoa_r+0xae6>
 800ab7c:	4649      	mov	r1, r9
 800ab7e:	2300      	movs	r3, #0
 800ab80:	220a      	movs	r2, #10
 800ab82:	4658      	mov	r0, fp
 800ab84:	f000 f9d6 	bl	800af34 <__multadd>
 800ab88:	42af      	cmp	r7, r5
 800ab8a:	4681      	mov	r9, r0
 800ab8c:	f04f 0300 	mov.w	r3, #0
 800ab90:	f04f 020a 	mov.w	r2, #10
 800ab94:	4639      	mov	r1, r7
 800ab96:	4658      	mov	r0, fp
 800ab98:	d107      	bne.n	800abaa <_dtoa_r+0xac2>
 800ab9a:	f000 f9cb 	bl	800af34 <__multadd>
 800ab9e:	4607      	mov	r7, r0
 800aba0:	4605      	mov	r5, r0
 800aba2:	9b07      	ldr	r3, [sp, #28]
 800aba4:	3301      	adds	r3, #1
 800aba6:	9307      	str	r3, [sp, #28]
 800aba8:	e774      	b.n	800aa94 <_dtoa_r+0x9ac>
 800abaa:	f000 f9c3 	bl	800af34 <__multadd>
 800abae:	4629      	mov	r1, r5
 800abb0:	4607      	mov	r7, r0
 800abb2:	2300      	movs	r3, #0
 800abb4:	220a      	movs	r2, #10
 800abb6:	4658      	mov	r0, fp
 800abb8:	f000 f9bc 	bl	800af34 <__multadd>
 800abbc:	4605      	mov	r5, r0
 800abbe:	e7f0      	b.n	800aba2 <_dtoa_r+0xaba>
 800abc0:	9b00      	ldr	r3, [sp, #0]
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	bfcc      	ite	gt
 800abc6:	461e      	movgt	r6, r3
 800abc8:	2601      	movle	r6, #1
 800abca:	4456      	add	r6, sl
 800abcc:	2700      	movs	r7, #0
 800abce:	4649      	mov	r1, r9
 800abd0:	2201      	movs	r2, #1
 800abd2:	4658      	mov	r0, fp
 800abd4:	f000 fba4 	bl	800b320 <__lshift>
 800abd8:	4621      	mov	r1, r4
 800abda:	4681      	mov	r9, r0
 800abdc:	f000 fc0c 	bl	800b3f8 <__mcmp>
 800abe0:	2800      	cmp	r0, #0
 800abe2:	dcb0      	bgt.n	800ab46 <_dtoa_r+0xa5e>
 800abe4:	d102      	bne.n	800abec <_dtoa_r+0xb04>
 800abe6:	f018 0f01 	tst.w	r8, #1
 800abea:	d1ac      	bne.n	800ab46 <_dtoa_r+0xa5e>
 800abec:	4633      	mov	r3, r6
 800abee:	461e      	mov	r6, r3
 800abf0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800abf4:	2a30      	cmp	r2, #48	@ 0x30
 800abf6:	d0fa      	beq.n	800abee <_dtoa_r+0xb06>
 800abf8:	e5c2      	b.n	800a780 <_dtoa_r+0x698>
 800abfa:	459a      	cmp	sl, r3
 800abfc:	d1a4      	bne.n	800ab48 <_dtoa_r+0xa60>
 800abfe:	9b04      	ldr	r3, [sp, #16]
 800ac00:	3301      	adds	r3, #1
 800ac02:	9304      	str	r3, [sp, #16]
 800ac04:	2331      	movs	r3, #49	@ 0x31
 800ac06:	f88a 3000 	strb.w	r3, [sl]
 800ac0a:	e5b9      	b.n	800a780 <_dtoa_r+0x698>
 800ac0c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ac0e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800ac6c <_dtoa_r+0xb84>
 800ac12:	b11b      	cbz	r3, 800ac1c <_dtoa_r+0xb34>
 800ac14:	f10a 0308 	add.w	r3, sl, #8
 800ac18:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800ac1a:	6013      	str	r3, [r2, #0]
 800ac1c:	4650      	mov	r0, sl
 800ac1e:	b019      	add	sp, #100	@ 0x64
 800ac20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac24:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ac26:	2b01      	cmp	r3, #1
 800ac28:	f77f ae37 	ble.w	800a89a <_dtoa_r+0x7b2>
 800ac2c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ac2e:	930a      	str	r3, [sp, #40]	@ 0x28
 800ac30:	2001      	movs	r0, #1
 800ac32:	e655      	b.n	800a8e0 <_dtoa_r+0x7f8>
 800ac34:	9b00      	ldr	r3, [sp, #0]
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	f77f aed6 	ble.w	800a9e8 <_dtoa_r+0x900>
 800ac3c:	4656      	mov	r6, sl
 800ac3e:	4621      	mov	r1, r4
 800ac40:	4648      	mov	r0, r9
 800ac42:	f7ff f9c9 	bl	8009fd8 <quorem>
 800ac46:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800ac4a:	f806 8b01 	strb.w	r8, [r6], #1
 800ac4e:	9b00      	ldr	r3, [sp, #0]
 800ac50:	eba6 020a 	sub.w	r2, r6, sl
 800ac54:	4293      	cmp	r3, r2
 800ac56:	ddb3      	ble.n	800abc0 <_dtoa_r+0xad8>
 800ac58:	4649      	mov	r1, r9
 800ac5a:	2300      	movs	r3, #0
 800ac5c:	220a      	movs	r2, #10
 800ac5e:	4658      	mov	r0, fp
 800ac60:	f000 f968 	bl	800af34 <__multadd>
 800ac64:	4681      	mov	r9, r0
 800ac66:	e7ea      	b.n	800ac3e <_dtoa_r+0xb56>
 800ac68:	0800e3bd 	.word	0x0800e3bd
 800ac6c:	0800e341 	.word	0x0800e341

0800ac70 <_free_r>:
 800ac70:	b538      	push	{r3, r4, r5, lr}
 800ac72:	4605      	mov	r5, r0
 800ac74:	2900      	cmp	r1, #0
 800ac76:	d041      	beq.n	800acfc <_free_r+0x8c>
 800ac78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ac7c:	1f0c      	subs	r4, r1, #4
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	bfb8      	it	lt
 800ac82:	18e4      	addlt	r4, r4, r3
 800ac84:	f000 f8e8 	bl	800ae58 <__malloc_lock>
 800ac88:	4a1d      	ldr	r2, [pc, #116]	@ (800ad00 <_free_r+0x90>)
 800ac8a:	6813      	ldr	r3, [r2, #0]
 800ac8c:	b933      	cbnz	r3, 800ac9c <_free_r+0x2c>
 800ac8e:	6063      	str	r3, [r4, #4]
 800ac90:	6014      	str	r4, [r2, #0]
 800ac92:	4628      	mov	r0, r5
 800ac94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ac98:	f000 b8e4 	b.w	800ae64 <__malloc_unlock>
 800ac9c:	42a3      	cmp	r3, r4
 800ac9e:	d908      	bls.n	800acb2 <_free_r+0x42>
 800aca0:	6820      	ldr	r0, [r4, #0]
 800aca2:	1821      	adds	r1, r4, r0
 800aca4:	428b      	cmp	r3, r1
 800aca6:	bf01      	itttt	eq
 800aca8:	6819      	ldreq	r1, [r3, #0]
 800acaa:	685b      	ldreq	r3, [r3, #4]
 800acac:	1809      	addeq	r1, r1, r0
 800acae:	6021      	streq	r1, [r4, #0]
 800acb0:	e7ed      	b.n	800ac8e <_free_r+0x1e>
 800acb2:	461a      	mov	r2, r3
 800acb4:	685b      	ldr	r3, [r3, #4]
 800acb6:	b10b      	cbz	r3, 800acbc <_free_r+0x4c>
 800acb8:	42a3      	cmp	r3, r4
 800acba:	d9fa      	bls.n	800acb2 <_free_r+0x42>
 800acbc:	6811      	ldr	r1, [r2, #0]
 800acbe:	1850      	adds	r0, r2, r1
 800acc0:	42a0      	cmp	r0, r4
 800acc2:	d10b      	bne.n	800acdc <_free_r+0x6c>
 800acc4:	6820      	ldr	r0, [r4, #0]
 800acc6:	4401      	add	r1, r0
 800acc8:	1850      	adds	r0, r2, r1
 800acca:	4283      	cmp	r3, r0
 800accc:	6011      	str	r1, [r2, #0]
 800acce:	d1e0      	bne.n	800ac92 <_free_r+0x22>
 800acd0:	6818      	ldr	r0, [r3, #0]
 800acd2:	685b      	ldr	r3, [r3, #4]
 800acd4:	6053      	str	r3, [r2, #4]
 800acd6:	4408      	add	r0, r1
 800acd8:	6010      	str	r0, [r2, #0]
 800acda:	e7da      	b.n	800ac92 <_free_r+0x22>
 800acdc:	d902      	bls.n	800ace4 <_free_r+0x74>
 800acde:	230c      	movs	r3, #12
 800ace0:	602b      	str	r3, [r5, #0]
 800ace2:	e7d6      	b.n	800ac92 <_free_r+0x22>
 800ace4:	6820      	ldr	r0, [r4, #0]
 800ace6:	1821      	adds	r1, r4, r0
 800ace8:	428b      	cmp	r3, r1
 800acea:	bf04      	itt	eq
 800acec:	6819      	ldreq	r1, [r3, #0]
 800acee:	685b      	ldreq	r3, [r3, #4]
 800acf0:	6063      	str	r3, [r4, #4]
 800acf2:	bf04      	itt	eq
 800acf4:	1809      	addeq	r1, r1, r0
 800acf6:	6021      	streq	r1, [r4, #0]
 800acf8:	6054      	str	r4, [r2, #4]
 800acfa:	e7ca      	b.n	800ac92 <_free_r+0x22>
 800acfc:	bd38      	pop	{r3, r4, r5, pc}
 800acfe:	bf00      	nop
 800ad00:	20000754 	.word	0x20000754

0800ad04 <malloc>:
 800ad04:	4b02      	ldr	r3, [pc, #8]	@ (800ad10 <malloc+0xc>)
 800ad06:	4601      	mov	r1, r0
 800ad08:	6818      	ldr	r0, [r3, #0]
 800ad0a:	f000 b825 	b.w	800ad58 <_malloc_r>
 800ad0e:	bf00      	nop
 800ad10:	20000068 	.word	0x20000068

0800ad14 <sbrk_aligned>:
 800ad14:	b570      	push	{r4, r5, r6, lr}
 800ad16:	4e0f      	ldr	r6, [pc, #60]	@ (800ad54 <sbrk_aligned+0x40>)
 800ad18:	460c      	mov	r4, r1
 800ad1a:	6831      	ldr	r1, [r6, #0]
 800ad1c:	4605      	mov	r5, r0
 800ad1e:	b911      	cbnz	r1, 800ad26 <sbrk_aligned+0x12>
 800ad20:	f001 fe0c 	bl	800c93c <_sbrk_r>
 800ad24:	6030      	str	r0, [r6, #0]
 800ad26:	4621      	mov	r1, r4
 800ad28:	4628      	mov	r0, r5
 800ad2a:	f001 fe07 	bl	800c93c <_sbrk_r>
 800ad2e:	1c43      	adds	r3, r0, #1
 800ad30:	d103      	bne.n	800ad3a <sbrk_aligned+0x26>
 800ad32:	f04f 34ff 	mov.w	r4, #4294967295
 800ad36:	4620      	mov	r0, r4
 800ad38:	bd70      	pop	{r4, r5, r6, pc}
 800ad3a:	1cc4      	adds	r4, r0, #3
 800ad3c:	f024 0403 	bic.w	r4, r4, #3
 800ad40:	42a0      	cmp	r0, r4
 800ad42:	d0f8      	beq.n	800ad36 <sbrk_aligned+0x22>
 800ad44:	1a21      	subs	r1, r4, r0
 800ad46:	4628      	mov	r0, r5
 800ad48:	f001 fdf8 	bl	800c93c <_sbrk_r>
 800ad4c:	3001      	adds	r0, #1
 800ad4e:	d1f2      	bne.n	800ad36 <sbrk_aligned+0x22>
 800ad50:	e7ef      	b.n	800ad32 <sbrk_aligned+0x1e>
 800ad52:	bf00      	nop
 800ad54:	20000750 	.word	0x20000750

0800ad58 <_malloc_r>:
 800ad58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ad5c:	1ccd      	adds	r5, r1, #3
 800ad5e:	f025 0503 	bic.w	r5, r5, #3
 800ad62:	3508      	adds	r5, #8
 800ad64:	2d0c      	cmp	r5, #12
 800ad66:	bf38      	it	cc
 800ad68:	250c      	movcc	r5, #12
 800ad6a:	2d00      	cmp	r5, #0
 800ad6c:	4606      	mov	r6, r0
 800ad6e:	db01      	blt.n	800ad74 <_malloc_r+0x1c>
 800ad70:	42a9      	cmp	r1, r5
 800ad72:	d904      	bls.n	800ad7e <_malloc_r+0x26>
 800ad74:	230c      	movs	r3, #12
 800ad76:	6033      	str	r3, [r6, #0]
 800ad78:	2000      	movs	r0, #0
 800ad7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ad7e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ae54 <_malloc_r+0xfc>
 800ad82:	f000 f869 	bl	800ae58 <__malloc_lock>
 800ad86:	f8d8 3000 	ldr.w	r3, [r8]
 800ad8a:	461c      	mov	r4, r3
 800ad8c:	bb44      	cbnz	r4, 800ade0 <_malloc_r+0x88>
 800ad8e:	4629      	mov	r1, r5
 800ad90:	4630      	mov	r0, r6
 800ad92:	f7ff ffbf 	bl	800ad14 <sbrk_aligned>
 800ad96:	1c43      	adds	r3, r0, #1
 800ad98:	4604      	mov	r4, r0
 800ad9a:	d158      	bne.n	800ae4e <_malloc_r+0xf6>
 800ad9c:	f8d8 4000 	ldr.w	r4, [r8]
 800ada0:	4627      	mov	r7, r4
 800ada2:	2f00      	cmp	r7, #0
 800ada4:	d143      	bne.n	800ae2e <_malloc_r+0xd6>
 800ada6:	2c00      	cmp	r4, #0
 800ada8:	d04b      	beq.n	800ae42 <_malloc_r+0xea>
 800adaa:	6823      	ldr	r3, [r4, #0]
 800adac:	4639      	mov	r1, r7
 800adae:	4630      	mov	r0, r6
 800adb0:	eb04 0903 	add.w	r9, r4, r3
 800adb4:	f001 fdc2 	bl	800c93c <_sbrk_r>
 800adb8:	4581      	cmp	r9, r0
 800adba:	d142      	bne.n	800ae42 <_malloc_r+0xea>
 800adbc:	6821      	ldr	r1, [r4, #0]
 800adbe:	1a6d      	subs	r5, r5, r1
 800adc0:	4629      	mov	r1, r5
 800adc2:	4630      	mov	r0, r6
 800adc4:	f7ff ffa6 	bl	800ad14 <sbrk_aligned>
 800adc8:	3001      	adds	r0, #1
 800adca:	d03a      	beq.n	800ae42 <_malloc_r+0xea>
 800adcc:	6823      	ldr	r3, [r4, #0]
 800adce:	442b      	add	r3, r5
 800add0:	6023      	str	r3, [r4, #0]
 800add2:	f8d8 3000 	ldr.w	r3, [r8]
 800add6:	685a      	ldr	r2, [r3, #4]
 800add8:	bb62      	cbnz	r2, 800ae34 <_malloc_r+0xdc>
 800adda:	f8c8 7000 	str.w	r7, [r8]
 800adde:	e00f      	b.n	800ae00 <_malloc_r+0xa8>
 800ade0:	6822      	ldr	r2, [r4, #0]
 800ade2:	1b52      	subs	r2, r2, r5
 800ade4:	d420      	bmi.n	800ae28 <_malloc_r+0xd0>
 800ade6:	2a0b      	cmp	r2, #11
 800ade8:	d917      	bls.n	800ae1a <_malloc_r+0xc2>
 800adea:	1961      	adds	r1, r4, r5
 800adec:	42a3      	cmp	r3, r4
 800adee:	6025      	str	r5, [r4, #0]
 800adf0:	bf18      	it	ne
 800adf2:	6059      	strne	r1, [r3, #4]
 800adf4:	6863      	ldr	r3, [r4, #4]
 800adf6:	bf08      	it	eq
 800adf8:	f8c8 1000 	streq.w	r1, [r8]
 800adfc:	5162      	str	r2, [r4, r5]
 800adfe:	604b      	str	r3, [r1, #4]
 800ae00:	4630      	mov	r0, r6
 800ae02:	f000 f82f 	bl	800ae64 <__malloc_unlock>
 800ae06:	f104 000b 	add.w	r0, r4, #11
 800ae0a:	1d23      	adds	r3, r4, #4
 800ae0c:	f020 0007 	bic.w	r0, r0, #7
 800ae10:	1ac2      	subs	r2, r0, r3
 800ae12:	bf1c      	itt	ne
 800ae14:	1a1b      	subne	r3, r3, r0
 800ae16:	50a3      	strne	r3, [r4, r2]
 800ae18:	e7af      	b.n	800ad7a <_malloc_r+0x22>
 800ae1a:	6862      	ldr	r2, [r4, #4]
 800ae1c:	42a3      	cmp	r3, r4
 800ae1e:	bf0c      	ite	eq
 800ae20:	f8c8 2000 	streq.w	r2, [r8]
 800ae24:	605a      	strne	r2, [r3, #4]
 800ae26:	e7eb      	b.n	800ae00 <_malloc_r+0xa8>
 800ae28:	4623      	mov	r3, r4
 800ae2a:	6864      	ldr	r4, [r4, #4]
 800ae2c:	e7ae      	b.n	800ad8c <_malloc_r+0x34>
 800ae2e:	463c      	mov	r4, r7
 800ae30:	687f      	ldr	r7, [r7, #4]
 800ae32:	e7b6      	b.n	800ada2 <_malloc_r+0x4a>
 800ae34:	461a      	mov	r2, r3
 800ae36:	685b      	ldr	r3, [r3, #4]
 800ae38:	42a3      	cmp	r3, r4
 800ae3a:	d1fb      	bne.n	800ae34 <_malloc_r+0xdc>
 800ae3c:	2300      	movs	r3, #0
 800ae3e:	6053      	str	r3, [r2, #4]
 800ae40:	e7de      	b.n	800ae00 <_malloc_r+0xa8>
 800ae42:	230c      	movs	r3, #12
 800ae44:	6033      	str	r3, [r6, #0]
 800ae46:	4630      	mov	r0, r6
 800ae48:	f000 f80c 	bl	800ae64 <__malloc_unlock>
 800ae4c:	e794      	b.n	800ad78 <_malloc_r+0x20>
 800ae4e:	6005      	str	r5, [r0, #0]
 800ae50:	e7d6      	b.n	800ae00 <_malloc_r+0xa8>
 800ae52:	bf00      	nop
 800ae54:	20000754 	.word	0x20000754

0800ae58 <__malloc_lock>:
 800ae58:	4801      	ldr	r0, [pc, #4]	@ (800ae60 <__malloc_lock+0x8>)
 800ae5a:	f7ff b8b4 	b.w	8009fc6 <__retarget_lock_acquire_recursive>
 800ae5e:	bf00      	nop
 800ae60:	2000074c 	.word	0x2000074c

0800ae64 <__malloc_unlock>:
 800ae64:	4801      	ldr	r0, [pc, #4]	@ (800ae6c <__malloc_unlock+0x8>)
 800ae66:	f7ff b8af 	b.w	8009fc8 <__retarget_lock_release_recursive>
 800ae6a:	bf00      	nop
 800ae6c:	2000074c 	.word	0x2000074c

0800ae70 <_Balloc>:
 800ae70:	b570      	push	{r4, r5, r6, lr}
 800ae72:	69c6      	ldr	r6, [r0, #28]
 800ae74:	4604      	mov	r4, r0
 800ae76:	460d      	mov	r5, r1
 800ae78:	b976      	cbnz	r6, 800ae98 <_Balloc+0x28>
 800ae7a:	2010      	movs	r0, #16
 800ae7c:	f7ff ff42 	bl	800ad04 <malloc>
 800ae80:	4602      	mov	r2, r0
 800ae82:	61e0      	str	r0, [r4, #28]
 800ae84:	b920      	cbnz	r0, 800ae90 <_Balloc+0x20>
 800ae86:	4b18      	ldr	r3, [pc, #96]	@ (800aee8 <_Balloc+0x78>)
 800ae88:	4818      	ldr	r0, [pc, #96]	@ (800aeec <_Balloc+0x7c>)
 800ae8a:	216b      	movs	r1, #107	@ 0x6b
 800ae8c:	f001 fd7c 	bl	800c988 <__assert_func>
 800ae90:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ae94:	6006      	str	r6, [r0, #0]
 800ae96:	60c6      	str	r6, [r0, #12]
 800ae98:	69e6      	ldr	r6, [r4, #28]
 800ae9a:	68f3      	ldr	r3, [r6, #12]
 800ae9c:	b183      	cbz	r3, 800aec0 <_Balloc+0x50>
 800ae9e:	69e3      	ldr	r3, [r4, #28]
 800aea0:	68db      	ldr	r3, [r3, #12]
 800aea2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800aea6:	b9b8      	cbnz	r0, 800aed8 <_Balloc+0x68>
 800aea8:	2101      	movs	r1, #1
 800aeaa:	fa01 f605 	lsl.w	r6, r1, r5
 800aeae:	1d72      	adds	r2, r6, #5
 800aeb0:	0092      	lsls	r2, r2, #2
 800aeb2:	4620      	mov	r0, r4
 800aeb4:	f001 fd86 	bl	800c9c4 <_calloc_r>
 800aeb8:	b160      	cbz	r0, 800aed4 <_Balloc+0x64>
 800aeba:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800aebe:	e00e      	b.n	800aede <_Balloc+0x6e>
 800aec0:	2221      	movs	r2, #33	@ 0x21
 800aec2:	2104      	movs	r1, #4
 800aec4:	4620      	mov	r0, r4
 800aec6:	f001 fd7d 	bl	800c9c4 <_calloc_r>
 800aeca:	69e3      	ldr	r3, [r4, #28]
 800aecc:	60f0      	str	r0, [r6, #12]
 800aece:	68db      	ldr	r3, [r3, #12]
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d1e4      	bne.n	800ae9e <_Balloc+0x2e>
 800aed4:	2000      	movs	r0, #0
 800aed6:	bd70      	pop	{r4, r5, r6, pc}
 800aed8:	6802      	ldr	r2, [r0, #0]
 800aeda:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800aede:	2300      	movs	r3, #0
 800aee0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800aee4:	e7f7      	b.n	800aed6 <_Balloc+0x66>
 800aee6:	bf00      	nop
 800aee8:	0800e34e 	.word	0x0800e34e
 800aeec:	0800e3ce 	.word	0x0800e3ce

0800aef0 <_Bfree>:
 800aef0:	b570      	push	{r4, r5, r6, lr}
 800aef2:	69c6      	ldr	r6, [r0, #28]
 800aef4:	4605      	mov	r5, r0
 800aef6:	460c      	mov	r4, r1
 800aef8:	b976      	cbnz	r6, 800af18 <_Bfree+0x28>
 800aefa:	2010      	movs	r0, #16
 800aefc:	f7ff ff02 	bl	800ad04 <malloc>
 800af00:	4602      	mov	r2, r0
 800af02:	61e8      	str	r0, [r5, #28]
 800af04:	b920      	cbnz	r0, 800af10 <_Bfree+0x20>
 800af06:	4b09      	ldr	r3, [pc, #36]	@ (800af2c <_Bfree+0x3c>)
 800af08:	4809      	ldr	r0, [pc, #36]	@ (800af30 <_Bfree+0x40>)
 800af0a:	218f      	movs	r1, #143	@ 0x8f
 800af0c:	f001 fd3c 	bl	800c988 <__assert_func>
 800af10:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800af14:	6006      	str	r6, [r0, #0]
 800af16:	60c6      	str	r6, [r0, #12]
 800af18:	b13c      	cbz	r4, 800af2a <_Bfree+0x3a>
 800af1a:	69eb      	ldr	r3, [r5, #28]
 800af1c:	6862      	ldr	r2, [r4, #4]
 800af1e:	68db      	ldr	r3, [r3, #12]
 800af20:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800af24:	6021      	str	r1, [r4, #0]
 800af26:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800af2a:	bd70      	pop	{r4, r5, r6, pc}
 800af2c:	0800e34e 	.word	0x0800e34e
 800af30:	0800e3ce 	.word	0x0800e3ce

0800af34 <__multadd>:
 800af34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af38:	690d      	ldr	r5, [r1, #16]
 800af3a:	4607      	mov	r7, r0
 800af3c:	460c      	mov	r4, r1
 800af3e:	461e      	mov	r6, r3
 800af40:	f101 0c14 	add.w	ip, r1, #20
 800af44:	2000      	movs	r0, #0
 800af46:	f8dc 3000 	ldr.w	r3, [ip]
 800af4a:	b299      	uxth	r1, r3
 800af4c:	fb02 6101 	mla	r1, r2, r1, r6
 800af50:	0c1e      	lsrs	r6, r3, #16
 800af52:	0c0b      	lsrs	r3, r1, #16
 800af54:	fb02 3306 	mla	r3, r2, r6, r3
 800af58:	b289      	uxth	r1, r1
 800af5a:	3001      	adds	r0, #1
 800af5c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800af60:	4285      	cmp	r5, r0
 800af62:	f84c 1b04 	str.w	r1, [ip], #4
 800af66:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800af6a:	dcec      	bgt.n	800af46 <__multadd+0x12>
 800af6c:	b30e      	cbz	r6, 800afb2 <__multadd+0x7e>
 800af6e:	68a3      	ldr	r3, [r4, #8]
 800af70:	42ab      	cmp	r3, r5
 800af72:	dc19      	bgt.n	800afa8 <__multadd+0x74>
 800af74:	6861      	ldr	r1, [r4, #4]
 800af76:	4638      	mov	r0, r7
 800af78:	3101      	adds	r1, #1
 800af7a:	f7ff ff79 	bl	800ae70 <_Balloc>
 800af7e:	4680      	mov	r8, r0
 800af80:	b928      	cbnz	r0, 800af8e <__multadd+0x5a>
 800af82:	4602      	mov	r2, r0
 800af84:	4b0c      	ldr	r3, [pc, #48]	@ (800afb8 <__multadd+0x84>)
 800af86:	480d      	ldr	r0, [pc, #52]	@ (800afbc <__multadd+0x88>)
 800af88:	21ba      	movs	r1, #186	@ 0xba
 800af8a:	f001 fcfd 	bl	800c988 <__assert_func>
 800af8e:	6922      	ldr	r2, [r4, #16]
 800af90:	3202      	adds	r2, #2
 800af92:	f104 010c 	add.w	r1, r4, #12
 800af96:	0092      	lsls	r2, r2, #2
 800af98:	300c      	adds	r0, #12
 800af9a:	f001 fcdf 	bl	800c95c <memcpy>
 800af9e:	4621      	mov	r1, r4
 800afa0:	4638      	mov	r0, r7
 800afa2:	f7ff ffa5 	bl	800aef0 <_Bfree>
 800afa6:	4644      	mov	r4, r8
 800afa8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800afac:	3501      	adds	r5, #1
 800afae:	615e      	str	r6, [r3, #20]
 800afb0:	6125      	str	r5, [r4, #16]
 800afb2:	4620      	mov	r0, r4
 800afb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800afb8:	0800e3bd 	.word	0x0800e3bd
 800afbc:	0800e3ce 	.word	0x0800e3ce

0800afc0 <__s2b>:
 800afc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800afc4:	460c      	mov	r4, r1
 800afc6:	4615      	mov	r5, r2
 800afc8:	461f      	mov	r7, r3
 800afca:	2209      	movs	r2, #9
 800afcc:	3308      	adds	r3, #8
 800afce:	4606      	mov	r6, r0
 800afd0:	fb93 f3f2 	sdiv	r3, r3, r2
 800afd4:	2100      	movs	r1, #0
 800afd6:	2201      	movs	r2, #1
 800afd8:	429a      	cmp	r2, r3
 800afda:	db09      	blt.n	800aff0 <__s2b+0x30>
 800afdc:	4630      	mov	r0, r6
 800afde:	f7ff ff47 	bl	800ae70 <_Balloc>
 800afe2:	b940      	cbnz	r0, 800aff6 <__s2b+0x36>
 800afe4:	4602      	mov	r2, r0
 800afe6:	4b19      	ldr	r3, [pc, #100]	@ (800b04c <__s2b+0x8c>)
 800afe8:	4819      	ldr	r0, [pc, #100]	@ (800b050 <__s2b+0x90>)
 800afea:	21d3      	movs	r1, #211	@ 0xd3
 800afec:	f001 fccc 	bl	800c988 <__assert_func>
 800aff0:	0052      	lsls	r2, r2, #1
 800aff2:	3101      	adds	r1, #1
 800aff4:	e7f0      	b.n	800afd8 <__s2b+0x18>
 800aff6:	9b08      	ldr	r3, [sp, #32]
 800aff8:	6143      	str	r3, [r0, #20]
 800affa:	2d09      	cmp	r5, #9
 800affc:	f04f 0301 	mov.w	r3, #1
 800b000:	6103      	str	r3, [r0, #16]
 800b002:	dd16      	ble.n	800b032 <__s2b+0x72>
 800b004:	f104 0909 	add.w	r9, r4, #9
 800b008:	46c8      	mov	r8, r9
 800b00a:	442c      	add	r4, r5
 800b00c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800b010:	4601      	mov	r1, r0
 800b012:	3b30      	subs	r3, #48	@ 0x30
 800b014:	220a      	movs	r2, #10
 800b016:	4630      	mov	r0, r6
 800b018:	f7ff ff8c 	bl	800af34 <__multadd>
 800b01c:	45a0      	cmp	r8, r4
 800b01e:	d1f5      	bne.n	800b00c <__s2b+0x4c>
 800b020:	f1a5 0408 	sub.w	r4, r5, #8
 800b024:	444c      	add	r4, r9
 800b026:	1b2d      	subs	r5, r5, r4
 800b028:	1963      	adds	r3, r4, r5
 800b02a:	42bb      	cmp	r3, r7
 800b02c:	db04      	blt.n	800b038 <__s2b+0x78>
 800b02e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b032:	340a      	adds	r4, #10
 800b034:	2509      	movs	r5, #9
 800b036:	e7f6      	b.n	800b026 <__s2b+0x66>
 800b038:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b03c:	4601      	mov	r1, r0
 800b03e:	3b30      	subs	r3, #48	@ 0x30
 800b040:	220a      	movs	r2, #10
 800b042:	4630      	mov	r0, r6
 800b044:	f7ff ff76 	bl	800af34 <__multadd>
 800b048:	e7ee      	b.n	800b028 <__s2b+0x68>
 800b04a:	bf00      	nop
 800b04c:	0800e3bd 	.word	0x0800e3bd
 800b050:	0800e3ce 	.word	0x0800e3ce

0800b054 <__hi0bits>:
 800b054:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800b058:	4603      	mov	r3, r0
 800b05a:	bf36      	itet	cc
 800b05c:	0403      	lslcc	r3, r0, #16
 800b05e:	2000      	movcs	r0, #0
 800b060:	2010      	movcc	r0, #16
 800b062:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b066:	bf3c      	itt	cc
 800b068:	021b      	lslcc	r3, r3, #8
 800b06a:	3008      	addcc	r0, #8
 800b06c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b070:	bf3c      	itt	cc
 800b072:	011b      	lslcc	r3, r3, #4
 800b074:	3004      	addcc	r0, #4
 800b076:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b07a:	bf3c      	itt	cc
 800b07c:	009b      	lslcc	r3, r3, #2
 800b07e:	3002      	addcc	r0, #2
 800b080:	2b00      	cmp	r3, #0
 800b082:	db05      	blt.n	800b090 <__hi0bits+0x3c>
 800b084:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800b088:	f100 0001 	add.w	r0, r0, #1
 800b08c:	bf08      	it	eq
 800b08e:	2020      	moveq	r0, #32
 800b090:	4770      	bx	lr

0800b092 <__lo0bits>:
 800b092:	6803      	ldr	r3, [r0, #0]
 800b094:	4602      	mov	r2, r0
 800b096:	f013 0007 	ands.w	r0, r3, #7
 800b09a:	d00b      	beq.n	800b0b4 <__lo0bits+0x22>
 800b09c:	07d9      	lsls	r1, r3, #31
 800b09e:	d421      	bmi.n	800b0e4 <__lo0bits+0x52>
 800b0a0:	0798      	lsls	r0, r3, #30
 800b0a2:	bf49      	itett	mi
 800b0a4:	085b      	lsrmi	r3, r3, #1
 800b0a6:	089b      	lsrpl	r3, r3, #2
 800b0a8:	2001      	movmi	r0, #1
 800b0aa:	6013      	strmi	r3, [r2, #0]
 800b0ac:	bf5c      	itt	pl
 800b0ae:	6013      	strpl	r3, [r2, #0]
 800b0b0:	2002      	movpl	r0, #2
 800b0b2:	4770      	bx	lr
 800b0b4:	b299      	uxth	r1, r3
 800b0b6:	b909      	cbnz	r1, 800b0bc <__lo0bits+0x2a>
 800b0b8:	0c1b      	lsrs	r3, r3, #16
 800b0ba:	2010      	movs	r0, #16
 800b0bc:	b2d9      	uxtb	r1, r3
 800b0be:	b909      	cbnz	r1, 800b0c4 <__lo0bits+0x32>
 800b0c0:	3008      	adds	r0, #8
 800b0c2:	0a1b      	lsrs	r3, r3, #8
 800b0c4:	0719      	lsls	r1, r3, #28
 800b0c6:	bf04      	itt	eq
 800b0c8:	091b      	lsreq	r3, r3, #4
 800b0ca:	3004      	addeq	r0, #4
 800b0cc:	0799      	lsls	r1, r3, #30
 800b0ce:	bf04      	itt	eq
 800b0d0:	089b      	lsreq	r3, r3, #2
 800b0d2:	3002      	addeq	r0, #2
 800b0d4:	07d9      	lsls	r1, r3, #31
 800b0d6:	d403      	bmi.n	800b0e0 <__lo0bits+0x4e>
 800b0d8:	085b      	lsrs	r3, r3, #1
 800b0da:	f100 0001 	add.w	r0, r0, #1
 800b0de:	d003      	beq.n	800b0e8 <__lo0bits+0x56>
 800b0e0:	6013      	str	r3, [r2, #0]
 800b0e2:	4770      	bx	lr
 800b0e4:	2000      	movs	r0, #0
 800b0e6:	4770      	bx	lr
 800b0e8:	2020      	movs	r0, #32
 800b0ea:	4770      	bx	lr

0800b0ec <__i2b>:
 800b0ec:	b510      	push	{r4, lr}
 800b0ee:	460c      	mov	r4, r1
 800b0f0:	2101      	movs	r1, #1
 800b0f2:	f7ff febd 	bl	800ae70 <_Balloc>
 800b0f6:	4602      	mov	r2, r0
 800b0f8:	b928      	cbnz	r0, 800b106 <__i2b+0x1a>
 800b0fa:	4b05      	ldr	r3, [pc, #20]	@ (800b110 <__i2b+0x24>)
 800b0fc:	4805      	ldr	r0, [pc, #20]	@ (800b114 <__i2b+0x28>)
 800b0fe:	f240 1145 	movw	r1, #325	@ 0x145
 800b102:	f001 fc41 	bl	800c988 <__assert_func>
 800b106:	2301      	movs	r3, #1
 800b108:	6144      	str	r4, [r0, #20]
 800b10a:	6103      	str	r3, [r0, #16]
 800b10c:	bd10      	pop	{r4, pc}
 800b10e:	bf00      	nop
 800b110:	0800e3bd 	.word	0x0800e3bd
 800b114:	0800e3ce 	.word	0x0800e3ce

0800b118 <__multiply>:
 800b118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b11c:	4614      	mov	r4, r2
 800b11e:	690a      	ldr	r2, [r1, #16]
 800b120:	6923      	ldr	r3, [r4, #16]
 800b122:	429a      	cmp	r2, r3
 800b124:	bfa8      	it	ge
 800b126:	4623      	movge	r3, r4
 800b128:	460f      	mov	r7, r1
 800b12a:	bfa4      	itt	ge
 800b12c:	460c      	movge	r4, r1
 800b12e:	461f      	movge	r7, r3
 800b130:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800b134:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800b138:	68a3      	ldr	r3, [r4, #8]
 800b13a:	6861      	ldr	r1, [r4, #4]
 800b13c:	eb0a 0609 	add.w	r6, sl, r9
 800b140:	42b3      	cmp	r3, r6
 800b142:	b085      	sub	sp, #20
 800b144:	bfb8      	it	lt
 800b146:	3101      	addlt	r1, #1
 800b148:	f7ff fe92 	bl	800ae70 <_Balloc>
 800b14c:	b930      	cbnz	r0, 800b15c <__multiply+0x44>
 800b14e:	4602      	mov	r2, r0
 800b150:	4b44      	ldr	r3, [pc, #272]	@ (800b264 <__multiply+0x14c>)
 800b152:	4845      	ldr	r0, [pc, #276]	@ (800b268 <__multiply+0x150>)
 800b154:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800b158:	f001 fc16 	bl	800c988 <__assert_func>
 800b15c:	f100 0514 	add.w	r5, r0, #20
 800b160:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b164:	462b      	mov	r3, r5
 800b166:	2200      	movs	r2, #0
 800b168:	4543      	cmp	r3, r8
 800b16a:	d321      	bcc.n	800b1b0 <__multiply+0x98>
 800b16c:	f107 0114 	add.w	r1, r7, #20
 800b170:	f104 0214 	add.w	r2, r4, #20
 800b174:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800b178:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800b17c:	9302      	str	r3, [sp, #8]
 800b17e:	1b13      	subs	r3, r2, r4
 800b180:	3b15      	subs	r3, #21
 800b182:	f023 0303 	bic.w	r3, r3, #3
 800b186:	3304      	adds	r3, #4
 800b188:	f104 0715 	add.w	r7, r4, #21
 800b18c:	42ba      	cmp	r2, r7
 800b18e:	bf38      	it	cc
 800b190:	2304      	movcc	r3, #4
 800b192:	9301      	str	r3, [sp, #4]
 800b194:	9b02      	ldr	r3, [sp, #8]
 800b196:	9103      	str	r1, [sp, #12]
 800b198:	428b      	cmp	r3, r1
 800b19a:	d80c      	bhi.n	800b1b6 <__multiply+0x9e>
 800b19c:	2e00      	cmp	r6, #0
 800b19e:	dd03      	ble.n	800b1a8 <__multiply+0x90>
 800b1a0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d05b      	beq.n	800b260 <__multiply+0x148>
 800b1a8:	6106      	str	r6, [r0, #16]
 800b1aa:	b005      	add	sp, #20
 800b1ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1b0:	f843 2b04 	str.w	r2, [r3], #4
 800b1b4:	e7d8      	b.n	800b168 <__multiply+0x50>
 800b1b6:	f8b1 a000 	ldrh.w	sl, [r1]
 800b1ba:	f1ba 0f00 	cmp.w	sl, #0
 800b1be:	d024      	beq.n	800b20a <__multiply+0xf2>
 800b1c0:	f104 0e14 	add.w	lr, r4, #20
 800b1c4:	46a9      	mov	r9, r5
 800b1c6:	f04f 0c00 	mov.w	ip, #0
 800b1ca:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b1ce:	f8d9 3000 	ldr.w	r3, [r9]
 800b1d2:	fa1f fb87 	uxth.w	fp, r7
 800b1d6:	b29b      	uxth	r3, r3
 800b1d8:	fb0a 330b 	mla	r3, sl, fp, r3
 800b1dc:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800b1e0:	f8d9 7000 	ldr.w	r7, [r9]
 800b1e4:	4463      	add	r3, ip
 800b1e6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800b1ea:	fb0a c70b 	mla	r7, sl, fp, ip
 800b1ee:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800b1f2:	b29b      	uxth	r3, r3
 800b1f4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b1f8:	4572      	cmp	r2, lr
 800b1fa:	f849 3b04 	str.w	r3, [r9], #4
 800b1fe:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800b202:	d8e2      	bhi.n	800b1ca <__multiply+0xb2>
 800b204:	9b01      	ldr	r3, [sp, #4]
 800b206:	f845 c003 	str.w	ip, [r5, r3]
 800b20a:	9b03      	ldr	r3, [sp, #12]
 800b20c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800b210:	3104      	adds	r1, #4
 800b212:	f1b9 0f00 	cmp.w	r9, #0
 800b216:	d021      	beq.n	800b25c <__multiply+0x144>
 800b218:	682b      	ldr	r3, [r5, #0]
 800b21a:	f104 0c14 	add.w	ip, r4, #20
 800b21e:	46ae      	mov	lr, r5
 800b220:	f04f 0a00 	mov.w	sl, #0
 800b224:	f8bc b000 	ldrh.w	fp, [ip]
 800b228:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800b22c:	fb09 770b 	mla	r7, r9, fp, r7
 800b230:	4457      	add	r7, sl
 800b232:	b29b      	uxth	r3, r3
 800b234:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b238:	f84e 3b04 	str.w	r3, [lr], #4
 800b23c:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b240:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b244:	f8be 3000 	ldrh.w	r3, [lr]
 800b248:	fb09 330a 	mla	r3, r9, sl, r3
 800b24c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800b250:	4562      	cmp	r2, ip
 800b252:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b256:	d8e5      	bhi.n	800b224 <__multiply+0x10c>
 800b258:	9f01      	ldr	r7, [sp, #4]
 800b25a:	51eb      	str	r3, [r5, r7]
 800b25c:	3504      	adds	r5, #4
 800b25e:	e799      	b.n	800b194 <__multiply+0x7c>
 800b260:	3e01      	subs	r6, #1
 800b262:	e79b      	b.n	800b19c <__multiply+0x84>
 800b264:	0800e3bd 	.word	0x0800e3bd
 800b268:	0800e3ce 	.word	0x0800e3ce

0800b26c <__pow5mult>:
 800b26c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b270:	4615      	mov	r5, r2
 800b272:	f012 0203 	ands.w	r2, r2, #3
 800b276:	4607      	mov	r7, r0
 800b278:	460e      	mov	r6, r1
 800b27a:	d007      	beq.n	800b28c <__pow5mult+0x20>
 800b27c:	4c25      	ldr	r4, [pc, #148]	@ (800b314 <__pow5mult+0xa8>)
 800b27e:	3a01      	subs	r2, #1
 800b280:	2300      	movs	r3, #0
 800b282:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b286:	f7ff fe55 	bl	800af34 <__multadd>
 800b28a:	4606      	mov	r6, r0
 800b28c:	10ad      	asrs	r5, r5, #2
 800b28e:	d03d      	beq.n	800b30c <__pow5mult+0xa0>
 800b290:	69fc      	ldr	r4, [r7, #28]
 800b292:	b97c      	cbnz	r4, 800b2b4 <__pow5mult+0x48>
 800b294:	2010      	movs	r0, #16
 800b296:	f7ff fd35 	bl	800ad04 <malloc>
 800b29a:	4602      	mov	r2, r0
 800b29c:	61f8      	str	r0, [r7, #28]
 800b29e:	b928      	cbnz	r0, 800b2ac <__pow5mult+0x40>
 800b2a0:	4b1d      	ldr	r3, [pc, #116]	@ (800b318 <__pow5mult+0xac>)
 800b2a2:	481e      	ldr	r0, [pc, #120]	@ (800b31c <__pow5mult+0xb0>)
 800b2a4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800b2a8:	f001 fb6e 	bl	800c988 <__assert_func>
 800b2ac:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b2b0:	6004      	str	r4, [r0, #0]
 800b2b2:	60c4      	str	r4, [r0, #12]
 800b2b4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800b2b8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b2bc:	b94c      	cbnz	r4, 800b2d2 <__pow5mult+0x66>
 800b2be:	f240 2171 	movw	r1, #625	@ 0x271
 800b2c2:	4638      	mov	r0, r7
 800b2c4:	f7ff ff12 	bl	800b0ec <__i2b>
 800b2c8:	2300      	movs	r3, #0
 800b2ca:	f8c8 0008 	str.w	r0, [r8, #8]
 800b2ce:	4604      	mov	r4, r0
 800b2d0:	6003      	str	r3, [r0, #0]
 800b2d2:	f04f 0900 	mov.w	r9, #0
 800b2d6:	07eb      	lsls	r3, r5, #31
 800b2d8:	d50a      	bpl.n	800b2f0 <__pow5mult+0x84>
 800b2da:	4631      	mov	r1, r6
 800b2dc:	4622      	mov	r2, r4
 800b2de:	4638      	mov	r0, r7
 800b2e0:	f7ff ff1a 	bl	800b118 <__multiply>
 800b2e4:	4631      	mov	r1, r6
 800b2e6:	4680      	mov	r8, r0
 800b2e8:	4638      	mov	r0, r7
 800b2ea:	f7ff fe01 	bl	800aef0 <_Bfree>
 800b2ee:	4646      	mov	r6, r8
 800b2f0:	106d      	asrs	r5, r5, #1
 800b2f2:	d00b      	beq.n	800b30c <__pow5mult+0xa0>
 800b2f4:	6820      	ldr	r0, [r4, #0]
 800b2f6:	b938      	cbnz	r0, 800b308 <__pow5mult+0x9c>
 800b2f8:	4622      	mov	r2, r4
 800b2fa:	4621      	mov	r1, r4
 800b2fc:	4638      	mov	r0, r7
 800b2fe:	f7ff ff0b 	bl	800b118 <__multiply>
 800b302:	6020      	str	r0, [r4, #0]
 800b304:	f8c0 9000 	str.w	r9, [r0]
 800b308:	4604      	mov	r4, r0
 800b30a:	e7e4      	b.n	800b2d6 <__pow5mult+0x6a>
 800b30c:	4630      	mov	r0, r6
 800b30e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b312:	bf00      	nop
 800b314:	0800e428 	.word	0x0800e428
 800b318:	0800e34e 	.word	0x0800e34e
 800b31c:	0800e3ce 	.word	0x0800e3ce

0800b320 <__lshift>:
 800b320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b324:	460c      	mov	r4, r1
 800b326:	6849      	ldr	r1, [r1, #4]
 800b328:	6923      	ldr	r3, [r4, #16]
 800b32a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b32e:	68a3      	ldr	r3, [r4, #8]
 800b330:	4607      	mov	r7, r0
 800b332:	4691      	mov	r9, r2
 800b334:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b338:	f108 0601 	add.w	r6, r8, #1
 800b33c:	42b3      	cmp	r3, r6
 800b33e:	db0b      	blt.n	800b358 <__lshift+0x38>
 800b340:	4638      	mov	r0, r7
 800b342:	f7ff fd95 	bl	800ae70 <_Balloc>
 800b346:	4605      	mov	r5, r0
 800b348:	b948      	cbnz	r0, 800b35e <__lshift+0x3e>
 800b34a:	4602      	mov	r2, r0
 800b34c:	4b28      	ldr	r3, [pc, #160]	@ (800b3f0 <__lshift+0xd0>)
 800b34e:	4829      	ldr	r0, [pc, #164]	@ (800b3f4 <__lshift+0xd4>)
 800b350:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800b354:	f001 fb18 	bl	800c988 <__assert_func>
 800b358:	3101      	adds	r1, #1
 800b35a:	005b      	lsls	r3, r3, #1
 800b35c:	e7ee      	b.n	800b33c <__lshift+0x1c>
 800b35e:	2300      	movs	r3, #0
 800b360:	f100 0114 	add.w	r1, r0, #20
 800b364:	f100 0210 	add.w	r2, r0, #16
 800b368:	4618      	mov	r0, r3
 800b36a:	4553      	cmp	r3, sl
 800b36c:	db33      	blt.n	800b3d6 <__lshift+0xb6>
 800b36e:	6920      	ldr	r0, [r4, #16]
 800b370:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b374:	f104 0314 	add.w	r3, r4, #20
 800b378:	f019 091f 	ands.w	r9, r9, #31
 800b37c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b380:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b384:	d02b      	beq.n	800b3de <__lshift+0xbe>
 800b386:	f1c9 0e20 	rsb	lr, r9, #32
 800b38a:	468a      	mov	sl, r1
 800b38c:	2200      	movs	r2, #0
 800b38e:	6818      	ldr	r0, [r3, #0]
 800b390:	fa00 f009 	lsl.w	r0, r0, r9
 800b394:	4310      	orrs	r0, r2
 800b396:	f84a 0b04 	str.w	r0, [sl], #4
 800b39a:	f853 2b04 	ldr.w	r2, [r3], #4
 800b39e:	459c      	cmp	ip, r3
 800b3a0:	fa22 f20e 	lsr.w	r2, r2, lr
 800b3a4:	d8f3      	bhi.n	800b38e <__lshift+0x6e>
 800b3a6:	ebac 0304 	sub.w	r3, ip, r4
 800b3aa:	3b15      	subs	r3, #21
 800b3ac:	f023 0303 	bic.w	r3, r3, #3
 800b3b0:	3304      	adds	r3, #4
 800b3b2:	f104 0015 	add.w	r0, r4, #21
 800b3b6:	4584      	cmp	ip, r0
 800b3b8:	bf38      	it	cc
 800b3ba:	2304      	movcc	r3, #4
 800b3bc:	50ca      	str	r2, [r1, r3]
 800b3be:	b10a      	cbz	r2, 800b3c4 <__lshift+0xa4>
 800b3c0:	f108 0602 	add.w	r6, r8, #2
 800b3c4:	3e01      	subs	r6, #1
 800b3c6:	4638      	mov	r0, r7
 800b3c8:	612e      	str	r6, [r5, #16]
 800b3ca:	4621      	mov	r1, r4
 800b3cc:	f7ff fd90 	bl	800aef0 <_Bfree>
 800b3d0:	4628      	mov	r0, r5
 800b3d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b3d6:	f842 0f04 	str.w	r0, [r2, #4]!
 800b3da:	3301      	adds	r3, #1
 800b3dc:	e7c5      	b.n	800b36a <__lshift+0x4a>
 800b3de:	3904      	subs	r1, #4
 800b3e0:	f853 2b04 	ldr.w	r2, [r3], #4
 800b3e4:	f841 2f04 	str.w	r2, [r1, #4]!
 800b3e8:	459c      	cmp	ip, r3
 800b3ea:	d8f9      	bhi.n	800b3e0 <__lshift+0xc0>
 800b3ec:	e7ea      	b.n	800b3c4 <__lshift+0xa4>
 800b3ee:	bf00      	nop
 800b3f0:	0800e3bd 	.word	0x0800e3bd
 800b3f4:	0800e3ce 	.word	0x0800e3ce

0800b3f8 <__mcmp>:
 800b3f8:	690a      	ldr	r2, [r1, #16]
 800b3fa:	4603      	mov	r3, r0
 800b3fc:	6900      	ldr	r0, [r0, #16]
 800b3fe:	1a80      	subs	r0, r0, r2
 800b400:	b530      	push	{r4, r5, lr}
 800b402:	d10e      	bne.n	800b422 <__mcmp+0x2a>
 800b404:	3314      	adds	r3, #20
 800b406:	3114      	adds	r1, #20
 800b408:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b40c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b410:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b414:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b418:	4295      	cmp	r5, r2
 800b41a:	d003      	beq.n	800b424 <__mcmp+0x2c>
 800b41c:	d205      	bcs.n	800b42a <__mcmp+0x32>
 800b41e:	f04f 30ff 	mov.w	r0, #4294967295
 800b422:	bd30      	pop	{r4, r5, pc}
 800b424:	42a3      	cmp	r3, r4
 800b426:	d3f3      	bcc.n	800b410 <__mcmp+0x18>
 800b428:	e7fb      	b.n	800b422 <__mcmp+0x2a>
 800b42a:	2001      	movs	r0, #1
 800b42c:	e7f9      	b.n	800b422 <__mcmp+0x2a>
	...

0800b430 <__mdiff>:
 800b430:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b434:	4689      	mov	r9, r1
 800b436:	4606      	mov	r6, r0
 800b438:	4611      	mov	r1, r2
 800b43a:	4648      	mov	r0, r9
 800b43c:	4614      	mov	r4, r2
 800b43e:	f7ff ffdb 	bl	800b3f8 <__mcmp>
 800b442:	1e05      	subs	r5, r0, #0
 800b444:	d112      	bne.n	800b46c <__mdiff+0x3c>
 800b446:	4629      	mov	r1, r5
 800b448:	4630      	mov	r0, r6
 800b44a:	f7ff fd11 	bl	800ae70 <_Balloc>
 800b44e:	4602      	mov	r2, r0
 800b450:	b928      	cbnz	r0, 800b45e <__mdiff+0x2e>
 800b452:	4b3f      	ldr	r3, [pc, #252]	@ (800b550 <__mdiff+0x120>)
 800b454:	f240 2137 	movw	r1, #567	@ 0x237
 800b458:	483e      	ldr	r0, [pc, #248]	@ (800b554 <__mdiff+0x124>)
 800b45a:	f001 fa95 	bl	800c988 <__assert_func>
 800b45e:	2301      	movs	r3, #1
 800b460:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b464:	4610      	mov	r0, r2
 800b466:	b003      	add	sp, #12
 800b468:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b46c:	bfbc      	itt	lt
 800b46e:	464b      	movlt	r3, r9
 800b470:	46a1      	movlt	r9, r4
 800b472:	4630      	mov	r0, r6
 800b474:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800b478:	bfba      	itte	lt
 800b47a:	461c      	movlt	r4, r3
 800b47c:	2501      	movlt	r5, #1
 800b47e:	2500      	movge	r5, #0
 800b480:	f7ff fcf6 	bl	800ae70 <_Balloc>
 800b484:	4602      	mov	r2, r0
 800b486:	b918      	cbnz	r0, 800b490 <__mdiff+0x60>
 800b488:	4b31      	ldr	r3, [pc, #196]	@ (800b550 <__mdiff+0x120>)
 800b48a:	f240 2145 	movw	r1, #581	@ 0x245
 800b48e:	e7e3      	b.n	800b458 <__mdiff+0x28>
 800b490:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800b494:	6926      	ldr	r6, [r4, #16]
 800b496:	60c5      	str	r5, [r0, #12]
 800b498:	f109 0310 	add.w	r3, r9, #16
 800b49c:	f109 0514 	add.w	r5, r9, #20
 800b4a0:	f104 0e14 	add.w	lr, r4, #20
 800b4a4:	f100 0b14 	add.w	fp, r0, #20
 800b4a8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800b4ac:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800b4b0:	9301      	str	r3, [sp, #4]
 800b4b2:	46d9      	mov	r9, fp
 800b4b4:	f04f 0c00 	mov.w	ip, #0
 800b4b8:	9b01      	ldr	r3, [sp, #4]
 800b4ba:	f85e 0b04 	ldr.w	r0, [lr], #4
 800b4be:	f853 af04 	ldr.w	sl, [r3, #4]!
 800b4c2:	9301      	str	r3, [sp, #4]
 800b4c4:	fa1f f38a 	uxth.w	r3, sl
 800b4c8:	4619      	mov	r1, r3
 800b4ca:	b283      	uxth	r3, r0
 800b4cc:	1acb      	subs	r3, r1, r3
 800b4ce:	0c00      	lsrs	r0, r0, #16
 800b4d0:	4463      	add	r3, ip
 800b4d2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800b4d6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800b4da:	b29b      	uxth	r3, r3
 800b4dc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800b4e0:	4576      	cmp	r6, lr
 800b4e2:	f849 3b04 	str.w	r3, [r9], #4
 800b4e6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b4ea:	d8e5      	bhi.n	800b4b8 <__mdiff+0x88>
 800b4ec:	1b33      	subs	r3, r6, r4
 800b4ee:	3b15      	subs	r3, #21
 800b4f0:	f023 0303 	bic.w	r3, r3, #3
 800b4f4:	3415      	adds	r4, #21
 800b4f6:	3304      	adds	r3, #4
 800b4f8:	42a6      	cmp	r6, r4
 800b4fa:	bf38      	it	cc
 800b4fc:	2304      	movcc	r3, #4
 800b4fe:	441d      	add	r5, r3
 800b500:	445b      	add	r3, fp
 800b502:	461e      	mov	r6, r3
 800b504:	462c      	mov	r4, r5
 800b506:	4544      	cmp	r4, r8
 800b508:	d30e      	bcc.n	800b528 <__mdiff+0xf8>
 800b50a:	f108 0103 	add.w	r1, r8, #3
 800b50e:	1b49      	subs	r1, r1, r5
 800b510:	f021 0103 	bic.w	r1, r1, #3
 800b514:	3d03      	subs	r5, #3
 800b516:	45a8      	cmp	r8, r5
 800b518:	bf38      	it	cc
 800b51a:	2100      	movcc	r1, #0
 800b51c:	440b      	add	r3, r1
 800b51e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b522:	b191      	cbz	r1, 800b54a <__mdiff+0x11a>
 800b524:	6117      	str	r7, [r2, #16]
 800b526:	e79d      	b.n	800b464 <__mdiff+0x34>
 800b528:	f854 1b04 	ldr.w	r1, [r4], #4
 800b52c:	46e6      	mov	lr, ip
 800b52e:	0c08      	lsrs	r0, r1, #16
 800b530:	fa1c fc81 	uxtah	ip, ip, r1
 800b534:	4471      	add	r1, lr
 800b536:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800b53a:	b289      	uxth	r1, r1
 800b53c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800b540:	f846 1b04 	str.w	r1, [r6], #4
 800b544:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b548:	e7dd      	b.n	800b506 <__mdiff+0xd6>
 800b54a:	3f01      	subs	r7, #1
 800b54c:	e7e7      	b.n	800b51e <__mdiff+0xee>
 800b54e:	bf00      	nop
 800b550:	0800e3bd 	.word	0x0800e3bd
 800b554:	0800e3ce 	.word	0x0800e3ce

0800b558 <__ulp>:
 800b558:	b082      	sub	sp, #8
 800b55a:	ed8d 0b00 	vstr	d0, [sp]
 800b55e:	9a01      	ldr	r2, [sp, #4]
 800b560:	4b0f      	ldr	r3, [pc, #60]	@ (800b5a0 <__ulp+0x48>)
 800b562:	4013      	ands	r3, r2
 800b564:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800b568:	2b00      	cmp	r3, #0
 800b56a:	dc08      	bgt.n	800b57e <__ulp+0x26>
 800b56c:	425b      	negs	r3, r3
 800b56e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800b572:	ea4f 5223 	mov.w	r2, r3, asr #20
 800b576:	da04      	bge.n	800b582 <__ulp+0x2a>
 800b578:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800b57c:	4113      	asrs	r3, r2
 800b57e:	2200      	movs	r2, #0
 800b580:	e008      	b.n	800b594 <__ulp+0x3c>
 800b582:	f1a2 0314 	sub.w	r3, r2, #20
 800b586:	2b1e      	cmp	r3, #30
 800b588:	bfda      	itte	le
 800b58a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800b58e:	40da      	lsrle	r2, r3
 800b590:	2201      	movgt	r2, #1
 800b592:	2300      	movs	r3, #0
 800b594:	4619      	mov	r1, r3
 800b596:	4610      	mov	r0, r2
 800b598:	ec41 0b10 	vmov	d0, r0, r1
 800b59c:	b002      	add	sp, #8
 800b59e:	4770      	bx	lr
 800b5a0:	7ff00000 	.word	0x7ff00000

0800b5a4 <__b2d>:
 800b5a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b5a8:	6906      	ldr	r6, [r0, #16]
 800b5aa:	f100 0814 	add.w	r8, r0, #20
 800b5ae:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800b5b2:	1f37      	subs	r7, r6, #4
 800b5b4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800b5b8:	4610      	mov	r0, r2
 800b5ba:	f7ff fd4b 	bl	800b054 <__hi0bits>
 800b5be:	f1c0 0320 	rsb	r3, r0, #32
 800b5c2:	280a      	cmp	r0, #10
 800b5c4:	600b      	str	r3, [r1, #0]
 800b5c6:	491b      	ldr	r1, [pc, #108]	@ (800b634 <__b2d+0x90>)
 800b5c8:	dc15      	bgt.n	800b5f6 <__b2d+0x52>
 800b5ca:	f1c0 0c0b 	rsb	ip, r0, #11
 800b5ce:	fa22 f30c 	lsr.w	r3, r2, ip
 800b5d2:	45b8      	cmp	r8, r7
 800b5d4:	ea43 0501 	orr.w	r5, r3, r1
 800b5d8:	bf34      	ite	cc
 800b5da:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800b5de:	2300      	movcs	r3, #0
 800b5e0:	3015      	adds	r0, #21
 800b5e2:	fa02 f000 	lsl.w	r0, r2, r0
 800b5e6:	fa23 f30c 	lsr.w	r3, r3, ip
 800b5ea:	4303      	orrs	r3, r0
 800b5ec:	461c      	mov	r4, r3
 800b5ee:	ec45 4b10 	vmov	d0, r4, r5
 800b5f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b5f6:	45b8      	cmp	r8, r7
 800b5f8:	bf3a      	itte	cc
 800b5fa:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800b5fe:	f1a6 0708 	subcc.w	r7, r6, #8
 800b602:	2300      	movcs	r3, #0
 800b604:	380b      	subs	r0, #11
 800b606:	d012      	beq.n	800b62e <__b2d+0x8a>
 800b608:	f1c0 0120 	rsb	r1, r0, #32
 800b60c:	fa23 f401 	lsr.w	r4, r3, r1
 800b610:	4082      	lsls	r2, r0
 800b612:	4322      	orrs	r2, r4
 800b614:	4547      	cmp	r7, r8
 800b616:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800b61a:	bf8c      	ite	hi
 800b61c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800b620:	2200      	movls	r2, #0
 800b622:	4083      	lsls	r3, r0
 800b624:	40ca      	lsrs	r2, r1
 800b626:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800b62a:	4313      	orrs	r3, r2
 800b62c:	e7de      	b.n	800b5ec <__b2d+0x48>
 800b62e:	ea42 0501 	orr.w	r5, r2, r1
 800b632:	e7db      	b.n	800b5ec <__b2d+0x48>
 800b634:	3ff00000 	.word	0x3ff00000

0800b638 <__d2b>:
 800b638:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b63c:	460f      	mov	r7, r1
 800b63e:	2101      	movs	r1, #1
 800b640:	ec59 8b10 	vmov	r8, r9, d0
 800b644:	4616      	mov	r6, r2
 800b646:	f7ff fc13 	bl	800ae70 <_Balloc>
 800b64a:	4604      	mov	r4, r0
 800b64c:	b930      	cbnz	r0, 800b65c <__d2b+0x24>
 800b64e:	4602      	mov	r2, r0
 800b650:	4b23      	ldr	r3, [pc, #140]	@ (800b6e0 <__d2b+0xa8>)
 800b652:	4824      	ldr	r0, [pc, #144]	@ (800b6e4 <__d2b+0xac>)
 800b654:	f240 310f 	movw	r1, #783	@ 0x30f
 800b658:	f001 f996 	bl	800c988 <__assert_func>
 800b65c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b660:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b664:	b10d      	cbz	r5, 800b66a <__d2b+0x32>
 800b666:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b66a:	9301      	str	r3, [sp, #4]
 800b66c:	f1b8 0300 	subs.w	r3, r8, #0
 800b670:	d023      	beq.n	800b6ba <__d2b+0x82>
 800b672:	4668      	mov	r0, sp
 800b674:	9300      	str	r3, [sp, #0]
 800b676:	f7ff fd0c 	bl	800b092 <__lo0bits>
 800b67a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b67e:	b1d0      	cbz	r0, 800b6b6 <__d2b+0x7e>
 800b680:	f1c0 0320 	rsb	r3, r0, #32
 800b684:	fa02 f303 	lsl.w	r3, r2, r3
 800b688:	430b      	orrs	r3, r1
 800b68a:	40c2      	lsrs	r2, r0
 800b68c:	6163      	str	r3, [r4, #20]
 800b68e:	9201      	str	r2, [sp, #4]
 800b690:	9b01      	ldr	r3, [sp, #4]
 800b692:	61a3      	str	r3, [r4, #24]
 800b694:	2b00      	cmp	r3, #0
 800b696:	bf0c      	ite	eq
 800b698:	2201      	moveq	r2, #1
 800b69a:	2202      	movne	r2, #2
 800b69c:	6122      	str	r2, [r4, #16]
 800b69e:	b1a5      	cbz	r5, 800b6ca <__d2b+0x92>
 800b6a0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800b6a4:	4405      	add	r5, r0
 800b6a6:	603d      	str	r5, [r7, #0]
 800b6a8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800b6ac:	6030      	str	r0, [r6, #0]
 800b6ae:	4620      	mov	r0, r4
 800b6b0:	b003      	add	sp, #12
 800b6b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b6b6:	6161      	str	r1, [r4, #20]
 800b6b8:	e7ea      	b.n	800b690 <__d2b+0x58>
 800b6ba:	a801      	add	r0, sp, #4
 800b6bc:	f7ff fce9 	bl	800b092 <__lo0bits>
 800b6c0:	9b01      	ldr	r3, [sp, #4]
 800b6c2:	6163      	str	r3, [r4, #20]
 800b6c4:	3020      	adds	r0, #32
 800b6c6:	2201      	movs	r2, #1
 800b6c8:	e7e8      	b.n	800b69c <__d2b+0x64>
 800b6ca:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b6ce:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800b6d2:	6038      	str	r0, [r7, #0]
 800b6d4:	6918      	ldr	r0, [r3, #16]
 800b6d6:	f7ff fcbd 	bl	800b054 <__hi0bits>
 800b6da:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b6de:	e7e5      	b.n	800b6ac <__d2b+0x74>
 800b6e0:	0800e3bd 	.word	0x0800e3bd
 800b6e4:	0800e3ce 	.word	0x0800e3ce

0800b6e8 <__ratio>:
 800b6e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6ec:	b085      	sub	sp, #20
 800b6ee:	e9cd 1000 	strd	r1, r0, [sp]
 800b6f2:	a902      	add	r1, sp, #8
 800b6f4:	f7ff ff56 	bl	800b5a4 <__b2d>
 800b6f8:	9800      	ldr	r0, [sp, #0]
 800b6fa:	a903      	add	r1, sp, #12
 800b6fc:	ec55 4b10 	vmov	r4, r5, d0
 800b700:	f7ff ff50 	bl	800b5a4 <__b2d>
 800b704:	9b01      	ldr	r3, [sp, #4]
 800b706:	6919      	ldr	r1, [r3, #16]
 800b708:	9b00      	ldr	r3, [sp, #0]
 800b70a:	691b      	ldr	r3, [r3, #16]
 800b70c:	1ac9      	subs	r1, r1, r3
 800b70e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800b712:	1a9b      	subs	r3, r3, r2
 800b714:	ec5b ab10 	vmov	sl, fp, d0
 800b718:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	bfce      	itee	gt
 800b720:	462a      	movgt	r2, r5
 800b722:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b726:	465a      	movle	r2, fp
 800b728:	462f      	mov	r7, r5
 800b72a:	46d9      	mov	r9, fp
 800b72c:	bfcc      	ite	gt
 800b72e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800b732:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800b736:	464b      	mov	r3, r9
 800b738:	4652      	mov	r2, sl
 800b73a:	4620      	mov	r0, r4
 800b73c:	4639      	mov	r1, r7
 800b73e:	f7f5 f885 	bl	800084c <__aeabi_ddiv>
 800b742:	ec41 0b10 	vmov	d0, r0, r1
 800b746:	b005      	add	sp, #20
 800b748:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b74c <__copybits>:
 800b74c:	3901      	subs	r1, #1
 800b74e:	b570      	push	{r4, r5, r6, lr}
 800b750:	1149      	asrs	r1, r1, #5
 800b752:	6914      	ldr	r4, [r2, #16]
 800b754:	3101      	adds	r1, #1
 800b756:	f102 0314 	add.w	r3, r2, #20
 800b75a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b75e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b762:	1f05      	subs	r5, r0, #4
 800b764:	42a3      	cmp	r3, r4
 800b766:	d30c      	bcc.n	800b782 <__copybits+0x36>
 800b768:	1aa3      	subs	r3, r4, r2
 800b76a:	3b11      	subs	r3, #17
 800b76c:	f023 0303 	bic.w	r3, r3, #3
 800b770:	3211      	adds	r2, #17
 800b772:	42a2      	cmp	r2, r4
 800b774:	bf88      	it	hi
 800b776:	2300      	movhi	r3, #0
 800b778:	4418      	add	r0, r3
 800b77a:	2300      	movs	r3, #0
 800b77c:	4288      	cmp	r0, r1
 800b77e:	d305      	bcc.n	800b78c <__copybits+0x40>
 800b780:	bd70      	pop	{r4, r5, r6, pc}
 800b782:	f853 6b04 	ldr.w	r6, [r3], #4
 800b786:	f845 6f04 	str.w	r6, [r5, #4]!
 800b78a:	e7eb      	b.n	800b764 <__copybits+0x18>
 800b78c:	f840 3b04 	str.w	r3, [r0], #4
 800b790:	e7f4      	b.n	800b77c <__copybits+0x30>

0800b792 <__any_on>:
 800b792:	f100 0214 	add.w	r2, r0, #20
 800b796:	6900      	ldr	r0, [r0, #16]
 800b798:	114b      	asrs	r3, r1, #5
 800b79a:	4298      	cmp	r0, r3
 800b79c:	b510      	push	{r4, lr}
 800b79e:	db11      	blt.n	800b7c4 <__any_on+0x32>
 800b7a0:	dd0a      	ble.n	800b7b8 <__any_on+0x26>
 800b7a2:	f011 011f 	ands.w	r1, r1, #31
 800b7a6:	d007      	beq.n	800b7b8 <__any_on+0x26>
 800b7a8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b7ac:	fa24 f001 	lsr.w	r0, r4, r1
 800b7b0:	fa00 f101 	lsl.w	r1, r0, r1
 800b7b4:	428c      	cmp	r4, r1
 800b7b6:	d10b      	bne.n	800b7d0 <__any_on+0x3e>
 800b7b8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b7bc:	4293      	cmp	r3, r2
 800b7be:	d803      	bhi.n	800b7c8 <__any_on+0x36>
 800b7c0:	2000      	movs	r0, #0
 800b7c2:	bd10      	pop	{r4, pc}
 800b7c4:	4603      	mov	r3, r0
 800b7c6:	e7f7      	b.n	800b7b8 <__any_on+0x26>
 800b7c8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b7cc:	2900      	cmp	r1, #0
 800b7ce:	d0f5      	beq.n	800b7bc <__any_on+0x2a>
 800b7d0:	2001      	movs	r0, #1
 800b7d2:	e7f6      	b.n	800b7c2 <__any_on+0x30>

0800b7d4 <sulp>:
 800b7d4:	b570      	push	{r4, r5, r6, lr}
 800b7d6:	4604      	mov	r4, r0
 800b7d8:	460d      	mov	r5, r1
 800b7da:	ec45 4b10 	vmov	d0, r4, r5
 800b7de:	4616      	mov	r6, r2
 800b7e0:	f7ff feba 	bl	800b558 <__ulp>
 800b7e4:	ec51 0b10 	vmov	r0, r1, d0
 800b7e8:	b17e      	cbz	r6, 800b80a <sulp+0x36>
 800b7ea:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800b7ee:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	dd09      	ble.n	800b80a <sulp+0x36>
 800b7f6:	051b      	lsls	r3, r3, #20
 800b7f8:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800b7fc:	2400      	movs	r4, #0
 800b7fe:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800b802:	4622      	mov	r2, r4
 800b804:	462b      	mov	r3, r5
 800b806:	f7f4 fef7 	bl	80005f8 <__aeabi_dmul>
 800b80a:	ec41 0b10 	vmov	d0, r0, r1
 800b80e:	bd70      	pop	{r4, r5, r6, pc}

0800b810 <_strtod_l>:
 800b810:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b814:	b09f      	sub	sp, #124	@ 0x7c
 800b816:	460c      	mov	r4, r1
 800b818:	9217      	str	r2, [sp, #92]	@ 0x5c
 800b81a:	2200      	movs	r2, #0
 800b81c:	921a      	str	r2, [sp, #104]	@ 0x68
 800b81e:	9005      	str	r0, [sp, #20]
 800b820:	f04f 0a00 	mov.w	sl, #0
 800b824:	f04f 0b00 	mov.w	fp, #0
 800b828:	460a      	mov	r2, r1
 800b82a:	9219      	str	r2, [sp, #100]	@ 0x64
 800b82c:	7811      	ldrb	r1, [r2, #0]
 800b82e:	292b      	cmp	r1, #43	@ 0x2b
 800b830:	d04a      	beq.n	800b8c8 <_strtod_l+0xb8>
 800b832:	d838      	bhi.n	800b8a6 <_strtod_l+0x96>
 800b834:	290d      	cmp	r1, #13
 800b836:	d832      	bhi.n	800b89e <_strtod_l+0x8e>
 800b838:	2908      	cmp	r1, #8
 800b83a:	d832      	bhi.n	800b8a2 <_strtod_l+0x92>
 800b83c:	2900      	cmp	r1, #0
 800b83e:	d03b      	beq.n	800b8b8 <_strtod_l+0xa8>
 800b840:	2200      	movs	r2, #0
 800b842:	920b      	str	r2, [sp, #44]	@ 0x2c
 800b844:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800b846:	782a      	ldrb	r2, [r5, #0]
 800b848:	2a30      	cmp	r2, #48	@ 0x30
 800b84a:	f040 80b3 	bne.w	800b9b4 <_strtod_l+0x1a4>
 800b84e:	786a      	ldrb	r2, [r5, #1]
 800b850:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800b854:	2a58      	cmp	r2, #88	@ 0x58
 800b856:	d16e      	bne.n	800b936 <_strtod_l+0x126>
 800b858:	9302      	str	r3, [sp, #8]
 800b85a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b85c:	9301      	str	r3, [sp, #4]
 800b85e:	ab1a      	add	r3, sp, #104	@ 0x68
 800b860:	9300      	str	r3, [sp, #0]
 800b862:	4a8e      	ldr	r2, [pc, #568]	@ (800ba9c <_strtod_l+0x28c>)
 800b864:	9805      	ldr	r0, [sp, #20]
 800b866:	ab1b      	add	r3, sp, #108	@ 0x6c
 800b868:	a919      	add	r1, sp, #100	@ 0x64
 800b86a:	f001 f927 	bl	800cabc <__gethex>
 800b86e:	f010 060f 	ands.w	r6, r0, #15
 800b872:	4604      	mov	r4, r0
 800b874:	d005      	beq.n	800b882 <_strtod_l+0x72>
 800b876:	2e06      	cmp	r6, #6
 800b878:	d128      	bne.n	800b8cc <_strtod_l+0xbc>
 800b87a:	3501      	adds	r5, #1
 800b87c:	2300      	movs	r3, #0
 800b87e:	9519      	str	r5, [sp, #100]	@ 0x64
 800b880:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b882:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b884:	2b00      	cmp	r3, #0
 800b886:	f040 858e 	bne.w	800c3a6 <_strtod_l+0xb96>
 800b88a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b88c:	b1cb      	cbz	r3, 800b8c2 <_strtod_l+0xb2>
 800b88e:	4652      	mov	r2, sl
 800b890:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800b894:	ec43 2b10 	vmov	d0, r2, r3
 800b898:	b01f      	add	sp, #124	@ 0x7c
 800b89a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b89e:	2920      	cmp	r1, #32
 800b8a0:	d1ce      	bne.n	800b840 <_strtod_l+0x30>
 800b8a2:	3201      	adds	r2, #1
 800b8a4:	e7c1      	b.n	800b82a <_strtod_l+0x1a>
 800b8a6:	292d      	cmp	r1, #45	@ 0x2d
 800b8a8:	d1ca      	bne.n	800b840 <_strtod_l+0x30>
 800b8aa:	2101      	movs	r1, #1
 800b8ac:	910b      	str	r1, [sp, #44]	@ 0x2c
 800b8ae:	1c51      	adds	r1, r2, #1
 800b8b0:	9119      	str	r1, [sp, #100]	@ 0x64
 800b8b2:	7852      	ldrb	r2, [r2, #1]
 800b8b4:	2a00      	cmp	r2, #0
 800b8b6:	d1c5      	bne.n	800b844 <_strtod_l+0x34>
 800b8b8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b8ba:	9419      	str	r4, [sp, #100]	@ 0x64
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	f040 8570 	bne.w	800c3a2 <_strtod_l+0xb92>
 800b8c2:	4652      	mov	r2, sl
 800b8c4:	465b      	mov	r3, fp
 800b8c6:	e7e5      	b.n	800b894 <_strtod_l+0x84>
 800b8c8:	2100      	movs	r1, #0
 800b8ca:	e7ef      	b.n	800b8ac <_strtod_l+0x9c>
 800b8cc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800b8ce:	b13a      	cbz	r2, 800b8e0 <_strtod_l+0xd0>
 800b8d0:	2135      	movs	r1, #53	@ 0x35
 800b8d2:	a81c      	add	r0, sp, #112	@ 0x70
 800b8d4:	f7ff ff3a 	bl	800b74c <__copybits>
 800b8d8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b8da:	9805      	ldr	r0, [sp, #20]
 800b8dc:	f7ff fb08 	bl	800aef0 <_Bfree>
 800b8e0:	3e01      	subs	r6, #1
 800b8e2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800b8e4:	2e04      	cmp	r6, #4
 800b8e6:	d806      	bhi.n	800b8f6 <_strtod_l+0xe6>
 800b8e8:	e8df f006 	tbb	[pc, r6]
 800b8ec:	201d0314 	.word	0x201d0314
 800b8f0:	14          	.byte	0x14
 800b8f1:	00          	.byte	0x00
 800b8f2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800b8f6:	05e1      	lsls	r1, r4, #23
 800b8f8:	bf48      	it	mi
 800b8fa:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800b8fe:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b902:	0d1b      	lsrs	r3, r3, #20
 800b904:	051b      	lsls	r3, r3, #20
 800b906:	2b00      	cmp	r3, #0
 800b908:	d1bb      	bne.n	800b882 <_strtod_l+0x72>
 800b90a:	f7fe fb31 	bl	8009f70 <__errno>
 800b90e:	2322      	movs	r3, #34	@ 0x22
 800b910:	6003      	str	r3, [r0, #0]
 800b912:	e7b6      	b.n	800b882 <_strtod_l+0x72>
 800b914:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800b918:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800b91c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800b920:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800b924:	e7e7      	b.n	800b8f6 <_strtod_l+0xe6>
 800b926:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800baa4 <_strtod_l+0x294>
 800b92a:	e7e4      	b.n	800b8f6 <_strtod_l+0xe6>
 800b92c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800b930:	f04f 3aff 	mov.w	sl, #4294967295
 800b934:	e7df      	b.n	800b8f6 <_strtod_l+0xe6>
 800b936:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b938:	1c5a      	adds	r2, r3, #1
 800b93a:	9219      	str	r2, [sp, #100]	@ 0x64
 800b93c:	785b      	ldrb	r3, [r3, #1]
 800b93e:	2b30      	cmp	r3, #48	@ 0x30
 800b940:	d0f9      	beq.n	800b936 <_strtod_l+0x126>
 800b942:	2b00      	cmp	r3, #0
 800b944:	d09d      	beq.n	800b882 <_strtod_l+0x72>
 800b946:	2301      	movs	r3, #1
 800b948:	9309      	str	r3, [sp, #36]	@ 0x24
 800b94a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b94c:	930c      	str	r3, [sp, #48]	@ 0x30
 800b94e:	2300      	movs	r3, #0
 800b950:	9308      	str	r3, [sp, #32]
 800b952:	930a      	str	r3, [sp, #40]	@ 0x28
 800b954:	461f      	mov	r7, r3
 800b956:	220a      	movs	r2, #10
 800b958:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800b95a:	7805      	ldrb	r5, [r0, #0]
 800b95c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800b960:	b2d9      	uxtb	r1, r3
 800b962:	2909      	cmp	r1, #9
 800b964:	d928      	bls.n	800b9b8 <_strtod_l+0x1a8>
 800b966:	494e      	ldr	r1, [pc, #312]	@ (800baa0 <_strtod_l+0x290>)
 800b968:	2201      	movs	r2, #1
 800b96a:	f000 ffd5 	bl	800c918 <strncmp>
 800b96e:	2800      	cmp	r0, #0
 800b970:	d032      	beq.n	800b9d8 <_strtod_l+0x1c8>
 800b972:	2000      	movs	r0, #0
 800b974:	462a      	mov	r2, r5
 800b976:	4681      	mov	r9, r0
 800b978:	463d      	mov	r5, r7
 800b97a:	4603      	mov	r3, r0
 800b97c:	2a65      	cmp	r2, #101	@ 0x65
 800b97e:	d001      	beq.n	800b984 <_strtod_l+0x174>
 800b980:	2a45      	cmp	r2, #69	@ 0x45
 800b982:	d114      	bne.n	800b9ae <_strtod_l+0x19e>
 800b984:	b91d      	cbnz	r5, 800b98e <_strtod_l+0x17e>
 800b986:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b988:	4302      	orrs	r2, r0
 800b98a:	d095      	beq.n	800b8b8 <_strtod_l+0xa8>
 800b98c:	2500      	movs	r5, #0
 800b98e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800b990:	1c62      	adds	r2, r4, #1
 800b992:	9219      	str	r2, [sp, #100]	@ 0x64
 800b994:	7862      	ldrb	r2, [r4, #1]
 800b996:	2a2b      	cmp	r2, #43	@ 0x2b
 800b998:	d077      	beq.n	800ba8a <_strtod_l+0x27a>
 800b99a:	2a2d      	cmp	r2, #45	@ 0x2d
 800b99c:	d07b      	beq.n	800ba96 <_strtod_l+0x286>
 800b99e:	f04f 0c00 	mov.w	ip, #0
 800b9a2:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800b9a6:	2909      	cmp	r1, #9
 800b9a8:	f240 8082 	bls.w	800bab0 <_strtod_l+0x2a0>
 800b9ac:	9419      	str	r4, [sp, #100]	@ 0x64
 800b9ae:	f04f 0800 	mov.w	r8, #0
 800b9b2:	e0a2      	b.n	800bafa <_strtod_l+0x2ea>
 800b9b4:	2300      	movs	r3, #0
 800b9b6:	e7c7      	b.n	800b948 <_strtod_l+0x138>
 800b9b8:	2f08      	cmp	r7, #8
 800b9ba:	bfd5      	itete	le
 800b9bc:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800b9be:	9908      	ldrgt	r1, [sp, #32]
 800b9c0:	fb02 3301 	mlale	r3, r2, r1, r3
 800b9c4:	fb02 3301 	mlagt	r3, r2, r1, r3
 800b9c8:	f100 0001 	add.w	r0, r0, #1
 800b9cc:	bfd4      	ite	le
 800b9ce:	930a      	strle	r3, [sp, #40]	@ 0x28
 800b9d0:	9308      	strgt	r3, [sp, #32]
 800b9d2:	3701      	adds	r7, #1
 800b9d4:	9019      	str	r0, [sp, #100]	@ 0x64
 800b9d6:	e7bf      	b.n	800b958 <_strtod_l+0x148>
 800b9d8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b9da:	1c5a      	adds	r2, r3, #1
 800b9dc:	9219      	str	r2, [sp, #100]	@ 0x64
 800b9de:	785a      	ldrb	r2, [r3, #1]
 800b9e0:	b37f      	cbz	r7, 800ba42 <_strtod_l+0x232>
 800b9e2:	4681      	mov	r9, r0
 800b9e4:	463d      	mov	r5, r7
 800b9e6:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800b9ea:	2b09      	cmp	r3, #9
 800b9ec:	d912      	bls.n	800ba14 <_strtod_l+0x204>
 800b9ee:	2301      	movs	r3, #1
 800b9f0:	e7c4      	b.n	800b97c <_strtod_l+0x16c>
 800b9f2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b9f4:	1c5a      	adds	r2, r3, #1
 800b9f6:	9219      	str	r2, [sp, #100]	@ 0x64
 800b9f8:	785a      	ldrb	r2, [r3, #1]
 800b9fa:	3001      	adds	r0, #1
 800b9fc:	2a30      	cmp	r2, #48	@ 0x30
 800b9fe:	d0f8      	beq.n	800b9f2 <_strtod_l+0x1e2>
 800ba00:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800ba04:	2b08      	cmp	r3, #8
 800ba06:	f200 84d3 	bhi.w	800c3b0 <_strtod_l+0xba0>
 800ba0a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ba0c:	930c      	str	r3, [sp, #48]	@ 0x30
 800ba0e:	4681      	mov	r9, r0
 800ba10:	2000      	movs	r0, #0
 800ba12:	4605      	mov	r5, r0
 800ba14:	3a30      	subs	r2, #48	@ 0x30
 800ba16:	f100 0301 	add.w	r3, r0, #1
 800ba1a:	d02a      	beq.n	800ba72 <_strtod_l+0x262>
 800ba1c:	4499      	add	r9, r3
 800ba1e:	eb00 0c05 	add.w	ip, r0, r5
 800ba22:	462b      	mov	r3, r5
 800ba24:	210a      	movs	r1, #10
 800ba26:	4563      	cmp	r3, ip
 800ba28:	d10d      	bne.n	800ba46 <_strtod_l+0x236>
 800ba2a:	1c69      	adds	r1, r5, #1
 800ba2c:	4401      	add	r1, r0
 800ba2e:	4428      	add	r0, r5
 800ba30:	2808      	cmp	r0, #8
 800ba32:	dc16      	bgt.n	800ba62 <_strtod_l+0x252>
 800ba34:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800ba36:	230a      	movs	r3, #10
 800ba38:	fb03 2300 	mla	r3, r3, r0, r2
 800ba3c:	930a      	str	r3, [sp, #40]	@ 0x28
 800ba3e:	2300      	movs	r3, #0
 800ba40:	e018      	b.n	800ba74 <_strtod_l+0x264>
 800ba42:	4638      	mov	r0, r7
 800ba44:	e7da      	b.n	800b9fc <_strtod_l+0x1ec>
 800ba46:	2b08      	cmp	r3, #8
 800ba48:	f103 0301 	add.w	r3, r3, #1
 800ba4c:	dc03      	bgt.n	800ba56 <_strtod_l+0x246>
 800ba4e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800ba50:	434e      	muls	r6, r1
 800ba52:	960a      	str	r6, [sp, #40]	@ 0x28
 800ba54:	e7e7      	b.n	800ba26 <_strtod_l+0x216>
 800ba56:	2b10      	cmp	r3, #16
 800ba58:	bfde      	ittt	le
 800ba5a:	9e08      	ldrle	r6, [sp, #32]
 800ba5c:	434e      	mulle	r6, r1
 800ba5e:	9608      	strle	r6, [sp, #32]
 800ba60:	e7e1      	b.n	800ba26 <_strtod_l+0x216>
 800ba62:	280f      	cmp	r0, #15
 800ba64:	dceb      	bgt.n	800ba3e <_strtod_l+0x22e>
 800ba66:	9808      	ldr	r0, [sp, #32]
 800ba68:	230a      	movs	r3, #10
 800ba6a:	fb03 2300 	mla	r3, r3, r0, r2
 800ba6e:	9308      	str	r3, [sp, #32]
 800ba70:	e7e5      	b.n	800ba3e <_strtod_l+0x22e>
 800ba72:	4629      	mov	r1, r5
 800ba74:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ba76:	1c50      	adds	r0, r2, #1
 800ba78:	9019      	str	r0, [sp, #100]	@ 0x64
 800ba7a:	7852      	ldrb	r2, [r2, #1]
 800ba7c:	4618      	mov	r0, r3
 800ba7e:	460d      	mov	r5, r1
 800ba80:	e7b1      	b.n	800b9e6 <_strtod_l+0x1d6>
 800ba82:	f04f 0900 	mov.w	r9, #0
 800ba86:	2301      	movs	r3, #1
 800ba88:	e77d      	b.n	800b986 <_strtod_l+0x176>
 800ba8a:	f04f 0c00 	mov.w	ip, #0
 800ba8e:	1ca2      	adds	r2, r4, #2
 800ba90:	9219      	str	r2, [sp, #100]	@ 0x64
 800ba92:	78a2      	ldrb	r2, [r4, #2]
 800ba94:	e785      	b.n	800b9a2 <_strtod_l+0x192>
 800ba96:	f04f 0c01 	mov.w	ip, #1
 800ba9a:	e7f8      	b.n	800ba8e <_strtod_l+0x27e>
 800ba9c:	0800e540 	.word	0x0800e540
 800baa0:	0800e528 	.word	0x0800e528
 800baa4:	7ff00000 	.word	0x7ff00000
 800baa8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800baaa:	1c51      	adds	r1, r2, #1
 800baac:	9119      	str	r1, [sp, #100]	@ 0x64
 800baae:	7852      	ldrb	r2, [r2, #1]
 800bab0:	2a30      	cmp	r2, #48	@ 0x30
 800bab2:	d0f9      	beq.n	800baa8 <_strtod_l+0x298>
 800bab4:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800bab8:	2908      	cmp	r1, #8
 800baba:	f63f af78 	bhi.w	800b9ae <_strtod_l+0x19e>
 800babe:	3a30      	subs	r2, #48	@ 0x30
 800bac0:	920e      	str	r2, [sp, #56]	@ 0x38
 800bac2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800bac4:	920f      	str	r2, [sp, #60]	@ 0x3c
 800bac6:	f04f 080a 	mov.w	r8, #10
 800baca:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800bacc:	1c56      	adds	r6, r2, #1
 800bace:	9619      	str	r6, [sp, #100]	@ 0x64
 800bad0:	7852      	ldrb	r2, [r2, #1]
 800bad2:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800bad6:	f1be 0f09 	cmp.w	lr, #9
 800bada:	d939      	bls.n	800bb50 <_strtod_l+0x340>
 800badc:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800bade:	1a76      	subs	r6, r6, r1
 800bae0:	2e08      	cmp	r6, #8
 800bae2:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800bae6:	dc03      	bgt.n	800baf0 <_strtod_l+0x2e0>
 800bae8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800baea:	4588      	cmp	r8, r1
 800baec:	bfa8      	it	ge
 800baee:	4688      	movge	r8, r1
 800baf0:	f1bc 0f00 	cmp.w	ip, #0
 800baf4:	d001      	beq.n	800bafa <_strtod_l+0x2ea>
 800baf6:	f1c8 0800 	rsb	r8, r8, #0
 800bafa:	2d00      	cmp	r5, #0
 800bafc:	d14e      	bne.n	800bb9c <_strtod_l+0x38c>
 800bafe:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800bb00:	4308      	orrs	r0, r1
 800bb02:	f47f aebe 	bne.w	800b882 <_strtod_l+0x72>
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	f47f aed6 	bne.w	800b8b8 <_strtod_l+0xa8>
 800bb0c:	2a69      	cmp	r2, #105	@ 0x69
 800bb0e:	d028      	beq.n	800bb62 <_strtod_l+0x352>
 800bb10:	dc25      	bgt.n	800bb5e <_strtod_l+0x34e>
 800bb12:	2a49      	cmp	r2, #73	@ 0x49
 800bb14:	d025      	beq.n	800bb62 <_strtod_l+0x352>
 800bb16:	2a4e      	cmp	r2, #78	@ 0x4e
 800bb18:	f47f aece 	bne.w	800b8b8 <_strtod_l+0xa8>
 800bb1c:	499b      	ldr	r1, [pc, #620]	@ (800bd8c <_strtod_l+0x57c>)
 800bb1e:	a819      	add	r0, sp, #100	@ 0x64
 800bb20:	f001 f9ee 	bl	800cf00 <__match>
 800bb24:	2800      	cmp	r0, #0
 800bb26:	f43f aec7 	beq.w	800b8b8 <_strtod_l+0xa8>
 800bb2a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800bb2c:	781b      	ldrb	r3, [r3, #0]
 800bb2e:	2b28      	cmp	r3, #40	@ 0x28
 800bb30:	d12e      	bne.n	800bb90 <_strtod_l+0x380>
 800bb32:	4997      	ldr	r1, [pc, #604]	@ (800bd90 <_strtod_l+0x580>)
 800bb34:	aa1c      	add	r2, sp, #112	@ 0x70
 800bb36:	a819      	add	r0, sp, #100	@ 0x64
 800bb38:	f001 f9f6 	bl	800cf28 <__hexnan>
 800bb3c:	2805      	cmp	r0, #5
 800bb3e:	d127      	bne.n	800bb90 <_strtod_l+0x380>
 800bb40:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800bb42:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800bb46:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800bb4a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800bb4e:	e698      	b.n	800b882 <_strtod_l+0x72>
 800bb50:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800bb52:	fb08 2101 	mla	r1, r8, r1, r2
 800bb56:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800bb5a:	920e      	str	r2, [sp, #56]	@ 0x38
 800bb5c:	e7b5      	b.n	800baca <_strtod_l+0x2ba>
 800bb5e:	2a6e      	cmp	r2, #110	@ 0x6e
 800bb60:	e7da      	b.n	800bb18 <_strtod_l+0x308>
 800bb62:	498c      	ldr	r1, [pc, #560]	@ (800bd94 <_strtod_l+0x584>)
 800bb64:	a819      	add	r0, sp, #100	@ 0x64
 800bb66:	f001 f9cb 	bl	800cf00 <__match>
 800bb6a:	2800      	cmp	r0, #0
 800bb6c:	f43f aea4 	beq.w	800b8b8 <_strtod_l+0xa8>
 800bb70:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800bb72:	4989      	ldr	r1, [pc, #548]	@ (800bd98 <_strtod_l+0x588>)
 800bb74:	3b01      	subs	r3, #1
 800bb76:	a819      	add	r0, sp, #100	@ 0x64
 800bb78:	9319      	str	r3, [sp, #100]	@ 0x64
 800bb7a:	f001 f9c1 	bl	800cf00 <__match>
 800bb7e:	b910      	cbnz	r0, 800bb86 <_strtod_l+0x376>
 800bb80:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800bb82:	3301      	adds	r3, #1
 800bb84:	9319      	str	r3, [sp, #100]	@ 0x64
 800bb86:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800bda8 <_strtod_l+0x598>
 800bb8a:	f04f 0a00 	mov.w	sl, #0
 800bb8e:	e678      	b.n	800b882 <_strtod_l+0x72>
 800bb90:	4882      	ldr	r0, [pc, #520]	@ (800bd9c <_strtod_l+0x58c>)
 800bb92:	f000 fef1 	bl	800c978 <nan>
 800bb96:	ec5b ab10 	vmov	sl, fp, d0
 800bb9a:	e672      	b.n	800b882 <_strtod_l+0x72>
 800bb9c:	eba8 0309 	sub.w	r3, r8, r9
 800bba0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800bba2:	9309      	str	r3, [sp, #36]	@ 0x24
 800bba4:	2f00      	cmp	r7, #0
 800bba6:	bf08      	it	eq
 800bba8:	462f      	moveq	r7, r5
 800bbaa:	2d10      	cmp	r5, #16
 800bbac:	462c      	mov	r4, r5
 800bbae:	bfa8      	it	ge
 800bbb0:	2410      	movge	r4, #16
 800bbb2:	f7f4 fca7 	bl	8000504 <__aeabi_ui2d>
 800bbb6:	2d09      	cmp	r5, #9
 800bbb8:	4682      	mov	sl, r0
 800bbba:	468b      	mov	fp, r1
 800bbbc:	dc13      	bgt.n	800bbe6 <_strtod_l+0x3d6>
 800bbbe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	f43f ae5e 	beq.w	800b882 <_strtod_l+0x72>
 800bbc6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bbc8:	dd78      	ble.n	800bcbc <_strtod_l+0x4ac>
 800bbca:	2b16      	cmp	r3, #22
 800bbcc:	dc5f      	bgt.n	800bc8e <_strtod_l+0x47e>
 800bbce:	4974      	ldr	r1, [pc, #464]	@ (800bda0 <_strtod_l+0x590>)
 800bbd0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800bbd4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bbd8:	4652      	mov	r2, sl
 800bbda:	465b      	mov	r3, fp
 800bbdc:	f7f4 fd0c 	bl	80005f8 <__aeabi_dmul>
 800bbe0:	4682      	mov	sl, r0
 800bbe2:	468b      	mov	fp, r1
 800bbe4:	e64d      	b.n	800b882 <_strtod_l+0x72>
 800bbe6:	4b6e      	ldr	r3, [pc, #440]	@ (800bda0 <_strtod_l+0x590>)
 800bbe8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800bbec:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800bbf0:	f7f4 fd02 	bl	80005f8 <__aeabi_dmul>
 800bbf4:	4682      	mov	sl, r0
 800bbf6:	9808      	ldr	r0, [sp, #32]
 800bbf8:	468b      	mov	fp, r1
 800bbfa:	f7f4 fc83 	bl	8000504 <__aeabi_ui2d>
 800bbfe:	4602      	mov	r2, r0
 800bc00:	460b      	mov	r3, r1
 800bc02:	4650      	mov	r0, sl
 800bc04:	4659      	mov	r1, fp
 800bc06:	f7f4 fb41 	bl	800028c <__adddf3>
 800bc0a:	2d0f      	cmp	r5, #15
 800bc0c:	4682      	mov	sl, r0
 800bc0e:	468b      	mov	fp, r1
 800bc10:	ddd5      	ble.n	800bbbe <_strtod_l+0x3ae>
 800bc12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bc14:	1b2c      	subs	r4, r5, r4
 800bc16:	441c      	add	r4, r3
 800bc18:	2c00      	cmp	r4, #0
 800bc1a:	f340 8096 	ble.w	800bd4a <_strtod_l+0x53a>
 800bc1e:	f014 030f 	ands.w	r3, r4, #15
 800bc22:	d00a      	beq.n	800bc3a <_strtod_l+0x42a>
 800bc24:	495e      	ldr	r1, [pc, #376]	@ (800bda0 <_strtod_l+0x590>)
 800bc26:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800bc2a:	4652      	mov	r2, sl
 800bc2c:	465b      	mov	r3, fp
 800bc2e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bc32:	f7f4 fce1 	bl	80005f8 <__aeabi_dmul>
 800bc36:	4682      	mov	sl, r0
 800bc38:	468b      	mov	fp, r1
 800bc3a:	f034 040f 	bics.w	r4, r4, #15
 800bc3e:	d073      	beq.n	800bd28 <_strtod_l+0x518>
 800bc40:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800bc44:	dd48      	ble.n	800bcd8 <_strtod_l+0x4c8>
 800bc46:	2400      	movs	r4, #0
 800bc48:	46a0      	mov	r8, r4
 800bc4a:	940a      	str	r4, [sp, #40]	@ 0x28
 800bc4c:	46a1      	mov	r9, r4
 800bc4e:	9a05      	ldr	r2, [sp, #20]
 800bc50:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800bda8 <_strtod_l+0x598>
 800bc54:	2322      	movs	r3, #34	@ 0x22
 800bc56:	6013      	str	r3, [r2, #0]
 800bc58:	f04f 0a00 	mov.w	sl, #0
 800bc5c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	f43f ae0f 	beq.w	800b882 <_strtod_l+0x72>
 800bc64:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800bc66:	9805      	ldr	r0, [sp, #20]
 800bc68:	f7ff f942 	bl	800aef0 <_Bfree>
 800bc6c:	9805      	ldr	r0, [sp, #20]
 800bc6e:	4649      	mov	r1, r9
 800bc70:	f7ff f93e 	bl	800aef0 <_Bfree>
 800bc74:	9805      	ldr	r0, [sp, #20]
 800bc76:	4641      	mov	r1, r8
 800bc78:	f7ff f93a 	bl	800aef0 <_Bfree>
 800bc7c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800bc7e:	9805      	ldr	r0, [sp, #20]
 800bc80:	f7ff f936 	bl	800aef0 <_Bfree>
 800bc84:	9805      	ldr	r0, [sp, #20]
 800bc86:	4621      	mov	r1, r4
 800bc88:	f7ff f932 	bl	800aef0 <_Bfree>
 800bc8c:	e5f9      	b.n	800b882 <_strtod_l+0x72>
 800bc8e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bc90:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800bc94:	4293      	cmp	r3, r2
 800bc96:	dbbc      	blt.n	800bc12 <_strtod_l+0x402>
 800bc98:	4c41      	ldr	r4, [pc, #260]	@ (800bda0 <_strtod_l+0x590>)
 800bc9a:	f1c5 050f 	rsb	r5, r5, #15
 800bc9e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800bca2:	4652      	mov	r2, sl
 800bca4:	465b      	mov	r3, fp
 800bca6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bcaa:	f7f4 fca5 	bl	80005f8 <__aeabi_dmul>
 800bcae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bcb0:	1b5d      	subs	r5, r3, r5
 800bcb2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800bcb6:	e9d4 2300 	ldrd	r2, r3, [r4]
 800bcba:	e78f      	b.n	800bbdc <_strtod_l+0x3cc>
 800bcbc:	3316      	adds	r3, #22
 800bcbe:	dba8      	blt.n	800bc12 <_strtod_l+0x402>
 800bcc0:	4b37      	ldr	r3, [pc, #220]	@ (800bda0 <_strtod_l+0x590>)
 800bcc2:	eba9 0808 	sub.w	r8, r9, r8
 800bcc6:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800bcca:	e9d8 2300 	ldrd	r2, r3, [r8]
 800bcce:	4650      	mov	r0, sl
 800bcd0:	4659      	mov	r1, fp
 800bcd2:	f7f4 fdbb 	bl	800084c <__aeabi_ddiv>
 800bcd6:	e783      	b.n	800bbe0 <_strtod_l+0x3d0>
 800bcd8:	4b32      	ldr	r3, [pc, #200]	@ (800bda4 <_strtod_l+0x594>)
 800bcda:	9308      	str	r3, [sp, #32]
 800bcdc:	2300      	movs	r3, #0
 800bcde:	1124      	asrs	r4, r4, #4
 800bce0:	4650      	mov	r0, sl
 800bce2:	4659      	mov	r1, fp
 800bce4:	461e      	mov	r6, r3
 800bce6:	2c01      	cmp	r4, #1
 800bce8:	dc21      	bgt.n	800bd2e <_strtod_l+0x51e>
 800bcea:	b10b      	cbz	r3, 800bcf0 <_strtod_l+0x4e0>
 800bcec:	4682      	mov	sl, r0
 800bcee:	468b      	mov	fp, r1
 800bcf0:	492c      	ldr	r1, [pc, #176]	@ (800bda4 <_strtod_l+0x594>)
 800bcf2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800bcf6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800bcfa:	4652      	mov	r2, sl
 800bcfc:	465b      	mov	r3, fp
 800bcfe:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bd02:	f7f4 fc79 	bl	80005f8 <__aeabi_dmul>
 800bd06:	4b28      	ldr	r3, [pc, #160]	@ (800bda8 <_strtod_l+0x598>)
 800bd08:	460a      	mov	r2, r1
 800bd0a:	400b      	ands	r3, r1
 800bd0c:	4927      	ldr	r1, [pc, #156]	@ (800bdac <_strtod_l+0x59c>)
 800bd0e:	428b      	cmp	r3, r1
 800bd10:	4682      	mov	sl, r0
 800bd12:	d898      	bhi.n	800bc46 <_strtod_l+0x436>
 800bd14:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800bd18:	428b      	cmp	r3, r1
 800bd1a:	bf86      	itte	hi
 800bd1c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800bdb0 <_strtod_l+0x5a0>
 800bd20:	f04f 3aff 	movhi.w	sl, #4294967295
 800bd24:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800bd28:	2300      	movs	r3, #0
 800bd2a:	9308      	str	r3, [sp, #32]
 800bd2c:	e07a      	b.n	800be24 <_strtod_l+0x614>
 800bd2e:	07e2      	lsls	r2, r4, #31
 800bd30:	d505      	bpl.n	800bd3e <_strtod_l+0x52e>
 800bd32:	9b08      	ldr	r3, [sp, #32]
 800bd34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd38:	f7f4 fc5e 	bl	80005f8 <__aeabi_dmul>
 800bd3c:	2301      	movs	r3, #1
 800bd3e:	9a08      	ldr	r2, [sp, #32]
 800bd40:	3208      	adds	r2, #8
 800bd42:	3601      	adds	r6, #1
 800bd44:	1064      	asrs	r4, r4, #1
 800bd46:	9208      	str	r2, [sp, #32]
 800bd48:	e7cd      	b.n	800bce6 <_strtod_l+0x4d6>
 800bd4a:	d0ed      	beq.n	800bd28 <_strtod_l+0x518>
 800bd4c:	4264      	negs	r4, r4
 800bd4e:	f014 020f 	ands.w	r2, r4, #15
 800bd52:	d00a      	beq.n	800bd6a <_strtod_l+0x55a>
 800bd54:	4b12      	ldr	r3, [pc, #72]	@ (800bda0 <_strtod_l+0x590>)
 800bd56:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bd5a:	4650      	mov	r0, sl
 800bd5c:	4659      	mov	r1, fp
 800bd5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd62:	f7f4 fd73 	bl	800084c <__aeabi_ddiv>
 800bd66:	4682      	mov	sl, r0
 800bd68:	468b      	mov	fp, r1
 800bd6a:	1124      	asrs	r4, r4, #4
 800bd6c:	d0dc      	beq.n	800bd28 <_strtod_l+0x518>
 800bd6e:	2c1f      	cmp	r4, #31
 800bd70:	dd20      	ble.n	800bdb4 <_strtod_l+0x5a4>
 800bd72:	2400      	movs	r4, #0
 800bd74:	46a0      	mov	r8, r4
 800bd76:	940a      	str	r4, [sp, #40]	@ 0x28
 800bd78:	46a1      	mov	r9, r4
 800bd7a:	9a05      	ldr	r2, [sp, #20]
 800bd7c:	2322      	movs	r3, #34	@ 0x22
 800bd7e:	f04f 0a00 	mov.w	sl, #0
 800bd82:	f04f 0b00 	mov.w	fp, #0
 800bd86:	6013      	str	r3, [r2, #0]
 800bd88:	e768      	b.n	800bc5c <_strtod_l+0x44c>
 800bd8a:	bf00      	nop
 800bd8c:	0800e315 	.word	0x0800e315
 800bd90:	0800e52c 	.word	0x0800e52c
 800bd94:	0800e30d 	.word	0x0800e30d
 800bd98:	0800e344 	.word	0x0800e344
 800bd9c:	0800e6d5 	.word	0x0800e6d5
 800bda0:	0800e460 	.word	0x0800e460
 800bda4:	0800e438 	.word	0x0800e438
 800bda8:	7ff00000 	.word	0x7ff00000
 800bdac:	7ca00000 	.word	0x7ca00000
 800bdb0:	7fefffff 	.word	0x7fefffff
 800bdb4:	f014 0310 	ands.w	r3, r4, #16
 800bdb8:	bf18      	it	ne
 800bdba:	236a      	movne	r3, #106	@ 0x6a
 800bdbc:	4ea9      	ldr	r6, [pc, #676]	@ (800c064 <_strtod_l+0x854>)
 800bdbe:	9308      	str	r3, [sp, #32]
 800bdc0:	4650      	mov	r0, sl
 800bdc2:	4659      	mov	r1, fp
 800bdc4:	2300      	movs	r3, #0
 800bdc6:	07e2      	lsls	r2, r4, #31
 800bdc8:	d504      	bpl.n	800bdd4 <_strtod_l+0x5c4>
 800bdca:	e9d6 2300 	ldrd	r2, r3, [r6]
 800bdce:	f7f4 fc13 	bl	80005f8 <__aeabi_dmul>
 800bdd2:	2301      	movs	r3, #1
 800bdd4:	1064      	asrs	r4, r4, #1
 800bdd6:	f106 0608 	add.w	r6, r6, #8
 800bdda:	d1f4      	bne.n	800bdc6 <_strtod_l+0x5b6>
 800bddc:	b10b      	cbz	r3, 800bde2 <_strtod_l+0x5d2>
 800bdde:	4682      	mov	sl, r0
 800bde0:	468b      	mov	fp, r1
 800bde2:	9b08      	ldr	r3, [sp, #32]
 800bde4:	b1b3      	cbz	r3, 800be14 <_strtod_l+0x604>
 800bde6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800bdea:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	4659      	mov	r1, fp
 800bdf2:	dd0f      	ble.n	800be14 <_strtod_l+0x604>
 800bdf4:	2b1f      	cmp	r3, #31
 800bdf6:	dd55      	ble.n	800bea4 <_strtod_l+0x694>
 800bdf8:	2b34      	cmp	r3, #52	@ 0x34
 800bdfa:	bfde      	ittt	le
 800bdfc:	f04f 33ff 	movle.w	r3, #4294967295
 800be00:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800be04:	4093      	lslle	r3, r2
 800be06:	f04f 0a00 	mov.w	sl, #0
 800be0a:	bfcc      	ite	gt
 800be0c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800be10:	ea03 0b01 	andle.w	fp, r3, r1
 800be14:	2200      	movs	r2, #0
 800be16:	2300      	movs	r3, #0
 800be18:	4650      	mov	r0, sl
 800be1a:	4659      	mov	r1, fp
 800be1c:	f7f4 fe54 	bl	8000ac8 <__aeabi_dcmpeq>
 800be20:	2800      	cmp	r0, #0
 800be22:	d1a6      	bne.n	800bd72 <_strtod_l+0x562>
 800be24:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800be26:	9300      	str	r3, [sp, #0]
 800be28:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800be2a:	9805      	ldr	r0, [sp, #20]
 800be2c:	462b      	mov	r3, r5
 800be2e:	463a      	mov	r2, r7
 800be30:	f7ff f8c6 	bl	800afc0 <__s2b>
 800be34:	900a      	str	r0, [sp, #40]	@ 0x28
 800be36:	2800      	cmp	r0, #0
 800be38:	f43f af05 	beq.w	800bc46 <_strtod_l+0x436>
 800be3c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800be3e:	2a00      	cmp	r2, #0
 800be40:	eba9 0308 	sub.w	r3, r9, r8
 800be44:	bfa8      	it	ge
 800be46:	2300      	movge	r3, #0
 800be48:	9312      	str	r3, [sp, #72]	@ 0x48
 800be4a:	2400      	movs	r4, #0
 800be4c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800be50:	9316      	str	r3, [sp, #88]	@ 0x58
 800be52:	46a0      	mov	r8, r4
 800be54:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800be56:	9805      	ldr	r0, [sp, #20]
 800be58:	6859      	ldr	r1, [r3, #4]
 800be5a:	f7ff f809 	bl	800ae70 <_Balloc>
 800be5e:	4681      	mov	r9, r0
 800be60:	2800      	cmp	r0, #0
 800be62:	f43f aef4 	beq.w	800bc4e <_strtod_l+0x43e>
 800be66:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800be68:	691a      	ldr	r2, [r3, #16]
 800be6a:	3202      	adds	r2, #2
 800be6c:	f103 010c 	add.w	r1, r3, #12
 800be70:	0092      	lsls	r2, r2, #2
 800be72:	300c      	adds	r0, #12
 800be74:	f000 fd72 	bl	800c95c <memcpy>
 800be78:	ec4b ab10 	vmov	d0, sl, fp
 800be7c:	9805      	ldr	r0, [sp, #20]
 800be7e:	aa1c      	add	r2, sp, #112	@ 0x70
 800be80:	a91b      	add	r1, sp, #108	@ 0x6c
 800be82:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800be86:	f7ff fbd7 	bl	800b638 <__d2b>
 800be8a:	901a      	str	r0, [sp, #104]	@ 0x68
 800be8c:	2800      	cmp	r0, #0
 800be8e:	f43f aede 	beq.w	800bc4e <_strtod_l+0x43e>
 800be92:	9805      	ldr	r0, [sp, #20]
 800be94:	2101      	movs	r1, #1
 800be96:	f7ff f929 	bl	800b0ec <__i2b>
 800be9a:	4680      	mov	r8, r0
 800be9c:	b948      	cbnz	r0, 800beb2 <_strtod_l+0x6a2>
 800be9e:	f04f 0800 	mov.w	r8, #0
 800bea2:	e6d4      	b.n	800bc4e <_strtod_l+0x43e>
 800bea4:	f04f 32ff 	mov.w	r2, #4294967295
 800bea8:	fa02 f303 	lsl.w	r3, r2, r3
 800beac:	ea03 0a0a 	and.w	sl, r3, sl
 800beb0:	e7b0      	b.n	800be14 <_strtod_l+0x604>
 800beb2:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800beb4:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800beb6:	2d00      	cmp	r5, #0
 800beb8:	bfab      	itete	ge
 800beba:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800bebc:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800bebe:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800bec0:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800bec2:	bfac      	ite	ge
 800bec4:	18ef      	addge	r7, r5, r3
 800bec6:	1b5e      	sublt	r6, r3, r5
 800bec8:	9b08      	ldr	r3, [sp, #32]
 800beca:	1aed      	subs	r5, r5, r3
 800becc:	4415      	add	r5, r2
 800bece:	4b66      	ldr	r3, [pc, #408]	@ (800c068 <_strtod_l+0x858>)
 800bed0:	3d01      	subs	r5, #1
 800bed2:	429d      	cmp	r5, r3
 800bed4:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800bed8:	da50      	bge.n	800bf7c <_strtod_l+0x76c>
 800beda:	1b5b      	subs	r3, r3, r5
 800bedc:	2b1f      	cmp	r3, #31
 800bede:	eba2 0203 	sub.w	r2, r2, r3
 800bee2:	f04f 0101 	mov.w	r1, #1
 800bee6:	dc3d      	bgt.n	800bf64 <_strtod_l+0x754>
 800bee8:	fa01 f303 	lsl.w	r3, r1, r3
 800beec:	9313      	str	r3, [sp, #76]	@ 0x4c
 800beee:	2300      	movs	r3, #0
 800bef0:	9310      	str	r3, [sp, #64]	@ 0x40
 800bef2:	18bd      	adds	r5, r7, r2
 800bef4:	9b08      	ldr	r3, [sp, #32]
 800bef6:	42af      	cmp	r7, r5
 800bef8:	4416      	add	r6, r2
 800befa:	441e      	add	r6, r3
 800befc:	463b      	mov	r3, r7
 800befe:	bfa8      	it	ge
 800bf00:	462b      	movge	r3, r5
 800bf02:	42b3      	cmp	r3, r6
 800bf04:	bfa8      	it	ge
 800bf06:	4633      	movge	r3, r6
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	bfc2      	ittt	gt
 800bf0c:	1aed      	subgt	r5, r5, r3
 800bf0e:	1af6      	subgt	r6, r6, r3
 800bf10:	1aff      	subgt	r7, r7, r3
 800bf12:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	dd16      	ble.n	800bf46 <_strtod_l+0x736>
 800bf18:	4641      	mov	r1, r8
 800bf1a:	9805      	ldr	r0, [sp, #20]
 800bf1c:	461a      	mov	r2, r3
 800bf1e:	f7ff f9a5 	bl	800b26c <__pow5mult>
 800bf22:	4680      	mov	r8, r0
 800bf24:	2800      	cmp	r0, #0
 800bf26:	d0ba      	beq.n	800be9e <_strtod_l+0x68e>
 800bf28:	4601      	mov	r1, r0
 800bf2a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800bf2c:	9805      	ldr	r0, [sp, #20]
 800bf2e:	f7ff f8f3 	bl	800b118 <__multiply>
 800bf32:	900e      	str	r0, [sp, #56]	@ 0x38
 800bf34:	2800      	cmp	r0, #0
 800bf36:	f43f ae8a 	beq.w	800bc4e <_strtod_l+0x43e>
 800bf3a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800bf3c:	9805      	ldr	r0, [sp, #20]
 800bf3e:	f7fe ffd7 	bl	800aef0 <_Bfree>
 800bf42:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bf44:	931a      	str	r3, [sp, #104]	@ 0x68
 800bf46:	2d00      	cmp	r5, #0
 800bf48:	dc1d      	bgt.n	800bf86 <_strtod_l+0x776>
 800bf4a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	dd23      	ble.n	800bf98 <_strtod_l+0x788>
 800bf50:	4649      	mov	r1, r9
 800bf52:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800bf54:	9805      	ldr	r0, [sp, #20]
 800bf56:	f7ff f989 	bl	800b26c <__pow5mult>
 800bf5a:	4681      	mov	r9, r0
 800bf5c:	b9e0      	cbnz	r0, 800bf98 <_strtod_l+0x788>
 800bf5e:	f04f 0900 	mov.w	r9, #0
 800bf62:	e674      	b.n	800bc4e <_strtod_l+0x43e>
 800bf64:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800bf68:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800bf6c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800bf70:	35e2      	adds	r5, #226	@ 0xe2
 800bf72:	fa01 f305 	lsl.w	r3, r1, r5
 800bf76:	9310      	str	r3, [sp, #64]	@ 0x40
 800bf78:	9113      	str	r1, [sp, #76]	@ 0x4c
 800bf7a:	e7ba      	b.n	800bef2 <_strtod_l+0x6e2>
 800bf7c:	2300      	movs	r3, #0
 800bf7e:	9310      	str	r3, [sp, #64]	@ 0x40
 800bf80:	2301      	movs	r3, #1
 800bf82:	9313      	str	r3, [sp, #76]	@ 0x4c
 800bf84:	e7b5      	b.n	800bef2 <_strtod_l+0x6e2>
 800bf86:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800bf88:	9805      	ldr	r0, [sp, #20]
 800bf8a:	462a      	mov	r2, r5
 800bf8c:	f7ff f9c8 	bl	800b320 <__lshift>
 800bf90:	901a      	str	r0, [sp, #104]	@ 0x68
 800bf92:	2800      	cmp	r0, #0
 800bf94:	d1d9      	bne.n	800bf4a <_strtod_l+0x73a>
 800bf96:	e65a      	b.n	800bc4e <_strtod_l+0x43e>
 800bf98:	2e00      	cmp	r6, #0
 800bf9a:	dd07      	ble.n	800bfac <_strtod_l+0x79c>
 800bf9c:	4649      	mov	r1, r9
 800bf9e:	9805      	ldr	r0, [sp, #20]
 800bfa0:	4632      	mov	r2, r6
 800bfa2:	f7ff f9bd 	bl	800b320 <__lshift>
 800bfa6:	4681      	mov	r9, r0
 800bfa8:	2800      	cmp	r0, #0
 800bfaa:	d0d8      	beq.n	800bf5e <_strtod_l+0x74e>
 800bfac:	2f00      	cmp	r7, #0
 800bfae:	dd08      	ble.n	800bfc2 <_strtod_l+0x7b2>
 800bfb0:	4641      	mov	r1, r8
 800bfb2:	9805      	ldr	r0, [sp, #20]
 800bfb4:	463a      	mov	r2, r7
 800bfb6:	f7ff f9b3 	bl	800b320 <__lshift>
 800bfba:	4680      	mov	r8, r0
 800bfbc:	2800      	cmp	r0, #0
 800bfbe:	f43f ae46 	beq.w	800bc4e <_strtod_l+0x43e>
 800bfc2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800bfc4:	9805      	ldr	r0, [sp, #20]
 800bfc6:	464a      	mov	r2, r9
 800bfc8:	f7ff fa32 	bl	800b430 <__mdiff>
 800bfcc:	4604      	mov	r4, r0
 800bfce:	2800      	cmp	r0, #0
 800bfd0:	f43f ae3d 	beq.w	800bc4e <_strtod_l+0x43e>
 800bfd4:	68c3      	ldr	r3, [r0, #12]
 800bfd6:	930f      	str	r3, [sp, #60]	@ 0x3c
 800bfd8:	2300      	movs	r3, #0
 800bfda:	60c3      	str	r3, [r0, #12]
 800bfdc:	4641      	mov	r1, r8
 800bfde:	f7ff fa0b 	bl	800b3f8 <__mcmp>
 800bfe2:	2800      	cmp	r0, #0
 800bfe4:	da46      	bge.n	800c074 <_strtod_l+0x864>
 800bfe6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bfe8:	ea53 030a 	orrs.w	r3, r3, sl
 800bfec:	d16c      	bne.n	800c0c8 <_strtod_l+0x8b8>
 800bfee:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	d168      	bne.n	800c0c8 <_strtod_l+0x8b8>
 800bff6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800bffa:	0d1b      	lsrs	r3, r3, #20
 800bffc:	051b      	lsls	r3, r3, #20
 800bffe:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800c002:	d961      	bls.n	800c0c8 <_strtod_l+0x8b8>
 800c004:	6963      	ldr	r3, [r4, #20]
 800c006:	b913      	cbnz	r3, 800c00e <_strtod_l+0x7fe>
 800c008:	6923      	ldr	r3, [r4, #16]
 800c00a:	2b01      	cmp	r3, #1
 800c00c:	dd5c      	ble.n	800c0c8 <_strtod_l+0x8b8>
 800c00e:	4621      	mov	r1, r4
 800c010:	2201      	movs	r2, #1
 800c012:	9805      	ldr	r0, [sp, #20]
 800c014:	f7ff f984 	bl	800b320 <__lshift>
 800c018:	4641      	mov	r1, r8
 800c01a:	4604      	mov	r4, r0
 800c01c:	f7ff f9ec 	bl	800b3f8 <__mcmp>
 800c020:	2800      	cmp	r0, #0
 800c022:	dd51      	ble.n	800c0c8 <_strtod_l+0x8b8>
 800c024:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c028:	9a08      	ldr	r2, [sp, #32]
 800c02a:	0d1b      	lsrs	r3, r3, #20
 800c02c:	051b      	lsls	r3, r3, #20
 800c02e:	2a00      	cmp	r2, #0
 800c030:	d06b      	beq.n	800c10a <_strtod_l+0x8fa>
 800c032:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800c036:	d868      	bhi.n	800c10a <_strtod_l+0x8fa>
 800c038:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800c03c:	f67f ae9d 	bls.w	800bd7a <_strtod_l+0x56a>
 800c040:	4b0a      	ldr	r3, [pc, #40]	@ (800c06c <_strtod_l+0x85c>)
 800c042:	4650      	mov	r0, sl
 800c044:	4659      	mov	r1, fp
 800c046:	2200      	movs	r2, #0
 800c048:	f7f4 fad6 	bl	80005f8 <__aeabi_dmul>
 800c04c:	4b08      	ldr	r3, [pc, #32]	@ (800c070 <_strtod_l+0x860>)
 800c04e:	400b      	ands	r3, r1
 800c050:	4682      	mov	sl, r0
 800c052:	468b      	mov	fp, r1
 800c054:	2b00      	cmp	r3, #0
 800c056:	f47f ae05 	bne.w	800bc64 <_strtod_l+0x454>
 800c05a:	9a05      	ldr	r2, [sp, #20]
 800c05c:	2322      	movs	r3, #34	@ 0x22
 800c05e:	6013      	str	r3, [r2, #0]
 800c060:	e600      	b.n	800bc64 <_strtod_l+0x454>
 800c062:	bf00      	nop
 800c064:	0800e558 	.word	0x0800e558
 800c068:	fffffc02 	.word	0xfffffc02
 800c06c:	39500000 	.word	0x39500000
 800c070:	7ff00000 	.word	0x7ff00000
 800c074:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800c078:	d165      	bne.n	800c146 <_strtod_l+0x936>
 800c07a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800c07c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c080:	b35a      	cbz	r2, 800c0da <_strtod_l+0x8ca>
 800c082:	4a9f      	ldr	r2, [pc, #636]	@ (800c300 <_strtod_l+0xaf0>)
 800c084:	4293      	cmp	r3, r2
 800c086:	d12b      	bne.n	800c0e0 <_strtod_l+0x8d0>
 800c088:	9b08      	ldr	r3, [sp, #32]
 800c08a:	4651      	mov	r1, sl
 800c08c:	b303      	cbz	r3, 800c0d0 <_strtod_l+0x8c0>
 800c08e:	4b9d      	ldr	r3, [pc, #628]	@ (800c304 <_strtod_l+0xaf4>)
 800c090:	465a      	mov	r2, fp
 800c092:	4013      	ands	r3, r2
 800c094:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800c098:	f04f 32ff 	mov.w	r2, #4294967295
 800c09c:	d81b      	bhi.n	800c0d6 <_strtod_l+0x8c6>
 800c09e:	0d1b      	lsrs	r3, r3, #20
 800c0a0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800c0a4:	fa02 f303 	lsl.w	r3, r2, r3
 800c0a8:	4299      	cmp	r1, r3
 800c0aa:	d119      	bne.n	800c0e0 <_strtod_l+0x8d0>
 800c0ac:	4b96      	ldr	r3, [pc, #600]	@ (800c308 <_strtod_l+0xaf8>)
 800c0ae:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c0b0:	429a      	cmp	r2, r3
 800c0b2:	d102      	bne.n	800c0ba <_strtod_l+0x8aa>
 800c0b4:	3101      	adds	r1, #1
 800c0b6:	f43f adca 	beq.w	800bc4e <_strtod_l+0x43e>
 800c0ba:	4b92      	ldr	r3, [pc, #584]	@ (800c304 <_strtod_l+0xaf4>)
 800c0bc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c0be:	401a      	ands	r2, r3
 800c0c0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800c0c4:	f04f 0a00 	mov.w	sl, #0
 800c0c8:	9b08      	ldr	r3, [sp, #32]
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	d1b8      	bne.n	800c040 <_strtod_l+0x830>
 800c0ce:	e5c9      	b.n	800bc64 <_strtod_l+0x454>
 800c0d0:	f04f 33ff 	mov.w	r3, #4294967295
 800c0d4:	e7e8      	b.n	800c0a8 <_strtod_l+0x898>
 800c0d6:	4613      	mov	r3, r2
 800c0d8:	e7e6      	b.n	800c0a8 <_strtod_l+0x898>
 800c0da:	ea53 030a 	orrs.w	r3, r3, sl
 800c0de:	d0a1      	beq.n	800c024 <_strtod_l+0x814>
 800c0e0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800c0e2:	b1db      	cbz	r3, 800c11c <_strtod_l+0x90c>
 800c0e4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c0e6:	4213      	tst	r3, r2
 800c0e8:	d0ee      	beq.n	800c0c8 <_strtod_l+0x8b8>
 800c0ea:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c0ec:	9a08      	ldr	r2, [sp, #32]
 800c0ee:	4650      	mov	r0, sl
 800c0f0:	4659      	mov	r1, fp
 800c0f2:	b1bb      	cbz	r3, 800c124 <_strtod_l+0x914>
 800c0f4:	f7ff fb6e 	bl	800b7d4 <sulp>
 800c0f8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c0fc:	ec53 2b10 	vmov	r2, r3, d0
 800c100:	f7f4 f8c4 	bl	800028c <__adddf3>
 800c104:	4682      	mov	sl, r0
 800c106:	468b      	mov	fp, r1
 800c108:	e7de      	b.n	800c0c8 <_strtod_l+0x8b8>
 800c10a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800c10e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800c112:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800c116:	f04f 3aff 	mov.w	sl, #4294967295
 800c11a:	e7d5      	b.n	800c0c8 <_strtod_l+0x8b8>
 800c11c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800c11e:	ea13 0f0a 	tst.w	r3, sl
 800c122:	e7e1      	b.n	800c0e8 <_strtod_l+0x8d8>
 800c124:	f7ff fb56 	bl	800b7d4 <sulp>
 800c128:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c12c:	ec53 2b10 	vmov	r2, r3, d0
 800c130:	f7f4 f8aa 	bl	8000288 <__aeabi_dsub>
 800c134:	2200      	movs	r2, #0
 800c136:	2300      	movs	r3, #0
 800c138:	4682      	mov	sl, r0
 800c13a:	468b      	mov	fp, r1
 800c13c:	f7f4 fcc4 	bl	8000ac8 <__aeabi_dcmpeq>
 800c140:	2800      	cmp	r0, #0
 800c142:	d0c1      	beq.n	800c0c8 <_strtod_l+0x8b8>
 800c144:	e619      	b.n	800bd7a <_strtod_l+0x56a>
 800c146:	4641      	mov	r1, r8
 800c148:	4620      	mov	r0, r4
 800c14a:	f7ff facd 	bl	800b6e8 <__ratio>
 800c14e:	ec57 6b10 	vmov	r6, r7, d0
 800c152:	2200      	movs	r2, #0
 800c154:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800c158:	4630      	mov	r0, r6
 800c15a:	4639      	mov	r1, r7
 800c15c:	f7f4 fcc8 	bl	8000af0 <__aeabi_dcmple>
 800c160:	2800      	cmp	r0, #0
 800c162:	d06f      	beq.n	800c244 <_strtod_l+0xa34>
 800c164:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c166:	2b00      	cmp	r3, #0
 800c168:	d17a      	bne.n	800c260 <_strtod_l+0xa50>
 800c16a:	f1ba 0f00 	cmp.w	sl, #0
 800c16e:	d158      	bne.n	800c222 <_strtod_l+0xa12>
 800c170:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c172:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c176:	2b00      	cmp	r3, #0
 800c178:	d15a      	bne.n	800c230 <_strtod_l+0xa20>
 800c17a:	4b64      	ldr	r3, [pc, #400]	@ (800c30c <_strtod_l+0xafc>)
 800c17c:	2200      	movs	r2, #0
 800c17e:	4630      	mov	r0, r6
 800c180:	4639      	mov	r1, r7
 800c182:	f7f4 fcab 	bl	8000adc <__aeabi_dcmplt>
 800c186:	2800      	cmp	r0, #0
 800c188:	d159      	bne.n	800c23e <_strtod_l+0xa2e>
 800c18a:	4630      	mov	r0, r6
 800c18c:	4639      	mov	r1, r7
 800c18e:	4b60      	ldr	r3, [pc, #384]	@ (800c310 <_strtod_l+0xb00>)
 800c190:	2200      	movs	r2, #0
 800c192:	f7f4 fa31 	bl	80005f8 <__aeabi_dmul>
 800c196:	4606      	mov	r6, r0
 800c198:	460f      	mov	r7, r1
 800c19a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800c19e:	9606      	str	r6, [sp, #24]
 800c1a0:	9307      	str	r3, [sp, #28]
 800c1a2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c1a6:	4d57      	ldr	r5, [pc, #348]	@ (800c304 <_strtod_l+0xaf4>)
 800c1a8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800c1ac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c1ae:	401d      	ands	r5, r3
 800c1b0:	4b58      	ldr	r3, [pc, #352]	@ (800c314 <_strtod_l+0xb04>)
 800c1b2:	429d      	cmp	r5, r3
 800c1b4:	f040 80b2 	bne.w	800c31c <_strtod_l+0xb0c>
 800c1b8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c1ba:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800c1be:	ec4b ab10 	vmov	d0, sl, fp
 800c1c2:	f7ff f9c9 	bl	800b558 <__ulp>
 800c1c6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c1ca:	ec51 0b10 	vmov	r0, r1, d0
 800c1ce:	f7f4 fa13 	bl	80005f8 <__aeabi_dmul>
 800c1d2:	4652      	mov	r2, sl
 800c1d4:	465b      	mov	r3, fp
 800c1d6:	f7f4 f859 	bl	800028c <__adddf3>
 800c1da:	460b      	mov	r3, r1
 800c1dc:	4949      	ldr	r1, [pc, #292]	@ (800c304 <_strtod_l+0xaf4>)
 800c1de:	4a4e      	ldr	r2, [pc, #312]	@ (800c318 <_strtod_l+0xb08>)
 800c1e0:	4019      	ands	r1, r3
 800c1e2:	4291      	cmp	r1, r2
 800c1e4:	4682      	mov	sl, r0
 800c1e6:	d942      	bls.n	800c26e <_strtod_l+0xa5e>
 800c1e8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800c1ea:	4b47      	ldr	r3, [pc, #284]	@ (800c308 <_strtod_l+0xaf8>)
 800c1ec:	429a      	cmp	r2, r3
 800c1ee:	d103      	bne.n	800c1f8 <_strtod_l+0x9e8>
 800c1f0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c1f2:	3301      	adds	r3, #1
 800c1f4:	f43f ad2b 	beq.w	800bc4e <_strtod_l+0x43e>
 800c1f8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800c308 <_strtod_l+0xaf8>
 800c1fc:	f04f 3aff 	mov.w	sl, #4294967295
 800c200:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c202:	9805      	ldr	r0, [sp, #20]
 800c204:	f7fe fe74 	bl	800aef0 <_Bfree>
 800c208:	9805      	ldr	r0, [sp, #20]
 800c20a:	4649      	mov	r1, r9
 800c20c:	f7fe fe70 	bl	800aef0 <_Bfree>
 800c210:	9805      	ldr	r0, [sp, #20]
 800c212:	4641      	mov	r1, r8
 800c214:	f7fe fe6c 	bl	800aef0 <_Bfree>
 800c218:	9805      	ldr	r0, [sp, #20]
 800c21a:	4621      	mov	r1, r4
 800c21c:	f7fe fe68 	bl	800aef0 <_Bfree>
 800c220:	e618      	b.n	800be54 <_strtod_l+0x644>
 800c222:	f1ba 0f01 	cmp.w	sl, #1
 800c226:	d103      	bne.n	800c230 <_strtod_l+0xa20>
 800c228:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c22a:	2b00      	cmp	r3, #0
 800c22c:	f43f ada5 	beq.w	800bd7a <_strtod_l+0x56a>
 800c230:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800c2e0 <_strtod_l+0xad0>
 800c234:	4f35      	ldr	r7, [pc, #212]	@ (800c30c <_strtod_l+0xafc>)
 800c236:	ed8d 7b06 	vstr	d7, [sp, #24]
 800c23a:	2600      	movs	r6, #0
 800c23c:	e7b1      	b.n	800c1a2 <_strtod_l+0x992>
 800c23e:	4f34      	ldr	r7, [pc, #208]	@ (800c310 <_strtod_l+0xb00>)
 800c240:	2600      	movs	r6, #0
 800c242:	e7aa      	b.n	800c19a <_strtod_l+0x98a>
 800c244:	4b32      	ldr	r3, [pc, #200]	@ (800c310 <_strtod_l+0xb00>)
 800c246:	4630      	mov	r0, r6
 800c248:	4639      	mov	r1, r7
 800c24a:	2200      	movs	r2, #0
 800c24c:	f7f4 f9d4 	bl	80005f8 <__aeabi_dmul>
 800c250:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c252:	4606      	mov	r6, r0
 800c254:	460f      	mov	r7, r1
 800c256:	2b00      	cmp	r3, #0
 800c258:	d09f      	beq.n	800c19a <_strtod_l+0x98a>
 800c25a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800c25e:	e7a0      	b.n	800c1a2 <_strtod_l+0x992>
 800c260:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800c2e8 <_strtod_l+0xad8>
 800c264:	ed8d 7b06 	vstr	d7, [sp, #24]
 800c268:	ec57 6b17 	vmov	r6, r7, d7
 800c26c:	e799      	b.n	800c1a2 <_strtod_l+0x992>
 800c26e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800c272:	9b08      	ldr	r3, [sp, #32]
 800c274:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800c278:	2b00      	cmp	r3, #0
 800c27a:	d1c1      	bne.n	800c200 <_strtod_l+0x9f0>
 800c27c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c280:	0d1b      	lsrs	r3, r3, #20
 800c282:	051b      	lsls	r3, r3, #20
 800c284:	429d      	cmp	r5, r3
 800c286:	d1bb      	bne.n	800c200 <_strtod_l+0x9f0>
 800c288:	4630      	mov	r0, r6
 800c28a:	4639      	mov	r1, r7
 800c28c:	f7f4 fcfc 	bl	8000c88 <__aeabi_d2lz>
 800c290:	f7f4 f984 	bl	800059c <__aeabi_l2d>
 800c294:	4602      	mov	r2, r0
 800c296:	460b      	mov	r3, r1
 800c298:	4630      	mov	r0, r6
 800c29a:	4639      	mov	r1, r7
 800c29c:	f7f3 fff4 	bl	8000288 <__aeabi_dsub>
 800c2a0:	460b      	mov	r3, r1
 800c2a2:	4602      	mov	r2, r0
 800c2a4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800c2a8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800c2ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c2ae:	ea46 060a 	orr.w	r6, r6, sl
 800c2b2:	431e      	orrs	r6, r3
 800c2b4:	d06f      	beq.n	800c396 <_strtod_l+0xb86>
 800c2b6:	a30e      	add	r3, pc, #56	@ (adr r3, 800c2f0 <_strtod_l+0xae0>)
 800c2b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2bc:	f7f4 fc0e 	bl	8000adc <__aeabi_dcmplt>
 800c2c0:	2800      	cmp	r0, #0
 800c2c2:	f47f accf 	bne.w	800bc64 <_strtod_l+0x454>
 800c2c6:	a30c      	add	r3, pc, #48	@ (adr r3, 800c2f8 <_strtod_l+0xae8>)
 800c2c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2cc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c2d0:	f7f4 fc22 	bl	8000b18 <__aeabi_dcmpgt>
 800c2d4:	2800      	cmp	r0, #0
 800c2d6:	d093      	beq.n	800c200 <_strtod_l+0x9f0>
 800c2d8:	e4c4      	b.n	800bc64 <_strtod_l+0x454>
 800c2da:	bf00      	nop
 800c2dc:	f3af 8000 	nop.w
 800c2e0:	00000000 	.word	0x00000000
 800c2e4:	bff00000 	.word	0xbff00000
 800c2e8:	00000000 	.word	0x00000000
 800c2ec:	3ff00000 	.word	0x3ff00000
 800c2f0:	94a03595 	.word	0x94a03595
 800c2f4:	3fdfffff 	.word	0x3fdfffff
 800c2f8:	35afe535 	.word	0x35afe535
 800c2fc:	3fe00000 	.word	0x3fe00000
 800c300:	000fffff 	.word	0x000fffff
 800c304:	7ff00000 	.word	0x7ff00000
 800c308:	7fefffff 	.word	0x7fefffff
 800c30c:	3ff00000 	.word	0x3ff00000
 800c310:	3fe00000 	.word	0x3fe00000
 800c314:	7fe00000 	.word	0x7fe00000
 800c318:	7c9fffff 	.word	0x7c9fffff
 800c31c:	9b08      	ldr	r3, [sp, #32]
 800c31e:	b323      	cbz	r3, 800c36a <_strtod_l+0xb5a>
 800c320:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800c324:	d821      	bhi.n	800c36a <_strtod_l+0xb5a>
 800c326:	a328      	add	r3, pc, #160	@ (adr r3, 800c3c8 <_strtod_l+0xbb8>)
 800c328:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c32c:	4630      	mov	r0, r6
 800c32e:	4639      	mov	r1, r7
 800c330:	f7f4 fbde 	bl	8000af0 <__aeabi_dcmple>
 800c334:	b1a0      	cbz	r0, 800c360 <_strtod_l+0xb50>
 800c336:	4639      	mov	r1, r7
 800c338:	4630      	mov	r0, r6
 800c33a:	f7f4 fc35 	bl	8000ba8 <__aeabi_d2uiz>
 800c33e:	2801      	cmp	r0, #1
 800c340:	bf38      	it	cc
 800c342:	2001      	movcc	r0, #1
 800c344:	f7f4 f8de 	bl	8000504 <__aeabi_ui2d>
 800c348:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c34a:	4606      	mov	r6, r0
 800c34c:	460f      	mov	r7, r1
 800c34e:	b9fb      	cbnz	r3, 800c390 <_strtod_l+0xb80>
 800c350:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c354:	9014      	str	r0, [sp, #80]	@ 0x50
 800c356:	9315      	str	r3, [sp, #84]	@ 0x54
 800c358:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800c35c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800c360:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800c362:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800c366:	1b5b      	subs	r3, r3, r5
 800c368:	9311      	str	r3, [sp, #68]	@ 0x44
 800c36a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800c36e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800c372:	f7ff f8f1 	bl	800b558 <__ulp>
 800c376:	4650      	mov	r0, sl
 800c378:	ec53 2b10 	vmov	r2, r3, d0
 800c37c:	4659      	mov	r1, fp
 800c37e:	f7f4 f93b 	bl	80005f8 <__aeabi_dmul>
 800c382:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800c386:	f7f3 ff81 	bl	800028c <__adddf3>
 800c38a:	4682      	mov	sl, r0
 800c38c:	468b      	mov	fp, r1
 800c38e:	e770      	b.n	800c272 <_strtod_l+0xa62>
 800c390:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800c394:	e7e0      	b.n	800c358 <_strtod_l+0xb48>
 800c396:	a30e      	add	r3, pc, #56	@ (adr r3, 800c3d0 <_strtod_l+0xbc0>)
 800c398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c39c:	f7f4 fb9e 	bl	8000adc <__aeabi_dcmplt>
 800c3a0:	e798      	b.n	800c2d4 <_strtod_l+0xac4>
 800c3a2:	2300      	movs	r3, #0
 800c3a4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c3a6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800c3a8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c3aa:	6013      	str	r3, [r2, #0]
 800c3ac:	f7ff ba6d 	b.w	800b88a <_strtod_l+0x7a>
 800c3b0:	2a65      	cmp	r2, #101	@ 0x65
 800c3b2:	f43f ab66 	beq.w	800ba82 <_strtod_l+0x272>
 800c3b6:	2a45      	cmp	r2, #69	@ 0x45
 800c3b8:	f43f ab63 	beq.w	800ba82 <_strtod_l+0x272>
 800c3bc:	2301      	movs	r3, #1
 800c3be:	f7ff bb9e 	b.w	800bafe <_strtod_l+0x2ee>
 800c3c2:	bf00      	nop
 800c3c4:	f3af 8000 	nop.w
 800c3c8:	ffc00000 	.word	0xffc00000
 800c3cc:	41dfffff 	.word	0x41dfffff
 800c3d0:	94a03595 	.word	0x94a03595
 800c3d4:	3fcfffff 	.word	0x3fcfffff

0800c3d8 <_strtod_r>:
 800c3d8:	4b01      	ldr	r3, [pc, #4]	@ (800c3e0 <_strtod_r+0x8>)
 800c3da:	f7ff ba19 	b.w	800b810 <_strtod_l>
 800c3de:	bf00      	nop
 800c3e0:	200000b8 	.word	0x200000b8

0800c3e4 <_strtol_l.constprop.0>:
 800c3e4:	2b24      	cmp	r3, #36	@ 0x24
 800c3e6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c3ea:	4686      	mov	lr, r0
 800c3ec:	4690      	mov	r8, r2
 800c3ee:	d801      	bhi.n	800c3f4 <_strtol_l.constprop.0+0x10>
 800c3f0:	2b01      	cmp	r3, #1
 800c3f2:	d106      	bne.n	800c402 <_strtol_l.constprop.0+0x1e>
 800c3f4:	f7fd fdbc 	bl	8009f70 <__errno>
 800c3f8:	2316      	movs	r3, #22
 800c3fa:	6003      	str	r3, [r0, #0]
 800c3fc:	2000      	movs	r0, #0
 800c3fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c402:	4834      	ldr	r0, [pc, #208]	@ (800c4d4 <_strtol_l.constprop.0+0xf0>)
 800c404:	460d      	mov	r5, r1
 800c406:	462a      	mov	r2, r5
 800c408:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c40c:	5d06      	ldrb	r6, [r0, r4]
 800c40e:	f016 0608 	ands.w	r6, r6, #8
 800c412:	d1f8      	bne.n	800c406 <_strtol_l.constprop.0+0x22>
 800c414:	2c2d      	cmp	r4, #45	@ 0x2d
 800c416:	d12d      	bne.n	800c474 <_strtol_l.constprop.0+0x90>
 800c418:	782c      	ldrb	r4, [r5, #0]
 800c41a:	2601      	movs	r6, #1
 800c41c:	1c95      	adds	r5, r2, #2
 800c41e:	f033 0210 	bics.w	r2, r3, #16
 800c422:	d109      	bne.n	800c438 <_strtol_l.constprop.0+0x54>
 800c424:	2c30      	cmp	r4, #48	@ 0x30
 800c426:	d12a      	bne.n	800c47e <_strtol_l.constprop.0+0x9a>
 800c428:	782a      	ldrb	r2, [r5, #0]
 800c42a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800c42e:	2a58      	cmp	r2, #88	@ 0x58
 800c430:	d125      	bne.n	800c47e <_strtol_l.constprop.0+0x9a>
 800c432:	786c      	ldrb	r4, [r5, #1]
 800c434:	2310      	movs	r3, #16
 800c436:	3502      	adds	r5, #2
 800c438:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800c43c:	f10c 3cff 	add.w	ip, ip, #4294967295
 800c440:	2200      	movs	r2, #0
 800c442:	fbbc f9f3 	udiv	r9, ip, r3
 800c446:	4610      	mov	r0, r2
 800c448:	fb03 ca19 	mls	sl, r3, r9, ip
 800c44c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800c450:	2f09      	cmp	r7, #9
 800c452:	d81b      	bhi.n	800c48c <_strtol_l.constprop.0+0xa8>
 800c454:	463c      	mov	r4, r7
 800c456:	42a3      	cmp	r3, r4
 800c458:	dd27      	ble.n	800c4aa <_strtol_l.constprop.0+0xc6>
 800c45a:	1c57      	adds	r7, r2, #1
 800c45c:	d007      	beq.n	800c46e <_strtol_l.constprop.0+0x8a>
 800c45e:	4581      	cmp	r9, r0
 800c460:	d320      	bcc.n	800c4a4 <_strtol_l.constprop.0+0xc0>
 800c462:	d101      	bne.n	800c468 <_strtol_l.constprop.0+0x84>
 800c464:	45a2      	cmp	sl, r4
 800c466:	db1d      	blt.n	800c4a4 <_strtol_l.constprop.0+0xc0>
 800c468:	fb00 4003 	mla	r0, r0, r3, r4
 800c46c:	2201      	movs	r2, #1
 800c46e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c472:	e7eb      	b.n	800c44c <_strtol_l.constprop.0+0x68>
 800c474:	2c2b      	cmp	r4, #43	@ 0x2b
 800c476:	bf04      	itt	eq
 800c478:	782c      	ldrbeq	r4, [r5, #0]
 800c47a:	1c95      	addeq	r5, r2, #2
 800c47c:	e7cf      	b.n	800c41e <_strtol_l.constprop.0+0x3a>
 800c47e:	2b00      	cmp	r3, #0
 800c480:	d1da      	bne.n	800c438 <_strtol_l.constprop.0+0x54>
 800c482:	2c30      	cmp	r4, #48	@ 0x30
 800c484:	bf0c      	ite	eq
 800c486:	2308      	moveq	r3, #8
 800c488:	230a      	movne	r3, #10
 800c48a:	e7d5      	b.n	800c438 <_strtol_l.constprop.0+0x54>
 800c48c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800c490:	2f19      	cmp	r7, #25
 800c492:	d801      	bhi.n	800c498 <_strtol_l.constprop.0+0xb4>
 800c494:	3c37      	subs	r4, #55	@ 0x37
 800c496:	e7de      	b.n	800c456 <_strtol_l.constprop.0+0x72>
 800c498:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800c49c:	2f19      	cmp	r7, #25
 800c49e:	d804      	bhi.n	800c4aa <_strtol_l.constprop.0+0xc6>
 800c4a0:	3c57      	subs	r4, #87	@ 0x57
 800c4a2:	e7d8      	b.n	800c456 <_strtol_l.constprop.0+0x72>
 800c4a4:	f04f 32ff 	mov.w	r2, #4294967295
 800c4a8:	e7e1      	b.n	800c46e <_strtol_l.constprop.0+0x8a>
 800c4aa:	1c53      	adds	r3, r2, #1
 800c4ac:	d108      	bne.n	800c4c0 <_strtol_l.constprop.0+0xdc>
 800c4ae:	2322      	movs	r3, #34	@ 0x22
 800c4b0:	f8ce 3000 	str.w	r3, [lr]
 800c4b4:	4660      	mov	r0, ip
 800c4b6:	f1b8 0f00 	cmp.w	r8, #0
 800c4ba:	d0a0      	beq.n	800c3fe <_strtol_l.constprop.0+0x1a>
 800c4bc:	1e69      	subs	r1, r5, #1
 800c4be:	e006      	b.n	800c4ce <_strtol_l.constprop.0+0xea>
 800c4c0:	b106      	cbz	r6, 800c4c4 <_strtol_l.constprop.0+0xe0>
 800c4c2:	4240      	negs	r0, r0
 800c4c4:	f1b8 0f00 	cmp.w	r8, #0
 800c4c8:	d099      	beq.n	800c3fe <_strtol_l.constprop.0+0x1a>
 800c4ca:	2a00      	cmp	r2, #0
 800c4cc:	d1f6      	bne.n	800c4bc <_strtol_l.constprop.0+0xd8>
 800c4ce:	f8c8 1000 	str.w	r1, [r8]
 800c4d2:	e794      	b.n	800c3fe <_strtol_l.constprop.0+0x1a>
 800c4d4:	0800e581 	.word	0x0800e581

0800c4d8 <_strtol_r>:
 800c4d8:	f7ff bf84 	b.w	800c3e4 <_strtol_l.constprop.0>

0800c4dc <__ssputs_r>:
 800c4dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c4e0:	688e      	ldr	r6, [r1, #8]
 800c4e2:	461f      	mov	r7, r3
 800c4e4:	42be      	cmp	r6, r7
 800c4e6:	680b      	ldr	r3, [r1, #0]
 800c4e8:	4682      	mov	sl, r0
 800c4ea:	460c      	mov	r4, r1
 800c4ec:	4690      	mov	r8, r2
 800c4ee:	d82d      	bhi.n	800c54c <__ssputs_r+0x70>
 800c4f0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c4f4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800c4f8:	d026      	beq.n	800c548 <__ssputs_r+0x6c>
 800c4fa:	6965      	ldr	r5, [r4, #20]
 800c4fc:	6909      	ldr	r1, [r1, #16]
 800c4fe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c502:	eba3 0901 	sub.w	r9, r3, r1
 800c506:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c50a:	1c7b      	adds	r3, r7, #1
 800c50c:	444b      	add	r3, r9
 800c50e:	106d      	asrs	r5, r5, #1
 800c510:	429d      	cmp	r5, r3
 800c512:	bf38      	it	cc
 800c514:	461d      	movcc	r5, r3
 800c516:	0553      	lsls	r3, r2, #21
 800c518:	d527      	bpl.n	800c56a <__ssputs_r+0x8e>
 800c51a:	4629      	mov	r1, r5
 800c51c:	f7fe fc1c 	bl	800ad58 <_malloc_r>
 800c520:	4606      	mov	r6, r0
 800c522:	b360      	cbz	r0, 800c57e <__ssputs_r+0xa2>
 800c524:	6921      	ldr	r1, [r4, #16]
 800c526:	464a      	mov	r2, r9
 800c528:	f000 fa18 	bl	800c95c <memcpy>
 800c52c:	89a3      	ldrh	r3, [r4, #12]
 800c52e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800c532:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c536:	81a3      	strh	r3, [r4, #12]
 800c538:	6126      	str	r6, [r4, #16]
 800c53a:	6165      	str	r5, [r4, #20]
 800c53c:	444e      	add	r6, r9
 800c53e:	eba5 0509 	sub.w	r5, r5, r9
 800c542:	6026      	str	r6, [r4, #0]
 800c544:	60a5      	str	r5, [r4, #8]
 800c546:	463e      	mov	r6, r7
 800c548:	42be      	cmp	r6, r7
 800c54a:	d900      	bls.n	800c54e <__ssputs_r+0x72>
 800c54c:	463e      	mov	r6, r7
 800c54e:	6820      	ldr	r0, [r4, #0]
 800c550:	4632      	mov	r2, r6
 800c552:	4641      	mov	r1, r8
 800c554:	f000 f9c6 	bl	800c8e4 <memmove>
 800c558:	68a3      	ldr	r3, [r4, #8]
 800c55a:	1b9b      	subs	r3, r3, r6
 800c55c:	60a3      	str	r3, [r4, #8]
 800c55e:	6823      	ldr	r3, [r4, #0]
 800c560:	4433      	add	r3, r6
 800c562:	6023      	str	r3, [r4, #0]
 800c564:	2000      	movs	r0, #0
 800c566:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c56a:	462a      	mov	r2, r5
 800c56c:	f000 fd89 	bl	800d082 <_realloc_r>
 800c570:	4606      	mov	r6, r0
 800c572:	2800      	cmp	r0, #0
 800c574:	d1e0      	bne.n	800c538 <__ssputs_r+0x5c>
 800c576:	6921      	ldr	r1, [r4, #16]
 800c578:	4650      	mov	r0, sl
 800c57a:	f7fe fb79 	bl	800ac70 <_free_r>
 800c57e:	230c      	movs	r3, #12
 800c580:	f8ca 3000 	str.w	r3, [sl]
 800c584:	89a3      	ldrh	r3, [r4, #12]
 800c586:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c58a:	81a3      	strh	r3, [r4, #12]
 800c58c:	f04f 30ff 	mov.w	r0, #4294967295
 800c590:	e7e9      	b.n	800c566 <__ssputs_r+0x8a>
	...

0800c594 <_svfiprintf_r>:
 800c594:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c598:	4698      	mov	r8, r3
 800c59a:	898b      	ldrh	r3, [r1, #12]
 800c59c:	061b      	lsls	r3, r3, #24
 800c59e:	b09d      	sub	sp, #116	@ 0x74
 800c5a0:	4607      	mov	r7, r0
 800c5a2:	460d      	mov	r5, r1
 800c5a4:	4614      	mov	r4, r2
 800c5a6:	d510      	bpl.n	800c5ca <_svfiprintf_r+0x36>
 800c5a8:	690b      	ldr	r3, [r1, #16]
 800c5aa:	b973      	cbnz	r3, 800c5ca <_svfiprintf_r+0x36>
 800c5ac:	2140      	movs	r1, #64	@ 0x40
 800c5ae:	f7fe fbd3 	bl	800ad58 <_malloc_r>
 800c5b2:	6028      	str	r0, [r5, #0]
 800c5b4:	6128      	str	r0, [r5, #16]
 800c5b6:	b930      	cbnz	r0, 800c5c6 <_svfiprintf_r+0x32>
 800c5b8:	230c      	movs	r3, #12
 800c5ba:	603b      	str	r3, [r7, #0]
 800c5bc:	f04f 30ff 	mov.w	r0, #4294967295
 800c5c0:	b01d      	add	sp, #116	@ 0x74
 800c5c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c5c6:	2340      	movs	r3, #64	@ 0x40
 800c5c8:	616b      	str	r3, [r5, #20]
 800c5ca:	2300      	movs	r3, #0
 800c5cc:	9309      	str	r3, [sp, #36]	@ 0x24
 800c5ce:	2320      	movs	r3, #32
 800c5d0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c5d4:	f8cd 800c 	str.w	r8, [sp, #12]
 800c5d8:	2330      	movs	r3, #48	@ 0x30
 800c5da:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800c778 <_svfiprintf_r+0x1e4>
 800c5de:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c5e2:	f04f 0901 	mov.w	r9, #1
 800c5e6:	4623      	mov	r3, r4
 800c5e8:	469a      	mov	sl, r3
 800c5ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c5ee:	b10a      	cbz	r2, 800c5f4 <_svfiprintf_r+0x60>
 800c5f0:	2a25      	cmp	r2, #37	@ 0x25
 800c5f2:	d1f9      	bne.n	800c5e8 <_svfiprintf_r+0x54>
 800c5f4:	ebba 0b04 	subs.w	fp, sl, r4
 800c5f8:	d00b      	beq.n	800c612 <_svfiprintf_r+0x7e>
 800c5fa:	465b      	mov	r3, fp
 800c5fc:	4622      	mov	r2, r4
 800c5fe:	4629      	mov	r1, r5
 800c600:	4638      	mov	r0, r7
 800c602:	f7ff ff6b 	bl	800c4dc <__ssputs_r>
 800c606:	3001      	adds	r0, #1
 800c608:	f000 80a7 	beq.w	800c75a <_svfiprintf_r+0x1c6>
 800c60c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c60e:	445a      	add	r2, fp
 800c610:	9209      	str	r2, [sp, #36]	@ 0x24
 800c612:	f89a 3000 	ldrb.w	r3, [sl]
 800c616:	2b00      	cmp	r3, #0
 800c618:	f000 809f 	beq.w	800c75a <_svfiprintf_r+0x1c6>
 800c61c:	2300      	movs	r3, #0
 800c61e:	f04f 32ff 	mov.w	r2, #4294967295
 800c622:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c626:	f10a 0a01 	add.w	sl, sl, #1
 800c62a:	9304      	str	r3, [sp, #16]
 800c62c:	9307      	str	r3, [sp, #28]
 800c62e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c632:	931a      	str	r3, [sp, #104]	@ 0x68
 800c634:	4654      	mov	r4, sl
 800c636:	2205      	movs	r2, #5
 800c638:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c63c:	484e      	ldr	r0, [pc, #312]	@ (800c778 <_svfiprintf_r+0x1e4>)
 800c63e:	f7f3 fdc7 	bl	80001d0 <memchr>
 800c642:	9a04      	ldr	r2, [sp, #16]
 800c644:	b9d8      	cbnz	r0, 800c67e <_svfiprintf_r+0xea>
 800c646:	06d0      	lsls	r0, r2, #27
 800c648:	bf44      	itt	mi
 800c64a:	2320      	movmi	r3, #32
 800c64c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c650:	0711      	lsls	r1, r2, #28
 800c652:	bf44      	itt	mi
 800c654:	232b      	movmi	r3, #43	@ 0x2b
 800c656:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c65a:	f89a 3000 	ldrb.w	r3, [sl]
 800c65e:	2b2a      	cmp	r3, #42	@ 0x2a
 800c660:	d015      	beq.n	800c68e <_svfiprintf_r+0xfa>
 800c662:	9a07      	ldr	r2, [sp, #28]
 800c664:	4654      	mov	r4, sl
 800c666:	2000      	movs	r0, #0
 800c668:	f04f 0c0a 	mov.w	ip, #10
 800c66c:	4621      	mov	r1, r4
 800c66e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c672:	3b30      	subs	r3, #48	@ 0x30
 800c674:	2b09      	cmp	r3, #9
 800c676:	d94b      	bls.n	800c710 <_svfiprintf_r+0x17c>
 800c678:	b1b0      	cbz	r0, 800c6a8 <_svfiprintf_r+0x114>
 800c67a:	9207      	str	r2, [sp, #28]
 800c67c:	e014      	b.n	800c6a8 <_svfiprintf_r+0x114>
 800c67e:	eba0 0308 	sub.w	r3, r0, r8
 800c682:	fa09 f303 	lsl.w	r3, r9, r3
 800c686:	4313      	orrs	r3, r2
 800c688:	9304      	str	r3, [sp, #16]
 800c68a:	46a2      	mov	sl, r4
 800c68c:	e7d2      	b.n	800c634 <_svfiprintf_r+0xa0>
 800c68e:	9b03      	ldr	r3, [sp, #12]
 800c690:	1d19      	adds	r1, r3, #4
 800c692:	681b      	ldr	r3, [r3, #0]
 800c694:	9103      	str	r1, [sp, #12]
 800c696:	2b00      	cmp	r3, #0
 800c698:	bfbb      	ittet	lt
 800c69a:	425b      	neglt	r3, r3
 800c69c:	f042 0202 	orrlt.w	r2, r2, #2
 800c6a0:	9307      	strge	r3, [sp, #28]
 800c6a2:	9307      	strlt	r3, [sp, #28]
 800c6a4:	bfb8      	it	lt
 800c6a6:	9204      	strlt	r2, [sp, #16]
 800c6a8:	7823      	ldrb	r3, [r4, #0]
 800c6aa:	2b2e      	cmp	r3, #46	@ 0x2e
 800c6ac:	d10a      	bne.n	800c6c4 <_svfiprintf_r+0x130>
 800c6ae:	7863      	ldrb	r3, [r4, #1]
 800c6b0:	2b2a      	cmp	r3, #42	@ 0x2a
 800c6b2:	d132      	bne.n	800c71a <_svfiprintf_r+0x186>
 800c6b4:	9b03      	ldr	r3, [sp, #12]
 800c6b6:	1d1a      	adds	r2, r3, #4
 800c6b8:	681b      	ldr	r3, [r3, #0]
 800c6ba:	9203      	str	r2, [sp, #12]
 800c6bc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c6c0:	3402      	adds	r4, #2
 800c6c2:	9305      	str	r3, [sp, #20]
 800c6c4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800c788 <_svfiprintf_r+0x1f4>
 800c6c8:	7821      	ldrb	r1, [r4, #0]
 800c6ca:	2203      	movs	r2, #3
 800c6cc:	4650      	mov	r0, sl
 800c6ce:	f7f3 fd7f 	bl	80001d0 <memchr>
 800c6d2:	b138      	cbz	r0, 800c6e4 <_svfiprintf_r+0x150>
 800c6d4:	9b04      	ldr	r3, [sp, #16]
 800c6d6:	eba0 000a 	sub.w	r0, r0, sl
 800c6da:	2240      	movs	r2, #64	@ 0x40
 800c6dc:	4082      	lsls	r2, r0
 800c6de:	4313      	orrs	r3, r2
 800c6e0:	3401      	adds	r4, #1
 800c6e2:	9304      	str	r3, [sp, #16]
 800c6e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c6e8:	4824      	ldr	r0, [pc, #144]	@ (800c77c <_svfiprintf_r+0x1e8>)
 800c6ea:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c6ee:	2206      	movs	r2, #6
 800c6f0:	f7f3 fd6e 	bl	80001d0 <memchr>
 800c6f4:	2800      	cmp	r0, #0
 800c6f6:	d036      	beq.n	800c766 <_svfiprintf_r+0x1d2>
 800c6f8:	4b21      	ldr	r3, [pc, #132]	@ (800c780 <_svfiprintf_r+0x1ec>)
 800c6fa:	bb1b      	cbnz	r3, 800c744 <_svfiprintf_r+0x1b0>
 800c6fc:	9b03      	ldr	r3, [sp, #12]
 800c6fe:	3307      	adds	r3, #7
 800c700:	f023 0307 	bic.w	r3, r3, #7
 800c704:	3308      	adds	r3, #8
 800c706:	9303      	str	r3, [sp, #12]
 800c708:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c70a:	4433      	add	r3, r6
 800c70c:	9309      	str	r3, [sp, #36]	@ 0x24
 800c70e:	e76a      	b.n	800c5e6 <_svfiprintf_r+0x52>
 800c710:	fb0c 3202 	mla	r2, ip, r2, r3
 800c714:	460c      	mov	r4, r1
 800c716:	2001      	movs	r0, #1
 800c718:	e7a8      	b.n	800c66c <_svfiprintf_r+0xd8>
 800c71a:	2300      	movs	r3, #0
 800c71c:	3401      	adds	r4, #1
 800c71e:	9305      	str	r3, [sp, #20]
 800c720:	4619      	mov	r1, r3
 800c722:	f04f 0c0a 	mov.w	ip, #10
 800c726:	4620      	mov	r0, r4
 800c728:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c72c:	3a30      	subs	r2, #48	@ 0x30
 800c72e:	2a09      	cmp	r2, #9
 800c730:	d903      	bls.n	800c73a <_svfiprintf_r+0x1a6>
 800c732:	2b00      	cmp	r3, #0
 800c734:	d0c6      	beq.n	800c6c4 <_svfiprintf_r+0x130>
 800c736:	9105      	str	r1, [sp, #20]
 800c738:	e7c4      	b.n	800c6c4 <_svfiprintf_r+0x130>
 800c73a:	fb0c 2101 	mla	r1, ip, r1, r2
 800c73e:	4604      	mov	r4, r0
 800c740:	2301      	movs	r3, #1
 800c742:	e7f0      	b.n	800c726 <_svfiprintf_r+0x192>
 800c744:	ab03      	add	r3, sp, #12
 800c746:	9300      	str	r3, [sp, #0]
 800c748:	462a      	mov	r2, r5
 800c74a:	4b0e      	ldr	r3, [pc, #56]	@ (800c784 <_svfiprintf_r+0x1f0>)
 800c74c:	a904      	add	r1, sp, #16
 800c74e:	4638      	mov	r0, r7
 800c750:	f7fc fc96 	bl	8009080 <_printf_float>
 800c754:	1c42      	adds	r2, r0, #1
 800c756:	4606      	mov	r6, r0
 800c758:	d1d6      	bne.n	800c708 <_svfiprintf_r+0x174>
 800c75a:	89ab      	ldrh	r3, [r5, #12]
 800c75c:	065b      	lsls	r3, r3, #25
 800c75e:	f53f af2d 	bmi.w	800c5bc <_svfiprintf_r+0x28>
 800c762:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c764:	e72c      	b.n	800c5c0 <_svfiprintf_r+0x2c>
 800c766:	ab03      	add	r3, sp, #12
 800c768:	9300      	str	r3, [sp, #0]
 800c76a:	462a      	mov	r2, r5
 800c76c:	4b05      	ldr	r3, [pc, #20]	@ (800c784 <_svfiprintf_r+0x1f0>)
 800c76e:	a904      	add	r1, sp, #16
 800c770:	4638      	mov	r0, r7
 800c772:	f7fc ff1d 	bl	80095b0 <_printf_i>
 800c776:	e7ed      	b.n	800c754 <_svfiprintf_r+0x1c0>
 800c778:	0800e681 	.word	0x0800e681
 800c77c:	0800e68b 	.word	0x0800e68b
 800c780:	08009081 	.word	0x08009081
 800c784:	0800c4dd 	.word	0x0800c4dd
 800c788:	0800e687 	.word	0x0800e687

0800c78c <__sflush_r>:
 800c78c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c790:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c794:	0716      	lsls	r6, r2, #28
 800c796:	4605      	mov	r5, r0
 800c798:	460c      	mov	r4, r1
 800c79a:	d454      	bmi.n	800c846 <__sflush_r+0xba>
 800c79c:	684b      	ldr	r3, [r1, #4]
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	dc02      	bgt.n	800c7a8 <__sflush_r+0x1c>
 800c7a2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	dd48      	ble.n	800c83a <__sflush_r+0xae>
 800c7a8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c7aa:	2e00      	cmp	r6, #0
 800c7ac:	d045      	beq.n	800c83a <__sflush_r+0xae>
 800c7ae:	2300      	movs	r3, #0
 800c7b0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c7b4:	682f      	ldr	r7, [r5, #0]
 800c7b6:	6a21      	ldr	r1, [r4, #32]
 800c7b8:	602b      	str	r3, [r5, #0]
 800c7ba:	d030      	beq.n	800c81e <__sflush_r+0x92>
 800c7bc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c7be:	89a3      	ldrh	r3, [r4, #12]
 800c7c0:	0759      	lsls	r1, r3, #29
 800c7c2:	d505      	bpl.n	800c7d0 <__sflush_r+0x44>
 800c7c4:	6863      	ldr	r3, [r4, #4]
 800c7c6:	1ad2      	subs	r2, r2, r3
 800c7c8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c7ca:	b10b      	cbz	r3, 800c7d0 <__sflush_r+0x44>
 800c7cc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c7ce:	1ad2      	subs	r2, r2, r3
 800c7d0:	2300      	movs	r3, #0
 800c7d2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c7d4:	6a21      	ldr	r1, [r4, #32]
 800c7d6:	4628      	mov	r0, r5
 800c7d8:	47b0      	blx	r6
 800c7da:	1c43      	adds	r3, r0, #1
 800c7dc:	89a3      	ldrh	r3, [r4, #12]
 800c7de:	d106      	bne.n	800c7ee <__sflush_r+0x62>
 800c7e0:	6829      	ldr	r1, [r5, #0]
 800c7e2:	291d      	cmp	r1, #29
 800c7e4:	d82b      	bhi.n	800c83e <__sflush_r+0xb2>
 800c7e6:	4a2a      	ldr	r2, [pc, #168]	@ (800c890 <__sflush_r+0x104>)
 800c7e8:	410a      	asrs	r2, r1
 800c7ea:	07d6      	lsls	r6, r2, #31
 800c7ec:	d427      	bmi.n	800c83e <__sflush_r+0xb2>
 800c7ee:	2200      	movs	r2, #0
 800c7f0:	6062      	str	r2, [r4, #4]
 800c7f2:	04d9      	lsls	r1, r3, #19
 800c7f4:	6922      	ldr	r2, [r4, #16]
 800c7f6:	6022      	str	r2, [r4, #0]
 800c7f8:	d504      	bpl.n	800c804 <__sflush_r+0x78>
 800c7fa:	1c42      	adds	r2, r0, #1
 800c7fc:	d101      	bne.n	800c802 <__sflush_r+0x76>
 800c7fe:	682b      	ldr	r3, [r5, #0]
 800c800:	b903      	cbnz	r3, 800c804 <__sflush_r+0x78>
 800c802:	6560      	str	r0, [r4, #84]	@ 0x54
 800c804:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c806:	602f      	str	r7, [r5, #0]
 800c808:	b1b9      	cbz	r1, 800c83a <__sflush_r+0xae>
 800c80a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c80e:	4299      	cmp	r1, r3
 800c810:	d002      	beq.n	800c818 <__sflush_r+0x8c>
 800c812:	4628      	mov	r0, r5
 800c814:	f7fe fa2c 	bl	800ac70 <_free_r>
 800c818:	2300      	movs	r3, #0
 800c81a:	6363      	str	r3, [r4, #52]	@ 0x34
 800c81c:	e00d      	b.n	800c83a <__sflush_r+0xae>
 800c81e:	2301      	movs	r3, #1
 800c820:	4628      	mov	r0, r5
 800c822:	47b0      	blx	r6
 800c824:	4602      	mov	r2, r0
 800c826:	1c50      	adds	r0, r2, #1
 800c828:	d1c9      	bne.n	800c7be <__sflush_r+0x32>
 800c82a:	682b      	ldr	r3, [r5, #0]
 800c82c:	2b00      	cmp	r3, #0
 800c82e:	d0c6      	beq.n	800c7be <__sflush_r+0x32>
 800c830:	2b1d      	cmp	r3, #29
 800c832:	d001      	beq.n	800c838 <__sflush_r+0xac>
 800c834:	2b16      	cmp	r3, #22
 800c836:	d11e      	bne.n	800c876 <__sflush_r+0xea>
 800c838:	602f      	str	r7, [r5, #0]
 800c83a:	2000      	movs	r0, #0
 800c83c:	e022      	b.n	800c884 <__sflush_r+0xf8>
 800c83e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c842:	b21b      	sxth	r3, r3
 800c844:	e01b      	b.n	800c87e <__sflush_r+0xf2>
 800c846:	690f      	ldr	r7, [r1, #16]
 800c848:	2f00      	cmp	r7, #0
 800c84a:	d0f6      	beq.n	800c83a <__sflush_r+0xae>
 800c84c:	0793      	lsls	r3, r2, #30
 800c84e:	680e      	ldr	r6, [r1, #0]
 800c850:	bf08      	it	eq
 800c852:	694b      	ldreq	r3, [r1, #20]
 800c854:	600f      	str	r7, [r1, #0]
 800c856:	bf18      	it	ne
 800c858:	2300      	movne	r3, #0
 800c85a:	eba6 0807 	sub.w	r8, r6, r7
 800c85e:	608b      	str	r3, [r1, #8]
 800c860:	f1b8 0f00 	cmp.w	r8, #0
 800c864:	dde9      	ble.n	800c83a <__sflush_r+0xae>
 800c866:	6a21      	ldr	r1, [r4, #32]
 800c868:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800c86a:	4643      	mov	r3, r8
 800c86c:	463a      	mov	r2, r7
 800c86e:	4628      	mov	r0, r5
 800c870:	47b0      	blx	r6
 800c872:	2800      	cmp	r0, #0
 800c874:	dc08      	bgt.n	800c888 <__sflush_r+0xfc>
 800c876:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c87a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c87e:	81a3      	strh	r3, [r4, #12]
 800c880:	f04f 30ff 	mov.w	r0, #4294967295
 800c884:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c888:	4407      	add	r7, r0
 800c88a:	eba8 0800 	sub.w	r8, r8, r0
 800c88e:	e7e7      	b.n	800c860 <__sflush_r+0xd4>
 800c890:	dfbffffe 	.word	0xdfbffffe

0800c894 <_fflush_r>:
 800c894:	b538      	push	{r3, r4, r5, lr}
 800c896:	690b      	ldr	r3, [r1, #16]
 800c898:	4605      	mov	r5, r0
 800c89a:	460c      	mov	r4, r1
 800c89c:	b913      	cbnz	r3, 800c8a4 <_fflush_r+0x10>
 800c89e:	2500      	movs	r5, #0
 800c8a0:	4628      	mov	r0, r5
 800c8a2:	bd38      	pop	{r3, r4, r5, pc}
 800c8a4:	b118      	cbz	r0, 800c8ae <_fflush_r+0x1a>
 800c8a6:	6a03      	ldr	r3, [r0, #32]
 800c8a8:	b90b      	cbnz	r3, 800c8ae <_fflush_r+0x1a>
 800c8aa:	f7fd fa41 	bl	8009d30 <__sinit>
 800c8ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c8b2:	2b00      	cmp	r3, #0
 800c8b4:	d0f3      	beq.n	800c89e <_fflush_r+0xa>
 800c8b6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c8b8:	07d0      	lsls	r0, r2, #31
 800c8ba:	d404      	bmi.n	800c8c6 <_fflush_r+0x32>
 800c8bc:	0599      	lsls	r1, r3, #22
 800c8be:	d402      	bmi.n	800c8c6 <_fflush_r+0x32>
 800c8c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c8c2:	f7fd fb80 	bl	8009fc6 <__retarget_lock_acquire_recursive>
 800c8c6:	4628      	mov	r0, r5
 800c8c8:	4621      	mov	r1, r4
 800c8ca:	f7ff ff5f 	bl	800c78c <__sflush_r>
 800c8ce:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c8d0:	07da      	lsls	r2, r3, #31
 800c8d2:	4605      	mov	r5, r0
 800c8d4:	d4e4      	bmi.n	800c8a0 <_fflush_r+0xc>
 800c8d6:	89a3      	ldrh	r3, [r4, #12]
 800c8d8:	059b      	lsls	r3, r3, #22
 800c8da:	d4e1      	bmi.n	800c8a0 <_fflush_r+0xc>
 800c8dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c8de:	f7fd fb73 	bl	8009fc8 <__retarget_lock_release_recursive>
 800c8e2:	e7dd      	b.n	800c8a0 <_fflush_r+0xc>

0800c8e4 <memmove>:
 800c8e4:	4288      	cmp	r0, r1
 800c8e6:	b510      	push	{r4, lr}
 800c8e8:	eb01 0402 	add.w	r4, r1, r2
 800c8ec:	d902      	bls.n	800c8f4 <memmove+0x10>
 800c8ee:	4284      	cmp	r4, r0
 800c8f0:	4623      	mov	r3, r4
 800c8f2:	d807      	bhi.n	800c904 <memmove+0x20>
 800c8f4:	1e43      	subs	r3, r0, #1
 800c8f6:	42a1      	cmp	r1, r4
 800c8f8:	d008      	beq.n	800c90c <memmove+0x28>
 800c8fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c8fe:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c902:	e7f8      	b.n	800c8f6 <memmove+0x12>
 800c904:	4402      	add	r2, r0
 800c906:	4601      	mov	r1, r0
 800c908:	428a      	cmp	r2, r1
 800c90a:	d100      	bne.n	800c90e <memmove+0x2a>
 800c90c:	bd10      	pop	{r4, pc}
 800c90e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c912:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c916:	e7f7      	b.n	800c908 <memmove+0x24>

0800c918 <strncmp>:
 800c918:	b510      	push	{r4, lr}
 800c91a:	b16a      	cbz	r2, 800c938 <strncmp+0x20>
 800c91c:	3901      	subs	r1, #1
 800c91e:	1884      	adds	r4, r0, r2
 800c920:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c924:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800c928:	429a      	cmp	r2, r3
 800c92a:	d103      	bne.n	800c934 <strncmp+0x1c>
 800c92c:	42a0      	cmp	r0, r4
 800c92e:	d001      	beq.n	800c934 <strncmp+0x1c>
 800c930:	2a00      	cmp	r2, #0
 800c932:	d1f5      	bne.n	800c920 <strncmp+0x8>
 800c934:	1ad0      	subs	r0, r2, r3
 800c936:	bd10      	pop	{r4, pc}
 800c938:	4610      	mov	r0, r2
 800c93a:	e7fc      	b.n	800c936 <strncmp+0x1e>

0800c93c <_sbrk_r>:
 800c93c:	b538      	push	{r3, r4, r5, lr}
 800c93e:	4d06      	ldr	r5, [pc, #24]	@ (800c958 <_sbrk_r+0x1c>)
 800c940:	2300      	movs	r3, #0
 800c942:	4604      	mov	r4, r0
 800c944:	4608      	mov	r0, r1
 800c946:	602b      	str	r3, [r5, #0]
 800c948:	f7f5 fca6 	bl	8002298 <_sbrk>
 800c94c:	1c43      	adds	r3, r0, #1
 800c94e:	d102      	bne.n	800c956 <_sbrk_r+0x1a>
 800c950:	682b      	ldr	r3, [r5, #0]
 800c952:	b103      	cbz	r3, 800c956 <_sbrk_r+0x1a>
 800c954:	6023      	str	r3, [r4, #0]
 800c956:	bd38      	pop	{r3, r4, r5, pc}
 800c958:	20000748 	.word	0x20000748

0800c95c <memcpy>:
 800c95c:	440a      	add	r2, r1
 800c95e:	4291      	cmp	r1, r2
 800c960:	f100 33ff 	add.w	r3, r0, #4294967295
 800c964:	d100      	bne.n	800c968 <memcpy+0xc>
 800c966:	4770      	bx	lr
 800c968:	b510      	push	{r4, lr}
 800c96a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c96e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c972:	4291      	cmp	r1, r2
 800c974:	d1f9      	bne.n	800c96a <memcpy+0xe>
 800c976:	bd10      	pop	{r4, pc}

0800c978 <nan>:
 800c978:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800c980 <nan+0x8>
 800c97c:	4770      	bx	lr
 800c97e:	bf00      	nop
 800c980:	00000000 	.word	0x00000000
 800c984:	7ff80000 	.word	0x7ff80000

0800c988 <__assert_func>:
 800c988:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c98a:	4614      	mov	r4, r2
 800c98c:	461a      	mov	r2, r3
 800c98e:	4b09      	ldr	r3, [pc, #36]	@ (800c9b4 <__assert_func+0x2c>)
 800c990:	681b      	ldr	r3, [r3, #0]
 800c992:	4605      	mov	r5, r0
 800c994:	68d8      	ldr	r0, [r3, #12]
 800c996:	b954      	cbnz	r4, 800c9ae <__assert_func+0x26>
 800c998:	4b07      	ldr	r3, [pc, #28]	@ (800c9b8 <__assert_func+0x30>)
 800c99a:	461c      	mov	r4, r3
 800c99c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c9a0:	9100      	str	r1, [sp, #0]
 800c9a2:	462b      	mov	r3, r5
 800c9a4:	4905      	ldr	r1, [pc, #20]	@ (800c9bc <__assert_func+0x34>)
 800c9a6:	f000 fba7 	bl	800d0f8 <fiprintf>
 800c9aa:	f000 fbb7 	bl	800d11c <abort>
 800c9ae:	4b04      	ldr	r3, [pc, #16]	@ (800c9c0 <__assert_func+0x38>)
 800c9b0:	e7f4      	b.n	800c99c <__assert_func+0x14>
 800c9b2:	bf00      	nop
 800c9b4:	20000068 	.word	0x20000068
 800c9b8:	0800e6d5 	.word	0x0800e6d5
 800c9bc:	0800e6a7 	.word	0x0800e6a7
 800c9c0:	0800e69a 	.word	0x0800e69a

0800c9c4 <_calloc_r>:
 800c9c4:	b570      	push	{r4, r5, r6, lr}
 800c9c6:	fba1 5402 	umull	r5, r4, r1, r2
 800c9ca:	b93c      	cbnz	r4, 800c9dc <_calloc_r+0x18>
 800c9cc:	4629      	mov	r1, r5
 800c9ce:	f7fe f9c3 	bl	800ad58 <_malloc_r>
 800c9d2:	4606      	mov	r6, r0
 800c9d4:	b928      	cbnz	r0, 800c9e2 <_calloc_r+0x1e>
 800c9d6:	2600      	movs	r6, #0
 800c9d8:	4630      	mov	r0, r6
 800c9da:	bd70      	pop	{r4, r5, r6, pc}
 800c9dc:	220c      	movs	r2, #12
 800c9de:	6002      	str	r2, [r0, #0]
 800c9e0:	e7f9      	b.n	800c9d6 <_calloc_r+0x12>
 800c9e2:	462a      	mov	r2, r5
 800c9e4:	4621      	mov	r1, r4
 800c9e6:	f7fd fa70 	bl	8009eca <memset>
 800c9ea:	e7f5      	b.n	800c9d8 <_calloc_r+0x14>

0800c9ec <rshift>:
 800c9ec:	6903      	ldr	r3, [r0, #16]
 800c9ee:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800c9f2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c9f6:	ea4f 1261 	mov.w	r2, r1, asr #5
 800c9fa:	f100 0414 	add.w	r4, r0, #20
 800c9fe:	dd45      	ble.n	800ca8c <rshift+0xa0>
 800ca00:	f011 011f 	ands.w	r1, r1, #31
 800ca04:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800ca08:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800ca0c:	d10c      	bne.n	800ca28 <rshift+0x3c>
 800ca0e:	f100 0710 	add.w	r7, r0, #16
 800ca12:	4629      	mov	r1, r5
 800ca14:	42b1      	cmp	r1, r6
 800ca16:	d334      	bcc.n	800ca82 <rshift+0x96>
 800ca18:	1a9b      	subs	r3, r3, r2
 800ca1a:	009b      	lsls	r3, r3, #2
 800ca1c:	1eea      	subs	r2, r5, #3
 800ca1e:	4296      	cmp	r6, r2
 800ca20:	bf38      	it	cc
 800ca22:	2300      	movcc	r3, #0
 800ca24:	4423      	add	r3, r4
 800ca26:	e015      	b.n	800ca54 <rshift+0x68>
 800ca28:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800ca2c:	f1c1 0820 	rsb	r8, r1, #32
 800ca30:	40cf      	lsrs	r7, r1
 800ca32:	f105 0e04 	add.w	lr, r5, #4
 800ca36:	46a1      	mov	r9, r4
 800ca38:	4576      	cmp	r6, lr
 800ca3a:	46f4      	mov	ip, lr
 800ca3c:	d815      	bhi.n	800ca6a <rshift+0x7e>
 800ca3e:	1a9a      	subs	r2, r3, r2
 800ca40:	0092      	lsls	r2, r2, #2
 800ca42:	3a04      	subs	r2, #4
 800ca44:	3501      	adds	r5, #1
 800ca46:	42ae      	cmp	r6, r5
 800ca48:	bf38      	it	cc
 800ca4a:	2200      	movcc	r2, #0
 800ca4c:	18a3      	adds	r3, r4, r2
 800ca4e:	50a7      	str	r7, [r4, r2]
 800ca50:	b107      	cbz	r7, 800ca54 <rshift+0x68>
 800ca52:	3304      	adds	r3, #4
 800ca54:	1b1a      	subs	r2, r3, r4
 800ca56:	42a3      	cmp	r3, r4
 800ca58:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800ca5c:	bf08      	it	eq
 800ca5e:	2300      	moveq	r3, #0
 800ca60:	6102      	str	r2, [r0, #16]
 800ca62:	bf08      	it	eq
 800ca64:	6143      	streq	r3, [r0, #20]
 800ca66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ca6a:	f8dc c000 	ldr.w	ip, [ip]
 800ca6e:	fa0c fc08 	lsl.w	ip, ip, r8
 800ca72:	ea4c 0707 	orr.w	r7, ip, r7
 800ca76:	f849 7b04 	str.w	r7, [r9], #4
 800ca7a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ca7e:	40cf      	lsrs	r7, r1
 800ca80:	e7da      	b.n	800ca38 <rshift+0x4c>
 800ca82:	f851 cb04 	ldr.w	ip, [r1], #4
 800ca86:	f847 cf04 	str.w	ip, [r7, #4]!
 800ca8a:	e7c3      	b.n	800ca14 <rshift+0x28>
 800ca8c:	4623      	mov	r3, r4
 800ca8e:	e7e1      	b.n	800ca54 <rshift+0x68>

0800ca90 <__hexdig_fun>:
 800ca90:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800ca94:	2b09      	cmp	r3, #9
 800ca96:	d802      	bhi.n	800ca9e <__hexdig_fun+0xe>
 800ca98:	3820      	subs	r0, #32
 800ca9a:	b2c0      	uxtb	r0, r0
 800ca9c:	4770      	bx	lr
 800ca9e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800caa2:	2b05      	cmp	r3, #5
 800caa4:	d801      	bhi.n	800caaa <__hexdig_fun+0x1a>
 800caa6:	3847      	subs	r0, #71	@ 0x47
 800caa8:	e7f7      	b.n	800ca9a <__hexdig_fun+0xa>
 800caaa:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800caae:	2b05      	cmp	r3, #5
 800cab0:	d801      	bhi.n	800cab6 <__hexdig_fun+0x26>
 800cab2:	3827      	subs	r0, #39	@ 0x27
 800cab4:	e7f1      	b.n	800ca9a <__hexdig_fun+0xa>
 800cab6:	2000      	movs	r0, #0
 800cab8:	4770      	bx	lr
	...

0800cabc <__gethex>:
 800cabc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cac0:	b085      	sub	sp, #20
 800cac2:	468a      	mov	sl, r1
 800cac4:	9302      	str	r3, [sp, #8]
 800cac6:	680b      	ldr	r3, [r1, #0]
 800cac8:	9001      	str	r0, [sp, #4]
 800caca:	4690      	mov	r8, r2
 800cacc:	1c9c      	adds	r4, r3, #2
 800cace:	46a1      	mov	r9, r4
 800cad0:	f814 0b01 	ldrb.w	r0, [r4], #1
 800cad4:	2830      	cmp	r0, #48	@ 0x30
 800cad6:	d0fa      	beq.n	800cace <__gethex+0x12>
 800cad8:	eba9 0303 	sub.w	r3, r9, r3
 800cadc:	f1a3 0b02 	sub.w	fp, r3, #2
 800cae0:	f7ff ffd6 	bl	800ca90 <__hexdig_fun>
 800cae4:	4605      	mov	r5, r0
 800cae6:	2800      	cmp	r0, #0
 800cae8:	d168      	bne.n	800cbbc <__gethex+0x100>
 800caea:	49a0      	ldr	r1, [pc, #640]	@ (800cd6c <__gethex+0x2b0>)
 800caec:	2201      	movs	r2, #1
 800caee:	4648      	mov	r0, r9
 800caf0:	f7ff ff12 	bl	800c918 <strncmp>
 800caf4:	4607      	mov	r7, r0
 800caf6:	2800      	cmp	r0, #0
 800caf8:	d167      	bne.n	800cbca <__gethex+0x10e>
 800cafa:	f899 0001 	ldrb.w	r0, [r9, #1]
 800cafe:	4626      	mov	r6, r4
 800cb00:	f7ff ffc6 	bl	800ca90 <__hexdig_fun>
 800cb04:	2800      	cmp	r0, #0
 800cb06:	d062      	beq.n	800cbce <__gethex+0x112>
 800cb08:	4623      	mov	r3, r4
 800cb0a:	7818      	ldrb	r0, [r3, #0]
 800cb0c:	2830      	cmp	r0, #48	@ 0x30
 800cb0e:	4699      	mov	r9, r3
 800cb10:	f103 0301 	add.w	r3, r3, #1
 800cb14:	d0f9      	beq.n	800cb0a <__gethex+0x4e>
 800cb16:	f7ff ffbb 	bl	800ca90 <__hexdig_fun>
 800cb1a:	fab0 f580 	clz	r5, r0
 800cb1e:	096d      	lsrs	r5, r5, #5
 800cb20:	f04f 0b01 	mov.w	fp, #1
 800cb24:	464a      	mov	r2, r9
 800cb26:	4616      	mov	r6, r2
 800cb28:	3201      	adds	r2, #1
 800cb2a:	7830      	ldrb	r0, [r6, #0]
 800cb2c:	f7ff ffb0 	bl	800ca90 <__hexdig_fun>
 800cb30:	2800      	cmp	r0, #0
 800cb32:	d1f8      	bne.n	800cb26 <__gethex+0x6a>
 800cb34:	498d      	ldr	r1, [pc, #564]	@ (800cd6c <__gethex+0x2b0>)
 800cb36:	2201      	movs	r2, #1
 800cb38:	4630      	mov	r0, r6
 800cb3a:	f7ff feed 	bl	800c918 <strncmp>
 800cb3e:	2800      	cmp	r0, #0
 800cb40:	d13f      	bne.n	800cbc2 <__gethex+0x106>
 800cb42:	b944      	cbnz	r4, 800cb56 <__gethex+0x9a>
 800cb44:	1c74      	adds	r4, r6, #1
 800cb46:	4622      	mov	r2, r4
 800cb48:	4616      	mov	r6, r2
 800cb4a:	3201      	adds	r2, #1
 800cb4c:	7830      	ldrb	r0, [r6, #0]
 800cb4e:	f7ff ff9f 	bl	800ca90 <__hexdig_fun>
 800cb52:	2800      	cmp	r0, #0
 800cb54:	d1f8      	bne.n	800cb48 <__gethex+0x8c>
 800cb56:	1ba4      	subs	r4, r4, r6
 800cb58:	00a7      	lsls	r7, r4, #2
 800cb5a:	7833      	ldrb	r3, [r6, #0]
 800cb5c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800cb60:	2b50      	cmp	r3, #80	@ 0x50
 800cb62:	d13e      	bne.n	800cbe2 <__gethex+0x126>
 800cb64:	7873      	ldrb	r3, [r6, #1]
 800cb66:	2b2b      	cmp	r3, #43	@ 0x2b
 800cb68:	d033      	beq.n	800cbd2 <__gethex+0x116>
 800cb6a:	2b2d      	cmp	r3, #45	@ 0x2d
 800cb6c:	d034      	beq.n	800cbd8 <__gethex+0x11c>
 800cb6e:	1c71      	adds	r1, r6, #1
 800cb70:	2400      	movs	r4, #0
 800cb72:	7808      	ldrb	r0, [r1, #0]
 800cb74:	f7ff ff8c 	bl	800ca90 <__hexdig_fun>
 800cb78:	1e43      	subs	r3, r0, #1
 800cb7a:	b2db      	uxtb	r3, r3
 800cb7c:	2b18      	cmp	r3, #24
 800cb7e:	d830      	bhi.n	800cbe2 <__gethex+0x126>
 800cb80:	f1a0 0210 	sub.w	r2, r0, #16
 800cb84:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800cb88:	f7ff ff82 	bl	800ca90 <__hexdig_fun>
 800cb8c:	f100 3cff 	add.w	ip, r0, #4294967295
 800cb90:	fa5f fc8c 	uxtb.w	ip, ip
 800cb94:	f1bc 0f18 	cmp.w	ip, #24
 800cb98:	f04f 030a 	mov.w	r3, #10
 800cb9c:	d91e      	bls.n	800cbdc <__gethex+0x120>
 800cb9e:	b104      	cbz	r4, 800cba2 <__gethex+0xe6>
 800cba0:	4252      	negs	r2, r2
 800cba2:	4417      	add	r7, r2
 800cba4:	f8ca 1000 	str.w	r1, [sl]
 800cba8:	b1ed      	cbz	r5, 800cbe6 <__gethex+0x12a>
 800cbaa:	f1bb 0f00 	cmp.w	fp, #0
 800cbae:	bf0c      	ite	eq
 800cbb0:	2506      	moveq	r5, #6
 800cbb2:	2500      	movne	r5, #0
 800cbb4:	4628      	mov	r0, r5
 800cbb6:	b005      	add	sp, #20
 800cbb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cbbc:	2500      	movs	r5, #0
 800cbbe:	462c      	mov	r4, r5
 800cbc0:	e7b0      	b.n	800cb24 <__gethex+0x68>
 800cbc2:	2c00      	cmp	r4, #0
 800cbc4:	d1c7      	bne.n	800cb56 <__gethex+0x9a>
 800cbc6:	4627      	mov	r7, r4
 800cbc8:	e7c7      	b.n	800cb5a <__gethex+0x9e>
 800cbca:	464e      	mov	r6, r9
 800cbcc:	462f      	mov	r7, r5
 800cbce:	2501      	movs	r5, #1
 800cbd0:	e7c3      	b.n	800cb5a <__gethex+0x9e>
 800cbd2:	2400      	movs	r4, #0
 800cbd4:	1cb1      	adds	r1, r6, #2
 800cbd6:	e7cc      	b.n	800cb72 <__gethex+0xb6>
 800cbd8:	2401      	movs	r4, #1
 800cbda:	e7fb      	b.n	800cbd4 <__gethex+0x118>
 800cbdc:	fb03 0002 	mla	r0, r3, r2, r0
 800cbe0:	e7ce      	b.n	800cb80 <__gethex+0xc4>
 800cbe2:	4631      	mov	r1, r6
 800cbe4:	e7de      	b.n	800cba4 <__gethex+0xe8>
 800cbe6:	eba6 0309 	sub.w	r3, r6, r9
 800cbea:	3b01      	subs	r3, #1
 800cbec:	4629      	mov	r1, r5
 800cbee:	2b07      	cmp	r3, #7
 800cbf0:	dc0a      	bgt.n	800cc08 <__gethex+0x14c>
 800cbf2:	9801      	ldr	r0, [sp, #4]
 800cbf4:	f7fe f93c 	bl	800ae70 <_Balloc>
 800cbf8:	4604      	mov	r4, r0
 800cbfa:	b940      	cbnz	r0, 800cc0e <__gethex+0x152>
 800cbfc:	4b5c      	ldr	r3, [pc, #368]	@ (800cd70 <__gethex+0x2b4>)
 800cbfe:	4602      	mov	r2, r0
 800cc00:	21e4      	movs	r1, #228	@ 0xe4
 800cc02:	485c      	ldr	r0, [pc, #368]	@ (800cd74 <__gethex+0x2b8>)
 800cc04:	f7ff fec0 	bl	800c988 <__assert_func>
 800cc08:	3101      	adds	r1, #1
 800cc0a:	105b      	asrs	r3, r3, #1
 800cc0c:	e7ef      	b.n	800cbee <__gethex+0x132>
 800cc0e:	f100 0a14 	add.w	sl, r0, #20
 800cc12:	2300      	movs	r3, #0
 800cc14:	4655      	mov	r5, sl
 800cc16:	469b      	mov	fp, r3
 800cc18:	45b1      	cmp	r9, r6
 800cc1a:	d337      	bcc.n	800cc8c <__gethex+0x1d0>
 800cc1c:	f845 bb04 	str.w	fp, [r5], #4
 800cc20:	eba5 050a 	sub.w	r5, r5, sl
 800cc24:	10ad      	asrs	r5, r5, #2
 800cc26:	6125      	str	r5, [r4, #16]
 800cc28:	4658      	mov	r0, fp
 800cc2a:	f7fe fa13 	bl	800b054 <__hi0bits>
 800cc2e:	016d      	lsls	r5, r5, #5
 800cc30:	f8d8 6000 	ldr.w	r6, [r8]
 800cc34:	1a2d      	subs	r5, r5, r0
 800cc36:	42b5      	cmp	r5, r6
 800cc38:	dd54      	ble.n	800cce4 <__gethex+0x228>
 800cc3a:	1bad      	subs	r5, r5, r6
 800cc3c:	4629      	mov	r1, r5
 800cc3e:	4620      	mov	r0, r4
 800cc40:	f7fe fda7 	bl	800b792 <__any_on>
 800cc44:	4681      	mov	r9, r0
 800cc46:	b178      	cbz	r0, 800cc68 <__gethex+0x1ac>
 800cc48:	1e6b      	subs	r3, r5, #1
 800cc4a:	1159      	asrs	r1, r3, #5
 800cc4c:	f003 021f 	and.w	r2, r3, #31
 800cc50:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800cc54:	f04f 0901 	mov.w	r9, #1
 800cc58:	fa09 f202 	lsl.w	r2, r9, r2
 800cc5c:	420a      	tst	r2, r1
 800cc5e:	d003      	beq.n	800cc68 <__gethex+0x1ac>
 800cc60:	454b      	cmp	r3, r9
 800cc62:	dc36      	bgt.n	800ccd2 <__gethex+0x216>
 800cc64:	f04f 0902 	mov.w	r9, #2
 800cc68:	4629      	mov	r1, r5
 800cc6a:	4620      	mov	r0, r4
 800cc6c:	f7ff febe 	bl	800c9ec <rshift>
 800cc70:	442f      	add	r7, r5
 800cc72:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800cc76:	42bb      	cmp	r3, r7
 800cc78:	da42      	bge.n	800cd00 <__gethex+0x244>
 800cc7a:	9801      	ldr	r0, [sp, #4]
 800cc7c:	4621      	mov	r1, r4
 800cc7e:	f7fe f937 	bl	800aef0 <_Bfree>
 800cc82:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cc84:	2300      	movs	r3, #0
 800cc86:	6013      	str	r3, [r2, #0]
 800cc88:	25a3      	movs	r5, #163	@ 0xa3
 800cc8a:	e793      	b.n	800cbb4 <__gethex+0xf8>
 800cc8c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800cc90:	2a2e      	cmp	r2, #46	@ 0x2e
 800cc92:	d012      	beq.n	800ccba <__gethex+0x1fe>
 800cc94:	2b20      	cmp	r3, #32
 800cc96:	d104      	bne.n	800cca2 <__gethex+0x1e6>
 800cc98:	f845 bb04 	str.w	fp, [r5], #4
 800cc9c:	f04f 0b00 	mov.w	fp, #0
 800cca0:	465b      	mov	r3, fp
 800cca2:	7830      	ldrb	r0, [r6, #0]
 800cca4:	9303      	str	r3, [sp, #12]
 800cca6:	f7ff fef3 	bl	800ca90 <__hexdig_fun>
 800ccaa:	9b03      	ldr	r3, [sp, #12]
 800ccac:	f000 000f 	and.w	r0, r0, #15
 800ccb0:	4098      	lsls	r0, r3
 800ccb2:	ea4b 0b00 	orr.w	fp, fp, r0
 800ccb6:	3304      	adds	r3, #4
 800ccb8:	e7ae      	b.n	800cc18 <__gethex+0x15c>
 800ccba:	45b1      	cmp	r9, r6
 800ccbc:	d8ea      	bhi.n	800cc94 <__gethex+0x1d8>
 800ccbe:	492b      	ldr	r1, [pc, #172]	@ (800cd6c <__gethex+0x2b0>)
 800ccc0:	9303      	str	r3, [sp, #12]
 800ccc2:	2201      	movs	r2, #1
 800ccc4:	4630      	mov	r0, r6
 800ccc6:	f7ff fe27 	bl	800c918 <strncmp>
 800ccca:	9b03      	ldr	r3, [sp, #12]
 800cccc:	2800      	cmp	r0, #0
 800ccce:	d1e1      	bne.n	800cc94 <__gethex+0x1d8>
 800ccd0:	e7a2      	b.n	800cc18 <__gethex+0x15c>
 800ccd2:	1ea9      	subs	r1, r5, #2
 800ccd4:	4620      	mov	r0, r4
 800ccd6:	f7fe fd5c 	bl	800b792 <__any_on>
 800ccda:	2800      	cmp	r0, #0
 800ccdc:	d0c2      	beq.n	800cc64 <__gethex+0x1a8>
 800ccde:	f04f 0903 	mov.w	r9, #3
 800cce2:	e7c1      	b.n	800cc68 <__gethex+0x1ac>
 800cce4:	da09      	bge.n	800ccfa <__gethex+0x23e>
 800cce6:	1b75      	subs	r5, r6, r5
 800cce8:	4621      	mov	r1, r4
 800ccea:	9801      	ldr	r0, [sp, #4]
 800ccec:	462a      	mov	r2, r5
 800ccee:	f7fe fb17 	bl	800b320 <__lshift>
 800ccf2:	1b7f      	subs	r7, r7, r5
 800ccf4:	4604      	mov	r4, r0
 800ccf6:	f100 0a14 	add.w	sl, r0, #20
 800ccfa:	f04f 0900 	mov.w	r9, #0
 800ccfe:	e7b8      	b.n	800cc72 <__gethex+0x1b6>
 800cd00:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800cd04:	42bd      	cmp	r5, r7
 800cd06:	dd6f      	ble.n	800cde8 <__gethex+0x32c>
 800cd08:	1bed      	subs	r5, r5, r7
 800cd0a:	42ae      	cmp	r6, r5
 800cd0c:	dc34      	bgt.n	800cd78 <__gethex+0x2bc>
 800cd0e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800cd12:	2b02      	cmp	r3, #2
 800cd14:	d022      	beq.n	800cd5c <__gethex+0x2a0>
 800cd16:	2b03      	cmp	r3, #3
 800cd18:	d024      	beq.n	800cd64 <__gethex+0x2a8>
 800cd1a:	2b01      	cmp	r3, #1
 800cd1c:	d115      	bne.n	800cd4a <__gethex+0x28e>
 800cd1e:	42ae      	cmp	r6, r5
 800cd20:	d113      	bne.n	800cd4a <__gethex+0x28e>
 800cd22:	2e01      	cmp	r6, #1
 800cd24:	d10b      	bne.n	800cd3e <__gethex+0x282>
 800cd26:	9a02      	ldr	r2, [sp, #8]
 800cd28:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800cd2c:	6013      	str	r3, [r2, #0]
 800cd2e:	2301      	movs	r3, #1
 800cd30:	6123      	str	r3, [r4, #16]
 800cd32:	f8ca 3000 	str.w	r3, [sl]
 800cd36:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cd38:	2562      	movs	r5, #98	@ 0x62
 800cd3a:	601c      	str	r4, [r3, #0]
 800cd3c:	e73a      	b.n	800cbb4 <__gethex+0xf8>
 800cd3e:	1e71      	subs	r1, r6, #1
 800cd40:	4620      	mov	r0, r4
 800cd42:	f7fe fd26 	bl	800b792 <__any_on>
 800cd46:	2800      	cmp	r0, #0
 800cd48:	d1ed      	bne.n	800cd26 <__gethex+0x26a>
 800cd4a:	9801      	ldr	r0, [sp, #4]
 800cd4c:	4621      	mov	r1, r4
 800cd4e:	f7fe f8cf 	bl	800aef0 <_Bfree>
 800cd52:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cd54:	2300      	movs	r3, #0
 800cd56:	6013      	str	r3, [r2, #0]
 800cd58:	2550      	movs	r5, #80	@ 0x50
 800cd5a:	e72b      	b.n	800cbb4 <__gethex+0xf8>
 800cd5c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cd5e:	2b00      	cmp	r3, #0
 800cd60:	d1f3      	bne.n	800cd4a <__gethex+0x28e>
 800cd62:	e7e0      	b.n	800cd26 <__gethex+0x26a>
 800cd64:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cd66:	2b00      	cmp	r3, #0
 800cd68:	d1dd      	bne.n	800cd26 <__gethex+0x26a>
 800cd6a:	e7ee      	b.n	800cd4a <__gethex+0x28e>
 800cd6c:	0800e528 	.word	0x0800e528
 800cd70:	0800e3bd 	.word	0x0800e3bd
 800cd74:	0800e6d6 	.word	0x0800e6d6
 800cd78:	1e6f      	subs	r7, r5, #1
 800cd7a:	f1b9 0f00 	cmp.w	r9, #0
 800cd7e:	d130      	bne.n	800cde2 <__gethex+0x326>
 800cd80:	b127      	cbz	r7, 800cd8c <__gethex+0x2d0>
 800cd82:	4639      	mov	r1, r7
 800cd84:	4620      	mov	r0, r4
 800cd86:	f7fe fd04 	bl	800b792 <__any_on>
 800cd8a:	4681      	mov	r9, r0
 800cd8c:	117a      	asrs	r2, r7, #5
 800cd8e:	2301      	movs	r3, #1
 800cd90:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800cd94:	f007 071f 	and.w	r7, r7, #31
 800cd98:	40bb      	lsls	r3, r7
 800cd9a:	4213      	tst	r3, r2
 800cd9c:	4629      	mov	r1, r5
 800cd9e:	4620      	mov	r0, r4
 800cda0:	bf18      	it	ne
 800cda2:	f049 0902 	orrne.w	r9, r9, #2
 800cda6:	f7ff fe21 	bl	800c9ec <rshift>
 800cdaa:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800cdae:	1b76      	subs	r6, r6, r5
 800cdb0:	2502      	movs	r5, #2
 800cdb2:	f1b9 0f00 	cmp.w	r9, #0
 800cdb6:	d047      	beq.n	800ce48 <__gethex+0x38c>
 800cdb8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800cdbc:	2b02      	cmp	r3, #2
 800cdbe:	d015      	beq.n	800cdec <__gethex+0x330>
 800cdc0:	2b03      	cmp	r3, #3
 800cdc2:	d017      	beq.n	800cdf4 <__gethex+0x338>
 800cdc4:	2b01      	cmp	r3, #1
 800cdc6:	d109      	bne.n	800cddc <__gethex+0x320>
 800cdc8:	f019 0f02 	tst.w	r9, #2
 800cdcc:	d006      	beq.n	800cddc <__gethex+0x320>
 800cdce:	f8da 3000 	ldr.w	r3, [sl]
 800cdd2:	ea49 0903 	orr.w	r9, r9, r3
 800cdd6:	f019 0f01 	tst.w	r9, #1
 800cdda:	d10e      	bne.n	800cdfa <__gethex+0x33e>
 800cddc:	f045 0510 	orr.w	r5, r5, #16
 800cde0:	e032      	b.n	800ce48 <__gethex+0x38c>
 800cde2:	f04f 0901 	mov.w	r9, #1
 800cde6:	e7d1      	b.n	800cd8c <__gethex+0x2d0>
 800cde8:	2501      	movs	r5, #1
 800cdea:	e7e2      	b.n	800cdb2 <__gethex+0x2f6>
 800cdec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cdee:	f1c3 0301 	rsb	r3, r3, #1
 800cdf2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800cdf4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cdf6:	2b00      	cmp	r3, #0
 800cdf8:	d0f0      	beq.n	800cddc <__gethex+0x320>
 800cdfa:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800cdfe:	f104 0314 	add.w	r3, r4, #20
 800ce02:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800ce06:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800ce0a:	f04f 0c00 	mov.w	ip, #0
 800ce0e:	4618      	mov	r0, r3
 800ce10:	f853 2b04 	ldr.w	r2, [r3], #4
 800ce14:	f1b2 3fff 	cmp.w	r2, #4294967295
 800ce18:	d01b      	beq.n	800ce52 <__gethex+0x396>
 800ce1a:	3201      	adds	r2, #1
 800ce1c:	6002      	str	r2, [r0, #0]
 800ce1e:	2d02      	cmp	r5, #2
 800ce20:	f104 0314 	add.w	r3, r4, #20
 800ce24:	d13c      	bne.n	800cea0 <__gethex+0x3e4>
 800ce26:	f8d8 2000 	ldr.w	r2, [r8]
 800ce2a:	3a01      	subs	r2, #1
 800ce2c:	42b2      	cmp	r2, r6
 800ce2e:	d109      	bne.n	800ce44 <__gethex+0x388>
 800ce30:	1171      	asrs	r1, r6, #5
 800ce32:	2201      	movs	r2, #1
 800ce34:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ce38:	f006 061f 	and.w	r6, r6, #31
 800ce3c:	fa02 f606 	lsl.w	r6, r2, r6
 800ce40:	421e      	tst	r6, r3
 800ce42:	d13a      	bne.n	800ceba <__gethex+0x3fe>
 800ce44:	f045 0520 	orr.w	r5, r5, #32
 800ce48:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ce4a:	601c      	str	r4, [r3, #0]
 800ce4c:	9b02      	ldr	r3, [sp, #8]
 800ce4e:	601f      	str	r7, [r3, #0]
 800ce50:	e6b0      	b.n	800cbb4 <__gethex+0xf8>
 800ce52:	4299      	cmp	r1, r3
 800ce54:	f843 cc04 	str.w	ip, [r3, #-4]
 800ce58:	d8d9      	bhi.n	800ce0e <__gethex+0x352>
 800ce5a:	68a3      	ldr	r3, [r4, #8]
 800ce5c:	459b      	cmp	fp, r3
 800ce5e:	db17      	blt.n	800ce90 <__gethex+0x3d4>
 800ce60:	6861      	ldr	r1, [r4, #4]
 800ce62:	9801      	ldr	r0, [sp, #4]
 800ce64:	3101      	adds	r1, #1
 800ce66:	f7fe f803 	bl	800ae70 <_Balloc>
 800ce6a:	4681      	mov	r9, r0
 800ce6c:	b918      	cbnz	r0, 800ce76 <__gethex+0x3ba>
 800ce6e:	4b1a      	ldr	r3, [pc, #104]	@ (800ced8 <__gethex+0x41c>)
 800ce70:	4602      	mov	r2, r0
 800ce72:	2184      	movs	r1, #132	@ 0x84
 800ce74:	e6c5      	b.n	800cc02 <__gethex+0x146>
 800ce76:	6922      	ldr	r2, [r4, #16]
 800ce78:	3202      	adds	r2, #2
 800ce7a:	f104 010c 	add.w	r1, r4, #12
 800ce7e:	0092      	lsls	r2, r2, #2
 800ce80:	300c      	adds	r0, #12
 800ce82:	f7ff fd6b 	bl	800c95c <memcpy>
 800ce86:	4621      	mov	r1, r4
 800ce88:	9801      	ldr	r0, [sp, #4]
 800ce8a:	f7fe f831 	bl	800aef0 <_Bfree>
 800ce8e:	464c      	mov	r4, r9
 800ce90:	6923      	ldr	r3, [r4, #16]
 800ce92:	1c5a      	adds	r2, r3, #1
 800ce94:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ce98:	6122      	str	r2, [r4, #16]
 800ce9a:	2201      	movs	r2, #1
 800ce9c:	615a      	str	r2, [r3, #20]
 800ce9e:	e7be      	b.n	800ce1e <__gethex+0x362>
 800cea0:	6922      	ldr	r2, [r4, #16]
 800cea2:	455a      	cmp	r2, fp
 800cea4:	dd0b      	ble.n	800cebe <__gethex+0x402>
 800cea6:	2101      	movs	r1, #1
 800cea8:	4620      	mov	r0, r4
 800ceaa:	f7ff fd9f 	bl	800c9ec <rshift>
 800ceae:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ceb2:	3701      	adds	r7, #1
 800ceb4:	42bb      	cmp	r3, r7
 800ceb6:	f6ff aee0 	blt.w	800cc7a <__gethex+0x1be>
 800ceba:	2501      	movs	r5, #1
 800cebc:	e7c2      	b.n	800ce44 <__gethex+0x388>
 800cebe:	f016 061f 	ands.w	r6, r6, #31
 800cec2:	d0fa      	beq.n	800ceba <__gethex+0x3fe>
 800cec4:	4453      	add	r3, sl
 800cec6:	f1c6 0620 	rsb	r6, r6, #32
 800ceca:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800cece:	f7fe f8c1 	bl	800b054 <__hi0bits>
 800ced2:	42b0      	cmp	r0, r6
 800ced4:	dbe7      	blt.n	800cea6 <__gethex+0x3ea>
 800ced6:	e7f0      	b.n	800ceba <__gethex+0x3fe>
 800ced8:	0800e3bd 	.word	0x0800e3bd

0800cedc <L_shift>:
 800cedc:	f1c2 0208 	rsb	r2, r2, #8
 800cee0:	0092      	lsls	r2, r2, #2
 800cee2:	b570      	push	{r4, r5, r6, lr}
 800cee4:	f1c2 0620 	rsb	r6, r2, #32
 800cee8:	6843      	ldr	r3, [r0, #4]
 800ceea:	6804      	ldr	r4, [r0, #0]
 800ceec:	fa03 f506 	lsl.w	r5, r3, r6
 800cef0:	432c      	orrs	r4, r5
 800cef2:	40d3      	lsrs	r3, r2
 800cef4:	6004      	str	r4, [r0, #0]
 800cef6:	f840 3f04 	str.w	r3, [r0, #4]!
 800cefa:	4288      	cmp	r0, r1
 800cefc:	d3f4      	bcc.n	800cee8 <L_shift+0xc>
 800cefe:	bd70      	pop	{r4, r5, r6, pc}

0800cf00 <__match>:
 800cf00:	b530      	push	{r4, r5, lr}
 800cf02:	6803      	ldr	r3, [r0, #0]
 800cf04:	3301      	adds	r3, #1
 800cf06:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cf0a:	b914      	cbnz	r4, 800cf12 <__match+0x12>
 800cf0c:	6003      	str	r3, [r0, #0]
 800cf0e:	2001      	movs	r0, #1
 800cf10:	bd30      	pop	{r4, r5, pc}
 800cf12:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cf16:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800cf1a:	2d19      	cmp	r5, #25
 800cf1c:	bf98      	it	ls
 800cf1e:	3220      	addls	r2, #32
 800cf20:	42a2      	cmp	r2, r4
 800cf22:	d0f0      	beq.n	800cf06 <__match+0x6>
 800cf24:	2000      	movs	r0, #0
 800cf26:	e7f3      	b.n	800cf10 <__match+0x10>

0800cf28 <__hexnan>:
 800cf28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf2c:	680b      	ldr	r3, [r1, #0]
 800cf2e:	6801      	ldr	r1, [r0, #0]
 800cf30:	115e      	asrs	r6, r3, #5
 800cf32:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800cf36:	f013 031f 	ands.w	r3, r3, #31
 800cf3a:	b087      	sub	sp, #28
 800cf3c:	bf18      	it	ne
 800cf3e:	3604      	addne	r6, #4
 800cf40:	2500      	movs	r5, #0
 800cf42:	1f37      	subs	r7, r6, #4
 800cf44:	4682      	mov	sl, r0
 800cf46:	4690      	mov	r8, r2
 800cf48:	9301      	str	r3, [sp, #4]
 800cf4a:	f846 5c04 	str.w	r5, [r6, #-4]
 800cf4e:	46b9      	mov	r9, r7
 800cf50:	463c      	mov	r4, r7
 800cf52:	9502      	str	r5, [sp, #8]
 800cf54:	46ab      	mov	fp, r5
 800cf56:	784a      	ldrb	r2, [r1, #1]
 800cf58:	1c4b      	adds	r3, r1, #1
 800cf5a:	9303      	str	r3, [sp, #12]
 800cf5c:	b342      	cbz	r2, 800cfb0 <__hexnan+0x88>
 800cf5e:	4610      	mov	r0, r2
 800cf60:	9105      	str	r1, [sp, #20]
 800cf62:	9204      	str	r2, [sp, #16]
 800cf64:	f7ff fd94 	bl	800ca90 <__hexdig_fun>
 800cf68:	2800      	cmp	r0, #0
 800cf6a:	d151      	bne.n	800d010 <__hexnan+0xe8>
 800cf6c:	9a04      	ldr	r2, [sp, #16]
 800cf6e:	9905      	ldr	r1, [sp, #20]
 800cf70:	2a20      	cmp	r2, #32
 800cf72:	d818      	bhi.n	800cfa6 <__hexnan+0x7e>
 800cf74:	9b02      	ldr	r3, [sp, #8]
 800cf76:	459b      	cmp	fp, r3
 800cf78:	dd13      	ble.n	800cfa2 <__hexnan+0x7a>
 800cf7a:	454c      	cmp	r4, r9
 800cf7c:	d206      	bcs.n	800cf8c <__hexnan+0x64>
 800cf7e:	2d07      	cmp	r5, #7
 800cf80:	dc04      	bgt.n	800cf8c <__hexnan+0x64>
 800cf82:	462a      	mov	r2, r5
 800cf84:	4649      	mov	r1, r9
 800cf86:	4620      	mov	r0, r4
 800cf88:	f7ff ffa8 	bl	800cedc <L_shift>
 800cf8c:	4544      	cmp	r4, r8
 800cf8e:	d952      	bls.n	800d036 <__hexnan+0x10e>
 800cf90:	2300      	movs	r3, #0
 800cf92:	f1a4 0904 	sub.w	r9, r4, #4
 800cf96:	f844 3c04 	str.w	r3, [r4, #-4]
 800cf9a:	f8cd b008 	str.w	fp, [sp, #8]
 800cf9e:	464c      	mov	r4, r9
 800cfa0:	461d      	mov	r5, r3
 800cfa2:	9903      	ldr	r1, [sp, #12]
 800cfa4:	e7d7      	b.n	800cf56 <__hexnan+0x2e>
 800cfa6:	2a29      	cmp	r2, #41	@ 0x29
 800cfa8:	d157      	bne.n	800d05a <__hexnan+0x132>
 800cfaa:	3102      	adds	r1, #2
 800cfac:	f8ca 1000 	str.w	r1, [sl]
 800cfb0:	f1bb 0f00 	cmp.w	fp, #0
 800cfb4:	d051      	beq.n	800d05a <__hexnan+0x132>
 800cfb6:	454c      	cmp	r4, r9
 800cfb8:	d206      	bcs.n	800cfc8 <__hexnan+0xa0>
 800cfba:	2d07      	cmp	r5, #7
 800cfbc:	dc04      	bgt.n	800cfc8 <__hexnan+0xa0>
 800cfbe:	462a      	mov	r2, r5
 800cfc0:	4649      	mov	r1, r9
 800cfc2:	4620      	mov	r0, r4
 800cfc4:	f7ff ff8a 	bl	800cedc <L_shift>
 800cfc8:	4544      	cmp	r4, r8
 800cfca:	d936      	bls.n	800d03a <__hexnan+0x112>
 800cfcc:	f1a8 0204 	sub.w	r2, r8, #4
 800cfd0:	4623      	mov	r3, r4
 800cfd2:	f853 1b04 	ldr.w	r1, [r3], #4
 800cfd6:	f842 1f04 	str.w	r1, [r2, #4]!
 800cfda:	429f      	cmp	r7, r3
 800cfdc:	d2f9      	bcs.n	800cfd2 <__hexnan+0xaa>
 800cfde:	1b3b      	subs	r3, r7, r4
 800cfe0:	f023 0303 	bic.w	r3, r3, #3
 800cfe4:	3304      	adds	r3, #4
 800cfe6:	3401      	adds	r4, #1
 800cfe8:	3e03      	subs	r6, #3
 800cfea:	42b4      	cmp	r4, r6
 800cfec:	bf88      	it	hi
 800cfee:	2304      	movhi	r3, #4
 800cff0:	4443      	add	r3, r8
 800cff2:	2200      	movs	r2, #0
 800cff4:	f843 2b04 	str.w	r2, [r3], #4
 800cff8:	429f      	cmp	r7, r3
 800cffa:	d2fb      	bcs.n	800cff4 <__hexnan+0xcc>
 800cffc:	683b      	ldr	r3, [r7, #0]
 800cffe:	b91b      	cbnz	r3, 800d008 <__hexnan+0xe0>
 800d000:	4547      	cmp	r7, r8
 800d002:	d128      	bne.n	800d056 <__hexnan+0x12e>
 800d004:	2301      	movs	r3, #1
 800d006:	603b      	str	r3, [r7, #0]
 800d008:	2005      	movs	r0, #5
 800d00a:	b007      	add	sp, #28
 800d00c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d010:	3501      	adds	r5, #1
 800d012:	2d08      	cmp	r5, #8
 800d014:	f10b 0b01 	add.w	fp, fp, #1
 800d018:	dd06      	ble.n	800d028 <__hexnan+0x100>
 800d01a:	4544      	cmp	r4, r8
 800d01c:	d9c1      	bls.n	800cfa2 <__hexnan+0x7a>
 800d01e:	2300      	movs	r3, #0
 800d020:	f844 3c04 	str.w	r3, [r4, #-4]
 800d024:	2501      	movs	r5, #1
 800d026:	3c04      	subs	r4, #4
 800d028:	6822      	ldr	r2, [r4, #0]
 800d02a:	f000 000f 	and.w	r0, r0, #15
 800d02e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800d032:	6020      	str	r0, [r4, #0]
 800d034:	e7b5      	b.n	800cfa2 <__hexnan+0x7a>
 800d036:	2508      	movs	r5, #8
 800d038:	e7b3      	b.n	800cfa2 <__hexnan+0x7a>
 800d03a:	9b01      	ldr	r3, [sp, #4]
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	d0dd      	beq.n	800cffc <__hexnan+0xd4>
 800d040:	f1c3 0320 	rsb	r3, r3, #32
 800d044:	f04f 32ff 	mov.w	r2, #4294967295
 800d048:	40da      	lsrs	r2, r3
 800d04a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800d04e:	4013      	ands	r3, r2
 800d050:	f846 3c04 	str.w	r3, [r6, #-4]
 800d054:	e7d2      	b.n	800cffc <__hexnan+0xd4>
 800d056:	3f04      	subs	r7, #4
 800d058:	e7d0      	b.n	800cffc <__hexnan+0xd4>
 800d05a:	2004      	movs	r0, #4
 800d05c:	e7d5      	b.n	800d00a <__hexnan+0xe2>

0800d05e <__ascii_mbtowc>:
 800d05e:	b082      	sub	sp, #8
 800d060:	b901      	cbnz	r1, 800d064 <__ascii_mbtowc+0x6>
 800d062:	a901      	add	r1, sp, #4
 800d064:	b142      	cbz	r2, 800d078 <__ascii_mbtowc+0x1a>
 800d066:	b14b      	cbz	r3, 800d07c <__ascii_mbtowc+0x1e>
 800d068:	7813      	ldrb	r3, [r2, #0]
 800d06a:	600b      	str	r3, [r1, #0]
 800d06c:	7812      	ldrb	r2, [r2, #0]
 800d06e:	1e10      	subs	r0, r2, #0
 800d070:	bf18      	it	ne
 800d072:	2001      	movne	r0, #1
 800d074:	b002      	add	sp, #8
 800d076:	4770      	bx	lr
 800d078:	4610      	mov	r0, r2
 800d07a:	e7fb      	b.n	800d074 <__ascii_mbtowc+0x16>
 800d07c:	f06f 0001 	mvn.w	r0, #1
 800d080:	e7f8      	b.n	800d074 <__ascii_mbtowc+0x16>

0800d082 <_realloc_r>:
 800d082:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d086:	4680      	mov	r8, r0
 800d088:	4615      	mov	r5, r2
 800d08a:	460c      	mov	r4, r1
 800d08c:	b921      	cbnz	r1, 800d098 <_realloc_r+0x16>
 800d08e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d092:	4611      	mov	r1, r2
 800d094:	f7fd be60 	b.w	800ad58 <_malloc_r>
 800d098:	b92a      	cbnz	r2, 800d0a6 <_realloc_r+0x24>
 800d09a:	f7fd fde9 	bl	800ac70 <_free_r>
 800d09e:	2400      	movs	r4, #0
 800d0a0:	4620      	mov	r0, r4
 800d0a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d0a6:	f000 f840 	bl	800d12a <_malloc_usable_size_r>
 800d0aa:	4285      	cmp	r5, r0
 800d0ac:	4606      	mov	r6, r0
 800d0ae:	d802      	bhi.n	800d0b6 <_realloc_r+0x34>
 800d0b0:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800d0b4:	d8f4      	bhi.n	800d0a0 <_realloc_r+0x1e>
 800d0b6:	4629      	mov	r1, r5
 800d0b8:	4640      	mov	r0, r8
 800d0ba:	f7fd fe4d 	bl	800ad58 <_malloc_r>
 800d0be:	4607      	mov	r7, r0
 800d0c0:	2800      	cmp	r0, #0
 800d0c2:	d0ec      	beq.n	800d09e <_realloc_r+0x1c>
 800d0c4:	42b5      	cmp	r5, r6
 800d0c6:	462a      	mov	r2, r5
 800d0c8:	4621      	mov	r1, r4
 800d0ca:	bf28      	it	cs
 800d0cc:	4632      	movcs	r2, r6
 800d0ce:	f7ff fc45 	bl	800c95c <memcpy>
 800d0d2:	4621      	mov	r1, r4
 800d0d4:	4640      	mov	r0, r8
 800d0d6:	f7fd fdcb 	bl	800ac70 <_free_r>
 800d0da:	463c      	mov	r4, r7
 800d0dc:	e7e0      	b.n	800d0a0 <_realloc_r+0x1e>

0800d0de <__ascii_wctomb>:
 800d0de:	4603      	mov	r3, r0
 800d0e0:	4608      	mov	r0, r1
 800d0e2:	b141      	cbz	r1, 800d0f6 <__ascii_wctomb+0x18>
 800d0e4:	2aff      	cmp	r2, #255	@ 0xff
 800d0e6:	d904      	bls.n	800d0f2 <__ascii_wctomb+0x14>
 800d0e8:	228a      	movs	r2, #138	@ 0x8a
 800d0ea:	601a      	str	r2, [r3, #0]
 800d0ec:	f04f 30ff 	mov.w	r0, #4294967295
 800d0f0:	4770      	bx	lr
 800d0f2:	700a      	strb	r2, [r1, #0]
 800d0f4:	2001      	movs	r0, #1
 800d0f6:	4770      	bx	lr

0800d0f8 <fiprintf>:
 800d0f8:	b40e      	push	{r1, r2, r3}
 800d0fa:	b503      	push	{r0, r1, lr}
 800d0fc:	4601      	mov	r1, r0
 800d0fe:	ab03      	add	r3, sp, #12
 800d100:	4805      	ldr	r0, [pc, #20]	@ (800d118 <fiprintf+0x20>)
 800d102:	f853 2b04 	ldr.w	r2, [r3], #4
 800d106:	6800      	ldr	r0, [r0, #0]
 800d108:	9301      	str	r3, [sp, #4]
 800d10a:	f000 f83f 	bl	800d18c <_vfiprintf_r>
 800d10e:	b002      	add	sp, #8
 800d110:	f85d eb04 	ldr.w	lr, [sp], #4
 800d114:	b003      	add	sp, #12
 800d116:	4770      	bx	lr
 800d118:	20000068 	.word	0x20000068

0800d11c <abort>:
 800d11c:	b508      	push	{r3, lr}
 800d11e:	2006      	movs	r0, #6
 800d120:	f000 fa08 	bl	800d534 <raise>
 800d124:	2001      	movs	r0, #1
 800d126:	f7f5 f83f 	bl	80021a8 <_exit>

0800d12a <_malloc_usable_size_r>:
 800d12a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d12e:	1f18      	subs	r0, r3, #4
 800d130:	2b00      	cmp	r3, #0
 800d132:	bfbc      	itt	lt
 800d134:	580b      	ldrlt	r3, [r1, r0]
 800d136:	18c0      	addlt	r0, r0, r3
 800d138:	4770      	bx	lr

0800d13a <__sfputc_r>:
 800d13a:	6893      	ldr	r3, [r2, #8]
 800d13c:	3b01      	subs	r3, #1
 800d13e:	2b00      	cmp	r3, #0
 800d140:	b410      	push	{r4}
 800d142:	6093      	str	r3, [r2, #8]
 800d144:	da08      	bge.n	800d158 <__sfputc_r+0x1e>
 800d146:	6994      	ldr	r4, [r2, #24]
 800d148:	42a3      	cmp	r3, r4
 800d14a:	db01      	blt.n	800d150 <__sfputc_r+0x16>
 800d14c:	290a      	cmp	r1, #10
 800d14e:	d103      	bne.n	800d158 <__sfputc_r+0x1e>
 800d150:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d154:	f000 b932 	b.w	800d3bc <__swbuf_r>
 800d158:	6813      	ldr	r3, [r2, #0]
 800d15a:	1c58      	adds	r0, r3, #1
 800d15c:	6010      	str	r0, [r2, #0]
 800d15e:	7019      	strb	r1, [r3, #0]
 800d160:	4608      	mov	r0, r1
 800d162:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d166:	4770      	bx	lr

0800d168 <__sfputs_r>:
 800d168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d16a:	4606      	mov	r6, r0
 800d16c:	460f      	mov	r7, r1
 800d16e:	4614      	mov	r4, r2
 800d170:	18d5      	adds	r5, r2, r3
 800d172:	42ac      	cmp	r4, r5
 800d174:	d101      	bne.n	800d17a <__sfputs_r+0x12>
 800d176:	2000      	movs	r0, #0
 800d178:	e007      	b.n	800d18a <__sfputs_r+0x22>
 800d17a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d17e:	463a      	mov	r2, r7
 800d180:	4630      	mov	r0, r6
 800d182:	f7ff ffda 	bl	800d13a <__sfputc_r>
 800d186:	1c43      	adds	r3, r0, #1
 800d188:	d1f3      	bne.n	800d172 <__sfputs_r+0xa>
 800d18a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d18c <_vfiprintf_r>:
 800d18c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d190:	460d      	mov	r5, r1
 800d192:	b09d      	sub	sp, #116	@ 0x74
 800d194:	4614      	mov	r4, r2
 800d196:	4698      	mov	r8, r3
 800d198:	4606      	mov	r6, r0
 800d19a:	b118      	cbz	r0, 800d1a4 <_vfiprintf_r+0x18>
 800d19c:	6a03      	ldr	r3, [r0, #32]
 800d19e:	b90b      	cbnz	r3, 800d1a4 <_vfiprintf_r+0x18>
 800d1a0:	f7fc fdc6 	bl	8009d30 <__sinit>
 800d1a4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d1a6:	07d9      	lsls	r1, r3, #31
 800d1a8:	d405      	bmi.n	800d1b6 <_vfiprintf_r+0x2a>
 800d1aa:	89ab      	ldrh	r3, [r5, #12]
 800d1ac:	059a      	lsls	r2, r3, #22
 800d1ae:	d402      	bmi.n	800d1b6 <_vfiprintf_r+0x2a>
 800d1b0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d1b2:	f7fc ff08 	bl	8009fc6 <__retarget_lock_acquire_recursive>
 800d1b6:	89ab      	ldrh	r3, [r5, #12]
 800d1b8:	071b      	lsls	r3, r3, #28
 800d1ba:	d501      	bpl.n	800d1c0 <_vfiprintf_r+0x34>
 800d1bc:	692b      	ldr	r3, [r5, #16]
 800d1be:	b99b      	cbnz	r3, 800d1e8 <_vfiprintf_r+0x5c>
 800d1c0:	4629      	mov	r1, r5
 800d1c2:	4630      	mov	r0, r6
 800d1c4:	f000 f938 	bl	800d438 <__swsetup_r>
 800d1c8:	b170      	cbz	r0, 800d1e8 <_vfiprintf_r+0x5c>
 800d1ca:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d1cc:	07dc      	lsls	r4, r3, #31
 800d1ce:	d504      	bpl.n	800d1da <_vfiprintf_r+0x4e>
 800d1d0:	f04f 30ff 	mov.w	r0, #4294967295
 800d1d4:	b01d      	add	sp, #116	@ 0x74
 800d1d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d1da:	89ab      	ldrh	r3, [r5, #12]
 800d1dc:	0598      	lsls	r0, r3, #22
 800d1de:	d4f7      	bmi.n	800d1d0 <_vfiprintf_r+0x44>
 800d1e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d1e2:	f7fc fef1 	bl	8009fc8 <__retarget_lock_release_recursive>
 800d1e6:	e7f3      	b.n	800d1d0 <_vfiprintf_r+0x44>
 800d1e8:	2300      	movs	r3, #0
 800d1ea:	9309      	str	r3, [sp, #36]	@ 0x24
 800d1ec:	2320      	movs	r3, #32
 800d1ee:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d1f2:	f8cd 800c 	str.w	r8, [sp, #12]
 800d1f6:	2330      	movs	r3, #48	@ 0x30
 800d1f8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800d3a8 <_vfiprintf_r+0x21c>
 800d1fc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d200:	f04f 0901 	mov.w	r9, #1
 800d204:	4623      	mov	r3, r4
 800d206:	469a      	mov	sl, r3
 800d208:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d20c:	b10a      	cbz	r2, 800d212 <_vfiprintf_r+0x86>
 800d20e:	2a25      	cmp	r2, #37	@ 0x25
 800d210:	d1f9      	bne.n	800d206 <_vfiprintf_r+0x7a>
 800d212:	ebba 0b04 	subs.w	fp, sl, r4
 800d216:	d00b      	beq.n	800d230 <_vfiprintf_r+0xa4>
 800d218:	465b      	mov	r3, fp
 800d21a:	4622      	mov	r2, r4
 800d21c:	4629      	mov	r1, r5
 800d21e:	4630      	mov	r0, r6
 800d220:	f7ff ffa2 	bl	800d168 <__sfputs_r>
 800d224:	3001      	adds	r0, #1
 800d226:	f000 80a7 	beq.w	800d378 <_vfiprintf_r+0x1ec>
 800d22a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d22c:	445a      	add	r2, fp
 800d22e:	9209      	str	r2, [sp, #36]	@ 0x24
 800d230:	f89a 3000 	ldrb.w	r3, [sl]
 800d234:	2b00      	cmp	r3, #0
 800d236:	f000 809f 	beq.w	800d378 <_vfiprintf_r+0x1ec>
 800d23a:	2300      	movs	r3, #0
 800d23c:	f04f 32ff 	mov.w	r2, #4294967295
 800d240:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d244:	f10a 0a01 	add.w	sl, sl, #1
 800d248:	9304      	str	r3, [sp, #16]
 800d24a:	9307      	str	r3, [sp, #28]
 800d24c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d250:	931a      	str	r3, [sp, #104]	@ 0x68
 800d252:	4654      	mov	r4, sl
 800d254:	2205      	movs	r2, #5
 800d256:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d25a:	4853      	ldr	r0, [pc, #332]	@ (800d3a8 <_vfiprintf_r+0x21c>)
 800d25c:	f7f2 ffb8 	bl	80001d0 <memchr>
 800d260:	9a04      	ldr	r2, [sp, #16]
 800d262:	b9d8      	cbnz	r0, 800d29c <_vfiprintf_r+0x110>
 800d264:	06d1      	lsls	r1, r2, #27
 800d266:	bf44      	itt	mi
 800d268:	2320      	movmi	r3, #32
 800d26a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d26e:	0713      	lsls	r3, r2, #28
 800d270:	bf44      	itt	mi
 800d272:	232b      	movmi	r3, #43	@ 0x2b
 800d274:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d278:	f89a 3000 	ldrb.w	r3, [sl]
 800d27c:	2b2a      	cmp	r3, #42	@ 0x2a
 800d27e:	d015      	beq.n	800d2ac <_vfiprintf_r+0x120>
 800d280:	9a07      	ldr	r2, [sp, #28]
 800d282:	4654      	mov	r4, sl
 800d284:	2000      	movs	r0, #0
 800d286:	f04f 0c0a 	mov.w	ip, #10
 800d28a:	4621      	mov	r1, r4
 800d28c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d290:	3b30      	subs	r3, #48	@ 0x30
 800d292:	2b09      	cmp	r3, #9
 800d294:	d94b      	bls.n	800d32e <_vfiprintf_r+0x1a2>
 800d296:	b1b0      	cbz	r0, 800d2c6 <_vfiprintf_r+0x13a>
 800d298:	9207      	str	r2, [sp, #28]
 800d29a:	e014      	b.n	800d2c6 <_vfiprintf_r+0x13a>
 800d29c:	eba0 0308 	sub.w	r3, r0, r8
 800d2a0:	fa09 f303 	lsl.w	r3, r9, r3
 800d2a4:	4313      	orrs	r3, r2
 800d2a6:	9304      	str	r3, [sp, #16]
 800d2a8:	46a2      	mov	sl, r4
 800d2aa:	e7d2      	b.n	800d252 <_vfiprintf_r+0xc6>
 800d2ac:	9b03      	ldr	r3, [sp, #12]
 800d2ae:	1d19      	adds	r1, r3, #4
 800d2b0:	681b      	ldr	r3, [r3, #0]
 800d2b2:	9103      	str	r1, [sp, #12]
 800d2b4:	2b00      	cmp	r3, #0
 800d2b6:	bfbb      	ittet	lt
 800d2b8:	425b      	neglt	r3, r3
 800d2ba:	f042 0202 	orrlt.w	r2, r2, #2
 800d2be:	9307      	strge	r3, [sp, #28]
 800d2c0:	9307      	strlt	r3, [sp, #28]
 800d2c2:	bfb8      	it	lt
 800d2c4:	9204      	strlt	r2, [sp, #16]
 800d2c6:	7823      	ldrb	r3, [r4, #0]
 800d2c8:	2b2e      	cmp	r3, #46	@ 0x2e
 800d2ca:	d10a      	bne.n	800d2e2 <_vfiprintf_r+0x156>
 800d2cc:	7863      	ldrb	r3, [r4, #1]
 800d2ce:	2b2a      	cmp	r3, #42	@ 0x2a
 800d2d0:	d132      	bne.n	800d338 <_vfiprintf_r+0x1ac>
 800d2d2:	9b03      	ldr	r3, [sp, #12]
 800d2d4:	1d1a      	adds	r2, r3, #4
 800d2d6:	681b      	ldr	r3, [r3, #0]
 800d2d8:	9203      	str	r2, [sp, #12]
 800d2da:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d2de:	3402      	adds	r4, #2
 800d2e0:	9305      	str	r3, [sp, #20]
 800d2e2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800d3b8 <_vfiprintf_r+0x22c>
 800d2e6:	7821      	ldrb	r1, [r4, #0]
 800d2e8:	2203      	movs	r2, #3
 800d2ea:	4650      	mov	r0, sl
 800d2ec:	f7f2 ff70 	bl	80001d0 <memchr>
 800d2f0:	b138      	cbz	r0, 800d302 <_vfiprintf_r+0x176>
 800d2f2:	9b04      	ldr	r3, [sp, #16]
 800d2f4:	eba0 000a 	sub.w	r0, r0, sl
 800d2f8:	2240      	movs	r2, #64	@ 0x40
 800d2fa:	4082      	lsls	r2, r0
 800d2fc:	4313      	orrs	r3, r2
 800d2fe:	3401      	adds	r4, #1
 800d300:	9304      	str	r3, [sp, #16]
 800d302:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d306:	4829      	ldr	r0, [pc, #164]	@ (800d3ac <_vfiprintf_r+0x220>)
 800d308:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d30c:	2206      	movs	r2, #6
 800d30e:	f7f2 ff5f 	bl	80001d0 <memchr>
 800d312:	2800      	cmp	r0, #0
 800d314:	d03f      	beq.n	800d396 <_vfiprintf_r+0x20a>
 800d316:	4b26      	ldr	r3, [pc, #152]	@ (800d3b0 <_vfiprintf_r+0x224>)
 800d318:	bb1b      	cbnz	r3, 800d362 <_vfiprintf_r+0x1d6>
 800d31a:	9b03      	ldr	r3, [sp, #12]
 800d31c:	3307      	adds	r3, #7
 800d31e:	f023 0307 	bic.w	r3, r3, #7
 800d322:	3308      	adds	r3, #8
 800d324:	9303      	str	r3, [sp, #12]
 800d326:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d328:	443b      	add	r3, r7
 800d32a:	9309      	str	r3, [sp, #36]	@ 0x24
 800d32c:	e76a      	b.n	800d204 <_vfiprintf_r+0x78>
 800d32e:	fb0c 3202 	mla	r2, ip, r2, r3
 800d332:	460c      	mov	r4, r1
 800d334:	2001      	movs	r0, #1
 800d336:	e7a8      	b.n	800d28a <_vfiprintf_r+0xfe>
 800d338:	2300      	movs	r3, #0
 800d33a:	3401      	adds	r4, #1
 800d33c:	9305      	str	r3, [sp, #20]
 800d33e:	4619      	mov	r1, r3
 800d340:	f04f 0c0a 	mov.w	ip, #10
 800d344:	4620      	mov	r0, r4
 800d346:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d34a:	3a30      	subs	r2, #48	@ 0x30
 800d34c:	2a09      	cmp	r2, #9
 800d34e:	d903      	bls.n	800d358 <_vfiprintf_r+0x1cc>
 800d350:	2b00      	cmp	r3, #0
 800d352:	d0c6      	beq.n	800d2e2 <_vfiprintf_r+0x156>
 800d354:	9105      	str	r1, [sp, #20]
 800d356:	e7c4      	b.n	800d2e2 <_vfiprintf_r+0x156>
 800d358:	fb0c 2101 	mla	r1, ip, r1, r2
 800d35c:	4604      	mov	r4, r0
 800d35e:	2301      	movs	r3, #1
 800d360:	e7f0      	b.n	800d344 <_vfiprintf_r+0x1b8>
 800d362:	ab03      	add	r3, sp, #12
 800d364:	9300      	str	r3, [sp, #0]
 800d366:	462a      	mov	r2, r5
 800d368:	4b12      	ldr	r3, [pc, #72]	@ (800d3b4 <_vfiprintf_r+0x228>)
 800d36a:	a904      	add	r1, sp, #16
 800d36c:	4630      	mov	r0, r6
 800d36e:	f7fb fe87 	bl	8009080 <_printf_float>
 800d372:	4607      	mov	r7, r0
 800d374:	1c78      	adds	r0, r7, #1
 800d376:	d1d6      	bne.n	800d326 <_vfiprintf_r+0x19a>
 800d378:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d37a:	07d9      	lsls	r1, r3, #31
 800d37c:	d405      	bmi.n	800d38a <_vfiprintf_r+0x1fe>
 800d37e:	89ab      	ldrh	r3, [r5, #12]
 800d380:	059a      	lsls	r2, r3, #22
 800d382:	d402      	bmi.n	800d38a <_vfiprintf_r+0x1fe>
 800d384:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d386:	f7fc fe1f 	bl	8009fc8 <__retarget_lock_release_recursive>
 800d38a:	89ab      	ldrh	r3, [r5, #12]
 800d38c:	065b      	lsls	r3, r3, #25
 800d38e:	f53f af1f 	bmi.w	800d1d0 <_vfiprintf_r+0x44>
 800d392:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d394:	e71e      	b.n	800d1d4 <_vfiprintf_r+0x48>
 800d396:	ab03      	add	r3, sp, #12
 800d398:	9300      	str	r3, [sp, #0]
 800d39a:	462a      	mov	r2, r5
 800d39c:	4b05      	ldr	r3, [pc, #20]	@ (800d3b4 <_vfiprintf_r+0x228>)
 800d39e:	a904      	add	r1, sp, #16
 800d3a0:	4630      	mov	r0, r6
 800d3a2:	f7fc f905 	bl	80095b0 <_printf_i>
 800d3a6:	e7e4      	b.n	800d372 <_vfiprintf_r+0x1e6>
 800d3a8:	0800e681 	.word	0x0800e681
 800d3ac:	0800e68b 	.word	0x0800e68b
 800d3b0:	08009081 	.word	0x08009081
 800d3b4:	0800d169 	.word	0x0800d169
 800d3b8:	0800e687 	.word	0x0800e687

0800d3bc <__swbuf_r>:
 800d3bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d3be:	460e      	mov	r6, r1
 800d3c0:	4614      	mov	r4, r2
 800d3c2:	4605      	mov	r5, r0
 800d3c4:	b118      	cbz	r0, 800d3ce <__swbuf_r+0x12>
 800d3c6:	6a03      	ldr	r3, [r0, #32]
 800d3c8:	b90b      	cbnz	r3, 800d3ce <__swbuf_r+0x12>
 800d3ca:	f7fc fcb1 	bl	8009d30 <__sinit>
 800d3ce:	69a3      	ldr	r3, [r4, #24]
 800d3d0:	60a3      	str	r3, [r4, #8]
 800d3d2:	89a3      	ldrh	r3, [r4, #12]
 800d3d4:	071a      	lsls	r2, r3, #28
 800d3d6:	d501      	bpl.n	800d3dc <__swbuf_r+0x20>
 800d3d8:	6923      	ldr	r3, [r4, #16]
 800d3da:	b943      	cbnz	r3, 800d3ee <__swbuf_r+0x32>
 800d3dc:	4621      	mov	r1, r4
 800d3de:	4628      	mov	r0, r5
 800d3e0:	f000 f82a 	bl	800d438 <__swsetup_r>
 800d3e4:	b118      	cbz	r0, 800d3ee <__swbuf_r+0x32>
 800d3e6:	f04f 37ff 	mov.w	r7, #4294967295
 800d3ea:	4638      	mov	r0, r7
 800d3ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d3ee:	6823      	ldr	r3, [r4, #0]
 800d3f0:	6922      	ldr	r2, [r4, #16]
 800d3f2:	1a98      	subs	r0, r3, r2
 800d3f4:	6963      	ldr	r3, [r4, #20]
 800d3f6:	b2f6      	uxtb	r6, r6
 800d3f8:	4283      	cmp	r3, r0
 800d3fa:	4637      	mov	r7, r6
 800d3fc:	dc05      	bgt.n	800d40a <__swbuf_r+0x4e>
 800d3fe:	4621      	mov	r1, r4
 800d400:	4628      	mov	r0, r5
 800d402:	f7ff fa47 	bl	800c894 <_fflush_r>
 800d406:	2800      	cmp	r0, #0
 800d408:	d1ed      	bne.n	800d3e6 <__swbuf_r+0x2a>
 800d40a:	68a3      	ldr	r3, [r4, #8]
 800d40c:	3b01      	subs	r3, #1
 800d40e:	60a3      	str	r3, [r4, #8]
 800d410:	6823      	ldr	r3, [r4, #0]
 800d412:	1c5a      	adds	r2, r3, #1
 800d414:	6022      	str	r2, [r4, #0]
 800d416:	701e      	strb	r6, [r3, #0]
 800d418:	6962      	ldr	r2, [r4, #20]
 800d41a:	1c43      	adds	r3, r0, #1
 800d41c:	429a      	cmp	r2, r3
 800d41e:	d004      	beq.n	800d42a <__swbuf_r+0x6e>
 800d420:	89a3      	ldrh	r3, [r4, #12]
 800d422:	07db      	lsls	r3, r3, #31
 800d424:	d5e1      	bpl.n	800d3ea <__swbuf_r+0x2e>
 800d426:	2e0a      	cmp	r6, #10
 800d428:	d1df      	bne.n	800d3ea <__swbuf_r+0x2e>
 800d42a:	4621      	mov	r1, r4
 800d42c:	4628      	mov	r0, r5
 800d42e:	f7ff fa31 	bl	800c894 <_fflush_r>
 800d432:	2800      	cmp	r0, #0
 800d434:	d0d9      	beq.n	800d3ea <__swbuf_r+0x2e>
 800d436:	e7d6      	b.n	800d3e6 <__swbuf_r+0x2a>

0800d438 <__swsetup_r>:
 800d438:	b538      	push	{r3, r4, r5, lr}
 800d43a:	4b29      	ldr	r3, [pc, #164]	@ (800d4e0 <__swsetup_r+0xa8>)
 800d43c:	4605      	mov	r5, r0
 800d43e:	6818      	ldr	r0, [r3, #0]
 800d440:	460c      	mov	r4, r1
 800d442:	b118      	cbz	r0, 800d44c <__swsetup_r+0x14>
 800d444:	6a03      	ldr	r3, [r0, #32]
 800d446:	b90b      	cbnz	r3, 800d44c <__swsetup_r+0x14>
 800d448:	f7fc fc72 	bl	8009d30 <__sinit>
 800d44c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d450:	0719      	lsls	r1, r3, #28
 800d452:	d422      	bmi.n	800d49a <__swsetup_r+0x62>
 800d454:	06da      	lsls	r2, r3, #27
 800d456:	d407      	bmi.n	800d468 <__swsetup_r+0x30>
 800d458:	2209      	movs	r2, #9
 800d45a:	602a      	str	r2, [r5, #0]
 800d45c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d460:	81a3      	strh	r3, [r4, #12]
 800d462:	f04f 30ff 	mov.w	r0, #4294967295
 800d466:	e033      	b.n	800d4d0 <__swsetup_r+0x98>
 800d468:	0758      	lsls	r0, r3, #29
 800d46a:	d512      	bpl.n	800d492 <__swsetup_r+0x5a>
 800d46c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d46e:	b141      	cbz	r1, 800d482 <__swsetup_r+0x4a>
 800d470:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d474:	4299      	cmp	r1, r3
 800d476:	d002      	beq.n	800d47e <__swsetup_r+0x46>
 800d478:	4628      	mov	r0, r5
 800d47a:	f7fd fbf9 	bl	800ac70 <_free_r>
 800d47e:	2300      	movs	r3, #0
 800d480:	6363      	str	r3, [r4, #52]	@ 0x34
 800d482:	89a3      	ldrh	r3, [r4, #12]
 800d484:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800d488:	81a3      	strh	r3, [r4, #12]
 800d48a:	2300      	movs	r3, #0
 800d48c:	6063      	str	r3, [r4, #4]
 800d48e:	6923      	ldr	r3, [r4, #16]
 800d490:	6023      	str	r3, [r4, #0]
 800d492:	89a3      	ldrh	r3, [r4, #12]
 800d494:	f043 0308 	orr.w	r3, r3, #8
 800d498:	81a3      	strh	r3, [r4, #12]
 800d49a:	6923      	ldr	r3, [r4, #16]
 800d49c:	b94b      	cbnz	r3, 800d4b2 <__swsetup_r+0x7a>
 800d49e:	89a3      	ldrh	r3, [r4, #12]
 800d4a0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800d4a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d4a8:	d003      	beq.n	800d4b2 <__swsetup_r+0x7a>
 800d4aa:	4621      	mov	r1, r4
 800d4ac:	4628      	mov	r0, r5
 800d4ae:	f000 f883 	bl	800d5b8 <__smakebuf_r>
 800d4b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d4b6:	f013 0201 	ands.w	r2, r3, #1
 800d4ba:	d00a      	beq.n	800d4d2 <__swsetup_r+0x9a>
 800d4bc:	2200      	movs	r2, #0
 800d4be:	60a2      	str	r2, [r4, #8]
 800d4c0:	6962      	ldr	r2, [r4, #20]
 800d4c2:	4252      	negs	r2, r2
 800d4c4:	61a2      	str	r2, [r4, #24]
 800d4c6:	6922      	ldr	r2, [r4, #16]
 800d4c8:	b942      	cbnz	r2, 800d4dc <__swsetup_r+0xa4>
 800d4ca:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800d4ce:	d1c5      	bne.n	800d45c <__swsetup_r+0x24>
 800d4d0:	bd38      	pop	{r3, r4, r5, pc}
 800d4d2:	0799      	lsls	r1, r3, #30
 800d4d4:	bf58      	it	pl
 800d4d6:	6962      	ldrpl	r2, [r4, #20]
 800d4d8:	60a2      	str	r2, [r4, #8]
 800d4da:	e7f4      	b.n	800d4c6 <__swsetup_r+0x8e>
 800d4dc:	2000      	movs	r0, #0
 800d4de:	e7f7      	b.n	800d4d0 <__swsetup_r+0x98>
 800d4e0:	20000068 	.word	0x20000068

0800d4e4 <_raise_r>:
 800d4e4:	291f      	cmp	r1, #31
 800d4e6:	b538      	push	{r3, r4, r5, lr}
 800d4e8:	4605      	mov	r5, r0
 800d4ea:	460c      	mov	r4, r1
 800d4ec:	d904      	bls.n	800d4f8 <_raise_r+0x14>
 800d4ee:	2316      	movs	r3, #22
 800d4f0:	6003      	str	r3, [r0, #0]
 800d4f2:	f04f 30ff 	mov.w	r0, #4294967295
 800d4f6:	bd38      	pop	{r3, r4, r5, pc}
 800d4f8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800d4fa:	b112      	cbz	r2, 800d502 <_raise_r+0x1e>
 800d4fc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d500:	b94b      	cbnz	r3, 800d516 <_raise_r+0x32>
 800d502:	4628      	mov	r0, r5
 800d504:	f000 f830 	bl	800d568 <_getpid_r>
 800d508:	4622      	mov	r2, r4
 800d50a:	4601      	mov	r1, r0
 800d50c:	4628      	mov	r0, r5
 800d50e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d512:	f000 b817 	b.w	800d544 <_kill_r>
 800d516:	2b01      	cmp	r3, #1
 800d518:	d00a      	beq.n	800d530 <_raise_r+0x4c>
 800d51a:	1c59      	adds	r1, r3, #1
 800d51c:	d103      	bne.n	800d526 <_raise_r+0x42>
 800d51e:	2316      	movs	r3, #22
 800d520:	6003      	str	r3, [r0, #0]
 800d522:	2001      	movs	r0, #1
 800d524:	e7e7      	b.n	800d4f6 <_raise_r+0x12>
 800d526:	2100      	movs	r1, #0
 800d528:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800d52c:	4620      	mov	r0, r4
 800d52e:	4798      	blx	r3
 800d530:	2000      	movs	r0, #0
 800d532:	e7e0      	b.n	800d4f6 <_raise_r+0x12>

0800d534 <raise>:
 800d534:	4b02      	ldr	r3, [pc, #8]	@ (800d540 <raise+0xc>)
 800d536:	4601      	mov	r1, r0
 800d538:	6818      	ldr	r0, [r3, #0]
 800d53a:	f7ff bfd3 	b.w	800d4e4 <_raise_r>
 800d53e:	bf00      	nop
 800d540:	20000068 	.word	0x20000068

0800d544 <_kill_r>:
 800d544:	b538      	push	{r3, r4, r5, lr}
 800d546:	4d07      	ldr	r5, [pc, #28]	@ (800d564 <_kill_r+0x20>)
 800d548:	2300      	movs	r3, #0
 800d54a:	4604      	mov	r4, r0
 800d54c:	4608      	mov	r0, r1
 800d54e:	4611      	mov	r1, r2
 800d550:	602b      	str	r3, [r5, #0]
 800d552:	f7f4 fe19 	bl	8002188 <_kill>
 800d556:	1c43      	adds	r3, r0, #1
 800d558:	d102      	bne.n	800d560 <_kill_r+0x1c>
 800d55a:	682b      	ldr	r3, [r5, #0]
 800d55c:	b103      	cbz	r3, 800d560 <_kill_r+0x1c>
 800d55e:	6023      	str	r3, [r4, #0]
 800d560:	bd38      	pop	{r3, r4, r5, pc}
 800d562:	bf00      	nop
 800d564:	20000748 	.word	0x20000748

0800d568 <_getpid_r>:
 800d568:	f7f4 be06 	b.w	8002178 <_getpid>

0800d56c <__swhatbuf_r>:
 800d56c:	b570      	push	{r4, r5, r6, lr}
 800d56e:	460c      	mov	r4, r1
 800d570:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d574:	2900      	cmp	r1, #0
 800d576:	b096      	sub	sp, #88	@ 0x58
 800d578:	4615      	mov	r5, r2
 800d57a:	461e      	mov	r6, r3
 800d57c:	da0d      	bge.n	800d59a <__swhatbuf_r+0x2e>
 800d57e:	89a3      	ldrh	r3, [r4, #12]
 800d580:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d584:	f04f 0100 	mov.w	r1, #0
 800d588:	bf14      	ite	ne
 800d58a:	2340      	movne	r3, #64	@ 0x40
 800d58c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800d590:	2000      	movs	r0, #0
 800d592:	6031      	str	r1, [r6, #0]
 800d594:	602b      	str	r3, [r5, #0]
 800d596:	b016      	add	sp, #88	@ 0x58
 800d598:	bd70      	pop	{r4, r5, r6, pc}
 800d59a:	466a      	mov	r2, sp
 800d59c:	f000 f848 	bl	800d630 <_fstat_r>
 800d5a0:	2800      	cmp	r0, #0
 800d5a2:	dbec      	blt.n	800d57e <__swhatbuf_r+0x12>
 800d5a4:	9901      	ldr	r1, [sp, #4]
 800d5a6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800d5aa:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800d5ae:	4259      	negs	r1, r3
 800d5b0:	4159      	adcs	r1, r3
 800d5b2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d5b6:	e7eb      	b.n	800d590 <__swhatbuf_r+0x24>

0800d5b8 <__smakebuf_r>:
 800d5b8:	898b      	ldrh	r3, [r1, #12]
 800d5ba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d5bc:	079d      	lsls	r5, r3, #30
 800d5be:	4606      	mov	r6, r0
 800d5c0:	460c      	mov	r4, r1
 800d5c2:	d507      	bpl.n	800d5d4 <__smakebuf_r+0x1c>
 800d5c4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800d5c8:	6023      	str	r3, [r4, #0]
 800d5ca:	6123      	str	r3, [r4, #16]
 800d5cc:	2301      	movs	r3, #1
 800d5ce:	6163      	str	r3, [r4, #20]
 800d5d0:	b003      	add	sp, #12
 800d5d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d5d4:	ab01      	add	r3, sp, #4
 800d5d6:	466a      	mov	r2, sp
 800d5d8:	f7ff ffc8 	bl	800d56c <__swhatbuf_r>
 800d5dc:	9f00      	ldr	r7, [sp, #0]
 800d5de:	4605      	mov	r5, r0
 800d5e0:	4639      	mov	r1, r7
 800d5e2:	4630      	mov	r0, r6
 800d5e4:	f7fd fbb8 	bl	800ad58 <_malloc_r>
 800d5e8:	b948      	cbnz	r0, 800d5fe <__smakebuf_r+0x46>
 800d5ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d5ee:	059a      	lsls	r2, r3, #22
 800d5f0:	d4ee      	bmi.n	800d5d0 <__smakebuf_r+0x18>
 800d5f2:	f023 0303 	bic.w	r3, r3, #3
 800d5f6:	f043 0302 	orr.w	r3, r3, #2
 800d5fa:	81a3      	strh	r3, [r4, #12]
 800d5fc:	e7e2      	b.n	800d5c4 <__smakebuf_r+0xc>
 800d5fe:	89a3      	ldrh	r3, [r4, #12]
 800d600:	6020      	str	r0, [r4, #0]
 800d602:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d606:	81a3      	strh	r3, [r4, #12]
 800d608:	9b01      	ldr	r3, [sp, #4]
 800d60a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800d60e:	b15b      	cbz	r3, 800d628 <__smakebuf_r+0x70>
 800d610:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d614:	4630      	mov	r0, r6
 800d616:	f000 f81d 	bl	800d654 <_isatty_r>
 800d61a:	b128      	cbz	r0, 800d628 <__smakebuf_r+0x70>
 800d61c:	89a3      	ldrh	r3, [r4, #12]
 800d61e:	f023 0303 	bic.w	r3, r3, #3
 800d622:	f043 0301 	orr.w	r3, r3, #1
 800d626:	81a3      	strh	r3, [r4, #12]
 800d628:	89a3      	ldrh	r3, [r4, #12]
 800d62a:	431d      	orrs	r5, r3
 800d62c:	81a5      	strh	r5, [r4, #12]
 800d62e:	e7cf      	b.n	800d5d0 <__smakebuf_r+0x18>

0800d630 <_fstat_r>:
 800d630:	b538      	push	{r3, r4, r5, lr}
 800d632:	4d07      	ldr	r5, [pc, #28]	@ (800d650 <_fstat_r+0x20>)
 800d634:	2300      	movs	r3, #0
 800d636:	4604      	mov	r4, r0
 800d638:	4608      	mov	r0, r1
 800d63a:	4611      	mov	r1, r2
 800d63c:	602b      	str	r3, [r5, #0]
 800d63e:	f7f4 fe03 	bl	8002248 <_fstat>
 800d642:	1c43      	adds	r3, r0, #1
 800d644:	d102      	bne.n	800d64c <_fstat_r+0x1c>
 800d646:	682b      	ldr	r3, [r5, #0]
 800d648:	b103      	cbz	r3, 800d64c <_fstat_r+0x1c>
 800d64a:	6023      	str	r3, [r4, #0]
 800d64c:	bd38      	pop	{r3, r4, r5, pc}
 800d64e:	bf00      	nop
 800d650:	20000748 	.word	0x20000748

0800d654 <_isatty_r>:
 800d654:	b538      	push	{r3, r4, r5, lr}
 800d656:	4d06      	ldr	r5, [pc, #24]	@ (800d670 <_isatty_r+0x1c>)
 800d658:	2300      	movs	r3, #0
 800d65a:	4604      	mov	r4, r0
 800d65c:	4608      	mov	r0, r1
 800d65e:	602b      	str	r3, [r5, #0]
 800d660:	f7f4 fe02 	bl	8002268 <_isatty>
 800d664:	1c43      	adds	r3, r0, #1
 800d666:	d102      	bne.n	800d66e <_isatty_r+0x1a>
 800d668:	682b      	ldr	r3, [r5, #0]
 800d66a:	b103      	cbz	r3, 800d66e <_isatty_r+0x1a>
 800d66c:	6023      	str	r3, [r4, #0]
 800d66e:	bd38      	pop	{r3, r4, r5, pc}
 800d670:	20000748 	.word	0x20000748

0800d674 <_init>:
 800d674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d676:	bf00      	nop
 800d678:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d67a:	bc08      	pop	{r3}
 800d67c:	469e      	mov	lr, r3
 800d67e:	4770      	bx	lr

0800d680 <_fini>:
 800d680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d682:	bf00      	nop
 800d684:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d686:	bc08      	pop	{r3}
 800d688:	469e      	mov	lr, r3
 800d68a:	4770      	bx	lr
