
emewSmartSystem_IonSensor_Digital_Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d4d8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001090  0800d668  0800d668  0001d668  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e6f8  0800e6f8  00020224  2**0
                  CONTENTS
  4 .ARM          00000000  0800e6f8  0800e6f8  00020224  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800e6f8  0800e6f8  00020224  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e6f8  0800e6f8  0001e6f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e6fc  0800e6fc  0001e6fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000224  20000000  0800e700  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000530  20000224  0800e924  00020224  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000754  0800e924  00020754  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020254  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001c927  00000000  00000000  00020297  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003d68  00000000  00000000  0003cbbe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000017c0  00000000  00000000  00040928  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000128c  00000000  00000000  000420e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002223b  00000000  00000000  00043374  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00022f81  00000000  00000000  000655af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000be5b1  00000000  00000000  00088530  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000077dc  00000000  00000000  00146ae4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007f  00000000  00000000  0014e2c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000224 	.word	0x20000224
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d650 	.word	0x0800d650

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000228 	.word	0x20000228
 80001cc:	0800d650 	.word	0x0800d650

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_d2lz>:
 8000c88:	b538      	push	{r3, r4, r5, lr}
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	4604      	mov	r4, r0
 8000c90:	460d      	mov	r5, r1
 8000c92:	f7ff ff23 	bl	8000adc <__aeabi_dcmplt>
 8000c96:	b928      	cbnz	r0, 8000ca4 <__aeabi_d2lz+0x1c>
 8000c98:	4620      	mov	r0, r4
 8000c9a:	4629      	mov	r1, r5
 8000c9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ca0:	f000 b80a 	b.w	8000cb8 <__aeabi_d2ulz>
 8000ca4:	4620      	mov	r0, r4
 8000ca6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000caa:	f000 f805 	bl	8000cb8 <__aeabi_d2ulz>
 8000cae:	4240      	negs	r0, r0
 8000cb0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb4:	bd38      	pop	{r3, r4, r5, pc}
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_d2ulz>:
 8000cb8:	b5d0      	push	{r4, r6, r7, lr}
 8000cba:	4b0c      	ldr	r3, [pc, #48]	; (8000cec <__aeabi_d2ulz+0x34>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	4606      	mov	r6, r0
 8000cc0:	460f      	mov	r7, r1
 8000cc2:	f7ff fc99 	bl	80005f8 <__aeabi_dmul>
 8000cc6:	f7ff ff6f 	bl	8000ba8 <__aeabi_d2uiz>
 8000cca:	4604      	mov	r4, r0
 8000ccc:	f7ff fc1a 	bl	8000504 <__aeabi_ui2d>
 8000cd0:	4b07      	ldr	r3, [pc, #28]	; (8000cf0 <__aeabi_d2ulz+0x38>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	f7ff fc90 	bl	80005f8 <__aeabi_dmul>
 8000cd8:	4602      	mov	r2, r0
 8000cda:	460b      	mov	r3, r1
 8000cdc:	4630      	mov	r0, r6
 8000cde:	4639      	mov	r1, r7
 8000ce0:	f7ff fad2 	bl	8000288 <__aeabi_dsub>
 8000ce4:	f7ff ff60 	bl	8000ba8 <__aeabi_d2uiz>
 8000ce8:	4621      	mov	r1, r4
 8000cea:	bdd0      	pop	{r4, r6, r7, pc}
 8000cec:	3df00000 	.word	0x3df00000
 8000cf0:	41f00000 	.word	0x41f00000

08000cf4 <uint16_to_bytes>:

}


//Store uint16 value into a byte array in little endian form
void uint16_to_bytes(uint16_t InputValue, uint8_t *OutputByteArray){
 8000cf4:	b480      	push	{r7}
 8000cf6:	b083      	sub	sp, #12
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	6039      	str	r1, [r7, #0]
 8000cfe:	80fb      	strh	r3, [r7, #6]
	OutputByteArray[0] = (InputValue&0x00FF);
 8000d00:	88fb      	ldrh	r3, [r7, #6]
 8000d02:	b2da      	uxtb	r2, r3
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	701a      	strb	r2, [r3, #0]
	OutputByteArray[1] = (InputValue>>8)&0x00FF;
 8000d08:	88fb      	ldrh	r3, [r7, #6]
 8000d0a:	0a1b      	lsrs	r3, r3, #8
 8000d0c:	b29a      	uxth	r2, r3
 8000d0e:	683b      	ldr	r3, [r7, #0]
 8000d10:	3301      	adds	r3, #1
 8000d12:	b2d2      	uxtb	r2, r2
 8000d14:	701a      	strb	r2, [r3, #0]
}
 8000d16:	bf00      	nop
 8000d18:	370c      	adds	r7, #12
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr

08000d22 <bytes_to_uint16>:


//Store little endian byte array into uint16 value
uint16_t bytes_to_uint16(uint8_t *InputByteArray){
 8000d22:	b480      	push	{r7}
 8000d24:	b085      	sub	sp, #20
 8000d26:	af00      	add	r7, sp, #0
 8000d28:	6078      	str	r0, [r7, #4]

	//Parse the bytes into a "workable" value
	uint32_t Converted_Value = ((InputByteArray[1]<<8)&0xFF00) |
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	3301      	adds	r3, #1
 8000d2e:	781b      	ldrb	r3, [r3, #0]
 8000d30:	021b      	lsls	r3, r3, #8
 8000d32:	b29b      	uxth	r3, r3
								(InputByteArray[0]&0x000FF);
 8000d34:	687a      	ldr	r2, [r7, #4]
 8000d36:	7812      	ldrb	r2, [r2, #0]
	uint32_t Converted_Value = ((InputByteArray[1]<<8)&0xFF00) |
 8000d38:	4313      	orrs	r3, r2
 8000d3a:	60fb      	str	r3, [r7, #12]

	return Converted_Value;
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	b29b      	uxth	r3, r3

}
 8000d40:	4618      	mov	r0, r3
 8000d42:	3714      	adds	r7, #20
 8000d44:	46bd      	mov	sp, r7
 8000d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4a:	4770      	bx	lr

08000d4c <Read_Button1>:

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////// GPIO Pin Read Functions //////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GPIO_PinState Read_Button1(void) { return HAL_GPIO_ReadPin( GPIOA, GPIO_PIN_5 ); }
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	af00      	add	r7, sp, #0
 8000d50:	2120      	movs	r1, #32
 8000d52:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d56:	f004 fd61 	bl	800581c <HAL_GPIO_ReadPin>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	bd80      	pop	{r7, pc}

08000d60 <Read_Button2>:
GPIO_PinState Read_Button2(void) { return HAL_GPIO_ReadPin( GPIOA, GPIO_PIN_6 ); }
 8000d60:	b580      	push	{r7, lr}
 8000d62:	af00      	add	r7, sp, #0
 8000d64:	2140      	movs	r1, #64	; 0x40
 8000d66:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d6a:	f004 fd57 	bl	800581c <HAL_GPIO_ReadPin>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	4618      	mov	r0, r3
 8000d72:	bd80      	pop	{r7, pc}

08000d74 <Read_Button3>:
GPIO_PinState Read_Button3(void) { return HAL_GPIO_ReadPin( GPIOA, GPIO_PIN_7 ); }
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0
 8000d78:	2180      	movs	r1, #128	; 0x80
 8000d7a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d7e:	f004 fd4d 	bl	800581c <HAL_GPIO_ReadPin>
 8000d82:	4603      	mov	r3, r0
 8000d84:	4618      	mov	r0, r3
 8000d86:	bd80      	pop	{r7, pc}

08000d88 <Read_USBC_SpareTS>:
GPIO_PinState Read_LED_Indication3(void){ return HAL_GPIO_ReadPin( GPIOB, GPIO_PIN_2 );  }
GPIO_PinState Read_LED_Indication4(void){ return HAL_GPIO_ReadPin( GPIOB, GPIO_PIN_10 ); }
GPIO_PinState Read_LED_Indication5(void){ return HAL_GPIO_ReadPin( GPIOB, GPIO_PIN_11 ); }
GPIO_PinState Read_USBC_CC1(void) 		{ return HAL_GPIO_ReadPin( GPIOA, GPIO_PIN_11 );  }
GPIO_PinState Read_USBC_CC2(void) 		{ return HAL_GPIO_ReadPin( GPIOA, GPIO_PIN_12 ); }
GPIO_PinState Read_USBC_SpareTS(void) 	{ return HAL_GPIO_ReadPin( GPIOA, GPIO_PIN_15 ); }
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	af00      	add	r7, sp, #0
 8000d8c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d90:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d94:	f004 fd42 	bl	800581c <HAL_GPIO_ReadPin>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	bd80      	pop	{r7, pc}
	...

08000da0 <Read_LED_Metal>:
GPIO_PinState Read_LED_Metal(void)      {  return HAL_GPIO_ReadPin( GPIOC, GPIO_PIN_14 ); }
 8000da0:	b580      	push	{r7, lr}
 8000da2:	af00      	add	r7, sp, #0
 8000da4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000da8:	4802      	ldr	r0, [pc, #8]	; (8000db4 <Read_LED_Metal+0x14>)
 8000daa:	f004 fd37 	bl	800581c <HAL_GPIO_ReadPin>
 8000dae:	4603      	mov	r3, r0
 8000db0:	4618      	mov	r0, r3
 8000db2:	bd80      	pop	{r7, pc}
 8000db4:	48000800 	.word	0x48000800

08000db8 <Read_LED_Turbidity>:
GPIO_PinState Read_LED_Turbidity(void)  {  return HAL_GPIO_ReadPin( GPIOC, GPIO_PIN_15 ); }
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0
 8000dbc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000dc0:	4802      	ldr	r0, [pc, #8]	; (8000dcc <Read_LED_Turbidity+0x14>)
 8000dc2:	f004 fd2b 	bl	800581c <HAL_GPIO_ReadPin>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	4618      	mov	r0, r3
 8000dca:	bd80      	pop	{r7, pc}
 8000dcc:	48000800 	.word	0x48000800

08000dd0 <Set_LED_HeartBeat>:

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////// GPIO Pin Control Functions //////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void Set_LED_HeartBeat(GPIO_PinState PinState)  {  HAL_GPIO_WritePin( GPIOC, GPIO_PIN_13, PinState ); }
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b082      	sub	sp, #8
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	71fb      	strb	r3, [r7, #7]
 8000dda:	79fb      	ldrb	r3, [r7, #7]
 8000ddc:	461a      	mov	r2, r3
 8000dde:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000de2:	4803      	ldr	r0, [pc, #12]	; (8000df0 <Set_LED_HeartBeat+0x20>)
 8000de4:	f004 fd32 	bl	800584c <HAL_GPIO_WritePin>
 8000de8:	bf00      	nop
 8000dea:	3708      	adds	r7, #8
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	48000800 	.word	0x48000800

08000df4 <Set_LED_Indication1>:
void Set_LED_Indication1(GPIO_PinState PinState){  HAL_GPIO_WritePin( GPIOB, GPIO_PIN_0,  PinState ); }
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b082      	sub	sp, #8
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	71fb      	strb	r3, [r7, #7]
 8000dfe:	79fb      	ldrb	r3, [r7, #7]
 8000e00:	461a      	mov	r2, r3
 8000e02:	2101      	movs	r1, #1
 8000e04:	4803      	ldr	r0, [pc, #12]	; (8000e14 <Set_LED_Indication1+0x20>)
 8000e06:	f004 fd21 	bl	800584c <HAL_GPIO_WritePin>
 8000e0a:	bf00      	nop
 8000e0c:	3708      	adds	r7, #8
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	48000400 	.word	0x48000400

08000e18 <Set_LED_Indication2>:
void Set_LED_Indication2(GPIO_PinState PinState){  HAL_GPIO_WritePin( GPIOB, GPIO_PIN_1,  PinState ); }
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b082      	sub	sp, #8
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	4603      	mov	r3, r0
 8000e20:	71fb      	strb	r3, [r7, #7]
 8000e22:	79fb      	ldrb	r3, [r7, #7]
 8000e24:	461a      	mov	r2, r3
 8000e26:	2102      	movs	r1, #2
 8000e28:	4803      	ldr	r0, [pc, #12]	; (8000e38 <Set_LED_Indication2+0x20>)
 8000e2a:	f004 fd0f 	bl	800584c <HAL_GPIO_WritePin>
 8000e2e:	bf00      	nop
 8000e30:	3708      	adds	r7, #8
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	48000400 	.word	0x48000400

08000e3c <Set_LED_Indication3>:
void Set_LED_Indication3(GPIO_PinState PinState){  HAL_GPIO_WritePin( GPIOB, GPIO_PIN_2,  PinState ); }
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b082      	sub	sp, #8
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	4603      	mov	r3, r0
 8000e44:	71fb      	strb	r3, [r7, #7]
 8000e46:	79fb      	ldrb	r3, [r7, #7]
 8000e48:	461a      	mov	r2, r3
 8000e4a:	2104      	movs	r1, #4
 8000e4c:	4803      	ldr	r0, [pc, #12]	; (8000e5c <Set_LED_Indication3+0x20>)
 8000e4e:	f004 fcfd 	bl	800584c <HAL_GPIO_WritePin>
 8000e52:	bf00      	nop
 8000e54:	3708      	adds	r7, #8
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	48000400 	.word	0x48000400

08000e60 <Set_LED_Indication4>:
void Set_LED_Indication4(GPIO_PinState PinState){  HAL_GPIO_WritePin( GPIOB, GPIO_PIN_10, PinState ); }
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b082      	sub	sp, #8
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	4603      	mov	r3, r0
 8000e68:	71fb      	strb	r3, [r7, #7]
 8000e6a:	79fb      	ldrb	r3, [r7, #7]
 8000e6c:	461a      	mov	r2, r3
 8000e6e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e72:	4803      	ldr	r0, [pc, #12]	; (8000e80 <Set_LED_Indication4+0x20>)
 8000e74:	f004 fcea 	bl	800584c <HAL_GPIO_WritePin>
 8000e78:	bf00      	nop
 8000e7a:	3708      	adds	r7, #8
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	48000400 	.word	0x48000400

08000e84 <Set_LED_Indication5>:
void Set_LED_Indication5(GPIO_PinState PinState){  HAL_GPIO_WritePin( GPIOB, GPIO_PIN_11, PinState ); }
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b082      	sub	sp, #8
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	71fb      	strb	r3, [r7, #7]
 8000e8e:	79fb      	ldrb	r3, [r7, #7]
 8000e90:	461a      	mov	r2, r3
 8000e92:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e96:	4803      	ldr	r0, [pc, #12]	; (8000ea4 <Set_LED_Indication5+0x20>)
 8000e98:	f004 fcd8 	bl	800584c <HAL_GPIO_WritePin>
 8000e9c:	bf00      	nop
 8000e9e:	3708      	adds	r7, #8
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	48000400 	.word	0x48000400

08000ea8 <Set_Flash_CS>:
void Set_Flash_CS(GPIO_PinState PinState)		{  HAL_GPIO_WritePin( GPIOB, GPIO_PIN_12, PinState ); }
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	4603      	mov	r3, r0
 8000eb0:	71fb      	strb	r3, [r7, #7]
 8000eb2:	79fb      	ldrb	r3, [r7, #7]
 8000eb4:	461a      	mov	r2, r3
 8000eb6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000eba:	4803      	ldr	r0, [pc, #12]	; (8000ec8 <Set_Flash_CS+0x20>)
 8000ebc:	f004 fcc6 	bl	800584c <HAL_GPIO_WritePin>
 8000ec0:	bf00      	nop
 8000ec2:	3708      	adds	r7, #8
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	48000400 	.word	0x48000400

08000ecc <Set_Flash_WP>:
void Set_Flash_WP(GPIO_PinState PinState) 		{  HAL_GPIO_WritePin( GPIOA, GPIO_PIN_10, PinState ); }
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b082      	sub	sp, #8
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	71fb      	strb	r3, [r7, #7]
 8000ed6:	79fb      	ldrb	r3, [r7, #7]
 8000ed8:	461a      	mov	r2, r3
 8000eda:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ede:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ee2:	f004 fcb3 	bl	800584c <HAL_GPIO_WritePin>
 8000ee6:	bf00      	nop
 8000ee8:	3708      	adds	r7, #8
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}
	...

08000ef0 <Toggle_LED_HeartBeat>:

void Toggle_LED_HeartBeat(void)  {  HAL_GPIO_TogglePin( GPIOC, GPIO_PIN_13 ); }
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	af00      	add	r7, sp, #0
 8000ef4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ef8:	4802      	ldr	r0, [pc, #8]	; (8000f04 <Toggle_LED_HeartBeat+0x14>)
 8000efa:	f004 fcbf 	bl	800587c <HAL_GPIO_TogglePin>
 8000efe:	bf00      	nop
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	48000800 	.word	0x48000800

08000f08 <LED_Metal_Control>:

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////    LED Sensor Pin Control Functions /////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void LED_Metal_Control(GPIO_PinState PinState)		{  HAL_GPIO_WritePin( GPIOC, GPIO_PIN_14, PinState );  }
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b082      	sub	sp, #8
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	4603      	mov	r3, r0
 8000f10:	71fb      	strb	r3, [r7, #7]
 8000f12:	79fb      	ldrb	r3, [r7, #7]
 8000f14:	461a      	mov	r2, r3
 8000f16:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f1a:	4803      	ldr	r0, [pc, #12]	; (8000f28 <LED_Metal_Control+0x20>)
 8000f1c:	f004 fc96 	bl	800584c <HAL_GPIO_WritePin>
 8000f20:	bf00      	nop
 8000f22:	3708      	adds	r7, #8
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	48000800 	.word	0x48000800

08000f2c <LED_Turbidity_Control>:
void LED_Turbidity_Control(GPIO_PinState PinState) {  HAL_GPIO_WritePin( GPIOC, GPIO_PIN_15, PinState );  }
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b082      	sub	sp, #8
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	4603      	mov	r3, r0
 8000f34:	71fb      	strb	r3, [r7, #7]
 8000f36:	79fb      	ldrb	r3, [r7, #7]
 8000f38:	461a      	mov	r2, r3
 8000f3a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f3e:	4803      	ldr	r0, [pc, #12]	; (8000f4c <LED_Turbidity_Control+0x20>)
 8000f40:	f004 fc84 	bl	800584c <HAL_GPIO_WritePin>
 8000f44:	bf00      	nop
 8000f46:	3708      	adds	r7, #8
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	48000800 	.word	0x48000800

08000f50 <Set_LED_Metal>:
///////////////////////////////// Sensor LED Activation Control Functions /////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


//Turn on Metal LED but ensure the Turbidity LED is disabled
void Set_LED_Metal(GPIO_PinState PinState){
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b082      	sub	sp, #8
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	4603      	mov	r3, r0
 8000f58:	71fb      	strb	r3, [r7, #7]

	//Turn off the metal LED
	if(PinState==GPIO_PIN_RESET){ LED_Metal_Control(GPIO_PIN_RESET); }
 8000f5a:	79fb      	ldrb	r3, [r7, #7]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d102      	bne.n	8000f66 <Set_LED_Metal+0x16>
 8000f60:	2000      	movs	r0, #0
 8000f62:	f7ff ffd1 	bl	8000f08 <LED_Metal_Control>

	//Turn on the metal LED
	if(PinState==GPIO_PIN_SET){
 8000f66:	79fb      	ldrb	r3, [r7, #7]
 8000f68:	2b01      	cmp	r3, #1
 8000f6a:	d10a      	bne.n	8000f82 <Set_LED_Metal+0x32>
		if( Read_LED_Turbidity() == GPIO_PIN_SET ){ LED_Turbidity_Control(GPIO_PIN_RESET); } 	//Check Turbidity LED state -> If on, turn off
 8000f6c:	f7ff ff24 	bl	8000db8 <Read_LED_Turbidity>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b01      	cmp	r3, #1
 8000f74:	d102      	bne.n	8000f7c <Set_LED_Metal+0x2c>
 8000f76:	2000      	movs	r0, #0
 8000f78:	f7ff ffd8 	bl	8000f2c <LED_Turbidity_Control>
		LED_Metal_Control(GPIO_PIN_SET);
 8000f7c:	2001      	movs	r0, #1
 8000f7e:	f7ff ffc3 	bl	8000f08 <LED_Metal_Control>
	}

}
 8000f82:	bf00      	nop
 8000f84:	3708      	adds	r7, #8
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}

08000f8a <Set_LED_Turbidity>:


//Turn on Turbidity LED but ensure the Metal LED is disabled
void Set_LED_Turbidity(GPIO_PinState PinState){
 8000f8a:	b580      	push	{r7, lr}
 8000f8c:	b082      	sub	sp, #8
 8000f8e:	af00      	add	r7, sp, #0
 8000f90:	4603      	mov	r3, r0
 8000f92:	71fb      	strb	r3, [r7, #7]

	//Turn off the turbidity LED
	if(PinState==GPIO_PIN_RESET){ LED_Turbidity_Control(GPIO_PIN_RESET); }
 8000f94:	79fb      	ldrb	r3, [r7, #7]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d102      	bne.n	8000fa0 <Set_LED_Turbidity+0x16>
 8000f9a:	2000      	movs	r0, #0
 8000f9c:	f7ff ffc6 	bl	8000f2c <LED_Turbidity_Control>

	//Turn on the turbidity LED
	if(PinState==GPIO_PIN_SET){
 8000fa0:	79fb      	ldrb	r3, [r7, #7]
 8000fa2:	2b01      	cmp	r3, #1
 8000fa4:	d10a      	bne.n	8000fbc <Set_LED_Turbidity+0x32>
		if( Read_LED_Metal() == GPIO_PIN_SET ){ LED_Metal_Control(GPIO_PIN_RESET); } 	//Check Metal LED state -> If on, turn off
 8000fa6:	f7ff fefb 	bl	8000da0 <Read_LED_Metal>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b01      	cmp	r3, #1
 8000fae:	d102      	bne.n	8000fb6 <Set_LED_Turbidity+0x2c>
 8000fb0:	2000      	movs	r0, #0
 8000fb2:	f7ff ffa9 	bl	8000f08 <LED_Metal_Control>
		LED_Turbidity_Control(GPIO_PIN_SET);
 8000fb6:	2001      	movs	r0, #1
 8000fb8:	f7ff ffb8 	bl	8000f2c <LED_Turbidity_Control>
	}

}
 8000fbc:	bf00      	nop
 8000fbe:	3708      	adds	r7, #8
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	0000      	movs	r0, r0
	...

08000fc8 <STM32_ADC_ReadVoltage>:

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////  uC ADC Sample  //////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

stm_adc_status_t STM32_ADC_ReadVoltage(float* ReturnValue, uint8_t Channel){
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b086      	sub	sp, #24
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
 8000fd0:	460b      	mov	r3, r1
 8000fd2:	70fb      	strb	r3, [r7, #3]

	HAL_StatusTypeDef ret_adc;

	//Change ADC to sample on the CC1 pin (Channel 2)
	if(Channel==CC1_CH){
 8000fd4:	78fb      	ldrb	r3, [r7, #3]
 8000fd6:	2b01      	cmp	r3, #1
 8000fd8:	d11d      	bne.n	8001016 <STM32_ADC_ReadVoltage+0x4e>
		  adcConfig1.Rank = ADC_REGULAR_RANK_14;
 8000fda:	4b51      	ldr	r3, [pc, #324]	; (8001120 <STM32_ADC_ReadVoltage+0x158>)
 8000fdc:	220e      	movs	r2, #14
 8000fde:	605a      	str	r2, [r3, #4]
		  adcConfig2.Rank = ADC_REGULAR_RANK_1;
 8000fe0:	4b50      	ldr	r3, [pc, #320]	; (8001124 <STM32_ADC_ReadVoltage+0x15c>)
 8000fe2:	2201      	movs	r2, #1
 8000fe4:	605a      	str	r2, [r3, #4]
		  ret_adc=HAL_ADC_ConfigChannel(&UC_ADC, &adcConfig1 );		//Modify channel 1 to be lowest rank
 8000fe6:	494e      	ldr	r1, [pc, #312]	; (8001120 <STM32_ADC_ReadVoltage+0x158>)
 8000fe8:	484f      	ldr	r0, [pc, #316]	; (8001128 <STM32_ADC_ReadVoltage+0x160>)
 8000fea:	f003 f83d 	bl	8004068 <HAL_ADC_ConfigChannel>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	75fb      	strb	r3, [r7, #23]
		  if(ret_adc!=HAL_OK){ return ADC_STM_ERROR_HAL_CONFIG;}
 8000ff2:	7dfb      	ldrb	r3, [r7, #23]
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d002      	beq.n	8000ffe <STM32_ADC_ReadVoltage+0x36>
 8000ff8:	f04f 33ff 	mov.w	r3, #4294967295
 8000ffc:	e086      	b.n	800110c <STM32_ADC_ReadVoltage+0x144>
		  ret_adc=HAL_ADC_ConfigChannel(&UC_ADC, &adcConfig2 );		//Modify channel 2 to be highest rank
 8000ffe:	4949      	ldr	r1, [pc, #292]	; (8001124 <STM32_ADC_ReadVoltage+0x15c>)
 8001000:	4849      	ldr	r0, [pc, #292]	; (8001128 <STM32_ADC_ReadVoltage+0x160>)
 8001002:	f003 f831 	bl	8004068 <HAL_ADC_ConfigChannel>
 8001006:	4603      	mov	r3, r0
 8001008:	75fb      	strb	r3, [r7, #23]
		  if(ret_adc!=HAL_OK){ return ADC_STM_ERROR_HAL_CONFIG;}
 800100a:	7dfb      	ldrb	r3, [r7, #23]
 800100c:	2b00      	cmp	r3, #0
 800100e:	d026      	beq.n	800105e <STM32_ADC_ReadVoltage+0x96>
 8001010:	f04f 33ff 	mov.w	r3, #4294967295
 8001014:	e07a      	b.n	800110c <STM32_ADC_ReadVoltage+0x144>
	}
	//Change ADC to sample on the CC2 pin (Channel 1)
	else if(Channel==CC2_CH){
 8001016:	78fb      	ldrb	r3, [r7, #3]
 8001018:	2b02      	cmp	r3, #2
 800101a:	d11d      	bne.n	8001058 <STM32_ADC_ReadVoltage+0x90>
		  adcConfig1.Rank = ADC_REGULAR_RANK_1;
 800101c:	4b40      	ldr	r3, [pc, #256]	; (8001120 <STM32_ADC_ReadVoltage+0x158>)
 800101e:	2201      	movs	r2, #1
 8001020:	605a      	str	r2, [r3, #4]
		  adcConfig2.Rank = ADC_REGULAR_RANK_14;
 8001022:	4b40      	ldr	r3, [pc, #256]	; (8001124 <STM32_ADC_ReadVoltage+0x15c>)
 8001024:	220e      	movs	r2, #14
 8001026:	605a      	str	r2, [r3, #4]
		  ret_adc=HAL_ADC_ConfigChannel(&UC_ADC, &adcConfig2 );		//Modify channel 2 to be the lowest rank
 8001028:	493e      	ldr	r1, [pc, #248]	; (8001124 <STM32_ADC_ReadVoltage+0x15c>)
 800102a:	483f      	ldr	r0, [pc, #252]	; (8001128 <STM32_ADC_ReadVoltage+0x160>)
 800102c:	f003 f81c 	bl	8004068 <HAL_ADC_ConfigChannel>
 8001030:	4603      	mov	r3, r0
 8001032:	75fb      	strb	r3, [r7, #23]
		  if(ret_adc!=HAL_OK){ return ADC_STM_ERROR_HAL_CONFIG;}
 8001034:	7dfb      	ldrb	r3, [r7, #23]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d002      	beq.n	8001040 <STM32_ADC_ReadVoltage+0x78>
 800103a:	f04f 33ff 	mov.w	r3, #4294967295
 800103e:	e065      	b.n	800110c <STM32_ADC_ReadVoltage+0x144>
		  ret_adc=HAL_ADC_ConfigChannel(&UC_ADC, &adcConfig1 );		//Modify channel 1 to be the highest rank
 8001040:	4937      	ldr	r1, [pc, #220]	; (8001120 <STM32_ADC_ReadVoltage+0x158>)
 8001042:	4839      	ldr	r0, [pc, #228]	; (8001128 <STM32_ADC_ReadVoltage+0x160>)
 8001044:	f003 f810 	bl	8004068 <HAL_ADC_ConfigChannel>
 8001048:	4603      	mov	r3, r0
 800104a:	75fb      	strb	r3, [r7, #23]
		  if(ret_adc!=HAL_OK){ return ADC_STM_ERROR_HAL_CONFIG;}
 800104c:	7dfb      	ldrb	r3, [r7, #23]
 800104e:	2b00      	cmp	r3, #0
 8001050:	d005      	beq.n	800105e <STM32_ADC_ReadVoltage+0x96>
 8001052:	f04f 33ff 	mov.w	r3, #4294967295
 8001056:	e059      	b.n	800110c <STM32_ADC_ReadVoltage+0x144>
	}else{
		return ADC_STM_ERROR_PARAMETER;
 8001058:	f06f 0305 	mvn.w	r3, #5
 800105c:	e056      	b.n	800110c <STM32_ADC_ReadVoltage+0x144>
	}

	//Take ADC sample
	ret_adc=HAL_ADCEx_Calibration_Start(&UC_ADC, ADC_SINGLE_ENDED);		//Calibrate ADC
 800105e:	2100      	movs	r1, #0
 8001060:	4831      	ldr	r0, [pc, #196]	; (8001128 <STM32_ADC_ReadVoltage+0x160>)
 8001062:	f002 ff8e 	bl	8003f82 <HAL_ADCEx_Calibration_Start>
 8001066:	4603      	mov	r3, r0
 8001068:	75fb      	strb	r3, [r7, #23]
	if(ret_adc!=HAL_OK){ return ADC_STM_ERROR_HAL_CALIBRATE;}
 800106a:	7dfb      	ldrb	r3, [r7, #23]
 800106c:	2b00      	cmp	r3, #0
 800106e:	d002      	beq.n	8001076 <STM32_ADC_ReadVoltage+0xae>
 8001070:	f06f 0304 	mvn.w	r3, #4
 8001074:	e04a      	b.n	800110c <STM32_ADC_ReadVoltage+0x144>
	ret_adc=HAL_ADC_Start(&UC_ADC);							       		//Start ADC
 8001076:	482c      	ldr	r0, [pc, #176]	; (8001128 <STM32_ADC_ReadVoltage+0x160>)
 8001078:	f002 fdbc 	bl	8003bf4 <HAL_ADC_Start>
 800107c:	4603      	mov	r3, r0
 800107e:	75fb      	strb	r3, [r7, #23]
	if(ret_adc!=HAL_OK){ return ADC_STM_ERROR_HAL_START; }
 8001080:	7dfb      	ldrb	r3, [r7, #23]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d002      	beq.n	800108c <STM32_ADC_ReadVoltage+0xc4>
 8001086:	f06f 0301 	mvn.w	r3, #1
 800108a:	e03f      	b.n	800110c <STM32_ADC_ReadVoltage+0x144>
	ret_adc=HAL_ADC_PollForConversion(&UC_ADC, HAL_MAX_DELAY);			//Poll for ADC value
 800108c:	f04f 31ff 	mov.w	r1, #4294967295
 8001090:	4825      	ldr	r0, [pc, #148]	; (8001128 <STM32_ADC_ReadVoltage+0x160>)
 8001092:	f002 fe9b 	bl	8003dcc <HAL_ADC_PollForConversion>
 8001096:	4603      	mov	r3, r0
 8001098:	75fb      	strb	r3, [r7, #23]
	if(ret_adc!=HAL_OK){
 800109a:	7dfb      	ldrb	r3, [r7, #23]
 800109c:	2b00      	cmp	r3, #0
 800109e:	d005      	beq.n	80010ac <STM32_ADC_ReadVoltage+0xe4>
		HAL_ADC_Stop(&UC_ADC);
 80010a0:	4821      	ldr	r0, [pc, #132]	; (8001128 <STM32_ADC_ReadVoltage+0x160>)
 80010a2:	f002 fe5d 	bl	8003d60 <HAL_ADC_Stop>
		return ADC_STM_ERROR_HAL_POLL;
 80010a6:	f06f 0303 	mvn.w	r3, #3
 80010aa:	e02f      	b.n	800110c <STM32_ADC_ReadVoltage+0x144>
	}
	ret_adc=HAL_ADC_Stop(&UC_ADC);							       		//Stop ADC
 80010ac:	481e      	ldr	r0, [pc, #120]	; (8001128 <STM32_ADC_ReadVoltage+0x160>)
 80010ae:	f002 fe57 	bl	8003d60 <HAL_ADC_Stop>
 80010b2:	4603      	mov	r3, r0
 80010b4:	75fb      	strb	r3, [r7, #23]
	if(ret_adc!=HAL_OK){ return ADC_STM_ERROR_HAL_STOP; }
 80010b6:	7dfb      	ldrb	r3, [r7, #23]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d002      	beq.n	80010c2 <STM32_ADC_ReadVoltage+0xfa>
 80010bc:	f06f 0302 	mvn.w	r3, #2
 80010c0:	e024      	b.n	800110c <STM32_ADC_ReadVoltage+0x144>

	//Process sample data into a float
	uint32_t Raw_ADCValue = HAL_ADC_GetValue(&UC_ADC) & 0x0FFF;  		//Read ADC value
 80010c2:	4819      	ldr	r0, [pc, #100]	; (8001128 <STM32_ADC_ReadVoltage+0x160>)
 80010c4:	f002 ff50 	bl	8003f68 <HAL_ADC_GetValue>
 80010c8:	4603      	mov	r3, r0
 80010ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80010ce:	613b      	str	r3, [r7, #16]
	float ADC_Value = (float)Raw_ADCValue/4095 * 3.30;					//Convert ADC value to float
 80010d0:	693b      	ldr	r3, [r7, #16]
 80010d2:	ee07 3a90 	vmov	s15, r3
 80010d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80010da:	ed9f 7a14 	vldr	s14, [pc, #80]	; 800112c <STM32_ADC_ReadVoltage+0x164>
 80010de:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80010e2:	ee16 0a90 	vmov	r0, s13
 80010e6:	f7ff fa2f 	bl	8000548 <__aeabi_f2d>
 80010ea:	a30b      	add	r3, pc, #44	; (adr r3, 8001118 <STM32_ADC_ReadVoltage+0x150>)
 80010ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010f0:	f7ff fa82 	bl	80005f8 <__aeabi_dmul>
 80010f4:	4602      	mov	r2, r0
 80010f6:	460b      	mov	r3, r1
 80010f8:	4610      	mov	r0, r2
 80010fa:	4619      	mov	r1, r3
 80010fc:	f7ff fd74 	bl	8000be8 <__aeabi_d2f>
 8001100:	4603      	mov	r3, r0
 8001102:	60fb      	str	r3, [r7, #12]
	*ReturnValue = ADC_Value;											//Save calculated value to return pointer
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	68fa      	ldr	r2, [r7, #12]
 8001108:	601a      	str	r2, [r3, #0]
	//memset(PrintBuffer, '\0', COMM_SIZE); snprintf(PrintBuffer, COMM_SIZE-1, "\n\rCC%u Value -> %0.3f", Channel, ADC_Value1 );
	//DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE );

	return ADC_STM_STATUS_OK;
 800110a:	2300      	movs	r3, #0

}
 800110c:	4618      	mov	r0, r3
 800110e:	3718      	adds	r7, #24
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}
 8001114:	f3af 8000 	nop.w
 8001118:	66666666 	.word	0x66666666
 800111c:	400a6666 	.word	0x400a6666
 8001120:	20000000 	.word	0x20000000
 8001124:	20000018 	.word	0x20000018
 8001128:	20000240 	.word	0x20000240
 800112c:	457ff000 	.word	0x457ff000

08001130 <DebugPrint>:
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////  CONSOLE PRINT  //////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//Print string data to console over UART
void DebugPrint(uint8_t PrintEnable, char* StringBuffer, uint16_t Size){
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
 8001136:	4603      	mov	r3, r0
 8001138:	6039      	str	r1, [r7, #0]
 800113a:	71fb      	strb	r3, [r7, #7]
 800113c:	4613      	mov	r3, r2
 800113e:	80bb      	strh	r3, [r7, #4]

	//If print condition is enabled, send data over UART
	if(PrintEnable == true){
 8001140:	79fb      	ldrb	r3, [r7, #7]
 8001142:	2b01      	cmp	r3, #1
 8001144:	d105      	bne.n	8001152 <DebugPrint+0x22>
		HAL_UART_Transmit(&UART_COMM, (uint8_t*)StringBuffer, Size, 100 );
 8001146:	88ba      	ldrh	r2, [r7, #4]
 8001148:	2364      	movs	r3, #100	; 0x64
 800114a:	6839      	ldr	r1, [r7, #0]
 800114c:	4803      	ldr	r0, [pc, #12]	; (800115c <DebugPrint+0x2c>)
 800114e:	f007 fa15 	bl	800857c <HAL_UART_Transmit>
	}

}
 8001152:	bf00      	nop
 8001154:	3708      	adds	r7, #8
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	20000454 	.word	0x20000454

08001160 <PrimaryStateMachine>:
//////////////////////////////////////  System State Machines /////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


//Setup for transmitting CANbus
void PrimaryStateMachine(void){
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0

	switch(PrimaryState){
 8001164:	4b1c      	ldr	r3, [pc, #112]	; (80011d8 <PrimaryStateMachine+0x78>)
 8001166:	781b      	ldrb	r3, [r3, #0]
 8001168:	2b03      	cmp	r3, #3
 800116a:	d81d      	bhi.n	80011a8 <PrimaryStateMachine+0x48>
 800116c:	a201      	add	r2, pc, #4	; (adr r2, 8001174 <PrimaryStateMachine+0x14>)
 800116e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001172:	bf00      	nop
 8001174:	080011d3 	.word	0x080011d3
 8001178:	08001185 	.word	0x08001185
 800117c:	08001191 	.word	0x08001191
 8001180:	0800119d 	.word	0x0800119d
		case 0x00:
			break;

		//Pairing Routine
		case 0x01:
			ControllerPairRoutine();
 8001184:	f001 fd88 	bl	8002c98 <ControllerPairRoutine>
			PrimaryState=0x00;
 8001188:	4b13      	ldr	r3, [pc, #76]	; (80011d8 <PrimaryStateMachine+0x78>)
 800118a:	2200      	movs	r2, #0
 800118c:	701a      	strb	r2, [r3, #0]
			break;
 800118e:	e021      	b.n	80011d4 <PrimaryStateMachine+0x74>

		//Connection Ping
		case 0x02:
			ControllerPingRoutine();
 8001190:	f001 fe8e 	bl	8002eb0 <ControllerPingRoutine>
			PrimaryState=0x00;
 8001194:	4b10      	ldr	r3, [pc, #64]	; (80011d8 <PrimaryStateMachine+0x78>)
 8001196:	2200      	movs	r2, #0
 8001198:	701a      	strb	r2, [r3, #0]
			break;
 800119a:	e01b      	b.n	80011d4 <PrimaryStateMachine+0x74>

		//Sensor read
		case 0x03:
			SensorMeasurementRoutine();
 800119c:	f001 fefc 	bl	8002f98 <SensorMeasurementRoutine>
			PrimaryState=0x00;
 80011a0:	4b0d      	ldr	r3, [pc, #52]	; (80011d8 <PrimaryStateMachine+0x78>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	701a      	strb	r2, [r3, #0]
			break;
 80011a6:	e015      	b.n	80011d4 <PrimaryStateMachine+0x74>

		//Fail case for unimplemented states
		default:
			memset(PrintBuffer, '\0', COMM_SIZE);  snprintf(PrintBuffer, COMM_SIZE-1, "\n\n\rInvalid Instruction Received - Transitioning to Standby State"  );
 80011a8:	2280      	movs	r2, #128	; 0x80
 80011aa:	2100      	movs	r1, #0
 80011ac:	480b      	ldr	r0, [pc, #44]	; (80011dc <PrimaryStateMachine+0x7c>)
 80011ae:	f008 fe16 	bl	8009dde <memset>
 80011b2:	4a0b      	ldr	r2, [pc, #44]	; (80011e0 <PrimaryStateMachine+0x80>)
 80011b4:	217f      	movs	r1, #127	; 0x7f
 80011b6:	4809      	ldr	r0, [pc, #36]	; (80011dc <PrimaryStateMachine+0x7c>)
 80011b8:	f008 fd7a 	bl	8009cb0 <sniprintf>
			DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE);
 80011bc:	4b09      	ldr	r3, [pc, #36]	; (80011e4 <PrimaryStateMachine+0x84>)
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	2280      	movs	r2, #128	; 0x80
 80011c2:	4906      	ldr	r1, [pc, #24]	; (80011dc <PrimaryStateMachine+0x7c>)
 80011c4:	4618      	mov	r0, r3
 80011c6:	f7ff ffb3 	bl	8001130 <DebugPrint>
			PrimaryState=0x00;
 80011ca:	4b03      	ldr	r3, [pc, #12]	; (80011d8 <PrimaryStateMachine+0x78>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	701a      	strb	r2, [r3, #0]

	}  //End switch statement


}
 80011d0:	e000      	b.n	80011d4 <PrimaryStateMachine+0x74>
			break;
 80011d2:	bf00      	nop
}
 80011d4:	bf00      	nop
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	200005aa 	.word	0x200005aa
 80011dc:	200004e8 	.word	0x200004e8
 80011e0:	0800d668 	.word	0x0800d668
 80011e4:	2000004b 	.word	0x2000004b

080011e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b086      	sub	sp, #24
 80011ec:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011ee:	f002 fae5 	bl	80037bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011f2:	f000 fa11 	bl	8001618 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011f6:	f000 fc43 	bl	8001a80 <MX_GPIO_Init>
  MX_CAN_Init();
 80011fa:	f000 fad7 	bl	80017ac <MX_CAN_Init>
  MX_I2C1_Init();
 80011fe:	f000 fb0b 	bl	8001818 <MX_I2C1_Init>
  MX_SPI2_Init();
 8001202:	f000 fb49 	bl	8001898 <MX_SPI2_Init>
  MX_TIM6_Init();
 8001206:	f000 fb85 	bl	8001914 <MX_TIM6_Init>
  MX_TIM16_Init();
 800120a:	f000 fbbb 	bl	8001984 <MX_TIM16_Init>
  MX_TIM17_Init();
 800120e:	f000 fbdf 	bl	80019d0 <MX_TIM17_Init>
  MX_USART2_UART_Init();
 8001212:	f000 fc05 	bl	8001a20 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8001216:	f000 fa59 	bl	80016cc <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  //Prevents user code execution on firmware update
  HAL_Delay(1000);
 800121a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800121e:	f002 fb33 	bl	8003888 <HAL_Delay>

  //Print the opening splash message
  StartupPrint_Routine();
 8001222:	f001 fc73 	bl	8002b0c <StartupPrint_Routine>

  memset(PrintBuffer, '\0', COMM_SIZE); snprintf(PrintBuffer, COMM_SIZE-1, "\n\n\rFirmware Version: %s", FirmwareVersion );
 8001226:	2280      	movs	r2, #128	; 0x80
 8001228:	2100      	movs	r1, #0
 800122a:	486a      	ldr	r0, [pc, #424]	; (80013d4 <main+0x1ec>)
 800122c:	f008 fdd7 	bl	8009dde <memset>
 8001230:	4b69      	ldr	r3, [pc, #420]	; (80013d8 <main+0x1f0>)
 8001232:	4a6a      	ldr	r2, [pc, #424]	; (80013dc <main+0x1f4>)
 8001234:	217f      	movs	r1, #127	; 0x7f
 8001236:	4867      	ldr	r0, [pc, #412]	; (80013d4 <main+0x1ec>)
 8001238:	f008 fd3a 	bl	8009cb0 <sniprintf>
  DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE);
 800123c:	4b68      	ldr	r3, [pc, #416]	; (80013e0 <main+0x1f8>)
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	2280      	movs	r2, #128	; 0x80
 8001242:	4964      	ldr	r1, [pc, #400]	; (80013d4 <main+0x1ec>)
 8001244:	4618      	mov	r0, r3
 8001246:	f7ff ff73 	bl	8001130 <DebugPrint>
  memset(PrintBuffer, '\0', COMM_SIZE); snprintf(PrintBuffer, COMM_SIZE-1, "\n\rDevice Mode: %s", DeviceMode );
 800124a:	2280      	movs	r2, #128	; 0x80
 800124c:	2100      	movs	r1, #0
 800124e:	4861      	ldr	r0, [pc, #388]	; (80013d4 <main+0x1ec>)
 8001250:	f008 fdc5 	bl	8009dde <memset>
 8001254:	4b63      	ldr	r3, [pc, #396]	; (80013e4 <main+0x1fc>)
 8001256:	4a64      	ldr	r2, [pc, #400]	; (80013e8 <main+0x200>)
 8001258:	217f      	movs	r1, #127	; 0x7f
 800125a:	485e      	ldr	r0, [pc, #376]	; (80013d4 <main+0x1ec>)
 800125c:	f008 fd28 	bl	8009cb0 <sniprintf>
  DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE);
 8001260:	4b5f      	ldr	r3, [pc, #380]	; (80013e0 <main+0x1f8>)
 8001262:	781b      	ldrb	r3, [r3, #0]
 8001264:	2280      	movs	r2, #128	; 0x80
 8001266:	495b      	ldr	r1, [pc, #364]	; (80013d4 <main+0x1ec>)
 8001268:	4618      	mov	r0, r3
 800126a:	f7ff ff61 	bl	8001130 <DebugPrint>
  if(0){ ProgramEEPROM_All(); 		 }
  if(0){ ProgramEEPROM_CAN(); 		 }
  if(0){ ProgramEEPROM_SensorType(); }

  //Perform Ion Sensor activation routine
  if( SystemActivation() == true ){
 800126e:	f001 fe9b 	bl	8002fa8 <SystemActivation>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d011      	beq.n	800129c <main+0xb4>
	  memset(PrintBuffer, '\0', COMM_SIZE); snprintf(PrintBuffer, COMM_SIZE-1, "\n\rAll subsystems successfully activated"  );
 8001278:	2280      	movs	r2, #128	; 0x80
 800127a:	2100      	movs	r1, #0
 800127c:	4855      	ldr	r0, [pc, #340]	; (80013d4 <main+0x1ec>)
 800127e:	f008 fdae 	bl	8009dde <memset>
 8001282:	4a5a      	ldr	r2, [pc, #360]	; (80013ec <main+0x204>)
 8001284:	217f      	movs	r1, #127	; 0x7f
 8001286:	4853      	ldr	r0, [pc, #332]	; (80013d4 <main+0x1ec>)
 8001288:	f008 fd12 	bl	8009cb0 <sniprintf>
	  DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE);
 800128c:	4b54      	ldr	r3, [pc, #336]	; (80013e0 <main+0x1f8>)
 800128e:	781b      	ldrb	r3, [r3, #0]
 8001290:	2280      	movs	r2, #128	; 0x80
 8001292:	4950      	ldr	r1, [pc, #320]	; (80013d4 <main+0x1ec>)
 8001294:	4618      	mov	r0, r3
 8001296:	f7ff ff4b 	bl	8001130 <DebugPrint>
 800129a:	e013      	b.n	80012c4 <main+0xdc>
  }else{
	  MasterActivation = false;
 800129c:	4b54      	ldr	r3, [pc, #336]	; (80013f0 <main+0x208>)
 800129e:	2200      	movs	r2, #0
 80012a0:	701a      	strb	r2, [r3, #0]
	  memset(PrintBuffer, '\0', COMM_SIZE); snprintf(PrintBuffer, COMM_SIZE-1, "\n\rCRITICAL ERROR - Could not activate all subsystems"  );
 80012a2:	2280      	movs	r2, #128	; 0x80
 80012a4:	2100      	movs	r1, #0
 80012a6:	484b      	ldr	r0, [pc, #300]	; (80013d4 <main+0x1ec>)
 80012a8:	f008 fd99 	bl	8009dde <memset>
 80012ac:	4a51      	ldr	r2, [pc, #324]	; (80013f4 <main+0x20c>)
 80012ae:	217f      	movs	r1, #127	; 0x7f
 80012b0:	4848      	ldr	r0, [pc, #288]	; (80013d4 <main+0x1ec>)
 80012b2:	f008 fcfd 	bl	8009cb0 <sniprintf>
	  DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE);
 80012b6:	4b4a      	ldr	r3, [pc, #296]	; (80013e0 <main+0x1f8>)
 80012b8:	781b      	ldrb	r3, [r3, #0]
 80012ba:	2280      	movs	r2, #128	; 0x80
 80012bc:	4945      	ldr	r1, [pc, #276]	; (80013d4 <main+0x1ec>)
 80012be:	4618      	mov	r0, r3
 80012c0:	f7ff ff36 	bl	8001130 <DebugPrint>
  }

  //Print the sensor information stored in the EEPROM
  SystemSettingPrint_Routine();
 80012c4:	f001 fc76 	bl	8002bb4 <SystemSettingPrint_Routine>

  //Init the CANBus with retrieved system information
  CANSetup(SysInfo.CAN_Address);
 80012c8:	4b4b      	ldr	r3, [pc, #300]	; (80013f8 <main+0x210>)
 80012ca:	891b      	ldrh	r3, [r3, #8]
 80012cc:	4618      	mov	r0, r3
 80012ce:	f001 faa3 	bl	8002818 <CANSetup>
  uint32_t ReadRegister=0;
 80012d2:	2300      	movs	r3, #0
 80012d4:	60bb      	str	r3, [r7, #8]
  ReadRegister=CANBUS_EXT.Instance->MCR;
 80012d6:	4b49      	ldr	r3, [pc, #292]	; (80013fc <main+0x214>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	60bb      	str	r3, [r7, #8]
  memset(PrintBuffer, '\0', COMM_SIZE); snprintf(PrintBuffer, COMM_SIZE-1, "\n\n\rCAN MCR Register: 0x%2lX", ReadRegister  );
 80012de:	2280      	movs	r2, #128	; 0x80
 80012e0:	2100      	movs	r1, #0
 80012e2:	483c      	ldr	r0, [pc, #240]	; (80013d4 <main+0x1ec>)
 80012e4:	f008 fd7b 	bl	8009dde <memset>
 80012e8:	68bb      	ldr	r3, [r7, #8]
 80012ea:	4a45      	ldr	r2, [pc, #276]	; (8001400 <main+0x218>)
 80012ec:	217f      	movs	r1, #127	; 0x7f
 80012ee:	4839      	ldr	r0, [pc, #228]	; (80013d4 <main+0x1ec>)
 80012f0:	f008 fcde 	bl	8009cb0 <sniprintf>
  DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE);
 80012f4:	4b3a      	ldr	r3, [pc, #232]	; (80013e0 <main+0x1f8>)
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	2280      	movs	r2, #128	; 0x80
 80012fa:	4936      	ldr	r1, [pc, #216]	; (80013d4 <main+0x1ec>)
 80012fc:	4618      	mov	r0, r3
 80012fe:	f7ff ff17 	bl	8001130 <DebugPrint>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  //Print message saying that the master while loop has been successfully entered
  if(MasterActivation==true){
 8001302:	4b3b      	ldr	r3, [pc, #236]	; (80013f0 <main+0x208>)
 8001304:	781b      	ldrb	r3, [r3, #0]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d010      	beq.n	800132c <main+0x144>
	  memset(PrintBuffer, '\0', COMM_SIZE); snprintf(PrintBuffer, COMM_SIZE-1, "\n\n\rMaster while loop entered" );
 800130a:	2280      	movs	r2, #128	; 0x80
 800130c:	2100      	movs	r1, #0
 800130e:	4831      	ldr	r0, [pc, #196]	; (80013d4 <main+0x1ec>)
 8001310:	f008 fd65 	bl	8009dde <memset>
 8001314:	4a3b      	ldr	r2, [pc, #236]	; (8001404 <main+0x21c>)
 8001316:	217f      	movs	r1, #127	; 0x7f
 8001318:	482e      	ldr	r0, [pc, #184]	; (80013d4 <main+0x1ec>)
 800131a:	f008 fcc9 	bl	8009cb0 <sniprintf>
	  DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE);
 800131e:	4b30      	ldr	r3, [pc, #192]	; (80013e0 <main+0x1f8>)
 8001320:	781b      	ldrb	r3, [r3, #0]
 8001322:	2280      	movs	r2, #128	; 0x80
 8001324:	492b      	ldr	r1, [pc, #172]	; (80013d4 <main+0x1ec>)
 8001326:	4618      	mov	r0, r3
 8001328:	f7ff ff02 	bl	8001130 <DebugPrint>
  }


  //uint8_t Status;
  //uint8_t ReadBuffer[6] = {0x00};
  uint8_t ctrlbool=0;
 800132c:	2300      	movs	r3, #0
 800132e:	73fb      	strb	r3, [r7, #15]

  while(MasterActivation==true){
 8001330:	e13e      	b.n	80015b0 <main+0x3c8>

	  //Check heart beat LED
	  if( HeartBeatFlag == true ){
 8001332:	4b35      	ldr	r3, [pc, #212]	; (8001408 <main+0x220>)
 8001334:	781b      	ldrb	r3, [r3, #0]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d004      	beq.n	8001344 <main+0x15c>
		  HeartBeatFlag = false;
 800133a:	4b33      	ldr	r3, [pc, #204]	; (8001408 <main+0x220>)
 800133c:	2200      	movs	r2, #0
 800133e:	701a      	strb	r2, [r3, #0]
		  Toggle_LED_HeartBeat();
 8001340:	f7ff fdd6 	bl	8000ef0 <Toggle_LED_HeartBeat>
	  }

	  //Check CAN FIFO0 for an instruction on the bus
  	  if(HAL_CAN_GetRxFifoFillLevel(&CANBUS_EXT, CAN_RX_FIFO0) != 0){		//If FIFO0 has a message, retrieve it
 8001344:	2100      	movs	r1, #0
 8001346:	482d      	ldr	r0, [pc, #180]	; (80013fc <main+0x214>)
 8001348:	f003 ff8d 	bl	8005266 <HAL_CAN_GetRxFifoFillLevel>
 800134c:	4603      	mov	r3, r0
 800134e:	2b00      	cmp	r3, #0
 8001350:	d07c      	beq.n	800144c <main+0x264>
  		  CAN_ClearFIFO(CAN_RX_FIFO1);
 8001352:	2001      	movs	r0, #1
 8001354:	f000 ff78 	bl	8002248 <CAN_ClearFIFO>
  		  memset(CAN_ReceivedMessage, 0, 8);
 8001358:	2208      	movs	r2, #8
 800135a:	2100      	movs	r1, #0
 800135c:	482b      	ldr	r0, [pc, #172]	; (800140c <main+0x224>)
 800135e:	f008 fd3e 	bl	8009dde <memset>
  		  ret = HAL_CAN_GetRxMessage(&CANBUS_EXT, CAN_RX_FIFO0, &pRxHeader, CAN_ReceivedMessage);
 8001362:	4b2a      	ldr	r3, [pc, #168]	; (800140c <main+0x224>)
 8001364:	4a2a      	ldr	r2, [pc, #168]	; (8001410 <main+0x228>)
 8001366:	2100      	movs	r1, #0
 8001368:	4824      	ldr	r0, [pc, #144]	; (80013fc <main+0x214>)
 800136a:	f003 fe5a 	bl	8005022 <HAL_CAN_GetRxMessage>
 800136e:	4603      	mov	r3, r0
 8001370:	461a      	mov	r2, r3
 8001372:	4b28      	ldr	r3, [pc, #160]	; (8001414 <main+0x22c>)
 8001374:	701a      	strb	r2, [r3, #0]
  		  if( ret == HAL_OK ) {
 8001376:	4b27      	ldr	r3, [pc, #156]	; (8001414 <main+0x22c>)
 8001378:	781b      	ldrb	r3, [r3, #0]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d152      	bne.n	8001424 <main+0x23c>
  			  PrimaryState = CAN_ReceivedMessage[0];
 800137e:	4b23      	ldr	r3, [pc, #140]	; (800140c <main+0x224>)
 8001380:	781a      	ldrb	r2, [r3, #0]
 8001382:	4b25      	ldr	r3, [pc, #148]	; (8001418 <main+0x230>)
 8001384:	701a      	strb	r2, [r3, #0]
  			  memset(PrintBuffer, '\0', COMM_SIZE);  snprintf(PrintBuffer, COMM_SIZE-1, "\n\n\rCAN message received on FIFO0 from 0x%03lX", pRxHeader.StdId);
 8001386:	2280      	movs	r2, #128	; 0x80
 8001388:	2100      	movs	r1, #0
 800138a:	4812      	ldr	r0, [pc, #72]	; (80013d4 <main+0x1ec>)
 800138c:	f008 fd27 	bl	8009dde <memset>
 8001390:	4b1f      	ldr	r3, [pc, #124]	; (8001410 <main+0x228>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4a21      	ldr	r2, [pc, #132]	; (800141c <main+0x234>)
 8001396:	217f      	movs	r1, #127	; 0x7f
 8001398:	480e      	ldr	r0, [pc, #56]	; (80013d4 <main+0x1ec>)
 800139a:	f008 fc89 	bl	8009cb0 <sniprintf>
  			  DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE);
 800139e:	4b10      	ldr	r3, [pc, #64]	; (80013e0 <main+0x1f8>)
 80013a0:	781b      	ldrb	r3, [r3, #0]
 80013a2:	2280      	movs	r2, #128	; 0x80
 80013a4:	490b      	ldr	r1, [pc, #44]	; (80013d4 <main+0x1ec>)
 80013a6:	4618      	mov	r0, r3
 80013a8:	f7ff fec2 	bl	8001130 <DebugPrint>
  			  memset(PrintBuffer, '\0', COMM_SIZE);  snprintf(PrintBuffer, COMM_SIZE-1, "\n\r\t- PrimaryState = %u", PrimaryState);
 80013ac:	2280      	movs	r2, #128	; 0x80
 80013ae:	2100      	movs	r1, #0
 80013b0:	4808      	ldr	r0, [pc, #32]	; (80013d4 <main+0x1ec>)
 80013b2:	f008 fd14 	bl	8009dde <memset>
 80013b6:	4b18      	ldr	r3, [pc, #96]	; (8001418 <main+0x230>)
 80013b8:	781b      	ldrb	r3, [r3, #0]
 80013ba:	4a19      	ldr	r2, [pc, #100]	; (8001420 <main+0x238>)
 80013bc:	217f      	movs	r1, #127	; 0x7f
 80013be:	4805      	ldr	r0, [pc, #20]	; (80013d4 <main+0x1ec>)
 80013c0:	f008 fc76 	bl	8009cb0 <sniprintf>
  			  DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE);
 80013c4:	4b06      	ldr	r3, [pc, #24]	; (80013e0 <main+0x1f8>)
 80013c6:	781b      	ldrb	r3, [r3, #0]
 80013c8:	2280      	movs	r2, #128	; 0x80
 80013ca:	4902      	ldr	r1, [pc, #8]	; (80013d4 <main+0x1ec>)
 80013cc:	4618      	mov	r0, r3
 80013ce:	f7ff feaf 	bl	8001130 <DebugPrint>
 80013d2:	e03b      	b.n	800144c <main+0x264>
 80013d4:	200004e8 	.word	0x200004e8
 80013d8:	20000030 	.word	0x20000030
 80013dc:	0800d6ac 	.word	0x0800d6ac
 80013e0:	2000004b 	.word	0x2000004b
 80013e4:	20000038 	.word	0x20000038
 80013e8:	0800d6c4 	.word	0x0800d6c4
 80013ec:	0800d6d8 	.word	0x0800d6d8
 80013f0:	2000004c 	.word	0x2000004c
 80013f4:	0800d700 	.word	0x0800d700
 80013f8:	200004dc 	.word	0x200004dc
 80013fc:	20000290 	.word	0x20000290
 8001400:	0800d738 	.word	0x0800d738
 8001404:	0800d754 	.word	0x0800d754
 8001408:	200005a9 	.word	0x200005a9
 800140c:	200005a0 	.word	0x200005a0
 8001410:	20000584 	.word	0x20000584
 8001414:	200005a8 	.word	0x200005a8
 8001418:	200005aa 	.word	0x200005aa
 800141c:	0800d774 	.word	0x0800d774
 8001420:	0800d7a4 	.word	0x0800d7a4
  		  }else{
  	  		  memset(PrintBuffer, '\0', COMM_SIZE);  snprintf(PrintBuffer, COMM_SIZE-1, "\n\rCAN message could not be received on FIFO0"  );
 8001424:	2280      	movs	r2, #128	; 0x80
 8001426:	2100      	movs	r1, #0
 8001428:	486f      	ldr	r0, [pc, #444]	; (80015e8 <main+0x400>)
 800142a:	f008 fcd8 	bl	8009dde <memset>
 800142e:	4a6f      	ldr	r2, [pc, #444]	; (80015ec <main+0x404>)
 8001430:	217f      	movs	r1, #127	; 0x7f
 8001432:	486d      	ldr	r0, [pc, #436]	; (80015e8 <main+0x400>)
 8001434:	f008 fc3c 	bl	8009cb0 <sniprintf>
  	  		  DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE);
 8001438:	4b6d      	ldr	r3, [pc, #436]	; (80015f0 <main+0x408>)
 800143a:	781b      	ldrb	r3, [r3, #0]
 800143c:	2280      	movs	r2, #128	; 0x80
 800143e:	496a      	ldr	r1, [pc, #424]	; (80015e8 <main+0x400>)
 8001440:	4618      	mov	r0, r3
 8001442:	f7ff fe75 	bl	8001130 <DebugPrint>
  	  		  PrimaryState=0x00;
 8001446:	4b6b      	ldr	r3, [pc, #428]	; (80015f4 <main+0x40c>)
 8001448:	2200      	movs	r2, #0
 800144a:	701a      	strb	r2, [r3, #0]
  		  }
  	  }

	  //Enter primary state machine
	  PrimaryStateMachine();
 800144c:	f7ff fe88 	bl	8001160 <PrimaryStateMachine>




	  if(SysInfo.Button1==true){
 8001450:	4b69      	ldr	r3, [pc, #420]	; (80015f8 <main+0x410>)
 8001452:	781b      	ldrb	r3, [r3, #0]
 8001454:	2b00      	cmp	r3, #0
 8001456:	d046      	beq.n	80014e6 <main+0x2fe>
		  SysInfo.Button1=false;
 8001458:	4b67      	ldr	r3, [pc, #412]	; (80015f8 <main+0x410>)
 800145a:	2200      	movs	r2, #0
 800145c:	701a      	strb	r2, [r3, #0]
		  memset(PrintBuffer, '\0', COMM_SIZE); snprintf(PrintBuffer, COMM_SIZE-1, "\n\rButton 1 Pressed");
 800145e:	2280      	movs	r2, #128	; 0x80
 8001460:	2100      	movs	r1, #0
 8001462:	4861      	ldr	r0, [pc, #388]	; (80015e8 <main+0x400>)
 8001464:	f008 fcbb 	bl	8009dde <memset>
 8001468:	4a64      	ldr	r2, [pc, #400]	; (80015fc <main+0x414>)
 800146a:	217f      	movs	r1, #127	; 0x7f
 800146c:	485e      	ldr	r0, [pc, #376]	; (80015e8 <main+0x400>)
 800146e:	f008 fc1f 	bl	8009cb0 <sniprintf>
		  DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE);
 8001472:	4b5f      	ldr	r3, [pc, #380]	; (80015f0 <main+0x408>)
 8001474:	781b      	ldrb	r3, [r3, #0]
 8001476:	2280      	movs	r2, #128	; 0x80
 8001478:	495b      	ldr	r1, [pc, #364]	; (80015e8 <main+0x400>)
 800147a:	4618      	mov	r0, r3
 800147c:	f7ff fe58 	bl	8001130 <DebugPrint>

		  memset(PrintBuffer, '\0', COMM_SIZE); snprintf(PrintBuffer, COMM_SIZE-1, "\n\rTS Pin -> Status %u", Read_USBC_SpareTS() );
 8001480:	2280      	movs	r2, #128	; 0x80
 8001482:	2100      	movs	r1, #0
 8001484:	4858      	ldr	r0, [pc, #352]	; (80015e8 <main+0x400>)
 8001486:	f008 fcaa 	bl	8009dde <memset>
 800148a:	f7ff fc7d 	bl	8000d88 <Read_USBC_SpareTS>
 800148e:	4603      	mov	r3, r0
 8001490:	4a5b      	ldr	r2, [pc, #364]	; (8001600 <main+0x418>)
 8001492:	217f      	movs	r1, #127	; 0x7f
 8001494:	4854      	ldr	r0, [pc, #336]	; (80015e8 <main+0x400>)
 8001496:	f008 fc0b 	bl	8009cb0 <sniprintf>
		  DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE);
 800149a:	4b55      	ldr	r3, [pc, #340]	; (80015f0 <main+0x408>)
 800149c:	781b      	ldrb	r3, [r3, #0]
 800149e:	2280      	movs	r2, #128	; 0x80
 80014a0:	4951      	ldr	r1, [pc, #324]	; (80015e8 <main+0x400>)
 80014a2:	4618      	mov	r0, r3
 80014a4:	f7ff fe44 	bl	8001130 <DebugPrint>

		  //HAL_ADCEx_Calibration_Start();
		  float VoltageValue1;
		  STM32_ADC_ReadVoltage(&VoltageValue1, CC1_CH);
 80014a8:	1d3b      	adds	r3, r7, #4
 80014aa:	2101      	movs	r1, #1
 80014ac:	4618      	mov	r0, r3
 80014ae:	f7ff fd8b 	bl	8000fc8 <STM32_ADC_ReadVoltage>
		  memset(PrintBuffer, '\0', COMM_SIZE); snprintf(PrintBuffer, COMM_SIZE-1, "\n\rCC%u Value -> %0.3f", CC1_CH, VoltageValue1 );
 80014b2:	2280      	movs	r2, #128	; 0x80
 80014b4:	2100      	movs	r1, #0
 80014b6:	484c      	ldr	r0, [pc, #304]	; (80015e8 <main+0x400>)
 80014b8:	f008 fc91 	bl	8009dde <memset>
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	4618      	mov	r0, r3
 80014c0:	f7ff f842 	bl	8000548 <__aeabi_f2d>
 80014c4:	4602      	mov	r2, r0
 80014c6:	460b      	mov	r3, r1
 80014c8:	e9cd 2300 	strd	r2, r3, [sp]
 80014cc:	2301      	movs	r3, #1
 80014ce:	4a4d      	ldr	r2, [pc, #308]	; (8001604 <main+0x41c>)
 80014d0:	217f      	movs	r1, #127	; 0x7f
 80014d2:	4845      	ldr	r0, [pc, #276]	; (80015e8 <main+0x400>)
 80014d4:	f008 fbec 	bl	8009cb0 <sniprintf>
		  DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE );
 80014d8:	4b45      	ldr	r3, [pc, #276]	; (80015f0 <main+0x408>)
 80014da:	781b      	ldrb	r3, [r3, #0]
 80014dc:	2280      	movs	r2, #128	; 0x80
 80014de:	4942      	ldr	r1, [pc, #264]	; (80015e8 <main+0x400>)
 80014e0:	4618      	mov	r0, r3
 80014e2:	f7ff fe25 	bl	8001130 <DebugPrint>
		  */

	  }


	  if(SysInfo.Button2==true){
 80014e6:	4b44      	ldr	r3, [pc, #272]	; (80015f8 <main+0x410>)
 80014e8:	785b      	ldrb	r3, [r3, #1]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d032      	beq.n	8001554 <main+0x36c>
		  SysInfo.Button2=false;
 80014ee:	4b42      	ldr	r3, [pc, #264]	; (80015f8 <main+0x410>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	705a      	strb	r2, [r3, #1]
		  memset(PrintBuffer, '\0', COMM_SIZE); snprintf(PrintBuffer, COMM_SIZE-1, "\n\rButton 2 Pressed");
 80014f4:	2280      	movs	r2, #128	; 0x80
 80014f6:	2100      	movs	r1, #0
 80014f8:	483b      	ldr	r0, [pc, #236]	; (80015e8 <main+0x400>)
 80014fa:	f008 fc70 	bl	8009dde <memset>
 80014fe:	4a42      	ldr	r2, [pc, #264]	; (8001608 <main+0x420>)
 8001500:	217f      	movs	r1, #127	; 0x7f
 8001502:	4839      	ldr	r0, [pc, #228]	; (80015e8 <main+0x400>)
 8001504:	f008 fbd4 	bl	8009cb0 <sniprintf>
		  DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE);
 8001508:	4b39      	ldr	r3, [pc, #228]	; (80015f0 <main+0x408>)
 800150a:	781b      	ldrb	r3, [r3, #0]
 800150c:	2280      	movs	r2, #128	; 0x80
 800150e:	4936      	ldr	r1, [pc, #216]	; (80015e8 <main+0x400>)
 8001510:	4618      	mov	r0, r3
 8001512:	f7ff fe0d 	bl	8001130 <DebugPrint>

		  //HAL_ADCEx_Calibration_Start();
		  float VoltageValue2;
		  STM32_ADC_ReadVoltage(&VoltageValue2, CC2_CH);
 8001516:	463b      	mov	r3, r7
 8001518:	2102      	movs	r1, #2
 800151a:	4618      	mov	r0, r3
 800151c:	f7ff fd54 	bl	8000fc8 <STM32_ADC_ReadVoltage>
		  memset(PrintBuffer, '\0', COMM_SIZE); snprintf(PrintBuffer, COMM_SIZE-1, "\n\rCC%u Value -> %0.3f", CC2_CH, VoltageValue2 );
 8001520:	2280      	movs	r2, #128	; 0x80
 8001522:	2100      	movs	r1, #0
 8001524:	4830      	ldr	r0, [pc, #192]	; (80015e8 <main+0x400>)
 8001526:	f008 fc5a 	bl	8009dde <memset>
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	4618      	mov	r0, r3
 800152e:	f7ff f80b 	bl	8000548 <__aeabi_f2d>
 8001532:	4602      	mov	r2, r0
 8001534:	460b      	mov	r3, r1
 8001536:	e9cd 2300 	strd	r2, r3, [sp]
 800153a:	2302      	movs	r3, #2
 800153c:	4a31      	ldr	r2, [pc, #196]	; (8001604 <main+0x41c>)
 800153e:	217f      	movs	r1, #127	; 0x7f
 8001540:	4829      	ldr	r0, [pc, #164]	; (80015e8 <main+0x400>)
 8001542:	f008 fbb5 	bl	8009cb0 <sniprintf>
		  DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE );
 8001546:	4b2a      	ldr	r3, [pc, #168]	; (80015f0 <main+0x408>)
 8001548:	781b      	ldrb	r3, [r3, #0]
 800154a:	2280      	movs	r2, #128	; 0x80
 800154c:	4926      	ldr	r1, [pc, #152]	; (80015e8 <main+0x400>)
 800154e:	4618      	mov	r0, r3
 8001550:	f7ff fdee 	bl	8001130 <DebugPrint>


	  }


	  if(SysInfo.Button3==true){
 8001554:	4b28      	ldr	r3, [pc, #160]	; (80015f8 <main+0x410>)
 8001556:	789b      	ldrb	r3, [r3, #2]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d029      	beq.n	80015b0 <main+0x3c8>
		  SysInfo.Button3=false;
 800155c:	4b26      	ldr	r3, [pc, #152]	; (80015f8 <main+0x410>)
 800155e:	2200      	movs	r2, #0
 8001560:	709a      	strb	r2, [r3, #2]
		  memset(PrintBuffer, '\0', COMM_SIZE); snprintf(PrintBuffer, COMM_SIZE-1, "\n\rButton 3 Pressed");
 8001562:	2280      	movs	r2, #128	; 0x80
 8001564:	2100      	movs	r1, #0
 8001566:	4820      	ldr	r0, [pc, #128]	; (80015e8 <main+0x400>)
 8001568:	f008 fc39 	bl	8009dde <memset>
 800156c:	4a27      	ldr	r2, [pc, #156]	; (800160c <main+0x424>)
 800156e:	217f      	movs	r1, #127	; 0x7f
 8001570:	481d      	ldr	r0, [pc, #116]	; (80015e8 <main+0x400>)
 8001572:	f008 fb9d 	bl	8009cb0 <sniprintf>
		  DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE);
 8001576:	4b1e      	ldr	r3, [pc, #120]	; (80015f0 <main+0x408>)
 8001578:	781b      	ldrb	r3, [r3, #0]
 800157a:	2280      	movs	r2, #128	; 0x80
 800157c:	491a      	ldr	r1, [pc, #104]	; (80015e8 <main+0x400>)
 800157e:	4618      	mov	r0, r3
 8001580:	f7ff fdd6 	bl	8001130 <DebugPrint>

		  Toggle_LED_HeartBeat();
 8001584:	f7ff fcb4 	bl	8000ef0 <Toggle_LED_HeartBeat>
		  if(ctrlbool==0){
 8001588:	7bfb      	ldrb	r3, [r7, #15]
 800158a:	2b00      	cmp	r3, #0
 800158c:	d108      	bne.n	80015a0 <main+0x3b8>
			 Set_LED_Metal(1);
 800158e:	2001      	movs	r0, #1
 8001590:	f7ff fcde 	bl	8000f50 <Set_LED_Metal>
			 Set_LED_Turbidity(0);
 8001594:	2000      	movs	r0, #0
 8001596:	f7ff fcf8 	bl	8000f8a <Set_LED_Turbidity>
			 ctrlbool = 1;
 800159a:	2301      	movs	r3, #1
 800159c:	73fb      	strb	r3, [r7, #15]
 800159e:	e007      	b.n	80015b0 <main+0x3c8>
		 }else{
			 Set_LED_Metal(0);
 80015a0:	2000      	movs	r0, #0
 80015a2:	f7ff fcd5 	bl	8000f50 <Set_LED_Metal>
			 Set_LED_Turbidity(1);
 80015a6:	2001      	movs	r0, #1
 80015a8:	f7ff fcef 	bl	8000f8a <Set_LED_Turbidity>
			 ctrlbool = 0;
 80015ac:	2300      	movs	r3, #0
 80015ae:	73fb      	strb	r3, [r7, #15]
  while(MasterActivation==true){
 80015b0:	4b17      	ldr	r3, [pc, #92]	; (8001610 <main+0x428>)
 80015b2:	781b      	ldrb	r3, [r3, #0]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	f47f aebc 	bne.w	8001332 <main+0x14a>

    /* USER CODE BEGIN 3 */
  }

  //Print message alerting user master while loops has been left
  memset(PrintBuffer, '\0', COMM_SIZE); snprintf(PrintBuffer, COMM_SIZE-1, "\n\n\rWARNING: Ion sensor shutting down" );
 80015ba:	2280      	movs	r2, #128	; 0x80
 80015bc:	2100      	movs	r1, #0
 80015be:	480a      	ldr	r0, [pc, #40]	; (80015e8 <main+0x400>)
 80015c0:	f008 fc0d 	bl	8009dde <memset>
 80015c4:	4a13      	ldr	r2, [pc, #76]	; (8001614 <main+0x42c>)
 80015c6:	217f      	movs	r1, #127	; 0x7f
 80015c8:	4807      	ldr	r0, [pc, #28]	; (80015e8 <main+0x400>)
 80015ca:	f008 fb71 	bl	8009cb0 <sniprintf>
  DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE);
 80015ce:	4b08      	ldr	r3, [pc, #32]	; (80015f0 <main+0x408>)
 80015d0:	781b      	ldrb	r3, [r3, #0]
 80015d2:	2280      	movs	r2, #128	; 0x80
 80015d4:	4904      	ldr	r1, [pc, #16]	; (80015e8 <main+0x400>)
 80015d6:	4618      	mov	r0, r3
 80015d8:	f7ff fdaa 	bl	8001130 <DebugPrint>
 80015dc:	2300      	movs	r3, #0


  /* USER CODE END 3 */
}
 80015de:	4618      	mov	r0, r3
 80015e0:	3710      	adds	r7, #16
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	200004e8 	.word	0x200004e8
 80015ec:	0800d7bc 	.word	0x0800d7bc
 80015f0:	2000004b 	.word	0x2000004b
 80015f4:	200005aa 	.word	0x200005aa
 80015f8:	200004dc 	.word	0x200004dc
 80015fc:	0800d7ec 	.word	0x0800d7ec
 8001600:	0800d800 	.word	0x0800d800
 8001604:	0800d818 	.word	0x0800d818
 8001608:	0800d830 	.word	0x0800d830
 800160c:	0800d844 	.word	0x0800d844
 8001610:	2000004c 	.word	0x2000004c
 8001614:	0800d858 	.word	0x0800d858

08001618 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b09c      	sub	sp, #112	; 0x70
 800161c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800161e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001622:	2228      	movs	r2, #40	; 0x28
 8001624:	2100      	movs	r1, #0
 8001626:	4618      	mov	r0, r3
 8001628:	f008 fbd9 	bl	8009dde <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800162c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001630:	2200      	movs	r2, #0
 8001632:	601a      	str	r2, [r3, #0]
 8001634:	605a      	str	r2, [r3, #4]
 8001636:	609a      	str	r2, [r3, #8]
 8001638:	60da      	str	r2, [r3, #12]
 800163a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800163c:	463b      	mov	r3, r7
 800163e:	2234      	movs	r2, #52	; 0x34
 8001640:	2100      	movs	r1, #0
 8001642:	4618      	mov	r0, r3
 8001644:	f008 fbcb 	bl	8009dde <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001648:	2302      	movs	r3, #2
 800164a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800164c:	2301      	movs	r3, #1
 800164e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001650:	2310      	movs	r3, #16
 8001652:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001654:	2302      	movs	r3, #2
 8001656:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001658:	2300      	movs	r3, #0
 800165a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 800165c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001660:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001662:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001666:	4618      	mov	r0, r3
 8001668:	f004 fee8 	bl	800643c <HAL_RCC_OscConfig>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d001      	beq.n	8001676 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8001672:	f000 facf 	bl	8001c14 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001676:	230f      	movs	r3, #15
 8001678:	637b      	str	r3, [r7, #52]	; 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800167a:	2302      	movs	r3, #2
 800167c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800167e:	2300      	movs	r3, #0
 8001680:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001682:	2300      	movs	r3, #0
 8001684:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001686:	2300      	movs	r3, #0
 8001688:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800168a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800168e:	2100      	movs	r1, #0
 8001690:	4618      	mov	r0, r3
 8001692:	f005 ff11 	bl	80074b8 <HAL_RCC_ClockConfig>
 8001696:	4603      	mov	r3, r0
 8001698:	2b00      	cmp	r3, #0
 800169a:	d001      	beq.n	80016a0 <SystemClock_Config+0x88>
  {
    Error_Handler();
 800169c:	f000 faba 	bl	8001c14 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1
 80016a0:	23a2      	movs	r3, #162	; 0xa2
 80016a2:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_ADC12;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80016a4:	2300      	movs	r3, #0
 80016a6:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 80016a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016ac:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80016ae:	2300      	movs	r3, #0
 80016b0:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016b2:	463b      	mov	r3, r7
 80016b4:	4618      	mov	r0, r3
 80016b6:	f006 f935 	bl	8007924 <HAL_RCCEx_PeriphCLKConfig>
 80016ba:	4603      	mov	r3, r0
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d001      	beq.n	80016c4 <SystemClock_Config+0xac>
  {
    Error_Handler();
 80016c0:	f000 faa8 	bl	8001c14 <Error_Handler>
  }
}
 80016c4:	bf00      	nop
 80016c6:	3770      	adds	r7, #112	; 0x70
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}

080016cc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b08a      	sub	sp, #40	; 0x28
 80016d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80016d2:	f107 031c 	add.w	r3, r7, #28
 80016d6:	2200      	movs	r2, #0
 80016d8:	601a      	str	r2, [r3, #0]
 80016da:	605a      	str	r2, [r3, #4]
 80016dc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80016de:	1d3b      	adds	r3, r7, #4
 80016e0:	2200      	movs	r2, #0
 80016e2:	601a      	str	r2, [r3, #0]
 80016e4:	605a      	str	r2, [r3, #4]
 80016e6:	609a      	str	r2, [r3, #8]
 80016e8:	60da      	str	r2, [r3, #12]
 80016ea:	611a      	str	r2, [r3, #16]
 80016ec:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80016ee:	4b2e      	ldr	r3, [pc, #184]	; (80017a8 <MX_ADC1_Init+0xdc>)
 80016f0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80016f4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80016f6:	4b2c      	ldr	r3, [pc, #176]	; (80017a8 <MX_ADC1_Init+0xdc>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80016fc:	4b2a      	ldr	r3, [pc, #168]	; (80017a8 <MX_ADC1_Init+0xdc>)
 80016fe:	2200      	movs	r2, #0
 8001700:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001702:	4b29      	ldr	r3, [pc, #164]	; (80017a8 <MX_ADC1_Init+0xdc>)
 8001704:	2200      	movs	r2, #0
 8001706:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001708:	4b27      	ldr	r3, [pc, #156]	; (80017a8 <MX_ADC1_Init+0xdc>)
 800170a:	2200      	movs	r2, #0
 800170c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800170e:	4b26      	ldr	r3, [pc, #152]	; (80017a8 <MX_ADC1_Init+0xdc>)
 8001710:	2200      	movs	r2, #0
 8001712:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001716:	4b24      	ldr	r3, [pc, #144]	; (80017a8 <MX_ADC1_Init+0xdc>)
 8001718:	2200      	movs	r2, #0
 800171a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800171c:	4b22      	ldr	r3, [pc, #136]	; (80017a8 <MX_ADC1_Init+0xdc>)
 800171e:	2201      	movs	r2, #1
 8001720:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001722:	4b21      	ldr	r3, [pc, #132]	; (80017a8 <MX_ADC1_Init+0xdc>)
 8001724:	2200      	movs	r2, #0
 8001726:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001728:	4b1f      	ldr	r3, [pc, #124]	; (80017a8 <MX_ADC1_Init+0xdc>)
 800172a:	2201      	movs	r2, #1
 800172c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800172e:	4b1e      	ldr	r3, [pc, #120]	; (80017a8 <MX_ADC1_Init+0xdc>)
 8001730:	2200      	movs	r2, #0
 8001732:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001736:	4b1c      	ldr	r3, [pc, #112]	; (80017a8 <MX_ADC1_Init+0xdc>)
 8001738:	2204      	movs	r2, #4
 800173a:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800173c:	4b1a      	ldr	r3, [pc, #104]	; (80017a8 <MX_ADC1_Init+0xdc>)
 800173e:	2200      	movs	r2, #0
 8001740:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001742:	4b19      	ldr	r3, [pc, #100]	; (80017a8 <MX_ADC1_Init+0xdc>)
 8001744:	2200      	movs	r2, #0
 8001746:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001748:	4817      	ldr	r0, [pc, #92]	; (80017a8 <MX_ADC1_Init+0xdc>)
 800174a:	f002 f8c1 	bl	80038d0 <HAL_ADC_Init>
 800174e:	4603      	mov	r3, r0
 8001750:	2b00      	cmp	r3, #0
 8001752:	d001      	beq.n	8001758 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8001754:	f000 fa5e 	bl	8001c14 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001758:	2300      	movs	r3, #0
 800175a:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800175c:	f107 031c 	add.w	r3, r7, #28
 8001760:	4619      	mov	r1, r3
 8001762:	4811      	ldr	r0, [pc, #68]	; (80017a8 <MX_ADC1_Init+0xdc>)
 8001764:	f002 ff3e 	bl	80045e4 <HAL_ADCEx_MultiModeConfigChannel>
 8001768:	4603      	mov	r3, r0
 800176a:	2b00      	cmp	r3, #0
 800176c:	d001      	beq.n	8001772 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 800176e:	f000 fa51 	bl	8001c14 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001772:	2301      	movs	r3, #1
 8001774:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001776:	2301      	movs	r3, #1
 8001778:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800177a:	2300      	movs	r3, #0
 800177c:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800177e:	2300      	movs	r3, #0
 8001780:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001782:	2300      	movs	r3, #0
 8001784:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001786:	2300      	movs	r3, #0
 8001788:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800178a:	1d3b      	adds	r3, r7, #4
 800178c:	4619      	mov	r1, r3
 800178e:	4806      	ldr	r0, [pc, #24]	; (80017a8 <MX_ADC1_Init+0xdc>)
 8001790:	f002 fc6a 	bl	8004068 <HAL_ADC_ConfigChannel>
 8001794:	4603      	mov	r3, r0
 8001796:	2b00      	cmp	r3, #0
 8001798:	d001      	beq.n	800179e <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 800179a:	f000 fa3b 	bl	8001c14 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800179e:	bf00      	nop
 80017a0:	3728      	adds	r7, #40	; 0x28
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	20000240 	.word	0x20000240

080017ac <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 80017b0:	4b17      	ldr	r3, [pc, #92]	; (8001810 <MX_CAN_Init+0x64>)
 80017b2:	4a18      	ldr	r2, [pc, #96]	; (8001814 <MX_CAN_Init+0x68>)
 80017b4:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 80017b6:	4b16      	ldr	r3, [pc, #88]	; (8001810 <MX_CAN_Init+0x64>)
 80017b8:	2204      	movs	r2, #4
 80017ba:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80017bc:	4b14      	ldr	r3, [pc, #80]	; (8001810 <MX_CAN_Init+0x64>)
 80017be:	2200      	movs	r2, #0
 80017c0:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80017c2:	4b13      	ldr	r3, [pc, #76]	; (8001810 <MX_CAN_Init+0x64>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_13TQ;
 80017c8:	4b11      	ldr	r3, [pc, #68]	; (8001810 <MX_CAN_Init+0x64>)
 80017ca:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 80017ce:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 80017d0:	4b0f      	ldr	r3, [pc, #60]	; (8001810 <MX_CAN_Init+0x64>)
 80017d2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80017d6:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80017d8:	4b0d      	ldr	r3, [pc, #52]	; (8001810 <MX_CAN_Init+0x64>)
 80017da:	2200      	movs	r2, #0
 80017dc:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80017de:	4b0c      	ldr	r3, [pc, #48]	; (8001810 <MX_CAN_Init+0x64>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80017e4:	4b0a      	ldr	r3, [pc, #40]	; (8001810 <MX_CAN_Init+0x64>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = ENABLE;
 80017ea:	4b09      	ldr	r3, [pc, #36]	; (8001810 <MX_CAN_Init+0x64>)
 80017ec:	2201      	movs	r2, #1
 80017ee:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80017f0:	4b07      	ldr	r3, [pc, #28]	; (8001810 <MX_CAN_Init+0x64>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80017f6:	4b06      	ldr	r3, [pc, #24]	; (8001810 <MX_CAN_Init+0x64>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80017fc:	4804      	ldr	r0, [pc, #16]	; (8001810 <MX_CAN_Init+0x64>)
 80017fe:	f003 f937 	bl	8004a70 <HAL_CAN_Init>
 8001802:	4603      	mov	r3, r0
 8001804:	2b00      	cmp	r3, #0
 8001806:	d001      	beq.n	800180c <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8001808:	f000 fa04 	bl	8001c14 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 800180c:	bf00      	nop
 800180e:	bd80      	pop	{r7, pc}
 8001810:	20000290 	.word	0x20000290
 8001814:	40006400 	.word	0x40006400

08001818 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800181c:	4b1b      	ldr	r3, [pc, #108]	; (800188c <MX_I2C1_Init+0x74>)
 800181e:	4a1c      	ldr	r2, [pc, #112]	; (8001890 <MX_I2C1_Init+0x78>)
 8001820:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8001822:	4b1a      	ldr	r3, [pc, #104]	; (800188c <MX_I2C1_Init+0x74>)
 8001824:	4a1b      	ldr	r2, [pc, #108]	; (8001894 <MX_I2C1_Init+0x7c>)
 8001826:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001828:	4b18      	ldr	r3, [pc, #96]	; (800188c <MX_I2C1_Init+0x74>)
 800182a:	2200      	movs	r2, #0
 800182c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800182e:	4b17      	ldr	r3, [pc, #92]	; (800188c <MX_I2C1_Init+0x74>)
 8001830:	2201      	movs	r2, #1
 8001832:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001834:	4b15      	ldr	r3, [pc, #84]	; (800188c <MX_I2C1_Init+0x74>)
 8001836:	2200      	movs	r2, #0
 8001838:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800183a:	4b14      	ldr	r3, [pc, #80]	; (800188c <MX_I2C1_Init+0x74>)
 800183c:	2200      	movs	r2, #0
 800183e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001840:	4b12      	ldr	r3, [pc, #72]	; (800188c <MX_I2C1_Init+0x74>)
 8001842:	2200      	movs	r2, #0
 8001844:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001846:	4b11      	ldr	r3, [pc, #68]	; (800188c <MX_I2C1_Init+0x74>)
 8001848:	2200      	movs	r2, #0
 800184a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800184c:	4b0f      	ldr	r3, [pc, #60]	; (800188c <MX_I2C1_Init+0x74>)
 800184e:	2200      	movs	r2, #0
 8001850:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001852:	480e      	ldr	r0, [pc, #56]	; (800188c <MX_I2C1_Init+0x74>)
 8001854:	f004 f84f 	bl	80058f6 <HAL_I2C_Init>
 8001858:	4603      	mov	r3, r0
 800185a:	2b00      	cmp	r3, #0
 800185c:	d001      	beq.n	8001862 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800185e:	f000 f9d9 	bl	8001c14 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001862:	2100      	movs	r1, #0
 8001864:	4809      	ldr	r0, [pc, #36]	; (800188c <MX_I2C1_Init+0x74>)
 8001866:	f004 fd51 	bl	800630c <HAL_I2CEx_ConfigAnalogFilter>
 800186a:	4603      	mov	r3, r0
 800186c:	2b00      	cmp	r3, #0
 800186e:	d001      	beq.n	8001874 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001870:	f000 f9d0 	bl	8001c14 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001874:	2100      	movs	r1, #0
 8001876:	4805      	ldr	r0, [pc, #20]	; (800188c <MX_I2C1_Init+0x74>)
 8001878:	f004 fd93 	bl	80063a2 <HAL_I2CEx_ConfigDigitalFilter>
 800187c:	4603      	mov	r3, r0
 800187e:	2b00      	cmp	r3, #0
 8001880:	d001      	beq.n	8001886 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001882:	f000 f9c7 	bl	8001c14 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001886:	bf00      	nop
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	200002b8 	.word	0x200002b8
 8001890:	40005400 	.word	0x40005400
 8001894:	2000090e 	.word	0x2000090e

08001898 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800189c:	4b1b      	ldr	r3, [pc, #108]	; (800190c <MX_SPI2_Init+0x74>)
 800189e:	4a1c      	ldr	r2, [pc, #112]	; (8001910 <MX_SPI2_Init+0x78>)
 80018a0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80018a2:	4b1a      	ldr	r3, [pc, #104]	; (800190c <MX_SPI2_Init+0x74>)
 80018a4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80018a8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80018aa:	4b18      	ldr	r3, [pc, #96]	; (800190c <MX_SPI2_Init+0x74>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80018b0:	4b16      	ldr	r3, [pc, #88]	; (800190c <MX_SPI2_Init+0x74>)
 80018b2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80018b6:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80018b8:	4b14      	ldr	r3, [pc, #80]	; (800190c <MX_SPI2_Init+0x74>)
 80018ba:	2202      	movs	r2, #2
 80018bc:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 80018be:	4b13      	ldr	r3, [pc, #76]	; (800190c <MX_SPI2_Init+0x74>)
 80018c0:	2201      	movs	r2, #1
 80018c2:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80018c4:	4b11      	ldr	r3, [pc, #68]	; (800190c <MX_SPI2_Init+0x74>)
 80018c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018ca:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80018cc:	4b0f      	ldr	r3, [pc, #60]	; (800190c <MX_SPI2_Init+0x74>)
 80018ce:	2210      	movs	r2, #16
 80018d0:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80018d2:	4b0e      	ldr	r3, [pc, #56]	; (800190c <MX_SPI2_Init+0x74>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80018d8:	4b0c      	ldr	r3, [pc, #48]	; (800190c <MX_SPI2_Init+0x74>)
 80018da:	2200      	movs	r2, #0
 80018dc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80018de:	4b0b      	ldr	r3, [pc, #44]	; (800190c <MX_SPI2_Init+0x74>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80018e4:	4b09      	ldr	r3, [pc, #36]	; (800190c <MX_SPI2_Init+0x74>)
 80018e6:	2207      	movs	r2, #7
 80018e8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80018ea:	4b08      	ldr	r3, [pc, #32]	; (800190c <MX_SPI2_Init+0x74>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80018f0:	4b06      	ldr	r3, [pc, #24]	; (800190c <MX_SPI2_Init+0x74>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80018f6:	4805      	ldr	r0, [pc, #20]	; (800190c <MX_SPI2_Init+0x74>)
 80018f8:	f006 f9a6 	bl	8007c48 <HAL_SPI_Init>
 80018fc:	4603      	mov	r3, r0
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d001      	beq.n	8001906 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001902:	f000 f987 	bl	8001c14 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001906:	bf00      	nop
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	2000030c 	.word	0x2000030c
 8001910:	40003800 	.word	0x40003800

08001914 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b084      	sub	sp, #16
 8001918:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800191a:	1d3b      	adds	r3, r7, #4
 800191c:	2200      	movs	r2, #0
 800191e:	601a      	str	r2, [r3, #0]
 8001920:	605a      	str	r2, [r3, #4]
 8001922:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001924:	4b15      	ldr	r3, [pc, #84]	; (800197c <MX_TIM6_Init+0x68>)
 8001926:	4a16      	ldr	r2, [pc, #88]	; (8001980 <MX_TIM6_Init+0x6c>)
 8001928:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 16000-1;
 800192a:	4b14      	ldr	r3, [pc, #80]	; (800197c <MX_TIM6_Init+0x68>)
 800192c:	f643 627f 	movw	r2, #15999	; 0x3e7f
 8001930:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001932:	4b12      	ldr	r3, [pc, #72]	; (800197c <MX_TIM6_Init+0x68>)
 8001934:	2200      	movs	r2, #0
 8001936:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 500-1;
 8001938:	4b10      	ldr	r3, [pc, #64]	; (800197c <MX_TIM6_Init+0x68>)
 800193a:	f240 12f3 	movw	r2, #499	; 0x1f3
 800193e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001940:	4b0e      	ldr	r3, [pc, #56]	; (800197c <MX_TIM6_Init+0x68>)
 8001942:	2200      	movs	r2, #0
 8001944:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001946:	480d      	ldr	r0, [pc, #52]	; (800197c <MX_TIM6_Init+0x68>)
 8001948:	f006 fa29 	bl	8007d9e <HAL_TIM_Base_Init>
 800194c:	4603      	mov	r3, r0
 800194e:	2b00      	cmp	r3, #0
 8001950:	d001      	beq.n	8001956 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8001952:	f000 f95f 	bl	8001c14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001956:	2300      	movs	r3, #0
 8001958:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800195a:	2300      	movs	r3, #0
 800195c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800195e:	1d3b      	adds	r3, r7, #4
 8001960:	4619      	mov	r1, r3
 8001962:	4806      	ldr	r0, [pc, #24]	; (800197c <MX_TIM6_Init+0x68>)
 8001964:	f006 fd2a 	bl	80083bc <HAL_TIMEx_MasterConfigSynchronization>
 8001968:	4603      	mov	r3, r0
 800196a:	2b00      	cmp	r3, #0
 800196c:	d001      	beq.n	8001972 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 800196e:	f000 f951 	bl	8001c14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001972:	bf00      	nop
 8001974:	3710      	adds	r7, #16
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	20000370 	.word	0x20000370
 8001980:	40001000 	.word	0x40001000

08001984 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001988:	4b0f      	ldr	r3, [pc, #60]	; (80019c8 <MX_TIM16_Init+0x44>)
 800198a:	4a10      	ldr	r2, [pc, #64]	; (80019cc <MX_TIM16_Init+0x48>)
 800198c:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 16-1;
 800198e:	4b0e      	ldr	r3, [pc, #56]	; (80019c8 <MX_TIM16_Init+0x44>)
 8001990:	220f      	movs	r2, #15
 8001992:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001994:	4b0c      	ldr	r3, [pc, #48]	; (80019c8 <MX_TIM16_Init+0x44>)
 8001996:	2200      	movs	r2, #0
 8001998:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 800199a:	4b0b      	ldr	r3, [pc, #44]	; (80019c8 <MX_TIM16_Init+0x44>)
 800199c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80019a0:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019a2:	4b09      	ldr	r3, [pc, #36]	; (80019c8 <MX_TIM16_Init+0x44>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80019a8:	4b07      	ldr	r3, [pc, #28]	; (80019c8 <MX_TIM16_Init+0x44>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019ae:	4b06      	ldr	r3, [pc, #24]	; (80019c8 <MX_TIM16_Init+0x44>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80019b4:	4804      	ldr	r0, [pc, #16]	; (80019c8 <MX_TIM16_Init+0x44>)
 80019b6:	f006 f9f2 	bl	8007d9e <HAL_TIM_Base_Init>
 80019ba:	4603      	mov	r3, r0
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d001      	beq.n	80019c4 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 80019c0:	f000 f928 	bl	8001c14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80019c4:	bf00      	nop
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	200003bc 	.word	0x200003bc
 80019cc:	40014400 	.word	0x40014400

080019d0 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 80019d4:	4b10      	ldr	r3, [pc, #64]	; (8001a18 <MX_TIM17_Init+0x48>)
 80019d6:	4a11      	ldr	r2, [pc, #68]	; (8001a1c <MX_TIM17_Init+0x4c>)
 80019d8:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 16000-1;
 80019da:	4b0f      	ldr	r3, [pc, #60]	; (8001a18 <MX_TIM17_Init+0x48>)
 80019dc:	f643 627f 	movw	r2, #15999	; 0x3e7f
 80019e0:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019e2:	4b0d      	ldr	r3, [pc, #52]	; (8001a18 <MX_TIM17_Init+0x48>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 80019e8:	4b0b      	ldr	r3, [pc, #44]	; (8001a18 <MX_TIM17_Init+0x48>)
 80019ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80019ee:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019f0:	4b09      	ldr	r3, [pc, #36]	; (8001a18 <MX_TIM17_Init+0x48>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 80019f6:	4b08      	ldr	r3, [pc, #32]	; (8001a18 <MX_TIM17_Init+0x48>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019fc:	4b06      	ldr	r3, [pc, #24]	; (8001a18 <MX_TIM17_Init+0x48>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8001a02:	4805      	ldr	r0, [pc, #20]	; (8001a18 <MX_TIM17_Init+0x48>)
 8001a04:	f006 f9cb 	bl	8007d9e <HAL_TIM_Base_Init>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d001      	beq.n	8001a12 <MX_TIM17_Init+0x42>
  {
    Error_Handler();
 8001a0e:	f000 f901 	bl	8001c14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8001a12:	bf00      	nop
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	20000408 	.word	0x20000408
 8001a1c:	40014800 	.word	0x40014800

08001a20 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001a24:	4b14      	ldr	r3, [pc, #80]	; (8001a78 <MX_USART2_UART_Init+0x58>)
 8001a26:	4a15      	ldr	r2, [pc, #84]	; (8001a7c <MX_USART2_UART_Init+0x5c>)
 8001a28:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8001a2a:	4b13      	ldr	r3, [pc, #76]	; (8001a78 <MX_USART2_UART_Init+0x58>)
 8001a2c:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8001a30:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001a32:	4b11      	ldr	r3, [pc, #68]	; (8001a78 <MX_USART2_UART_Init+0x58>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001a38:	4b0f      	ldr	r3, [pc, #60]	; (8001a78 <MX_USART2_UART_Init+0x58>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001a3e:	4b0e      	ldr	r3, [pc, #56]	; (8001a78 <MX_USART2_UART_Init+0x58>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001a44:	4b0c      	ldr	r3, [pc, #48]	; (8001a78 <MX_USART2_UART_Init+0x58>)
 8001a46:	220c      	movs	r2, #12
 8001a48:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a4a:	4b0b      	ldr	r3, [pc, #44]	; (8001a78 <MX_USART2_UART_Init+0x58>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a50:	4b09      	ldr	r3, [pc, #36]	; (8001a78 <MX_USART2_UART_Init+0x58>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a56:	4b08      	ldr	r3, [pc, #32]	; (8001a78 <MX_USART2_UART_Init+0x58>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a5c:	4b06      	ldr	r3, [pc, #24]	; (8001a78 <MX_USART2_UART_Init+0x58>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001a62:	4805      	ldr	r0, [pc, #20]	; (8001a78 <MX_USART2_UART_Init+0x58>)
 8001a64:	f006 fd3c 	bl	80084e0 <HAL_UART_Init>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d001      	beq.n	8001a72 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001a6e:	f000 f8d1 	bl	8001c14 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001a72:	bf00      	nop
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	20000454 	.word	0x20000454
 8001a7c:	40004400 	.word	0x40004400

08001a80 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b088      	sub	sp, #32
 8001a84:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a86:	f107 030c 	add.w	r3, r7, #12
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	601a      	str	r2, [r3, #0]
 8001a8e:	605a      	str	r2, [r3, #4]
 8001a90:	609a      	str	r2, [r3, #8]
 8001a92:	60da      	str	r2, [r3, #12]
 8001a94:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a96:	4b5c      	ldr	r3, [pc, #368]	; (8001c08 <MX_GPIO_Init+0x188>)
 8001a98:	695b      	ldr	r3, [r3, #20]
 8001a9a:	4a5b      	ldr	r2, [pc, #364]	; (8001c08 <MX_GPIO_Init+0x188>)
 8001a9c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001aa0:	6153      	str	r3, [r2, #20]
 8001aa2:	4b59      	ldr	r3, [pc, #356]	; (8001c08 <MX_GPIO_Init+0x188>)
 8001aa4:	695b      	ldr	r3, [r3, #20]
 8001aa6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001aaa:	60bb      	str	r3, [r7, #8]
 8001aac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aae:	4b56      	ldr	r3, [pc, #344]	; (8001c08 <MX_GPIO_Init+0x188>)
 8001ab0:	695b      	ldr	r3, [r3, #20]
 8001ab2:	4a55      	ldr	r2, [pc, #340]	; (8001c08 <MX_GPIO_Init+0x188>)
 8001ab4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ab8:	6153      	str	r3, [r2, #20]
 8001aba:	4b53      	ldr	r3, [pc, #332]	; (8001c08 <MX_GPIO_Init+0x188>)
 8001abc:	695b      	ldr	r3, [r3, #20]
 8001abe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ac2:	607b      	str	r3, [r7, #4]
 8001ac4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ac6:	4b50      	ldr	r3, [pc, #320]	; (8001c08 <MX_GPIO_Init+0x188>)
 8001ac8:	695b      	ldr	r3, [r3, #20]
 8001aca:	4a4f      	ldr	r2, [pc, #316]	; (8001c08 <MX_GPIO_Init+0x188>)
 8001acc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ad0:	6153      	str	r3, [r2, #20]
 8001ad2:	4b4d      	ldr	r3, [pc, #308]	; (8001c08 <MX_GPIO_Init+0x188>)
 8001ad4:	695b      	ldr	r3, [r3, #20]
 8001ad6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ada:	603b      	str	r3, [r7, #0]
 8001adc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, HRTBEAT_LED_Pin|SENSOR_LED_1_Pin|SENSOR_LED_2_Pin, GPIO_PIN_RESET);
 8001ade:	2200      	movs	r2, #0
 8001ae0:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8001ae4:	4849      	ldr	r0, [pc, #292]	; (8001c0c <MX_GPIO_Init+0x18c>)
 8001ae6:	f003 feb1 	bl	800584c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, INDICATION_LED_1_Pin|INDICATION_LED_2_Pin|INDICATION_LED_3_Pin|INDICATION_LED_4_Pin
 8001aea:	2200      	movs	r2, #0
 8001aec:	f640 4107 	movw	r1, #3079	; 0xc07
 8001af0:	4847      	ldr	r0, [pc, #284]	; (8001c10 <MX_GPIO_Init+0x190>)
 8001af2:	f003 feab 	bl	800584c <HAL_GPIO_WritePin>
                          |INDICATION_LED_5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FLASH_EN_GPIO_Port, FLASH_EN_Pin, GPIO_PIN_SET);
 8001af6:	2201      	movs	r2, #1
 8001af8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001afc:	4844      	ldr	r0, [pc, #272]	; (8001c10 <MX_GPIO_Init+0x190>)
 8001afe:	f003 fea5 	bl	800584c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FLASH_WP_GPIO_Port, FLASH_WP_Pin, GPIO_PIN_SET);
 8001b02:	2201      	movs	r2, #1
 8001b04:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001b08:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b0c:	f003 fe9e 	bl	800584c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : HRTBEAT_LED_Pin */
  GPIO_InitStruct.Pin = HRTBEAT_LED_Pin;
 8001b10:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b14:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b16:	2301      	movs	r3, #1
 8001b18:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HRTBEAT_LED_GPIO_Port, &GPIO_InitStruct);
 8001b22:	f107 030c 	add.w	r3, r7, #12
 8001b26:	4619      	mov	r1, r3
 8001b28:	4838      	ldr	r0, [pc, #224]	; (8001c0c <MX_GPIO_Init+0x18c>)
 8001b2a:	f003 fcfd 	bl	8005528 <HAL_GPIO_Init>

  /*Configure GPIO pins : SENSOR_LED_1_Pin SENSOR_LED_2_Pin */
  GPIO_InitStruct.Pin = SENSOR_LED_1_Pin|SENSOR_LED_2_Pin;
 8001b2e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001b32:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b34:	2301      	movs	r3, #1
 8001b36:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001b38:	2302      	movs	r3, #2
 8001b3a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b40:	f107 030c 	add.w	r3, r7, #12
 8001b44:	4619      	mov	r1, r3
 8001b46:	4831      	ldr	r0, [pc, #196]	; (8001c0c <MX_GPIO_Init+0x18c>)
 8001b48:	f003 fcee 	bl	8005528 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON1_EXTI5_Pin BUTTON2_EXTI6_Pin BUTTON3_EXTI7_Pin */
  GPIO_InitStruct.Pin = BUTTON1_EXTI5_Pin|BUTTON2_EXTI6_Pin|BUTTON3_EXTI7_Pin;
 8001b4c:	23e0      	movs	r3, #224	; 0xe0
 8001b4e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001b50:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001b54:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b56:	2300      	movs	r3, #0
 8001b58:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b5a:	f107 030c 	add.w	r3, r7, #12
 8001b5e:	4619      	mov	r1, r3
 8001b60:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b64:	f003 fce0 	bl	8005528 <HAL_GPIO_Init>

  /*Configure GPIO pins : INDICATION_LED_1_Pin INDICATION_LED_2_Pin INDICATION_LED_3_Pin INDICATION_LED_4_Pin
                           INDICATION_LED_5_Pin FLASH_EN_Pin */
  GPIO_InitStruct.Pin = INDICATION_LED_1_Pin|INDICATION_LED_2_Pin|INDICATION_LED_3_Pin|INDICATION_LED_4_Pin
 8001b68:	f641 4307 	movw	r3, #7175	; 0x1c07
 8001b6c:	60fb      	str	r3, [r7, #12]
                          |INDICATION_LED_5_Pin|FLASH_EN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b72:	2300      	movs	r3, #0
 8001b74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b76:	2300      	movs	r3, #0
 8001b78:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b7a:	f107 030c 	add.w	r3, r7, #12
 8001b7e:	4619      	mov	r1, r3
 8001b80:	4823      	ldr	r0, [pc, #140]	; (8001c10 <MX_GPIO_Init+0x190>)
 8001b82:	f003 fcd1 	bl	8005528 <HAL_GPIO_Init>

  /*Configure GPIO pin : FLASH_WP_Pin */
  GPIO_InitStruct.Pin = FLASH_WP_Pin;
 8001b86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b8a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b90:	2300      	movs	r3, #0
 8001b92:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b94:	2300      	movs	r3, #0
 8001b96:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(FLASH_WP_GPIO_Port, &GPIO_InitStruct);
 8001b98:	f107 030c 	add.w	r3, r7, #12
 8001b9c:	4619      	mov	r1, r3
 8001b9e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ba2:	f003 fcc1 	bl	8005528 <HAL_GPIO_Init>

  /*Configure GPIO pins : CC1_DETECT_EXTI11_Pin CC2_DETECT_EXTI12_Pin */
  GPIO_InitStruct.Pin = CC1_DETECT_EXTI11_Pin|CC2_DETECT_EXTI12_Pin;
 8001ba6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001baa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001bac:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001bb0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bb6:	f107 030c 	add.w	r3, r7, #12
 8001bba:	4619      	mov	r1, r3
 8001bbc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bc0:	f003 fcb2 	bl	8005528 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPARE_TS_Pin */
  GPIO_InitStruct.Pin = SPARE_TS_Pin;
 8001bc4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001bc8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SPARE_TS_GPIO_Port, &GPIO_InitStruct);
 8001bd2:	f107 030c 	add.w	r3, r7, #12
 8001bd6:	4619      	mov	r1, r3
 8001bd8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bdc:	f003 fca4 	bl	8005528 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001be0:	2200      	movs	r2, #0
 8001be2:	2100      	movs	r1, #0
 8001be4:	2017      	movs	r0, #23
 8001be6:	f003 fc68 	bl	80054ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001bea:	2017      	movs	r0, #23
 8001bec:	f003 fc81 	bl	80054f2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	2100      	movs	r1, #0
 8001bf4:	2028      	movs	r0, #40	; 0x28
 8001bf6:	f003 fc60 	bl	80054ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001bfa:	2028      	movs	r0, #40	; 0x28
 8001bfc:	f003 fc79 	bl	80054f2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001c00:	bf00      	nop
 8001c02:	3720      	adds	r7, #32
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}
 8001c08:	40021000 	.word	0x40021000
 8001c0c:	48000800 	.word	0x48000800
 8001c10:	48000400 	.word	0x48000400

08001c14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c14:	b480      	push	{r7}
 8001c16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c18:	b672      	cpsid	i
}
 8001c1a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c1c:	e7fe      	b.n	8001c1c <Error_Handler+0x8>
	...

08001c20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b083      	sub	sp, #12
 8001c24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c26:	4b0f      	ldr	r3, [pc, #60]	; (8001c64 <HAL_MspInit+0x44>)
 8001c28:	699b      	ldr	r3, [r3, #24]
 8001c2a:	4a0e      	ldr	r2, [pc, #56]	; (8001c64 <HAL_MspInit+0x44>)
 8001c2c:	f043 0301 	orr.w	r3, r3, #1
 8001c30:	6193      	str	r3, [r2, #24]
 8001c32:	4b0c      	ldr	r3, [pc, #48]	; (8001c64 <HAL_MspInit+0x44>)
 8001c34:	699b      	ldr	r3, [r3, #24]
 8001c36:	f003 0301 	and.w	r3, r3, #1
 8001c3a:	607b      	str	r3, [r7, #4]
 8001c3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c3e:	4b09      	ldr	r3, [pc, #36]	; (8001c64 <HAL_MspInit+0x44>)
 8001c40:	69db      	ldr	r3, [r3, #28]
 8001c42:	4a08      	ldr	r2, [pc, #32]	; (8001c64 <HAL_MspInit+0x44>)
 8001c44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c48:	61d3      	str	r3, [r2, #28]
 8001c4a:	4b06      	ldr	r3, [pc, #24]	; (8001c64 <HAL_MspInit+0x44>)
 8001c4c:	69db      	ldr	r3, [r3, #28]
 8001c4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c52:	603b      	str	r3, [r7, #0]
 8001c54:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c56:	bf00      	nop
 8001c58:	370c      	adds	r7, #12
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c60:	4770      	bx	lr
 8001c62:	bf00      	nop
 8001c64:	40021000 	.word	0x40021000

08001c68 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b08a      	sub	sp, #40	; 0x28
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c70:	f107 0314 	add.w	r3, r7, #20
 8001c74:	2200      	movs	r2, #0
 8001c76:	601a      	str	r2, [r3, #0]
 8001c78:	605a      	str	r2, [r3, #4]
 8001c7a:	609a      	str	r2, [r3, #8]
 8001c7c:	60da      	str	r2, [r3, #12]
 8001c7e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001c88:	d124      	bne.n	8001cd4 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001c8a:	4b14      	ldr	r3, [pc, #80]	; (8001cdc <HAL_ADC_MspInit+0x74>)
 8001c8c:	695b      	ldr	r3, [r3, #20]
 8001c8e:	4a13      	ldr	r2, [pc, #76]	; (8001cdc <HAL_ADC_MspInit+0x74>)
 8001c90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c94:	6153      	str	r3, [r2, #20]
 8001c96:	4b11      	ldr	r3, [pc, #68]	; (8001cdc <HAL_ADC_MspInit+0x74>)
 8001c98:	695b      	ldr	r3, [r3, #20]
 8001c9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c9e:	613b      	str	r3, [r7, #16]
 8001ca0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ca2:	4b0e      	ldr	r3, [pc, #56]	; (8001cdc <HAL_ADC_MspInit+0x74>)
 8001ca4:	695b      	ldr	r3, [r3, #20]
 8001ca6:	4a0d      	ldr	r2, [pc, #52]	; (8001cdc <HAL_ADC_MspInit+0x74>)
 8001ca8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cac:	6153      	str	r3, [r2, #20]
 8001cae:	4b0b      	ldr	r3, [pc, #44]	; (8001cdc <HAL_ADC_MspInit+0x74>)
 8001cb0:	695b      	ldr	r3, [r3, #20]
 8001cb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cb6:	60fb      	str	r3, [r7, #12]
 8001cb8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = CC2_ADC1_IN1_Pin|CC1_ADC1_IN2_Pin;
 8001cba:	2303      	movs	r3, #3
 8001cbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001cbe:	2303      	movs	r3, #3
 8001cc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cc6:	f107 0314 	add.w	r3, r7, #20
 8001cca:	4619      	mov	r1, r3
 8001ccc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cd0:	f003 fc2a 	bl	8005528 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001cd4:	bf00      	nop
 8001cd6:	3728      	adds	r7, #40	; 0x28
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}
 8001cdc:	40021000 	.word	0x40021000

08001ce0 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b08a      	sub	sp, #40	; 0x28
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ce8:	f107 0314 	add.w	r3, r7, #20
 8001cec:	2200      	movs	r2, #0
 8001cee:	601a      	str	r2, [r3, #0]
 8001cf0:	605a      	str	r2, [r3, #4]
 8001cf2:	609a      	str	r2, [r3, #8]
 8001cf4:	60da      	str	r2, [r3, #12]
 8001cf6:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a17      	ldr	r2, [pc, #92]	; (8001d5c <HAL_CAN_MspInit+0x7c>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d128      	bne.n	8001d54 <HAL_CAN_MspInit+0x74>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001d02:	4b17      	ldr	r3, [pc, #92]	; (8001d60 <HAL_CAN_MspInit+0x80>)
 8001d04:	69db      	ldr	r3, [r3, #28]
 8001d06:	4a16      	ldr	r2, [pc, #88]	; (8001d60 <HAL_CAN_MspInit+0x80>)
 8001d08:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001d0c:	61d3      	str	r3, [r2, #28]
 8001d0e:	4b14      	ldr	r3, [pc, #80]	; (8001d60 <HAL_CAN_MspInit+0x80>)
 8001d10:	69db      	ldr	r3, [r3, #28]
 8001d12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d16:	613b      	str	r3, [r7, #16]
 8001d18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d1a:	4b11      	ldr	r3, [pc, #68]	; (8001d60 <HAL_CAN_MspInit+0x80>)
 8001d1c:	695b      	ldr	r3, [r3, #20]
 8001d1e:	4a10      	ldr	r2, [pc, #64]	; (8001d60 <HAL_CAN_MspInit+0x80>)
 8001d20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d24:	6153      	str	r3, [r2, #20]
 8001d26:	4b0e      	ldr	r3, [pc, #56]	; (8001d60 <HAL_CAN_MspInit+0x80>)
 8001d28:	695b      	ldr	r3, [r3, #20]
 8001d2a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d2e:	60fb      	str	r3, [r7, #12]
 8001d30:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001d32:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001d36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d38:	2302      	movs	r3, #2
 8001d3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d40:	2303      	movs	r3, #3
 8001d42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 8001d44:	2309      	movs	r3, #9
 8001d46:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d48:	f107 0314 	add.w	r3, r7, #20
 8001d4c:	4619      	mov	r1, r3
 8001d4e:	4805      	ldr	r0, [pc, #20]	; (8001d64 <HAL_CAN_MspInit+0x84>)
 8001d50:	f003 fbea 	bl	8005528 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 8001d54:	bf00      	nop
 8001d56:	3728      	adds	r7, #40	; 0x28
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}
 8001d5c:	40006400 	.word	0x40006400
 8001d60:	40021000 	.word	0x40021000
 8001d64:	48000400 	.word	0x48000400

08001d68 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b08a      	sub	sp, #40	; 0x28
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d70:	f107 0314 	add.w	r3, r7, #20
 8001d74:	2200      	movs	r2, #0
 8001d76:	601a      	str	r2, [r3, #0]
 8001d78:	605a      	str	r2, [r3, #4]
 8001d7a:	609a      	str	r2, [r3, #8]
 8001d7c:	60da      	str	r2, [r3, #12]
 8001d7e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a17      	ldr	r2, [pc, #92]	; (8001de4 <HAL_I2C_MspInit+0x7c>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d127      	bne.n	8001dda <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d8a:	4b17      	ldr	r3, [pc, #92]	; (8001de8 <HAL_I2C_MspInit+0x80>)
 8001d8c:	695b      	ldr	r3, [r3, #20]
 8001d8e:	4a16      	ldr	r2, [pc, #88]	; (8001de8 <HAL_I2C_MspInit+0x80>)
 8001d90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d94:	6153      	str	r3, [r2, #20]
 8001d96:	4b14      	ldr	r3, [pc, #80]	; (8001de8 <HAL_I2C_MspInit+0x80>)
 8001d98:	695b      	ldr	r3, [r3, #20]
 8001d9a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d9e:	613b      	str	r3, [r7, #16]
 8001da0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001da2:	23c0      	movs	r3, #192	; 0xc0
 8001da4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001da6:	2312      	movs	r3, #18
 8001da8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001daa:	2300      	movs	r3, #0
 8001dac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001dae:	2303      	movs	r3, #3
 8001db0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001db2:	2304      	movs	r3, #4
 8001db4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001db6:	f107 0314 	add.w	r3, r7, #20
 8001dba:	4619      	mov	r1, r3
 8001dbc:	480b      	ldr	r0, [pc, #44]	; (8001dec <HAL_I2C_MspInit+0x84>)
 8001dbe:	f003 fbb3 	bl	8005528 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001dc2:	4b09      	ldr	r3, [pc, #36]	; (8001de8 <HAL_I2C_MspInit+0x80>)
 8001dc4:	69db      	ldr	r3, [r3, #28]
 8001dc6:	4a08      	ldr	r2, [pc, #32]	; (8001de8 <HAL_I2C_MspInit+0x80>)
 8001dc8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001dcc:	61d3      	str	r3, [r2, #28]
 8001dce:	4b06      	ldr	r3, [pc, #24]	; (8001de8 <HAL_I2C_MspInit+0x80>)
 8001dd0:	69db      	ldr	r3, [r3, #28]
 8001dd2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001dd6:	60fb      	str	r3, [r7, #12]
 8001dd8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001dda:	bf00      	nop
 8001ddc:	3728      	adds	r7, #40	; 0x28
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	40005400 	.word	0x40005400
 8001de8:	40021000 	.word	0x40021000
 8001dec:	48000400 	.word	0x48000400

08001df0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b08a      	sub	sp, #40	; 0x28
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001df8:	f107 0314 	add.w	r3, r7, #20
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	601a      	str	r2, [r3, #0]
 8001e00:	605a      	str	r2, [r3, #4]
 8001e02:	609a      	str	r2, [r3, #8]
 8001e04:	60da      	str	r2, [r3, #12]
 8001e06:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a17      	ldr	r2, [pc, #92]	; (8001e6c <HAL_SPI_MspInit+0x7c>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d128      	bne.n	8001e64 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001e12:	4b17      	ldr	r3, [pc, #92]	; (8001e70 <HAL_SPI_MspInit+0x80>)
 8001e14:	69db      	ldr	r3, [r3, #28]
 8001e16:	4a16      	ldr	r2, [pc, #88]	; (8001e70 <HAL_SPI_MspInit+0x80>)
 8001e18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e1c:	61d3      	str	r3, [r2, #28]
 8001e1e:	4b14      	ldr	r3, [pc, #80]	; (8001e70 <HAL_SPI_MspInit+0x80>)
 8001e20:	69db      	ldr	r3, [r3, #28]
 8001e22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e26:	613b      	str	r3, [r7, #16]
 8001e28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e2a:	4b11      	ldr	r3, [pc, #68]	; (8001e70 <HAL_SPI_MspInit+0x80>)
 8001e2c:	695b      	ldr	r3, [r3, #20]
 8001e2e:	4a10      	ldr	r2, [pc, #64]	; (8001e70 <HAL_SPI_MspInit+0x80>)
 8001e30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e34:	6153      	str	r3, [r2, #20]
 8001e36:	4b0e      	ldr	r3, [pc, #56]	; (8001e70 <HAL_SPI_MspInit+0x80>)
 8001e38:	695b      	ldr	r3, [r3, #20]
 8001e3a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e3e:	60fb      	str	r3, [r7, #12]
 8001e40:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001e42:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001e46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e48:	2302      	movs	r3, #2
 8001e4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e50:	2303      	movs	r3, #3
 8001e52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001e54:	2305      	movs	r3, #5
 8001e56:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e58:	f107 0314 	add.w	r3, r7, #20
 8001e5c:	4619      	mov	r1, r3
 8001e5e:	4805      	ldr	r0, [pc, #20]	; (8001e74 <HAL_SPI_MspInit+0x84>)
 8001e60:	f003 fb62 	bl	8005528 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001e64:	bf00      	nop
 8001e66:	3728      	adds	r7, #40	; 0x28
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}
 8001e6c:	40003800 	.word	0x40003800
 8001e70:	40021000 	.word	0x40021000
 8001e74:	48000400 	.word	0x48000400

08001e78 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b086      	sub	sp, #24
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a1f      	ldr	r2, [pc, #124]	; (8001f04 <HAL_TIM_Base_MspInit+0x8c>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d114      	bne.n	8001eb4 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001e8a:	4b1f      	ldr	r3, [pc, #124]	; (8001f08 <HAL_TIM_Base_MspInit+0x90>)
 8001e8c:	69db      	ldr	r3, [r3, #28]
 8001e8e:	4a1e      	ldr	r2, [pc, #120]	; (8001f08 <HAL_TIM_Base_MspInit+0x90>)
 8001e90:	f043 0310 	orr.w	r3, r3, #16
 8001e94:	61d3      	str	r3, [r2, #28]
 8001e96:	4b1c      	ldr	r3, [pc, #112]	; (8001f08 <HAL_TIM_Base_MspInit+0x90>)
 8001e98:	69db      	ldr	r3, [r3, #28]
 8001e9a:	f003 0310 	and.w	r3, r3, #16
 8001e9e:	617b      	str	r3, [r7, #20]
 8001ea0:	697b      	ldr	r3, [r7, #20]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	2100      	movs	r1, #0
 8001ea6:	2036      	movs	r0, #54	; 0x36
 8001ea8:	f003 fb07 	bl	80054ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001eac:	2036      	movs	r0, #54	; 0x36
 8001eae:	f003 fb20 	bl	80054f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8001eb2:	e022      	b.n	8001efa <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM16)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a14      	ldr	r2, [pc, #80]	; (8001f0c <HAL_TIM_Base_MspInit+0x94>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d10c      	bne.n	8001ed8 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001ebe:	4b12      	ldr	r3, [pc, #72]	; (8001f08 <HAL_TIM_Base_MspInit+0x90>)
 8001ec0:	699b      	ldr	r3, [r3, #24]
 8001ec2:	4a11      	ldr	r2, [pc, #68]	; (8001f08 <HAL_TIM_Base_MspInit+0x90>)
 8001ec4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ec8:	6193      	str	r3, [r2, #24]
 8001eca:	4b0f      	ldr	r3, [pc, #60]	; (8001f08 <HAL_TIM_Base_MspInit+0x90>)
 8001ecc:	699b      	ldr	r3, [r3, #24]
 8001ece:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ed2:	613b      	str	r3, [r7, #16]
 8001ed4:	693b      	ldr	r3, [r7, #16]
}
 8001ed6:	e010      	b.n	8001efa <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM17)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a0c      	ldr	r2, [pc, #48]	; (8001f10 <HAL_TIM_Base_MspInit+0x98>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d10b      	bne.n	8001efa <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8001ee2:	4b09      	ldr	r3, [pc, #36]	; (8001f08 <HAL_TIM_Base_MspInit+0x90>)
 8001ee4:	699b      	ldr	r3, [r3, #24]
 8001ee6:	4a08      	ldr	r2, [pc, #32]	; (8001f08 <HAL_TIM_Base_MspInit+0x90>)
 8001ee8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001eec:	6193      	str	r3, [r2, #24]
 8001eee:	4b06      	ldr	r3, [pc, #24]	; (8001f08 <HAL_TIM_Base_MspInit+0x90>)
 8001ef0:	699b      	ldr	r3, [r3, #24]
 8001ef2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ef6:	60fb      	str	r3, [r7, #12]
 8001ef8:	68fb      	ldr	r3, [r7, #12]
}
 8001efa:	bf00      	nop
 8001efc:	3718      	adds	r7, #24
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	bf00      	nop
 8001f04:	40001000 	.word	0x40001000
 8001f08:	40021000 	.word	0x40021000
 8001f0c:	40014400 	.word	0x40014400
 8001f10:	40014800 	.word	0x40014800

08001f14 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b08a      	sub	sp, #40	; 0x28
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f1c:	f107 0314 	add.w	r3, r7, #20
 8001f20:	2200      	movs	r2, #0
 8001f22:	601a      	str	r2, [r3, #0]
 8001f24:	605a      	str	r2, [r3, #4]
 8001f26:	609a      	str	r2, [r3, #8]
 8001f28:	60da      	str	r2, [r3, #12]
 8001f2a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a17      	ldr	r2, [pc, #92]	; (8001f90 <HAL_UART_MspInit+0x7c>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d128      	bne.n	8001f88 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001f36:	4b17      	ldr	r3, [pc, #92]	; (8001f94 <HAL_UART_MspInit+0x80>)
 8001f38:	69db      	ldr	r3, [r3, #28]
 8001f3a:	4a16      	ldr	r2, [pc, #88]	; (8001f94 <HAL_UART_MspInit+0x80>)
 8001f3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f40:	61d3      	str	r3, [r2, #28]
 8001f42:	4b14      	ldr	r3, [pc, #80]	; (8001f94 <HAL_UART_MspInit+0x80>)
 8001f44:	69db      	ldr	r3, [r3, #28]
 8001f46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f4a:	613b      	str	r3, [r7, #16]
 8001f4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f4e:	4b11      	ldr	r3, [pc, #68]	; (8001f94 <HAL_UART_MspInit+0x80>)
 8001f50:	695b      	ldr	r3, [r3, #20]
 8001f52:	4a10      	ldr	r2, [pc, #64]	; (8001f94 <HAL_UART_MspInit+0x80>)
 8001f54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f58:	6153      	str	r3, [r2, #20]
 8001f5a:	4b0e      	ldr	r3, [pc, #56]	; (8001f94 <HAL_UART_MspInit+0x80>)
 8001f5c:	695b      	ldr	r3, [r3, #20]
 8001f5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f62:	60fb      	str	r3, [r7, #12]
 8001f64:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001f66:	230c      	movs	r3, #12
 8001f68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f6a:	2302      	movs	r3, #2
 8001f6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f72:	2303      	movs	r3, #3
 8001f74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001f76:	2307      	movs	r3, #7
 8001f78:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f7a:	f107 0314 	add.w	r3, r7, #20
 8001f7e:	4619      	mov	r1, r3
 8001f80:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f84:	f003 fad0 	bl	8005528 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001f88:	bf00      	nop
 8001f8a:	3728      	adds	r7, #40	; 0x28
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}
 8001f90:	40004400 	.word	0x40004400
 8001f94:	40021000 	.word	0x40021000

08001f98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f9c:	e7fe      	b.n	8001f9c <NMI_Handler+0x4>

08001f9e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f9e:	b480      	push	{r7}
 8001fa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fa2:	e7fe      	b.n	8001fa2 <HardFault_Handler+0x4>

08001fa4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fa8:	e7fe      	b.n	8001fa8 <MemManage_Handler+0x4>

08001faa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001faa:	b480      	push	{r7}
 8001fac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001fae:	e7fe      	b.n	8001fae <BusFault_Handler+0x4>

08001fb0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fb4:	e7fe      	b.n	8001fb4 <UsageFault_Handler+0x4>

08001fb6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001fb6:	b480      	push	{r7}
 8001fb8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001fba:	bf00      	nop
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc2:	4770      	bx	lr

08001fc4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fc8:	bf00      	nop
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd0:	4770      	bx	lr

08001fd2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001fd2:	b480      	push	{r7}
 8001fd4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001fd6:	bf00      	nop
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fde:	4770      	bx	lr

08001fe0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001fe4:	f001 fc30 	bl	8003848 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001fe8:	bf00      	nop
 8001fea:	bd80      	pop	{r7, pc}

08001fec <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b082      	sub	sp, #8
 8001ff0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
	  //EXTI0 triggers on rising or falling edge detection of the external button line
	  for(int i=0; i<30000; i++);					//Debounce button
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	607b      	str	r3, [r7, #4]
 8001ff6:	e002      	b.n	8001ffe <EXTI9_5_IRQHandler+0x12>
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	3301      	adds	r3, #1
 8001ffc:	607b      	str	r3, [r7, #4]
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	f247 522f 	movw	r2, #29999	; 0x752f
 8002004:	4293      	cmp	r3, r2
 8002006:	ddf7      	ble.n	8001ff8 <EXTI9_5_IRQHandler+0xc>
	  SysInfo.Button1 = Read_Button1();			//Set variable based on current state of the button after debounce
 8002008:	f7fe fea0 	bl	8000d4c <Read_Button1>
 800200c:	4603      	mov	r3, r0
 800200e:	2b00      	cmp	r3, #0
 8002010:	bf14      	ite	ne
 8002012:	2301      	movne	r3, #1
 8002014:	2300      	moveq	r3, #0
 8002016:	b2da      	uxtb	r2, r3
 8002018:	4b11      	ldr	r3, [pc, #68]	; (8002060 <EXTI9_5_IRQHandler+0x74>)
 800201a:	701a      	strb	r2, [r3, #0]
	  SysInfo.Button2 = Read_Button2();			//Set variable based on current state of the button after debounce
 800201c:	f7fe fea0 	bl	8000d60 <Read_Button2>
 8002020:	4603      	mov	r3, r0
 8002022:	2b00      	cmp	r3, #0
 8002024:	bf14      	ite	ne
 8002026:	2301      	movne	r3, #1
 8002028:	2300      	moveq	r3, #0
 800202a:	b2da      	uxtb	r2, r3
 800202c:	4b0c      	ldr	r3, [pc, #48]	; (8002060 <EXTI9_5_IRQHandler+0x74>)
 800202e:	705a      	strb	r2, [r3, #1]
	  SysInfo.Button3 = Read_Button3();			//Set variable based on current state of the button after debounce
 8002030:	f7fe fea0 	bl	8000d74 <Read_Button3>
 8002034:	4603      	mov	r3, r0
 8002036:	2b00      	cmp	r3, #0
 8002038:	bf14      	ite	ne
 800203a:	2301      	movne	r3, #1
 800203c:	2300      	moveq	r3, #0
 800203e:	b2da      	uxtb	r2, r3
 8002040:	4b07      	ldr	r3, [pc, #28]	; (8002060 <EXTI9_5_IRQHandler+0x74>)
 8002042:	709a      	strb	r2, [r3, #2]


  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON1_EXTI5_Pin);
 8002044:	2020      	movs	r0, #32
 8002046:	f003 fc33 	bl	80058b0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON2_EXTI6_Pin);
 800204a:	2040      	movs	r0, #64	; 0x40
 800204c:	f003 fc30 	bl	80058b0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON3_EXTI7_Pin);
 8002050:	2080      	movs	r0, #128	; 0x80
 8002052:	f003 fc2d 	bl	80058b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002056:	bf00      	nop
 8002058:	3708      	adds	r7, #8
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	200004dc 	.word	0x200004dc

08002064 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(CC1_DETECT_EXTI11_Pin);
 8002068:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800206c:	f003 fc20 	bl	80058b0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(CC2_DETECT_EXTI12_Pin);
 8002070:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002074:	f003 fc1c 	bl	80058b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002078:	bf00      	nop
 800207a:	bd80      	pop	{r7, pc}

0800207c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles Timer 6 interrupt and DAC underrun interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */
	HeartBeatFlag = true;		//Set heartbeat LED to true when 1 second has elapsed
 8002080:	4b03      	ldr	r3, [pc, #12]	; (8002090 <TIM6_DAC_IRQHandler+0x14>)
 8002082:	2201      	movs	r2, #1
 8002084:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002086:	4803      	ldr	r0, [pc, #12]	; (8002094 <TIM6_DAC_IRQHandler+0x18>)
 8002088:	f005 ffc4 	bl	8008014 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800208c:	bf00      	nop
 800208e:	bd80      	pop	{r7, pc}
 8002090:	200005a9 	.word	0x200005a9
 8002094:	20000370 	.word	0x20000370

08002098 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002098:	b480      	push	{r7}
 800209a:	af00      	add	r7, sp, #0
  return 1;
 800209c:	2301      	movs	r3, #1
}
 800209e:	4618      	mov	r0, r3
 80020a0:	46bd      	mov	sp, r7
 80020a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a6:	4770      	bx	lr

080020a8 <_kill>:

int _kill(int pid, int sig)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b082      	sub	sp, #8
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
 80020b0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80020b2:	f007 fee7 	bl	8009e84 <__errno>
 80020b6:	4603      	mov	r3, r0
 80020b8:	2216      	movs	r2, #22
 80020ba:	601a      	str	r2, [r3, #0]
  return -1;
 80020bc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	3708      	adds	r7, #8
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bd80      	pop	{r7, pc}

080020c8 <_exit>:

void _exit (int status)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b082      	sub	sp, #8
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80020d0:	f04f 31ff 	mov.w	r1, #4294967295
 80020d4:	6878      	ldr	r0, [r7, #4]
 80020d6:	f7ff ffe7 	bl	80020a8 <_kill>
  while (1) {}    /* Make sure we hang here */
 80020da:	e7fe      	b.n	80020da <_exit+0x12>

080020dc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b086      	sub	sp, #24
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	60f8      	str	r0, [r7, #12]
 80020e4:	60b9      	str	r1, [r7, #8]
 80020e6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020e8:	2300      	movs	r3, #0
 80020ea:	617b      	str	r3, [r7, #20]
 80020ec:	e00a      	b.n	8002104 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80020ee:	f3af 8000 	nop.w
 80020f2:	4601      	mov	r1, r0
 80020f4:	68bb      	ldr	r3, [r7, #8]
 80020f6:	1c5a      	adds	r2, r3, #1
 80020f8:	60ba      	str	r2, [r7, #8]
 80020fa:	b2ca      	uxtb	r2, r1
 80020fc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020fe:	697b      	ldr	r3, [r7, #20]
 8002100:	3301      	adds	r3, #1
 8002102:	617b      	str	r3, [r7, #20]
 8002104:	697a      	ldr	r2, [r7, #20]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	429a      	cmp	r2, r3
 800210a:	dbf0      	blt.n	80020ee <_read+0x12>
  }

  return len;
 800210c:	687b      	ldr	r3, [r7, #4]
}
 800210e:	4618      	mov	r0, r3
 8002110:	3718      	adds	r7, #24
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}

08002116 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002116:	b580      	push	{r7, lr}
 8002118:	b086      	sub	sp, #24
 800211a:	af00      	add	r7, sp, #0
 800211c:	60f8      	str	r0, [r7, #12]
 800211e:	60b9      	str	r1, [r7, #8]
 8002120:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002122:	2300      	movs	r3, #0
 8002124:	617b      	str	r3, [r7, #20]
 8002126:	e009      	b.n	800213c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002128:	68bb      	ldr	r3, [r7, #8]
 800212a:	1c5a      	adds	r2, r3, #1
 800212c:	60ba      	str	r2, [r7, #8]
 800212e:	781b      	ldrb	r3, [r3, #0]
 8002130:	4618      	mov	r0, r3
 8002132:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002136:	697b      	ldr	r3, [r7, #20]
 8002138:	3301      	adds	r3, #1
 800213a:	617b      	str	r3, [r7, #20]
 800213c:	697a      	ldr	r2, [r7, #20]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	429a      	cmp	r2, r3
 8002142:	dbf1      	blt.n	8002128 <_write+0x12>
  }
  return len;
 8002144:	687b      	ldr	r3, [r7, #4]
}
 8002146:	4618      	mov	r0, r3
 8002148:	3718      	adds	r7, #24
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}

0800214e <_close>:

int _close(int file)
{
 800214e:	b480      	push	{r7}
 8002150:	b083      	sub	sp, #12
 8002152:	af00      	add	r7, sp, #0
 8002154:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002156:	f04f 33ff 	mov.w	r3, #4294967295
}
 800215a:	4618      	mov	r0, r3
 800215c:	370c      	adds	r7, #12
 800215e:	46bd      	mov	sp, r7
 8002160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002164:	4770      	bx	lr

08002166 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002166:	b480      	push	{r7}
 8002168:	b083      	sub	sp, #12
 800216a:	af00      	add	r7, sp, #0
 800216c:	6078      	str	r0, [r7, #4]
 800216e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002176:	605a      	str	r2, [r3, #4]
  return 0;
 8002178:	2300      	movs	r3, #0
}
 800217a:	4618      	mov	r0, r3
 800217c:	370c      	adds	r7, #12
 800217e:	46bd      	mov	sp, r7
 8002180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002184:	4770      	bx	lr

08002186 <_isatty>:

int _isatty(int file)
{
 8002186:	b480      	push	{r7}
 8002188:	b083      	sub	sp, #12
 800218a:	af00      	add	r7, sp, #0
 800218c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800218e:	2301      	movs	r3, #1
}
 8002190:	4618      	mov	r0, r3
 8002192:	370c      	adds	r7, #12
 8002194:	46bd      	mov	sp, r7
 8002196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219a:	4770      	bx	lr

0800219c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800219c:	b480      	push	{r7}
 800219e:	b085      	sub	sp, #20
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	60f8      	str	r0, [r7, #12]
 80021a4:	60b9      	str	r1, [r7, #8]
 80021a6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80021a8:	2300      	movs	r3, #0
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	3714      	adds	r7, #20
 80021ae:	46bd      	mov	sp, r7
 80021b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b4:	4770      	bx	lr
	...

080021b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b086      	sub	sp, #24
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80021c0:	4a14      	ldr	r2, [pc, #80]	; (8002214 <_sbrk+0x5c>)
 80021c2:	4b15      	ldr	r3, [pc, #84]	; (8002218 <_sbrk+0x60>)
 80021c4:	1ad3      	subs	r3, r2, r3
 80021c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80021cc:	4b13      	ldr	r3, [pc, #76]	; (800221c <_sbrk+0x64>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d102      	bne.n	80021da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80021d4:	4b11      	ldr	r3, [pc, #68]	; (800221c <_sbrk+0x64>)
 80021d6:	4a12      	ldr	r2, [pc, #72]	; (8002220 <_sbrk+0x68>)
 80021d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80021da:	4b10      	ldr	r3, [pc, #64]	; (800221c <_sbrk+0x64>)
 80021dc:	681a      	ldr	r2, [r3, #0]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	4413      	add	r3, r2
 80021e2:	693a      	ldr	r2, [r7, #16]
 80021e4:	429a      	cmp	r2, r3
 80021e6:	d207      	bcs.n	80021f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80021e8:	f007 fe4c 	bl	8009e84 <__errno>
 80021ec:	4603      	mov	r3, r0
 80021ee:	220c      	movs	r2, #12
 80021f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80021f2:	f04f 33ff 	mov.w	r3, #4294967295
 80021f6:	e009      	b.n	800220c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80021f8:	4b08      	ldr	r3, [pc, #32]	; (800221c <_sbrk+0x64>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80021fe:	4b07      	ldr	r3, [pc, #28]	; (800221c <_sbrk+0x64>)
 8002200:	681a      	ldr	r2, [r3, #0]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	4413      	add	r3, r2
 8002206:	4a05      	ldr	r2, [pc, #20]	; (800221c <_sbrk+0x64>)
 8002208:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800220a:	68fb      	ldr	r3, [r7, #12]
}
 800220c:	4618      	mov	r0, r3
 800220e:	3718      	adds	r7, #24
 8002210:	46bd      	mov	sp, r7
 8002212:	bd80      	pop	{r7, pc}
 8002214:	20008000 	.word	0x20008000
 8002218:	00000400 	.word	0x00000400
 800221c:	200005ac 	.word	0x200005ac
 8002220:	20000758 	.word	0x20000758

08002224 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002224:	b480      	push	{r7}
 8002226:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002228:	4b06      	ldr	r3, [pc, #24]	; (8002244 <SystemInit+0x20>)
 800222a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800222e:	4a05      	ldr	r2, [pc, #20]	; (8002244 <SystemInit+0x20>)
 8002230:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002234:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002238:	bf00      	nop
 800223a:	46bd      	mov	sp, r7
 800223c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002240:	4770      	bx	lr
 8002242:	bf00      	nop
 8002244:	e000ed00 	.word	0xe000ed00

08002248 <CAN_ClearFIFO>:
////////////////////////////////////////  uC CANBUS MANAGEMENT AND PROTOCOL FUNCTIONS /////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


//Clear the FIFO buffer of the specified CANBus FIFO
void CAN_ClearFIFO(uint32_t RxFifo){
 8002248:	b580      	push	{r7, lr}
 800224a:	b08c      	sub	sp, #48	; 0x30
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]

	//Ensure the FIFO passed is valid
	if( RxFifo==CAN_RX_FIFO0 || RxFifo==CAN_RX_FIFO1 ){
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d012      	beq.n	800227c <CAN_ClearFIFO+0x34>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2b01      	cmp	r3, #1
 800225a:	d118      	bne.n	800228e <CAN_ClearFIFO+0x46>
		CAN_RxHeaderTypeDef cRxHeader;
		uint8_t cMessageBuffer[8];
		HAL_StatusTypeDef cRet;

		//Retrieve FIFO messages until the buffer is empty
		while( HAL_CAN_GetRxFifoFillLevel(&CANBUS_EXT, RxFifo) != 0 ){
 800225c:	e00e      	b.n	800227c <CAN_ClearFIFO+0x34>
			cRet=HAL_CAN_GetRxMessage(&CANBUS_EXT, RxFifo, &cRxHeader, cMessageBuffer);
 800225e:	f107 0308 	add.w	r3, r7, #8
 8002262:	f107 0210 	add.w	r2, r7, #16
 8002266:	6879      	ldr	r1, [r7, #4]
 8002268:	480b      	ldr	r0, [pc, #44]	; (8002298 <CAN_ClearFIFO+0x50>)
 800226a:	f002 feda 	bl	8005022 <HAL_CAN_GetRxMessage>
 800226e:	4603      	mov	r3, r0
 8002270:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if(cRet!=HAL_OK){break;}
 8002274:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002278:	2b00      	cmp	r3, #0
 800227a:	d107      	bne.n	800228c <CAN_ClearFIFO+0x44>
		while( HAL_CAN_GetRxFifoFillLevel(&CANBUS_EXT, RxFifo) != 0 ){
 800227c:	6879      	ldr	r1, [r7, #4]
 800227e:	4806      	ldr	r0, [pc, #24]	; (8002298 <CAN_ClearFIFO+0x50>)
 8002280:	f002 fff1 	bl	8005266 <HAL_CAN_GetRxFifoFillLevel>
 8002284:	4603      	mov	r3, r0
 8002286:	2b00      	cmp	r3, #0
 8002288:	d1e9      	bne.n	800225e <CAN_ClearFIFO+0x16>
		}

	}

}
 800228a:	e000      	b.n	800228e <CAN_ClearFIFO+0x46>
			if(cRet!=HAL_OK){break;}
 800228c:	bf00      	nop
}
 800228e:	bf00      	nop
 8002290:	3730      	adds	r7, #48	; 0x30
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}
 8002296:	bf00      	nop
 8002298:	20000290 	.word	0x20000290

0800229c <eeprom_Read>:

}


//Function to read data from the EEPROM IC
eeprom_status_t eeprom_Read(uint16_t MemADDR, uint8_t* ReadArray, int ReadArraySize){
 800229c:	b580      	push	{r7, lr}
 800229e:	b088      	sub	sp, #32
 80022a0:	af02      	add	r7, sp, #8
 80022a2:	4603      	mov	r3, r0
 80022a4:	60b9      	str	r1, [r7, #8]
 80022a6:	607a      	str	r2, [r7, #4]
 80022a8:	81fb      	strh	r3, [r7, #14]

	//Modify the I2C address value with the 3 most significant bits from MemADDR
	uint16_t DeviceADDR_Modified = DeviceADDR | ((MemADDR>>8)&0x0007) ;
 80022aa:	89fb      	ldrh	r3, [r7, #14]
 80022ac:	0a1b      	lsrs	r3, r3, #8
 80022ae:	b29b      	uxth	r3, r3
 80022b0:	b21b      	sxth	r3, r3
 80022b2:	f003 0307 	and.w	r3, r3, #7
 80022b6:	b21a      	sxth	r2, r3
 80022b8:	2350      	movs	r3, #80	; 0x50
 80022ba:	b21b      	sxth	r3, r3
 80022bc:	4313      	orrs	r3, r2
 80022be:	b21b      	sxth	r3, r3
 80022c0:	82fb      	strh	r3, [r7, #22]

	//Create a write buffer and store EEPROM read address
	uint8_t WriteBuffer[1] = {MemADDR} ;
 80022c2:	89fb      	ldrh	r3, [r7, #14]
 80022c4:	b2db      	uxtb	r3, r3
 80022c6:	753b      	strb	r3, [r7, #20]

	//Read data byte(s) from the EEPROM IC
	hal_i2c_status = HAL_I2C_Master_Transmit(&I2C_SYS, (DeviceADDR_Modified<<1), WriteBuffer, sizeof(WriteBuffer), 100);		//Set the read address in the EEPROM IC
 80022c8:	8afb      	ldrh	r3, [r7, #22]
 80022ca:	005b      	lsls	r3, r3, #1
 80022cc:	b299      	uxth	r1, r3
 80022ce:	f107 0214 	add.w	r2, r7, #20
 80022d2:	2364      	movs	r3, #100	; 0x64
 80022d4:	9300      	str	r3, [sp, #0]
 80022d6:	2301      	movs	r3, #1
 80022d8:	4816      	ldr	r0, [pc, #88]	; (8002334 <eeprom_Read+0x98>)
 80022da:	f003 fb9b 	bl	8005a14 <HAL_I2C_Master_Transmit>
 80022de:	4603      	mov	r3, r0
 80022e0:	461a      	mov	r2, r3
 80022e2:	4b15      	ldr	r3, [pc, #84]	; (8002338 <eeprom_Read+0x9c>)
 80022e4:	701a      	strb	r2, [r3, #0]
	if( hal_i2c_status != HAL_OK ){
 80022e6:	4b14      	ldr	r3, [pc, #80]	; (8002338 <eeprom_Read+0x9c>)
 80022e8:	781b      	ldrb	r3, [r3, #0]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d002      	beq.n	80022f4 <eeprom_Read+0x58>
		return EEPROM_ERROR_I2C_WRITE;
 80022ee:	f06f 0301 	mvn.w	r3, #1
 80022f2:	e01a      	b.n	800232a <eeprom_Read+0x8e>
	}else{
		hal_i2c_status = HAL_I2C_Master_Receive(&I2C_SYS, (DeviceADDR_Modified<<1)|0x01, ReadArray, ReadArraySize, 100);		//Read data from the EEPROM IC starting at the previously set address
 80022f4:	8afb      	ldrh	r3, [r7, #22]
 80022f6:	005b      	lsls	r3, r3, #1
 80022f8:	b21b      	sxth	r3, r3
 80022fa:	f043 0301 	orr.w	r3, r3, #1
 80022fe:	b21b      	sxth	r3, r3
 8002300:	b299      	uxth	r1, r3
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	b29b      	uxth	r3, r3
 8002306:	2264      	movs	r2, #100	; 0x64
 8002308:	9200      	str	r2, [sp, #0]
 800230a:	68ba      	ldr	r2, [r7, #8]
 800230c:	4809      	ldr	r0, [pc, #36]	; (8002334 <eeprom_Read+0x98>)
 800230e:	f003 fc75 	bl	8005bfc <HAL_I2C_Master_Receive>
 8002312:	4603      	mov	r3, r0
 8002314:	461a      	mov	r2, r3
 8002316:	4b08      	ldr	r3, [pc, #32]	; (8002338 <eeprom_Read+0x9c>)
 8002318:	701a      	strb	r2, [r3, #0]
		if( hal_i2c_status != HAL_OK ){	return EEPROM_ERROR_I2C_READ; }
 800231a:	4b07      	ldr	r3, [pc, #28]	; (8002338 <eeprom_Read+0x9c>)
 800231c:	781b      	ldrb	r3, [r3, #0]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d002      	beq.n	8002328 <eeprom_Read+0x8c>
 8002322:	f04f 33ff 	mov.w	r3, #4294967295
 8002326:	e000      	b.n	800232a <eeprom_Read+0x8e>
	}

	//Return success code
	return EEPROM_STATUS_OK;
 8002328:	2300      	movs	r3, #0

}
 800232a:	4618      	mov	r0, r3
 800232c:	3718      	adds	r7, #24
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}
 8002332:	bf00      	nop
 8002334:	200002b8 	.word	0x200002b8
 8002338:	200005b0 	.word	0x200005b0

0800233c <MCP3421_ADC_Reset>:
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


//Reset the MCP3421A3T's configuration register to its POR value and validate the values
//This is needed because there is no way to force the chip's registers to a POR state, therefore if the system is reset, the IC will maintain its old values
mcp3421_status_t MCP3421_ADC_Reset(void){
 800233c:	b580      	push	{r7, lr}
 800233e:	b082      	sub	sp, #8
 8002340:	af00      	add	r7, sp, #0

	//Power-On-Reset value of the ADC's configuration register
	uint8_t POR_RegValue = 0x10;
 8002342:	2310      	movs	r3, #16
 8002344:	71fb      	strb	r3, [r7, #7]

	//Write the POR value to the config register
	if( MCP3421_ADC_Write_Config(&POR_RegValue) != ADC_STATUS_OK){ return ADC_ERROR_I2C_WRITE; }
 8002346:	1dfb      	adds	r3, r7, #7
 8002348:	4618      	mov	r0, r3
 800234a:	f000 f85f 	bl	800240c <MCP3421_ADC_Write_Config>
 800234e:	4603      	mov	r3, r0
 8002350:	2b00      	cmp	r3, #0
 8002352:	d002      	beq.n	800235a <MCP3421_ADC_Reset+0x1e>
 8002354:	f06f 0301 	mvn.w	r3, #1
 8002358:	e011      	b.n	800237e <MCP3421_ADC_Reset+0x42>

	//Read the config byte from the MCP3421A3T and compare it to the POR value (RDY bit is masked by retrieval function)
	uint8_t ReadConfigByte;
	if( MCP3421_ADC_Read_Config(&ReadConfigByte) != ADC_STATUS_OK){ return ADC_ERROR_I2C_READ; }
 800235a:	1dbb      	adds	r3, r7, #6
 800235c:	4618      	mov	r0, r3
 800235e:	f000 f838 	bl	80023d2 <MCP3421_ADC_Read_Config>
 8002362:	4603      	mov	r3, r0
 8002364:	2b00      	cmp	r3, #0
 8002366:	d002      	beq.n	800236e <MCP3421_ADC_Reset+0x32>
 8002368:	f04f 33ff 	mov.w	r3, #4294967295
 800236c:	e007      	b.n	800237e <MCP3421_ADC_Reset+0x42>
	if( ReadConfigByte != POR_RegValue){ return ADC_ERROR_READBACK; }
 800236e:	79ba      	ldrb	r2, [r7, #6]
 8002370:	79fb      	ldrb	r3, [r7, #7]
 8002372:	429a      	cmp	r2, r3
 8002374:	d002      	beq.n	800237c <MCP3421_ADC_Reset+0x40>
 8002376:	f06f 0303 	mvn.w	r3, #3
 800237a:	e000      	b.n	800237e <MCP3421_ADC_Reset+0x42>

 	//memset(PrintBuffer, '\0', COMM_SIZE);	snprintf(PrintBuffer, COMM_SIZE-1, "\n\n\rRead ADC Config Value is 0x%02X", ReadConfigByte );
    //DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE );

	//Return operation success
	return ADC_STATUS_OK;
 800237c:	2300      	movs	r3, #0

}
 800237e:	4618      	mov	r0, r3
 8002380:	3708      	adds	r7, #8
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}

08002386 <MCP3421_ADC_Init>:



//Initiate the MCP3421A3T's configuration register and validate the values
mcp3421_status_t MCP3421_ADC_Init( uint8_t ConfigValue ){
 8002386:	b580      	push	{r7, lr}
 8002388:	b084      	sub	sp, #16
 800238a:	af00      	add	r7, sp, #0
 800238c:	4603      	mov	r3, r0
 800238e:	71fb      	strb	r3, [r7, #7]

	//Write the passed config value to the configuration register
	if( MCP3421_ADC_Write_Config(&ConfigValue) != ADC_STATUS_OK){ return ADC_ERROR_I2C_WRITE; }
 8002390:	1dfb      	adds	r3, r7, #7
 8002392:	4618      	mov	r0, r3
 8002394:	f000 f83a 	bl	800240c <MCP3421_ADC_Write_Config>
 8002398:	4603      	mov	r3, r0
 800239a:	2b00      	cmp	r3, #0
 800239c:	d002      	beq.n	80023a4 <MCP3421_ADC_Init+0x1e>
 800239e:	f06f 0301 	mvn.w	r3, #1
 80023a2:	e012      	b.n	80023ca <MCP3421_ADC_Init+0x44>

	//Read the config byte from the MCP3421A3T and compare it to the expected value (RDY bit is masked by retrieval function)
	uint8_t ReadConfigByte;
	if( MCP3421_ADC_Read_Config(&ReadConfigByte) != ADC_STATUS_OK){ return ADC_ERROR_I2C_READ; }
 80023a4:	f107 030f 	add.w	r3, r7, #15
 80023a8:	4618      	mov	r0, r3
 80023aa:	f000 f812 	bl	80023d2 <MCP3421_ADC_Read_Config>
 80023ae:	4603      	mov	r3, r0
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d002      	beq.n	80023ba <MCP3421_ADC_Init+0x34>
 80023b4:	f04f 33ff 	mov.w	r3, #4294967295
 80023b8:	e007      	b.n	80023ca <MCP3421_ADC_Init+0x44>
	if( ReadConfigByte != ConfigValue){ return ADC_ERROR_READBACK; }
 80023ba:	7bfa      	ldrb	r2, [r7, #15]
 80023bc:	79fb      	ldrb	r3, [r7, #7]
 80023be:	429a      	cmp	r2, r3
 80023c0:	d002      	beq.n	80023c8 <MCP3421_ADC_Init+0x42>
 80023c2:	f06f 0303 	mvn.w	r3, #3
 80023c6:	e000      	b.n	80023ca <MCP3421_ADC_Init+0x44>

 	//memset(PrintBuffer, '\0', COMM_SIZE);	snprintf(PrintBuffer, COMM_SIZE-1, "\n\n\rConfig Value is 0x%02X", ReadConfigByte );
    //DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE );

	//Return operation success
	return ADC_STATUS_OK;
 80023c8:	2300      	movs	r3, #0

}
 80023ca:	4618      	mov	r0, r3
 80023cc:	3710      	adds	r7, #16
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}

080023d2 <MCP3421_ADC_Read_Config>:




//Read the data in the MCP3421's configuration register (RDY bit is masked as its volatile)
mcp3421_status_t MCP3421_ADC_Read_Config( uint8_t* ReadByte ){
 80023d2:	b580      	push	{r7, lr}
 80023d4:	b084      	sub	sp, #16
 80023d6:	af00      	add	r7, sp, #0
 80023d8:	6078      	str	r0, [r7, #4]

	//Local function variables
	uint8_t ReadBuffer[4] = {0x00};
 80023da:	2300      	movs	r3, #0
 80023dc:	60fb      	str	r3, [r7, #12]

	//Read 4-bytes from the MCP3421 assuming 18-bit mode operation
	//This is done as all sample modes repeat the config-byte at the end, so it is known that the 4th byte is the configuration byte across all modes due to the repetition
	if( MCP3421_ADC_Read( ReadBuffer, 4 ) != ADC_STATUS_OK){ return ADC_ERROR_I2C_READ; }
 80023de:	f107 030c 	add.w	r3, r7, #12
 80023e2:	2104      	movs	r1, #4
 80023e4:	4618      	mov	r0, r3
 80023e6:	f000 f83d 	bl	8002464 <MCP3421_ADC_Read>
 80023ea:	4603      	mov	r3, r0
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d002      	beq.n	80023f6 <MCP3421_ADC_Read_Config+0x24>
 80023f0:	f04f 33ff 	mov.w	r3, #4294967295
 80023f4:	e006      	b.n	8002404 <MCP3421_ADC_Read_Config+0x32>

	//Mask the RDY bit and update the value of the passed memory address
	*ReadByte = ReadBuffer[3]&0x7F;
 80023f6:	7bfb      	ldrb	r3, [r7, #15]
 80023f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80023fc:	b2da      	uxtb	r2, r3
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	701a      	strb	r2, [r3, #0]

	//Return operation success
	return ADC_STATUS_OK;
 8002402:	2300      	movs	r3, #0

}
 8002404:	4618      	mov	r0, r3
 8002406:	3710      	adds	r7, #16
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}

0800240c <MCP3421_ADC_Write_Config>:
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////  I2C ADC Communication Functions  //////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//Write the passed byte to the MCP3421's configuration register
mcp3421_status_t MCP3421_ADC_Write_Config(uint8_t* WriteArray){
 800240c:	b580      	push	{r7, lr}
 800240e:	b084      	sub	sp, #16
 8002410:	af02      	add	r7, sp, #8
 8002412:	6078      	str	r0, [r7, #4]

	//Check for invalid parameter conditions
	if(WriteArray==NULL){ return ADC_ERROR_PARAMETER; }
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d102      	bne.n	8002420 <MCP3421_ADC_Write_Config+0x14>
 800241a:	f06f 0302 	mvn.w	r3, #2
 800241e:	e019      	b.n	8002454 <MCP3421_ADC_Write_Config+0x48>

	//Issue the i2c write data command to the ADC with the config data package
	hal_i2c_status = HAL_I2C_Master_Transmit(&I2C_SYS, (ADC_DeviceADDR<<1), WriteArray, 1, 50);
 8002420:	236b      	movs	r3, #107	; 0x6b
 8002422:	b29b      	uxth	r3, r3
 8002424:	005b      	lsls	r3, r3, #1
 8002426:	b299      	uxth	r1, r3
 8002428:	2332      	movs	r3, #50	; 0x32
 800242a:	9300      	str	r3, [sp, #0]
 800242c:	2301      	movs	r3, #1
 800242e:	687a      	ldr	r2, [r7, #4]
 8002430:	480a      	ldr	r0, [pc, #40]	; (800245c <MCP3421_ADC_Write_Config+0x50>)
 8002432:	f003 faef 	bl	8005a14 <HAL_I2C_Master_Transmit>
 8002436:	4603      	mov	r3, r0
 8002438:	461a      	mov	r2, r3
 800243a:	4b09      	ldr	r3, [pc, #36]	; (8002460 <MCP3421_ADC_Write_Config+0x54>)
 800243c:	701a      	strb	r2, [r3, #0]
	if( hal_i2c_status != HAL_OK ){	return ADC_ERROR_I2C_WRITE;	}
 800243e:	4b08      	ldr	r3, [pc, #32]	; (8002460 <MCP3421_ADC_Write_Config+0x54>)
 8002440:	781b      	ldrb	r3, [r3, #0]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d002      	beq.n	800244c <MCP3421_ADC_Write_Config+0x40>
 8002446:	f06f 0301 	mvn.w	r3, #1
 800244a:	e003      	b.n	8002454 <MCP3421_ADC_Write_Config+0x48>

	//Return success
	HAL_Delay(100);
 800244c:	2064      	movs	r0, #100	; 0x64
 800244e:	f001 fa1b 	bl	8003888 <HAL_Delay>
	return ADC_STATUS_OK;
 8002452:	2300      	movs	r3, #0

}
 8002454:	4618      	mov	r0, r3
 8002456:	3708      	adds	r7, #8
 8002458:	46bd      	mov	sp, r7
 800245a:	bd80      	pop	{r7, pc}
 800245c:	200002b8 	.word	0x200002b8
 8002460:	200005b1 	.word	0x200005b1

08002464 <MCP3421_ADC_Read>:


//General purpose read function for the MCP3421 ADC
mcp3421_status_t MCP3421_ADC_Read( uint8_t* ReadArray, uint16_t ReadArraySize){
 8002464:	b580      	push	{r7, lr}
 8002466:	b084      	sub	sp, #16
 8002468:	af02      	add	r7, sp, #8
 800246a:	6078      	str	r0, [r7, #4]
 800246c:	460b      	mov	r3, r1
 800246e:	807b      	strh	r3, [r7, #2]

	//Check for invalid parameter conditions
	if(ReadArray==NULL || ReadArraySize==0){ return ADC_ERROR_PARAMETER; }
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d002      	beq.n	800247c <MCP3421_ADC_Read+0x18>
 8002476:	887b      	ldrh	r3, [r7, #2]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d102      	bne.n	8002482 <MCP3421_ADC_Read+0x1e>
 800247c:	f06f 0302 	mvn.w	r3, #2
 8002480:	e019      	b.n	80024b6 <MCP3421_ADC_Read+0x52>

	//Issue read data instruction to ADC and read the specified number of bytes from the ADC's memory
	hal_i2c_status = HAL_I2C_Master_Receive(&I2C_SYS, (ADC_DeviceADDR<<1)|0x01, ReadArray, ReadArraySize, 50);
 8002482:	236b      	movs	r3, #107	; 0x6b
 8002484:	005b      	lsls	r3, r3, #1
 8002486:	b21b      	sxth	r3, r3
 8002488:	f043 0301 	orr.w	r3, r3, #1
 800248c:	b21b      	sxth	r3, r3
 800248e:	b299      	uxth	r1, r3
 8002490:	887b      	ldrh	r3, [r7, #2]
 8002492:	2232      	movs	r2, #50	; 0x32
 8002494:	9200      	str	r2, [sp, #0]
 8002496:	687a      	ldr	r2, [r7, #4]
 8002498:	4809      	ldr	r0, [pc, #36]	; (80024c0 <MCP3421_ADC_Read+0x5c>)
 800249a:	f003 fbaf 	bl	8005bfc <HAL_I2C_Master_Receive>
 800249e:	4603      	mov	r3, r0
 80024a0:	461a      	mov	r2, r3
 80024a2:	4b08      	ldr	r3, [pc, #32]	; (80024c4 <MCP3421_ADC_Read+0x60>)
 80024a4:	701a      	strb	r2, [r3, #0]
	if( hal_i2c_status != HAL_OK ){	return ADC_ERROR_I2C_READ; }
 80024a6:	4b07      	ldr	r3, [pc, #28]	; (80024c4 <MCP3421_ADC_Read+0x60>)
 80024a8:	781b      	ldrb	r3, [r3, #0]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d002      	beq.n	80024b4 <MCP3421_ADC_Read+0x50>
 80024ae:	f04f 33ff 	mov.w	r3, #4294967295
 80024b2:	e000      	b.n	80024b6 <MCP3421_ADC_Read+0x52>

	//Return success
	return ADC_STATUS_OK;
 80024b4:	2300      	movs	r3, #0

}
 80024b6:	4618      	mov	r0, r3
 80024b8:	3708      	adds	r7, #8
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}
 80024be:	bf00      	nop
 80024c0:	200002b8 	.word	0x200002b8
 80024c4:	200005b1 	.word	0x200005b1

080024c8 <MCP4726A1T_VoltageOut>:
//////////////////////////////////////  High Level DAC Control Functions //////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//Set the output voltage of the DAC
//Volatile config must have gain = 1 and voltage reference = VREF or results will be unexpected
dac_status_t MCP4726A1T_VoltageOut(float VoltageOutput){
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b086      	sub	sp, #24
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	ed87 0a01 	vstr	s0, [r7, #4]

	//Check passed parameters for invalid information
	if(VoltageOutput < 0 || VoltageOutput > 2.048){ return DAC_ERROR_PARAMETER; }
 80024d2:	edd7 7a01 	vldr	s15, [r7, #4]
 80024d6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80024da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024de:	d40a      	bmi.n	80024f6 <MCP4726A1T_VoltageOut+0x2e>
 80024e0:	6878      	ldr	r0, [r7, #4]
 80024e2:	f7fe f831 	bl	8000548 <__aeabi_f2d>
 80024e6:	a31b      	add	r3, pc, #108	; (adr r3, 8002554 <MCP4726A1T_VoltageOut+0x8c>)
 80024e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024ec:	f7fe fb14 	bl	8000b18 <__aeabi_dcmpgt>
 80024f0:	4603      	mov	r3, r0
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d002      	beq.n	80024fc <MCP4726A1T_VoltageOut+0x34>
 80024f6:	f06f 0302 	mvn.w	r3, #2
 80024fa:	e025      	b.n	8002548 <MCP4726A1T_VoltageOut+0x80>

	//Local function variables
	const float VoltageReference	 = 2.048;
 80024fc:	4b14      	ldr	r3, [pc, #80]	; (8002550 <MCP4726A1T_VoltageOut+0x88>)
 80024fe:	617b      	str	r3, [r7, #20]
	const uint16_t ResistorsInLadder = 4096;
 8002500:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002504:	827b      	strh	r3, [r7, #18]
	const uint16_t Gain = 1;
 8002506:	2301      	movs	r3, #1
 8002508:	823b      	strh	r3, [r7, #16]

	//Calculate the required DAC register value
	uint16_t DAC_RegValue = (uint16_t) ( (VoltageOutput*ResistorsInLadder)/(Gain*VoltageReference) );
 800250a:	8a7b      	ldrh	r3, [r7, #18]
 800250c:	ee07 3a90 	vmov	s15, r3
 8002510:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002514:	edd7 7a01 	vldr	s15, [r7, #4]
 8002518:	ee67 6a27 	vmul.f32	s13, s14, s15
 800251c:	8a3b      	ldrh	r3, [r7, #16]
 800251e:	ee07 3a90 	vmov	s15, r3
 8002522:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002526:	edd7 7a05 	vldr	s15, [r7, #20]
 800252a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800252e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002532:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002536:	ee17 3a90 	vmov	r3, s15
 800253a:	81fb      	strh	r3, [r7, #14]

	//Write the DAC register value
	return MCP4726A1T_WriteVolatileDACRegister(PD_NO, DAC_RegValue);
 800253c:	89fb      	ldrh	r3, [r7, #14]
 800253e:	4619      	mov	r1, r3
 8002540:	2000      	movs	r0, #0
 8002542:	f000 f8d3 	bl	80026ec <MCP4726A1T_WriteVolatileDACRegister>
 8002546:	4603      	mov	r3, r0

}
 8002548:	4618      	mov	r0, r3
 800254a:	3718      	adds	r7, #24
 800254c:	46bd      	mov	sp, r7
 800254e:	bd80      	pop	{r7, pc}
 8002550:	4003126f 	.word	0x4003126f
 8002554:	d2f1a9fc 	.word	0xd2f1a9fc
 8002558:	4000624d 	.word	0x4000624d

0800255c <MCP4726A1T_WriteMemory>:
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////  Private DAC Memory Access Functions ///////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//Function to perform a generic memory write to either ALL memory or VOLATILE memory
dac_status_t MCP4726A1T_WriteMemory(uint8_t MemoryType, uint8_t VoltRefBits, uint8_t PowerDownBits, uint8_t GainBit, uint16_t DAC_Data){
 800255c:	b590      	push	{r4, r7, lr}
 800255e:	b089      	sub	sp, #36	; 0x24
 8002560:	af02      	add	r7, sp, #8
 8002562:	4604      	mov	r4, r0
 8002564:	4608      	mov	r0, r1
 8002566:	4611      	mov	r1, r2
 8002568:	461a      	mov	r2, r3
 800256a:	4623      	mov	r3, r4
 800256c:	71fb      	strb	r3, [r7, #7]
 800256e:	4603      	mov	r3, r0
 8002570:	71bb      	strb	r3, [r7, #6]
 8002572:	460b      	mov	r3, r1
 8002574:	717b      	strb	r3, [r7, #5]
 8002576:	4613      	mov	r3, r2
 8002578:	713b      	strb	r3, [r7, #4]

	//Check passed parameters for invalid information
	if(MemoryType != DAC_MEMORY_ALL && MemoryType != DAC_MEMORY_VOLATILE){ return DAC_ERROR_PARAMETER; }
 800257a:	79fb      	ldrb	r3, [r7, #7]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d005      	beq.n	800258c <MCP4726A1T_WriteMemory+0x30>
 8002580:	79fb      	ldrb	r3, [r7, #7]
 8002582:	2b01      	cmp	r3, #1
 8002584:	d002      	beq.n	800258c <MCP4726A1T_WriteMemory+0x30>
 8002586:	f06f 0302 	mvn.w	r3, #2
 800258a:	e089      	b.n	80026a0 <MCP4726A1T_WriteMemory+0x144>
	if(VoltRefBits != VDD_UNBUFF && VoltRefBits != VREF_UNBUFF && VoltRefBits != VREF_BUFF ){ return DAC_ERROR_PARAMETER; }
 800258c:	79bb      	ldrb	r3, [r7, #6]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d008      	beq.n	80025a4 <MCP4726A1T_WriteMemory+0x48>
 8002592:	79bb      	ldrb	r3, [r7, #6]
 8002594:	2b02      	cmp	r3, #2
 8002596:	d005      	beq.n	80025a4 <MCP4726A1T_WriteMemory+0x48>
 8002598:	79bb      	ldrb	r3, [r7, #6]
 800259a:	2b03      	cmp	r3, #3
 800259c:	d002      	beq.n	80025a4 <MCP4726A1T_WriteMemory+0x48>
 800259e:	f06f 0302 	mvn.w	r3, #2
 80025a2:	e07d      	b.n	80026a0 <MCP4726A1T_WriteMemory+0x144>
	if(PowerDownBits != PD_NO && PowerDownBits != PD_1K && PowerDownBits != PD_100K && PowerDownBits != PD_500K ){ return DAC_ERROR_PARAMETER; }
 80025a4:	797b      	ldrb	r3, [r7, #5]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d00b      	beq.n	80025c2 <MCP4726A1T_WriteMemory+0x66>
 80025aa:	797b      	ldrb	r3, [r7, #5]
 80025ac:	2b01      	cmp	r3, #1
 80025ae:	d008      	beq.n	80025c2 <MCP4726A1T_WriteMemory+0x66>
 80025b0:	797b      	ldrb	r3, [r7, #5]
 80025b2:	2b02      	cmp	r3, #2
 80025b4:	d005      	beq.n	80025c2 <MCP4726A1T_WriteMemory+0x66>
 80025b6:	797b      	ldrb	r3, [r7, #5]
 80025b8:	2b03      	cmp	r3, #3
 80025ba:	d002      	beq.n	80025c2 <MCP4726A1T_WriteMemory+0x66>
 80025bc:	f06f 0302 	mvn.w	r3, #2
 80025c0:	e06e      	b.n	80026a0 <MCP4726A1T_WriteMemory+0x144>
	if(GainBit != G_1X && GainBit != G_2X){ return DAC_ERROR_PARAMETER; }
 80025c2:	793b      	ldrb	r3, [r7, #4]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d005      	beq.n	80025d4 <MCP4726A1T_WriteMemory+0x78>
 80025c8:	793b      	ldrb	r3, [r7, #4]
 80025ca:	2b01      	cmp	r3, #1
 80025cc:	d002      	beq.n	80025d4 <MCP4726A1T_WriteMemory+0x78>
 80025ce:	f06f 0302 	mvn.w	r3, #2
 80025d2:	e065      	b.n	80026a0 <MCP4726A1T_WriteMemory+0x144>
	if(DAC_Data>0x0FFF){ return DAC_ERROR_PARAMETER; }
 80025d4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80025d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025da:	d302      	bcc.n	80025e2 <MCP4726A1T_WriteMemory+0x86>
 80025dc:	f06f 0302 	mvn.w	r3, #2
 80025e0:	e05e      	b.n	80026a0 <MCP4726A1T_WriteMemory+0x144>

	//Combined the I2C general call command and the device address information (shift device address by 1 for r/w bit)
	uint16_t I2C_DeviceAddress = (I2C_GeneralCall<<8) | (DeviceAddr<<1);
 80025e2:	2300      	movs	r3, #0
 80025e4:	021b      	lsls	r3, r3, #8
 80025e6:	b21a      	sxth	r2, r3
 80025e8:	2361      	movs	r3, #97	; 0x61
 80025ea:	005b      	lsls	r3, r3, #1
 80025ec:	b21b      	sxth	r3, r3
 80025ee:	4313      	orrs	r3, r2
 80025f0:	b21b      	sxth	r3, r3
 80025f2:	82bb      	strh	r3, [r7, #20]

	//Determine command
	uint8_t MemoryTypeCMD;
	if(MemoryType==0){ MemoryTypeCMD = 0x60; }		//Command for ALL memory
 80025f4:	79fb      	ldrb	r3, [r7, #7]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d102      	bne.n	8002600 <MCP4726A1T_WriteMemory+0xa4>
 80025fa:	2360      	movs	r3, #96	; 0x60
 80025fc:	75fb      	strb	r3, [r7, #23]
 80025fe:	e001      	b.n	8002604 <MCP4726A1T_WriteMemory+0xa8>
	else{ MemoryTypeCMD = 0x40;}					//Command for VOLATILE memory
 8002600:	2340      	movs	r3, #64	; 0x40
 8002602:	75fb      	strb	r3, [r7, #23]

	//Format the passed DAC data to big endian
	uint8_t DAC_Data_BigEndian[2];
	DAC_Data = DAC_Data&0x0FFF;
 8002604:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002606:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800260a:	853b      	strh	r3, [r7, #40]	; 0x28
	DAC_Data_BigEndian[0] = (uint8_t)((DAC_Data>>8)&0x00FF);
 800260c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800260e:	0a1b      	lsrs	r3, r3, #8
 8002610:	b29b      	uxth	r3, r3
 8002612:	b2db      	uxtb	r3, r3
 8002614:	743b      	strb	r3, [r7, #16]
	DAC_Data_BigEndian[1] = (uint8_t)(DAC_Data&0x00FF);
 8002616:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002618:	b2db      	uxtb	r3, r3
 800261a:	747b      	strb	r3, [r7, #17]

	//Create a data payload containing the write data
	uint8_t WriteBuffer[3];
	WriteBuffer[0] = MemoryTypeCMD | (VoltRefBits&0x03)<<3 | (PowerDownBits&0x03)<<1 | (0x01&GainBit);
 800261c:	79bb      	ldrb	r3, [r7, #6]
 800261e:	00db      	lsls	r3, r3, #3
 8002620:	b25b      	sxtb	r3, r3
 8002622:	f003 0318 	and.w	r3, r3, #24
 8002626:	b25a      	sxtb	r2, r3
 8002628:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800262c:	4313      	orrs	r3, r2
 800262e:	b25a      	sxtb	r2, r3
 8002630:	797b      	ldrb	r3, [r7, #5]
 8002632:	005b      	lsls	r3, r3, #1
 8002634:	b25b      	sxtb	r3, r3
 8002636:	f003 0306 	and.w	r3, r3, #6
 800263a:	b25b      	sxtb	r3, r3
 800263c:	4313      	orrs	r3, r2
 800263e:	b25a      	sxtb	r2, r3
 8002640:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8002644:	f003 0301 	and.w	r3, r3, #1
 8002648:	b25b      	sxtb	r3, r3
 800264a:	4313      	orrs	r3, r2
 800264c:	b25b      	sxtb	r3, r3
 800264e:	b2db      	uxtb	r3, r3
 8002650:	733b      	strb	r3, [r7, #12]
	WriteBuffer[1] = ((DAC_Data_BigEndian[0]<<4)&0xF0) | ((DAC_Data_BigEndian[1]>>4)&0x0F);
 8002652:	7c3b      	ldrb	r3, [r7, #16]
 8002654:	011b      	lsls	r3, r3, #4
 8002656:	b25a      	sxtb	r2, r3
 8002658:	7c7b      	ldrb	r3, [r7, #17]
 800265a:	091b      	lsrs	r3, r3, #4
 800265c:	b2db      	uxtb	r3, r3
 800265e:	b25b      	sxtb	r3, r3
 8002660:	4313      	orrs	r3, r2
 8002662:	b25b      	sxtb	r3, r3
 8002664:	b2db      	uxtb	r3, r3
 8002666:	737b      	strb	r3, [r7, #13]
	WriteBuffer[2] = ((DAC_Data_BigEndian[1]<<4)&0xF0);
 8002668:	7c7b      	ldrb	r3, [r7, #17]
 800266a:	011b      	lsls	r3, r3, #4
 800266c:	b2db      	uxtb	r3, r3
 800266e:	73bb      	strb	r3, [r7, #14]

	//Write the buffer data to the DAC IC
	hal_i2c_status = HAL_I2C_Master_Transmit(&I2C_SYS, I2C_DeviceAddress, WriteBuffer, 3, 100);
 8002670:	f107 020c 	add.w	r2, r7, #12
 8002674:	8ab9      	ldrh	r1, [r7, #20]
 8002676:	2364      	movs	r3, #100	; 0x64
 8002678:	9300      	str	r3, [sp, #0]
 800267a:	2303      	movs	r3, #3
 800267c:	480a      	ldr	r0, [pc, #40]	; (80026a8 <MCP4726A1T_WriteMemory+0x14c>)
 800267e:	f003 f9c9 	bl	8005a14 <HAL_I2C_Master_Transmit>
 8002682:	4603      	mov	r3, r0
 8002684:	461a      	mov	r2, r3
 8002686:	4b09      	ldr	r3, [pc, #36]	; (80026ac <MCP4726A1T_WriteMemory+0x150>)
 8002688:	701a      	strb	r2, [r3, #0]
	if( hal_i2c_status != HAL_OK ){ return DAC_ERROR_I2C_WRITE; }
 800268a:	4b08      	ldr	r3, [pc, #32]	; (80026ac <MCP4726A1T_WriteMemory+0x150>)
 800268c:	781b      	ldrb	r3, [r3, #0]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d002      	beq.n	8002698 <MCP4726A1T_WriteMemory+0x13c>
 8002692:	f06f 0301 	mvn.w	r3, #1
 8002696:	e003      	b.n	80026a0 <MCP4726A1T_WriteMemory+0x144>

	//Wait 50ms for max EEPROM programming time
	HAL_Delay(50);
 8002698:	2032      	movs	r0, #50	; 0x32
 800269a:	f001 f8f5 	bl	8003888 <HAL_Delay>

	//Return success code
	return DAC_STATUS_OK;
 800269e:	2300      	movs	r3, #0

}
 80026a0:	4618      	mov	r0, r3
 80026a2:	371c      	adds	r7, #28
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd90      	pop	{r4, r7, pc}
 80026a8:	200002b8 	.word	0x200002b8
 80026ac:	200005b2 	.word	0x200005b2

080026b0 <MCP4726A1T_WriteAllMemory>:
	return MCP4726A1T_WriteMemory( DAC_MEMORY_VOLATILE, VoltRefBits, PowerDownBits, GainBit, DAC_Data);

}

//Function to perform a write all memory operation
dac_status_t MCP4726A1T_WriteAllMemory(uint8_t VoltRefBits, uint8_t PowerDownBits, uint8_t GainBit, uint16_t DAC_Data){
 80026b0:	b590      	push	{r4, r7, lr}
 80026b2:	b085      	sub	sp, #20
 80026b4:	af02      	add	r7, sp, #8
 80026b6:	4604      	mov	r4, r0
 80026b8:	4608      	mov	r0, r1
 80026ba:	4611      	mov	r1, r2
 80026bc:	461a      	mov	r2, r3
 80026be:	4623      	mov	r3, r4
 80026c0:	71fb      	strb	r3, [r7, #7]
 80026c2:	4603      	mov	r3, r0
 80026c4:	71bb      	strb	r3, [r7, #6]
 80026c6:	460b      	mov	r3, r1
 80026c8:	717b      	strb	r3, [r7, #5]
 80026ca:	4613      	mov	r3, r2
 80026cc:	807b      	strh	r3, [r7, #2]

	return MCP4726A1T_WriteMemory( DAC_MEMORY_ALL, VoltRefBits, PowerDownBits, GainBit, DAC_Data);
 80026ce:	7978      	ldrb	r0, [r7, #5]
 80026d0:	79ba      	ldrb	r2, [r7, #6]
 80026d2:	79f9      	ldrb	r1, [r7, #7]
 80026d4:	887b      	ldrh	r3, [r7, #2]
 80026d6:	9300      	str	r3, [sp, #0]
 80026d8:	4603      	mov	r3, r0
 80026da:	2000      	movs	r0, #0
 80026dc:	f7ff ff3e 	bl	800255c <MCP4726A1T_WriteMemory>
 80026e0:	4603      	mov	r3, r0

}
 80026e2:	4618      	mov	r0, r3
 80026e4:	370c      	adds	r7, #12
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd90      	pop	{r4, r7, pc}
	...

080026ec <MCP4726A1T_WriteVolatileDACRegister>:



//Function to perform a volatile DAC data register write
dac_status_t MCP4726A1T_WriteVolatileDACRegister(uint8_t PowerDownBits, uint16_t DAC_Data){
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b086      	sub	sp, #24
 80026f0:	af02      	add	r7, sp, #8
 80026f2:	4603      	mov	r3, r0
 80026f4:	460a      	mov	r2, r1
 80026f6:	71fb      	strb	r3, [r7, #7]
 80026f8:	4613      	mov	r3, r2
 80026fa:	80bb      	strh	r3, [r7, #4]

	//Check passed parameters for invalid information
	if(PowerDownBits != PD_NO && PowerDownBits != PD_1K && PowerDownBits != PD_100K && PowerDownBits != PD_500K ){ return DAC_ERROR_PARAMETER; }
 80026fc:	79fb      	ldrb	r3, [r7, #7]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d00b      	beq.n	800271a <MCP4726A1T_WriteVolatileDACRegister+0x2e>
 8002702:	79fb      	ldrb	r3, [r7, #7]
 8002704:	2b01      	cmp	r3, #1
 8002706:	d008      	beq.n	800271a <MCP4726A1T_WriteVolatileDACRegister+0x2e>
 8002708:	79fb      	ldrb	r3, [r7, #7]
 800270a:	2b02      	cmp	r3, #2
 800270c:	d005      	beq.n	800271a <MCP4726A1T_WriteVolatileDACRegister+0x2e>
 800270e:	79fb      	ldrb	r3, [r7, #7]
 8002710:	2b03      	cmp	r3, #3
 8002712:	d002      	beq.n	800271a <MCP4726A1T_WriteVolatileDACRegister+0x2e>
 8002714:	f06f 0302 	mvn.w	r3, #2
 8002718:	e044      	b.n	80027a4 <MCP4726A1T_WriteVolatileDACRegister+0xb8>
	if(DAC_Data>0x0FFF){ return DAC_ERROR_PARAMETER; }
 800271a:	88bb      	ldrh	r3, [r7, #4]
 800271c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002720:	d302      	bcc.n	8002728 <MCP4726A1T_WriteVolatileDACRegister+0x3c>
 8002722:	f06f 0302 	mvn.w	r3, #2
 8002726:	e03d      	b.n	80027a4 <MCP4726A1T_WriteVolatileDACRegister+0xb8>

	//Combined the I2C general call command and the device address information (shift device address by 1 for r/w bit)
	uint16_t I2C_DeviceAddress = (I2C_GeneralCall<<8) | (DeviceAddr<<1);
 8002728:	2300      	movs	r3, #0
 800272a:	021b      	lsls	r3, r3, #8
 800272c:	b21a      	sxth	r2, r3
 800272e:	2361      	movs	r3, #97	; 0x61
 8002730:	005b      	lsls	r3, r3, #1
 8002732:	b21b      	sxth	r3, r3
 8002734:	4313      	orrs	r3, r2
 8002736:	b21b      	sxth	r3, r3
 8002738:	81fb      	strh	r3, [r7, #14]

	//Format the passed DAC data to big endian
	uint8_t DAC_Data_BigEndian[2];
	DAC_Data = DAC_Data&0x0FFF;
 800273a:	88bb      	ldrh	r3, [r7, #4]
 800273c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002740:	80bb      	strh	r3, [r7, #4]
	DAC_Data_BigEndian[0] = (uint8_t)((DAC_Data>>8)&0x00FF);
 8002742:	88bb      	ldrh	r3, [r7, #4]
 8002744:	0a1b      	lsrs	r3, r3, #8
 8002746:	b29b      	uxth	r3, r3
 8002748:	b2db      	uxtb	r3, r3
 800274a:	733b      	strb	r3, [r7, #12]
	DAC_Data_BigEndian[1] = (uint8_t)(DAC_Data&0x00FF);
 800274c:	88bb      	ldrh	r3, [r7, #4]
 800274e:	b2db      	uxtb	r3, r3
 8002750:	737b      	strb	r3, [r7, #13]

	//Create a data payload containing the write data
	uint8_t WriteBuffer[2];
	WriteBuffer[0] = 0x00 | (PowerDownBits&0x03)<<4 | (DAC_Data_BigEndian[0]&0x0F);
 8002752:	79fb      	ldrb	r3, [r7, #7]
 8002754:	011b      	lsls	r3, r3, #4
 8002756:	b25b      	sxtb	r3, r3
 8002758:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800275c:	b25a      	sxtb	r2, r3
 800275e:	7b3b      	ldrb	r3, [r7, #12]
 8002760:	b25b      	sxtb	r3, r3
 8002762:	f003 030f 	and.w	r3, r3, #15
 8002766:	b25b      	sxtb	r3, r3
 8002768:	4313      	orrs	r3, r2
 800276a:	b25b      	sxtb	r3, r3
 800276c:	b2db      	uxtb	r3, r3
 800276e:	723b      	strb	r3, [r7, #8]
	WriteBuffer[1] = DAC_Data_BigEndian[1];
 8002770:	7b7b      	ldrb	r3, [r7, #13]
 8002772:	727b      	strb	r3, [r7, #9]

	//Write the buffer data to the DAC IC
	hal_i2c_status = HAL_I2C_Master_Transmit(&I2C_SYS, I2C_DeviceAddress, WriteBuffer, 2, 100);
 8002774:	f107 0208 	add.w	r2, r7, #8
 8002778:	89f9      	ldrh	r1, [r7, #14]
 800277a:	2364      	movs	r3, #100	; 0x64
 800277c:	9300      	str	r3, [sp, #0]
 800277e:	2302      	movs	r3, #2
 8002780:	480a      	ldr	r0, [pc, #40]	; (80027ac <MCP4726A1T_WriteVolatileDACRegister+0xc0>)
 8002782:	f003 f947 	bl	8005a14 <HAL_I2C_Master_Transmit>
 8002786:	4603      	mov	r3, r0
 8002788:	461a      	mov	r2, r3
 800278a:	4b09      	ldr	r3, [pc, #36]	; (80027b0 <MCP4726A1T_WriteVolatileDACRegister+0xc4>)
 800278c:	701a      	strb	r2, [r3, #0]
	if( hal_i2c_status != HAL_OK ){	return DAC_ERROR_I2C_WRITE;	}
 800278e:	4b08      	ldr	r3, [pc, #32]	; (80027b0 <MCP4726A1T_WriteVolatileDACRegister+0xc4>)
 8002790:	781b      	ldrb	r3, [r3, #0]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d002      	beq.n	800279c <MCP4726A1T_WriteVolatileDACRegister+0xb0>
 8002796:	f06f 0301 	mvn.w	r3, #1
 800279a:	e003      	b.n	80027a4 <MCP4726A1T_WriteVolatileDACRegister+0xb8>

	//Wait 50ms for max EEPROM programming time
	HAL_Delay(50);
 800279c:	2032      	movs	r0, #50	; 0x32
 800279e:	f001 f873 	bl	8003888 <HAL_Delay>

	//Return success code
	return DAC_STATUS_OK;
 80027a2:	2300      	movs	r3, #0

}
 80027a4:	4618      	mov	r0, r3
 80027a6:	3710      	adds	r7, #16
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}
 80027ac:	200002b8 	.word	0x200002b8
 80027b0:	200005b2 	.word	0x200005b2

080027b4 <MCP4726A1T_ReadAllMemory>:
}


//Function to read data from eeprom and volatile DAC memory
//Read array must be 6 bytes in length
dac_status_t MCP4726A1T_ReadAllMemory(uint8_t* ReadArray){
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b086      	sub	sp, #24
 80027b8:	af02      	add	r7, sp, #8
 80027ba:	6078      	str	r0, [r7, #4]

	//Check passed parameters for invalid information
	if(ReadArray == NULL ){ return DAC_ERROR_PARAMETER; }
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d102      	bne.n	80027c8 <MCP4726A1T_ReadAllMemory+0x14>
 80027c2:	f06f 0302 	mvn.w	r3, #2
 80027c6:	e01f      	b.n	8002808 <MCP4726A1T_ReadAllMemory+0x54>

	//Combined the I2C general call command and the device address information (shift device address by 1 for r/w bit)
	uint16_t I2C_DeviceAddress = (I2C_GeneralCall<<8) | (DeviceAddr<<1);
 80027c8:	2300      	movs	r3, #0
 80027ca:	021b      	lsls	r3, r3, #8
 80027cc:	b21a      	sxth	r2, r3
 80027ce:	2361      	movs	r3, #97	; 0x61
 80027d0:	005b      	lsls	r3, r3, #1
 80027d2:	b21b      	sxth	r3, r3
 80027d4:	4313      	orrs	r3, r2
 80027d6:	b21b      	sxth	r3, r3
 80027d8:	81fb      	strh	r3, [r7, #14]

	//Issue the read command to the DAC and receive the data from memory
	hal_i2c_status = HAL_I2C_Master_Receive(&I2C_SYS, I2C_DeviceAddress|0x01, ReadArray, 6, 100);
 80027da:	89fb      	ldrh	r3, [r7, #14]
 80027dc:	f043 0301 	orr.w	r3, r3, #1
 80027e0:	b299      	uxth	r1, r3
 80027e2:	2364      	movs	r3, #100	; 0x64
 80027e4:	9300      	str	r3, [sp, #0]
 80027e6:	2306      	movs	r3, #6
 80027e8:	687a      	ldr	r2, [r7, #4]
 80027ea:	4809      	ldr	r0, [pc, #36]	; (8002810 <MCP4726A1T_ReadAllMemory+0x5c>)
 80027ec:	f003 fa06 	bl	8005bfc <HAL_I2C_Master_Receive>
 80027f0:	4603      	mov	r3, r0
 80027f2:	461a      	mov	r2, r3
 80027f4:	4b07      	ldr	r3, [pc, #28]	; (8002814 <MCP4726A1T_ReadAllMemory+0x60>)
 80027f6:	701a      	strb	r2, [r3, #0]
	if( hal_i2c_status != HAL_OK ){ return DAC_ERROR_I2C_READ; }
 80027f8:	4b06      	ldr	r3, [pc, #24]	; (8002814 <MCP4726A1T_ReadAllMemory+0x60>)
 80027fa:	781b      	ldrb	r3, [r3, #0]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d002      	beq.n	8002806 <MCP4726A1T_ReadAllMemory+0x52>
 8002800:	f04f 33ff 	mov.w	r3, #4294967295
 8002804:	e000      	b.n	8002808 <MCP4726A1T_ReadAllMemory+0x54>

	//Return success code
	return DAC_STATUS_OK;
 8002806:	2300      	movs	r3, #0

}
 8002808:	4618      	mov	r0, r3
 800280a:	3710      	adds	r7, #16
 800280c:	46bd      	mov	sp, r7
 800280e:	bd80      	pop	{r7, pc}
 8002810:	200002b8 	.word	0x200002b8
 8002814:	200005b2 	.word	0x200005b2

08002818 <CANSetup>:
////////////////////////////////////////    CANBus System Setup and Activation Function ///////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


//Setup for transmitting CANbus
void CANSetup(uint16_t CANBusID){
 8002818:	b580      	push	{r7, lr}
 800281a:	b082      	sub	sp, #8
 800281c:	af00      	add	r7, sp, #0
 800281e:	4603      	mov	r3, r0
 8002820:	80fb      	strh	r3, [r7, #6]

	//Setup transmit header 0 CAN headers
	pTxHeader.StdId = 0x0400;				 	 // 11 bit ID
 8002822:	4ba8      	ldr	r3, [pc, #672]	; (8002ac4 <CANSetup+0x2ac>)
 8002824:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002828:	601a      	str	r2, [r3, #0]
	pTxHeader.DLC	= 8;						 // Specifies that 8 bytes will be transmitted per message
 800282a:	4ba6      	ldr	r3, [pc, #664]	; (8002ac4 <CANSetup+0x2ac>)
 800282c:	2208      	movs	r2, #8
 800282e:	611a      	str	r2, [r3, #16]
	pTxHeader.IDE 	= CAN_ID_STD; 			     // Specifies standard ID (11-bit ID)
 8002830:	4ba4      	ldr	r3, [pc, #656]	; (8002ac4 <CANSetup+0x2ac>)
 8002832:	2200      	movs	r2, #0
 8002834:	609a      	str	r2, [r3, #8]
	pTxHeader.RTR 	= CAN_RTR_DATA; 			 // Specifies data type as "Data Frame"
 8002836:	4ba3      	ldr	r3, [pc, #652]	; (8002ac4 <CANSetup+0x2ac>)
 8002838:	2200      	movs	r2, #0
 800283a:	60da      	str	r2, [r3, #12]

	//Setup for CAN filter 0 - Used for FIFO0
	sFilterConfig0.FilterBank  		 	= 0;
 800283c:	4ba2      	ldr	r3, [pc, #648]	; (8002ac8 <CANSetup+0x2b0>)
 800283e:	2200      	movs	r2, #0
 8002840:	615a      	str	r2, [r3, #20]
	sFilterConfig0.FilterMode   		= CAN_FILTERMODE_IDLIST;
 8002842:	4ba1      	ldr	r3, [pc, #644]	; (8002ac8 <CANSetup+0x2b0>)
 8002844:	2201      	movs	r2, #1
 8002846:	619a      	str	r2, [r3, #24]
	sFilterConfig0.FilterScale  		= CAN_FILTERSCALE_16BIT;
 8002848:	4b9f      	ldr	r3, [pc, #636]	; (8002ac8 <CANSetup+0x2b0>)
 800284a:	2200      	movs	r2, #0
 800284c:	61da      	str	r2, [r3, #28]
	sFilterConfig0.FilterIdHigh			= (CANBusID&0x01FF)<<5;
 800284e:	88fb      	ldrh	r3, [r7, #6]
 8002850:	015b      	lsls	r3, r3, #5
 8002852:	461a      	mov	r2, r3
 8002854:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8002858:	4013      	ands	r3, r2
 800285a:	4a9b      	ldr	r2, [pc, #620]	; (8002ac8 <CANSetup+0x2b0>)
 800285c:	6013      	str	r3, [r2, #0]
	sFilterConfig0.FilterIdLow  		= (0x0000)<<5;
 800285e:	4b9a      	ldr	r3, [pc, #616]	; (8002ac8 <CANSetup+0x2b0>)
 8002860:	2200      	movs	r2, #0
 8002862:	605a      	str	r2, [r3, #4]
	sFilterConfig0.FilterMaskIdHigh 	= (0x0000)<<5;
 8002864:	4b98      	ldr	r3, [pc, #608]	; (8002ac8 <CANSetup+0x2b0>)
 8002866:	2200      	movs	r2, #0
 8002868:	609a      	str	r2, [r3, #8]
	sFilterConfig0.FilterMaskIdLow 		= (0x0000)<<5;
 800286a:	4b97      	ldr	r3, [pc, #604]	; (8002ac8 <CANSetup+0x2b0>)
 800286c:	2200      	movs	r2, #0
 800286e:	60da      	str	r2, [r3, #12]
	sFilterConfig0.FilterFIFOAssignment = CAN_RX_FIFO0;
 8002870:	4b95      	ldr	r3, [pc, #596]	; (8002ac8 <CANSetup+0x2b0>)
 8002872:	2200      	movs	r2, #0
 8002874:	611a      	str	r2, [r3, #16]
	sFilterConfig0.FilterActivation 	= ENABLE;
 8002876:	4b94      	ldr	r3, [pc, #592]	; (8002ac8 <CANSetup+0x2b0>)
 8002878:	2201      	movs	r2, #1
 800287a:	621a      	str	r2, [r3, #32]

	//Setup for CAN filter 1 - Used for FIFO1
	sFilterConfig1.FilterBank 			= 1;
 800287c:	4b93      	ldr	r3, [pc, #588]	; (8002acc <CANSetup+0x2b4>)
 800287e:	2201      	movs	r2, #1
 8002880:	615a      	str	r2, [r3, #20]
	sFilterConfig1.FilterMode 			= CAN_FILTERMODE_IDLIST;
 8002882:	4b92      	ldr	r3, [pc, #584]	; (8002acc <CANSetup+0x2b4>)
 8002884:	2201      	movs	r2, #1
 8002886:	619a      	str	r2, [r3, #24]
	sFilterConfig1.FilterScale 			= CAN_FILTERSCALE_16BIT;
 8002888:	4b90      	ldr	r3, [pc, #576]	; (8002acc <CANSetup+0x2b4>)
 800288a:	2200      	movs	r2, #0
 800288c:	61da      	str	r2, [r3, #28]
	sFilterConfig1.FilterIdHigh			= ((CANBusID&0x01FF)|0x0200)<<5;
 800288e:	88fb      	ldrh	r3, [r7, #6]
 8002890:	015a      	lsls	r2, r3, #5
 8002892:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8002896:	4013      	ands	r3, r2
 8002898:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800289c:	461a      	mov	r2, r3
 800289e:	4b8b      	ldr	r3, [pc, #556]	; (8002acc <CANSetup+0x2b4>)
 80028a0:	601a      	str	r2, [r3, #0]
	sFilterConfig1.FilterIdLow 			= (0x0200)<<5;
 80028a2:	4b8a      	ldr	r3, [pc, #552]	; (8002acc <CANSetup+0x2b4>)
 80028a4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80028a8:	605a      	str	r2, [r3, #4]
	sFilterConfig1.FilterMaskIdHigh     = (0x0200)<<5;
 80028aa:	4b88      	ldr	r3, [pc, #544]	; (8002acc <CANSetup+0x2b4>)
 80028ac:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80028b0:	609a      	str	r2, [r3, #8]
	sFilterConfig1.FilterMaskIdLow 	    = (0x0200)<<5;
 80028b2:	4b86      	ldr	r3, [pc, #536]	; (8002acc <CANSetup+0x2b4>)
 80028b4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80028b8:	60da      	str	r2, [r3, #12]
	sFilterConfig1.FilterFIFOAssignment = CAN_RX_FIFO1;
 80028ba:	4b84      	ldr	r3, [pc, #528]	; (8002acc <CANSetup+0x2b4>)
 80028bc:	2201      	movs	r2, #1
 80028be:	611a      	str	r2, [r3, #16]
	sFilterConfig1.FilterActivation 	= ENABLE;
 80028c0:	4b82      	ldr	r3, [pc, #520]	; (8002acc <CANSetup+0x2b4>)
 80028c2:	2201      	movs	r2, #1
 80028c4:	621a      	str	r2, [r3, #32]


	//Print CANBus Initialization message
    memset(PrintBuffer, '\0', COMM_SIZE);  snprintf(PrintBuffer, COMM_SIZE-1, "\n\n\rCANBus Initialization Sequence:" );
 80028c6:	2280      	movs	r2, #128	; 0x80
 80028c8:	2100      	movs	r1, #0
 80028ca:	4881      	ldr	r0, [pc, #516]	; (8002ad0 <CANSetup+0x2b8>)
 80028cc:	f007 fa87 	bl	8009dde <memset>
 80028d0:	4a80      	ldr	r2, [pc, #512]	; (8002ad4 <CANSetup+0x2bc>)
 80028d2:	217f      	movs	r1, #127	; 0x7f
 80028d4:	487e      	ldr	r0, [pc, #504]	; (8002ad0 <CANSetup+0x2b8>)
 80028d6:	f007 f9eb 	bl	8009cb0 <sniprintf>
  	DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE);
 80028da:	4b7f      	ldr	r3, [pc, #508]	; (8002ad8 <CANSetup+0x2c0>)
 80028dc:	781b      	ldrb	r3, [r3, #0]
 80028de:	2280      	movs	r2, #128	; 0x80
 80028e0:	497b      	ldr	r1, [pc, #492]	; (8002ad0 <CANSetup+0x2b8>)
 80028e2:	4618      	mov	r0, r3
 80028e4:	f7fe fc24 	bl	8001130 <DebugPrint>


	//Init Config Filter 0
	ret=HAL_CAN_ConfigFilter(&CANBUS_EXT, &sFilterConfig0);
 80028e8:	4977      	ldr	r1, [pc, #476]	; (8002ac8 <CANSetup+0x2b0>)
 80028ea:	487c      	ldr	r0, [pc, #496]	; (8002adc <CANSetup+0x2c4>)
 80028ec:	f002 f9bb 	bl	8004c66 <HAL_CAN_ConfigFilter>
 80028f0:	4603      	mov	r3, r0
 80028f2:	461a      	mov	r2, r3
 80028f4:	4b7a      	ldr	r3, [pc, #488]	; (8002ae0 <CANSetup+0x2c8>)
 80028f6:	701a      	strb	r2, [r3, #0]
	if( ret != HAL_OK ) {
 80028f8:	4b79      	ldr	r3, [pc, #484]	; (8002ae0 <CANSetup+0x2c8>)
 80028fa:	781b      	ldrb	r3, [r3, #0]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d011      	beq.n	8002924 <CANSetup+0x10c>
	    memset(PrintBuffer, '\0', COMM_SIZE);  snprintf(PrintBuffer, COMM_SIZE-1, "\n\r    - CAN ERROR - Config filter 0 failed to be set" );
 8002900:	2280      	movs	r2, #128	; 0x80
 8002902:	2100      	movs	r1, #0
 8002904:	4872      	ldr	r0, [pc, #456]	; (8002ad0 <CANSetup+0x2b8>)
 8002906:	f007 fa6a 	bl	8009dde <memset>
 800290a:	4a76      	ldr	r2, [pc, #472]	; (8002ae4 <CANSetup+0x2cc>)
 800290c:	217f      	movs	r1, #127	; 0x7f
 800290e:	4870      	ldr	r0, [pc, #448]	; (8002ad0 <CANSetup+0x2b8>)
 8002910:	f007 f9ce 	bl	8009cb0 <sniprintf>
	  	DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE);
 8002914:	4b70      	ldr	r3, [pc, #448]	; (8002ad8 <CANSetup+0x2c0>)
 8002916:	781b      	ldrb	r3, [r3, #0]
 8002918:	2280      	movs	r2, #128	; 0x80
 800291a:	496d      	ldr	r1, [pc, #436]	; (8002ad0 <CANSetup+0x2b8>)
 800291c:	4618      	mov	r0, r3
 800291e:	f7fe fc07 	bl	8001130 <DebugPrint>
 8002922:	e010      	b.n	8002946 <CANSetup+0x12e>
	}else {
		memset(PrintBuffer, '\0', COMM_SIZE);  snprintf(PrintBuffer, COMM_SIZE-1, "\n\r    - Config Filter 0 Set" );
 8002924:	2280      	movs	r2, #128	; 0x80
 8002926:	2100      	movs	r1, #0
 8002928:	4869      	ldr	r0, [pc, #420]	; (8002ad0 <CANSetup+0x2b8>)
 800292a:	f007 fa58 	bl	8009dde <memset>
 800292e:	4a6e      	ldr	r2, [pc, #440]	; (8002ae8 <CANSetup+0x2d0>)
 8002930:	217f      	movs	r1, #127	; 0x7f
 8002932:	4867      	ldr	r0, [pc, #412]	; (8002ad0 <CANSetup+0x2b8>)
 8002934:	f007 f9bc 	bl	8009cb0 <sniprintf>
		DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE);
 8002938:	4b67      	ldr	r3, [pc, #412]	; (8002ad8 <CANSetup+0x2c0>)
 800293a:	781b      	ldrb	r3, [r3, #0]
 800293c:	2280      	movs	r2, #128	; 0x80
 800293e:	4964      	ldr	r1, [pc, #400]	; (8002ad0 <CANSetup+0x2b8>)
 8002940:	4618      	mov	r0, r3
 8002942:	f7fe fbf5 	bl	8001130 <DebugPrint>
	}

	//Init Config Filter 1
	ret=HAL_CAN_ConfigFilter(&CANBUS_EXT, &sFilterConfig1);
 8002946:	4961      	ldr	r1, [pc, #388]	; (8002acc <CANSetup+0x2b4>)
 8002948:	4864      	ldr	r0, [pc, #400]	; (8002adc <CANSetup+0x2c4>)
 800294a:	f002 f98c 	bl	8004c66 <HAL_CAN_ConfigFilter>
 800294e:	4603      	mov	r3, r0
 8002950:	461a      	mov	r2, r3
 8002952:	4b63      	ldr	r3, [pc, #396]	; (8002ae0 <CANSetup+0x2c8>)
 8002954:	701a      	strb	r2, [r3, #0]
	if( ret != HAL_OK ) {
 8002956:	4b62      	ldr	r3, [pc, #392]	; (8002ae0 <CANSetup+0x2c8>)
 8002958:	781b      	ldrb	r3, [r3, #0]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d011      	beq.n	8002982 <CANSetup+0x16a>
	    memset(PrintBuffer, '\0', COMM_SIZE);  snprintf(PrintBuffer, COMM_SIZE-1, "\n\r    - CAN ERROR - Config Filter 1 Failed" );
 800295e:	2280      	movs	r2, #128	; 0x80
 8002960:	2100      	movs	r1, #0
 8002962:	485b      	ldr	r0, [pc, #364]	; (8002ad0 <CANSetup+0x2b8>)
 8002964:	f007 fa3b 	bl	8009dde <memset>
 8002968:	4a60      	ldr	r2, [pc, #384]	; (8002aec <CANSetup+0x2d4>)
 800296a:	217f      	movs	r1, #127	; 0x7f
 800296c:	4858      	ldr	r0, [pc, #352]	; (8002ad0 <CANSetup+0x2b8>)
 800296e:	f007 f99f 	bl	8009cb0 <sniprintf>
	  	DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE);
 8002972:	4b59      	ldr	r3, [pc, #356]	; (8002ad8 <CANSetup+0x2c0>)
 8002974:	781b      	ldrb	r3, [r3, #0]
 8002976:	2280      	movs	r2, #128	; 0x80
 8002978:	4955      	ldr	r1, [pc, #340]	; (8002ad0 <CANSetup+0x2b8>)
 800297a:	4618      	mov	r0, r3
 800297c:	f7fe fbd8 	bl	8001130 <DebugPrint>
 8002980:	e010      	b.n	80029a4 <CANSetup+0x18c>
	}else {
		memset(PrintBuffer, '\0', COMM_SIZE);  snprintf(PrintBuffer, COMM_SIZE-1, "\n\r    - Config Filter 1 Set" );
 8002982:	2280      	movs	r2, #128	; 0x80
 8002984:	2100      	movs	r1, #0
 8002986:	4852      	ldr	r0, [pc, #328]	; (8002ad0 <CANSetup+0x2b8>)
 8002988:	f007 fa29 	bl	8009dde <memset>
 800298c:	4a58      	ldr	r2, [pc, #352]	; (8002af0 <CANSetup+0x2d8>)
 800298e:	217f      	movs	r1, #127	; 0x7f
 8002990:	484f      	ldr	r0, [pc, #316]	; (8002ad0 <CANSetup+0x2b8>)
 8002992:	f007 f98d 	bl	8009cb0 <sniprintf>
		DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE);
 8002996:	4b50      	ldr	r3, [pc, #320]	; (8002ad8 <CANSetup+0x2c0>)
 8002998:	781b      	ldrb	r3, [r3, #0]
 800299a:	2280      	movs	r2, #128	; 0x80
 800299c:	494c      	ldr	r1, [pc, #304]	; (8002ad0 <CANSetup+0x2b8>)
 800299e:	4618      	mov	r0, r3
 80029a0:	f7fe fbc6 	bl	8001130 <DebugPrint>
	}

	//Start Notifications on Receive for FIFO0
	ret=HAL_CAN_ActivateNotification(&CANBUS_EXT, CAN_IT_RX_FIFO0_MSG_PENDING);
 80029a4:	2102      	movs	r1, #2
 80029a6:	484d      	ldr	r0, [pc, #308]	; (8002adc <CANSetup+0x2c4>)
 80029a8:	f002 fc85 	bl	80052b6 <HAL_CAN_ActivateNotification>
 80029ac:	4603      	mov	r3, r0
 80029ae:	461a      	mov	r2, r3
 80029b0:	4b4b      	ldr	r3, [pc, #300]	; (8002ae0 <CANSetup+0x2c8>)
 80029b2:	701a      	strb	r2, [r3, #0]
	if ( ret != HAL_OK ) {
 80029b4:	4b4a      	ldr	r3, [pc, #296]	; (8002ae0 <CANSetup+0x2c8>)
 80029b6:	781b      	ldrb	r3, [r3, #0]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d011      	beq.n	80029e0 <CANSetup+0x1c8>
		memset(PrintBuffer, '\0', COMM_SIZE);  snprintf(PrintBuffer, COMM_SIZE-1, "\n\r    - CAN ERROR - Activate FIFO0 Notification Failed"  );
 80029bc:	2280      	movs	r2, #128	; 0x80
 80029be:	2100      	movs	r1, #0
 80029c0:	4843      	ldr	r0, [pc, #268]	; (8002ad0 <CANSetup+0x2b8>)
 80029c2:	f007 fa0c 	bl	8009dde <memset>
 80029c6:	4a4b      	ldr	r2, [pc, #300]	; (8002af4 <CANSetup+0x2dc>)
 80029c8:	217f      	movs	r1, #127	; 0x7f
 80029ca:	4841      	ldr	r0, [pc, #260]	; (8002ad0 <CANSetup+0x2b8>)
 80029cc:	f007 f970 	bl	8009cb0 <sniprintf>
		DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE);
 80029d0:	4b41      	ldr	r3, [pc, #260]	; (8002ad8 <CANSetup+0x2c0>)
 80029d2:	781b      	ldrb	r3, [r3, #0]
 80029d4:	2280      	movs	r2, #128	; 0x80
 80029d6:	493e      	ldr	r1, [pc, #248]	; (8002ad0 <CANSetup+0x2b8>)
 80029d8:	4618      	mov	r0, r3
 80029da:	f7fe fba9 	bl	8001130 <DebugPrint>
 80029de:	e010      	b.n	8002a02 <CANSetup+0x1ea>
	}else{
		memset(PrintBuffer, '\0', COMM_SIZE);  snprintf(PrintBuffer, COMM_SIZE-1, "\n\r    - Notification on FIFO0 Receive Started" );
 80029e0:	2280      	movs	r2, #128	; 0x80
 80029e2:	2100      	movs	r1, #0
 80029e4:	483a      	ldr	r0, [pc, #232]	; (8002ad0 <CANSetup+0x2b8>)
 80029e6:	f007 f9fa 	bl	8009dde <memset>
 80029ea:	4a43      	ldr	r2, [pc, #268]	; (8002af8 <CANSetup+0x2e0>)
 80029ec:	217f      	movs	r1, #127	; 0x7f
 80029ee:	4838      	ldr	r0, [pc, #224]	; (8002ad0 <CANSetup+0x2b8>)
 80029f0:	f007 f95e 	bl	8009cb0 <sniprintf>
		DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE);
 80029f4:	4b38      	ldr	r3, [pc, #224]	; (8002ad8 <CANSetup+0x2c0>)
 80029f6:	781b      	ldrb	r3, [r3, #0]
 80029f8:	2280      	movs	r2, #128	; 0x80
 80029fa:	4935      	ldr	r1, [pc, #212]	; (8002ad0 <CANSetup+0x2b8>)
 80029fc:	4618      	mov	r0, r3
 80029fe:	f7fe fb97 	bl	8001130 <DebugPrint>
	}


	//Start Notifications on Receive for FIFO1
		ret=HAL_CAN_ActivateNotification(&CANBUS_EXT, CAN_IT_RX_FIFO1_MSG_PENDING);
 8002a02:	2110      	movs	r1, #16
 8002a04:	4835      	ldr	r0, [pc, #212]	; (8002adc <CANSetup+0x2c4>)
 8002a06:	f002 fc56 	bl	80052b6 <HAL_CAN_ActivateNotification>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	461a      	mov	r2, r3
 8002a0e:	4b34      	ldr	r3, [pc, #208]	; (8002ae0 <CANSetup+0x2c8>)
 8002a10:	701a      	strb	r2, [r3, #0]
		if ( ret != HAL_OK ) {
 8002a12:	4b33      	ldr	r3, [pc, #204]	; (8002ae0 <CANSetup+0x2c8>)
 8002a14:	781b      	ldrb	r3, [r3, #0]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d011      	beq.n	8002a3e <CANSetup+0x226>
			memset(PrintBuffer, '\0', COMM_SIZE);  snprintf(PrintBuffer, COMM_SIZE-1, "\n\r    - CAN ERROR - Activate FIFO1 Notification Failed"  );
 8002a1a:	2280      	movs	r2, #128	; 0x80
 8002a1c:	2100      	movs	r1, #0
 8002a1e:	482c      	ldr	r0, [pc, #176]	; (8002ad0 <CANSetup+0x2b8>)
 8002a20:	f007 f9dd 	bl	8009dde <memset>
 8002a24:	4a35      	ldr	r2, [pc, #212]	; (8002afc <CANSetup+0x2e4>)
 8002a26:	217f      	movs	r1, #127	; 0x7f
 8002a28:	4829      	ldr	r0, [pc, #164]	; (8002ad0 <CANSetup+0x2b8>)
 8002a2a:	f007 f941 	bl	8009cb0 <sniprintf>
			DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE);
 8002a2e:	4b2a      	ldr	r3, [pc, #168]	; (8002ad8 <CANSetup+0x2c0>)
 8002a30:	781b      	ldrb	r3, [r3, #0]
 8002a32:	2280      	movs	r2, #128	; 0x80
 8002a34:	4926      	ldr	r1, [pc, #152]	; (8002ad0 <CANSetup+0x2b8>)
 8002a36:	4618      	mov	r0, r3
 8002a38:	f7fe fb7a 	bl	8001130 <DebugPrint>
 8002a3c:	e010      	b.n	8002a60 <CANSetup+0x248>
		}else{
			memset(PrintBuffer, '\0', COMM_SIZE);  snprintf(PrintBuffer, COMM_SIZE-1, "\n\r    - Notification on FIFO1 Receive Started" );
 8002a3e:	2280      	movs	r2, #128	; 0x80
 8002a40:	2100      	movs	r1, #0
 8002a42:	4823      	ldr	r0, [pc, #140]	; (8002ad0 <CANSetup+0x2b8>)
 8002a44:	f007 f9cb 	bl	8009dde <memset>
 8002a48:	4a2d      	ldr	r2, [pc, #180]	; (8002b00 <CANSetup+0x2e8>)
 8002a4a:	217f      	movs	r1, #127	; 0x7f
 8002a4c:	4820      	ldr	r0, [pc, #128]	; (8002ad0 <CANSetup+0x2b8>)
 8002a4e:	f007 f92f 	bl	8009cb0 <sniprintf>
			DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE);
 8002a52:	4b21      	ldr	r3, [pc, #132]	; (8002ad8 <CANSetup+0x2c0>)
 8002a54:	781b      	ldrb	r3, [r3, #0]
 8002a56:	2280      	movs	r2, #128	; 0x80
 8002a58:	491d      	ldr	r1, [pc, #116]	; (8002ad0 <CANSetup+0x2b8>)
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	f7fe fb68 	bl	8001130 <DebugPrint>
		}


	//Start the CANBus
	ret=HAL_CAN_Start(&CANBUS_EXT);
 8002a60:	481e      	ldr	r0, [pc, #120]	; (8002adc <CANSetup+0x2c4>)
 8002a62:	f002 f9ca 	bl	8004dfa <HAL_CAN_Start>
 8002a66:	4603      	mov	r3, r0
 8002a68:	461a      	mov	r2, r3
 8002a6a:	4b1d      	ldr	r3, [pc, #116]	; (8002ae0 <CANSetup+0x2c8>)
 8002a6c:	701a      	strb	r2, [r3, #0]
	if ( ret != HAL_OK ) {
 8002a6e:	4b1c      	ldr	r3, [pc, #112]	; (8002ae0 <CANSetup+0x2c8>)
 8002a70:	781b      	ldrb	r3, [r3, #0]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d011      	beq.n	8002a9a <CANSetup+0x282>
		memset(PrintBuffer, '\0', COMM_SIZE);  snprintf(PrintBuffer, COMM_SIZE-1, "\n\rERROR - CANBus Hardware Start Failed"  );
 8002a76:	2280      	movs	r2, #128	; 0x80
 8002a78:	2100      	movs	r1, #0
 8002a7a:	4815      	ldr	r0, [pc, #84]	; (8002ad0 <CANSetup+0x2b8>)
 8002a7c:	f007 f9af 	bl	8009dde <memset>
 8002a80:	4a20      	ldr	r2, [pc, #128]	; (8002b04 <CANSetup+0x2ec>)
 8002a82:	217f      	movs	r1, #127	; 0x7f
 8002a84:	4812      	ldr	r0, [pc, #72]	; (8002ad0 <CANSetup+0x2b8>)
 8002a86:	f007 f913 	bl	8009cb0 <sniprintf>
		DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE);
 8002a8a:	4b13      	ldr	r3, [pc, #76]	; (8002ad8 <CANSetup+0x2c0>)
 8002a8c:	781b      	ldrb	r3, [r3, #0]
 8002a8e:	2280      	movs	r2, #128	; 0x80
 8002a90:	490f      	ldr	r1, [pc, #60]	; (8002ad0 <CANSetup+0x2b8>)
 8002a92:	4618      	mov	r0, r3
 8002a94:	f7fe fb4c 	bl	8001130 <DebugPrint>
		memset(PrintBuffer, '\0', COMM_SIZE);  snprintf(PrintBuffer, COMM_SIZE-1, "\n\rCANBus Hardware Activated"  );
		DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE);
	}


}
 8002a98:	e010      	b.n	8002abc <CANSetup+0x2a4>
		memset(PrintBuffer, '\0', COMM_SIZE);  snprintf(PrintBuffer, COMM_SIZE-1, "\n\rCANBus Hardware Activated"  );
 8002a9a:	2280      	movs	r2, #128	; 0x80
 8002a9c:	2100      	movs	r1, #0
 8002a9e:	480c      	ldr	r0, [pc, #48]	; (8002ad0 <CANSetup+0x2b8>)
 8002aa0:	f007 f99d 	bl	8009dde <memset>
 8002aa4:	4a18      	ldr	r2, [pc, #96]	; (8002b08 <CANSetup+0x2f0>)
 8002aa6:	217f      	movs	r1, #127	; 0x7f
 8002aa8:	4809      	ldr	r0, [pc, #36]	; (8002ad0 <CANSetup+0x2b8>)
 8002aaa:	f007 f901 	bl	8009cb0 <sniprintf>
		DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE);
 8002aae:	4b0a      	ldr	r3, [pc, #40]	; (8002ad8 <CANSetup+0x2c0>)
 8002ab0:	781b      	ldrb	r3, [r3, #0]
 8002ab2:	2280      	movs	r2, #128	; 0x80
 8002ab4:	4906      	ldr	r1, [pc, #24]	; (8002ad0 <CANSetup+0x2b8>)
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f7fe fb3a 	bl	8001130 <DebugPrint>
}
 8002abc:	bf00      	nop
 8002abe:	3708      	adds	r7, #8
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bd80      	pop	{r7, pc}
 8002ac4:	2000056c 	.word	0x2000056c
 8002ac8:	200005b4 	.word	0x200005b4
 8002acc:	200005dc 	.word	0x200005dc
 8002ad0:	200004e8 	.word	0x200004e8
 8002ad4:	0800d880 	.word	0x0800d880
 8002ad8:	2000004b 	.word	0x2000004b
 8002adc:	20000290 	.word	0x20000290
 8002ae0:	200005a8 	.word	0x200005a8
 8002ae4:	0800d8a4 	.word	0x0800d8a4
 8002ae8:	0800d8dc 	.word	0x0800d8dc
 8002aec:	0800d8f8 	.word	0x0800d8f8
 8002af0:	0800d924 	.word	0x0800d924
 8002af4:	0800d940 	.word	0x0800d940
 8002af8:	0800d978 	.word	0x0800d978
 8002afc:	0800d9a8 	.word	0x0800d9a8
 8002b00:	0800d9e0 	.word	0x0800d9e0
 8002b04:	0800da10 	.word	0x0800da10
 8002b08:	0800da38 	.word	0x0800da38

08002b0c <StartupPrint_Routine>:
//////////////////////////////////////// Functions to Print System Information to Debug Console  //////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


//Function to print the startup splash message
void StartupPrint_Routine(void){
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	af00      	add	r7, sp, #0

	memset(PrintBuffer, '\0', COMM_SIZE);  snprintf(PrintBuffer, COMM_SIZE-1, "\r\n\n\n\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~" );
 8002b10:	2280      	movs	r2, #128	; 0x80
 8002b12:	2100      	movs	r1, #0
 8002b14:	4821      	ldr	r0, [pc, #132]	; (8002b9c <StartupPrint_Routine+0x90>)
 8002b16:	f007 f962 	bl	8009dde <memset>
 8002b1a:	4a21      	ldr	r2, [pc, #132]	; (8002ba0 <StartupPrint_Routine+0x94>)
 8002b1c:	217f      	movs	r1, #127	; 0x7f
 8002b1e:	481f      	ldr	r0, [pc, #124]	; (8002b9c <StartupPrint_Routine+0x90>)
 8002b20:	f007 f8c6 	bl	8009cb0 <sniprintf>
	DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE);
 8002b24:	4b1f      	ldr	r3, [pc, #124]	; (8002ba4 <StartupPrint_Routine+0x98>)
 8002b26:	781b      	ldrb	r3, [r3, #0]
 8002b28:	2280      	movs	r2, #128	; 0x80
 8002b2a:	491c      	ldr	r1, [pc, #112]	; (8002b9c <StartupPrint_Routine+0x90>)
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	f7fe faff 	bl	8001130 <DebugPrint>
	memset(PrintBuffer, '\0', COMM_SIZE);  snprintf(PrintBuffer, COMM_SIZE-1, "\n\r~~~~~~~~~~ emewCorporation Electrolyte Monitoring System ~~~~~~~~~~" );
 8002b32:	2280      	movs	r2, #128	; 0x80
 8002b34:	2100      	movs	r1, #0
 8002b36:	4819      	ldr	r0, [pc, #100]	; (8002b9c <StartupPrint_Routine+0x90>)
 8002b38:	f007 f951 	bl	8009dde <memset>
 8002b3c:	4a1a      	ldr	r2, [pc, #104]	; (8002ba8 <StartupPrint_Routine+0x9c>)
 8002b3e:	217f      	movs	r1, #127	; 0x7f
 8002b40:	4816      	ldr	r0, [pc, #88]	; (8002b9c <StartupPrint_Routine+0x90>)
 8002b42:	f007 f8b5 	bl	8009cb0 <sniprintf>
	DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE);
 8002b46:	4b17      	ldr	r3, [pc, #92]	; (8002ba4 <StartupPrint_Routine+0x98>)
 8002b48:	781b      	ldrb	r3, [r3, #0]
 8002b4a:	2280      	movs	r2, #128	; 0x80
 8002b4c:	4913      	ldr	r1, [pc, #76]	; (8002b9c <StartupPrint_Routine+0x90>)
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f7fe faee 	bl	8001130 <DebugPrint>
	memset(PrintBuffer, '\0', COMM_SIZE);  snprintf(PrintBuffer, COMM_SIZE-1, "\n\r~~~~~~~~~~                   Ion Sensor                  ~~~~~~~~~~" );
 8002b54:	2280      	movs	r2, #128	; 0x80
 8002b56:	2100      	movs	r1, #0
 8002b58:	4810      	ldr	r0, [pc, #64]	; (8002b9c <StartupPrint_Routine+0x90>)
 8002b5a:	f007 f940 	bl	8009dde <memset>
 8002b5e:	4a13      	ldr	r2, [pc, #76]	; (8002bac <StartupPrint_Routine+0xa0>)
 8002b60:	217f      	movs	r1, #127	; 0x7f
 8002b62:	480e      	ldr	r0, [pc, #56]	; (8002b9c <StartupPrint_Routine+0x90>)
 8002b64:	f007 f8a4 	bl	8009cb0 <sniprintf>
	DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE);
 8002b68:	4b0e      	ldr	r3, [pc, #56]	; (8002ba4 <StartupPrint_Routine+0x98>)
 8002b6a:	781b      	ldrb	r3, [r3, #0]
 8002b6c:	2280      	movs	r2, #128	; 0x80
 8002b6e:	490b      	ldr	r1, [pc, #44]	; (8002b9c <StartupPrint_Routine+0x90>)
 8002b70:	4618      	mov	r0, r3
 8002b72:	f7fe fadd 	bl	8001130 <DebugPrint>
	memset(PrintBuffer, '\0', COMM_SIZE);  snprintf(PrintBuffer, COMM_SIZE-1, "\n\r~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~" );
 8002b76:	2280      	movs	r2, #128	; 0x80
 8002b78:	2100      	movs	r1, #0
 8002b7a:	4808      	ldr	r0, [pc, #32]	; (8002b9c <StartupPrint_Routine+0x90>)
 8002b7c:	f007 f92f 	bl	8009dde <memset>
 8002b80:	4a0b      	ldr	r2, [pc, #44]	; (8002bb0 <StartupPrint_Routine+0xa4>)
 8002b82:	217f      	movs	r1, #127	; 0x7f
 8002b84:	4805      	ldr	r0, [pc, #20]	; (8002b9c <StartupPrint_Routine+0x90>)
 8002b86:	f007 f893 	bl	8009cb0 <sniprintf>
	DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE);
 8002b8a:	4b06      	ldr	r3, [pc, #24]	; (8002ba4 <StartupPrint_Routine+0x98>)
 8002b8c:	781b      	ldrb	r3, [r3, #0]
 8002b8e:	2280      	movs	r2, #128	; 0x80
 8002b90:	4902      	ldr	r1, [pc, #8]	; (8002b9c <StartupPrint_Routine+0x90>)
 8002b92:	4618      	mov	r0, r3
 8002b94:	f7fe facc 	bl	8001130 <DebugPrint>

}
 8002b98:	bf00      	nop
 8002b9a:	bd80      	pop	{r7, pc}
 8002b9c:	200004e8 	.word	0x200004e8
 8002ba0:	0800da54 	.word	0x0800da54
 8002ba4:	2000004b 	.word	0x2000004b
 8002ba8:	0800daa0 	.word	0x0800daa0
 8002bac:	0800dae8 	.word	0x0800dae8
 8002bb0:	0800db30 	.word	0x0800db30

08002bb4 <SystemSettingPrint_Routine>:


//Function to print the sensor information retrieved from the EEPROM IC
void SystemSettingPrint_Routine(void){
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	af00      	add	r7, sp, #0

	//Print retrieved information
	memset(PrintBuffer, '\0', COMM_SIZE);  snprintf(PrintBuffer, COMM_SIZE-1, "\n\n\rSystem Information Retrieved:");
 8002bb8:	2280      	movs	r2, #128	; 0x80
 8002bba:	2100      	movs	r1, #0
 8002bbc:	482e      	ldr	r0, [pc, #184]	; (8002c78 <SystemSettingPrint_Routine+0xc4>)
 8002bbe:	f007 f90e 	bl	8009dde <memset>
 8002bc2:	4a2e      	ldr	r2, [pc, #184]	; (8002c7c <SystemSettingPrint_Routine+0xc8>)
 8002bc4:	217f      	movs	r1, #127	; 0x7f
 8002bc6:	482c      	ldr	r0, [pc, #176]	; (8002c78 <SystemSettingPrint_Routine+0xc4>)
 8002bc8:	f007 f872 	bl	8009cb0 <sniprintf>
	DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE);
 8002bcc:	4b2c      	ldr	r3, [pc, #176]	; (8002c80 <SystemSettingPrint_Routine+0xcc>)
 8002bce:	781b      	ldrb	r3, [r3, #0]
 8002bd0:	2280      	movs	r2, #128	; 0x80
 8002bd2:	4929      	ldr	r1, [pc, #164]	; (8002c78 <SystemSettingPrint_Routine+0xc4>)
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	f7fe faab 	bl	8001130 <DebugPrint>
	memset(PrintBuffer, '\0', COMM_SIZE);  snprintf(PrintBuffer, COMM_SIZE-1, "\n\r    - Serial Number:\t0x%04X", SysInfo.SerialNumber );
 8002bda:	2280      	movs	r2, #128	; 0x80
 8002bdc:	2100      	movs	r1, #0
 8002bde:	4826      	ldr	r0, [pc, #152]	; (8002c78 <SystemSettingPrint_Routine+0xc4>)
 8002be0:	f007 f8fd 	bl	8009dde <memset>
 8002be4:	4b27      	ldr	r3, [pc, #156]	; (8002c84 <SystemSettingPrint_Routine+0xd0>)
 8002be6:	889b      	ldrh	r3, [r3, #4]
 8002be8:	4a27      	ldr	r2, [pc, #156]	; (8002c88 <SystemSettingPrint_Routine+0xd4>)
 8002bea:	217f      	movs	r1, #127	; 0x7f
 8002bec:	4822      	ldr	r0, [pc, #136]	; (8002c78 <SystemSettingPrint_Routine+0xc4>)
 8002bee:	f007 f85f 	bl	8009cb0 <sniprintf>
	DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE);
 8002bf2:	4b23      	ldr	r3, [pc, #140]	; (8002c80 <SystemSettingPrint_Routine+0xcc>)
 8002bf4:	781b      	ldrb	r3, [r3, #0]
 8002bf6:	2280      	movs	r2, #128	; 0x80
 8002bf8:	491f      	ldr	r1, [pc, #124]	; (8002c78 <SystemSettingPrint_Routine+0xc4>)
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	f7fe fa98 	bl	8001130 <DebugPrint>
	memset(PrintBuffer, '\0', COMM_SIZE);  snprintf(PrintBuffer, COMM_SIZE-1, "\n\r    - CAN Address:\t0x%04X", SysInfo.CAN_Address );
 8002c00:	2280      	movs	r2, #128	; 0x80
 8002c02:	2100      	movs	r1, #0
 8002c04:	481c      	ldr	r0, [pc, #112]	; (8002c78 <SystemSettingPrint_Routine+0xc4>)
 8002c06:	f007 f8ea 	bl	8009dde <memset>
 8002c0a:	4b1e      	ldr	r3, [pc, #120]	; (8002c84 <SystemSettingPrint_Routine+0xd0>)
 8002c0c:	891b      	ldrh	r3, [r3, #8]
 8002c0e:	4a1f      	ldr	r2, [pc, #124]	; (8002c8c <SystemSettingPrint_Routine+0xd8>)
 8002c10:	217f      	movs	r1, #127	; 0x7f
 8002c12:	4819      	ldr	r0, [pc, #100]	; (8002c78 <SystemSettingPrint_Routine+0xc4>)
 8002c14:	f007 f84c 	bl	8009cb0 <sniprintf>
	DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE);
 8002c18:	4b19      	ldr	r3, [pc, #100]	; (8002c80 <SystemSettingPrint_Routine+0xcc>)
 8002c1a:	781b      	ldrb	r3, [r3, #0]
 8002c1c:	2280      	movs	r2, #128	; 0x80
 8002c1e:	4916      	ldr	r1, [pc, #88]	; (8002c78 <SystemSettingPrint_Routine+0xc4>)
 8002c20:	4618      	mov	r0, r3
 8002c22:	f7fe fa85 	bl	8001130 <DebugPrint>
	memset(PrintBuffer, '\0', COMM_SIZE);  snprintf(PrintBuffer, COMM_SIZE-1, "\n\r    - Sensor Type:\t%u", SysInfo.SensorType);
 8002c26:	2280      	movs	r2, #128	; 0x80
 8002c28:	2100      	movs	r1, #0
 8002c2a:	4813      	ldr	r0, [pc, #76]	; (8002c78 <SystemSettingPrint_Routine+0xc4>)
 8002c2c:	f007 f8d7 	bl	8009dde <memset>
 8002c30:	4b14      	ldr	r3, [pc, #80]	; (8002c84 <SystemSettingPrint_Routine+0xd0>)
 8002c32:	799b      	ldrb	r3, [r3, #6]
 8002c34:	4a16      	ldr	r2, [pc, #88]	; (8002c90 <SystemSettingPrint_Routine+0xdc>)
 8002c36:	217f      	movs	r1, #127	; 0x7f
 8002c38:	480f      	ldr	r0, [pc, #60]	; (8002c78 <SystemSettingPrint_Routine+0xc4>)
 8002c3a:	f007 f839 	bl	8009cb0 <sniprintf>
	DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE);
 8002c3e:	4b10      	ldr	r3, [pc, #64]	; (8002c80 <SystemSettingPrint_Routine+0xcc>)
 8002c40:	781b      	ldrb	r3, [r3, #0]
 8002c42:	2280      	movs	r2, #128	; 0x80
 8002c44:	490c      	ldr	r1, [pc, #48]	; (8002c78 <SystemSettingPrint_Routine+0xc4>)
 8002c46:	4618      	mov	r0, r3
 8002c48:	f7fe fa72 	bl	8001130 <DebugPrint>
	memset(PrintBuffer, '\0', COMM_SIZE);  snprintf(PrintBuffer, COMM_SIZE-1, "\n\r    - EEPROM Address:\t0x%04X", SysInfo.EEPROM_Address );
 8002c4c:	2280      	movs	r2, #128	; 0x80
 8002c4e:	2100      	movs	r1, #0
 8002c50:	4809      	ldr	r0, [pc, #36]	; (8002c78 <SystemSettingPrint_Routine+0xc4>)
 8002c52:	f007 f8c4 	bl	8009dde <memset>
 8002c56:	4b0b      	ldr	r3, [pc, #44]	; (8002c84 <SystemSettingPrint_Routine+0xd0>)
 8002c58:	895b      	ldrh	r3, [r3, #10]
 8002c5a:	4a0e      	ldr	r2, [pc, #56]	; (8002c94 <SystemSettingPrint_Routine+0xe0>)
 8002c5c:	217f      	movs	r1, #127	; 0x7f
 8002c5e:	4806      	ldr	r0, [pc, #24]	; (8002c78 <SystemSettingPrint_Routine+0xc4>)
 8002c60:	f007 f826 	bl	8009cb0 <sniprintf>
	DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE);
 8002c64:	4b06      	ldr	r3, [pc, #24]	; (8002c80 <SystemSettingPrint_Routine+0xcc>)
 8002c66:	781b      	ldrb	r3, [r3, #0]
 8002c68:	2280      	movs	r2, #128	; 0x80
 8002c6a:	4903      	ldr	r1, [pc, #12]	; (8002c78 <SystemSettingPrint_Routine+0xc4>)
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	f7fe fa5f 	bl	8001130 <DebugPrint>

}
 8002c72:	bf00      	nop
 8002c74:	bd80      	pop	{r7, pc}
 8002c76:	bf00      	nop
 8002c78:	200004e8 	.word	0x200004e8
 8002c7c:	0800db78 	.word	0x0800db78
 8002c80:	2000004b 	.word	0x2000004b
 8002c84:	200004dc 	.word	0x200004dc
 8002c88:	0800db9c 	.word	0x0800db9c
 8002c8c:	0800dbbc 	.word	0x0800dbbc
 8002c90:	0800dbd8 	.word	0x0800dbd8
 8002c94:	0800dbf0 	.word	0x0800dbf0

08002c98 <ControllerPairRoutine>:
////////////////////////////////////// CANBus Pairing System Routines /////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


//Routine to pair a sensor to a controller board when requested by the controller
void ControllerPairRoutine(void){
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b084      	sub	sp, #16
 8002c9c:	af00      	add	r7, sp, #0

	memset(PrintBuffer, '\0', COMM_SIZE);  snprintf(PrintBuffer, COMM_SIZE-1, "\n\n\rDevice Pairing Routine Entered"  );
 8002c9e:	2280      	movs	r2, #128	; 0x80
 8002ca0:	2100      	movs	r1, #0
 8002ca2:	4874      	ldr	r0, [pc, #464]	; (8002e74 <ControllerPairRoutine+0x1dc>)
 8002ca4:	f007 f89b 	bl	8009dde <memset>
 8002ca8:	4a73      	ldr	r2, [pc, #460]	; (8002e78 <ControllerPairRoutine+0x1e0>)
 8002caa:	217f      	movs	r1, #127	; 0x7f
 8002cac:	4871      	ldr	r0, [pc, #452]	; (8002e74 <ControllerPairRoutine+0x1dc>)
 8002cae:	f006 ffff 	bl	8009cb0 <sniprintf>
	DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE);
 8002cb2:	4b72      	ldr	r3, [pc, #456]	; (8002e7c <ControllerPairRoutine+0x1e4>)
 8002cb4:	781b      	ldrb	r3, [r3, #0]
 8002cb6:	2280      	movs	r2, #128	; 0x80
 8002cb8:	496e      	ldr	r1, [pc, #440]	; (8002e74 <ControllerPairRoutine+0x1dc>)
 8002cba:	4618      	mov	r0, r3
 8002cbc:	f7fe fa38 	bl	8001130 <DebugPrint>

	//Flag to indicate success of the operation
	_Bool SuccessFlag=true;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	73fb      	strb	r3, [r7, #15]
	_Bool TimeoutFlag=false;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	73bb      	strb	r3, [r7, #14]

	//Create CAN message with all sensor ID information
	uint8_t MessageBuffer[8] = {0x00};								//Create data buffer
 8002cc8:	2300      	movs	r3, #0
 8002cca:	607b      	str	r3, [r7, #4]
 8002ccc:	2300      	movs	r3, #0
 8002cce:	60bb      	str	r3, [r7, #8]
	MessageBuffer[0]=0xA0;											//Store instruction code
 8002cd0:	23a0      	movs	r3, #160	; 0xa0
 8002cd2:	713b      	strb	r3, [r7, #4]
	uint16_to_bytes(SysInfo.CAN_Address,  &MessageBuffer[1]);		//Store device CANBus address
 8002cd4:	4b6a      	ldr	r3, [pc, #424]	; (8002e80 <ControllerPairRoutine+0x1e8>)
 8002cd6:	891a      	ldrh	r2, [r3, #8]
 8002cd8:	1d3b      	adds	r3, r7, #4
 8002cda:	3301      	adds	r3, #1
 8002cdc:	4619      	mov	r1, r3
 8002cde:	4610      	mov	r0, r2
 8002ce0:	f7fe f808 	bl	8000cf4 <uint16_to_bytes>
	uint16_to_bytes(SysInfo.SerialNumber, &MessageBuffer[3]);		//Store device serial number
 8002ce4:	4b66      	ldr	r3, [pc, #408]	; (8002e80 <ControllerPairRoutine+0x1e8>)
 8002ce6:	889a      	ldrh	r2, [r3, #4]
 8002ce8:	1d3b      	adds	r3, r7, #4
 8002cea:	3303      	adds	r3, #3
 8002cec:	4619      	mov	r1, r3
 8002cee:	4610      	mov	r0, r2
 8002cf0:	f7fe f800 	bl	8000cf4 <uint16_to_bytes>
	MessageBuffer[5] = SysInfo.SensorType;							//Store device sensor type
 8002cf4:	4b62      	ldr	r3, [pc, #392]	; (8002e80 <ControllerPairRoutine+0x1e8>)
 8002cf6:	799b      	ldrb	r3, [r3, #6]
 8002cf8:	727b      	strb	r3, [r7, #9]

	//Send device pair message to controller's FIFO1
	pTxHeader.StdId = 0x0600 | SysInfo.CAN_Address;
 8002cfa:	4b61      	ldr	r3, [pc, #388]	; (8002e80 <ControllerPairRoutine+0x1e8>)
 8002cfc:	891b      	ldrh	r3, [r3, #8]
 8002cfe:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8002d02:	b29b      	uxth	r3, r3
 8002d04:	461a      	mov	r2, r3
 8002d06:	4b5f      	ldr	r3, [pc, #380]	; (8002e84 <ControllerPairRoutine+0x1ec>)
 8002d08:	601a      	str	r2, [r3, #0]
	ret=HAL_CAN_AddTxMessage(&CANBUS_EXT, &pTxHeader, MessageBuffer, &TxMailbox);
 8002d0a:	1d3a      	adds	r2, r7, #4
 8002d0c:	4b5e      	ldr	r3, [pc, #376]	; (8002e88 <ControllerPairRoutine+0x1f0>)
 8002d0e:	495d      	ldr	r1, [pc, #372]	; (8002e84 <ControllerPairRoutine+0x1ec>)
 8002d10:	485e      	ldr	r0, [pc, #376]	; (8002e8c <ControllerPairRoutine+0x1f4>)
 8002d12:	f002 f8b6 	bl	8004e82 <HAL_CAN_AddTxMessage>
 8002d16:	4603      	mov	r3, r0
 8002d18:	461a      	mov	r2, r3
 8002d1a:	4b5d      	ldr	r3, [pc, #372]	; (8002e90 <ControllerPairRoutine+0x1f8>)
 8002d1c:	701a      	strb	r2, [r3, #0]
	if(ret!=HAL_OK){
 8002d1e:	4b5c      	ldr	r3, [pc, #368]	; (8002e90 <ControllerPairRoutine+0x1f8>)
 8002d20:	781b      	ldrb	r3, [r3, #0]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d013      	beq.n	8002d4e <ControllerPairRoutine+0xb6>
		SuccessFlag = false;
 8002d26:	2300      	movs	r3, #0
 8002d28:	73fb      	strb	r3, [r7, #15]
		memset(PrintBuffer, '\0', COMM_SIZE);  snprintf(PrintBuffer, COMM_SIZE-1, "\n\r\t- Pairing Failed - Message failed to Send"  );
 8002d2a:	2280      	movs	r2, #128	; 0x80
 8002d2c:	2100      	movs	r1, #0
 8002d2e:	4851      	ldr	r0, [pc, #324]	; (8002e74 <ControllerPairRoutine+0x1dc>)
 8002d30:	f007 f855 	bl	8009dde <memset>
 8002d34:	4a57      	ldr	r2, [pc, #348]	; (8002e94 <ControllerPairRoutine+0x1fc>)
 8002d36:	217f      	movs	r1, #127	; 0x7f
 8002d38:	484e      	ldr	r0, [pc, #312]	; (8002e74 <ControllerPairRoutine+0x1dc>)
 8002d3a:	f006 ffb9 	bl	8009cb0 <sniprintf>
		DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE);
 8002d3e:	4b4f      	ldr	r3, [pc, #316]	; (8002e7c <ControllerPairRoutine+0x1e4>)
 8002d40:	781b      	ldrb	r3, [r3, #0]
 8002d42:	2280      	movs	r2, #128	; 0x80
 8002d44:	494b      	ldr	r1, [pc, #300]	; (8002e74 <ControllerPairRoutine+0x1dc>)
 8002d46:	4618      	mov	r0, r3
 8002d48:	f7fe f9f2 	bl	8001130 <DebugPrint>
 8002d4c:	e010      	b.n	8002d70 <ControllerPairRoutine+0xd8>
	}else{
		memset(PrintBuffer, '\0', COMM_SIZE);  snprintf(PrintBuffer, COMM_SIZE-1, "\n\r\t- Pairing Data Sent"  );
 8002d4e:	2280      	movs	r2, #128	; 0x80
 8002d50:	2100      	movs	r1, #0
 8002d52:	4848      	ldr	r0, [pc, #288]	; (8002e74 <ControllerPairRoutine+0x1dc>)
 8002d54:	f007 f843 	bl	8009dde <memset>
 8002d58:	4a4f      	ldr	r2, [pc, #316]	; (8002e98 <ControllerPairRoutine+0x200>)
 8002d5a:	217f      	movs	r1, #127	; 0x7f
 8002d5c:	4845      	ldr	r0, [pc, #276]	; (8002e74 <ControllerPairRoutine+0x1dc>)
 8002d5e:	f006 ffa7 	bl	8009cb0 <sniprintf>
		DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE);
 8002d62:	4b46      	ldr	r3, [pc, #280]	; (8002e7c <ControllerPairRoutine+0x1e4>)
 8002d64:	781b      	ldrb	r3, [r3, #0]
 8002d66:	2280      	movs	r2, #128	; 0x80
 8002d68:	4942      	ldr	r1, [pc, #264]	; (8002e74 <ControllerPairRoutine+0x1dc>)
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	f7fe f9e0 	bl	8001130 <DebugPrint>
	}

	//Setup parameters for the following routine to receive a validation message from the controller
	memset(MessageBuffer,0,8);				//Reset MessageBuffer
 8002d70:	1d3b      	adds	r3, r7, #4
 8002d72:	2208      	movs	r2, #8
 8002d74:	2100      	movs	r1, #0
 8002d76:	4618      	mov	r0, r3
 8002d78:	f007 f831 	bl	8009dde <memset>
	TIMER_TIMEOUT.Instance->CNT = 0;		//Set timeout timer to 0
 8002d7c:	4b47      	ldr	r3, [pc, #284]	; (8002e9c <ControllerPairRoutine+0x204>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	2200      	movs	r2, #0
 8002d82:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_TIM_Base_Start(&TIMER_TIMEOUT);		//Start timeout timer
 8002d84:	4845      	ldr	r0, [pc, #276]	; (8002e9c <ControllerPairRoutine+0x204>)
 8002d86:	f005 f861 	bl	8007e4c <HAL_TIM_Base_Start>

	//Wait for pair complete message from the controller over FIFO1 to validate operation
	while( SuccessFlag==true && TimeoutFlag==false ){
 8002d8a:	e022      	b.n	8002dd2 <ControllerPairRoutine+0x13a>

		//Check to see if a message has arrived over FIFO1
		if( HAL_CAN_GetRxFifoFillLevel(&CANBUS_EXT, CAN_RX_FIFO1) != 0 ){
 8002d8c:	2101      	movs	r1, #1
 8002d8e:	483f      	ldr	r0, [pc, #252]	; (8002e8c <ControllerPairRoutine+0x1f4>)
 8002d90:	f002 fa69 	bl	8005266 <HAL_CAN_GetRxFifoFillLevel>
 8002d94:	4603      	mov	r3, r0
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d010      	beq.n	8002dbc <ControllerPairRoutine+0x124>
			ret = HAL_CAN_GetRxMessage(&CANBUS_EXT, CAN_RX_FIFO1, &pRxHeader, MessageBuffer);
 8002d9a:	1d3b      	adds	r3, r7, #4
 8002d9c:	4a40      	ldr	r2, [pc, #256]	; (8002ea0 <ControllerPairRoutine+0x208>)
 8002d9e:	2101      	movs	r1, #1
 8002da0:	483a      	ldr	r0, [pc, #232]	; (8002e8c <ControllerPairRoutine+0x1f4>)
 8002da2:	f002 f93e 	bl	8005022 <HAL_CAN_GetRxMessage>
 8002da6:	4603      	mov	r3, r0
 8002da8:	461a      	mov	r2, r3
 8002daa:	4b39      	ldr	r3, [pc, #228]	; (8002e90 <ControllerPairRoutine+0x1f8>)
 8002dac:	701a      	strb	r2, [r3, #0]
			if(ret!=HAL_OK){ SuccessFlag = false; }
 8002dae:	4b38      	ldr	r3, [pc, #224]	; (8002e90 <ControllerPairRoutine+0x1f8>)
 8002db0:	781b      	ldrb	r3, [r3, #0]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d017      	beq.n	8002de6 <ControllerPairRoutine+0x14e>
 8002db6:	2300      	movs	r3, #0
 8002db8:	73fb      	strb	r3, [r7, #15]
			break;
 8002dba:	e014      	b.n	8002de6 <ControllerPairRoutine+0x14e>
		}

		//Check to see if the timeout period has elapsed
		if( __HAL_TIM_GET_COUNTER(&TIMER_TIMEOUT) > TimeoutPeriod  ){
 8002dbc:	4b37      	ldr	r3, [pc, #220]	; (8002e9c <ControllerPairRoutine+0x204>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d903      	bls.n	8002dd2 <ControllerPairRoutine+0x13a>
			TimeoutFlag=true;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	73bb      	strb	r3, [r7, #14]
			SuccessFlag=false;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	73fb      	strb	r3, [r7, #15]
	while( SuccessFlag==true && TimeoutFlag==false ){
 8002dd2:	7bfb      	ldrb	r3, [r7, #15]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d007      	beq.n	8002de8 <ControllerPairRoutine+0x150>
 8002dd8:	7bbb      	ldrb	r3, [r7, #14]
 8002dda:	f083 0301 	eor.w	r3, r3, #1
 8002dde:	b2db      	uxtb	r3, r3
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d1d3      	bne.n	8002d8c <ControllerPairRoutine+0xf4>
 8002de4:	e000      	b.n	8002de8 <ControllerPairRoutine+0x150>
			break;
 8002de6:	bf00      	nop
		}

	}

	//Stop timer before routine completion
	HAL_TIM_Base_Stop(&TIMER_TIMEOUT);
 8002de8:	482c      	ldr	r0, [pc, #176]	; (8002e9c <ControllerPairRoutine+0x204>)
 8002dea:	f005 f889 	bl	8007f00 <HAL_TIM_Base_Stop>
	memset(PrintBuffer, '\0', COMM_SIZE);  snprintf(PrintBuffer, COMM_SIZE-1, "\n\r\t- Waited %lums for controller confirmation", __HAL_TIM_GET_COUNTER(&TIMER_TIMEOUT)  );
 8002dee:	2280      	movs	r2, #128	; 0x80
 8002df0:	2100      	movs	r1, #0
 8002df2:	4820      	ldr	r0, [pc, #128]	; (8002e74 <ControllerPairRoutine+0x1dc>)
 8002df4:	f006 fff3 	bl	8009dde <memset>
 8002df8:	4b28      	ldr	r3, [pc, #160]	; (8002e9c <ControllerPairRoutine+0x204>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dfe:	4a29      	ldr	r2, [pc, #164]	; (8002ea4 <ControllerPairRoutine+0x20c>)
 8002e00:	217f      	movs	r1, #127	; 0x7f
 8002e02:	481c      	ldr	r0, [pc, #112]	; (8002e74 <ControllerPairRoutine+0x1dc>)
 8002e04:	f006 ff54 	bl	8009cb0 <sniprintf>
	DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE);
 8002e08:	4b1c      	ldr	r3, [pc, #112]	; (8002e7c <ControllerPairRoutine+0x1e4>)
 8002e0a:	781b      	ldrb	r3, [r3, #0]
 8002e0c:	2280      	movs	r2, #128	; 0x80
 8002e0e:	4919      	ldr	r1, [pc, #100]	; (8002e74 <ControllerPairRoutine+0x1dc>)
 8002e10:	4618      	mov	r0, r3
 8002e12:	f7fe f98d 	bl	8001130 <DebugPrint>
	TIMER_TIMEOUT.Instance->CNT = 0;
 8002e16:	4b21      	ldr	r3, [pc, #132]	; (8002e9c <ControllerPairRoutine+0x204>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	625a      	str	r2, [r3, #36]	; 0x24

	//Print routine exit message
	if( SuccessFlag==true ){
 8002e1e:	7bfb      	ldrb	r3, [r7, #15]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d011      	beq.n	8002e48 <ControllerPairRoutine+0x1b0>
  		  memset(PrintBuffer, '\0', COMM_SIZE);  snprintf(PrintBuffer, COMM_SIZE-1, "\n\rSensor pair SUCCESSFUL - Exiting Routine"  );
 8002e24:	2280      	movs	r2, #128	; 0x80
 8002e26:	2100      	movs	r1, #0
 8002e28:	4812      	ldr	r0, [pc, #72]	; (8002e74 <ControllerPairRoutine+0x1dc>)
 8002e2a:	f006 ffd8 	bl	8009dde <memset>
 8002e2e:	4a1e      	ldr	r2, [pc, #120]	; (8002ea8 <ControllerPairRoutine+0x210>)
 8002e30:	217f      	movs	r1, #127	; 0x7f
 8002e32:	4810      	ldr	r0, [pc, #64]	; (8002e74 <ControllerPairRoutine+0x1dc>)
 8002e34:	f006 ff3c 	bl	8009cb0 <sniprintf>
  		  DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE);
 8002e38:	4b10      	ldr	r3, [pc, #64]	; (8002e7c <ControllerPairRoutine+0x1e4>)
 8002e3a:	781b      	ldrb	r3, [r3, #0]
 8002e3c:	2280      	movs	r2, #128	; 0x80
 8002e3e:	490d      	ldr	r1, [pc, #52]	; (8002e74 <ControllerPairRoutine+0x1dc>)
 8002e40:	4618      	mov	r0, r3
 8002e42:	f7fe f975 	bl	8001130 <DebugPrint>
	}else{
		  memset(PrintBuffer, '\0', COMM_SIZE);  snprintf(PrintBuffer, COMM_SIZE-1, "\n\rSensor pair FAILED - Exiting Routine"  );
		  DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE);
	}

}
 8002e46:	e010      	b.n	8002e6a <ControllerPairRoutine+0x1d2>
		  memset(PrintBuffer, '\0', COMM_SIZE);  snprintf(PrintBuffer, COMM_SIZE-1, "\n\rSensor pair FAILED - Exiting Routine"  );
 8002e48:	2280      	movs	r2, #128	; 0x80
 8002e4a:	2100      	movs	r1, #0
 8002e4c:	4809      	ldr	r0, [pc, #36]	; (8002e74 <ControllerPairRoutine+0x1dc>)
 8002e4e:	f006 ffc6 	bl	8009dde <memset>
 8002e52:	4a16      	ldr	r2, [pc, #88]	; (8002eac <ControllerPairRoutine+0x214>)
 8002e54:	217f      	movs	r1, #127	; 0x7f
 8002e56:	4807      	ldr	r0, [pc, #28]	; (8002e74 <ControllerPairRoutine+0x1dc>)
 8002e58:	f006 ff2a 	bl	8009cb0 <sniprintf>
		  DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE);
 8002e5c:	4b07      	ldr	r3, [pc, #28]	; (8002e7c <ControllerPairRoutine+0x1e4>)
 8002e5e:	781b      	ldrb	r3, [r3, #0]
 8002e60:	2280      	movs	r2, #128	; 0x80
 8002e62:	4904      	ldr	r1, [pc, #16]	; (8002e74 <ControllerPairRoutine+0x1dc>)
 8002e64:	4618      	mov	r0, r3
 8002e66:	f7fe f963 	bl	8001130 <DebugPrint>
}
 8002e6a:	bf00      	nop
 8002e6c:	3710      	adds	r7, #16
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}
 8002e72:	bf00      	nop
 8002e74:	200004e8 	.word	0x200004e8
 8002e78:	0800dc10 	.word	0x0800dc10
 8002e7c:	2000004b 	.word	0x2000004b
 8002e80:	200004dc 	.word	0x200004dc
 8002e84:	2000056c 	.word	0x2000056c
 8002e88:	20000568 	.word	0x20000568
 8002e8c:	20000290 	.word	0x20000290
 8002e90:	200005a8 	.word	0x200005a8
 8002e94:	0800dc34 	.word	0x0800dc34
 8002e98:	0800dc64 	.word	0x0800dc64
 8002e9c:	20000408 	.word	0x20000408
 8002ea0:	20000584 	.word	0x20000584
 8002ea4:	0800dc7c 	.word	0x0800dc7c
 8002ea8:	0800dcac 	.word	0x0800dcac
 8002eac:	0800dcd8 	.word	0x0800dcd8

08002eb0 <ControllerPingRoutine>:




//Routine to ping the controller back when requested
void ControllerPingRoutine(void){
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b084      	sub	sp, #16
 8002eb4:	af00      	add	r7, sp, #0

    //Print routine enter message
	memset(PrintBuffer, '\0', COMM_SIZE);  snprintf(PrintBuffer, COMM_SIZE-1, "\n\n\rSensor Ping Routine Entered"  );
 8002eb6:	2280      	movs	r2, #128	; 0x80
 8002eb8:	2100      	movs	r1, #0
 8002eba:	482c      	ldr	r0, [pc, #176]	; (8002f6c <ControllerPingRoutine+0xbc>)
 8002ebc:	f006 ff8f 	bl	8009dde <memset>
 8002ec0:	4a2b      	ldr	r2, [pc, #172]	; (8002f70 <ControllerPingRoutine+0xc0>)
 8002ec2:	217f      	movs	r1, #127	; 0x7f
 8002ec4:	4829      	ldr	r0, [pc, #164]	; (8002f6c <ControllerPingRoutine+0xbc>)
 8002ec6:	f006 fef3 	bl	8009cb0 <sniprintf>
	DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE);
 8002eca:	4b2a      	ldr	r3, [pc, #168]	; (8002f74 <ControllerPingRoutine+0xc4>)
 8002ecc:	781b      	ldrb	r3, [r3, #0]
 8002ece:	2280      	movs	r2, #128	; 0x80
 8002ed0:	4926      	ldr	r1, [pc, #152]	; (8002f6c <ControllerPingRoutine+0xbc>)
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	f7fe f92c 	bl	8001130 <DebugPrint>

	//Flag to indicate success of the operation
	_Bool SuccessFlag=true;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	73fb      	strb	r3, [r7, #15]

	//Create CAN message with ping return information
	uint8_t MessageBuffer[8] = {0xA2, 0xCD, 0x34, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8002edc:	4a26      	ldr	r2, [pc, #152]	; (8002f78 <ControllerPingRoutine+0xc8>)
 8002ede:	1d3b      	adds	r3, r7, #4
 8002ee0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002ee4:	e883 0003 	stmia.w	r3, {r0, r1}

	//Transmit ping message
	pTxHeader.StdId = 0x0600 | SysInfo.CAN_Address;
 8002ee8:	4b24      	ldr	r3, [pc, #144]	; (8002f7c <ControllerPingRoutine+0xcc>)
 8002eea:	891b      	ldrh	r3, [r3, #8]
 8002eec:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8002ef0:	b29b      	uxth	r3, r3
 8002ef2:	461a      	mov	r2, r3
 8002ef4:	4b22      	ldr	r3, [pc, #136]	; (8002f80 <ControllerPingRoutine+0xd0>)
 8002ef6:	601a      	str	r2, [r3, #0]
	ret=HAL_CAN_AddTxMessage(&CANBUS_EXT, &pTxHeader, MessageBuffer, &TxMailbox);
 8002ef8:	1d3a      	adds	r2, r7, #4
 8002efa:	4b22      	ldr	r3, [pc, #136]	; (8002f84 <ControllerPingRoutine+0xd4>)
 8002efc:	4920      	ldr	r1, [pc, #128]	; (8002f80 <ControllerPingRoutine+0xd0>)
 8002efe:	4822      	ldr	r0, [pc, #136]	; (8002f88 <ControllerPingRoutine+0xd8>)
 8002f00:	f001 ffbf 	bl	8004e82 <HAL_CAN_AddTxMessage>
 8002f04:	4603      	mov	r3, r0
 8002f06:	461a      	mov	r2, r3
 8002f08:	4b20      	ldr	r3, [pc, #128]	; (8002f8c <ControllerPingRoutine+0xdc>)
 8002f0a:	701a      	strb	r2, [r3, #0]
	if(ret!=HAL_OK){ SuccessFlag = false; }
 8002f0c:	4b1f      	ldr	r3, [pc, #124]	; (8002f8c <ControllerPingRoutine+0xdc>)
 8002f0e:	781b      	ldrb	r3, [r3, #0]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d001      	beq.n	8002f18 <ControllerPingRoutine+0x68>
 8002f14:	2300      	movs	r3, #0
 8002f16:	73fb      	strb	r3, [r7, #15]

	//Print routine exit message
	if(SuccessFlag==true){
 8002f18:	7bfb      	ldrb	r3, [r7, #15]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d011      	beq.n	8002f42 <ControllerPingRoutine+0x92>
  	    memset(PrintBuffer, '\0', COMM_SIZE);  snprintf(PrintBuffer, COMM_SIZE-1, "\n\rSensor Ping SUCCESS - Exiting Routine"  );
 8002f1e:	2280      	movs	r2, #128	; 0x80
 8002f20:	2100      	movs	r1, #0
 8002f22:	4812      	ldr	r0, [pc, #72]	; (8002f6c <ControllerPingRoutine+0xbc>)
 8002f24:	f006 ff5b 	bl	8009dde <memset>
 8002f28:	4a19      	ldr	r2, [pc, #100]	; (8002f90 <ControllerPingRoutine+0xe0>)
 8002f2a:	217f      	movs	r1, #127	; 0x7f
 8002f2c:	480f      	ldr	r0, [pc, #60]	; (8002f6c <ControllerPingRoutine+0xbc>)
 8002f2e:	f006 febf 	bl	8009cb0 <sniprintf>
  		DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE);
 8002f32:	4b10      	ldr	r3, [pc, #64]	; (8002f74 <ControllerPingRoutine+0xc4>)
 8002f34:	781b      	ldrb	r3, [r3, #0]
 8002f36:	2280      	movs	r2, #128	; 0x80
 8002f38:	490c      	ldr	r1, [pc, #48]	; (8002f6c <ControllerPingRoutine+0xbc>)
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f7fe f8f8 	bl	8001130 <DebugPrint>
	}else{
	    memset(PrintBuffer, '\0', COMM_SIZE);  snprintf(PrintBuffer, COMM_SIZE-1, "\n\rSensor Ping FAILED - Exiting Routine"  );
		DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE);
	}

}
 8002f40:	e010      	b.n	8002f64 <ControllerPingRoutine+0xb4>
	    memset(PrintBuffer, '\0', COMM_SIZE);  snprintf(PrintBuffer, COMM_SIZE-1, "\n\rSensor Ping FAILED - Exiting Routine"  );
 8002f42:	2280      	movs	r2, #128	; 0x80
 8002f44:	2100      	movs	r1, #0
 8002f46:	4809      	ldr	r0, [pc, #36]	; (8002f6c <ControllerPingRoutine+0xbc>)
 8002f48:	f006 ff49 	bl	8009dde <memset>
 8002f4c:	4a11      	ldr	r2, [pc, #68]	; (8002f94 <ControllerPingRoutine+0xe4>)
 8002f4e:	217f      	movs	r1, #127	; 0x7f
 8002f50:	4806      	ldr	r0, [pc, #24]	; (8002f6c <ControllerPingRoutine+0xbc>)
 8002f52:	f006 fead 	bl	8009cb0 <sniprintf>
		DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE);
 8002f56:	4b07      	ldr	r3, [pc, #28]	; (8002f74 <ControllerPingRoutine+0xc4>)
 8002f58:	781b      	ldrb	r3, [r3, #0]
 8002f5a:	2280      	movs	r2, #128	; 0x80
 8002f5c:	4903      	ldr	r1, [pc, #12]	; (8002f6c <ControllerPingRoutine+0xbc>)
 8002f5e:	4618      	mov	r0, r3
 8002f60:	f7fe f8e6 	bl	8001130 <DebugPrint>
}
 8002f64:	bf00      	nop
 8002f66:	3710      	adds	r7, #16
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bd80      	pop	{r7, pc}
 8002f6c:	200004e8 	.word	0x200004e8
 8002f70:	0800dd00 	.word	0x0800dd00
 8002f74:	2000004b 	.word	0x2000004b
 8002f78:	0800dd70 	.word	0x0800dd70
 8002f7c:	200004dc 	.word	0x200004dc
 8002f80:	2000056c 	.word	0x2000056c
 8002f84:	20000568 	.word	0x20000568
 8002f88:	20000290 	.word	0x20000290
 8002f8c:	200005a8 	.word	0x200005a8
 8002f90:	0800dd20 	.word	0x0800dd20
 8002f94:	0800dd48 	.word	0x0800dd48

08002f98 <SensorMeasurementRoutine>:
////////////////////////////////////// Ion Measurement and Transmit Routines //////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


//Routine to measure data from the two sensors and send it to the controller
void SensorMeasurementRoutine(void){
 8002f98:	b480      	push	{r7}
 8002f9a:	af00      	add	r7, sp, #0
		memset(PrintBuffer, '\0', COMM_SIZE);  snprintf(PrintBuffer, COMM_SIZE-1, "\n\rSensor Measurement Routine FAILED - Exiting Routine" );
		DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE);
	}
*/

}
 8002f9c:	bf00      	nop
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa4:	4770      	bx	lr
	...

08002fa8 <SystemActivation>:
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////// System Initialization and Activation Routine ///////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


_Bool SystemActivation(void){
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b086      	sub	sp, #24
 8002fac:	af00      	add	r7, sp, #0

	_Bool SystemActivationFlag = true;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	75fb      	strb	r3, [r7, #23]

	//////////////////////////////////////////////////////////
	//////////// INITIAL PRINT MESSAGE ///////////////////////
	//////////////////////////////////////////////////////////

	memset(PrintBuffer, '\0', COMM_SIZE); snprintf(PrintBuffer, COMM_SIZE-1,"\n\n\rStarting subsystem activation sequence:"  );
 8002fb2:	2280      	movs	r2, #128	; 0x80
 8002fb4:	2100      	movs	r1, #0
 8002fb6:	48a6      	ldr	r0, [pc, #664]	; (8003250 <SystemActivation+0x2a8>)
 8002fb8:	f006 ff11 	bl	8009dde <memset>
 8002fbc:	4aa5      	ldr	r2, [pc, #660]	; (8003254 <SystemActivation+0x2ac>)
 8002fbe:	217f      	movs	r1, #127	; 0x7f
 8002fc0:	48a3      	ldr	r0, [pc, #652]	; (8003250 <SystemActivation+0x2a8>)
 8002fc2:	f006 fe75 	bl	8009cb0 <sniprintf>
	DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE);
 8002fc6:	4ba4      	ldr	r3, [pc, #656]	; (8003258 <SystemActivation+0x2b0>)
 8002fc8:	781b      	ldrb	r3, [r3, #0]
 8002fca:	2280      	movs	r2, #128	; 0x80
 8002fcc:	49a0      	ldr	r1, [pc, #640]	; (8003250 <SystemActivation+0x2a8>)
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f7fe f8ae 	bl	8001130 <DebugPrint>
	////////////////////////////////////////////////////////////////
	/////////// Activate all system timers ///////////////////////
	////////////////////////////////////////////////////////////////

	//Start heartbeat timer
	ret = HAL_TIM_Base_Start_IT(&TIMER_HRT);
 8002fd4:	48a1      	ldr	r0, [pc, #644]	; (800325c <SystemActivation+0x2b4>)
 8002fd6:	f004 ffbb 	bl	8007f50 <HAL_TIM_Base_Start_IT>
 8002fda:	4603      	mov	r3, r0
 8002fdc:	461a      	mov	r2, r3
 8002fde:	4ba0      	ldr	r3, [pc, #640]	; (8003260 <SystemActivation+0x2b8>)
 8002fe0:	701a      	strb	r2, [r3, #0]
	if(ret == HAL_OK){
 8002fe2:	4b9f      	ldr	r3, [pc, #636]	; (8003260 <SystemActivation+0x2b8>)
 8002fe4:	781b      	ldrb	r3, [r3, #0]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d111      	bne.n	800300e <SystemActivation+0x66>
		memset(PrintBuffer, '\0', COMM_SIZE); snprintf(PrintBuffer, COMM_SIZE-1,"\n\r\t- Heartbeat timer started"  );
 8002fea:	2280      	movs	r2, #128	; 0x80
 8002fec:	2100      	movs	r1, #0
 8002fee:	4898      	ldr	r0, [pc, #608]	; (8003250 <SystemActivation+0x2a8>)
 8002ff0:	f006 fef5 	bl	8009dde <memset>
 8002ff4:	4a9b      	ldr	r2, [pc, #620]	; (8003264 <SystemActivation+0x2bc>)
 8002ff6:	217f      	movs	r1, #127	; 0x7f
 8002ff8:	4895      	ldr	r0, [pc, #596]	; (8003250 <SystemActivation+0x2a8>)
 8002ffa:	f006 fe59 	bl	8009cb0 <sniprintf>
		DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE);
 8002ffe:	4b96      	ldr	r3, [pc, #600]	; (8003258 <SystemActivation+0x2b0>)
 8003000:	781b      	ldrb	r3, [r3, #0]
 8003002:	2280      	movs	r2, #128	; 0x80
 8003004:	4992      	ldr	r1, [pc, #584]	; (8003250 <SystemActivation+0x2a8>)
 8003006:	4618      	mov	r0, r3
 8003008:	f7fe f892 	bl	8001130 <DebugPrint>
 800300c:	e012      	b.n	8003034 <SystemActivation+0x8c>
	}else{
		memset(PrintBuffer, '\0', COMM_SIZE); snprintf(PrintBuffer, COMM_SIZE-1,"\n\r\t- Heartbeat timer failed to start"  );
 800300e:	2280      	movs	r2, #128	; 0x80
 8003010:	2100      	movs	r1, #0
 8003012:	488f      	ldr	r0, [pc, #572]	; (8003250 <SystemActivation+0x2a8>)
 8003014:	f006 fee3 	bl	8009dde <memset>
 8003018:	4a93      	ldr	r2, [pc, #588]	; (8003268 <SystemActivation+0x2c0>)
 800301a:	217f      	movs	r1, #127	; 0x7f
 800301c:	488c      	ldr	r0, [pc, #560]	; (8003250 <SystemActivation+0x2a8>)
 800301e:	f006 fe47 	bl	8009cb0 <sniprintf>
		DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE);
 8003022:	4b8d      	ldr	r3, [pc, #564]	; (8003258 <SystemActivation+0x2b0>)
 8003024:	781b      	ldrb	r3, [r3, #0]
 8003026:	2280      	movs	r2, #128	; 0x80
 8003028:	4989      	ldr	r1, [pc, #548]	; (8003250 <SystemActivation+0x2a8>)
 800302a:	4618      	mov	r0, r3
 800302c:	f7fe f880 	bl	8001130 <DebugPrint>
		SystemActivationFlag = false;
 8003030:	2300      	movs	r3, #0
 8003032:	75fb      	strb	r3, [r7, #23]
	//////////////////////////////////////////////////////////////////////////////
	/////////////// Initialize all outputs to a known state //////////////////////
	//////////////////////////////////////////////////////////////////////////////

	//Set all output pins to the correct state
	Set_LED_HeartBeat(0);
 8003034:	2000      	movs	r0, #0
 8003036:	f7fd fecb 	bl	8000dd0 <Set_LED_HeartBeat>
	Set_LED_Indication1(0);
 800303a:	2000      	movs	r0, #0
 800303c:	f7fd feda 	bl	8000df4 <Set_LED_Indication1>
	Set_LED_Indication2(0);
 8003040:	2000      	movs	r0, #0
 8003042:	f7fd fee9 	bl	8000e18 <Set_LED_Indication2>
	Set_LED_Indication3(0);
 8003046:	2000      	movs	r0, #0
 8003048:	f7fd fef8 	bl	8000e3c <Set_LED_Indication3>
	Set_LED_Indication4(0);
 800304c:	2000      	movs	r0, #0
 800304e:	f7fd ff07 	bl	8000e60 <Set_LED_Indication4>
	Set_LED_Indication5(0);
 8003052:	2000      	movs	r0, #0
 8003054:	f7fd ff16 	bl	8000e84 <Set_LED_Indication5>
	Set_LED_Metal(0);
 8003058:	2000      	movs	r0, #0
 800305a:	f7fd ff79 	bl	8000f50 <Set_LED_Metal>
	Set_LED_Turbidity(0);
 800305e:	2000      	movs	r0, #0
 8003060:	f7fd ff93 	bl	8000f8a <Set_LED_Turbidity>
	Set_Flash_CS(1);
 8003064:	2001      	movs	r0, #1
 8003066:	f7fd ff1f 	bl	8000ea8 <Set_Flash_CS>
	Set_Flash_WP(1);
 800306a:	2001      	movs	r0, #1
 800306c:	f7fd ff2e 	bl	8000ecc <Set_Flash_WP>

	//Print sequence load message
	memset(PrintBuffer, '\0', COMM_SIZE); snprintf(PrintBuffer, COMM_SIZE-1,"\n\r\t- All output pins set"  );
 8003070:	2280      	movs	r2, #128	; 0x80
 8003072:	2100      	movs	r1, #0
 8003074:	4876      	ldr	r0, [pc, #472]	; (8003250 <SystemActivation+0x2a8>)
 8003076:	f006 feb2 	bl	8009dde <memset>
 800307a:	4a7c      	ldr	r2, [pc, #496]	; (800326c <SystemActivation+0x2c4>)
 800307c:	217f      	movs	r1, #127	; 0x7f
 800307e:	4874      	ldr	r0, [pc, #464]	; (8003250 <SystemActivation+0x2a8>)
 8003080:	f006 fe16 	bl	8009cb0 <sniprintf>
	DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE);
 8003084:	4b74      	ldr	r3, [pc, #464]	; (8003258 <SystemActivation+0x2b0>)
 8003086:	781b      	ldrb	r3, [r3, #0]
 8003088:	2280      	movs	r2, #128	; 0x80
 800308a:	4971      	ldr	r1, [pc, #452]	; (8003250 <SystemActivation+0x2a8>)
 800308c:	4618      	mov	r0, r3
 800308e:	f7fe f84f 	bl	8001130 <DebugPrint>
	//////////////////////////////////////////////////////////////////////////////
	/////////////// Initialize MCP3421 ADC IC  ///////////////////////////////////
	//////////////////////////////////////////////////////////////////////////////

	//Print sequence load message
	memset(PrintBuffer, '\0', COMM_SIZE); snprintf(PrintBuffer,COMM_SIZE-1, "\n\rInitializing MCP3421 ADC: "  );
 8003092:	2280      	movs	r2, #128	; 0x80
 8003094:	2100      	movs	r1, #0
 8003096:	486e      	ldr	r0, [pc, #440]	; (8003250 <SystemActivation+0x2a8>)
 8003098:	f006 fea1 	bl	8009dde <memset>
 800309c:	4a74      	ldr	r2, [pc, #464]	; (8003270 <SystemActivation+0x2c8>)
 800309e:	217f      	movs	r1, #127	; 0x7f
 80030a0:	486b      	ldr	r0, [pc, #428]	; (8003250 <SystemActivation+0x2a8>)
 80030a2:	f006 fe05 	bl	8009cb0 <sniprintf>
	DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE);
 80030a6:	4b6c      	ldr	r3, [pc, #432]	; (8003258 <SystemActivation+0x2b0>)
 80030a8:	781b      	ldrb	r3, [r3, #0]
 80030aa:	2280      	movs	r2, #128	; 0x80
 80030ac:	4968      	ldr	r1, [pc, #416]	; (8003250 <SystemActivation+0x2a8>)
 80030ae:	4618      	mov	r0, r3
 80030b0:	f7fe f83e 	bl	8001130 <DebugPrint>

	//Reset MCP3421 ADC to a known state
	if( MCP3421_ADC_Reset() == ADC_STATUS_OK ){
 80030b4:	f7ff f942 	bl	800233c <MCP3421_ADC_Reset>
 80030b8:	4603      	mov	r3, r0
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d111      	bne.n	80030e2 <SystemActivation+0x13a>
		memset(PrintBuffer, '\0', COMM_SIZE); snprintf(PrintBuffer, COMM_SIZE-1, "\n\r\t- ACD Reset Passed");
 80030be:	2280      	movs	r2, #128	; 0x80
 80030c0:	2100      	movs	r1, #0
 80030c2:	4863      	ldr	r0, [pc, #396]	; (8003250 <SystemActivation+0x2a8>)
 80030c4:	f006 fe8b 	bl	8009dde <memset>
 80030c8:	4a6a      	ldr	r2, [pc, #424]	; (8003274 <SystemActivation+0x2cc>)
 80030ca:	217f      	movs	r1, #127	; 0x7f
 80030cc:	4860      	ldr	r0, [pc, #384]	; (8003250 <SystemActivation+0x2a8>)
 80030ce:	f006 fdef 	bl	8009cb0 <sniprintf>
		DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE );
 80030d2:	4b61      	ldr	r3, [pc, #388]	; (8003258 <SystemActivation+0x2b0>)
 80030d4:	781b      	ldrb	r3, [r3, #0]
 80030d6:	2280      	movs	r2, #128	; 0x80
 80030d8:	495d      	ldr	r1, [pc, #372]	; (8003250 <SystemActivation+0x2a8>)
 80030da:	4618      	mov	r0, r3
 80030dc:	f7fe f828 	bl	8001130 <DebugPrint>
 80030e0:	e012      	b.n	8003108 <SystemActivation+0x160>
	}else{
		memset(PrintBuffer, '\0', COMM_SIZE); snprintf(PrintBuffer, COMM_SIZE-1, "\n\r\t- ACD Reset Failed");
 80030e2:	2280      	movs	r2, #128	; 0x80
 80030e4:	2100      	movs	r1, #0
 80030e6:	485a      	ldr	r0, [pc, #360]	; (8003250 <SystemActivation+0x2a8>)
 80030e8:	f006 fe79 	bl	8009dde <memset>
 80030ec:	4a62      	ldr	r2, [pc, #392]	; (8003278 <SystemActivation+0x2d0>)
 80030ee:	217f      	movs	r1, #127	; 0x7f
 80030f0:	4857      	ldr	r0, [pc, #348]	; (8003250 <SystemActivation+0x2a8>)
 80030f2:	f006 fddd 	bl	8009cb0 <sniprintf>
		DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE );
 80030f6:	4b58      	ldr	r3, [pc, #352]	; (8003258 <SystemActivation+0x2b0>)
 80030f8:	781b      	ldrb	r3, [r3, #0]
 80030fa:	2280      	movs	r2, #128	; 0x80
 80030fc:	4954      	ldr	r1, [pc, #336]	; (8003250 <SystemActivation+0x2a8>)
 80030fe:	4618      	mov	r0, r3
 8003100:	f7fe f816 	bl	8001130 <DebugPrint>
		SystemActivationFlag = false;
 8003104:	2300      	movs	r3, #0
 8003106:	75fb      	strb	r3, [r7, #23]
	}

	//Configure the MCP3421 ADC's settings
	uint8_t ADC_Config = CONV_ONESHOT | SAMPLE_16BIT | PGA_X1;
 8003108:	2308      	movs	r3, #8
 800310a:	757b      	strb	r3, [r7, #21]
	if( MCP3421_ADC_Init(ADC_Config) == ADC_STATUS_OK ){
 800310c:	7d7b      	ldrb	r3, [r7, #21]
 800310e:	4618      	mov	r0, r3
 8003110:	f7ff f939 	bl	8002386 <MCP3421_ADC_Init>
 8003114:	4603      	mov	r3, r0
 8003116:	2b00      	cmp	r3, #0
 8003118:	d111      	bne.n	800313e <SystemActivation+0x196>
		memset(PrintBuffer, '\0', COMM_SIZE); snprintf(PrintBuffer, COMM_SIZE-1, "\n\r\t- ADC Config Passed");
 800311a:	2280      	movs	r2, #128	; 0x80
 800311c:	2100      	movs	r1, #0
 800311e:	484c      	ldr	r0, [pc, #304]	; (8003250 <SystemActivation+0x2a8>)
 8003120:	f006 fe5d 	bl	8009dde <memset>
 8003124:	4a55      	ldr	r2, [pc, #340]	; (800327c <SystemActivation+0x2d4>)
 8003126:	217f      	movs	r1, #127	; 0x7f
 8003128:	4849      	ldr	r0, [pc, #292]	; (8003250 <SystemActivation+0x2a8>)
 800312a:	f006 fdc1 	bl	8009cb0 <sniprintf>
		DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE );
 800312e:	4b4a      	ldr	r3, [pc, #296]	; (8003258 <SystemActivation+0x2b0>)
 8003130:	781b      	ldrb	r3, [r3, #0]
 8003132:	2280      	movs	r2, #128	; 0x80
 8003134:	4946      	ldr	r1, [pc, #280]	; (8003250 <SystemActivation+0x2a8>)
 8003136:	4618      	mov	r0, r3
 8003138:	f7fd fffa 	bl	8001130 <DebugPrint>
 800313c:	e012      	b.n	8003164 <SystemActivation+0x1bc>
	}else{
		memset(PrintBuffer, '\0', COMM_SIZE); snprintf(PrintBuffer, COMM_SIZE-1, "\n\r\t- ADC Config Failed");
 800313e:	2280      	movs	r2, #128	; 0x80
 8003140:	2100      	movs	r1, #0
 8003142:	4843      	ldr	r0, [pc, #268]	; (8003250 <SystemActivation+0x2a8>)
 8003144:	f006 fe4b 	bl	8009dde <memset>
 8003148:	4a4d      	ldr	r2, [pc, #308]	; (8003280 <SystemActivation+0x2d8>)
 800314a:	217f      	movs	r1, #127	; 0x7f
 800314c:	4840      	ldr	r0, [pc, #256]	; (8003250 <SystemActivation+0x2a8>)
 800314e:	f006 fdaf 	bl	8009cb0 <sniprintf>
		DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE );
 8003152:	4b41      	ldr	r3, [pc, #260]	; (8003258 <SystemActivation+0x2b0>)
 8003154:	781b      	ldrb	r3, [r3, #0]
 8003156:	2280      	movs	r2, #128	; 0x80
 8003158:	493d      	ldr	r1, [pc, #244]	; (8003250 <SystemActivation+0x2a8>)
 800315a:	4618      	mov	r0, r3
 800315c:	f7fd ffe8 	bl	8001130 <DebugPrint>
		SystemActivationFlag = false;
 8003160:	2300      	movs	r3, #0
 8003162:	75fb      	strb	r3, [r7, #23]
	//////////////////////////////////////////////////////////////////////////////
	/////////////// Initialize MCP4726A1T_E DAC IC  //////////////////////////////
	//////////////////////////////////////////////////////////////////////////////

	//Print sequence load message
	memset(PrintBuffer, '\0', COMM_SIZE); snprintf(PrintBuffer,COMM_SIZE-1, "\n\rInitializing MCP4726A1T_E DAC: "  );
 8003164:	2280      	movs	r2, #128	; 0x80
 8003166:	2100      	movs	r1, #0
 8003168:	4839      	ldr	r0, [pc, #228]	; (8003250 <SystemActivation+0x2a8>)
 800316a:	f006 fe38 	bl	8009dde <memset>
 800316e:	4a45      	ldr	r2, [pc, #276]	; (8003284 <SystemActivation+0x2dc>)
 8003170:	217f      	movs	r1, #127	; 0x7f
 8003172:	4837      	ldr	r0, [pc, #220]	; (8003250 <SystemActivation+0x2a8>)
 8003174:	f006 fd9c 	bl	8009cb0 <sniprintf>
	DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE);
 8003178:	4b37      	ldr	r3, [pc, #220]	; (8003258 <SystemActivation+0x2b0>)
 800317a:	781b      	ldrb	r3, [r3, #0]
 800317c:	2280      	movs	r2, #128	; 0x80
 800317e:	4934      	ldr	r1, [pc, #208]	; (8003250 <SystemActivation+0x2a8>)
 8003180:	4618      	mov	r0, r3
 8003182:	f7fd ffd5 	bl	8001130 <DebugPrint>

	//DAC initialization variables
	_Bool EEPROM_ProgramFlag = false;
 8003186:	2300      	movs	r3, #0
 8003188:	75bb      	strb	r3, [r7, #22]
	uint8_t DAC_ReadBuffer[6] = {0xFF};
 800318a:	23ff      	movs	r3, #255	; 0xff
 800318c:	60fb      	str	r3, [r7, #12]
 800318e:	2300      	movs	r3, #0
 8003190:	823b      	strh	r3, [r7, #16]

	//Read DAC memory to check expected configuration settings
	if( MCP4726A1T_ReadAllMemory(DAC_ReadBuffer) == DAC_STATUS_OK ){
 8003192:	f107 030c 	add.w	r3, r7, #12
 8003196:	4618      	mov	r0, r3
 8003198:	f7ff fb0c 	bl	80027b4 <MCP4726A1T_ReadAllMemory>
 800319c:	4603      	mov	r3, r0
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d17a      	bne.n	8003298 <SystemActivation+0x2f0>

		//Check eeprom config data
		if( (DAC_ReadBuffer[3]&0xDE) == 0xDC ){
 80031a2:	7bfb      	ldrb	r3, [r7, #15]
 80031a4:	f003 03de 	and.w	r3, r3, #222	; 0xde
 80031a8:	2bdc      	cmp	r3, #220	; 0xdc
 80031aa:	d111      	bne.n	80031d0 <SystemActivation+0x228>
			memset(PrintBuffer, '\0', COMM_SIZE); snprintf(PrintBuffer, COMM_SIZE-1, "\n\r\t- EEPROM config verified");
 80031ac:	2280      	movs	r2, #128	; 0x80
 80031ae:	2100      	movs	r1, #0
 80031b0:	4827      	ldr	r0, [pc, #156]	; (8003250 <SystemActivation+0x2a8>)
 80031b2:	f006 fe14 	bl	8009dde <memset>
 80031b6:	4a34      	ldr	r2, [pc, #208]	; (8003288 <SystemActivation+0x2e0>)
 80031b8:	217f      	movs	r1, #127	; 0x7f
 80031ba:	4825      	ldr	r0, [pc, #148]	; (8003250 <SystemActivation+0x2a8>)
 80031bc:	f006 fd78 	bl	8009cb0 <sniprintf>
			DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE );
 80031c0:	4b25      	ldr	r3, [pc, #148]	; (8003258 <SystemActivation+0x2b0>)
 80031c2:	781b      	ldrb	r3, [r3, #0]
 80031c4:	2280      	movs	r2, #128	; 0x80
 80031c6:	4922      	ldr	r1, [pc, #136]	; (8003250 <SystemActivation+0x2a8>)
 80031c8:	4618      	mov	r0, r3
 80031ca:	f7fd ffb1 	bl	8001130 <DebugPrint>
 80031ce:	e013      	b.n	80031f8 <SystemActivation+0x250>
		}else{
			memset(PrintBuffer, '\0', COMM_SIZE); snprintf(PrintBuffer, COMM_SIZE-1, "\n\r\t- EEPROM config INVALID -> 0x%02X", DAC_ReadBuffer[3] );
 80031d0:	2280      	movs	r2, #128	; 0x80
 80031d2:	2100      	movs	r1, #0
 80031d4:	481e      	ldr	r0, [pc, #120]	; (8003250 <SystemActivation+0x2a8>)
 80031d6:	f006 fe02 	bl	8009dde <memset>
 80031da:	7bfb      	ldrb	r3, [r7, #15]
 80031dc:	4a2b      	ldr	r2, [pc, #172]	; (800328c <SystemActivation+0x2e4>)
 80031de:	217f      	movs	r1, #127	; 0x7f
 80031e0:	481b      	ldr	r0, [pc, #108]	; (8003250 <SystemActivation+0x2a8>)
 80031e2:	f006 fd65 	bl	8009cb0 <sniprintf>
			DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE );
 80031e6:	4b1c      	ldr	r3, [pc, #112]	; (8003258 <SystemActivation+0x2b0>)
 80031e8:	781b      	ldrb	r3, [r3, #0]
 80031ea:	2280      	movs	r2, #128	; 0x80
 80031ec:	4918      	ldr	r1, [pc, #96]	; (8003250 <SystemActivation+0x2a8>)
 80031ee:	4618      	mov	r0, r3
 80031f0:	f7fd ff9e 	bl	8001130 <DebugPrint>
			EEPROM_ProgramFlag = true;
 80031f4:	2301      	movs	r3, #1
 80031f6:	75bb      	strb	r3, [r7, #22]
		}

		//Check volatile config data
		if( (DAC_ReadBuffer[0]&0xDE) == 0xD8 ){
 80031f8:	7b3b      	ldrb	r3, [r7, #12]
 80031fa:	f003 03de 	and.w	r3, r3, #222	; 0xde
 80031fe:	2bd8      	cmp	r3, #216	; 0xd8
 8003200:	d111      	bne.n	8003226 <SystemActivation+0x27e>
			memset(PrintBuffer, '\0', COMM_SIZE); snprintf(PrintBuffer, COMM_SIZE-1, "\n\r\t- Volatile memory config verified");
 8003202:	2280      	movs	r2, #128	; 0x80
 8003204:	2100      	movs	r1, #0
 8003206:	4812      	ldr	r0, [pc, #72]	; (8003250 <SystemActivation+0x2a8>)
 8003208:	f006 fde9 	bl	8009dde <memset>
 800320c:	4a20      	ldr	r2, [pc, #128]	; (8003290 <SystemActivation+0x2e8>)
 800320e:	217f      	movs	r1, #127	; 0x7f
 8003210:	480f      	ldr	r0, [pc, #60]	; (8003250 <SystemActivation+0x2a8>)
 8003212:	f006 fd4d 	bl	8009cb0 <sniprintf>
			DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE );
 8003216:	4b10      	ldr	r3, [pc, #64]	; (8003258 <SystemActivation+0x2b0>)
 8003218:	781b      	ldrb	r3, [r3, #0]
 800321a:	2280      	movs	r2, #128	; 0x80
 800321c:	490c      	ldr	r1, [pc, #48]	; (8003250 <SystemActivation+0x2a8>)
 800321e:	4618      	mov	r0, r3
 8003220:	f7fd ff86 	bl	8001130 <DebugPrint>
 8003224:	e04b      	b.n	80032be <SystemActivation+0x316>
		}else{
			memset(PrintBuffer, '\0', COMM_SIZE); snprintf(PrintBuffer, COMM_SIZE-1, "\n\r\t- Volatile memory config INVALID -> 0x%02X", DAC_ReadBuffer[0] );
 8003226:	2280      	movs	r2, #128	; 0x80
 8003228:	2100      	movs	r1, #0
 800322a:	4809      	ldr	r0, [pc, #36]	; (8003250 <SystemActivation+0x2a8>)
 800322c:	f006 fdd7 	bl	8009dde <memset>
 8003230:	7b3b      	ldrb	r3, [r7, #12]
 8003232:	4a18      	ldr	r2, [pc, #96]	; (8003294 <SystemActivation+0x2ec>)
 8003234:	217f      	movs	r1, #127	; 0x7f
 8003236:	4806      	ldr	r0, [pc, #24]	; (8003250 <SystemActivation+0x2a8>)
 8003238:	f006 fd3a 	bl	8009cb0 <sniprintf>
			DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE );
 800323c:	4b06      	ldr	r3, [pc, #24]	; (8003258 <SystemActivation+0x2b0>)
 800323e:	781b      	ldrb	r3, [r3, #0]
 8003240:	2280      	movs	r2, #128	; 0x80
 8003242:	4903      	ldr	r1, [pc, #12]	; (8003250 <SystemActivation+0x2a8>)
 8003244:	4618      	mov	r0, r3
 8003246:	f7fd ff73 	bl	8001130 <DebugPrint>
			EEPROM_ProgramFlag = true;
 800324a:	2301      	movs	r3, #1
 800324c:	75bb      	strb	r3, [r7, #22]
 800324e:	e036      	b.n	80032be <SystemActivation+0x316>
 8003250:	200004e8 	.word	0x200004e8
 8003254:	0800dd78 	.word	0x0800dd78
 8003258:	2000004b 	.word	0x2000004b
 800325c:	20000370 	.word	0x20000370
 8003260:	200005a8 	.word	0x200005a8
 8003264:	0800dda4 	.word	0x0800dda4
 8003268:	0800ddc4 	.word	0x0800ddc4
 800326c:	0800ddec 	.word	0x0800ddec
 8003270:	0800de08 	.word	0x0800de08
 8003274:	0800de28 	.word	0x0800de28
 8003278:	0800de40 	.word	0x0800de40
 800327c:	0800de58 	.word	0x0800de58
 8003280:	0800de70 	.word	0x0800de70
 8003284:	0800de88 	.word	0x0800de88
 8003288:	0800deac 	.word	0x0800deac
 800328c:	0800dec8 	.word	0x0800dec8
 8003290:	0800def0 	.word	0x0800def0
 8003294:	0800df18 	.word	0x0800df18
		}

	}else{
		memset(PrintBuffer, '\0', COMM_SIZE); snprintf(PrintBuffer, COMM_SIZE-1, "\n\r\t- System Read Error during memory verification");
 8003298:	2280      	movs	r2, #128	; 0x80
 800329a:	2100      	movs	r1, #0
 800329c:	489a      	ldr	r0, [pc, #616]	; (8003508 <SystemActivation+0x560>)
 800329e:	f006 fd9e 	bl	8009dde <memset>
 80032a2:	4a9a      	ldr	r2, [pc, #616]	; (800350c <SystemActivation+0x564>)
 80032a4:	217f      	movs	r1, #127	; 0x7f
 80032a6:	4898      	ldr	r0, [pc, #608]	; (8003508 <SystemActivation+0x560>)
 80032a8:	f006 fd02 	bl	8009cb0 <sniprintf>
		DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE );
 80032ac:	4b98      	ldr	r3, [pc, #608]	; (8003510 <SystemActivation+0x568>)
 80032ae:	781b      	ldrb	r3, [r3, #0]
 80032b0:	2280      	movs	r2, #128	; 0x80
 80032b2:	4995      	ldr	r1, [pc, #596]	; (8003508 <SystemActivation+0x560>)
 80032b4:	4618      	mov	r0, r3
 80032b6:	f7fd ff3b 	bl	8001130 <DebugPrint>
		SystemActivationFlag = false;
 80032ba:	2300      	movs	r3, #0
 80032bc:	75fb      	strb	r3, [r7, #23]
	}


	//If DAC config settings are invalid, program all memory
	if( EEPROM_ProgramFlag == true ){
 80032be:	7dbb      	ldrb	r3, [r7, #22]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d01b      	beq.n	80032fc <SystemActivation+0x354>
		if(	MCP4726A1T_WriteAllMemory(VREF_BUFF, PD_100K, G_1X, 0 ) != DAC_STATUS_OK ){
 80032c4:	2300      	movs	r3, #0
 80032c6:	2200      	movs	r2, #0
 80032c8:	2102      	movs	r1, #2
 80032ca:	2003      	movs	r0, #3
 80032cc:	f7ff f9f0 	bl	80026b0 <MCP4726A1T_WriteAllMemory>
 80032d0:	4603      	mov	r3, r0
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d012      	beq.n	80032fc <SystemActivation+0x354>
			memset(PrintBuffer, '\0', COMM_SIZE); snprintf(PrintBuffer, COMM_SIZE-1, "\n\r\t- Memory cofig program Failed");
 80032d6:	2280      	movs	r2, #128	; 0x80
 80032d8:	2100      	movs	r1, #0
 80032da:	488b      	ldr	r0, [pc, #556]	; (8003508 <SystemActivation+0x560>)
 80032dc:	f006 fd7f 	bl	8009dde <memset>
 80032e0:	4a8c      	ldr	r2, [pc, #560]	; (8003514 <SystemActivation+0x56c>)
 80032e2:	217f      	movs	r1, #127	; 0x7f
 80032e4:	4888      	ldr	r0, [pc, #544]	; (8003508 <SystemActivation+0x560>)
 80032e6:	f006 fce3 	bl	8009cb0 <sniprintf>
			DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE );
 80032ea:	4b89      	ldr	r3, [pc, #548]	; (8003510 <SystemActivation+0x568>)
 80032ec:	781b      	ldrb	r3, [r3, #0]
 80032ee:	2280      	movs	r2, #128	; 0x80
 80032f0:	4985      	ldr	r1, [pc, #532]	; (8003508 <SystemActivation+0x560>)
 80032f2:	4618      	mov	r0, r3
 80032f4:	f7fd ff1c 	bl	8001130 <DebugPrint>
			SystemActivationFlag = false;
 80032f8:	2300      	movs	r3, #0
 80032fa:	75fb      	strb	r3, [r7, #23]
		}
	}


	//If DAC config has been reprogrammed, re-check the config data
	if( EEPROM_ProgramFlag == true ){
 80032fc:	7dbb      	ldrb	r3, [r7, #22]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d078      	beq.n	80033f4 <SystemActivation+0x44c>

		//Read newly programmed memory from DAC
		memset(DAC_ReadBuffer, 0xFF, 8);
 8003302:	f107 030c 	add.w	r3, r7, #12
 8003306:	2208      	movs	r2, #8
 8003308:	21ff      	movs	r1, #255	; 0xff
 800330a:	4618      	mov	r0, r3
 800330c:	f006 fd67 	bl	8009dde <memset>
		if( MCP4726A1T_ReadAllMemory(DAC_ReadBuffer) == DAC_STATUS_OK ){
 8003310:	f107 030c 	add.w	r3, r7, #12
 8003314:	4618      	mov	r0, r3
 8003316:	f7ff fa4d 	bl	80027b4 <MCP4726A1T_ReadAllMemory>
 800331a:	4603      	mov	r3, r0
 800331c:	2b00      	cmp	r3, #0
 800331e:	d156      	bne.n	80033ce <SystemActivation+0x426>

			//Check eeprom config data
			if( (DAC_ReadBuffer[3]&0xDE) == 0xDC ){
 8003320:	7bfb      	ldrb	r3, [r7, #15]
 8003322:	f003 03de 	and.w	r3, r3, #222	; 0xde
 8003326:	2bdc      	cmp	r3, #220	; 0xdc
 8003328:	d111      	bne.n	800334e <SystemActivation+0x3a6>
				memset(PrintBuffer, '\0', COMM_SIZE); snprintf(PrintBuffer, COMM_SIZE-1, "\n\r\t- EEPROM config re-check verified");
 800332a:	2280      	movs	r2, #128	; 0x80
 800332c:	2100      	movs	r1, #0
 800332e:	4876      	ldr	r0, [pc, #472]	; (8003508 <SystemActivation+0x560>)
 8003330:	f006 fd55 	bl	8009dde <memset>
 8003334:	4a78      	ldr	r2, [pc, #480]	; (8003518 <SystemActivation+0x570>)
 8003336:	217f      	movs	r1, #127	; 0x7f
 8003338:	4873      	ldr	r0, [pc, #460]	; (8003508 <SystemActivation+0x560>)
 800333a:	f006 fcb9 	bl	8009cb0 <sniprintf>
				DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE );
 800333e:	4b74      	ldr	r3, [pc, #464]	; (8003510 <SystemActivation+0x568>)
 8003340:	781b      	ldrb	r3, [r3, #0]
 8003342:	2280      	movs	r2, #128	; 0x80
 8003344:	4970      	ldr	r1, [pc, #448]	; (8003508 <SystemActivation+0x560>)
 8003346:	4618      	mov	r0, r3
 8003348:	f7fd fef2 	bl	8001130 <DebugPrint>
 800334c:	e013      	b.n	8003376 <SystemActivation+0x3ce>
			}else{
				memset(PrintBuffer, '\0', COMM_SIZE); snprintf(PrintBuffer, COMM_SIZE-1, "\n\r\t- EEPROM config re-check failed -> 0x%02X", DAC_ReadBuffer[3] );
 800334e:	2280      	movs	r2, #128	; 0x80
 8003350:	2100      	movs	r1, #0
 8003352:	486d      	ldr	r0, [pc, #436]	; (8003508 <SystemActivation+0x560>)
 8003354:	f006 fd43 	bl	8009dde <memset>
 8003358:	7bfb      	ldrb	r3, [r7, #15]
 800335a:	4a70      	ldr	r2, [pc, #448]	; (800351c <SystemActivation+0x574>)
 800335c:	217f      	movs	r1, #127	; 0x7f
 800335e:	486a      	ldr	r0, [pc, #424]	; (8003508 <SystemActivation+0x560>)
 8003360:	f006 fca6 	bl	8009cb0 <sniprintf>
				DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE );
 8003364:	4b6a      	ldr	r3, [pc, #424]	; (8003510 <SystemActivation+0x568>)
 8003366:	781b      	ldrb	r3, [r3, #0]
 8003368:	2280      	movs	r2, #128	; 0x80
 800336a:	4967      	ldr	r1, [pc, #412]	; (8003508 <SystemActivation+0x560>)
 800336c:	4618      	mov	r0, r3
 800336e:	f7fd fedf 	bl	8001130 <DebugPrint>
				SystemActivationFlag = false;
 8003372:	2300      	movs	r3, #0
 8003374:	75fb      	strb	r3, [r7, #23]
			}

			//Check volatile config data
			if( (DAC_ReadBuffer[0]&0xDE) == 0xD8 ){
 8003376:	7b3b      	ldrb	r3, [r7, #12]
 8003378:	f003 03de 	and.w	r3, r3, #222	; 0xde
 800337c:	2bd8      	cmp	r3, #216	; 0xd8
 800337e:	d111      	bne.n	80033a4 <SystemActivation+0x3fc>
				memset(PrintBuffer, '\0', COMM_SIZE); snprintf(PrintBuffer, COMM_SIZE-1, "\n\r\t- Volatile memory config re-check verified");
 8003380:	2280      	movs	r2, #128	; 0x80
 8003382:	2100      	movs	r1, #0
 8003384:	4860      	ldr	r0, [pc, #384]	; (8003508 <SystemActivation+0x560>)
 8003386:	f006 fd2a 	bl	8009dde <memset>
 800338a:	4a65      	ldr	r2, [pc, #404]	; (8003520 <SystemActivation+0x578>)
 800338c:	217f      	movs	r1, #127	; 0x7f
 800338e:	485e      	ldr	r0, [pc, #376]	; (8003508 <SystemActivation+0x560>)
 8003390:	f006 fc8e 	bl	8009cb0 <sniprintf>
				DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE );
 8003394:	4b5e      	ldr	r3, [pc, #376]	; (8003510 <SystemActivation+0x568>)
 8003396:	781b      	ldrb	r3, [r3, #0]
 8003398:	2280      	movs	r2, #128	; 0x80
 800339a:	495b      	ldr	r1, [pc, #364]	; (8003508 <SystemActivation+0x560>)
 800339c:	4618      	mov	r0, r3
 800339e:	f7fd fec7 	bl	8001130 <DebugPrint>
 80033a2:	e027      	b.n	80033f4 <SystemActivation+0x44c>
			}else{
				memset(PrintBuffer, '\0', COMM_SIZE); snprintf(PrintBuffer, COMM_SIZE-1, "\n\r\t- Volatile memory config re-check INVALID -> 0x%02X", DAC_ReadBuffer[0] );
 80033a4:	2280      	movs	r2, #128	; 0x80
 80033a6:	2100      	movs	r1, #0
 80033a8:	4857      	ldr	r0, [pc, #348]	; (8003508 <SystemActivation+0x560>)
 80033aa:	f006 fd18 	bl	8009dde <memset>
 80033ae:	7b3b      	ldrb	r3, [r7, #12]
 80033b0:	4a5c      	ldr	r2, [pc, #368]	; (8003524 <SystemActivation+0x57c>)
 80033b2:	217f      	movs	r1, #127	; 0x7f
 80033b4:	4854      	ldr	r0, [pc, #336]	; (8003508 <SystemActivation+0x560>)
 80033b6:	f006 fc7b 	bl	8009cb0 <sniprintf>
				DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE );
 80033ba:	4b55      	ldr	r3, [pc, #340]	; (8003510 <SystemActivation+0x568>)
 80033bc:	781b      	ldrb	r3, [r3, #0]
 80033be:	2280      	movs	r2, #128	; 0x80
 80033c0:	4951      	ldr	r1, [pc, #324]	; (8003508 <SystemActivation+0x560>)
 80033c2:	4618      	mov	r0, r3
 80033c4:	f7fd feb4 	bl	8001130 <DebugPrint>
				SystemActivationFlag = false;
 80033c8:	2300      	movs	r3, #0
 80033ca:	75fb      	strb	r3, [r7, #23]
 80033cc:	e012      	b.n	80033f4 <SystemActivation+0x44c>
			}

		}else{
			memset(PrintBuffer, '\0', COMM_SIZE); snprintf(PrintBuffer, COMM_SIZE-1, "\n\r\t- DAC System Read Error during memory re-check verification");
 80033ce:	2280      	movs	r2, #128	; 0x80
 80033d0:	2100      	movs	r1, #0
 80033d2:	484d      	ldr	r0, [pc, #308]	; (8003508 <SystemActivation+0x560>)
 80033d4:	f006 fd03 	bl	8009dde <memset>
 80033d8:	4a53      	ldr	r2, [pc, #332]	; (8003528 <SystemActivation+0x580>)
 80033da:	217f      	movs	r1, #127	; 0x7f
 80033dc:	484a      	ldr	r0, [pc, #296]	; (8003508 <SystemActivation+0x560>)
 80033de:	f006 fc67 	bl	8009cb0 <sniprintf>
			DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE );
 80033e2:	4b4b      	ldr	r3, [pc, #300]	; (8003510 <SystemActivation+0x568>)
 80033e4:	781b      	ldrb	r3, [r3, #0]
 80033e6:	2280      	movs	r2, #128	; 0x80
 80033e8:	4947      	ldr	r1, [pc, #284]	; (8003508 <SystemActivation+0x560>)
 80033ea:	4618      	mov	r0, r3
 80033ec:	f7fd fea0 	bl	8001130 <DebugPrint>
			SystemActivationFlag = false;
 80033f0:	2300      	movs	r3, #0
 80033f2:	75fb      	strb	r3, [r7, #23]
		}
	}


	//Check POR bit to ensure that the DAC is awake
	if( (DAC_ReadBuffer[0]&0x80) == 0x80 ){
 80033f4:	7b3b      	ldrb	r3, [r7, #12]
 80033f6:	b25b      	sxtb	r3, r3
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	da11      	bge.n	8003420 <SystemActivation+0x478>
		memset(PrintBuffer, '\0', COMM_SIZE); snprintf(PrintBuffer, COMM_SIZE-1, "\n\r\t- DAC successfully powered on");
 80033fc:	2280      	movs	r2, #128	; 0x80
 80033fe:	2100      	movs	r1, #0
 8003400:	4841      	ldr	r0, [pc, #260]	; (8003508 <SystemActivation+0x560>)
 8003402:	f006 fcec 	bl	8009dde <memset>
 8003406:	4a49      	ldr	r2, [pc, #292]	; (800352c <SystemActivation+0x584>)
 8003408:	217f      	movs	r1, #127	; 0x7f
 800340a:	483f      	ldr	r0, [pc, #252]	; (8003508 <SystemActivation+0x560>)
 800340c:	f006 fc50 	bl	8009cb0 <sniprintf>
		DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE );
 8003410:	4b3f      	ldr	r3, [pc, #252]	; (8003510 <SystemActivation+0x568>)
 8003412:	781b      	ldrb	r3, [r3, #0]
 8003414:	2280      	movs	r2, #128	; 0x80
 8003416:	493c      	ldr	r1, [pc, #240]	; (8003508 <SystemActivation+0x560>)
 8003418:	4618      	mov	r0, r3
 800341a:	f7fd fe89 	bl	8001130 <DebugPrint>
 800341e:	e012      	b.n	8003446 <SystemActivation+0x49e>
	}else{
		memset(PrintBuffer, '\0', COMM_SIZE); snprintf(PrintBuffer, COMM_SIZE-1, "\n\r\t- DAC failed to powered on");
 8003420:	2280      	movs	r2, #128	; 0x80
 8003422:	2100      	movs	r1, #0
 8003424:	4838      	ldr	r0, [pc, #224]	; (8003508 <SystemActivation+0x560>)
 8003426:	f006 fcda 	bl	8009dde <memset>
 800342a:	4a41      	ldr	r2, [pc, #260]	; (8003530 <SystemActivation+0x588>)
 800342c:	217f      	movs	r1, #127	; 0x7f
 800342e:	4836      	ldr	r0, [pc, #216]	; (8003508 <SystemActivation+0x560>)
 8003430:	f006 fc3e 	bl	8009cb0 <sniprintf>
		DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE );
 8003434:	4b36      	ldr	r3, [pc, #216]	; (8003510 <SystemActivation+0x568>)
 8003436:	781b      	ldrb	r3, [r3, #0]
 8003438:	2280      	movs	r2, #128	; 0x80
 800343a:	4933      	ldr	r1, [pc, #204]	; (8003508 <SystemActivation+0x560>)
 800343c:	4618      	mov	r0, r3
 800343e:	f7fd fe77 	bl	8001130 <DebugPrint>
		SystemActivationFlag = false;
 8003442:	2300      	movs	r3, #0
 8003444:	75fb      	strb	r3, [r7, #23]
	}


	//Set the DAC output voltage to 0V so it is in a known state
	if( MCP4726A1T_VoltageOut(0) == DAC_STATUS_OK ){
 8003446:	ed9f 0a3b 	vldr	s0, [pc, #236]	; 8003534 <SystemActivation+0x58c>
 800344a:	f7ff f83d 	bl	80024c8 <MCP4726A1T_VoltageOut>
 800344e:	4603      	mov	r3, r0
 8003450:	2b00      	cmp	r3, #0
 8003452:	d111      	bne.n	8003478 <SystemActivation+0x4d0>
		memset(PrintBuffer, '\0', COMM_SIZE); snprintf(PrintBuffer, COMM_SIZE-1, "\n\r\t- DAC output voltage reset to know state");
 8003454:	2280      	movs	r2, #128	; 0x80
 8003456:	2100      	movs	r1, #0
 8003458:	482b      	ldr	r0, [pc, #172]	; (8003508 <SystemActivation+0x560>)
 800345a:	f006 fcc0 	bl	8009dde <memset>
 800345e:	4a36      	ldr	r2, [pc, #216]	; (8003538 <SystemActivation+0x590>)
 8003460:	217f      	movs	r1, #127	; 0x7f
 8003462:	4829      	ldr	r0, [pc, #164]	; (8003508 <SystemActivation+0x560>)
 8003464:	f006 fc24 	bl	8009cb0 <sniprintf>
		DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE );
 8003468:	4b29      	ldr	r3, [pc, #164]	; (8003510 <SystemActivation+0x568>)
 800346a:	781b      	ldrb	r3, [r3, #0]
 800346c:	2280      	movs	r2, #128	; 0x80
 800346e:	4926      	ldr	r1, [pc, #152]	; (8003508 <SystemActivation+0x560>)
 8003470:	4618      	mov	r0, r3
 8003472:	f7fd fe5d 	bl	8001130 <DebugPrint>
 8003476:	e012      	b.n	800349e <SystemActivation+0x4f6>
	}else{
		memset(PrintBuffer, '\0', COMM_SIZE); snprintf(PrintBuffer, COMM_SIZE-1, "\n\r\t- DAC output voltage failed to reset");
 8003478:	2280      	movs	r2, #128	; 0x80
 800347a:	2100      	movs	r1, #0
 800347c:	4822      	ldr	r0, [pc, #136]	; (8003508 <SystemActivation+0x560>)
 800347e:	f006 fcae 	bl	8009dde <memset>
 8003482:	4a2e      	ldr	r2, [pc, #184]	; (800353c <SystemActivation+0x594>)
 8003484:	217f      	movs	r1, #127	; 0x7f
 8003486:	4820      	ldr	r0, [pc, #128]	; (8003508 <SystemActivation+0x560>)
 8003488:	f006 fc12 	bl	8009cb0 <sniprintf>
		DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE );
 800348c:	4b20      	ldr	r3, [pc, #128]	; (8003510 <SystemActivation+0x568>)
 800348e:	781b      	ldrb	r3, [r3, #0]
 8003490:	2280      	movs	r2, #128	; 0x80
 8003492:	491d      	ldr	r1, [pc, #116]	; (8003508 <SystemActivation+0x560>)
 8003494:	4618      	mov	r0, r3
 8003496:	f7fd fe4b 	bl	8001130 <DebugPrint>
		SystemActivationFlag = false;
 800349a:	2300      	movs	r3, #0
 800349c:	75fb      	strb	r3, [r7, #23]
	//////////////////////////////////////////////////////////////////////////////
	/////////////// Load System Information from EEPROM  /////////////////////////
	//////////////////////////////////////////////////////////////////////////////

	//Print sequence load message
	memset(PrintBuffer, '\0', COMM_SIZE); snprintf(PrintBuffer,COMM_SIZE-1, "\n\rInitializing system information from memory: "  );
 800349e:	2280      	movs	r2, #128	; 0x80
 80034a0:	2100      	movs	r1, #0
 80034a2:	4819      	ldr	r0, [pc, #100]	; (8003508 <SystemActivation+0x560>)
 80034a4:	f006 fc9b 	bl	8009dde <memset>
 80034a8:	4a25      	ldr	r2, [pc, #148]	; (8003540 <SystemActivation+0x598>)
 80034aa:	217f      	movs	r1, #127	; 0x7f
 80034ac:	4816      	ldr	r0, [pc, #88]	; (8003508 <SystemActivation+0x560>)
 80034ae:	f006 fbff 	bl	8009cb0 <sniprintf>
	DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE);
 80034b2:	4b17      	ldr	r3, [pc, #92]	; (8003510 <SystemActivation+0x568>)
 80034b4:	781b      	ldrb	r3, [r3, #0]
 80034b6:	2280      	movs	r2, #128	; 0x80
 80034b8:	4913      	ldr	r1, [pc, #76]	; (8003508 <SystemActivation+0x560>)
 80034ba:	4618      	mov	r0, r3
 80034bc:	f7fd fe38 	bl	8001130 <DebugPrint>


	//Read data from the EEPROM IC
	uint8_t EEPROM_ReadArray[7] = {0};
 80034c0:	2300      	movs	r3, #0
 80034c2:	607b      	str	r3, [r7, #4]
 80034c4:	f107 0308 	add.w	r3, r7, #8
 80034c8:	2100      	movs	r1, #0
 80034ca:	460a      	mov	r2, r1
 80034cc:	801a      	strh	r2, [r3, #0]
 80034ce:	460a      	mov	r2, r1
 80034d0:	709a      	strb	r2, [r3, #2]
	if( eeprom_Read(0x0000, EEPROM_ReadArray, sizeof(EEPROM_ReadArray) ) == EEPROM_STATUS_OK ){
 80034d2:	1d3b      	adds	r3, r7, #4
 80034d4:	2207      	movs	r2, #7
 80034d6:	4619      	mov	r1, r3
 80034d8:	2000      	movs	r0, #0
 80034da:	f7fe fedf 	bl	800229c <eeprom_Read>
 80034de:	4603      	mov	r3, r0
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d131      	bne.n	8003548 <SystemActivation+0x5a0>
		memset(PrintBuffer, '\0', COMM_SIZE); snprintf(PrintBuffer,COMM_SIZE-1, "\n\r\t- Information successfully retrieved from EEPROM"  );
 80034e4:	2280      	movs	r2, #128	; 0x80
 80034e6:	2100      	movs	r1, #0
 80034e8:	4807      	ldr	r0, [pc, #28]	; (8003508 <SystemActivation+0x560>)
 80034ea:	f006 fc78 	bl	8009dde <memset>
 80034ee:	4a15      	ldr	r2, [pc, #84]	; (8003544 <SystemActivation+0x59c>)
 80034f0:	217f      	movs	r1, #127	; 0x7f
 80034f2:	4805      	ldr	r0, [pc, #20]	; (8003508 <SystemActivation+0x560>)
 80034f4:	f006 fbdc 	bl	8009cb0 <sniprintf>
		DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE);
 80034f8:	4b05      	ldr	r3, [pc, #20]	; (8003510 <SystemActivation+0x568>)
 80034fa:	781b      	ldrb	r3, [r3, #0]
 80034fc:	2280      	movs	r2, #128	; 0x80
 80034fe:	4902      	ldr	r1, [pc, #8]	; (8003508 <SystemActivation+0x560>)
 8003500:	4618      	mov	r0, r3
 8003502:	f7fd fe15 	bl	8001130 <DebugPrint>
 8003506:	e032      	b.n	800356e <SystemActivation+0x5c6>
 8003508:	200004e8 	.word	0x200004e8
 800350c:	0800df48 	.word	0x0800df48
 8003510:	2000004b 	.word	0x2000004b
 8003514:	0800df7c 	.word	0x0800df7c
 8003518:	0800dfa0 	.word	0x0800dfa0
 800351c:	0800dfc8 	.word	0x0800dfc8
 8003520:	0800dff8 	.word	0x0800dff8
 8003524:	0800e028 	.word	0x0800e028
 8003528:	0800e060 	.word	0x0800e060
 800352c:	0800e0a0 	.word	0x0800e0a0
 8003530:	0800e0c4 	.word	0x0800e0c4
 8003534:	00000000 	.word	0x00000000
 8003538:	0800e0e4 	.word	0x0800e0e4
 800353c:	0800e110 	.word	0x0800e110
 8003540:	0800e138 	.word	0x0800e138
 8003544:	0800e168 	.word	0x0800e168
	}else{
		memset(PrintBuffer, '\0', COMM_SIZE); snprintf(PrintBuffer,COMM_SIZE-1, "\n\r\t- Information failed to be retrieved from EEPROM"  );
 8003548:	2280      	movs	r2, #128	; 0x80
 800354a:	2100      	movs	r1, #0
 800354c:	487c      	ldr	r0, [pc, #496]	; (8003740 <SystemActivation+0x798>)
 800354e:	f006 fc46 	bl	8009dde <memset>
 8003552:	4a7c      	ldr	r2, [pc, #496]	; (8003744 <SystemActivation+0x79c>)
 8003554:	217f      	movs	r1, #127	; 0x7f
 8003556:	487a      	ldr	r0, [pc, #488]	; (8003740 <SystemActivation+0x798>)
 8003558:	f006 fbaa 	bl	8009cb0 <sniprintf>
		DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE);
 800355c:	4b7a      	ldr	r3, [pc, #488]	; (8003748 <SystemActivation+0x7a0>)
 800355e:	781b      	ldrb	r3, [r3, #0]
 8003560:	2280      	movs	r2, #128	; 0x80
 8003562:	4977      	ldr	r1, [pc, #476]	; (8003740 <SystemActivation+0x798>)
 8003564:	4618      	mov	r0, r3
 8003566:	f7fd fde3 	bl	8001130 <DebugPrint>
		SystemActivationFlag = false;
 800356a:	2300      	movs	r3, #0
 800356c:	75fb      	strb	r3, [r7, #23]
	}

	//Set system info
	SysInfo.Button1     = false;
 800356e:	4b77      	ldr	r3, [pc, #476]	; (800374c <SystemActivation+0x7a4>)
 8003570:	2200      	movs	r2, #0
 8003572:	701a      	strb	r2, [r3, #0]
	SysInfo.Button2     = false;
 8003574:	4b75      	ldr	r3, [pc, #468]	; (800374c <SystemActivation+0x7a4>)
 8003576:	2200      	movs	r2, #0
 8003578:	705a      	strb	r2, [r3, #1]
	SysInfo.Button3     = false;
 800357a:	4b74      	ldr	r3, [pc, #464]	; (800374c <SystemActivation+0x7a4>)
 800357c:	2200      	movs	r2, #0
 800357e:	709a      	strb	r2, [r3, #2]
	SysInfo.SerialNumber   = bytes_to_uint16(&EEPROM_ReadArray[0]);
 8003580:	1d3b      	adds	r3, r7, #4
 8003582:	4618      	mov	r0, r3
 8003584:	f7fd fbcd 	bl	8000d22 <bytes_to_uint16>
 8003588:	4603      	mov	r3, r0
 800358a:	461a      	mov	r2, r3
 800358c:	4b6f      	ldr	r3, [pc, #444]	; (800374c <SystemActivation+0x7a4>)
 800358e:	809a      	strh	r2, [r3, #4]
	SysInfo.SensorType     = EEPROM_ReadArray[2];
 8003590:	79ba      	ldrb	r2, [r7, #6]
 8003592:	4b6e      	ldr	r3, [pc, #440]	; (800374c <SystemActivation+0x7a4>)
 8003594:	719a      	strb	r2, [r3, #6]
	SysInfo.CAN_Address    = bytes_to_uint16(&EEPROM_ReadArray[3]);
 8003596:	1d3b      	adds	r3, r7, #4
 8003598:	3303      	adds	r3, #3
 800359a:	4618      	mov	r0, r3
 800359c:	f7fd fbc1 	bl	8000d22 <bytes_to_uint16>
 80035a0:	4603      	mov	r3, r0
 80035a2:	461a      	mov	r2, r3
 80035a4:	4b69      	ldr	r3, [pc, #420]	; (800374c <SystemActivation+0x7a4>)
 80035a6:	811a      	strh	r2, [r3, #8]
	SysInfo.EEPROM_Address = bytes_to_uint16(&EEPROM_ReadArray[5]);
 80035a8:	1d3b      	adds	r3, r7, #4
 80035aa:	3305      	adds	r3, #5
 80035ac:	4618      	mov	r0, r3
 80035ae:	f7fd fbb8 	bl	8000d22 <bytes_to_uint16>
 80035b2:	4603      	mov	r3, r0
 80035b4:	461a      	mov	r2, r3
 80035b6:	4b65      	ldr	r3, [pc, #404]	; (800374c <SystemActivation+0x7a4>)
 80035b8:	815a      	strh	r2, [r3, #10]

	//Verify that data read from EEPROM is valid
	if(SysInfo.SerialNumber==0xFFFF || SysInfo.SensorType==0xFF || SysInfo.CAN_Address==0xFFFF || SysInfo.EEPROM_Address==0xFFFF ){
 80035ba:	4b64      	ldr	r3, [pc, #400]	; (800374c <SystemActivation+0x7a4>)
 80035bc:	889b      	ldrh	r3, [r3, #4]
 80035be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d00f      	beq.n	80035e6 <SystemActivation+0x63e>
 80035c6:	4b61      	ldr	r3, [pc, #388]	; (800374c <SystemActivation+0x7a4>)
 80035c8:	799b      	ldrb	r3, [r3, #6]
 80035ca:	2bff      	cmp	r3, #255	; 0xff
 80035cc:	d00b      	beq.n	80035e6 <SystemActivation+0x63e>
 80035ce:	4b5f      	ldr	r3, [pc, #380]	; (800374c <SystemActivation+0x7a4>)
 80035d0:	891b      	ldrh	r3, [r3, #8]
 80035d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d005      	beq.n	80035e6 <SystemActivation+0x63e>
 80035da:	4b5c      	ldr	r3, [pc, #368]	; (800374c <SystemActivation+0x7a4>)
 80035dc:	895b      	ldrh	r3, [r3, #10]
 80035de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d15f      	bne.n	80036a6 <SystemActivation+0x6fe>
		memset(PrintBuffer, '\0', COMM_SIZE); snprintf(PrintBuffer, COMM_SIZE-1, "\n\r\t- EEPROM data is invalid -> Memory Must be Programmed"  );
 80035e6:	2280      	movs	r2, #128	; 0x80
 80035e8:	2100      	movs	r1, #0
 80035ea:	4855      	ldr	r0, [pc, #340]	; (8003740 <SystemActivation+0x798>)
 80035ec:	f006 fbf7 	bl	8009dde <memset>
 80035f0:	4a57      	ldr	r2, [pc, #348]	; (8003750 <SystemActivation+0x7a8>)
 80035f2:	217f      	movs	r1, #127	; 0x7f
 80035f4:	4852      	ldr	r0, [pc, #328]	; (8003740 <SystemActivation+0x798>)
 80035f6:	f006 fb5b 	bl	8009cb0 <sniprintf>
		DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE);
 80035fa:	4b53      	ldr	r3, [pc, #332]	; (8003748 <SystemActivation+0x7a0>)
 80035fc:	781b      	ldrb	r3, [r3, #0]
 80035fe:	2280      	movs	r2, #128	; 0x80
 8003600:	494f      	ldr	r1, [pc, #316]	; (8003740 <SystemActivation+0x798>)
 8003602:	4618      	mov	r0, r3
 8003604:	f7fd fd94 	bl	8001130 <DebugPrint>
		memset(PrintBuffer, '\0', COMM_SIZE); snprintf(PrintBuffer, COMM_SIZE-1, "\n\r\t- Serial Number:\t0x%04X", SysInfo.SerialNumber );
 8003608:	2280      	movs	r2, #128	; 0x80
 800360a:	2100      	movs	r1, #0
 800360c:	484c      	ldr	r0, [pc, #304]	; (8003740 <SystemActivation+0x798>)
 800360e:	f006 fbe6 	bl	8009dde <memset>
 8003612:	4b4e      	ldr	r3, [pc, #312]	; (800374c <SystemActivation+0x7a4>)
 8003614:	889b      	ldrh	r3, [r3, #4]
 8003616:	4a4f      	ldr	r2, [pc, #316]	; (8003754 <SystemActivation+0x7ac>)
 8003618:	217f      	movs	r1, #127	; 0x7f
 800361a:	4849      	ldr	r0, [pc, #292]	; (8003740 <SystemActivation+0x798>)
 800361c:	f006 fb48 	bl	8009cb0 <sniprintf>
		DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE);
 8003620:	4b49      	ldr	r3, [pc, #292]	; (8003748 <SystemActivation+0x7a0>)
 8003622:	781b      	ldrb	r3, [r3, #0]
 8003624:	2280      	movs	r2, #128	; 0x80
 8003626:	4946      	ldr	r1, [pc, #280]	; (8003740 <SystemActivation+0x798>)
 8003628:	4618      	mov	r0, r3
 800362a:	f7fd fd81 	bl	8001130 <DebugPrint>
		memset(PrintBuffer, '\0', COMM_SIZE); snprintf(PrintBuffer, COMM_SIZE-1, "\n\r\t- CAN Address:\t0x%04X", SysInfo.CAN_Address );
 800362e:	2280      	movs	r2, #128	; 0x80
 8003630:	2100      	movs	r1, #0
 8003632:	4843      	ldr	r0, [pc, #268]	; (8003740 <SystemActivation+0x798>)
 8003634:	f006 fbd3 	bl	8009dde <memset>
 8003638:	4b44      	ldr	r3, [pc, #272]	; (800374c <SystemActivation+0x7a4>)
 800363a:	891b      	ldrh	r3, [r3, #8]
 800363c:	4a46      	ldr	r2, [pc, #280]	; (8003758 <SystemActivation+0x7b0>)
 800363e:	217f      	movs	r1, #127	; 0x7f
 8003640:	483f      	ldr	r0, [pc, #252]	; (8003740 <SystemActivation+0x798>)
 8003642:	f006 fb35 	bl	8009cb0 <sniprintf>
		DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE);
 8003646:	4b40      	ldr	r3, [pc, #256]	; (8003748 <SystemActivation+0x7a0>)
 8003648:	781b      	ldrb	r3, [r3, #0]
 800364a:	2280      	movs	r2, #128	; 0x80
 800364c:	493c      	ldr	r1, [pc, #240]	; (8003740 <SystemActivation+0x798>)
 800364e:	4618      	mov	r0, r3
 8003650:	f7fd fd6e 	bl	8001130 <DebugPrint>
		memset(PrintBuffer, '\0', COMM_SIZE); snprintf(PrintBuffer, COMM_SIZE-1, "\n\r\t- Sensor Type:\t%u", SysInfo.SensorType);
 8003654:	2280      	movs	r2, #128	; 0x80
 8003656:	2100      	movs	r1, #0
 8003658:	4839      	ldr	r0, [pc, #228]	; (8003740 <SystemActivation+0x798>)
 800365a:	f006 fbc0 	bl	8009dde <memset>
 800365e:	4b3b      	ldr	r3, [pc, #236]	; (800374c <SystemActivation+0x7a4>)
 8003660:	799b      	ldrb	r3, [r3, #6]
 8003662:	4a3e      	ldr	r2, [pc, #248]	; (800375c <SystemActivation+0x7b4>)
 8003664:	217f      	movs	r1, #127	; 0x7f
 8003666:	4836      	ldr	r0, [pc, #216]	; (8003740 <SystemActivation+0x798>)
 8003668:	f006 fb22 	bl	8009cb0 <sniprintf>
		DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE);
 800366c:	4b36      	ldr	r3, [pc, #216]	; (8003748 <SystemActivation+0x7a0>)
 800366e:	781b      	ldrb	r3, [r3, #0]
 8003670:	2280      	movs	r2, #128	; 0x80
 8003672:	4933      	ldr	r1, [pc, #204]	; (8003740 <SystemActivation+0x798>)
 8003674:	4618      	mov	r0, r3
 8003676:	f7fd fd5b 	bl	8001130 <DebugPrint>
		memset(PrintBuffer, '\0', COMM_SIZE); snprintf(PrintBuffer, COMM_SIZE-1, "\n\r\t- EEPROM Address:\t0x%04X", SysInfo.EEPROM_Address );
 800367a:	2280      	movs	r2, #128	; 0x80
 800367c:	2100      	movs	r1, #0
 800367e:	4830      	ldr	r0, [pc, #192]	; (8003740 <SystemActivation+0x798>)
 8003680:	f006 fbad 	bl	8009dde <memset>
 8003684:	4b31      	ldr	r3, [pc, #196]	; (800374c <SystemActivation+0x7a4>)
 8003686:	895b      	ldrh	r3, [r3, #10]
 8003688:	4a35      	ldr	r2, [pc, #212]	; (8003760 <SystemActivation+0x7b8>)
 800368a:	217f      	movs	r1, #127	; 0x7f
 800368c:	482c      	ldr	r0, [pc, #176]	; (8003740 <SystemActivation+0x798>)
 800368e:	f006 fb0f 	bl	8009cb0 <sniprintf>
		DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE);
 8003692:	4b2d      	ldr	r3, [pc, #180]	; (8003748 <SystemActivation+0x7a0>)
 8003694:	781b      	ldrb	r3, [r3, #0]
 8003696:	2280      	movs	r2, #128	; 0x80
 8003698:	4929      	ldr	r1, [pc, #164]	; (8003740 <SystemActivation+0x798>)
 800369a:	4618      	mov	r0, r3
 800369c:	f7fd fd48 	bl	8001130 <DebugPrint>
		SystemActivationFlag = false;
 80036a0:	2300      	movs	r3, #0
 80036a2:	75fb      	strb	r3, [r7, #23]
 80036a4:	e010      	b.n	80036c8 <SystemActivation+0x720>
	}else{
		memset(PrintBuffer, '\0', COMM_SIZE); snprintf(PrintBuffer, COMM_SIZE-1, "\n\r\t- EEPROM data is valid");
 80036a6:	2280      	movs	r2, #128	; 0x80
 80036a8:	2100      	movs	r1, #0
 80036aa:	4825      	ldr	r0, [pc, #148]	; (8003740 <SystemActivation+0x798>)
 80036ac:	f006 fb97 	bl	8009dde <memset>
 80036b0:	4a2c      	ldr	r2, [pc, #176]	; (8003764 <SystemActivation+0x7bc>)
 80036b2:	217f      	movs	r1, #127	; 0x7f
 80036b4:	4822      	ldr	r0, [pc, #136]	; (8003740 <SystemActivation+0x798>)
 80036b6:	f006 fafb 	bl	8009cb0 <sniprintf>
		DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE);
 80036ba:	4b23      	ldr	r3, [pc, #140]	; (8003748 <SystemActivation+0x7a0>)
 80036bc:	781b      	ldrb	r3, [r3, #0]
 80036be:	2280      	movs	r2, #128	; 0x80
 80036c0:	491f      	ldr	r1, [pc, #124]	; (8003740 <SystemActivation+0x798>)
 80036c2:	4618      	mov	r0, r3
 80036c4:	f7fd fd34 	bl	8001130 <DebugPrint>
	//////////////////////////////////////////////////////////////////////////////
	/////////////// Display Sensor Configuration on Indication LEDs //////////////
	//////////////////////////////////////////////////////////////////////////////

	//Set indication lights to show sensor type
	if(SysInfo.SensorType>15){
 80036c8:	4b20      	ldr	r3, [pc, #128]	; (800374c <SystemActivation+0x7a4>)
 80036ca:	799b      	ldrb	r3, [r3, #6]
 80036cc:	2b0f      	cmp	r3, #15
 80036ce:	d90c      	bls.n	80036ea <SystemActivation+0x742>
		Set_LED_Indication5(1);
 80036d0:	2001      	movs	r0, #1
 80036d2:	f7fd fbd7 	bl	8000e84 <Set_LED_Indication5>
		Set_LED_Indication4(1);
 80036d6:	2001      	movs	r0, #1
 80036d8:	f7fd fbc2 	bl	8000e60 <Set_LED_Indication4>
		Set_LED_Indication3(1);
 80036dc:	2001      	movs	r0, #1
 80036de:	f7fd fbad 	bl	8000e3c <Set_LED_Indication3>
		Set_LED_Indication2(1);
 80036e2:	2001      	movs	r0, #1
 80036e4:	f7fd fb98 	bl	8000e18 <Set_LED_Indication2>
 80036e8:	e025      	b.n	8003736 <SystemActivation+0x78e>
	}else{
		Set_LED_Indication5( (SysInfo.SensorType>>3)&0x01 );
 80036ea:	4b18      	ldr	r3, [pc, #96]	; (800374c <SystemActivation+0x7a4>)
 80036ec:	799b      	ldrb	r3, [r3, #6]
 80036ee:	08db      	lsrs	r3, r3, #3
 80036f0:	b2db      	uxtb	r3, r3
 80036f2:	f003 0301 	and.w	r3, r3, #1
 80036f6:	b2db      	uxtb	r3, r3
 80036f8:	4618      	mov	r0, r3
 80036fa:	f7fd fbc3 	bl	8000e84 <Set_LED_Indication5>
		Set_LED_Indication4( (SysInfo.SensorType>>2)&0x01 );
 80036fe:	4b13      	ldr	r3, [pc, #76]	; (800374c <SystemActivation+0x7a4>)
 8003700:	799b      	ldrb	r3, [r3, #6]
 8003702:	089b      	lsrs	r3, r3, #2
 8003704:	b2db      	uxtb	r3, r3
 8003706:	f003 0301 	and.w	r3, r3, #1
 800370a:	b2db      	uxtb	r3, r3
 800370c:	4618      	mov	r0, r3
 800370e:	f7fd fba7 	bl	8000e60 <Set_LED_Indication4>
		Set_LED_Indication3( (SysInfo.SensorType>>1)&0x01 );
 8003712:	4b0e      	ldr	r3, [pc, #56]	; (800374c <SystemActivation+0x7a4>)
 8003714:	799b      	ldrb	r3, [r3, #6]
 8003716:	085b      	lsrs	r3, r3, #1
 8003718:	b2db      	uxtb	r3, r3
 800371a:	f003 0301 	and.w	r3, r3, #1
 800371e:	b2db      	uxtb	r3, r3
 8003720:	4618      	mov	r0, r3
 8003722:	f7fd fb8b 	bl	8000e3c <Set_LED_Indication3>
		Set_LED_Indication2( (SysInfo.SensorType>>0)&0x01 );
 8003726:	4b09      	ldr	r3, [pc, #36]	; (800374c <SystemActivation+0x7a4>)
 8003728:	799b      	ldrb	r3, [r3, #6]
 800372a:	f003 0301 	and.w	r3, r3, #1
 800372e:	b2db      	uxtb	r3, r3
 8003730:	4618      	mov	r0, r3
 8003732:	f7fd fb71 	bl	8000e18 <Set_LED_Indication2>
	}




	return SystemActivationFlag;
 8003736:	7dfb      	ldrb	r3, [r7, #23]
}
 8003738:	4618      	mov	r0, r3
 800373a:	3718      	adds	r7, #24
 800373c:	46bd      	mov	sp, r7
 800373e:	bd80      	pop	{r7, pc}
 8003740:	200004e8 	.word	0x200004e8
 8003744:	0800e19c 	.word	0x0800e19c
 8003748:	2000004b 	.word	0x2000004b
 800374c:	200004dc 	.word	0x200004dc
 8003750:	0800e1d0 	.word	0x0800e1d0
 8003754:	0800e20c 	.word	0x0800e20c
 8003758:	0800e228 	.word	0x0800e228
 800375c:	0800e244 	.word	0x0800e244
 8003760:	0800e25c 	.word	0x0800e25c
 8003764:	0800e278 	.word	0x0800e278

08003768 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003768:	f8df d034 	ldr.w	sp, [pc, #52]	; 80037a0 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 800376c:	f7fe fd5a 	bl	8002224 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003770:	480c      	ldr	r0, [pc, #48]	; (80037a4 <LoopForever+0x6>)
  ldr r1, =_edata
 8003772:	490d      	ldr	r1, [pc, #52]	; (80037a8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003774:	4a0d      	ldr	r2, [pc, #52]	; (80037ac <LoopForever+0xe>)
  movs r3, #0
 8003776:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003778:	e002      	b.n	8003780 <LoopCopyDataInit>

0800377a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800377a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800377c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800377e:	3304      	adds	r3, #4

08003780 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003780:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003782:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003784:	d3f9      	bcc.n	800377a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003786:	4a0a      	ldr	r2, [pc, #40]	; (80037b0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003788:	4c0a      	ldr	r4, [pc, #40]	; (80037b4 <LoopForever+0x16>)
  movs r3, #0
 800378a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800378c:	e001      	b.n	8003792 <LoopFillZerobss>

0800378e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800378e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003790:	3204      	adds	r2, #4

08003792 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003792:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003794:	d3fb      	bcc.n	800378e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003796:	f006 fb7b 	bl	8009e90 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800379a:	f7fd fd25 	bl	80011e8 <main>

0800379e <LoopForever>:

LoopForever:
    b LoopForever
 800379e:	e7fe      	b.n	800379e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80037a0:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80037a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80037a8:	20000224 	.word	0x20000224
  ldr r2, =_sidata
 80037ac:	0800e700 	.word	0x0800e700
  ldr r2, =_sbss
 80037b0:	20000224 	.word	0x20000224
  ldr r4, =_ebss
 80037b4:	20000754 	.word	0x20000754

080037b8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80037b8:	e7fe      	b.n	80037b8 <ADC1_2_IRQHandler>
	...

080037bc <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80037c0:	4b08      	ldr	r3, [pc, #32]	; (80037e4 <HAL_Init+0x28>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a07      	ldr	r2, [pc, #28]	; (80037e4 <HAL_Init+0x28>)
 80037c6:	f043 0310 	orr.w	r3, r3, #16
 80037ca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80037cc:	2003      	movs	r0, #3
 80037ce:	f001 fe69 	bl	80054a4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80037d2:	200f      	movs	r0, #15
 80037d4:	f000 f808 	bl	80037e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80037d8:	f7fe fa22 	bl	8001c20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80037dc:	2300      	movs	r3, #0
}
 80037de:	4618      	mov	r0, r3
 80037e0:	bd80      	pop	{r7, pc}
 80037e2:	bf00      	nop
 80037e4:	40022000 	.word	0x40022000

080037e8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b082      	sub	sp, #8
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80037f0:	4b12      	ldr	r3, [pc, #72]	; (800383c <HAL_InitTick+0x54>)
 80037f2:	681a      	ldr	r2, [r3, #0]
 80037f4:	4b12      	ldr	r3, [pc, #72]	; (8003840 <HAL_InitTick+0x58>)
 80037f6:	781b      	ldrb	r3, [r3, #0]
 80037f8:	4619      	mov	r1, r3
 80037fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80037fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8003802:	fbb2 f3f3 	udiv	r3, r2, r3
 8003806:	4618      	mov	r0, r3
 8003808:	f001 fe81 	bl	800550e <HAL_SYSTICK_Config>
 800380c:	4603      	mov	r3, r0
 800380e:	2b00      	cmp	r3, #0
 8003810:	d001      	beq.n	8003816 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	e00e      	b.n	8003834 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2b0f      	cmp	r3, #15
 800381a:	d80a      	bhi.n	8003832 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800381c:	2200      	movs	r2, #0
 800381e:	6879      	ldr	r1, [r7, #4]
 8003820:	f04f 30ff 	mov.w	r0, #4294967295
 8003824:	f001 fe49 	bl	80054ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003828:	4a06      	ldr	r2, [pc, #24]	; (8003844 <HAL_InitTick+0x5c>)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800382e:	2300      	movs	r3, #0
 8003830:	e000      	b.n	8003834 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003832:	2301      	movs	r3, #1
}
 8003834:	4618      	mov	r0, r3
 8003836:	3708      	adds	r7, #8
 8003838:	46bd      	mov	sp, r7
 800383a:	bd80      	pop	{r7, pc}
 800383c:	20000050 	.word	0x20000050
 8003840:	20000058 	.word	0x20000058
 8003844:	20000054 	.word	0x20000054

08003848 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003848:	b480      	push	{r7}
 800384a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800384c:	4b06      	ldr	r3, [pc, #24]	; (8003868 <HAL_IncTick+0x20>)
 800384e:	781b      	ldrb	r3, [r3, #0]
 8003850:	461a      	mov	r2, r3
 8003852:	4b06      	ldr	r3, [pc, #24]	; (800386c <HAL_IncTick+0x24>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4413      	add	r3, r2
 8003858:	4a04      	ldr	r2, [pc, #16]	; (800386c <HAL_IncTick+0x24>)
 800385a:	6013      	str	r3, [r2, #0]
}
 800385c:	bf00      	nop
 800385e:	46bd      	mov	sp, r7
 8003860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003864:	4770      	bx	lr
 8003866:	bf00      	nop
 8003868:	20000058 	.word	0x20000058
 800386c:	20000604 	.word	0x20000604

08003870 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003870:	b480      	push	{r7}
 8003872:	af00      	add	r7, sp, #0
  return uwTick;  
 8003874:	4b03      	ldr	r3, [pc, #12]	; (8003884 <HAL_GetTick+0x14>)
 8003876:	681b      	ldr	r3, [r3, #0]
}
 8003878:	4618      	mov	r0, r3
 800387a:	46bd      	mov	sp, r7
 800387c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003880:	4770      	bx	lr
 8003882:	bf00      	nop
 8003884:	20000604 	.word	0x20000604

08003888 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b084      	sub	sp, #16
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003890:	f7ff ffee 	bl	8003870 <HAL_GetTick>
 8003894:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038a0:	d005      	beq.n	80038ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80038a2:	4b0a      	ldr	r3, [pc, #40]	; (80038cc <HAL_Delay+0x44>)
 80038a4:	781b      	ldrb	r3, [r3, #0]
 80038a6:	461a      	mov	r2, r3
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	4413      	add	r3, r2
 80038ac:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80038ae:	bf00      	nop
 80038b0:	f7ff ffde 	bl	8003870 <HAL_GetTick>
 80038b4:	4602      	mov	r2, r0
 80038b6:	68bb      	ldr	r3, [r7, #8]
 80038b8:	1ad3      	subs	r3, r2, r3
 80038ba:	68fa      	ldr	r2, [r7, #12]
 80038bc:	429a      	cmp	r2, r3
 80038be:	d8f7      	bhi.n	80038b0 <HAL_Delay+0x28>
  {
  }
}
 80038c0:	bf00      	nop
 80038c2:	bf00      	nop
 80038c4:	3710      	adds	r7, #16
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bd80      	pop	{r7, pc}
 80038ca:	bf00      	nop
 80038cc:	20000058 	.word	0x20000058

080038d0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b09a      	sub	sp, #104	; 0x68
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80038d8:	2300      	movs	r3, #0
 80038da:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 80038de:	2300      	movs	r3, #0
 80038e0:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 80038e2:	2300      	movs	r3, #0
 80038e4:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d101      	bne.n	80038f0 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80038ec:	2301      	movs	r3, #1
 80038ee:	e172      	b.n	8003bd6 <HAL_ADC_Init+0x306>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	691b      	ldr	r3, [r3, #16]
 80038f4:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038fa:	f003 0310 	and.w	r3, r3, #16
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d176      	bne.n	80039f0 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003906:	2b00      	cmp	r3, #0
 8003908:	d152      	bne.n	80039b0 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2200      	movs	r2, #0
 800390e:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2200      	movs	r2, #0
 8003914:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2200      	movs	r2, #0
 800391a:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2200      	movs	r2, #0
 8003920:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003924:	6878      	ldr	r0, [r7, #4]
 8003926:	f7fe f99f 	bl	8001c68 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	689b      	ldr	r3, [r3, #8]
 8003930:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003934:	2b00      	cmp	r3, #0
 8003936:	d13b      	bne.n	80039b0 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8003938:	6878      	ldr	r0, [r7, #4]
 800393a:	f000 ff7d 	bl	8004838 <ADC_Disable>
 800393e:	4603      	mov	r3, r0
 8003940:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003948:	f003 0310 	and.w	r3, r3, #16
 800394c:	2b00      	cmp	r3, #0
 800394e:	d12f      	bne.n	80039b0 <HAL_ADC_Init+0xe0>
 8003950:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8003954:	2b00      	cmp	r3, #0
 8003956:	d12b      	bne.n	80039b0 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800395c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003960:	f023 0302 	bic.w	r3, r3, #2
 8003964:	f043 0202 	orr.w	r2, r3, #2
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	689a      	ldr	r2, [r3, #8]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800397a:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	689a      	ldr	r2, [r3, #8]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800398a:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800398c:	4b94      	ldr	r3, [pc, #592]	; (8003be0 <HAL_ADC_Init+0x310>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4a94      	ldr	r2, [pc, #592]	; (8003be4 <HAL_ADC_Init+0x314>)
 8003992:	fba2 2303 	umull	r2, r3, r2, r3
 8003996:	0c9a      	lsrs	r2, r3, #18
 8003998:	4613      	mov	r3, r2
 800399a:	009b      	lsls	r3, r3, #2
 800399c:	4413      	add	r3, r2
 800399e:	005b      	lsls	r3, r3, #1
 80039a0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80039a2:	e002      	b.n	80039aa <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 80039a4:	68bb      	ldr	r3, [r7, #8]
 80039a6:	3b01      	subs	r3, #1
 80039a8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80039aa:	68bb      	ldr	r3, [r7, #8]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d1f9      	bne.n	80039a4 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	689b      	ldr	r3, [r3, #8]
 80039b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d007      	beq.n	80039ce <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	689b      	ldr	r3, [r3, #8]
 80039c4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80039c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80039cc:	d110      	bne.n	80039f0 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d2:	f023 0312 	bic.w	r3, r3, #18
 80039d6:	f043 0210 	orr.w	r2, r3, #16
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039e2:	f043 0201 	orr.w	r2, r3, #1
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 80039ea:	2301      	movs	r3, #1
 80039ec:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039f4:	f003 0310 	and.w	r3, r3, #16
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	f040 80df 	bne.w	8003bbc <HAL_ADC_Init+0x2ec>
 80039fe:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	f040 80da 	bne.w	8003bbc <HAL_ADC_Init+0x2ec>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	689b      	ldr	r3, [r3, #8]
 8003a0e:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	f040 80d2 	bne.w	8003bbc <HAL_ADC_Init+0x2ec>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a1c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003a20:	f043 0202 	orr.w	r2, r3, #2
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003a28:	4b6f      	ldr	r3, [pc, #444]	; (8003be8 <HAL_ADC_Init+0x318>)
 8003a2a:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003a34:	d102      	bne.n	8003a3c <HAL_ADC_Init+0x16c>
 8003a36:	4b6d      	ldr	r3, [pc, #436]	; (8003bec <HAL_ADC_Init+0x31c>)
 8003a38:	60fb      	str	r3, [r7, #12]
 8003a3a:	e002      	b.n	8003a42 <HAL_ADC_Init+0x172>
 8003a3c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003a40:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	689b      	ldr	r3, [r3, #8]
 8003a48:	f003 0303 	and.w	r3, r3, #3
 8003a4c:	2b01      	cmp	r3, #1
 8003a4e:	d108      	bne.n	8003a62 <HAL_ADC_Init+0x192>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f003 0301 	and.w	r3, r3, #1
 8003a5a:	2b01      	cmp	r3, #1
 8003a5c:	d101      	bne.n	8003a62 <HAL_ADC_Init+0x192>
 8003a5e:	2301      	movs	r3, #1
 8003a60:	e000      	b.n	8003a64 <HAL_ADC_Init+0x194>
 8003a62:	2300      	movs	r3, #0
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d11c      	bne.n	8003aa2 <HAL_ADC_Init+0x1d2>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8003a68:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d010      	beq.n	8003a90 <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	689b      	ldr	r3, [r3, #8]
 8003a72:	f003 0303 	and.w	r3, r3, #3
 8003a76:	2b01      	cmp	r3, #1
 8003a78:	d107      	bne.n	8003a8a <HAL_ADC_Init+0x1ba>
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f003 0301 	and.w	r3, r3, #1
 8003a82:	2b01      	cmp	r3, #1
 8003a84:	d101      	bne.n	8003a8a <HAL_ADC_Init+0x1ba>
 8003a86:	2301      	movs	r3, #1
 8003a88:	e000      	b.n	8003a8c <HAL_ADC_Init+0x1bc>
 8003a8a:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d108      	bne.n	8003aa2 <HAL_ADC_Init+0x1d2>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8003a90:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a92:	689b      	ldr	r3, [r3, #8]
 8003a94:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	431a      	orrs	r2, r3
 8003a9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003aa0:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	7e5b      	ldrb	r3, [r3, #25]
 8003aa6:	035b      	lsls	r3, r3, #13
 8003aa8:	687a      	ldr	r2, [r7, #4]
 8003aaa:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003aac:	2a01      	cmp	r2, #1
 8003aae:	d002      	beq.n	8003ab6 <HAL_ADC_Init+0x1e6>
 8003ab0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003ab4:	e000      	b.n	8003ab8 <HAL_ADC_Init+0x1e8>
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	431a      	orrs	r2, r3
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	68db      	ldr	r3, [r3, #12]
 8003abe:	431a      	orrs	r2, r3
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	689b      	ldr	r3, [r3, #8]
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003ad2:	2b01      	cmp	r3, #1
 8003ad4:	d11b      	bne.n	8003b0e <HAL_ADC_Init+0x23e>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	7e5b      	ldrb	r3, [r3, #25]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d109      	bne.n	8003af2 <HAL_ADC_Init+0x222>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae2:	3b01      	subs	r3, #1
 8003ae4:	045a      	lsls	r2, r3, #17
 8003ae6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003ae8:	4313      	orrs	r3, r2
 8003aea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003aee:	663b      	str	r3, [r7, #96]	; 0x60
 8003af0:	e00d      	b.n	8003b0e <HAL_ADC_Init+0x23e>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003afa:	f043 0220 	orr.w	r2, r3, #32
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b06:	f043 0201 	orr.w	r2, r3, #1
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b12:	2b01      	cmp	r3, #1
 8003b14:	d007      	beq.n	8003b26 <HAL_ADC_Init+0x256>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003b22:	4313      	orrs	r3, r2
 8003b24:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	689b      	ldr	r3, [r3, #8]
 8003b2c:	f003 030c 	and.w	r3, r3, #12
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d114      	bne.n	8003b5e <HAL_ADC_Init+0x28e>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	68db      	ldr	r3, [r3, #12]
 8003b3a:	687a      	ldr	r2, [r7, #4]
 8003b3c:	6812      	ldr	r2, [r2, #0]
 8003b3e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003b42:	f023 0302 	bic.w	r3, r3, #2
 8003b46:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	7e1b      	ldrb	r3, [r3, #24]
 8003b4c:	039a      	lsls	r2, r3, #14
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003b54:	005b      	lsls	r3, r3, #1
 8003b56:	4313      	orrs	r3, r2
 8003b58:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	68da      	ldr	r2, [r3, #12]
 8003b64:	4b22      	ldr	r3, [pc, #136]	; (8003bf0 <HAL_ADC_Init+0x320>)
 8003b66:	4013      	ands	r3, r2
 8003b68:	687a      	ldr	r2, [r7, #4]
 8003b6a:	6812      	ldr	r2, [r2, #0]
 8003b6c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8003b6e:	430b      	orrs	r3, r1
 8003b70:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	691b      	ldr	r3, [r3, #16]
 8003b76:	2b01      	cmp	r3, #1
 8003b78:	d10c      	bne.n	8003b94 <HAL_ADC_Init+0x2c4>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b80:	f023 010f 	bic.w	r1, r3, #15
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	69db      	ldr	r3, [r3, #28]
 8003b88:	1e5a      	subs	r2, r3, #1
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	430a      	orrs	r2, r1
 8003b90:	631a      	str	r2, [r3, #48]	; 0x30
 8003b92:	e007      	b.n	8003ba4 <HAL_ADC_Init+0x2d4>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f022 020f 	bic.w	r2, r2, #15
 8003ba2:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bae:	f023 0303 	bic.w	r3, r3, #3
 8003bb2:	f043 0201 	orr.w	r2, r3, #1
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	641a      	str	r2, [r3, #64]	; 0x40
 8003bba:	e00a      	b.n	8003bd2 <HAL_ADC_Init+0x302>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bc0:	f023 0312 	bic.w	r3, r3, #18
 8003bc4:	f043 0210 	orr.w	r2, r3, #16
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8003bcc:	2301      	movs	r3, #1
 8003bce:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8003bd2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	3768      	adds	r7, #104	; 0x68
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bd80      	pop	{r7, pc}
 8003bde:	bf00      	nop
 8003be0:	20000050 	.word	0x20000050
 8003be4:	431bde83 	.word	0x431bde83
 8003be8:	50000300 	.word	0x50000300
 8003bec:	50000100 	.word	0x50000100
 8003bf0:	fff0c007 	.word	0xfff0c007

08003bf4 <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b084      	sub	sp, #16
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	689b      	ldr	r3, [r3, #8]
 8003c06:	f003 0304 	and.w	r3, r3, #4
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	f040 809c 	bne.w	8003d48 <HAL_ADC_Start+0x154>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c16:	2b01      	cmp	r3, #1
 8003c18:	d101      	bne.n	8003c1e <HAL_ADC_Start+0x2a>
 8003c1a:	2302      	movs	r3, #2
 8003c1c:	e097      	b.n	8003d4e <HAL_ADC_Start+0x15a>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2201      	movs	r2, #1
 8003c22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003c26:	6878      	ldr	r0, [r7, #4]
 8003c28:	f000 fda2 	bl	8004770 <ADC_Enable>
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003c30:	7bfb      	ldrb	r3, [r7, #15]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	f040 8083 	bne.w	8003d3e <HAL_ADC_Start+0x14a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c3c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003c40:	f023 0301 	bic.w	r3, r3, #1
 8003c44:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8003c4c:	4b42      	ldr	r3, [pc, #264]	; (8003d58 <HAL_ADC_Start+0x164>)
 8003c4e:	689b      	ldr	r3, [r3, #8]
 8003c50:	f003 031f 	and.w	r3, r3, #31
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d004      	beq.n	8003c62 <HAL_ADC_Start+0x6e>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003c60:	d115      	bne.n	8003c8e <HAL_ADC_Start+0x9a>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c66:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	68db      	ldr	r3, [r3, #12]
 8003c74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d027      	beq.n	8003ccc <HAL_ADC_Start+0xd8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c80:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003c84:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8003c8c:	e01e      	b.n	8003ccc <HAL_ADC_Start+0xd8>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c92:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003ca2:	d004      	beq.n	8003cae <HAL_ADC_Start+0xba>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a2c      	ldr	r2, [pc, #176]	; (8003d5c <HAL_ADC_Start+0x168>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d10e      	bne.n	8003ccc <HAL_ADC_Start+0xd8>
 8003cae:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003cb2:	68db      	ldr	r3, [r3, #12]
 8003cb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d007      	beq.n	8003ccc <HAL_ADC_Start+0xd8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cc0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003cc4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cd0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003cd4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cd8:	d106      	bne.n	8003ce8 <HAL_ADC_Start+0xf4>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cde:	f023 0206 	bic.w	r2, r3, #6
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	645a      	str	r2, [r3, #68]	; 0x44
 8003ce6:	e002      	b.n	8003cee <HAL_ADC_Start+0xfa>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2200      	movs	r2, #0
 8003cec:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	221c      	movs	r2, #28
 8003cfc:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8003cfe:	4b16      	ldr	r3, [pc, #88]	; (8003d58 <HAL_ADC_Start+0x164>)
 8003d00:	689b      	ldr	r3, [r3, #8]
 8003d02:	f003 031f 	and.w	r3, r3, #31
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d010      	beq.n	8003d2c <HAL_ADC_Start+0x138>
 8003d0a:	4b13      	ldr	r3, [pc, #76]	; (8003d58 <HAL_ADC_Start+0x164>)
 8003d0c:	689b      	ldr	r3, [r3, #8]
 8003d0e:	f003 031f 	and.w	r3, r3, #31
 8003d12:	2b05      	cmp	r3, #5
 8003d14:	d00a      	beq.n	8003d2c <HAL_ADC_Start+0x138>
 8003d16:	4b10      	ldr	r3, [pc, #64]	; (8003d58 <HAL_ADC_Start+0x164>)
 8003d18:	689b      	ldr	r3, [r3, #8]
 8003d1a:	f003 031f 	and.w	r3, r3, #31
 8003d1e:	2b09      	cmp	r3, #9
 8003d20:	d004      	beq.n	8003d2c <HAL_ADC_Start+0x138>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003d2a:	d10f      	bne.n	8003d4c <HAL_ADC_Start+0x158>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	689a      	ldr	r2, [r3, #8]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f042 0204 	orr.w	r2, r2, #4
 8003d3a:	609a      	str	r2, [r3, #8]
 8003d3c:	e006      	b.n	8003d4c <HAL_ADC_Start+0x158>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2200      	movs	r2, #0
 8003d42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003d46:	e001      	b.n	8003d4c <HAL_ADC_Start+0x158>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003d48:	2302      	movs	r3, #2
 8003d4a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003d4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d4e:	4618      	mov	r0, r3
 8003d50:	3710      	adds	r7, #16
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bd80      	pop	{r7, pc}
 8003d56:	bf00      	nop
 8003d58:	50000300 	.word	0x50000300
 8003d5c:	50000100 	.word	0x50000100

08003d60 <HAL_ADC_Stop>:
  *         use function @ref HAL_ADCEx_RegularStop().
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b084      	sub	sp, #16
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003d68:	2300      	movs	r3, #0
 8003d6a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d72:	2b01      	cmp	r3, #1
 8003d74:	d101      	bne.n	8003d7a <HAL_ADC_Stop+0x1a>
 8003d76:	2302      	movs	r3, #2
 8003d78:	e023      	b.n	8003dc2 <HAL_ADC_Stop+0x62>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2201      	movs	r2, #1
 8003d7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* 1. Stop potential conversion on going, on regular and injected groups */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8003d82:	216c      	movs	r1, #108	; 0x6c
 8003d84:	6878      	ldr	r0, [r7, #4]
 8003d86:	f000 fdbd 	bl	8004904 <ADC_ConversionStop>
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	73fb      	strb	r3, [r7, #15]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8003d8e:	7bfb      	ldrb	r3, [r7, #15]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d111      	bne.n	8003db8 <HAL_ADC_Stop+0x58>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8003d94:	6878      	ldr	r0, [r7, #4]
 8003d96:	f000 fd4f 	bl	8004838 <ADC_Disable>
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	73fb      	strb	r3, [r7, #15]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8003d9e:	7bfb      	ldrb	r3, [r7, #15]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d109      	bne.n	8003db8 <HAL_ADC_Stop+0x58>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003da8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003dac:	f023 0301 	bic.w	r3, r3, #1
 8003db0:	f043 0201 	orr.w	r2, r3, #1
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2200      	movs	r2, #0
 8003dbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8003dc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	3710      	adds	r7, #16
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bd80      	pop	{r7, pc}
	...

08003dcc <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b086      	sub	sp, #24
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
 8003dd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	695b      	ldr	r3, [r3, #20]
 8003dde:	2b08      	cmp	r3, #8
 8003de0:	d102      	bne.n	8003de8 <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8003de2:	2308      	movs	r3, #8
 8003de4:	617b      	str	r3, [r7, #20]
 8003de6:	e02e      	b.n	8003e46 <HAL_ADC_PollForConversion+0x7a>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003de8:	4b5e      	ldr	r3, [pc, #376]	; (8003f64 <HAL_ADC_PollForConversion+0x198>)
 8003dea:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	689b      	ldr	r3, [r3, #8]
 8003df0:	f003 031f 	and.w	r3, r3, #31
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d112      	bne.n	8003e1e <HAL_ADC_PollForConversion+0x52>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	68db      	ldr	r3, [r3, #12]
 8003dfe:	f003 0301 	and.w	r3, r3, #1
 8003e02:	2b01      	cmp	r3, #1
 8003e04:	d11d      	bne.n	8003e42 <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e0a:	f043 0220 	orr.w	r2, r3, #32
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2200      	movs	r2, #0
 8003e16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	e09d      	b.n	8003f5a <HAL_ADC_PollForConversion+0x18e>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	689b      	ldr	r3, [r3, #8]
 8003e22:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d00b      	beq.n	8003e42 <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e2e:	f043 0220 	orr.w	r2, r3, #32
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2200      	movs	r2, #0
 8003e3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	e08b      	b.n	8003f5a <HAL_ADC_PollForConversion+0x18e>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8003e42:	230c      	movs	r3, #12
 8003e44:	617b      	str	r3, [r7, #20]
  }
  
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8003e46:	4b47      	ldr	r3, [pc, #284]	; (8003f64 <HAL_ADC_PollForConversion+0x198>)
 8003e48:	689b      	ldr	r3, [r3, #8]
 8003e4a:	f003 031f 	and.w	r3, r3, #31
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d004      	beq.n	8003e5c <HAL_ADC_PollForConversion+0x90>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003e5a:	d104      	bne.n	8003e66 <HAL_ADC_PollForConversion+0x9a>
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	68db      	ldr	r3, [r3, #12]
 8003e62:	613b      	str	r3, [r7, #16]
 8003e64:	e003      	b.n	8003e6e <HAL_ADC_PollForConversion+0xa2>
  }
  else
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8003e66:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003e6a:	68db      	ldr	r3, [r3, #12]
 8003e6c:	613b      	str	r3, [r7, #16]
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 8003e6e:	f7ff fcff 	bl	8003870 <HAL_GetTick>
 8003e72:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8003e74:	e021      	b.n	8003eba <HAL_ADC_PollForConversion+0xee>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e7c:	d01d      	beq.n	8003eba <HAL_ADC_PollForConversion+0xee>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d007      	beq.n	8003e94 <HAL_ADC_PollForConversion+0xc8>
 8003e84:	f7ff fcf4 	bl	8003870 <HAL_GetTick>
 8003e88:	4602      	mov	r2, r0
 8003e8a:	68bb      	ldr	r3, [r7, #8]
 8003e8c:	1ad3      	subs	r3, r2, r3
 8003e8e:	683a      	ldr	r2, [r7, #0]
 8003e90:	429a      	cmp	r2, r3
 8003e92:	d212      	bcs.n	8003eba <HAL_ADC_PollForConversion+0xee>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	681a      	ldr	r2, [r3, #0]
 8003e9a:	697b      	ldr	r3, [r7, #20]
 8003e9c:	4013      	ands	r3, r2
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d10b      	bne.n	8003eba <HAL_ADC_PollForConversion+0xee>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ea6:	f043 0204 	orr.w	r2, r3, #4
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 8003eb6:	2303      	movs	r3, #3
 8003eb8:	e04f      	b.n	8003f5a <HAL_ADC_PollForConversion+0x18e>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	681a      	ldr	r2, [r3, #0]
 8003ec0:	697b      	ldr	r3, [r7, #20]
 8003ec2:	4013      	ands	r3, r2
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d0d6      	beq.n	8003e76 <HAL_ADC_PollForConversion+0xaa>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ecc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	68db      	ldr	r3, [r3, #12]
 8003eda:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d131      	bne.n	8003f46 <HAL_ADC_PollForConversion+0x17a>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 8003ee2:	693b      	ldr	r3, [r7, #16]
 8003ee4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d12c      	bne.n	8003f46 <HAL_ADC_PollForConversion+0x17a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f003 0308 	and.w	r3, r3, #8
 8003ef6:	2b08      	cmp	r3, #8
 8003ef8:	d125      	bne.n	8003f46 <HAL_ADC_PollForConversion+0x17a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	689b      	ldr	r3, [r3, #8]
 8003f00:	f003 0304 	and.w	r3, r3, #4
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d112      	bne.n	8003f2e <HAL_ADC_PollForConversion+0x162>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f0c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	641a      	str	r2, [r3, #64]	; 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f18:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d112      	bne.n	8003f46 <HAL_ADC_PollForConversion+0x17a>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f24:	f043 0201 	orr.w	r2, r3, #1
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	641a      	str	r2, [r3, #64]	; 0x40
 8003f2c:	e00b      	b.n	8003f46 <HAL_ADC_PollForConversion+0x17a>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f32:	f043 0220 	orr.w	r2, r3, #32
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f3e:	f043 0201 	orr.w	r2, r3, #1
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 8003f46:	693b      	ldr	r3, [r7, #16]
 8003f48:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d103      	bne.n	8003f58 <HAL_ADC_PollForConversion+0x18c>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	697a      	ldr	r2, [r7, #20]
 8003f56:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 8003f58:	2300      	movs	r3, #0
}
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	3718      	adds	r7, #24
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bd80      	pop	{r7, pc}
 8003f62:	bf00      	nop
 8003f64:	50000300 	.word	0x50000300

08003f68 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b083      	sub	sp, #12
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8003f76:	4618      	mov	r0, r3
 8003f78:	370c      	adds	r7, #12
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f80:	4770      	bx	lr

08003f82 <HAL_ADCEx_Calibration_Start>:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  *            @arg ADC_DIFFERENTIAL_ENDED: Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 8003f82:	b580      	push	{r7, lr}
 8003f84:	b084      	sub	sp, #16
 8003f86:	af00      	add	r7, sp, #0
 8003f88:	6078      	str	r0, [r7, #4]
 8003f8a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f96:	2b01      	cmp	r3, #1
 8003f98:	d101      	bne.n	8003f9e <HAL_ADCEx_Calibration_Start+0x1c>
 8003f9a:	2302      	movs	r3, #2
 8003f9c:	e05f      	b.n	800405e <HAL_ADCEx_Calibration_Start+0xdc>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2201      	movs	r2, #1
 8003fa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
   
  /* Calibration prerequisite: ADC must be disabled. */
   
  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003fa6:	6878      	ldr	r0, [r7, #4]
 8003fa8:	f000 fc46 	bl	8004838 <ADC_Disable>
 8003fac:	4603      	mov	r3, r0
 8003fae:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003fb0:	7bfb      	ldrb	r3, [r7, #15]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d14e      	bne.n	8004054 <HAL_ADCEx_Calibration_Start+0xd2>
  {
    /* Change ADC state */
    hadc->State = HAL_ADC_STATE_READY;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2201      	movs	r2, #1
 8003fba:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Select calibration mode single ended or differential ended */
    hadc->Instance->CR &= (~ADC_CR_ADCALDIF);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	689a      	ldr	r2, [r3, #8]
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 8003fca:	609a      	str	r2, [r3, #8]
    if (SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	2b01      	cmp	r3, #1
 8003fd0:	d107      	bne.n	8003fe2 <HAL_ADCEx_Calibration_Start+0x60>
    {
      hadc->Instance->CR |= ADC_CR_ADCALDIF;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	689a      	ldr	r2, [r3, #8]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003fe0:	609a      	str	r2, [r3, #8]
    }

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	689a      	ldr	r2, [r3, #8]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003ff0:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 8003ff2:	f7ff fc3d 	bl	8003870 <HAL_GetTick>
 8003ff6:	60b8      	str	r0, [r7, #8]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8003ff8:	e01c      	b.n	8004034 <HAL_ADCEx_Calibration_Start+0xb2>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8003ffa:	f7ff fc39 	bl	8003870 <HAL_GetTick>
 8003ffe:	4602      	mov	r2, r0
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	1ad3      	subs	r3, r2, r3
 8004004:	2b0a      	cmp	r3, #10
 8004006:	d915      	bls.n	8004034 <HAL_ADCEx_Calibration_Start+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	689b      	ldr	r3, [r3, #8]
 800400e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004012:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004016:	d10d      	bne.n	8004034 <HAL_ADCEx_Calibration_Start+0xb2>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800401c:	f023 0312 	bic.w	r3, r3, #18
 8004020:	f043 0210 	orr.w	r2, r3, #16
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2200      	movs	r2, #0
 800402c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004030:	2301      	movs	r3, #1
 8004032:	e014      	b.n	800405e <HAL_ADCEx_Calibration_Start+0xdc>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	689b      	ldr	r3, [r3, #8]
 800403a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800403e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004042:	d0da      	beq.n	8003ffa <HAL_ADCEx_Calibration_Start+0x78>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004048:	f023 0303 	bic.w	r3, r3, #3
 800404c:	f043 0201 	orr.w	r2, r3, #1
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2200      	movs	r2, #0
 8004058:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800405c:	7bfb      	ldrb	r3, [r7, #15]
}
 800405e:	4618      	mov	r0, r3
 8004060:	3710      	adds	r7, #16
 8004062:	46bd      	mov	sp, r7
 8004064:	bd80      	pop	{r7, pc}
	...

08004068 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004068:	b480      	push	{r7}
 800406a:	b09b      	sub	sp, #108	; 0x6c
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
 8004070:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004072:	2300      	movs	r3, #0
 8004074:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8004078:	2300      	movs	r3, #0
 800407a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004082:	2b01      	cmp	r3, #1
 8004084:	d101      	bne.n	800408a <HAL_ADC_ConfigChannel+0x22>
 8004086:	2302      	movs	r3, #2
 8004088:	e2a1      	b.n	80045ce <HAL_ADC_ConfigChannel+0x566>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2201      	movs	r2, #1
 800408e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	689b      	ldr	r3, [r3, #8]
 8004098:	f003 0304 	and.w	r3, r3, #4
 800409c:	2b00      	cmp	r3, #0
 800409e:	f040 8285 	bne.w	80045ac <HAL_ADC_ConfigChannel+0x544>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	685b      	ldr	r3, [r3, #4]
 80040a6:	2b04      	cmp	r3, #4
 80040a8:	d81c      	bhi.n	80040e4 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	685a      	ldr	r2, [r3, #4]
 80040b4:	4613      	mov	r3, r2
 80040b6:	005b      	lsls	r3, r3, #1
 80040b8:	4413      	add	r3, r2
 80040ba:	005b      	lsls	r3, r3, #1
 80040bc:	461a      	mov	r2, r3
 80040be:	231f      	movs	r3, #31
 80040c0:	4093      	lsls	r3, r2
 80040c2:	43db      	mvns	r3, r3
 80040c4:	4019      	ands	r1, r3
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	6818      	ldr	r0, [r3, #0]
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	685a      	ldr	r2, [r3, #4]
 80040ce:	4613      	mov	r3, r2
 80040d0:	005b      	lsls	r3, r3, #1
 80040d2:	4413      	add	r3, r2
 80040d4:	005b      	lsls	r3, r3, #1
 80040d6:	fa00 f203 	lsl.w	r2, r0, r3
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	430a      	orrs	r2, r1
 80040e0:	631a      	str	r2, [r3, #48]	; 0x30
 80040e2:	e063      	b.n	80041ac <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	2b09      	cmp	r3, #9
 80040ea:	d81e      	bhi.n	800412a <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	685a      	ldr	r2, [r3, #4]
 80040f6:	4613      	mov	r3, r2
 80040f8:	005b      	lsls	r3, r3, #1
 80040fa:	4413      	add	r3, r2
 80040fc:	005b      	lsls	r3, r3, #1
 80040fe:	3b1e      	subs	r3, #30
 8004100:	221f      	movs	r2, #31
 8004102:	fa02 f303 	lsl.w	r3, r2, r3
 8004106:	43db      	mvns	r3, r3
 8004108:	4019      	ands	r1, r3
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	6818      	ldr	r0, [r3, #0]
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	685a      	ldr	r2, [r3, #4]
 8004112:	4613      	mov	r3, r2
 8004114:	005b      	lsls	r3, r3, #1
 8004116:	4413      	add	r3, r2
 8004118:	005b      	lsls	r3, r3, #1
 800411a:	3b1e      	subs	r3, #30
 800411c:	fa00 f203 	lsl.w	r2, r0, r3
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	430a      	orrs	r2, r1
 8004126:	635a      	str	r2, [r3, #52]	; 0x34
 8004128:	e040      	b.n	80041ac <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	2b0e      	cmp	r3, #14
 8004130:	d81e      	bhi.n	8004170 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	685a      	ldr	r2, [r3, #4]
 800413c:	4613      	mov	r3, r2
 800413e:	005b      	lsls	r3, r3, #1
 8004140:	4413      	add	r3, r2
 8004142:	005b      	lsls	r3, r3, #1
 8004144:	3b3c      	subs	r3, #60	; 0x3c
 8004146:	221f      	movs	r2, #31
 8004148:	fa02 f303 	lsl.w	r3, r2, r3
 800414c:	43db      	mvns	r3, r3
 800414e:	4019      	ands	r1, r3
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	6818      	ldr	r0, [r3, #0]
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	685a      	ldr	r2, [r3, #4]
 8004158:	4613      	mov	r3, r2
 800415a:	005b      	lsls	r3, r3, #1
 800415c:	4413      	add	r3, r2
 800415e:	005b      	lsls	r3, r3, #1
 8004160:	3b3c      	subs	r3, #60	; 0x3c
 8004162:	fa00 f203 	lsl.w	r2, r0, r3
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	430a      	orrs	r2, r1
 800416c:	639a      	str	r2, [r3, #56]	; 0x38
 800416e:	e01d      	b.n	80041ac <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	685a      	ldr	r2, [r3, #4]
 800417a:	4613      	mov	r3, r2
 800417c:	005b      	lsls	r3, r3, #1
 800417e:	4413      	add	r3, r2
 8004180:	005b      	lsls	r3, r3, #1
 8004182:	3b5a      	subs	r3, #90	; 0x5a
 8004184:	221f      	movs	r2, #31
 8004186:	fa02 f303 	lsl.w	r3, r2, r3
 800418a:	43db      	mvns	r3, r3
 800418c:	4019      	ands	r1, r3
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	6818      	ldr	r0, [r3, #0]
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	685a      	ldr	r2, [r3, #4]
 8004196:	4613      	mov	r3, r2
 8004198:	005b      	lsls	r3, r3, #1
 800419a:	4413      	add	r3, r2
 800419c:	005b      	lsls	r3, r3, #1
 800419e:	3b5a      	subs	r3, #90	; 0x5a
 80041a0:	fa00 f203 	lsl.w	r2, r0, r3
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	430a      	orrs	r2, r1
 80041aa:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	689b      	ldr	r3, [r3, #8]
 80041b2:	f003 030c 	and.w	r3, r3, #12
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	f040 80e5 	bne.w	8004386 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	2b09      	cmp	r3, #9
 80041c2:	d91c      	bls.n	80041fe <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	6999      	ldr	r1, [r3, #24]
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	681a      	ldr	r2, [r3, #0]
 80041ce:	4613      	mov	r3, r2
 80041d0:	005b      	lsls	r3, r3, #1
 80041d2:	4413      	add	r3, r2
 80041d4:	3b1e      	subs	r3, #30
 80041d6:	2207      	movs	r2, #7
 80041d8:	fa02 f303 	lsl.w	r3, r2, r3
 80041dc:	43db      	mvns	r3, r3
 80041de:	4019      	ands	r1, r3
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	6898      	ldr	r0, [r3, #8]
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	681a      	ldr	r2, [r3, #0]
 80041e8:	4613      	mov	r3, r2
 80041ea:	005b      	lsls	r3, r3, #1
 80041ec:	4413      	add	r3, r2
 80041ee:	3b1e      	subs	r3, #30
 80041f0:	fa00 f203 	lsl.w	r2, r0, r3
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	430a      	orrs	r2, r1
 80041fa:	619a      	str	r2, [r3, #24]
 80041fc:	e019      	b.n	8004232 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	6959      	ldr	r1, [r3, #20]
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	681a      	ldr	r2, [r3, #0]
 8004208:	4613      	mov	r3, r2
 800420a:	005b      	lsls	r3, r3, #1
 800420c:	4413      	add	r3, r2
 800420e:	2207      	movs	r2, #7
 8004210:	fa02 f303 	lsl.w	r3, r2, r3
 8004214:	43db      	mvns	r3, r3
 8004216:	4019      	ands	r1, r3
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	6898      	ldr	r0, [r3, #8]
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	681a      	ldr	r2, [r3, #0]
 8004220:	4613      	mov	r3, r2
 8004222:	005b      	lsls	r3, r3, #1
 8004224:	4413      	add	r3, r2
 8004226:	fa00 f203 	lsl.w	r2, r0, r3
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	430a      	orrs	r2, r1
 8004230:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	695a      	ldr	r2, [r3, #20]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	68db      	ldr	r3, [r3, #12]
 800423c:	08db      	lsrs	r3, r3, #3
 800423e:	f003 0303 	and.w	r3, r3, #3
 8004242:	005b      	lsls	r3, r3, #1
 8004244:	fa02 f303 	lsl.w	r3, r2, r3
 8004248:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	691b      	ldr	r3, [r3, #16]
 800424e:	3b01      	subs	r3, #1
 8004250:	2b03      	cmp	r3, #3
 8004252:	d84f      	bhi.n	80042f4 <HAL_ADC_ConfigChannel+0x28c>
 8004254:	a201      	add	r2, pc, #4	; (adr r2, 800425c <HAL_ADC_ConfigChannel+0x1f4>)
 8004256:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800425a:	bf00      	nop
 800425c:	0800426d 	.word	0x0800426d
 8004260:	0800428f 	.word	0x0800428f
 8004264:	080042b1 	.word	0x080042b1
 8004268:	080042d3 	.word	0x080042d3
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004272:	4b9c      	ldr	r3, [pc, #624]	; (80044e4 <HAL_ADC_ConfigChannel+0x47c>)
 8004274:	4013      	ands	r3, r2
 8004276:	683a      	ldr	r2, [r7, #0]
 8004278:	6812      	ldr	r2, [r2, #0]
 800427a:	0691      	lsls	r1, r2, #26
 800427c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800427e:	430a      	orrs	r2, r1
 8004280:	431a      	orrs	r2, r3
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800428a:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800428c:	e07b      	b.n	8004386 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004294:	4b93      	ldr	r3, [pc, #588]	; (80044e4 <HAL_ADC_ConfigChannel+0x47c>)
 8004296:	4013      	ands	r3, r2
 8004298:	683a      	ldr	r2, [r7, #0]
 800429a:	6812      	ldr	r2, [r2, #0]
 800429c:	0691      	lsls	r1, r2, #26
 800429e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80042a0:	430a      	orrs	r2, r1
 80042a2:	431a      	orrs	r2, r3
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80042ac:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80042ae:	e06a      	b.n	8004386 <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80042b6:	4b8b      	ldr	r3, [pc, #556]	; (80044e4 <HAL_ADC_ConfigChannel+0x47c>)
 80042b8:	4013      	ands	r3, r2
 80042ba:	683a      	ldr	r2, [r7, #0]
 80042bc:	6812      	ldr	r2, [r2, #0]
 80042be:	0691      	lsls	r1, r2, #26
 80042c0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80042c2:	430a      	orrs	r2, r1
 80042c4:	431a      	orrs	r2, r3
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80042ce:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80042d0:	e059      	b.n	8004386 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80042d8:	4b82      	ldr	r3, [pc, #520]	; (80044e4 <HAL_ADC_ConfigChannel+0x47c>)
 80042da:	4013      	ands	r3, r2
 80042dc:	683a      	ldr	r2, [r7, #0]
 80042de:	6812      	ldr	r2, [r2, #0]
 80042e0:	0691      	lsls	r1, r2, #26
 80042e2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80042e4:	430a      	orrs	r2, r1
 80042e6:	431a      	orrs	r2, r3
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80042f0:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80042f2:	e048      	b.n	8004386 <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042fa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	069b      	lsls	r3, r3, #26
 8004304:	429a      	cmp	r2, r3
 8004306:	d107      	bne.n	8004318 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004316:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800431e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	069b      	lsls	r3, r3, #26
 8004328:	429a      	cmp	r2, r3
 800432a:	d107      	bne.n	800433c <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800433a:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004342:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	069b      	lsls	r3, r3, #26
 800434c:	429a      	cmp	r2, r3
 800434e:	d107      	bne.n	8004360 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800435e:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004366:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	069b      	lsls	r3, r3, #26
 8004370:	429a      	cmp	r2, r3
 8004372:	d107      	bne.n	8004384 <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004382:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8004384:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	689b      	ldr	r3, [r3, #8]
 800438c:	f003 0303 	and.w	r3, r3, #3
 8004390:	2b01      	cmp	r3, #1
 8004392:	d108      	bne.n	80043a6 <HAL_ADC_ConfigChannel+0x33e>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f003 0301 	and.w	r3, r3, #1
 800439e:	2b01      	cmp	r3, #1
 80043a0:	d101      	bne.n	80043a6 <HAL_ADC_ConfigChannel+0x33e>
 80043a2:	2301      	movs	r3, #1
 80043a4:	e000      	b.n	80043a8 <HAL_ADC_ConfigChannel+0x340>
 80043a6:	2300      	movs	r3, #0
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	f040 810a 	bne.w	80045c2 <HAL_ADC_ConfigChannel+0x55a>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	68db      	ldr	r3, [r3, #12]
 80043b2:	2b01      	cmp	r3, #1
 80043b4:	d00f      	beq.n	80043d6 <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	2201      	movs	r2, #1
 80043c4:	fa02 f303 	lsl.w	r3, r2, r3
 80043c8:	43da      	mvns	r2, r3
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	400a      	ands	r2, r1
 80043d0:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 80043d4:	e049      	b.n	800446a <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	2201      	movs	r2, #1
 80043e4:	409a      	lsls	r2, r3
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	430a      	orrs	r2, r1
 80043ec:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	2b09      	cmp	r3, #9
 80043f6:	d91c      	bls.n	8004432 <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	6999      	ldr	r1, [r3, #24]
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	681a      	ldr	r2, [r3, #0]
 8004402:	4613      	mov	r3, r2
 8004404:	005b      	lsls	r3, r3, #1
 8004406:	4413      	add	r3, r2
 8004408:	3b1b      	subs	r3, #27
 800440a:	2207      	movs	r2, #7
 800440c:	fa02 f303 	lsl.w	r3, r2, r3
 8004410:	43db      	mvns	r3, r3
 8004412:	4019      	ands	r1, r3
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	6898      	ldr	r0, [r3, #8]
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	681a      	ldr	r2, [r3, #0]
 800441c:	4613      	mov	r3, r2
 800441e:	005b      	lsls	r3, r3, #1
 8004420:	4413      	add	r3, r2
 8004422:	3b1b      	subs	r3, #27
 8004424:	fa00 f203 	lsl.w	r2, r0, r3
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	430a      	orrs	r2, r1
 800442e:	619a      	str	r2, [r3, #24]
 8004430:	e01b      	b.n	800446a <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	6959      	ldr	r1, [r3, #20]
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	1c5a      	adds	r2, r3, #1
 800443e:	4613      	mov	r3, r2
 8004440:	005b      	lsls	r3, r3, #1
 8004442:	4413      	add	r3, r2
 8004444:	2207      	movs	r2, #7
 8004446:	fa02 f303 	lsl.w	r3, r2, r3
 800444a:	43db      	mvns	r3, r3
 800444c:	4019      	ands	r1, r3
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	6898      	ldr	r0, [r3, #8]
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	1c5a      	adds	r2, r3, #1
 8004458:	4613      	mov	r3, r2
 800445a:	005b      	lsls	r3, r3, #1
 800445c:	4413      	add	r3, r2
 800445e:	fa00 f203 	lsl.w	r2, r0, r3
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	430a      	orrs	r2, r1
 8004468:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800446a:	4b1f      	ldr	r3, [pc, #124]	; (80044e8 <HAL_ADC_ConfigChannel+0x480>)
 800446c:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	2b10      	cmp	r3, #16
 8004474:	d105      	bne.n	8004482 <HAL_ADC_ConfigChannel+0x41a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8004476:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004478:	689b      	ldr	r3, [r3, #8]
 800447a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800447e:	2b00      	cmp	r3, #0
 8004480:	d015      	beq.n	80044ae <HAL_ADC_ConfigChannel+0x446>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8004486:	2b11      	cmp	r3, #17
 8004488:	d105      	bne.n	8004496 <HAL_ADC_ConfigChannel+0x42e>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800448a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800448c:	689b      	ldr	r3, [r3, #8]
 800448e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8004492:	2b00      	cmp	r3, #0
 8004494:	d00b      	beq.n	80044ae <HAL_ADC_ConfigChannel+0x446>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800449a:	2b12      	cmp	r3, #18
 800449c:	f040 8091 	bne.w	80045c2 <HAL_ADC_ConfigChannel+0x55a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 80044a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80044a2:	689b      	ldr	r3, [r3, #8]
 80044a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	f040 808a 	bne.w	80045c2 <HAL_ADC_ConfigChannel+0x55a>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80044b6:	d102      	bne.n	80044be <HAL_ADC_ConfigChannel+0x456>
 80044b8:	4b0c      	ldr	r3, [pc, #48]	; (80044ec <HAL_ADC_ConfigChannel+0x484>)
 80044ba:	60fb      	str	r3, [r7, #12]
 80044bc:	e002      	b.n	80044c4 <HAL_ADC_ConfigChannel+0x45c>
 80044be:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80044c2:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	689b      	ldr	r3, [r3, #8]
 80044ca:	f003 0303 	and.w	r3, r3, #3
 80044ce:	2b01      	cmp	r3, #1
 80044d0:	d10e      	bne.n	80044f0 <HAL_ADC_ConfigChannel+0x488>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f003 0301 	and.w	r3, r3, #1
 80044dc:	2b01      	cmp	r3, #1
 80044de:	d107      	bne.n	80044f0 <HAL_ADC_ConfigChannel+0x488>
 80044e0:	2301      	movs	r3, #1
 80044e2:	e006      	b.n	80044f2 <HAL_ADC_ConfigChannel+0x48a>
 80044e4:	83fff000 	.word	0x83fff000
 80044e8:	50000300 	.word	0x50000300
 80044ec:	50000100 	.word	0x50000100
 80044f0:	2300      	movs	r3, #0
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d150      	bne.n	8004598 <HAL_ADC_ConfigChannel+0x530>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80044f6:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d010      	beq.n	800451e <HAL_ADC_ConfigChannel+0x4b6>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	689b      	ldr	r3, [r3, #8]
 8004500:	f003 0303 	and.w	r3, r3, #3
 8004504:	2b01      	cmp	r3, #1
 8004506:	d107      	bne.n	8004518 <HAL_ADC_ConfigChannel+0x4b0>
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f003 0301 	and.w	r3, r3, #1
 8004510:	2b01      	cmp	r3, #1
 8004512:	d101      	bne.n	8004518 <HAL_ADC_ConfigChannel+0x4b0>
 8004514:	2301      	movs	r3, #1
 8004516:	e000      	b.n	800451a <HAL_ADC_ConfigChannel+0x4b2>
 8004518:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800451a:	2b00      	cmp	r3, #0
 800451c:	d13c      	bne.n	8004598 <HAL_ADC_ConfigChannel+0x530>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	2b10      	cmp	r3, #16
 8004524:	d11d      	bne.n	8004562 <HAL_ADC_ConfigChannel+0x4fa>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800452e:	d118      	bne.n	8004562 <HAL_ADC_ConfigChannel+0x4fa>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8004530:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004532:	689b      	ldr	r3, [r3, #8]
 8004534:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004538:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800453a:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800453c:	4b27      	ldr	r3, [pc, #156]	; (80045dc <HAL_ADC_ConfigChannel+0x574>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	4a27      	ldr	r2, [pc, #156]	; (80045e0 <HAL_ADC_ConfigChannel+0x578>)
 8004542:	fba2 2303 	umull	r2, r3, r2, r3
 8004546:	0c9a      	lsrs	r2, r3, #18
 8004548:	4613      	mov	r3, r2
 800454a:	009b      	lsls	r3, r3, #2
 800454c:	4413      	add	r3, r2
 800454e:	005b      	lsls	r3, r3, #1
 8004550:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004552:	e002      	b.n	800455a <HAL_ADC_ConfigChannel+0x4f2>
          {
            wait_loop_index--;
 8004554:	68bb      	ldr	r3, [r7, #8]
 8004556:	3b01      	subs	r3, #1
 8004558:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800455a:	68bb      	ldr	r3, [r7, #8]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d1f9      	bne.n	8004554 <HAL_ADC_ConfigChannel+0x4ec>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8004560:	e02e      	b.n	80045c0 <HAL_ADC_ConfigChannel+0x558>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	2b11      	cmp	r3, #17
 8004568:	d10b      	bne.n	8004582 <HAL_ADC_ConfigChannel+0x51a>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004572:	d106      	bne.n	8004582 <HAL_ADC_ConfigChannel+0x51a>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8004574:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004576:	689b      	ldr	r3, [r3, #8]
 8004578:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 800457c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800457e:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8004580:	e01e      	b.n	80045c0 <HAL_ADC_ConfigChannel+0x558>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	2b12      	cmp	r3, #18
 8004588:	d11a      	bne.n	80045c0 <HAL_ADC_ConfigChannel+0x558>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 800458a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800458c:	689b      	ldr	r3, [r3, #8]
 800458e:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004592:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004594:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8004596:	e013      	b.n	80045c0 <HAL_ADC_ConfigChannel+0x558>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800459c:	f043 0220 	orr.w	r2, r3, #32
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 80045a4:	2301      	movs	r3, #1
 80045a6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80045aa:	e00a      	b.n	80045c2 <HAL_ADC_ConfigChannel+0x55a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045b0:	f043 0220 	orr.w	r2, r3, #32
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80045b8:	2301      	movs	r3, #1
 80045ba:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80045be:	e000      	b.n	80045c2 <HAL_ADC_ConfigChannel+0x55a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80045c0:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2200      	movs	r2, #0
 80045c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80045ca:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80045ce:	4618      	mov	r0, r3
 80045d0:	376c      	adds	r7, #108	; 0x6c
 80045d2:	46bd      	mov	sp, r7
 80045d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d8:	4770      	bx	lr
 80045da:	bf00      	nop
 80045dc:	20000050 	.word	0x20000050
 80045e0:	431bde83 	.word	0x431bde83

080045e4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 80045e4:	b480      	push	{r7}
 80045e6:	b099      	sub	sp, #100	; 0x64
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
 80045ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80045ee:	2300      	movs	r3, #0
 80045f0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80045fc:	d102      	bne.n	8004604 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 80045fe:	4b5a      	ldr	r3, [pc, #360]	; (8004768 <HAL_ADCEx_MultiModeConfigChannel+0x184>)
 8004600:	60bb      	str	r3, [r7, #8]
 8004602:	e002      	b.n	800460a <HAL_ADCEx_MultiModeConfigChannel+0x26>
 8004604:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004608:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 800460a:	68bb      	ldr	r3, [r7, #8]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d101      	bne.n	8004614 <HAL_ADCEx_MultiModeConfigChannel+0x30>
  {
    /* Return function status */
    return HAL_ERROR;
 8004610:	2301      	movs	r3, #1
 8004612:	e0a2      	b.n	800475a <HAL_ADCEx_MultiModeConfigChannel+0x176>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800461a:	2b01      	cmp	r3, #1
 800461c:	d101      	bne.n	8004622 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800461e:	2302      	movs	r3, #2
 8004620:	e09b      	b.n	800475a <HAL_ADCEx_MultiModeConfigChannel+0x176>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2201      	movs	r2, #1
 8004626:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	689b      	ldr	r3, [r3, #8]
 8004630:	f003 0304 	and.w	r3, r3, #4
 8004634:	2b00      	cmp	r3, #0
 8004636:	d17f      	bne.n	8004738 <HAL_ADCEx_MultiModeConfigChannel+0x154>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8004638:	68bb      	ldr	r3, [r7, #8]
 800463a:	689b      	ldr	r3, [r3, #8]
 800463c:	f003 0304 	and.w	r3, r3, #4
 8004640:	2b00      	cmp	r3, #0
 8004642:	d179      	bne.n	8004738 <HAL_ADCEx_MultiModeConfigChannel+0x154>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004644:	4b49      	ldr	r3, [pc, #292]	; (800476c <HAL_ADCEx_MultiModeConfigChannel+0x188>)
 8004646:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d040      	beq.n	80046d2 <HAL_ADCEx_MultiModeConfigChannel+0xee>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8004650:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004652:	689b      	ldr	r3, [r3, #8]
 8004654:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	6859      	ldr	r1, [r3, #4]
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004662:	035b      	lsls	r3, r3, #13
 8004664:	430b      	orrs	r3, r1
 8004666:	431a      	orrs	r2, r3
 8004668:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800466a:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	689b      	ldr	r3, [r3, #8]
 8004672:	f003 0303 	and.w	r3, r3, #3
 8004676:	2b01      	cmp	r3, #1
 8004678:	d108      	bne.n	800468c <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f003 0301 	and.w	r3, r3, #1
 8004684:	2b01      	cmp	r3, #1
 8004686:	d101      	bne.n	800468c <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8004688:	2301      	movs	r3, #1
 800468a:	e000      	b.n	800468e <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 800468c:	2300      	movs	r3, #0
 800468e:	2b00      	cmp	r3, #0
 8004690:	d15c      	bne.n	800474c <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8004692:	68bb      	ldr	r3, [r7, #8]
 8004694:	689b      	ldr	r3, [r3, #8]
 8004696:	f003 0303 	and.w	r3, r3, #3
 800469a:	2b01      	cmp	r3, #1
 800469c:	d107      	bne.n	80046ae <HAL_ADCEx_MultiModeConfigChannel+0xca>
 800469e:	68bb      	ldr	r3, [r7, #8]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f003 0301 	and.w	r3, r3, #1
 80046a6:	2b01      	cmp	r3, #1
 80046a8:	d101      	bne.n	80046ae <HAL_ADCEx_MultiModeConfigChannel+0xca>
 80046aa:	2301      	movs	r3, #1
 80046ac:	e000      	b.n	80046b0 <HAL_ADCEx_MultiModeConfigChannel+0xcc>
 80046ae:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d14b      	bne.n	800474c <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 80046b4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80046b6:	689b      	ldr	r3, [r3, #8]
 80046b8:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80046bc:	f023 030f 	bic.w	r3, r3, #15
 80046c0:	683a      	ldr	r2, [r7, #0]
 80046c2:	6811      	ldr	r1, [r2, #0]
 80046c4:	683a      	ldr	r2, [r7, #0]
 80046c6:	6892      	ldr	r2, [r2, #8]
 80046c8:	430a      	orrs	r2, r1
 80046ca:	431a      	orrs	r2, r3
 80046cc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80046ce:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80046d0:	e03c      	b.n	800474c <HAL_ADCEx_MultiModeConfigChannel+0x168>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80046d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80046d4:	689b      	ldr	r3, [r3, #8]
 80046d6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80046da:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80046dc:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	689b      	ldr	r3, [r3, #8]
 80046e4:	f003 0303 	and.w	r3, r3, #3
 80046e8:	2b01      	cmp	r3, #1
 80046ea:	d108      	bne.n	80046fe <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f003 0301 	and.w	r3, r3, #1
 80046f6:	2b01      	cmp	r3, #1
 80046f8:	d101      	bne.n	80046fe <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 80046fa:	2301      	movs	r3, #1
 80046fc:	e000      	b.n	8004700 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
 80046fe:	2300      	movs	r3, #0
 8004700:	2b00      	cmp	r3, #0
 8004702:	d123      	bne.n	800474c <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8004704:	68bb      	ldr	r3, [r7, #8]
 8004706:	689b      	ldr	r3, [r3, #8]
 8004708:	f003 0303 	and.w	r3, r3, #3
 800470c:	2b01      	cmp	r3, #1
 800470e:	d107      	bne.n	8004720 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8004710:	68bb      	ldr	r3, [r7, #8]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f003 0301 	and.w	r3, r3, #1
 8004718:	2b01      	cmp	r3, #1
 800471a:	d101      	bne.n	8004720 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 800471c:	2301      	movs	r3, #1
 800471e:	e000      	b.n	8004722 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8004720:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8004722:	2b00      	cmp	r3, #0
 8004724:	d112      	bne.n	800474c <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8004726:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004728:	689b      	ldr	r3, [r3, #8]
 800472a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800472e:	f023 030f 	bic.w	r3, r3, #15
 8004732:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004734:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8004736:	e009      	b.n	800474c <HAL_ADCEx_MultiModeConfigChannel+0x168>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800473c:	f043 0220 	orr.w	r2, r3, #32
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8004744:	2301      	movs	r3, #1
 8004746:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800474a:	e000      	b.n	800474e <HAL_ADCEx_MultiModeConfigChannel+0x16a>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800474c:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2200      	movs	r2, #0
 8004752:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8004756:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 800475a:	4618      	mov	r0, r3
 800475c:	3764      	adds	r7, #100	; 0x64
 800475e:	46bd      	mov	sp, r7
 8004760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004764:	4770      	bx	lr
 8004766:	bf00      	nop
 8004768:	50000100 	.word	0x50000100
 800476c:	50000300 	.word	0x50000300

08004770 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b084      	sub	sp, #16
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004778:	2300      	movs	r3, #0
 800477a:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	689b      	ldr	r3, [r3, #8]
 8004782:	f003 0303 	and.w	r3, r3, #3
 8004786:	2b01      	cmp	r3, #1
 8004788:	d108      	bne.n	800479c <ADC_Enable+0x2c>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f003 0301 	and.w	r3, r3, #1
 8004794:	2b01      	cmp	r3, #1
 8004796:	d101      	bne.n	800479c <ADC_Enable+0x2c>
 8004798:	2301      	movs	r3, #1
 800479a:	e000      	b.n	800479e <ADC_Enable+0x2e>
 800479c:	2300      	movs	r3, #0
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d143      	bne.n	800482a <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	689a      	ldr	r2, [r3, #8]
 80047a8:	4b22      	ldr	r3, [pc, #136]	; (8004834 <ADC_Enable+0xc4>)
 80047aa:	4013      	ands	r3, r2
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d00d      	beq.n	80047cc <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047b4:	f043 0210 	orr.w	r2, r3, #16
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047c0:	f043 0201 	orr.w	r2, r3, #1
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 80047c8:	2301      	movs	r3, #1
 80047ca:	e02f      	b.n	800482c <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	689a      	ldr	r2, [r3, #8]
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f042 0201 	orr.w	r2, r2, #1
 80047da:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 80047dc:	f7ff f848 	bl	8003870 <HAL_GetTick>
 80047e0:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80047e2:	e01b      	b.n	800481c <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80047e4:	f7ff f844 	bl	8003870 <HAL_GetTick>
 80047e8:	4602      	mov	r2, r0
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	1ad3      	subs	r3, r2, r3
 80047ee:	2b02      	cmp	r3, #2
 80047f0:	d914      	bls.n	800481c <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f003 0301 	and.w	r3, r3, #1
 80047fc:	2b01      	cmp	r3, #1
 80047fe:	d00d      	beq.n	800481c <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004804:	f043 0210 	orr.w	r2, r3, #16
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004810:	f043 0201 	orr.w	r2, r3, #1
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8004818:	2301      	movs	r3, #1
 800481a:	e007      	b.n	800482c <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f003 0301 	and.w	r3, r3, #1
 8004826:	2b01      	cmp	r3, #1
 8004828:	d1dc      	bne.n	80047e4 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800482a:	2300      	movs	r3, #0
}
 800482c:	4618      	mov	r0, r3
 800482e:	3710      	adds	r7, #16
 8004830:	46bd      	mov	sp, r7
 8004832:	bd80      	pop	{r7, pc}
 8004834:	8000003f 	.word	0x8000003f

08004838 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b084      	sub	sp, #16
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004840:	2300      	movs	r3, #0
 8004842:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	689b      	ldr	r3, [r3, #8]
 800484a:	f003 0303 	and.w	r3, r3, #3
 800484e:	2b01      	cmp	r3, #1
 8004850:	d108      	bne.n	8004864 <ADC_Disable+0x2c>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f003 0301 	and.w	r3, r3, #1
 800485c:	2b01      	cmp	r3, #1
 800485e:	d101      	bne.n	8004864 <ADC_Disable+0x2c>
 8004860:	2301      	movs	r3, #1
 8004862:	e000      	b.n	8004866 <ADC_Disable+0x2e>
 8004864:	2300      	movs	r3, #0
 8004866:	2b00      	cmp	r3, #0
 8004868:	d047      	beq.n	80048fa <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	689b      	ldr	r3, [r3, #8]
 8004870:	f003 030d 	and.w	r3, r3, #13
 8004874:	2b01      	cmp	r3, #1
 8004876:	d10f      	bne.n	8004898 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	689a      	ldr	r2, [r3, #8]
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f042 0202 	orr.w	r2, r2, #2
 8004886:	609a      	str	r2, [r3, #8]
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	2203      	movs	r2, #3
 800488e:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8004890:	f7fe ffee 	bl	8003870 <HAL_GetTick>
 8004894:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8004896:	e029      	b.n	80048ec <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800489c:	f043 0210 	orr.w	r2, r3, #16
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048a8:	f043 0201 	orr.w	r2, r3, #1
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 80048b0:	2301      	movs	r3, #1
 80048b2:	e023      	b.n	80048fc <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80048b4:	f7fe ffdc 	bl	8003870 <HAL_GetTick>
 80048b8:	4602      	mov	r2, r0
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	1ad3      	subs	r3, r2, r3
 80048be:	2b02      	cmp	r3, #2
 80048c0:	d914      	bls.n	80048ec <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	689b      	ldr	r3, [r3, #8]
 80048c8:	f003 0301 	and.w	r3, r3, #1
 80048cc:	2b01      	cmp	r3, #1
 80048ce:	d10d      	bne.n	80048ec <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048d4:	f043 0210 	orr.w	r2, r3, #16
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048e0:	f043 0201 	orr.w	r2, r3, #1
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 80048e8:	2301      	movs	r3, #1
 80048ea:	e007      	b.n	80048fc <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	689b      	ldr	r3, [r3, #8]
 80048f2:	f003 0301 	and.w	r3, r3, #1
 80048f6:	2b01      	cmp	r3, #1
 80048f8:	d0dc      	beq.n	80048b4 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80048fa:	2300      	movs	r3, #0
}
 80048fc:	4618      	mov	r0, r3
 80048fe:	3710      	adds	r7, #16
 8004900:	46bd      	mov	sp, r7
 8004902:	bd80      	pop	{r7, pc}

08004904 <ADC_ConversionStop>:
  *            @arg ADC_INJECTED_GROUP: ADC injected conversion type.
  *            @arg ADC_REGULAR_INJECTED_GROUP: ADC regular and injected conversion type.
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc, uint32_t ConversionGroup)
{
 8004904:	b580      	push	{r7, lr}
 8004906:	b086      	sub	sp, #24
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
 800490c:	6039      	str	r1, [r7, #0]
  uint32_t tmp_ADC_CR_ADSTART_JADSTART = 0U;
 800490e:	2300      	movs	r3, #0
 8004910:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8004912:	2300      	movs	r3, #0
 8004914:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8004916:	2300      	movs	r3, #0
 8004918:	613b      	str	r3, [r7, #16]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));
    
  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc))
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	689b      	ldr	r3, [r3, #8]
 8004920:	f003 030c 	and.w	r3, r3, #12
 8004924:	2b00      	cmp	r3, #0
 8004926:	f000 809b 	beq.w	8004a60 <ADC_ConversionStop+0x15c>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1U, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	68db      	ldr	r3, [r3, #12]
 8004930:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004934:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004938:	d12a      	bne.n	8004990 <ADC_ConversionStop+0x8c>
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	7e5b      	ldrb	r3, [r3, #25]
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 800493e:	2b01      	cmp	r3, #1
 8004940:	d126      	bne.n	8004990 <ADC_ConversionStop+0x8c>
         (hadc->Init.LowPowerAutoWait==ENABLE)                   )
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	7e1b      	ldrb	r3, [r3, #24]
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 8004946:	2b01      	cmp	r3, #1
 8004948:	d122      	bne.n	8004990 <ADC_ConversionStop+0x8c>
    {
      /* Use stop of regular group */
      ConversionGroup = ADC_REGULAR_GROUP;
 800494a:	230c      	movs	r3, #12
 800494c:	603b      	str	r3, [r7, #0]
      
      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 800494e:	e014      	b.n	800497a <ADC_ConversionStop+0x76>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES *4U))
 8004950:	693b      	ldr	r3, [r7, #16]
 8004952:	4a46      	ldr	r2, [pc, #280]	; (8004a6c <ADC_ConversionStop+0x168>)
 8004954:	4293      	cmp	r3, r2
 8004956:	d90d      	bls.n	8004974 <ADC_ConversionStop+0x70>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800495c:	f043 0210 	orr.w	r2, r3, #16
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004968:	f043 0201 	orr.w	r2, r3, #1
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	645a      	str	r2, [r3, #68]	; 0x44
          
          return HAL_ERROR;
 8004970:	2301      	movs	r3, #1
 8004972:	e076      	b.n	8004a62 <ADC_ConversionStop+0x15e>
        }
        Conversion_Timeout_CPU_cycles ++;
 8004974:	693b      	ldr	r3, [r7, #16]
 8004976:	3301      	adds	r3, #1
 8004978:	613b      	str	r3, [r7, #16]
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004984:	2b40      	cmp	r3, #64	; 0x40
 8004986:	d1e3      	bne.n	8004950 <ADC_ConversionStop+0x4c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	2240      	movs	r2, #64	; 0x40
 800498e:	601a      	str	r2, [r3, #0]
    }
    
    /* Stop potential conversion on going on regular group */
    if (ConversionGroup != ADC_INJECTED_GROUP)
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	2b60      	cmp	r3, #96	; 0x60
 8004994:	d015      	beq.n	80049c2 <ADC_ConversionStop+0xbe>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	689b      	ldr	r3, [r3, #8]
 800499c:	f003 0304 	and.w	r3, r3, #4
 80049a0:	2b04      	cmp	r3, #4
 80049a2:	d10e      	bne.n	80049c2 <ADC_ConversionStop+0xbe>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)     )
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	689b      	ldr	r3, [r3, #8]
 80049aa:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d107      	bne.n	80049c2 <ADC_ConversionStop+0xbe>
      {
        /* Stop conversions on regular group */
        hadc->Instance->CR |= ADC_CR_ADSTP;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	689a      	ldr	r2, [r3, #8]
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f042 0210 	orr.w	r2, r2, #16
 80049c0:	609a      	str	r2, [r3, #8]
      }
    }

    /* Stop potential conversion on going on injected group */
    if (ConversionGroup != ADC_REGULAR_GROUP)
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	2b0c      	cmp	r3, #12
 80049c6:	d015      	beq.n	80049f4 <ADC_ConversionStop+0xf0>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	689b      	ldr	r3, [r3, #8]
 80049ce:	f003 0308 	and.w	r3, r3, #8
 80049d2:	2b08      	cmp	r3, #8
 80049d4:	d10e      	bne.n	80049f4 <ADC_ConversionStop+0xf0>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)      )
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	689b      	ldr	r3, [r3, #8]
 80049dc:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d107      	bne.n	80049f4 <ADC_ConversionStop+0xf0>
      {
        /* Stop conversions on injected group */
        hadc->Instance->CR |= ADC_CR_JADSTP;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	689a      	ldr	r2, [r3, #8]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f042 0220 	orr.w	r2, r2, #32
 80049f2:	609a      	str	r2, [r3, #8]
      }
    }

    /* Selection of start and stop bits in function of regular or injected group */
    switch(ConversionGroup)
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	2b60      	cmp	r3, #96	; 0x60
 80049f8:	d005      	beq.n	8004a06 <ADC_ConversionStop+0x102>
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	2b6c      	cmp	r3, #108	; 0x6c
 80049fe:	d105      	bne.n	8004a0c <ADC_ConversionStop+0x108>
    {
    case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8004a00:	230c      	movs	r3, #12
 8004a02:	617b      	str	r3, [r7, #20]
        break;
 8004a04:	e005      	b.n	8004a12 <ADC_ConversionStop+0x10e>
    case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8004a06:	2308      	movs	r3, #8
 8004a08:	617b      	str	r3, [r7, #20]
        break;
 8004a0a:	e002      	b.n	8004a12 <ADC_ConversionStop+0x10e>
    /* Case ADC_REGULAR_GROUP */
    default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8004a0c:	2304      	movs	r3, #4
 8004a0e:	617b      	str	r3, [r7, #20]
        break;
 8004a10:	bf00      	nop
    }
    
    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8004a12:	f7fe ff2d 	bl	8003870 <HAL_GetTick>
 8004a16:	60f8      	str	r0, [r7, #12]
      
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8004a18:	e01b      	b.n	8004a52 <ADC_ConversionStop+0x14e>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8004a1a:	f7fe ff29 	bl	8003870 <HAL_GetTick>
 8004a1e:	4602      	mov	r2, r0
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	1ad3      	subs	r3, r2, r3
 8004a24:	2b0b      	cmp	r3, #11
 8004a26:	d914      	bls.n	8004a52 <ADC_ConversionStop+0x14e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	689a      	ldr	r2, [r3, #8]
 8004a2e:	697b      	ldr	r3, [r7, #20]
 8004a30:	4013      	ands	r3, r2
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d00d      	beq.n	8004a52 <ADC_ConversionStop+0x14e>
        {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a3a:	f043 0210 	orr.w	r2, r3, #16
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a46:	f043 0201 	orr.w	r2, r3, #1
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 8004a4e:	2301      	movs	r3, #1
 8004a50:	e007      	b.n	8004a62 <ADC_ConversionStop+0x15e>
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	689a      	ldr	r2, [r3, #8]
 8004a58:	697b      	ldr	r3, [r7, #20]
 8004a5a:	4013      	ands	r3, r2
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d1dc      	bne.n	8004a1a <ADC_ConversionStop+0x116>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8004a60:	2300      	movs	r3, #0
}
 8004a62:	4618      	mov	r0, r3
 8004a64:	3718      	adds	r7, #24
 8004a66:	46bd      	mov	sp, r7
 8004a68:	bd80      	pop	{r7, pc}
 8004a6a:	bf00      	nop
 8004a6c:	000993ff 	.word	0x000993ff

08004a70 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b084      	sub	sp, #16
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d101      	bne.n	8004a82 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8004a7e:	2301      	movs	r3, #1
 8004a80:	e0ed      	b.n	8004c5e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004a88:	b2db      	uxtb	r3, r3
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d102      	bne.n	8004a94 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8004a8e:	6878      	ldr	r0, [r7, #4]
 8004a90:	f7fd f926 	bl	8001ce0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	681a      	ldr	r2, [r3, #0]
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f042 0201 	orr.w	r2, r2, #1
 8004aa2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004aa4:	f7fe fee4 	bl	8003870 <HAL_GetTick>
 8004aa8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004aaa:	e012      	b.n	8004ad2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004aac:	f7fe fee0 	bl	8003870 <HAL_GetTick>
 8004ab0:	4602      	mov	r2, r0
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	1ad3      	subs	r3, r2, r3
 8004ab6:	2b0a      	cmp	r3, #10
 8004ab8:	d90b      	bls.n	8004ad2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004abe:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2205      	movs	r2, #5
 8004aca:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004ace:	2301      	movs	r3, #1
 8004ad0:	e0c5      	b.n	8004c5e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	685b      	ldr	r3, [r3, #4]
 8004ad8:	f003 0301 	and.w	r3, r3, #1
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d0e5      	beq.n	8004aac <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	681a      	ldr	r2, [r3, #0]
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f022 0202 	bic.w	r2, r2, #2
 8004aee:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004af0:	f7fe febe 	bl	8003870 <HAL_GetTick>
 8004af4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004af6:	e012      	b.n	8004b1e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004af8:	f7fe feba 	bl	8003870 <HAL_GetTick>
 8004afc:	4602      	mov	r2, r0
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	1ad3      	subs	r3, r2, r3
 8004b02:	2b0a      	cmp	r3, #10
 8004b04:	d90b      	bls.n	8004b1e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b0a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2205      	movs	r2, #5
 8004b16:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	e09f      	b.n	8004c5e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	685b      	ldr	r3, [r3, #4]
 8004b24:	f003 0302 	and.w	r3, r3, #2
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d1e5      	bne.n	8004af8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	7e1b      	ldrb	r3, [r3, #24]
 8004b30:	2b01      	cmp	r3, #1
 8004b32:	d108      	bne.n	8004b46 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	681a      	ldr	r2, [r3, #0]
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004b42:	601a      	str	r2, [r3, #0]
 8004b44:	e007      	b.n	8004b56 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	681a      	ldr	r2, [r3, #0]
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004b54:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	7e5b      	ldrb	r3, [r3, #25]
 8004b5a:	2b01      	cmp	r3, #1
 8004b5c:	d108      	bne.n	8004b70 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	681a      	ldr	r2, [r3, #0]
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004b6c:	601a      	str	r2, [r3, #0]
 8004b6e:	e007      	b.n	8004b80 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	681a      	ldr	r2, [r3, #0]
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b7e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	7e9b      	ldrb	r3, [r3, #26]
 8004b84:	2b01      	cmp	r3, #1
 8004b86:	d108      	bne.n	8004b9a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	681a      	ldr	r2, [r3, #0]
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f042 0220 	orr.w	r2, r2, #32
 8004b96:	601a      	str	r2, [r3, #0]
 8004b98:	e007      	b.n	8004baa <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	681a      	ldr	r2, [r3, #0]
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f022 0220 	bic.w	r2, r2, #32
 8004ba8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	7edb      	ldrb	r3, [r3, #27]
 8004bae:	2b01      	cmp	r3, #1
 8004bb0:	d108      	bne.n	8004bc4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	681a      	ldr	r2, [r3, #0]
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f022 0210 	bic.w	r2, r2, #16
 8004bc0:	601a      	str	r2, [r3, #0]
 8004bc2:	e007      	b.n	8004bd4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	681a      	ldr	r2, [r3, #0]
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f042 0210 	orr.w	r2, r2, #16
 8004bd2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	7f1b      	ldrb	r3, [r3, #28]
 8004bd8:	2b01      	cmp	r3, #1
 8004bda:	d108      	bne.n	8004bee <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	681a      	ldr	r2, [r3, #0]
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f042 0208 	orr.w	r2, r2, #8
 8004bea:	601a      	str	r2, [r3, #0]
 8004bec:	e007      	b.n	8004bfe <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	681a      	ldr	r2, [r3, #0]
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f022 0208 	bic.w	r2, r2, #8
 8004bfc:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	7f5b      	ldrb	r3, [r3, #29]
 8004c02:	2b01      	cmp	r3, #1
 8004c04:	d108      	bne.n	8004c18 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	681a      	ldr	r2, [r3, #0]
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f042 0204 	orr.w	r2, r2, #4
 8004c14:	601a      	str	r2, [r3, #0]
 8004c16:	e007      	b.n	8004c28 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	681a      	ldr	r2, [r3, #0]
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f022 0204 	bic.w	r2, r2, #4
 8004c26:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	689a      	ldr	r2, [r3, #8]
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	68db      	ldr	r3, [r3, #12]
 8004c30:	431a      	orrs	r2, r3
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	691b      	ldr	r3, [r3, #16]
 8004c36:	431a      	orrs	r2, r3
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	695b      	ldr	r3, [r3, #20]
 8004c3c:	ea42 0103 	orr.w	r1, r2, r3
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	685b      	ldr	r3, [r3, #4]
 8004c44:	1e5a      	subs	r2, r3, #1
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	430a      	orrs	r2, r1
 8004c4c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2200      	movs	r2, #0
 8004c52:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2201      	movs	r2, #1
 8004c58:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8004c5c:	2300      	movs	r3, #0
}
 8004c5e:	4618      	mov	r0, r3
 8004c60:	3710      	adds	r7, #16
 8004c62:	46bd      	mov	sp, r7
 8004c64:	bd80      	pop	{r7, pc}

08004c66 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8004c66:	b480      	push	{r7}
 8004c68:	b087      	sub	sp, #28
 8004c6a:	af00      	add	r7, sp, #0
 8004c6c:	6078      	str	r0, [r7, #4]
 8004c6e:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004c7c:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8004c7e:	7cfb      	ldrb	r3, [r7, #19]
 8004c80:	2b01      	cmp	r3, #1
 8004c82:	d003      	beq.n	8004c8c <HAL_CAN_ConfigFilter+0x26>
 8004c84:	7cfb      	ldrb	r3, [r7, #19]
 8004c86:	2b02      	cmp	r3, #2
 8004c88:	f040 80aa 	bne.w	8004de0 <HAL_CAN_ConfigFilter+0x17a>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004c8c:	697b      	ldr	r3, [r7, #20]
 8004c8e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004c92:	f043 0201 	orr.w	r2, r3, #1
 8004c96:	697b      	ldr	r3, [r7, #20]
 8004c98:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	695b      	ldr	r3, [r3, #20]
 8004ca0:	f003 031f 	and.w	r3, r3, #31
 8004ca4:	2201      	movs	r2, #1
 8004ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8004caa:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8004cac:	697b      	ldr	r3, [r7, #20]
 8004cae:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	43db      	mvns	r3, r3
 8004cb6:	401a      	ands	r2, r3
 8004cb8:	697b      	ldr	r3, [r7, #20]
 8004cba:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	69db      	ldr	r3, [r3, #28]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d123      	bne.n	8004d0e <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8004cc6:	697b      	ldr	r3, [r7, #20]
 8004cc8:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	43db      	mvns	r3, r3
 8004cd0:	401a      	ands	r2, r3
 8004cd2:	697b      	ldr	r3, [r7, #20]
 8004cd4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	68db      	ldr	r3, [r3, #12]
 8004cdc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	685b      	ldr	r3, [r3, #4]
 8004ce2:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004ce4:	683a      	ldr	r2, [r7, #0]
 8004ce6:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004ce8:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004cea:	697b      	ldr	r3, [r7, #20]
 8004cec:	3248      	adds	r2, #72	; 0x48
 8004cee:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	689b      	ldr	r3, [r3, #8]
 8004cf6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004d02:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004d04:	6979      	ldr	r1, [r7, #20]
 8004d06:	3348      	adds	r3, #72	; 0x48
 8004d08:	00db      	lsls	r3, r3, #3
 8004d0a:	440b      	add	r3, r1
 8004d0c:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	69db      	ldr	r3, [r3, #28]
 8004d12:	2b01      	cmp	r3, #1
 8004d14:	d122      	bne.n	8004d5c <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8004d16:	697b      	ldr	r3, [r7, #20]
 8004d18:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	431a      	orrs	r2, r3
 8004d20:	697b      	ldr	r3, [r7, #20]
 8004d22:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	685b      	ldr	r3, [r3, #4]
 8004d30:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004d32:	683a      	ldr	r2, [r7, #0]
 8004d34:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004d36:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004d38:	697b      	ldr	r3, [r7, #20]
 8004d3a:	3248      	adds	r2, #72	; 0x48
 8004d3c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	689b      	ldr	r3, [r3, #8]
 8004d44:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	68db      	ldr	r3, [r3, #12]
 8004d4a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004d50:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004d52:	6979      	ldr	r1, [r7, #20]
 8004d54:	3348      	adds	r3, #72	; 0x48
 8004d56:	00db      	lsls	r3, r3, #3
 8004d58:	440b      	add	r3, r1
 8004d5a:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	699b      	ldr	r3, [r3, #24]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d109      	bne.n	8004d78 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8004d64:	697b      	ldr	r3, [r7, #20]
 8004d66:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	43db      	mvns	r3, r3
 8004d6e:	401a      	ands	r2, r3
 8004d70:	697b      	ldr	r3, [r7, #20]
 8004d72:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8004d76:	e007      	b.n	8004d88 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8004d78:	697b      	ldr	r3, [r7, #20]
 8004d7a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	431a      	orrs	r2, r3
 8004d82:	697b      	ldr	r3, [r7, #20]
 8004d84:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	691b      	ldr	r3, [r3, #16]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d109      	bne.n	8004da4 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8004d90:	697b      	ldr	r3, [r7, #20]
 8004d92:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	43db      	mvns	r3, r3
 8004d9a:	401a      	ands	r2, r3
 8004d9c:	697b      	ldr	r3, [r7, #20]
 8004d9e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8004da2:	e007      	b.n	8004db4 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8004da4:	697b      	ldr	r3, [r7, #20]
 8004da6:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	431a      	orrs	r2, r3
 8004dae:	697b      	ldr	r3, [r7, #20]
 8004db0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	6a1b      	ldr	r3, [r3, #32]
 8004db8:	2b01      	cmp	r3, #1
 8004dba:	d107      	bne.n	8004dcc <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8004dbc:	697b      	ldr	r3, [r7, #20]
 8004dbe:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	431a      	orrs	r2, r3
 8004dc6:	697b      	ldr	r3, [r7, #20]
 8004dc8:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004dcc:	697b      	ldr	r3, [r7, #20]
 8004dce:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004dd2:	f023 0201 	bic.w	r2, r3, #1
 8004dd6:	697b      	ldr	r3, [r7, #20]
 8004dd8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8004ddc:	2300      	movs	r3, #0
 8004dde:	e006      	b.n	8004dee <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004de4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004dec:	2301      	movs	r3, #1
  }
}
 8004dee:	4618      	mov	r0, r3
 8004df0:	371c      	adds	r7, #28
 8004df2:	46bd      	mov	sp, r7
 8004df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df8:	4770      	bx	lr

08004dfa <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8004dfa:	b580      	push	{r7, lr}
 8004dfc:	b084      	sub	sp, #16
 8004dfe:	af00      	add	r7, sp, #0
 8004e00:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004e08:	b2db      	uxtb	r3, r3
 8004e0a:	2b01      	cmp	r3, #1
 8004e0c:	d12e      	bne.n	8004e6c <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2202      	movs	r2, #2
 8004e12:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	681a      	ldr	r2, [r3, #0]
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f022 0201 	bic.w	r2, r2, #1
 8004e24:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004e26:	f7fe fd23 	bl	8003870 <HAL_GetTick>
 8004e2a:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004e2c:	e012      	b.n	8004e54 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004e2e:	f7fe fd1f 	bl	8003870 <HAL_GetTick>
 8004e32:	4602      	mov	r2, r0
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	1ad3      	subs	r3, r2, r3
 8004e38:	2b0a      	cmp	r3, #10
 8004e3a:	d90b      	bls.n	8004e54 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e40:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2205      	movs	r2, #5
 8004e4c:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8004e50:	2301      	movs	r3, #1
 8004e52:	e012      	b.n	8004e7a <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	685b      	ldr	r3, [r3, #4]
 8004e5a:	f003 0301 	and.w	r3, r3, #1
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d1e5      	bne.n	8004e2e <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2200      	movs	r2, #0
 8004e66:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8004e68:	2300      	movs	r3, #0
 8004e6a:	e006      	b.n	8004e7a <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e70:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004e78:	2301      	movs	r3, #1
  }
}
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	3710      	adds	r7, #16
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	bd80      	pop	{r7, pc}

08004e82 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8004e82:	b480      	push	{r7}
 8004e84:	b089      	sub	sp, #36	; 0x24
 8004e86:	af00      	add	r7, sp, #0
 8004e88:	60f8      	str	r0, [r7, #12]
 8004e8a:	60b9      	str	r1, [r7, #8]
 8004e8c:	607a      	str	r2, [r7, #4]
 8004e8e:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004e96:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	689b      	ldr	r3, [r3, #8]
 8004e9e:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8004ea0:	7ffb      	ldrb	r3, [r7, #31]
 8004ea2:	2b01      	cmp	r3, #1
 8004ea4:	d003      	beq.n	8004eae <HAL_CAN_AddTxMessage+0x2c>
 8004ea6:	7ffb      	ldrb	r3, [r7, #31]
 8004ea8:	2b02      	cmp	r3, #2
 8004eaa:	f040 80ad 	bne.w	8005008 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8004eae:	69bb      	ldr	r3, [r7, #24]
 8004eb0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d10a      	bne.n	8004ece <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8004eb8:	69bb      	ldr	r3, [r7, #24]
 8004eba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d105      	bne.n	8004ece <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8004ec2:	69bb      	ldr	r3, [r7, #24]
 8004ec4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	f000 8095 	beq.w	8004ff8 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8004ece:	69bb      	ldr	r3, [r7, #24]
 8004ed0:	0e1b      	lsrs	r3, r3, #24
 8004ed2:	f003 0303 	and.w	r3, r3, #3
 8004ed6:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8004ed8:	2201      	movs	r2, #1
 8004eda:	697b      	ldr	r3, [r7, #20]
 8004edc:	409a      	lsls	r2, r3
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8004ee2:	68bb      	ldr	r3, [r7, #8]
 8004ee4:	689b      	ldr	r3, [r3, #8]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d10d      	bne.n	8004f06 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8004eea:	68bb      	ldr	r3, [r7, #8]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8004ef0:	68bb      	ldr	r3, [r7, #8]
 8004ef2:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8004ef4:	68f9      	ldr	r1, [r7, #12]
 8004ef6:	6809      	ldr	r1, [r1, #0]
 8004ef8:	431a      	orrs	r2, r3
 8004efa:	697b      	ldr	r3, [r7, #20]
 8004efc:	3318      	adds	r3, #24
 8004efe:	011b      	lsls	r3, r3, #4
 8004f00:	440b      	add	r3, r1
 8004f02:	601a      	str	r2, [r3, #0]
 8004f04:	e00f      	b.n	8004f26 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004f06:	68bb      	ldr	r3, [r7, #8]
 8004f08:	685b      	ldr	r3, [r3, #4]
 8004f0a:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8004f0c:	68bb      	ldr	r3, [r7, #8]
 8004f0e:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004f10:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8004f12:	68bb      	ldr	r3, [r7, #8]
 8004f14:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004f16:	68f9      	ldr	r1, [r7, #12]
 8004f18:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8004f1a:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004f1c:	697b      	ldr	r3, [r7, #20]
 8004f1e:	3318      	adds	r3, #24
 8004f20:	011b      	lsls	r3, r3, #4
 8004f22:	440b      	add	r3, r1
 8004f24:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	6819      	ldr	r1, [r3, #0]
 8004f2a:	68bb      	ldr	r3, [r7, #8]
 8004f2c:	691a      	ldr	r2, [r3, #16]
 8004f2e:	697b      	ldr	r3, [r7, #20]
 8004f30:	3318      	adds	r3, #24
 8004f32:	011b      	lsls	r3, r3, #4
 8004f34:	440b      	add	r3, r1
 8004f36:	3304      	adds	r3, #4
 8004f38:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8004f3a:	68bb      	ldr	r3, [r7, #8]
 8004f3c:	7d1b      	ldrb	r3, [r3, #20]
 8004f3e:	2b01      	cmp	r3, #1
 8004f40:	d111      	bne.n	8004f66 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681a      	ldr	r2, [r3, #0]
 8004f46:	697b      	ldr	r3, [r7, #20]
 8004f48:	3318      	adds	r3, #24
 8004f4a:	011b      	lsls	r3, r3, #4
 8004f4c:	4413      	add	r3, r2
 8004f4e:	3304      	adds	r3, #4
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	68fa      	ldr	r2, [r7, #12]
 8004f54:	6811      	ldr	r1, [r2, #0]
 8004f56:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004f5a:	697b      	ldr	r3, [r7, #20]
 8004f5c:	3318      	adds	r3, #24
 8004f5e:	011b      	lsls	r3, r3, #4
 8004f60:	440b      	add	r3, r1
 8004f62:	3304      	adds	r3, #4
 8004f64:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	3307      	adds	r3, #7
 8004f6a:	781b      	ldrb	r3, [r3, #0]
 8004f6c:	061a      	lsls	r2, r3, #24
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	3306      	adds	r3, #6
 8004f72:	781b      	ldrb	r3, [r3, #0]
 8004f74:	041b      	lsls	r3, r3, #16
 8004f76:	431a      	orrs	r2, r3
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	3305      	adds	r3, #5
 8004f7c:	781b      	ldrb	r3, [r3, #0]
 8004f7e:	021b      	lsls	r3, r3, #8
 8004f80:	4313      	orrs	r3, r2
 8004f82:	687a      	ldr	r2, [r7, #4]
 8004f84:	3204      	adds	r2, #4
 8004f86:	7812      	ldrb	r2, [r2, #0]
 8004f88:	4610      	mov	r0, r2
 8004f8a:	68fa      	ldr	r2, [r7, #12]
 8004f8c:	6811      	ldr	r1, [r2, #0]
 8004f8e:	ea43 0200 	orr.w	r2, r3, r0
 8004f92:	697b      	ldr	r3, [r7, #20]
 8004f94:	011b      	lsls	r3, r3, #4
 8004f96:	440b      	add	r3, r1
 8004f98:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8004f9c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	3303      	adds	r3, #3
 8004fa2:	781b      	ldrb	r3, [r3, #0]
 8004fa4:	061a      	lsls	r2, r3, #24
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	3302      	adds	r3, #2
 8004faa:	781b      	ldrb	r3, [r3, #0]
 8004fac:	041b      	lsls	r3, r3, #16
 8004fae:	431a      	orrs	r2, r3
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	3301      	adds	r3, #1
 8004fb4:	781b      	ldrb	r3, [r3, #0]
 8004fb6:	021b      	lsls	r3, r3, #8
 8004fb8:	4313      	orrs	r3, r2
 8004fba:	687a      	ldr	r2, [r7, #4]
 8004fbc:	7812      	ldrb	r2, [r2, #0]
 8004fbe:	4610      	mov	r0, r2
 8004fc0:	68fa      	ldr	r2, [r7, #12]
 8004fc2:	6811      	ldr	r1, [r2, #0]
 8004fc4:	ea43 0200 	orr.w	r2, r3, r0
 8004fc8:	697b      	ldr	r3, [r7, #20]
 8004fca:	011b      	lsls	r3, r3, #4
 8004fcc:	440b      	add	r3, r1
 8004fce:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8004fd2:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681a      	ldr	r2, [r3, #0]
 8004fd8:	697b      	ldr	r3, [r7, #20]
 8004fda:	3318      	adds	r3, #24
 8004fdc:	011b      	lsls	r3, r3, #4
 8004fde:	4413      	add	r3, r2
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	68fa      	ldr	r2, [r7, #12]
 8004fe4:	6811      	ldr	r1, [r2, #0]
 8004fe6:	f043 0201 	orr.w	r2, r3, #1
 8004fea:	697b      	ldr	r3, [r7, #20]
 8004fec:	3318      	adds	r3, #24
 8004fee:	011b      	lsls	r3, r3, #4
 8004ff0:	440b      	add	r3, r1
 8004ff2:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	e00e      	b.n	8005016 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ffc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8005004:	2301      	movs	r3, #1
 8005006:	e006      	b.n	8005016 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800500c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005014:	2301      	movs	r3, #1
  }
}
 8005016:	4618      	mov	r0, r3
 8005018:	3724      	adds	r7, #36	; 0x24
 800501a:	46bd      	mov	sp, r7
 800501c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005020:	4770      	bx	lr

08005022 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8005022:	b480      	push	{r7}
 8005024:	b087      	sub	sp, #28
 8005026:	af00      	add	r7, sp, #0
 8005028:	60f8      	str	r0, [r7, #12]
 800502a:	60b9      	str	r1, [r7, #8]
 800502c:	607a      	str	r2, [r7, #4]
 800502e:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005036:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8005038:	7dfb      	ldrb	r3, [r7, #23]
 800503a:	2b01      	cmp	r3, #1
 800503c:	d003      	beq.n	8005046 <HAL_CAN_GetRxMessage+0x24>
 800503e:	7dfb      	ldrb	r3, [r7, #23]
 8005040:	2b02      	cmp	r3, #2
 8005042:	f040 8103 	bne.w	800524c <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8005046:	68bb      	ldr	r3, [r7, #8]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d10e      	bne.n	800506a <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	68db      	ldr	r3, [r3, #12]
 8005052:	f003 0303 	and.w	r3, r3, #3
 8005056:	2b00      	cmp	r3, #0
 8005058:	d116      	bne.n	8005088 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800505e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8005066:	2301      	movs	r3, #1
 8005068:	e0f7      	b.n	800525a <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	691b      	ldr	r3, [r3, #16]
 8005070:	f003 0303 	and.w	r3, r3, #3
 8005074:	2b00      	cmp	r3, #0
 8005076:	d107      	bne.n	8005088 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800507c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8005084:	2301      	movs	r3, #1
 8005086:	e0e8      	b.n	800525a <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681a      	ldr	r2, [r3, #0]
 800508c:	68bb      	ldr	r3, [r7, #8]
 800508e:	331b      	adds	r3, #27
 8005090:	011b      	lsls	r3, r3, #4
 8005092:	4413      	add	r3, r2
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f003 0204 	and.w	r2, r3, #4
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	689b      	ldr	r3, [r3, #8]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d10c      	bne.n	80050c0 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681a      	ldr	r2, [r3, #0]
 80050aa:	68bb      	ldr	r3, [r7, #8]
 80050ac:	331b      	adds	r3, #27
 80050ae:	011b      	lsls	r3, r3, #4
 80050b0:	4413      	add	r3, r2
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	0d5b      	lsrs	r3, r3, #21
 80050b6:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	601a      	str	r2, [r3, #0]
 80050be:	e00b      	b.n	80050d8 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681a      	ldr	r2, [r3, #0]
 80050c4:	68bb      	ldr	r3, [r7, #8]
 80050c6:	331b      	adds	r3, #27
 80050c8:	011b      	lsls	r3, r3, #4
 80050ca:	4413      	add	r3, r2
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	08db      	lsrs	r3, r3, #3
 80050d0:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681a      	ldr	r2, [r3, #0]
 80050dc:	68bb      	ldr	r3, [r7, #8]
 80050de:	331b      	adds	r3, #27
 80050e0:	011b      	lsls	r3, r3, #4
 80050e2:	4413      	add	r3, r2
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f003 0202 	and.w	r2, r3, #2
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681a      	ldr	r2, [r3, #0]
 80050f2:	68bb      	ldr	r3, [r7, #8]
 80050f4:	331b      	adds	r3, #27
 80050f6:	011b      	lsls	r3, r3, #4
 80050f8:	4413      	add	r3, r2
 80050fa:	3304      	adds	r3, #4
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f003 0308 	and.w	r3, r3, #8
 8005102:	2b00      	cmp	r3, #0
 8005104:	d003      	beq.n	800510e <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2208      	movs	r2, #8
 800510a:	611a      	str	r2, [r3, #16]
 800510c:	e00b      	b.n	8005126 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	681a      	ldr	r2, [r3, #0]
 8005112:	68bb      	ldr	r3, [r7, #8]
 8005114:	331b      	adds	r3, #27
 8005116:	011b      	lsls	r3, r3, #4
 8005118:	4413      	add	r3, r2
 800511a:	3304      	adds	r3, #4
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f003 020f 	and.w	r2, r3, #15
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681a      	ldr	r2, [r3, #0]
 800512a:	68bb      	ldr	r3, [r7, #8]
 800512c:	331b      	adds	r3, #27
 800512e:	011b      	lsls	r3, r3, #4
 8005130:	4413      	add	r3, r2
 8005132:	3304      	adds	r3, #4
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	0a1b      	lsrs	r3, r3, #8
 8005138:	b2da      	uxtb	r2, r3
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681a      	ldr	r2, [r3, #0]
 8005142:	68bb      	ldr	r3, [r7, #8]
 8005144:	331b      	adds	r3, #27
 8005146:	011b      	lsls	r3, r3, #4
 8005148:	4413      	add	r3, r2
 800514a:	3304      	adds	r3, #4
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	0c1b      	lsrs	r3, r3, #16
 8005150:	b29a      	uxth	r2, r3
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681a      	ldr	r2, [r3, #0]
 800515a:	68bb      	ldr	r3, [r7, #8]
 800515c:	011b      	lsls	r3, r3, #4
 800515e:	4413      	add	r3, r2
 8005160:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	b2da      	uxtb	r2, r3
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681a      	ldr	r2, [r3, #0]
 8005170:	68bb      	ldr	r3, [r7, #8]
 8005172:	011b      	lsls	r3, r3, #4
 8005174:	4413      	add	r3, r2
 8005176:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	0a1a      	lsrs	r2, r3, #8
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	3301      	adds	r3, #1
 8005182:	b2d2      	uxtb	r2, r2
 8005184:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681a      	ldr	r2, [r3, #0]
 800518a:	68bb      	ldr	r3, [r7, #8]
 800518c:	011b      	lsls	r3, r3, #4
 800518e:	4413      	add	r3, r2
 8005190:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	0c1a      	lsrs	r2, r3, #16
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	3302      	adds	r3, #2
 800519c:	b2d2      	uxtb	r2, r2
 800519e:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681a      	ldr	r2, [r3, #0]
 80051a4:	68bb      	ldr	r3, [r7, #8]
 80051a6:	011b      	lsls	r3, r3, #4
 80051a8:	4413      	add	r3, r2
 80051aa:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	0e1a      	lsrs	r2, r3, #24
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	3303      	adds	r3, #3
 80051b6:	b2d2      	uxtb	r2, r2
 80051b8:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681a      	ldr	r2, [r3, #0]
 80051be:	68bb      	ldr	r3, [r7, #8]
 80051c0:	011b      	lsls	r3, r3, #4
 80051c2:	4413      	add	r3, r2
 80051c4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80051c8:	681a      	ldr	r2, [r3, #0]
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	3304      	adds	r3, #4
 80051ce:	b2d2      	uxtb	r2, r2
 80051d0:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681a      	ldr	r2, [r3, #0]
 80051d6:	68bb      	ldr	r3, [r7, #8]
 80051d8:	011b      	lsls	r3, r3, #4
 80051da:	4413      	add	r3, r2
 80051dc:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	0a1a      	lsrs	r2, r3, #8
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	3305      	adds	r3, #5
 80051e8:	b2d2      	uxtb	r2, r2
 80051ea:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681a      	ldr	r2, [r3, #0]
 80051f0:	68bb      	ldr	r3, [r7, #8]
 80051f2:	011b      	lsls	r3, r3, #4
 80051f4:	4413      	add	r3, r2
 80051f6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	0c1a      	lsrs	r2, r3, #16
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	3306      	adds	r3, #6
 8005202:	b2d2      	uxtb	r2, r2
 8005204:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681a      	ldr	r2, [r3, #0]
 800520a:	68bb      	ldr	r3, [r7, #8]
 800520c:	011b      	lsls	r3, r3, #4
 800520e:	4413      	add	r3, r2
 8005210:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	0e1a      	lsrs	r2, r3, #24
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	3307      	adds	r3, #7
 800521c:	b2d2      	uxtb	r2, r2
 800521e:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8005220:	68bb      	ldr	r3, [r7, #8]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d108      	bne.n	8005238 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	68da      	ldr	r2, [r3, #12]
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f042 0220 	orr.w	r2, r2, #32
 8005234:	60da      	str	r2, [r3, #12]
 8005236:	e007      	b.n	8005248 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	691a      	ldr	r2, [r3, #16]
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f042 0220 	orr.w	r2, r2, #32
 8005246:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8005248:	2300      	movs	r3, #0
 800524a:	e006      	b.n	800525a <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005250:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005258:	2301      	movs	r3, #1
  }
}
 800525a:	4618      	mov	r0, r3
 800525c:	371c      	adds	r7, #28
 800525e:	46bd      	mov	sp, r7
 8005260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005264:	4770      	bx	lr

08005266 <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(const CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 8005266:	b480      	push	{r7}
 8005268:	b085      	sub	sp, #20
 800526a:	af00      	add	r7, sp, #0
 800526c:	6078      	str	r0, [r7, #4]
 800526e:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 8005270:	2300      	movs	r3, #0
 8005272:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	f893 3020 	ldrb.w	r3, [r3, #32]
 800527a:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800527c:	7afb      	ldrb	r3, [r7, #11]
 800527e:	2b01      	cmp	r3, #1
 8005280:	d002      	beq.n	8005288 <HAL_CAN_GetRxFifoFillLevel+0x22>
 8005282:	7afb      	ldrb	r3, [r7, #11]
 8005284:	2b02      	cmp	r3, #2
 8005286:	d10f      	bne.n	80052a8 <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d106      	bne.n	800529c <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	68db      	ldr	r3, [r3, #12]
 8005294:	f003 0303 	and.w	r3, r3, #3
 8005298:	60fb      	str	r3, [r7, #12]
 800529a:	e005      	b.n	80052a8 <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	691b      	ldr	r3, [r3, #16]
 80052a2:	f003 0303 	and.w	r3, r3, #3
 80052a6:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 80052a8:	68fb      	ldr	r3, [r7, #12]
}
 80052aa:	4618      	mov	r0, r3
 80052ac:	3714      	adds	r7, #20
 80052ae:	46bd      	mov	sp, r7
 80052b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b4:	4770      	bx	lr

080052b6 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80052b6:	b480      	push	{r7}
 80052b8:	b085      	sub	sp, #20
 80052ba:	af00      	add	r7, sp, #0
 80052bc:	6078      	str	r0, [r7, #4]
 80052be:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80052c6:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80052c8:	7bfb      	ldrb	r3, [r7, #15]
 80052ca:	2b01      	cmp	r3, #1
 80052cc:	d002      	beq.n	80052d4 <HAL_CAN_ActivateNotification+0x1e>
 80052ce:	7bfb      	ldrb	r3, [r7, #15]
 80052d0:	2b02      	cmp	r3, #2
 80052d2:	d109      	bne.n	80052e8 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	6959      	ldr	r1, [r3, #20]
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	683a      	ldr	r2, [r7, #0]
 80052e0:	430a      	orrs	r2, r1
 80052e2:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80052e4:	2300      	movs	r3, #0
 80052e6:	e006      	b.n	80052f6 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ec:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80052f4:	2301      	movs	r3, #1
  }
}
 80052f6:	4618      	mov	r0, r3
 80052f8:	3714      	adds	r7, #20
 80052fa:	46bd      	mov	sp, r7
 80052fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005300:	4770      	bx	lr
	...

08005304 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005304:	b480      	push	{r7}
 8005306:	b085      	sub	sp, #20
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	f003 0307 	and.w	r3, r3, #7
 8005312:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005314:	4b0c      	ldr	r3, [pc, #48]	; (8005348 <__NVIC_SetPriorityGrouping+0x44>)
 8005316:	68db      	ldr	r3, [r3, #12]
 8005318:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800531a:	68ba      	ldr	r2, [r7, #8]
 800531c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005320:	4013      	ands	r3, r2
 8005322:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005328:	68bb      	ldr	r3, [r7, #8]
 800532a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800532c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005330:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005334:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005336:	4a04      	ldr	r2, [pc, #16]	; (8005348 <__NVIC_SetPriorityGrouping+0x44>)
 8005338:	68bb      	ldr	r3, [r7, #8]
 800533a:	60d3      	str	r3, [r2, #12]
}
 800533c:	bf00      	nop
 800533e:	3714      	adds	r7, #20
 8005340:	46bd      	mov	sp, r7
 8005342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005346:	4770      	bx	lr
 8005348:	e000ed00 	.word	0xe000ed00

0800534c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800534c:	b480      	push	{r7}
 800534e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005350:	4b04      	ldr	r3, [pc, #16]	; (8005364 <__NVIC_GetPriorityGrouping+0x18>)
 8005352:	68db      	ldr	r3, [r3, #12]
 8005354:	0a1b      	lsrs	r3, r3, #8
 8005356:	f003 0307 	and.w	r3, r3, #7
}
 800535a:	4618      	mov	r0, r3
 800535c:	46bd      	mov	sp, r7
 800535e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005362:	4770      	bx	lr
 8005364:	e000ed00 	.word	0xe000ed00

08005368 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005368:	b480      	push	{r7}
 800536a:	b083      	sub	sp, #12
 800536c:	af00      	add	r7, sp, #0
 800536e:	4603      	mov	r3, r0
 8005370:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005372:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005376:	2b00      	cmp	r3, #0
 8005378:	db0b      	blt.n	8005392 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800537a:	79fb      	ldrb	r3, [r7, #7]
 800537c:	f003 021f 	and.w	r2, r3, #31
 8005380:	4907      	ldr	r1, [pc, #28]	; (80053a0 <__NVIC_EnableIRQ+0x38>)
 8005382:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005386:	095b      	lsrs	r3, r3, #5
 8005388:	2001      	movs	r0, #1
 800538a:	fa00 f202 	lsl.w	r2, r0, r2
 800538e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005392:	bf00      	nop
 8005394:	370c      	adds	r7, #12
 8005396:	46bd      	mov	sp, r7
 8005398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539c:	4770      	bx	lr
 800539e:	bf00      	nop
 80053a0:	e000e100 	.word	0xe000e100

080053a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80053a4:	b480      	push	{r7}
 80053a6:	b083      	sub	sp, #12
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	4603      	mov	r3, r0
 80053ac:	6039      	str	r1, [r7, #0]
 80053ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80053b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	db0a      	blt.n	80053ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	b2da      	uxtb	r2, r3
 80053bc:	490c      	ldr	r1, [pc, #48]	; (80053f0 <__NVIC_SetPriority+0x4c>)
 80053be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053c2:	0112      	lsls	r2, r2, #4
 80053c4:	b2d2      	uxtb	r2, r2
 80053c6:	440b      	add	r3, r1
 80053c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80053cc:	e00a      	b.n	80053e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	b2da      	uxtb	r2, r3
 80053d2:	4908      	ldr	r1, [pc, #32]	; (80053f4 <__NVIC_SetPriority+0x50>)
 80053d4:	79fb      	ldrb	r3, [r7, #7]
 80053d6:	f003 030f 	and.w	r3, r3, #15
 80053da:	3b04      	subs	r3, #4
 80053dc:	0112      	lsls	r2, r2, #4
 80053de:	b2d2      	uxtb	r2, r2
 80053e0:	440b      	add	r3, r1
 80053e2:	761a      	strb	r2, [r3, #24]
}
 80053e4:	bf00      	nop
 80053e6:	370c      	adds	r7, #12
 80053e8:	46bd      	mov	sp, r7
 80053ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ee:	4770      	bx	lr
 80053f0:	e000e100 	.word	0xe000e100
 80053f4:	e000ed00 	.word	0xe000ed00

080053f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80053f8:	b480      	push	{r7}
 80053fa:	b089      	sub	sp, #36	; 0x24
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	60f8      	str	r0, [r7, #12]
 8005400:	60b9      	str	r1, [r7, #8]
 8005402:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	f003 0307 	and.w	r3, r3, #7
 800540a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800540c:	69fb      	ldr	r3, [r7, #28]
 800540e:	f1c3 0307 	rsb	r3, r3, #7
 8005412:	2b04      	cmp	r3, #4
 8005414:	bf28      	it	cs
 8005416:	2304      	movcs	r3, #4
 8005418:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800541a:	69fb      	ldr	r3, [r7, #28]
 800541c:	3304      	adds	r3, #4
 800541e:	2b06      	cmp	r3, #6
 8005420:	d902      	bls.n	8005428 <NVIC_EncodePriority+0x30>
 8005422:	69fb      	ldr	r3, [r7, #28]
 8005424:	3b03      	subs	r3, #3
 8005426:	e000      	b.n	800542a <NVIC_EncodePriority+0x32>
 8005428:	2300      	movs	r3, #0
 800542a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800542c:	f04f 32ff 	mov.w	r2, #4294967295
 8005430:	69bb      	ldr	r3, [r7, #24]
 8005432:	fa02 f303 	lsl.w	r3, r2, r3
 8005436:	43da      	mvns	r2, r3
 8005438:	68bb      	ldr	r3, [r7, #8]
 800543a:	401a      	ands	r2, r3
 800543c:	697b      	ldr	r3, [r7, #20]
 800543e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005440:	f04f 31ff 	mov.w	r1, #4294967295
 8005444:	697b      	ldr	r3, [r7, #20]
 8005446:	fa01 f303 	lsl.w	r3, r1, r3
 800544a:	43d9      	mvns	r1, r3
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005450:	4313      	orrs	r3, r2
         );
}
 8005452:	4618      	mov	r0, r3
 8005454:	3724      	adds	r7, #36	; 0x24
 8005456:	46bd      	mov	sp, r7
 8005458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545c:	4770      	bx	lr
	...

08005460 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005460:	b580      	push	{r7, lr}
 8005462:	b082      	sub	sp, #8
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	3b01      	subs	r3, #1
 800546c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005470:	d301      	bcc.n	8005476 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005472:	2301      	movs	r3, #1
 8005474:	e00f      	b.n	8005496 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005476:	4a0a      	ldr	r2, [pc, #40]	; (80054a0 <SysTick_Config+0x40>)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	3b01      	subs	r3, #1
 800547c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800547e:	210f      	movs	r1, #15
 8005480:	f04f 30ff 	mov.w	r0, #4294967295
 8005484:	f7ff ff8e 	bl	80053a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005488:	4b05      	ldr	r3, [pc, #20]	; (80054a0 <SysTick_Config+0x40>)
 800548a:	2200      	movs	r2, #0
 800548c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800548e:	4b04      	ldr	r3, [pc, #16]	; (80054a0 <SysTick_Config+0x40>)
 8005490:	2207      	movs	r2, #7
 8005492:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005494:	2300      	movs	r3, #0
}
 8005496:	4618      	mov	r0, r3
 8005498:	3708      	adds	r7, #8
 800549a:	46bd      	mov	sp, r7
 800549c:	bd80      	pop	{r7, pc}
 800549e:	bf00      	nop
 80054a0:	e000e010 	.word	0xe000e010

080054a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b082      	sub	sp, #8
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80054ac:	6878      	ldr	r0, [r7, #4]
 80054ae:	f7ff ff29 	bl	8005304 <__NVIC_SetPriorityGrouping>
}
 80054b2:	bf00      	nop
 80054b4:	3708      	adds	r7, #8
 80054b6:	46bd      	mov	sp, r7
 80054b8:	bd80      	pop	{r7, pc}

080054ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80054ba:	b580      	push	{r7, lr}
 80054bc:	b086      	sub	sp, #24
 80054be:	af00      	add	r7, sp, #0
 80054c0:	4603      	mov	r3, r0
 80054c2:	60b9      	str	r1, [r7, #8]
 80054c4:	607a      	str	r2, [r7, #4]
 80054c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80054c8:	2300      	movs	r3, #0
 80054ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80054cc:	f7ff ff3e 	bl	800534c <__NVIC_GetPriorityGrouping>
 80054d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80054d2:	687a      	ldr	r2, [r7, #4]
 80054d4:	68b9      	ldr	r1, [r7, #8]
 80054d6:	6978      	ldr	r0, [r7, #20]
 80054d8:	f7ff ff8e 	bl	80053f8 <NVIC_EncodePriority>
 80054dc:	4602      	mov	r2, r0
 80054de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80054e2:	4611      	mov	r1, r2
 80054e4:	4618      	mov	r0, r3
 80054e6:	f7ff ff5d 	bl	80053a4 <__NVIC_SetPriority>
}
 80054ea:	bf00      	nop
 80054ec:	3718      	adds	r7, #24
 80054ee:	46bd      	mov	sp, r7
 80054f0:	bd80      	pop	{r7, pc}

080054f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80054f2:	b580      	push	{r7, lr}
 80054f4:	b082      	sub	sp, #8
 80054f6:	af00      	add	r7, sp, #0
 80054f8:	4603      	mov	r3, r0
 80054fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80054fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005500:	4618      	mov	r0, r3
 8005502:	f7ff ff31 	bl	8005368 <__NVIC_EnableIRQ>
}
 8005506:	bf00      	nop
 8005508:	3708      	adds	r7, #8
 800550a:	46bd      	mov	sp, r7
 800550c:	bd80      	pop	{r7, pc}

0800550e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800550e:	b580      	push	{r7, lr}
 8005510:	b082      	sub	sp, #8
 8005512:	af00      	add	r7, sp, #0
 8005514:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005516:	6878      	ldr	r0, [r7, #4]
 8005518:	f7ff ffa2 	bl	8005460 <SysTick_Config>
 800551c:	4603      	mov	r3, r0
}
 800551e:	4618      	mov	r0, r3
 8005520:	3708      	adds	r7, #8
 8005522:	46bd      	mov	sp, r7
 8005524:	bd80      	pop	{r7, pc}
	...

08005528 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005528:	b480      	push	{r7}
 800552a:	b087      	sub	sp, #28
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
 8005530:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005532:	2300      	movs	r3, #0
 8005534:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005536:	e154      	b.n	80057e2 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	681a      	ldr	r2, [r3, #0]
 800553c:	2101      	movs	r1, #1
 800553e:	697b      	ldr	r3, [r7, #20]
 8005540:	fa01 f303 	lsl.w	r3, r1, r3
 8005544:	4013      	ands	r3, r2
 8005546:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	2b00      	cmp	r3, #0
 800554c:	f000 8146 	beq.w	80057dc <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	685b      	ldr	r3, [r3, #4]
 8005554:	f003 0303 	and.w	r3, r3, #3
 8005558:	2b01      	cmp	r3, #1
 800555a:	d005      	beq.n	8005568 <HAL_GPIO_Init+0x40>
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	685b      	ldr	r3, [r3, #4]
 8005560:	f003 0303 	and.w	r3, r3, #3
 8005564:	2b02      	cmp	r3, #2
 8005566:	d130      	bne.n	80055ca <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	689b      	ldr	r3, [r3, #8]
 800556c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800556e:	697b      	ldr	r3, [r7, #20]
 8005570:	005b      	lsls	r3, r3, #1
 8005572:	2203      	movs	r2, #3
 8005574:	fa02 f303 	lsl.w	r3, r2, r3
 8005578:	43db      	mvns	r3, r3
 800557a:	693a      	ldr	r2, [r7, #16]
 800557c:	4013      	ands	r3, r2
 800557e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	68da      	ldr	r2, [r3, #12]
 8005584:	697b      	ldr	r3, [r7, #20]
 8005586:	005b      	lsls	r3, r3, #1
 8005588:	fa02 f303 	lsl.w	r3, r2, r3
 800558c:	693a      	ldr	r2, [r7, #16]
 800558e:	4313      	orrs	r3, r2
 8005590:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	693a      	ldr	r2, [r7, #16]
 8005596:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	685b      	ldr	r3, [r3, #4]
 800559c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800559e:	2201      	movs	r2, #1
 80055a0:	697b      	ldr	r3, [r7, #20]
 80055a2:	fa02 f303 	lsl.w	r3, r2, r3
 80055a6:	43db      	mvns	r3, r3
 80055a8:	693a      	ldr	r2, [r7, #16]
 80055aa:	4013      	ands	r3, r2
 80055ac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	685b      	ldr	r3, [r3, #4]
 80055b2:	091b      	lsrs	r3, r3, #4
 80055b4:	f003 0201 	and.w	r2, r3, #1
 80055b8:	697b      	ldr	r3, [r7, #20]
 80055ba:	fa02 f303 	lsl.w	r3, r2, r3
 80055be:	693a      	ldr	r2, [r7, #16]
 80055c0:	4313      	orrs	r3, r2
 80055c2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	693a      	ldr	r2, [r7, #16]
 80055c8:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	685b      	ldr	r3, [r3, #4]
 80055ce:	f003 0303 	and.w	r3, r3, #3
 80055d2:	2b03      	cmp	r3, #3
 80055d4:	d017      	beq.n	8005606 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	68db      	ldr	r3, [r3, #12]
 80055da:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80055dc:	697b      	ldr	r3, [r7, #20]
 80055de:	005b      	lsls	r3, r3, #1
 80055e0:	2203      	movs	r2, #3
 80055e2:	fa02 f303 	lsl.w	r3, r2, r3
 80055e6:	43db      	mvns	r3, r3
 80055e8:	693a      	ldr	r2, [r7, #16]
 80055ea:	4013      	ands	r3, r2
 80055ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	689a      	ldr	r2, [r3, #8]
 80055f2:	697b      	ldr	r3, [r7, #20]
 80055f4:	005b      	lsls	r3, r3, #1
 80055f6:	fa02 f303 	lsl.w	r3, r2, r3
 80055fa:	693a      	ldr	r2, [r7, #16]
 80055fc:	4313      	orrs	r3, r2
 80055fe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	693a      	ldr	r2, [r7, #16]
 8005604:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	685b      	ldr	r3, [r3, #4]
 800560a:	f003 0303 	and.w	r3, r3, #3
 800560e:	2b02      	cmp	r3, #2
 8005610:	d123      	bne.n	800565a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8005612:	697b      	ldr	r3, [r7, #20]
 8005614:	08da      	lsrs	r2, r3, #3
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	3208      	adds	r2, #8
 800561a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800561e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005620:	697b      	ldr	r3, [r7, #20]
 8005622:	f003 0307 	and.w	r3, r3, #7
 8005626:	009b      	lsls	r3, r3, #2
 8005628:	220f      	movs	r2, #15
 800562a:	fa02 f303 	lsl.w	r3, r2, r3
 800562e:	43db      	mvns	r3, r3
 8005630:	693a      	ldr	r2, [r7, #16]
 8005632:	4013      	ands	r3, r2
 8005634:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	691a      	ldr	r2, [r3, #16]
 800563a:	697b      	ldr	r3, [r7, #20]
 800563c:	f003 0307 	and.w	r3, r3, #7
 8005640:	009b      	lsls	r3, r3, #2
 8005642:	fa02 f303 	lsl.w	r3, r2, r3
 8005646:	693a      	ldr	r2, [r7, #16]
 8005648:	4313      	orrs	r3, r2
 800564a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800564c:	697b      	ldr	r3, [r7, #20]
 800564e:	08da      	lsrs	r2, r3, #3
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	3208      	adds	r2, #8
 8005654:	6939      	ldr	r1, [r7, #16]
 8005656:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8005660:	697b      	ldr	r3, [r7, #20]
 8005662:	005b      	lsls	r3, r3, #1
 8005664:	2203      	movs	r2, #3
 8005666:	fa02 f303 	lsl.w	r3, r2, r3
 800566a:	43db      	mvns	r3, r3
 800566c:	693a      	ldr	r2, [r7, #16]
 800566e:	4013      	ands	r3, r2
 8005670:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	685b      	ldr	r3, [r3, #4]
 8005676:	f003 0203 	and.w	r2, r3, #3
 800567a:	697b      	ldr	r3, [r7, #20]
 800567c:	005b      	lsls	r3, r3, #1
 800567e:	fa02 f303 	lsl.w	r3, r2, r3
 8005682:	693a      	ldr	r2, [r7, #16]
 8005684:	4313      	orrs	r3, r2
 8005686:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	693a      	ldr	r2, [r7, #16]
 800568c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	685b      	ldr	r3, [r3, #4]
 8005692:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005696:	2b00      	cmp	r3, #0
 8005698:	f000 80a0 	beq.w	80057dc <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800569c:	4b58      	ldr	r3, [pc, #352]	; (8005800 <HAL_GPIO_Init+0x2d8>)
 800569e:	699b      	ldr	r3, [r3, #24]
 80056a0:	4a57      	ldr	r2, [pc, #348]	; (8005800 <HAL_GPIO_Init+0x2d8>)
 80056a2:	f043 0301 	orr.w	r3, r3, #1
 80056a6:	6193      	str	r3, [r2, #24]
 80056a8:	4b55      	ldr	r3, [pc, #340]	; (8005800 <HAL_GPIO_Init+0x2d8>)
 80056aa:	699b      	ldr	r3, [r3, #24]
 80056ac:	f003 0301 	and.w	r3, r3, #1
 80056b0:	60bb      	str	r3, [r7, #8]
 80056b2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80056b4:	4a53      	ldr	r2, [pc, #332]	; (8005804 <HAL_GPIO_Init+0x2dc>)
 80056b6:	697b      	ldr	r3, [r7, #20]
 80056b8:	089b      	lsrs	r3, r3, #2
 80056ba:	3302      	adds	r3, #2
 80056bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80056c0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80056c2:	697b      	ldr	r3, [r7, #20]
 80056c4:	f003 0303 	and.w	r3, r3, #3
 80056c8:	009b      	lsls	r3, r3, #2
 80056ca:	220f      	movs	r2, #15
 80056cc:	fa02 f303 	lsl.w	r3, r2, r3
 80056d0:	43db      	mvns	r3, r3
 80056d2:	693a      	ldr	r2, [r7, #16]
 80056d4:	4013      	ands	r3, r2
 80056d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80056de:	d019      	beq.n	8005714 <HAL_GPIO_Init+0x1ec>
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	4a49      	ldr	r2, [pc, #292]	; (8005808 <HAL_GPIO_Init+0x2e0>)
 80056e4:	4293      	cmp	r3, r2
 80056e6:	d013      	beq.n	8005710 <HAL_GPIO_Init+0x1e8>
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	4a48      	ldr	r2, [pc, #288]	; (800580c <HAL_GPIO_Init+0x2e4>)
 80056ec:	4293      	cmp	r3, r2
 80056ee:	d00d      	beq.n	800570c <HAL_GPIO_Init+0x1e4>
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	4a47      	ldr	r2, [pc, #284]	; (8005810 <HAL_GPIO_Init+0x2e8>)
 80056f4:	4293      	cmp	r3, r2
 80056f6:	d007      	beq.n	8005708 <HAL_GPIO_Init+0x1e0>
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	4a46      	ldr	r2, [pc, #280]	; (8005814 <HAL_GPIO_Init+0x2ec>)
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d101      	bne.n	8005704 <HAL_GPIO_Init+0x1dc>
 8005700:	2304      	movs	r3, #4
 8005702:	e008      	b.n	8005716 <HAL_GPIO_Init+0x1ee>
 8005704:	2305      	movs	r3, #5
 8005706:	e006      	b.n	8005716 <HAL_GPIO_Init+0x1ee>
 8005708:	2303      	movs	r3, #3
 800570a:	e004      	b.n	8005716 <HAL_GPIO_Init+0x1ee>
 800570c:	2302      	movs	r3, #2
 800570e:	e002      	b.n	8005716 <HAL_GPIO_Init+0x1ee>
 8005710:	2301      	movs	r3, #1
 8005712:	e000      	b.n	8005716 <HAL_GPIO_Init+0x1ee>
 8005714:	2300      	movs	r3, #0
 8005716:	697a      	ldr	r2, [r7, #20]
 8005718:	f002 0203 	and.w	r2, r2, #3
 800571c:	0092      	lsls	r2, r2, #2
 800571e:	4093      	lsls	r3, r2
 8005720:	693a      	ldr	r2, [r7, #16]
 8005722:	4313      	orrs	r3, r2
 8005724:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005726:	4937      	ldr	r1, [pc, #220]	; (8005804 <HAL_GPIO_Init+0x2dc>)
 8005728:	697b      	ldr	r3, [r7, #20]
 800572a:	089b      	lsrs	r3, r3, #2
 800572c:	3302      	adds	r3, #2
 800572e:	693a      	ldr	r2, [r7, #16]
 8005730:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005734:	4b38      	ldr	r3, [pc, #224]	; (8005818 <HAL_GPIO_Init+0x2f0>)
 8005736:	689b      	ldr	r3, [r3, #8]
 8005738:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	43db      	mvns	r3, r3
 800573e:	693a      	ldr	r2, [r7, #16]
 8005740:	4013      	ands	r3, r2
 8005742:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	685b      	ldr	r3, [r3, #4]
 8005748:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800574c:	2b00      	cmp	r3, #0
 800574e:	d003      	beq.n	8005758 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8005750:	693a      	ldr	r2, [r7, #16]
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	4313      	orrs	r3, r2
 8005756:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8005758:	4a2f      	ldr	r2, [pc, #188]	; (8005818 <HAL_GPIO_Init+0x2f0>)
 800575a:	693b      	ldr	r3, [r7, #16]
 800575c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800575e:	4b2e      	ldr	r3, [pc, #184]	; (8005818 <HAL_GPIO_Init+0x2f0>)
 8005760:	68db      	ldr	r3, [r3, #12]
 8005762:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	43db      	mvns	r3, r3
 8005768:	693a      	ldr	r2, [r7, #16]
 800576a:	4013      	ands	r3, r2
 800576c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	685b      	ldr	r3, [r3, #4]
 8005772:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005776:	2b00      	cmp	r3, #0
 8005778:	d003      	beq.n	8005782 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800577a:	693a      	ldr	r2, [r7, #16]
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	4313      	orrs	r3, r2
 8005780:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8005782:	4a25      	ldr	r2, [pc, #148]	; (8005818 <HAL_GPIO_Init+0x2f0>)
 8005784:	693b      	ldr	r3, [r7, #16]
 8005786:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005788:	4b23      	ldr	r3, [pc, #140]	; (8005818 <HAL_GPIO_Init+0x2f0>)
 800578a:	685b      	ldr	r3, [r3, #4]
 800578c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	43db      	mvns	r3, r3
 8005792:	693a      	ldr	r2, [r7, #16]
 8005794:	4013      	ands	r3, r2
 8005796:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	685b      	ldr	r3, [r3, #4]
 800579c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d003      	beq.n	80057ac <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80057a4:	693a      	ldr	r2, [r7, #16]
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	4313      	orrs	r3, r2
 80057aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80057ac:	4a1a      	ldr	r2, [pc, #104]	; (8005818 <HAL_GPIO_Init+0x2f0>)
 80057ae:	693b      	ldr	r3, [r7, #16]
 80057b0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80057b2:	4b19      	ldr	r3, [pc, #100]	; (8005818 <HAL_GPIO_Init+0x2f0>)
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	43db      	mvns	r3, r3
 80057bc:	693a      	ldr	r2, [r7, #16]
 80057be:	4013      	ands	r3, r2
 80057c0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	685b      	ldr	r3, [r3, #4]
 80057c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d003      	beq.n	80057d6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80057ce:	693a      	ldr	r2, [r7, #16]
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	4313      	orrs	r3, r2
 80057d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80057d6:	4a10      	ldr	r2, [pc, #64]	; (8005818 <HAL_GPIO_Init+0x2f0>)
 80057d8:	693b      	ldr	r3, [r7, #16]
 80057da:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80057dc:	697b      	ldr	r3, [r7, #20]
 80057de:	3301      	adds	r3, #1
 80057e0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	681a      	ldr	r2, [r3, #0]
 80057e6:	697b      	ldr	r3, [r7, #20]
 80057e8:	fa22 f303 	lsr.w	r3, r2, r3
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	f47f aea3 	bne.w	8005538 <HAL_GPIO_Init+0x10>
  }
}
 80057f2:	bf00      	nop
 80057f4:	bf00      	nop
 80057f6:	371c      	adds	r7, #28
 80057f8:	46bd      	mov	sp, r7
 80057fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fe:	4770      	bx	lr
 8005800:	40021000 	.word	0x40021000
 8005804:	40010000 	.word	0x40010000
 8005808:	48000400 	.word	0x48000400
 800580c:	48000800 	.word	0x48000800
 8005810:	48000c00 	.word	0x48000c00
 8005814:	48001000 	.word	0x48001000
 8005818:	40010400 	.word	0x40010400

0800581c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800581c:	b480      	push	{r7}
 800581e:	b085      	sub	sp, #20
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
 8005824:	460b      	mov	r3, r1
 8005826:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	691a      	ldr	r2, [r3, #16]
 800582c:	887b      	ldrh	r3, [r7, #2]
 800582e:	4013      	ands	r3, r2
 8005830:	2b00      	cmp	r3, #0
 8005832:	d002      	beq.n	800583a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005834:	2301      	movs	r3, #1
 8005836:	73fb      	strb	r3, [r7, #15]
 8005838:	e001      	b.n	800583e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800583a:	2300      	movs	r3, #0
 800583c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800583e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005840:	4618      	mov	r0, r3
 8005842:	3714      	adds	r7, #20
 8005844:	46bd      	mov	sp, r7
 8005846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584a:	4770      	bx	lr

0800584c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800584c:	b480      	push	{r7}
 800584e:	b083      	sub	sp, #12
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
 8005854:	460b      	mov	r3, r1
 8005856:	807b      	strh	r3, [r7, #2]
 8005858:	4613      	mov	r3, r2
 800585a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800585c:	787b      	ldrb	r3, [r7, #1]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d003      	beq.n	800586a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005862:	887a      	ldrh	r2, [r7, #2]
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005868:	e002      	b.n	8005870 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800586a:	887a      	ldrh	r2, [r7, #2]
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005870:	bf00      	nop
 8005872:	370c      	adds	r7, #12
 8005874:	46bd      	mov	sp, r7
 8005876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587a:	4770      	bx	lr

0800587c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800587c:	b480      	push	{r7}
 800587e:	b085      	sub	sp, #20
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
 8005884:	460b      	mov	r3, r1
 8005886:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	695b      	ldr	r3, [r3, #20]
 800588c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800588e:	887a      	ldrh	r2, [r7, #2]
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	4013      	ands	r3, r2
 8005894:	041a      	lsls	r2, r3, #16
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	43d9      	mvns	r1, r3
 800589a:	887b      	ldrh	r3, [r7, #2]
 800589c:	400b      	ands	r3, r1
 800589e:	431a      	orrs	r2, r3
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	619a      	str	r2, [r3, #24]
}
 80058a4:	bf00      	nop
 80058a6:	3714      	adds	r7, #20
 80058a8:	46bd      	mov	sp, r7
 80058aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ae:	4770      	bx	lr

080058b0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b082      	sub	sp, #8
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	4603      	mov	r3, r0
 80058b8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80058ba:	4b08      	ldr	r3, [pc, #32]	; (80058dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80058bc:	695a      	ldr	r2, [r3, #20]
 80058be:	88fb      	ldrh	r3, [r7, #6]
 80058c0:	4013      	ands	r3, r2
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d006      	beq.n	80058d4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80058c6:	4a05      	ldr	r2, [pc, #20]	; (80058dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80058c8:	88fb      	ldrh	r3, [r7, #6]
 80058ca:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80058cc:	88fb      	ldrh	r3, [r7, #6]
 80058ce:	4618      	mov	r0, r3
 80058d0:	f000 f806 	bl	80058e0 <HAL_GPIO_EXTI_Callback>
  }
}
 80058d4:	bf00      	nop
 80058d6:	3708      	adds	r7, #8
 80058d8:	46bd      	mov	sp, r7
 80058da:	bd80      	pop	{r7, pc}
 80058dc:	40010400 	.word	0x40010400

080058e0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80058e0:	b480      	push	{r7}
 80058e2:	b083      	sub	sp, #12
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	4603      	mov	r3, r0
 80058e8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80058ea:	bf00      	nop
 80058ec:	370c      	adds	r7, #12
 80058ee:	46bd      	mov	sp, r7
 80058f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f4:	4770      	bx	lr

080058f6 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80058f6:	b580      	push	{r7, lr}
 80058f8:	b082      	sub	sp, #8
 80058fa:	af00      	add	r7, sp, #0
 80058fc:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d101      	bne.n	8005908 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005904:	2301      	movs	r3, #1
 8005906:	e081      	b.n	8005a0c <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800590e:	b2db      	uxtb	r3, r3
 8005910:	2b00      	cmp	r3, #0
 8005912:	d106      	bne.n	8005922 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2200      	movs	r2, #0
 8005918:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800591c:	6878      	ldr	r0, [r7, #4]
 800591e:	f7fc fa23 	bl	8001d68 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	2224      	movs	r2, #36	; 0x24
 8005926:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	681a      	ldr	r2, [r3, #0]
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f022 0201 	bic.w	r2, r2, #1
 8005938:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	685a      	ldr	r2, [r3, #4]
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005946:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	689a      	ldr	r2, [r3, #8]
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005956:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	68db      	ldr	r3, [r3, #12]
 800595c:	2b01      	cmp	r3, #1
 800595e:	d107      	bne.n	8005970 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	689a      	ldr	r2, [r3, #8]
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800596c:	609a      	str	r2, [r3, #8]
 800596e:	e006      	b.n	800597e <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	689a      	ldr	r2, [r3, #8]
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800597c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	68db      	ldr	r3, [r3, #12]
 8005982:	2b02      	cmp	r3, #2
 8005984:	d104      	bne.n	8005990 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800598e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	685b      	ldr	r3, [r3, #4]
 8005996:	687a      	ldr	r2, [r7, #4]
 8005998:	6812      	ldr	r2, [r2, #0]
 800599a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800599e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059a2:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	68da      	ldr	r2, [r3, #12]
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80059b2:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	691a      	ldr	r2, [r3, #16]
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	695b      	ldr	r3, [r3, #20]
 80059bc:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	699b      	ldr	r3, [r3, #24]
 80059c4:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	430a      	orrs	r2, r1
 80059cc:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	69d9      	ldr	r1, [r3, #28]
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6a1a      	ldr	r2, [r3, #32]
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	430a      	orrs	r2, r1
 80059dc:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	681a      	ldr	r2, [r3, #0]
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f042 0201 	orr.w	r2, r2, #1
 80059ec:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2200      	movs	r2, #0
 80059f2:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2220      	movs	r2, #32
 80059f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2200      	movs	r2, #0
 8005a00:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	2200      	movs	r2, #0
 8005a06:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005a0a:	2300      	movs	r3, #0
}
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	3708      	adds	r7, #8
 8005a10:	46bd      	mov	sp, r7
 8005a12:	bd80      	pop	{r7, pc}

08005a14 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005a14:	b580      	push	{r7, lr}
 8005a16:	b088      	sub	sp, #32
 8005a18:	af02      	add	r7, sp, #8
 8005a1a:	60f8      	str	r0, [r7, #12]
 8005a1c:	607a      	str	r2, [r7, #4]
 8005a1e:	461a      	mov	r2, r3
 8005a20:	460b      	mov	r3, r1
 8005a22:	817b      	strh	r3, [r7, #10]
 8005a24:	4613      	mov	r3, r2
 8005a26:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005a2e:	b2db      	uxtb	r3, r3
 8005a30:	2b20      	cmp	r3, #32
 8005a32:	f040 80da 	bne.w	8005bea <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005a3c:	2b01      	cmp	r3, #1
 8005a3e:	d101      	bne.n	8005a44 <HAL_I2C_Master_Transmit+0x30>
 8005a40:	2302      	movs	r3, #2
 8005a42:	e0d3      	b.n	8005bec <HAL_I2C_Master_Transmit+0x1d8>
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	2201      	movs	r2, #1
 8005a48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005a4c:	f7fd ff10 	bl	8003870 <HAL_GetTick>
 8005a50:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005a52:	697b      	ldr	r3, [r7, #20]
 8005a54:	9300      	str	r3, [sp, #0]
 8005a56:	2319      	movs	r3, #25
 8005a58:	2201      	movs	r2, #1
 8005a5a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005a5e:	68f8      	ldr	r0, [r7, #12]
 8005a60:	f000 f9e6 	bl	8005e30 <I2C_WaitOnFlagUntilTimeout>
 8005a64:	4603      	mov	r3, r0
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d001      	beq.n	8005a6e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8005a6a:	2301      	movs	r3, #1
 8005a6c:	e0be      	b.n	8005bec <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	2221      	movs	r2, #33	; 0x21
 8005a72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	2210      	movs	r2, #16
 8005a7a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	2200      	movs	r2, #0
 8005a82:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	687a      	ldr	r2, [r7, #4]
 8005a88:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	893a      	ldrh	r2, [r7, #8]
 8005a8e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	2200      	movs	r2, #0
 8005a94:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a9a:	b29b      	uxth	r3, r3
 8005a9c:	2bff      	cmp	r3, #255	; 0xff
 8005a9e:	d90e      	bls.n	8005abe <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	22ff      	movs	r2, #255	; 0xff
 8005aa4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005aaa:	b2da      	uxtb	r2, r3
 8005aac:	8979      	ldrh	r1, [r7, #10]
 8005aae:	4b51      	ldr	r3, [pc, #324]	; (8005bf4 <HAL_I2C_Master_Transmit+0x1e0>)
 8005ab0:	9300      	str	r3, [sp, #0]
 8005ab2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005ab6:	68f8      	ldr	r0, [r7, #12]
 8005ab8:	f000 fbf6 	bl	80062a8 <I2C_TransferConfig>
 8005abc:	e06c      	b.n	8005b98 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ac2:	b29a      	uxth	r2, r3
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005acc:	b2da      	uxtb	r2, r3
 8005ace:	8979      	ldrh	r1, [r7, #10]
 8005ad0:	4b48      	ldr	r3, [pc, #288]	; (8005bf4 <HAL_I2C_Master_Transmit+0x1e0>)
 8005ad2:	9300      	str	r3, [sp, #0]
 8005ad4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005ad8:	68f8      	ldr	r0, [r7, #12]
 8005ada:	f000 fbe5 	bl	80062a8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8005ade:	e05b      	b.n	8005b98 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005ae0:	697a      	ldr	r2, [r7, #20]
 8005ae2:	6a39      	ldr	r1, [r7, #32]
 8005ae4:	68f8      	ldr	r0, [r7, #12]
 8005ae6:	f000 f9f2 	bl	8005ece <I2C_WaitOnTXISFlagUntilTimeout>
 8005aea:	4603      	mov	r3, r0
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d001      	beq.n	8005af4 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8005af0:	2301      	movs	r3, #1
 8005af2:	e07b      	b.n	8005bec <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005af8:	781a      	ldrb	r2, [r3, #0]
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b04:	1c5a      	adds	r2, r3, #1
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b0e:	b29b      	uxth	r3, r3
 8005b10:	3b01      	subs	r3, #1
 8005b12:	b29a      	uxth	r2, r3
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b1c:	3b01      	subs	r3, #1
 8005b1e:	b29a      	uxth	r2, r3
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b28:	b29b      	uxth	r3, r3
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d034      	beq.n	8005b98 <HAL_I2C_Master_Transmit+0x184>
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d130      	bne.n	8005b98 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005b36:	697b      	ldr	r3, [r7, #20]
 8005b38:	9300      	str	r3, [sp, #0]
 8005b3a:	6a3b      	ldr	r3, [r7, #32]
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	2180      	movs	r1, #128	; 0x80
 8005b40:	68f8      	ldr	r0, [r7, #12]
 8005b42:	f000 f975 	bl	8005e30 <I2C_WaitOnFlagUntilTimeout>
 8005b46:	4603      	mov	r3, r0
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d001      	beq.n	8005b50 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8005b4c:	2301      	movs	r3, #1
 8005b4e:	e04d      	b.n	8005bec <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b54:	b29b      	uxth	r3, r3
 8005b56:	2bff      	cmp	r3, #255	; 0xff
 8005b58:	d90e      	bls.n	8005b78 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	22ff      	movs	r2, #255	; 0xff
 8005b5e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b64:	b2da      	uxtb	r2, r3
 8005b66:	8979      	ldrh	r1, [r7, #10]
 8005b68:	2300      	movs	r3, #0
 8005b6a:	9300      	str	r3, [sp, #0]
 8005b6c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005b70:	68f8      	ldr	r0, [r7, #12]
 8005b72:	f000 fb99 	bl	80062a8 <I2C_TransferConfig>
 8005b76:	e00f      	b.n	8005b98 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b7c:	b29a      	uxth	r2, r3
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b86:	b2da      	uxtb	r2, r3
 8005b88:	8979      	ldrh	r1, [r7, #10]
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	9300      	str	r3, [sp, #0]
 8005b8e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005b92:	68f8      	ldr	r0, [r7, #12]
 8005b94:	f000 fb88 	bl	80062a8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b9c:	b29b      	uxth	r3, r3
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d19e      	bne.n	8005ae0 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005ba2:	697a      	ldr	r2, [r7, #20]
 8005ba4:	6a39      	ldr	r1, [r7, #32]
 8005ba6:	68f8      	ldr	r0, [r7, #12]
 8005ba8:	f000 f9d8 	bl	8005f5c <I2C_WaitOnSTOPFlagUntilTimeout>
 8005bac:	4603      	mov	r3, r0
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d001      	beq.n	8005bb6 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8005bb2:	2301      	movs	r3, #1
 8005bb4:	e01a      	b.n	8005bec <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	2220      	movs	r2, #32
 8005bbc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	6859      	ldr	r1, [r3, #4]
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	681a      	ldr	r2, [r3, #0]
 8005bc8:	4b0b      	ldr	r3, [pc, #44]	; (8005bf8 <HAL_I2C_Master_Transmit+0x1e4>)
 8005bca:	400b      	ands	r3, r1
 8005bcc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	2220      	movs	r2, #32
 8005bd2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	2200      	movs	r2, #0
 8005bda:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	2200      	movs	r2, #0
 8005be2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005be6:	2300      	movs	r3, #0
 8005be8:	e000      	b.n	8005bec <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8005bea:	2302      	movs	r3, #2
  }
}
 8005bec:	4618      	mov	r0, r3
 8005bee:	3718      	adds	r7, #24
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	bd80      	pop	{r7, pc}
 8005bf4:	80002000 	.word	0x80002000
 8005bf8:	fe00e800 	.word	0xfe00e800

08005bfc <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b088      	sub	sp, #32
 8005c00:	af02      	add	r7, sp, #8
 8005c02:	60f8      	str	r0, [r7, #12]
 8005c04:	607a      	str	r2, [r7, #4]
 8005c06:	461a      	mov	r2, r3
 8005c08:	460b      	mov	r3, r1
 8005c0a:	817b      	strh	r3, [r7, #10]
 8005c0c:	4613      	mov	r3, r2
 8005c0e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005c16:	b2db      	uxtb	r3, r3
 8005c18:	2b20      	cmp	r3, #32
 8005c1a:	f040 80db 	bne.w	8005dd4 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005c24:	2b01      	cmp	r3, #1
 8005c26:	d101      	bne.n	8005c2c <HAL_I2C_Master_Receive+0x30>
 8005c28:	2302      	movs	r3, #2
 8005c2a:	e0d4      	b.n	8005dd6 <HAL_I2C_Master_Receive+0x1da>
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	2201      	movs	r2, #1
 8005c30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005c34:	f7fd fe1c 	bl	8003870 <HAL_GetTick>
 8005c38:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005c3a:	697b      	ldr	r3, [r7, #20]
 8005c3c:	9300      	str	r3, [sp, #0]
 8005c3e:	2319      	movs	r3, #25
 8005c40:	2201      	movs	r2, #1
 8005c42:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005c46:	68f8      	ldr	r0, [r7, #12]
 8005c48:	f000 f8f2 	bl	8005e30 <I2C_WaitOnFlagUntilTimeout>
 8005c4c:	4603      	mov	r3, r0
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d001      	beq.n	8005c56 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8005c52:	2301      	movs	r3, #1
 8005c54:	e0bf      	b.n	8005dd6 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	2222      	movs	r2, #34	; 0x22
 8005c5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	2210      	movs	r2, #16
 8005c62:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	2200      	movs	r2, #0
 8005c6a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	687a      	ldr	r2, [r7, #4]
 8005c70:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	893a      	ldrh	r2, [r7, #8]
 8005c76:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c82:	b29b      	uxth	r3, r3
 8005c84:	2bff      	cmp	r3, #255	; 0xff
 8005c86:	d90e      	bls.n	8005ca6 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	22ff      	movs	r2, #255	; 0xff
 8005c8c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c92:	b2da      	uxtb	r2, r3
 8005c94:	8979      	ldrh	r1, [r7, #10]
 8005c96:	4b52      	ldr	r3, [pc, #328]	; (8005de0 <HAL_I2C_Master_Receive+0x1e4>)
 8005c98:	9300      	str	r3, [sp, #0]
 8005c9a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005c9e:	68f8      	ldr	r0, [r7, #12]
 8005ca0:	f000 fb02 	bl	80062a8 <I2C_TransferConfig>
 8005ca4:	e06d      	b.n	8005d82 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005caa:	b29a      	uxth	r2, r3
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cb4:	b2da      	uxtb	r2, r3
 8005cb6:	8979      	ldrh	r1, [r7, #10]
 8005cb8:	4b49      	ldr	r3, [pc, #292]	; (8005de0 <HAL_I2C_Master_Receive+0x1e4>)
 8005cba:	9300      	str	r3, [sp, #0]
 8005cbc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005cc0:	68f8      	ldr	r0, [r7, #12]
 8005cc2:	f000 faf1 	bl	80062a8 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8005cc6:	e05c      	b.n	8005d82 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005cc8:	697a      	ldr	r2, [r7, #20]
 8005cca:	6a39      	ldr	r1, [r7, #32]
 8005ccc:	68f8      	ldr	r0, [r7, #12]
 8005cce:	f000 f989 	bl	8005fe4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005cd2:	4603      	mov	r3, r0
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d001      	beq.n	8005cdc <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8005cd8:	2301      	movs	r3, #1
 8005cda:	e07c      	b.n	8005dd6 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ce6:	b2d2      	uxtb	r2, r2
 8005ce8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cee:	1c5a      	adds	r2, r3, #1
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cf8:	3b01      	subs	r3, #1
 8005cfa:	b29a      	uxth	r2, r3
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d04:	b29b      	uxth	r3, r3
 8005d06:	3b01      	subs	r3, #1
 8005d08:	b29a      	uxth	r2, r3
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d12:	b29b      	uxth	r3, r3
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d034      	beq.n	8005d82 <HAL_I2C_Master_Receive+0x186>
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d130      	bne.n	8005d82 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005d20:	697b      	ldr	r3, [r7, #20]
 8005d22:	9300      	str	r3, [sp, #0]
 8005d24:	6a3b      	ldr	r3, [r7, #32]
 8005d26:	2200      	movs	r2, #0
 8005d28:	2180      	movs	r1, #128	; 0x80
 8005d2a:	68f8      	ldr	r0, [r7, #12]
 8005d2c:	f000 f880 	bl	8005e30 <I2C_WaitOnFlagUntilTimeout>
 8005d30:	4603      	mov	r3, r0
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d001      	beq.n	8005d3a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8005d36:	2301      	movs	r3, #1
 8005d38:	e04d      	b.n	8005dd6 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d3e:	b29b      	uxth	r3, r3
 8005d40:	2bff      	cmp	r3, #255	; 0xff
 8005d42:	d90e      	bls.n	8005d62 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	22ff      	movs	r2, #255	; 0xff
 8005d48:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d4e:	b2da      	uxtb	r2, r3
 8005d50:	8979      	ldrh	r1, [r7, #10]
 8005d52:	2300      	movs	r3, #0
 8005d54:	9300      	str	r3, [sp, #0]
 8005d56:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005d5a:	68f8      	ldr	r0, [r7, #12]
 8005d5c:	f000 faa4 	bl	80062a8 <I2C_TransferConfig>
 8005d60:	e00f      	b.n	8005d82 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d66:	b29a      	uxth	r2, r3
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d70:	b2da      	uxtb	r2, r3
 8005d72:	8979      	ldrh	r1, [r7, #10]
 8005d74:	2300      	movs	r3, #0
 8005d76:	9300      	str	r3, [sp, #0]
 8005d78:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005d7c:	68f8      	ldr	r0, [r7, #12]
 8005d7e:	f000 fa93 	bl	80062a8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d86:	b29b      	uxth	r3, r3
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d19d      	bne.n	8005cc8 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005d8c:	697a      	ldr	r2, [r7, #20]
 8005d8e:	6a39      	ldr	r1, [r7, #32]
 8005d90:	68f8      	ldr	r0, [r7, #12]
 8005d92:	f000 f8e3 	bl	8005f5c <I2C_WaitOnSTOPFlagUntilTimeout>
 8005d96:	4603      	mov	r3, r0
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d001      	beq.n	8005da0 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8005d9c:	2301      	movs	r3, #1
 8005d9e:	e01a      	b.n	8005dd6 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	2220      	movs	r2, #32
 8005da6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	6859      	ldr	r1, [r3, #4]
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	681a      	ldr	r2, [r3, #0]
 8005db2:	4b0c      	ldr	r3, [pc, #48]	; (8005de4 <HAL_I2C_Master_Receive+0x1e8>)
 8005db4:	400b      	ands	r3, r1
 8005db6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	2220      	movs	r2, #32
 8005dbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	2200      	movs	r2, #0
 8005dcc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	e000      	b.n	8005dd6 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8005dd4:	2302      	movs	r3, #2
  }
}
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	3718      	adds	r7, #24
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	bd80      	pop	{r7, pc}
 8005dde:	bf00      	nop
 8005de0:	80002400 	.word	0x80002400
 8005de4:	fe00e800 	.word	0xfe00e800

08005de8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005de8:	b480      	push	{r7}
 8005dea:	b083      	sub	sp, #12
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	699b      	ldr	r3, [r3, #24]
 8005df6:	f003 0302 	and.w	r3, r3, #2
 8005dfa:	2b02      	cmp	r3, #2
 8005dfc:	d103      	bne.n	8005e06 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	2200      	movs	r2, #0
 8005e04:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	699b      	ldr	r3, [r3, #24]
 8005e0c:	f003 0301 	and.w	r3, r3, #1
 8005e10:	2b01      	cmp	r3, #1
 8005e12:	d007      	beq.n	8005e24 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	699a      	ldr	r2, [r3, #24]
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f042 0201 	orr.w	r2, r2, #1
 8005e22:	619a      	str	r2, [r3, #24]
  }
}
 8005e24:	bf00      	nop
 8005e26:	370c      	adds	r7, #12
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2e:	4770      	bx	lr

08005e30 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b084      	sub	sp, #16
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	60f8      	str	r0, [r7, #12]
 8005e38:	60b9      	str	r1, [r7, #8]
 8005e3a:	603b      	str	r3, [r7, #0]
 8005e3c:	4613      	mov	r3, r2
 8005e3e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005e40:	e031      	b.n	8005ea6 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e48:	d02d      	beq.n	8005ea6 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e4a:	f7fd fd11 	bl	8003870 <HAL_GetTick>
 8005e4e:	4602      	mov	r2, r0
 8005e50:	69bb      	ldr	r3, [r7, #24]
 8005e52:	1ad3      	subs	r3, r2, r3
 8005e54:	683a      	ldr	r2, [r7, #0]
 8005e56:	429a      	cmp	r2, r3
 8005e58:	d302      	bcc.n	8005e60 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d122      	bne.n	8005ea6 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	699a      	ldr	r2, [r3, #24]
 8005e66:	68bb      	ldr	r3, [r7, #8]
 8005e68:	4013      	ands	r3, r2
 8005e6a:	68ba      	ldr	r2, [r7, #8]
 8005e6c:	429a      	cmp	r2, r3
 8005e6e:	bf0c      	ite	eq
 8005e70:	2301      	moveq	r3, #1
 8005e72:	2300      	movne	r3, #0
 8005e74:	b2db      	uxtb	r3, r3
 8005e76:	461a      	mov	r2, r3
 8005e78:	79fb      	ldrb	r3, [r7, #7]
 8005e7a:	429a      	cmp	r2, r3
 8005e7c:	d113      	bne.n	8005ea6 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e82:	f043 0220 	orr.w	r2, r3, #32
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	2220      	movs	r2, #32
 8005e8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	2200      	movs	r2, #0
 8005e96:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8005ea2:	2301      	movs	r3, #1
 8005ea4:	e00f      	b.n	8005ec6 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	699a      	ldr	r2, [r3, #24]
 8005eac:	68bb      	ldr	r3, [r7, #8]
 8005eae:	4013      	ands	r3, r2
 8005eb0:	68ba      	ldr	r2, [r7, #8]
 8005eb2:	429a      	cmp	r2, r3
 8005eb4:	bf0c      	ite	eq
 8005eb6:	2301      	moveq	r3, #1
 8005eb8:	2300      	movne	r3, #0
 8005eba:	b2db      	uxtb	r3, r3
 8005ebc:	461a      	mov	r2, r3
 8005ebe:	79fb      	ldrb	r3, [r7, #7]
 8005ec0:	429a      	cmp	r2, r3
 8005ec2:	d0be      	beq.n	8005e42 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005ec4:	2300      	movs	r3, #0
}
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	3710      	adds	r7, #16
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	bd80      	pop	{r7, pc}

08005ece <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005ece:	b580      	push	{r7, lr}
 8005ed0:	b084      	sub	sp, #16
 8005ed2:	af00      	add	r7, sp, #0
 8005ed4:	60f8      	str	r0, [r7, #12]
 8005ed6:	60b9      	str	r1, [r7, #8]
 8005ed8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005eda:	e033      	b.n	8005f44 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005edc:	687a      	ldr	r2, [r7, #4]
 8005ede:	68b9      	ldr	r1, [r7, #8]
 8005ee0:	68f8      	ldr	r0, [r7, #12]
 8005ee2:	f000 f901 	bl	80060e8 <I2C_IsErrorOccurred>
 8005ee6:	4603      	mov	r3, r0
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d001      	beq.n	8005ef0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005eec:	2301      	movs	r3, #1
 8005eee:	e031      	b.n	8005f54 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ef0:	68bb      	ldr	r3, [r7, #8]
 8005ef2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ef6:	d025      	beq.n	8005f44 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ef8:	f7fd fcba 	bl	8003870 <HAL_GetTick>
 8005efc:	4602      	mov	r2, r0
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	1ad3      	subs	r3, r2, r3
 8005f02:	68ba      	ldr	r2, [r7, #8]
 8005f04:	429a      	cmp	r2, r3
 8005f06:	d302      	bcc.n	8005f0e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005f08:	68bb      	ldr	r3, [r7, #8]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d11a      	bne.n	8005f44 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	699b      	ldr	r3, [r3, #24]
 8005f14:	f003 0302 	and.w	r3, r3, #2
 8005f18:	2b02      	cmp	r3, #2
 8005f1a:	d013      	beq.n	8005f44 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f20:	f043 0220 	orr.w	r2, r3, #32
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	2220      	movs	r2, #32
 8005f2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	2200      	movs	r2, #0
 8005f34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8005f40:	2301      	movs	r3, #1
 8005f42:	e007      	b.n	8005f54 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	699b      	ldr	r3, [r3, #24]
 8005f4a:	f003 0302 	and.w	r3, r3, #2
 8005f4e:	2b02      	cmp	r3, #2
 8005f50:	d1c4      	bne.n	8005edc <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005f52:	2300      	movs	r3, #0
}
 8005f54:	4618      	mov	r0, r3
 8005f56:	3710      	adds	r7, #16
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	bd80      	pop	{r7, pc}

08005f5c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	b084      	sub	sp, #16
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	60f8      	str	r0, [r7, #12]
 8005f64:	60b9      	str	r1, [r7, #8]
 8005f66:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005f68:	e02f      	b.n	8005fca <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005f6a:	687a      	ldr	r2, [r7, #4]
 8005f6c:	68b9      	ldr	r1, [r7, #8]
 8005f6e:	68f8      	ldr	r0, [r7, #12]
 8005f70:	f000 f8ba 	bl	80060e8 <I2C_IsErrorOccurred>
 8005f74:	4603      	mov	r3, r0
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d001      	beq.n	8005f7e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005f7a:	2301      	movs	r3, #1
 8005f7c:	e02d      	b.n	8005fda <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f7e:	f7fd fc77 	bl	8003870 <HAL_GetTick>
 8005f82:	4602      	mov	r2, r0
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	1ad3      	subs	r3, r2, r3
 8005f88:	68ba      	ldr	r2, [r7, #8]
 8005f8a:	429a      	cmp	r2, r3
 8005f8c:	d302      	bcc.n	8005f94 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005f8e:	68bb      	ldr	r3, [r7, #8]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d11a      	bne.n	8005fca <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	699b      	ldr	r3, [r3, #24]
 8005f9a:	f003 0320 	and.w	r3, r3, #32
 8005f9e:	2b20      	cmp	r3, #32
 8005fa0:	d013      	beq.n	8005fca <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fa6:	f043 0220 	orr.w	r2, r3, #32
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	2220      	movs	r2, #32
 8005fb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	2200      	movs	r2, #0
 8005fba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005fc6:	2301      	movs	r3, #1
 8005fc8:	e007      	b.n	8005fda <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	699b      	ldr	r3, [r3, #24]
 8005fd0:	f003 0320 	and.w	r3, r3, #32
 8005fd4:	2b20      	cmp	r3, #32
 8005fd6:	d1c8      	bne.n	8005f6a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005fd8:	2300      	movs	r3, #0
}
 8005fda:	4618      	mov	r0, r3
 8005fdc:	3710      	adds	r7, #16
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	bd80      	pop	{r7, pc}
	...

08005fe4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b084      	sub	sp, #16
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	60f8      	str	r0, [r7, #12]
 8005fec:	60b9      	str	r1, [r7, #8]
 8005fee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005ff0:	e06b      	b.n	80060ca <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005ff2:	687a      	ldr	r2, [r7, #4]
 8005ff4:	68b9      	ldr	r1, [r7, #8]
 8005ff6:	68f8      	ldr	r0, [r7, #12]
 8005ff8:	f000 f876 	bl	80060e8 <I2C_IsErrorOccurred>
 8005ffc:	4603      	mov	r3, r0
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d001      	beq.n	8006006 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006002:	2301      	movs	r3, #1
 8006004:	e069      	b.n	80060da <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	699b      	ldr	r3, [r3, #24]
 800600c:	f003 0320 	and.w	r3, r3, #32
 8006010:	2b20      	cmp	r3, #32
 8006012:	d138      	bne.n	8006086 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	699b      	ldr	r3, [r3, #24]
 800601a:	f003 0304 	and.w	r3, r3, #4
 800601e:	2b04      	cmp	r3, #4
 8006020:	d105      	bne.n	800602e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006026:	2b00      	cmp	r3, #0
 8006028:	d001      	beq.n	800602e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800602a:	2300      	movs	r3, #0
 800602c:	e055      	b.n	80060da <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	699b      	ldr	r3, [r3, #24]
 8006034:	f003 0310 	and.w	r3, r3, #16
 8006038:	2b10      	cmp	r3, #16
 800603a:	d107      	bne.n	800604c <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	2210      	movs	r2, #16
 8006042:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	2204      	movs	r2, #4
 8006048:	645a      	str	r2, [r3, #68]	; 0x44
 800604a:	e002      	b.n	8006052 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	2200      	movs	r2, #0
 8006050:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	2220      	movs	r2, #32
 8006058:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	6859      	ldr	r1, [r3, #4]
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	681a      	ldr	r2, [r3, #0]
 8006064:	4b1f      	ldr	r3, [pc, #124]	; (80060e4 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 8006066:	400b      	ands	r3, r1
 8006068:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	2220      	movs	r2, #32
 800606e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	2200      	movs	r2, #0
 8006076:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	2200      	movs	r2, #0
 800607e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006082:	2301      	movs	r3, #1
 8006084:	e029      	b.n	80060da <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006086:	f7fd fbf3 	bl	8003870 <HAL_GetTick>
 800608a:	4602      	mov	r2, r0
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	1ad3      	subs	r3, r2, r3
 8006090:	68ba      	ldr	r2, [r7, #8]
 8006092:	429a      	cmp	r2, r3
 8006094:	d302      	bcc.n	800609c <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8006096:	68bb      	ldr	r3, [r7, #8]
 8006098:	2b00      	cmp	r3, #0
 800609a:	d116      	bne.n	80060ca <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	699b      	ldr	r3, [r3, #24]
 80060a2:	f003 0304 	and.w	r3, r3, #4
 80060a6:	2b04      	cmp	r3, #4
 80060a8:	d00f      	beq.n	80060ca <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060ae:	f043 0220 	orr.w	r2, r3, #32
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	2220      	movs	r2, #32
 80060ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	2200      	movs	r2, #0
 80060c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80060c6:	2301      	movs	r3, #1
 80060c8:	e007      	b.n	80060da <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	699b      	ldr	r3, [r3, #24]
 80060d0:	f003 0304 	and.w	r3, r3, #4
 80060d4:	2b04      	cmp	r3, #4
 80060d6:	d18c      	bne.n	8005ff2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80060d8:	2300      	movs	r3, #0
}
 80060da:	4618      	mov	r0, r3
 80060dc:	3710      	adds	r7, #16
 80060de:	46bd      	mov	sp, r7
 80060e0:	bd80      	pop	{r7, pc}
 80060e2:	bf00      	nop
 80060e4:	fe00e800 	.word	0xfe00e800

080060e8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80060e8:	b580      	push	{r7, lr}
 80060ea:	b08a      	sub	sp, #40	; 0x28
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	60f8      	str	r0, [r7, #12]
 80060f0:	60b9      	str	r1, [r7, #8]
 80060f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80060f4:	2300      	movs	r3, #0
 80060f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	699b      	ldr	r3, [r3, #24]
 8006100:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8006102:	2300      	movs	r3, #0
 8006104:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800610a:	69bb      	ldr	r3, [r7, #24]
 800610c:	f003 0310 	and.w	r3, r3, #16
 8006110:	2b00      	cmp	r3, #0
 8006112:	d068      	beq.n	80061e6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	2210      	movs	r2, #16
 800611a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800611c:	e049      	b.n	80061b2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800611e:	68bb      	ldr	r3, [r7, #8]
 8006120:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006124:	d045      	beq.n	80061b2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006126:	f7fd fba3 	bl	8003870 <HAL_GetTick>
 800612a:	4602      	mov	r2, r0
 800612c:	69fb      	ldr	r3, [r7, #28]
 800612e:	1ad3      	subs	r3, r2, r3
 8006130:	68ba      	ldr	r2, [r7, #8]
 8006132:	429a      	cmp	r2, r3
 8006134:	d302      	bcc.n	800613c <I2C_IsErrorOccurred+0x54>
 8006136:	68bb      	ldr	r3, [r7, #8]
 8006138:	2b00      	cmp	r3, #0
 800613a:	d13a      	bne.n	80061b2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	685b      	ldr	r3, [r3, #4]
 8006142:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006146:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800614e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	699b      	ldr	r3, [r3, #24]
 8006156:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800615a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800615e:	d121      	bne.n	80061a4 <I2C_IsErrorOccurred+0xbc>
 8006160:	697b      	ldr	r3, [r7, #20]
 8006162:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006166:	d01d      	beq.n	80061a4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8006168:	7cfb      	ldrb	r3, [r7, #19]
 800616a:	2b20      	cmp	r3, #32
 800616c:	d01a      	beq.n	80061a4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	685a      	ldr	r2, [r3, #4]
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800617c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800617e:	f7fd fb77 	bl	8003870 <HAL_GetTick>
 8006182:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006184:	e00e      	b.n	80061a4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8006186:	f7fd fb73 	bl	8003870 <HAL_GetTick>
 800618a:	4602      	mov	r2, r0
 800618c:	69fb      	ldr	r3, [r7, #28]
 800618e:	1ad3      	subs	r3, r2, r3
 8006190:	2b19      	cmp	r3, #25
 8006192:	d907      	bls.n	80061a4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8006194:	6a3b      	ldr	r3, [r7, #32]
 8006196:	f043 0320 	orr.w	r3, r3, #32
 800619a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800619c:	2301      	movs	r3, #1
 800619e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80061a2:	e006      	b.n	80061b2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	699b      	ldr	r3, [r3, #24]
 80061aa:	f003 0320 	and.w	r3, r3, #32
 80061ae:	2b20      	cmp	r3, #32
 80061b0:	d1e9      	bne.n	8006186 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	699b      	ldr	r3, [r3, #24]
 80061b8:	f003 0320 	and.w	r3, r3, #32
 80061bc:	2b20      	cmp	r3, #32
 80061be:	d003      	beq.n	80061c8 <I2C_IsErrorOccurred+0xe0>
 80061c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d0aa      	beq.n	800611e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80061c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d103      	bne.n	80061d8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	2220      	movs	r2, #32
 80061d6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80061d8:	6a3b      	ldr	r3, [r7, #32]
 80061da:	f043 0304 	orr.w	r3, r3, #4
 80061de:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80061e0:	2301      	movs	r3, #1
 80061e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	699b      	ldr	r3, [r3, #24]
 80061ec:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80061ee:	69bb      	ldr	r3, [r7, #24]
 80061f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d00b      	beq.n	8006210 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80061f8:	6a3b      	ldr	r3, [r7, #32]
 80061fa:	f043 0301 	orr.w	r3, r3, #1
 80061fe:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006208:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800620a:	2301      	movs	r3, #1
 800620c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006210:	69bb      	ldr	r3, [r7, #24]
 8006212:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006216:	2b00      	cmp	r3, #0
 8006218:	d00b      	beq.n	8006232 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800621a:	6a3b      	ldr	r3, [r7, #32]
 800621c:	f043 0308 	orr.w	r3, r3, #8
 8006220:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800622a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800622c:	2301      	movs	r3, #1
 800622e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006232:	69bb      	ldr	r3, [r7, #24]
 8006234:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006238:	2b00      	cmp	r3, #0
 800623a:	d00b      	beq.n	8006254 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800623c:	6a3b      	ldr	r3, [r7, #32]
 800623e:	f043 0302 	orr.w	r3, r3, #2
 8006242:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f44f 7200 	mov.w	r2, #512	; 0x200
 800624c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800624e:	2301      	movs	r3, #1
 8006250:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8006254:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006258:	2b00      	cmp	r3, #0
 800625a:	d01c      	beq.n	8006296 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800625c:	68f8      	ldr	r0, [r7, #12]
 800625e:	f7ff fdc3 	bl	8005de8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	6859      	ldr	r1, [r3, #4]
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	681a      	ldr	r2, [r3, #0]
 800626c:	4b0d      	ldr	r3, [pc, #52]	; (80062a4 <I2C_IsErrorOccurred+0x1bc>)
 800626e:	400b      	ands	r3, r1
 8006270:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006276:	6a3b      	ldr	r3, [r7, #32]
 8006278:	431a      	orrs	r2, r3
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	2220      	movs	r2, #32
 8006282:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	2200      	movs	r2, #0
 800628a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	2200      	movs	r2, #0
 8006292:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8006296:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800629a:	4618      	mov	r0, r3
 800629c:	3728      	adds	r7, #40	; 0x28
 800629e:	46bd      	mov	sp, r7
 80062a0:	bd80      	pop	{r7, pc}
 80062a2:	bf00      	nop
 80062a4:	fe00e800 	.word	0xfe00e800

080062a8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80062a8:	b480      	push	{r7}
 80062aa:	b087      	sub	sp, #28
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	60f8      	str	r0, [r7, #12]
 80062b0:	607b      	str	r3, [r7, #4]
 80062b2:	460b      	mov	r3, r1
 80062b4:	817b      	strh	r3, [r7, #10]
 80062b6:	4613      	mov	r3, r2
 80062b8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80062ba:	897b      	ldrh	r3, [r7, #10]
 80062bc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80062c0:	7a7b      	ldrb	r3, [r7, #9]
 80062c2:	041b      	lsls	r3, r3, #16
 80062c4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80062c8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80062ce:	6a3b      	ldr	r3, [r7, #32]
 80062d0:	4313      	orrs	r3, r2
 80062d2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80062d6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	685a      	ldr	r2, [r3, #4]
 80062de:	6a3b      	ldr	r3, [r7, #32]
 80062e0:	0d5b      	lsrs	r3, r3, #21
 80062e2:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80062e6:	4b08      	ldr	r3, [pc, #32]	; (8006308 <I2C_TransferConfig+0x60>)
 80062e8:	430b      	orrs	r3, r1
 80062ea:	43db      	mvns	r3, r3
 80062ec:	ea02 0103 	and.w	r1, r2, r3
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	697a      	ldr	r2, [r7, #20]
 80062f6:	430a      	orrs	r2, r1
 80062f8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80062fa:	bf00      	nop
 80062fc:	371c      	adds	r7, #28
 80062fe:	46bd      	mov	sp, r7
 8006300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006304:	4770      	bx	lr
 8006306:	bf00      	nop
 8006308:	03ff63ff 	.word	0x03ff63ff

0800630c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800630c:	b480      	push	{r7}
 800630e:	b083      	sub	sp, #12
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
 8006314:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800631c:	b2db      	uxtb	r3, r3
 800631e:	2b20      	cmp	r3, #32
 8006320:	d138      	bne.n	8006394 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006328:	2b01      	cmp	r3, #1
 800632a:	d101      	bne.n	8006330 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800632c:	2302      	movs	r3, #2
 800632e:	e032      	b.n	8006396 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2201      	movs	r2, #1
 8006334:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2224      	movs	r2, #36	; 0x24
 800633c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	681a      	ldr	r2, [r3, #0]
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f022 0201 	bic.w	r2, r2, #1
 800634e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	681a      	ldr	r2, [r3, #0]
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800635e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	6819      	ldr	r1, [r3, #0]
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	683a      	ldr	r2, [r7, #0]
 800636c:	430a      	orrs	r2, r1
 800636e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	681a      	ldr	r2, [r3, #0]
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	f042 0201 	orr.w	r2, r2, #1
 800637e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2220      	movs	r2, #32
 8006384:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2200      	movs	r2, #0
 800638c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006390:	2300      	movs	r3, #0
 8006392:	e000      	b.n	8006396 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006394:	2302      	movs	r3, #2
  }
}
 8006396:	4618      	mov	r0, r3
 8006398:	370c      	adds	r7, #12
 800639a:	46bd      	mov	sp, r7
 800639c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a0:	4770      	bx	lr

080063a2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80063a2:	b480      	push	{r7}
 80063a4:	b085      	sub	sp, #20
 80063a6:	af00      	add	r7, sp, #0
 80063a8:	6078      	str	r0, [r7, #4]
 80063aa:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80063b2:	b2db      	uxtb	r3, r3
 80063b4:	2b20      	cmp	r3, #32
 80063b6:	d139      	bne.n	800642c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80063be:	2b01      	cmp	r3, #1
 80063c0:	d101      	bne.n	80063c6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80063c2:	2302      	movs	r3, #2
 80063c4:	e033      	b.n	800642e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	2201      	movs	r2, #1
 80063ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	2224      	movs	r2, #36	; 0x24
 80063d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	681a      	ldr	r2, [r3, #0]
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f022 0201 	bic.w	r2, r2, #1
 80063e4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80063f4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80063f6:	683b      	ldr	r3, [r7, #0]
 80063f8:	021b      	lsls	r3, r3, #8
 80063fa:	68fa      	ldr	r2, [r7, #12]
 80063fc:	4313      	orrs	r3, r2
 80063fe:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	68fa      	ldr	r2, [r7, #12]
 8006406:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	681a      	ldr	r2, [r3, #0]
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	f042 0201 	orr.w	r2, r2, #1
 8006416:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2220      	movs	r2, #32
 800641c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2200      	movs	r2, #0
 8006424:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006428:	2300      	movs	r3, #0
 800642a:	e000      	b.n	800642e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800642c:	2302      	movs	r3, #2
  }
}
 800642e:	4618      	mov	r0, r3
 8006430:	3714      	adds	r7, #20
 8006432:	46bd      	mov	sp, r7
 8006434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006438:	4770      	bx	lr
	...

0800643c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800643c:	b580      	push	{r7, lr}
 800643e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8006442:	af00      	add	r7, sp, #0
 8006444:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006448:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800644c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800644e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006452:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d102      	bne.n	8006462 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 800645c:	2301      	movs	r3, #1
 800645e:	f001 b823 	b.w	80074a8 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006462:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006466:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f003 0301 	and.w	r3, r3, #1
 8006472:	2b00      	cmp	r3, #0
 8006474:	f000 817d 	beq.w	8006772 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8006478:	4bbc      	ldr	r3, [pc, #752]	; (800676c <HAL_RCC_OscConfig+0x330>)
 800647a:	685b      	ldr	r3, [r3, #4]
 800647c:	f003 030c 	and.w	r3, r3, #12
 8006480:	2b04      	cmp	r3, #4
 8006482:	d00c      	beq.n	800649e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006484:	4bb9      	ldr	r3, [pc, #740]	; (800676c <HAL_RCC_OscConfig+0x330>)
 8006486:	685b      	ldr	r3, [r3, #4]
 8006488:	f003 030c 	and.w	r3, r3, #12
 800648c:	2b08      	cmp	r3, #8
 800648e:	d15c      	bne.n	800654a <HAL_RCC_OscConfig+0x10e>
 8006490:	4bb6      	ldr	r3, [pc, #728]	; (800676c <HAL_RCC_OscConfig+0x330>)
 8006492:	685b      	ldr	r3, [r3, #4]
 8006494:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006498:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800649c:	d155      	bne.n	800654a <HAL_RCC_OscConfig+0x10e>
 800649e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80064a2:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80064a6:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80064aa:	fa93 f3a3 	rbit	r3, r3
 80064ae:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80064b2:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80064b6:	fab3 f383 	clz	r3, r3
 80064ba:	b2db      	uxtb	r3, r3
 80064bc:	095b      	lsrs	r3, r3, #5
 80064be:	b2db      	uxtb	r3, r3
 80064c0:	f043 0301 	orr.w	r3, r3, #1
 80064c4:	b2db      	uxtb	r3, r3
 80064c6:	2b01      	cmp	r3, #1
 80064c8:	d102      	bne.n	80064d0 <HAL_RCC_OscConfig+0x94>
 80064ca:	4ba8      	ldr	r3, [pc, #672]	; (800676c <HAL_RCC_OscConfig+0x330>)
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	e015      	b.n	80064fc <HAL_RCC_OscConfig+0xc0>
 80064d0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80064d4:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80064d8:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80064dc:	fa93 f3a3 	rbit	r3, r3
 80064e0:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80064e4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80064e8:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80064ec:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80064f0:	fa93 f3a3 	rbit	r3, r3
 80064f4:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80064f8:	4b9c      	ldr	r3, [pc, #624]	; (800676c <HAL_RCC_OscConfig+0x330>)
 80064fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064fc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006500:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8006504:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8006508:	fa92 f2a2 	rbit	r2, r2
 800650c:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8006510:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8006514:	fab2 f282 	clz	r2, r2
 8006518:	b2d2      	uxtb	r2, r2
 800651a:	f042 0220 	orr.w	r2, r2, #32
 800651e:	b2d2      	uxtb	r2, r2
 8006520:	f002 021f 	and.w	r2, r2, #31
 8006524:	2101      	movs	r1, #1
 8006526:	fa01 f202 	lsl.w	r2, r1, r2
 800652a:	4013      	ands	r3, r2
 800652c:	2b00      	cmp	r3, #0
 800652e:	f000 811f 	beq.w	8006770 <HAL_RCC_OscConfig+0x334>
 8006532:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006536:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	685b      	ldr	r3, [r3, #4]
 800653e:	2b00      	cmp	r3, #0
 8006540:	f040 8116 	bne.w	8006770 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8006544:	2301      	movs	r3, #1
 8006546:	f000 bfaf 	b.w	80074a8 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800654a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800654e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	685b      	ldr	r3, [r3, #4]
 8006556:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800655a:	d106      	bne.n	800656a <HAL_RCC_OscConfig+0x12e>
 800655c:	4b83      	ldr	r3, [pc, #524]	; (800676c <HAL_RCC_OscConfig+0x330>)
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	4a82      	ldr	r2, [pc, #520]	; (800676c <HAL_RCC_OscConfig+0x330>)
 8006562:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006566:	6013      	str	r3, [r2, #0]
 8006568:	e036      	b.n	80065d8 <HAL_RCC_OscConfig+0x19c>
 800656a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800656e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	685b      	ldr	r3, [r3, #4]
 8006576:	2b00      	cmp	r3, #0
 8006578:	d10c      	bne.n	8006594 <HAL_RCC_OscConfig+0x158>
 800657a:	4b7c      	ldr	r3, [pc, #496]	; (800676c <HAL_RCC_OscConfig+0x330>)
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	4a7b      	ldr	r2, [pc, #492]	; (800676c <HAL_RCC_OscConfig+0x330>)
 8006580:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006584:	6013      	str	r3, [r2, #0]
 8006586:	4b79      	ldr	r3, [pc, #484]	; (800676c <HAL_RCC_OscConfig+0x330>)
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	4a78      	ldr	r2, [pc, #480]	; (800676c <HAL_RCC_OscConfig+0x330>)
 800658c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006590:	6013      	str	r3, [r2, #0]
 8006592:	e021      	b.n	80065d8 <HAL_RCC_OscConfig+0x19c>
 8006594:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006598:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	685b      	ldr	r3, [r3, #4]
 80065a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80065a4:	d10c      	bne.n	80065c0 <HAL_RCC_OscConfig+0x184>
 80065a6:	4b71      	ldr	r3, [pc, #452]	; (800676c <HAL_RCC_OscConfig+0x330>)
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	4a70      	ldr	r2, [pc, #448]	; (800676c <HAL_RCC_OscConfig+0x330>)
 80065ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80065b0:	6013      	str	r3, [r2, #0]
 80065b2:	4b6e      	ldr	r3, [pc, #440]	; (800676c <HAL_RCC_OscConfig+0x330>)
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	4a6d      	ldr	r2, [pc, #436]	; (800676c <HAL_RCC_OscConfig+0x330>)
 80065b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80065bc:	6013      	str	r3, [r2, #0]
 80065be:	e00b      	b.n	80065d8 <HAL_RCC_OscConfig+0x19c>
 80065c0:	4b6a      	ldr	r3, [pc, #424]	; (800676c <HAL_RCC_OscConfig+0x330>)
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	4a69      	ldr	r2, [pc, #420]	; (800676c <HAL_RCC_OscConfig+0x330>)
 80065c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80065ca:	6013      	str	r3, [r2, #0]
 80065cc:	4b67      	ldr	r3, [pc, #412]	; (800676c <HAL_RCC_OscConfig+0x330>)
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	4a66      	ldr	r2, [pc, #408]	; (800676c <HAL_RCC_OscConfig+0x330>)
 80065d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80065d6:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80065d8:	4b64      	ldr	r3, [pc, #400]	; (800676c <HAL_RCC_OscConfig+0x330>)
 80065da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065dc:	f023 020f 	bic.w	r2, r3, #15
 80065e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80065e4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	689b      	ldr	r3, [r3, #8]
 80065ec:	495f      	ldr	r1, [pc, #380]	; (800676c <HAL_RCC_OscConfig+0x330>)
 80065ee:	4313      	orrs	r3, r2
 80065f0:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80065f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80065f6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	685b      	ldr	r3, [r3, #4]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d059      	beq.n	80066b6 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006602:	f7fd f935 	bl	8003870 <HAL_GetTick>
 8006606:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800660a:	e00a      	b.n	8006622 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800660c:	f7fd f930 	bl	8003870 <HAL_GetTick>
 8006610:	4602      	mov	r2, r0
 8006612:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006616:	1ad3      	subs	r3, r2, r3
 8006618:	2b64      	cmp	r3, #100	; 0x64
 800661a:	d902      	bls.n	8006622 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 800661c:	2303      	movs	r3, #3
 800661e:	f000 bf43 	b.w	80074a8 <HAL_RCC_OscConfig+0x106c>
 8006622:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006626:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800662a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800662e:	fa93 f3a3 	rbit	r3, r3
 8006632:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8006636:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800663a:	fab3 f383 	clz	r3, r3
 800663e:	b2db      	uxtb	r3, r3
 8006640:	095b      	lsrs	r3, r3, #5
 8006642:	b2db      	uxtb	r3, r3
 8006644:	f043 0301 	orr.w	r3, r3, #1
 8006648:	b2db      	uxtb	r3, r3
 800664a:	2b01      	cmp	r3, #1
 800664c:	d102      	bne.n	8006654 <HAL_RCC_OscConfig+0x218>
 800664e:	4b47      	ldr	r3, [pc, #284]	; (800676c <HAL_RCC_OscConfig+0x330>)
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	e015      	b.n	8006680 <HAL_RCC_OscConfig+0x244>
 8006654:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006658:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800665c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8006660:	fa93 f3a3 	rbit	r3, r3
 8006664:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8006668:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800666c:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8006670:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8006674:	fa93 f3a3 	rbit	r3, r3
 8006678:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800667c:	4b3b      	ldr	r3, [pc, #236]	; (800676c <HAL_RCC_OscConfig+0x330>)
 800667e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006680:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006684:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8006688:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800668c:	fa92 f2a2 	rbit	r2, r2
 8006690:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8006694:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8006698:	fab2 f282 	clz	r2, r2
 800669c:	b2d2      	uxtb	r2, r2
 800669e:	f042 0220 	orr.w	r2, r2, #32
 80066a2:	b2d2      	uxtb	r2, r2
 80066a4:	f002 021f 	and.w	r2, r2, #31
 80066a8:	2101      	movs	r1, #1
 80066aa:	fa01 f202 	lsl.w	r2, r1, r2
 80066ae:	4013      	ands	r3, r2
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d0ab      	beq.n	800660c <HAL_RCC_OscConfig+0x1d0>
 80066b4:	e05d      	b.n	8006772 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80066b6:	f7fd f8db 	bl	8003870 <HAL_GetTick>
 80066ba:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80066be:	e00a      	b.n	80066d6 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80066c0:	f7fd f8d6 	bl	8003870 <HAL_GetTick>
 80066c4:	4602      	mov	r2, r0
 80066c6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80066ca:	1ad3      	subs	r3, r2, r3
 80066cc:	2b64      	cmp	r3, #100	; 0x64
 80066ce:	d902      	bls.n	80066d6 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80066d0:	2303      	movs	r3, #3
 80066d2:	f000 bee9 	b.w	80074a8 <HAL_RCC_OscConfig+0x106c>
 80066d6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80066da:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80066de:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80066e2:	fa93 f3a3 	rbit	r3, r3
 80066e6:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80066ea:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80066ee:	fab3 f383 	clz	r3, r3
 80066f2:	b2db      	uxtb	r3, r3
 80066f4:	095b      	lsrs	r3, r3, #5
 80066f6:	b2db      	uxtb	r3, r3
 80066f8:	f043 0301 	orr.w	r3, r3, #1
 80066fc:	b2db      	uxtb	r3, r3
 80066fe:	2b01      	cmp	r3, #1
 8006700:	d102      	bne.n	8006708 <HAL_RCC_OscConfig+0x2cc>
 8006702:	4b1a      	ldr	r3, [pc, #104]	; (800676c <HAL_RCC_OscConfig+0x330>)
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	e015      	b.n	8006734 <HAL_RCC_OscConfig+0x2f8>
 8006708:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800670c:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006710:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8006714:	fa93 f3a3 	rbit	r3, r3
 8006718:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800671c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006720:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8006724:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8006728:	fa93 f3a3 	rbit	r3, r3
 800672c:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8006730:	4b0e      	ldr	r3, [pc, #56]	; (800676c <HAL_RCC_OscConfig+0x330>)
 8006732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006734:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006738:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 800673c:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8006740:	fa92 f2a2 	rbit	r2, r2
 8006744:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8006748:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 800674c:	fab2 f282 	clz	r2, r2
 8006750:	b2d2      	uxtb	r2, r2
 8006752:	f042 0220 	orr.w	r2, r2, #32
 8006756:	b2d2      	uxtb	r2, r2
 8006758:	f002 021f 	and.w	r2, r2, #31
 800675c:	2101      	movs	r1, #1
 800675e:	fa01 f202 	lsl.w	r2, r1, r2
 8006762:	4013      	ands	r3, r2
 8006764:	2b00      	cmp	r3, #0
 8006766:	d1ab      	bne.n	80066c0 <HAL_RCC_OscConfig+0x284>
 8006768:	e003      	b.n	8006772 <HAL_RCC_OscConfig+0x336>
 800676a:	bf00      	nop
 800676c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006770:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006772:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006776:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	f003 0302 	and.w	r3, r3, #2
 8006782:	2b00      	cmp	r3, #0
 8006784:	f000 817d 	beq.w	8006a82 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8006788:	4ba6      	ldr	r3, [pc, #664]	; (8006a24 <HAL_RCC_OscConfig+0x5e8>)
 800678a:	685b      	ldr	r3, [r3, #4]
 800678c:	f003 030c 	and.w	r3, r3, #12
 8006790:	2b00      	cmp	r3, #0
 8006792:	d00b      	beq.n	80067ac <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8006794:	4ba3      	ldr	r3, [pc, #652]	; (8006a24 <HAL_RCC_OscConfig+0x5e8>)
 8006796:	685b      	ldr	r3, [r3, #4]
 8006798:	f003 030c 	and.w	r3, r3, #12
 800679c:	2b08      	cmp	r3, #8
 800679e:	d172      	bne.n	8006886 <HAL_RCC_OscConfig+0x44a>
 80067a0:	4ba0      	ldr	r3, [pc, #640]	; (8006a24 <HAL_RCC_OscConfig+0x5e8>)
 80067a2:	685b      	ldr	r3, [r3, #4]
 80067a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d16c      	bne.n	8006886 <HAL_RCC_OscConfig+0x44a>
 80067ac:	2302      	movs	r3, #2
 80067ae:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80067b2:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80067b6:	fa93 f3a3 	rbit	r3, r3
 80067ba:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80067be:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80067c2:	fab3 f383 	clz	r3, r3
 80067c6:	b2db      	uxtb	r3, r3
 80067c8:	095b      	lsrs	r3, r3, #5
 80067ca:	b2db      	uxtb	r3, r3
 80067cc:	f043 0301 	orr.w	r3, r3, #1
 80067d0:	b2db      	uxtb	r3, r3
 80067d2:	2b01      	cmp	r3, #1
 80067d4:	d102      	bne.n	80067dc <HAL_RCC_OscConfig+0x3a0>
 80067d6:	4b93      	ldr	r3, [pc, #588]	; (8006a24 <HAL_RCC_OscConfig+0x5e8>)
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	e013      	b.n	8006804 <HAL_RCC_OscConfig+0x3c8>
 80067dc:	2302      	movs	r3, #2
 80067de:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80067e2:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80067e6:	fa93 f3a3 	rbit	r3, r3
 80067ea:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80067ee:	2302      	movs	r3, #2
 80067f0:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80067f4:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80067f8:	fa93 f3a3 	rbit	r3, r3
 80067fc:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8006800:	4b88      	ldr	r3, [pc, #544]	; (8006a24 <HAL_RCC_OscConfig+0x5e8>)
 8006802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006804:	2202      	movs	r2, #2
 8006806:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 800680a:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800680e:	fa92 f2a2 	rbit	r2, r2
 8006812:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8006816:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800681a:	fab2 f282 	clz	r2, r2
 800681e:	b2d2      	uxtb	r2, r2
 8006820:	f042 0220 	orr.w	r2, r2, #32
 8006824:	b2d2      	uxtb	r2, r2
 8006826:	f002 021f 	and.w	r2, r2, #31
 800682a:	2101      	movs	r1, #1
 800682c:	fa01 f202 	lsl.w	r2, r1, r2
 8006830:	4013      	ands	r3, r2
 8006832:	2b00      	cmp	r3, #0
 8006834:	d00a      	beq.n	800684c <HAL_RCC_OscConfig+0x410>
 8006836:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800683a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	691b      	ldr	r3, [r3, #16]
 8006842:	2b01      	cmp	r3, #1
 8006844:	d002      	beq.n	800684c <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8006846:	2301      	movs	r3, #1
 8006848:	f000 be2e 	b.w	80074a8 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800684c:	4b75      	ldr	r3, [pc, #468]	; (8006a24 <HAL_RCC_OscConfig+0x5e8>)
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006854:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006858:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	695b      	ldr	r3, [r3, #20]
 8006860:	21f8      	movs	r1, #248	; 0xf8
 8006862:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006866:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800686a:	fa91 f1a1 	rbit	r1, r1
 800686e:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8006872:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8006876:	fab1 f181 	clz	r1, r1
 800687a:	b2c9      	uxtb	r1, r1
 800687c:	408b      	lsls	r3, r1
 800687e:	4969      	ldr	r1, [pc, #420]	; (8006a24 <HAL_RCC_OscConfig+0x5e8>)
 8006880:	4313      	orrs	r3, r2
 8006882:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006884:	e0fd      	b.n	8006a82 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006886:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800688a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	691b      	ldr	r3, [r3, #16]
 8006892:	2b00      	cmp	r3, #0
 8006894:	f000 8088 	beq.w	80069a8 <HAL_RCC_OscConfig+0x56c>
 8006898:	2301      	movs	r3, #1
 800689a:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800689e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80068a2:	fa93 f3a3 	rbit	r3, r3
 80068a6:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80068aa:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80068ae:	fab3 f383 	clz	r3, r3
 80068b2:	b2db      	uxtb	r3, r3
 80068b4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80068b8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80068bc:	009b      	lsls	r3, r3, #2
 80068be:	461a      	mov	r2, r3
 80068c0:	2301      	movs	r3, #1
 80068c2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80068c4:	f7fc ffd4 	bl	8003870 <HAL_GetTick>
 80068c8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80068cc:	e00a      	b.n	80068e4 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80068ce:	f7fc ffcf 	bl	8003870 <HAL_GetTick>
 80068d2:	4602      	mov	r2, r0
 80068d4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80068d8:	1ad3      	subs	r3, r2, r3
 80068da:	2b02      	cmp	r3, #2
 80068dc:	d902      	bls.n	80068e4 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80068de:	2303      	movs	r3, #3
 80068e0:	f000 bde2 	b.w	80074a8 <HAL_RCC_OscConfig+0x106c>
 80068e4:	2302      	movs	r3, #2
 80068e6:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80068ea:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80068ee:	fa93 f3a3 	rbit	r3, r3
 80068f2:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80068f6:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80068fa:	fab3 f383 	clz	r3, r3
 80068fe:	b2db      	uxtb	r3, r3
 8006900:	095b      	lsrs	r3, r3, #5
 8006902:	b2db      	uxtb	r3, r3
 8006904:	f043 0301 	orr.w	r3, r3, #1
 8006908:	b2db      	uxtb	r3, r3
 800690a:	2b01      	cmp	r3, #1
 800690c:	d102      	bne.n	8006914 <HAL_RCC_OscConfig+0x4d8>
 800690e:	4b45      	ldr	r3, [pc, #276]	; (8006a24 <HAL_RCC_OscConfig+0x5e8>)
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	e013      	b.n	800693c <HAL_RCC_OscConfig+0x500>
 8006914:	2302      	movs	r3, #2
 8006916:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800691a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800691e:	fa93 f3a3 	rbit	r3, r3
 8006922:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8006926:	2302      	movs	r3, #2
 8006928:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800692c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8006930:	fa93 f3a3 	rbit	r3, r3
 8006934:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8006938:	4b3a      	ldr	r3, [pc, #232]	; (8006a24 <HAL_RCC_OscConfig+0x5e8>)
 800693a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800693c:	2202      	movs	r2, #2
 800693e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8006942:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8006946:	fa92 f2a2 	rbit	r2, r2
 800694a:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800694e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8006952:	fab2 f282 	clz	r2, r2
 8006956:	b2d2      	uxtb	r2, r2
 8006958:	f042 0220 	orr.w	r2, r2, #32
 800695c:	b2d2      	uxtb	r2, r2
 800695e:	f002 021f 	and.w	r2, r2, #31
 8006962:	2101      	movs	r1, #1
 8006964:	fa01 f202 	lsl.w	r2, r1, r2
 8006968:	4013      	ands	r3, r2
 800696a:	2b00      	cmp	r3, #0
 800696c:	d0af      	beq.n	80068ce <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800696e:	4b2d      	ldr	r3, [pc, #180]	; (8006a24 <HAL_RCC_OscConfig+0x5e8>)
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006976:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800697a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	695b      	ldr	r3, [r3, #20]
 8006982:	21f8      	movs	r1, #248	; 0xf8
 8006984:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006988:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800698c:	fa91 f1a1 	rbit	r1, r1
 8006990:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8006994:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8006998:	fab1 f181 	clz	r1, r1
 800699c:	b2c9      	uxtb	r1, r1
 800699e:	408b      	lsls	r3, r1
 80069a0:	4920      	ldr	r1, [pc, #128]	; (8006a24 <HAL_RCC_OscConfig+0x5e8>)
 80069a2:	4313      	orrs	r3, r2
 80069a4:	600b      	str	r3, [r1, #0]
 80069a6:	e06c      	b.n	8006a82 <HAL_RCC_OscConfig+0x646>
 80069a8:	2301      	movs	r3, #1
 80069aa:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80069ae:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80069b2:	fa93 f3a3 	rbit	r3, r3
 80069b6:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80069ba:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80069be:	fab3 f383 	clz	r3, r3
 80069c2:	b2db      	uxtb	r3, r3
 80069c4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80069c8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80069cc:	009b      	lsls	r3, r3, #2
 80069ce:	461a      	mov	r2, r3
 80069d0:	2300      	movs	r3, #0
 80069d2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80069d4:	f7fc ff4c 	bl	8003870 <HAL_GetTick>
 80069d8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80069dc:	e00a      	b.n	80069f4 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80069de:	f7fc ff47 	bl	8003870 <HAL_GetTick>
 80069e2:	4602      	mov	r2, r0
 80069e4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80069e8:	1ad3      	subs	r3, r2, r3
 80069ea:	2b02      	cmp	r3, #2
 80069ec:	d902      	bls.n	80069f4 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80069ee:	2303      	movs	r3, #3
 80069f0:	f000 bd5a 	b.w	80074a8 <HAL_RCC_OscConfig+0x106c>
 80069f4:	2302      	movs	r3, #2
 80069f6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80069fa:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80069fe:	fa93 f3a3 	rbit	r3, r3
 8006a02:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8006a06:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006a0a:	fab3 f383 	clz	r3, r3
 8006a0e:	b2db      	uxtb	r3, r3
 8006a10:	095b      	lsrs	r3, r3, #5
 8006a12:	b2db      	uxtb	r3, r3
 8006a14:	f043 0301 	orr.w	r3, r3, #1
 8006a18:	b2db      	uxtb	r3, r3
 8006a1a:	2b01      	cmp	r3, #1
 8006a1c:	d104      	bne.n	8006a28 <HAL_RCC_OscConfig+0x5ec>
 8006a1e:	4b01      	ldr	r3, [pc, #4]	; (8006a24 <HAL_RCC_OscConfig+0x5e8>)
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	e015      	b.n	8006a50 <HAL_RCC_OscConfig+0x614>
 8006a24:	40021000 	.word	0x40021000
 8006a28:	2302      	movs	r3, #2
 8006a2a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a2e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006a32:	fa93 f3a3 	rbit	r3, r3
 8006a36:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006a3a:	2302      	movs	r3, #2
 8006a3c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006a40:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006a44:	fa93 f3a3 	rbit	r3, r3
 8006a48:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8006a4c:	4bc8      	ldr	r3, [pc, #800]	; (8006d70 <HAL_RCC_OscConfig+0x934>)
 8006a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a50:	2202      	movs	r2, #2
 8006a52:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8006a56:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8006a5a:	fa92 f2a2 	rbit	r2, r2
 8006a5e:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8006a62:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8006a66:	fab2 f282 	clz	r2, r2
 8006a6a:	b2d2      	uxtb	r2, r2
 8006a6c:	f042 0220 	orr.w	r2, r2, #32
 8006a70:	b2d2      	uxtb	r2, r2
 8006a72:	f002 021f 	and.w	r2, r2, #31
 8006a76:	2101      	movs	r1, #1
 8006a78:	fa01 f202 	lsl.w	r2, r1, r2
 8006a7c:	4013      	ands	r3, r2
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d1ad      	bne.n	80069de <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006a82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006a86:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	f003 0308 	and.w	r3, r3, #8
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	f000 8110 	beq.w	8006cb8 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006a98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006a9c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	699b      	ldr	r3, [r3, #24]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d079      	beq.n	8006b9c <HAL_RCC_OscConfig+0x760>
 8006aa8:	2301      	movs	r3, #1
 8006aaa:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006aae:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006ab2:	fa93 f3a3 	rbit	r3, r3
 8006ab6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8006aba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006abe:	fab3 f383 	clz	r3, r3
 8006ac2:	b2db      	uxtb	r3, r3
 8006ac4:	461a      	mov	r2, r3
 8006ac6:	4bab      	ldr	r3, [pc, #684]	; (8006d74 <HAL_RCC_OscConfig+0x938>)
 8006ac8:	4413      	add	r3, r2
 8006aca:	009b      	lsls	r3, r3, #2
 8006acc:	461a      	mov	r2, r3
 8006ace:	2301      	movs	r3, #1
 8006ad0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006ad2:	f7fc fecd 	bl	8003870 <HAL_GetTick>
 8006ad6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006ada:	e00a      	b.n	8006af2 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006adc:	f7fc fec8 	bl	8003870 <HAL_GetTick>
 8006ae0:	4602      	mov	r2, r0
 8006ae2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006ae6:	1ad3      	subs	r3, r2, r3
 8006ae8:	2b02      	cmp	r3, #2
 8006aea:	d902      	bls.n	8006af2 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8006aec:	2303      	movs	r3, #3
 8006aee:	f000 bcdb 	b.w	80074a8 <HAL_RCC_OscConfig+0x106c>
 8006af2:	2302      	movs	r3, #2
 8006af4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006af8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006afc:	fa93 f3a3 	rbit	r3, r3
 8006b00:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006b04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006b08:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8006b0c:	2202      	movs	r2, #2
 8006b0e:	601a      	str	r2, [r3, #0]
 8006b10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006b14:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	fa93 f2a3 	rbit	r2, r3
 8006b1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006b22:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006b26:	601a      	str	r2, [r3, #0]
 8006b28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006b2c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b30:	2202      	movs	r2, #2
 8006b32:	601a      	str	r2, [r3, #0]
 8006b34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006b38:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	fa93 f2a3 	rbit	r2, r3
 8006b42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006b46:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006b4a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006b4c:	4b88      	ldr	r3, [pc, #544]	; (8006d70 <HAL_RCC_OscConfig+0x934>)
 8006b4e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006b50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006b54:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8006b58:	2102      	movs	r1, #2
 8006b5a:	6019      	str	r1, [r3, #0]
 8006b5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006b60:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	fa93 f1a3 	rbit	r1, r3
 8006b6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006b6e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8006b72:	6019      	str	r1, [r3, #0]
  return result;
 8006b74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006b78:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	fab3 f383 	clz	r3, r3
 8006b82:	b2db      	uxtb	r3, r3
 8006b84:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006b88:	b2db      	uxtb	r3, r3
 8006b8a:	f003 031f 	and.w	r3, r3, #31
 8006b8e:	2101      	movs	r1, #1
 8006b90:	fa01 f303 	lsl.w	r3, r1, r3
 8006b94:	4013      	ands	r3, r2
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d0a0      	beq.n	8006adc <HAL_RCC_OscConfig+0x6a0>
 8006b9a:	e08d      	b.n	8006cb8 <HAL_RCC_OscConfig+0x87c>
 8006b9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006ba0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8006ba4:	2201      	movs	r2, #1
 8006ba6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ba8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006bac:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	fa93 f2a3 	rbit	r2, r3
 8006bb6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006bba:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006bbe:	601a      	str	r2, [r3, #0]
  return result;
 8006bc0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006bc4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006bc8:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006bca:	fab3 f383 	clz	r3, r3
 8006bce:	b2db      	uxtb	r3, r3
 8006bd0:	461a      	mov	r2, r3
 8006bd2:	4b68      	ldr	r3, [pc, #416]	; (8006d74 <HAL_RCC_OscConfig+0x938>)
 8006bd4:	4413      	add	r3, r2
 8006bd6:	009b      	lsls	r3, r3, #2
 8006bd8:	461a      	mov	r2, r3
 8006bda:	2300      	movs	r3, #0
 8006bdc:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006bde:	f7fc fe47 	bl	8003870 <HAL_GetTick>
 8006be2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006be6:	e00a      	b.n	8006bfe <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006be8:	f7fc fe42 	bl	8003870 <HAL_GetTick>
 8006bec:	4602      	mov	r2, r0
 8006bee:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006bf2:	1ad3      	subs	r3, r2, r3
 8006bf4:	2b02      	cmp	r3, #2
 8006bf6:	d902      	bls.n	8006bfe <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8006bf8:	2303      	movs	r3, #3
 8006bfa:	f000 bc55 	b.w	80074a8 <HAL_RCC_OscConfig+0x106c>
 8006bfe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006c02:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8006c06:	2202      	movs	r2, #2
 8006c08:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006c0e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	fa93 f2a3 	rbit	r2, r3
 8006c18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006c1c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8006c20:	601a      	str	r2, [r3, #0]
 8006c22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006c26:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8006c2a:	2202      	movs	r2, #2
 8006c2c:	601a      	str	r2, [r3, #0]
 8006c2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006c32:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	fa93 f2a3 	rbit	r2, r3
 8006c3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006c40:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006c44:	601a      	str	r2, [r3, #0]
 8006c46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006c4a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c4e:	2202      	movs	r2, #2
 8006c50:	601a      	str	r2, [r3, #0]
 8006c52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006c56:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	fa93 f2a3 	rbit	r2, r3
 8006c60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006c64:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8006c68:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006c6a:	4b41      	ldr	r3, [pc, #260]	; (8006d70 <HAL_RCC_OscConfig+0x934>)
 8006c6c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006c6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006c72:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8006c76:	2102      	movs	r1, #2
 8006c78:	6019      	str	r1, [r3, #0]
 8006c7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006c7e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	fa93 f1a3 	rbit	r1, r3
 8006c88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006c8c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8006c90:	6019      	str	r1, [r3, #0]
  return result;
 8006c92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006c96:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	fab3 f383 	clz	r3, r3
 8006ca0:	b2db      	uxtb	r3, r3
 8006ca2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006ca6:	b2db      	uxtb	r3, r3
 8006ca8:	f003 031f 	and.w	r3, r3, #31
 8006cac:	2101      	movs	r1, #1
 8006cae:	fa01 f303 	lsl.w	r3, r1, r3
 8006cb2:	4013      	ands	r3, r2
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d197      	bne.n	8006be8 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006cb8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006cbc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	f003 0304 	and.w	r3, r3, #4
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	f000 81a1 	beq.w	8007010 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006cce:	2300      	movs	r3, #0
 8006cd0:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006cd4:	4b26      	ldr	r3, [pc, #152]	; (8006d70 <HAL_RCC_OscConfig+0x934>)
 8006cd6:	69db      	ldr	r3, [r3, #28]
 8006cd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d116      	bne.n	8006d0e <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006ce0:	4b23      	ldr	r3, [pc, #140]	; (8006d70 <HAL_RCC_OscConfig+0x934>)
 8006ce2:	69db      	ldr	r3, [r3, #28]
 8006ce4:	4a22      	ldr	r2, [pc, #136]	; (8006d70 <HAL_RCC_OscConfig+0x934>)
 8006ce6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006cea:	61d3      	str	r3, [r2, #28]
 8006cec:	4b20      	ldr	r3, [pc, #128]	; (8006d70 <HAL_RCC_OscConfig+0x934>)
 8006cee:	69db      	ldr	r3, [r3, #28]
 8006cf0:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8006cf4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006cf8:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8006cfc:	601a      	str	r2, [r3, #0]
 8006cfe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006d02:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8006d06:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8006d08:	2301      	movs	r3, #1
 8006d0a:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d0e:	4b1a      	ldr	r3, [pc, #104]	; (8006d78 <HAL_RCC_OscConfig+0x93c>)
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d11a      	bne.n	8006d50 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006d1a:	4b17      	ldr	r3, [pc, #92]	; (8006d78 <HAL_RCC_OscConfig+0x93c>)
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	4a16      	ldr	r2, [pc, #88]	; (8006d78 <HAL_RCC_OscConfig+0x93c>)
 8006d20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d24:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006d26:	f7fc fda3 	bl	8003870 <HAL_GetTick>
 8006d2a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d2e:	e009      	b.n	8006d44 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006d30:	f7fc fd9e 	bl	8003870 <HAL_GetTick>
 8006d34:	4602      	mov	r2, r0
 8006d36:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006d3a:	1ad3      	subs	r3, r2, r3
 8006d3c:	2b64      	cmp	r3, #100	; 0x64
 8006d3e:	d901      	bls.n	8006d44 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8006d40:	2303      	movs	r3, #3
 8006d42:	e3b1      	b.n	80074a8 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d44:	4b0c      	ldr	r3, [pc, #48]	; (8006d78 <HAL_RCC_OscConfig+0x93c>)
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d0ef      	beq.n	8006d30 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006d50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006d54:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	68db      	ldr	r3, [r3, #12]
 8006d5c:	2b01      	cmp	r3, #1
 8006d5e:	d10d      	bne.n	8006d7c <HAL_RCC_OscConfig+0x940>
 8006d60:	4b03      	ldr	r3, [pc, #12]	; (8006d70 <HAL_RCC_OscConfig+0x934>)
 8006d62:	6a1b      	ldr	r3, [r3, #32]
 8006d64:	4a02      	ldr	r2, [pc, #8]	; (8006d70 <HAL_RCC_OscConfig+0x934>)
 8006d66:	f043 0301 	orr.w	r3, r3, #1
 8006d6a:	6213      	str	r3, [r2, #32]
 8006d6c:	e03c      	b.n	8006de8 <HAL_RCC_OscConfig+0x9ac>
 8006d6e:	bf00      	nop
 8006d70:	40021000 	.word	0x40021000
 8006d74:	10908120 	.word	0x10908120
 8006d78:	40007000 	.word	0x40007000
 8006d7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006d80:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	68db      	ldr	r3, [r3, #12]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d10c      	bne.n	8006da6 <HAL_RCC_OscConfig+0x96a>
 8006d8c:	4bc1      	ldr	r3, [pc, #772]	; (8007094 <HAL_RCC_OscConfig+0xc58>)
 8006d8e:	6a1b      	ldr	r3, [r3, #32]
 8006d90:	4ac0      	ldr	r2, [pc, #768]	; (8007094 <HAL_RCC_OscConfig+0xc58>)
 8006d92:	f023 0301 	bic.w	r3, r3, #1
 8006d96:	6213      	str	r3, [r2, #32]
 8006d98:	4bbe      	ldr	r3, [pc, #760]	; (8007094 <HAL_RCC_OscConfig+0xc58>)
 8006d9a:	6a1b      	ldr	r3, [r3, #32]
 8006d9c:	4abd      	ldr	r2, [pc, #756]	; (8007094 <HAL_RCC_OscConfig+0xc58>)
 8006d9e:	f023 0304 	bic.w	r3, r3, #4
 8006da2:	6213      	str	r3, [r2, #32]
 8006da4:	e020      	b.n	8006de8 <HAL_RCC_OscConfig+0x9ac>
 8006da6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006daa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	68db      	ldr	r3, [r3, #12]
 8006db2:	2b05      	cmp	r3, #5
 8006db4:	d10c      	bne.n	8006dd0 <HAL_RCC_OscConfig+0x994>
 8006db6:	4bb7      	ldr	r3, [pc, #732]	; (8007094 <HAL_RCC_OscConfig+0xc58>)
 8006db8:	6a1b      	ldr	r3, [r3, #32]
 8006dba:	4ab6      	ldr	r2, [pc, #728]	; (8007094 <HAL_RCC_OscConfig+0xc58>)
 8006dbc:	f043 0304 	orr.w	r3, r3, #4
 8006dc0:	6213      	str	r3, [r2, #32]
 8006dc2:	4bb4      	ldr	r3, [pc, #720]	; (8007094 <HAL_RCC_OscConfig+0xc58>)
 8006dc4:	6a1b      	ldr	r3, [r3, #32]
 8006dc6:	4ab3      	ldr	r2, [pc, #716]	; (8007094 <HAL_RCC_OscConfig+0xc58>)
 8006dc8:	f043 0301 	orr.w	r3, r3, #1
 8006dcc:	6213      	str	r3, [r2, #32]
 8006dce:	e00b      	b.n	8006de8 <HAL_RCC_OscConfig+0x9ac>
 8006dd0:	4bb0      	ldr	r3, [pc, #704]	; (8007094 <HAL_RCC_OscConfig+0xc58>)
 8006dd2:	6a1b      	ldr	r3, [r3, #32]
 8006dd4:	4aaf      	ldr	r2, [pc, #700]	; (8007094 <HAL_RCC_OscConfig+0xc58>)
 8006dd6:	f023 0301 	bic.w	r3, r3, #1
 8006dda:	6213      	str	r3, [r2, #32]
 8006ddc:	4bad      	ldr	r3, [pc, #692]	; (8007094 <HAL_RCC_OscConfig+0xc58>)
 8006dde:	6a1b      	ldr	r3, [r3, #32]
 8006de0:	4aac      	ldr	r2, [pc, #688]	; (8007094 <HAL_RCC_OscConfig+0xc58>)
 8006de2:	f023 0304 	bic.w	r3, r3, #4
 8006de6:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006de8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006dec:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	68db      	ldr	r3, [r3, #12]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	f000 8081 	beq.w	8006efc <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006dfa:	f7fc fd39 	bl	8003870 <HAL_GetTick>
 8006dfe:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006e02:	e00b      	b.n	8006e1c <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006e04:	f7fc fd34 	bl	8003870 <HAL_GetTick>
 8006e08:	4602      	mov	r2, r0
 8006e0a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006e0e:	1ad3      	subs	r3, r2, r3
 8006e10:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e14:	4293      	cmp	r3, r2
 8006e16:	d901      	bls.n	8006e1c <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8006e18:	2303      	movs	r3, #3
 8006e1a:	e345      	b.n	80074a8 <HAL_RCC_OscConfig+0x106c>
 8006e1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006e20:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8006e24:	2202      	movs	r2, #2
 8006e26:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006e2c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	fa93 f2a3 	rbit	r2, r3
 8006e36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006e3a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8006e3e:	601a      	str	r2, [r3, #0]
 8006e40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006e44:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006e48:	2202      	movs	r2, #2
 8006e4a:	601a      	str	r2, [r3, #0]
 8006e4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006e50:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	fa93 f2a3 	rbit	r2, r3
 8006e5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006e5e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8006e62:	601a      	str	r2, [r3, #0]
  return result;
 8006e64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006e68:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8006e6c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006e6e:	fab3 f383 	clz	r3, r3
 8006e72:	b2db      	uxtb	r3, r3
 8006e74:	095b      	lsrs	r3, r3, #5
 8006e76:	b2db      	uxtb	r3, r3
 8006e78:	f043 0302 	orr.w	r3, r3, #2
 8006e7c:	b2db      	uxtb	r3, r3
 8006e7e:	2b02      	cmp	r3, #2
 8006e80:	d102      	bne.n	8006e88 <HAL_RCC_OscConfig+0xa4c>
 8006e82:	4b84      	ldr	r3, [pc, #528]	; (8007094 <HAL_RCC_OscConfig+0xc58>)
 8006e84:	6a1b      	ldr	r3, [r3, #32]
 8006e86:	e013      	b.n	8006eb0 <HAL_RCC_OscConfig+0xa74>
 8006e88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006e8c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8006e90:	2202      	movs	r2, #2
 8006e92:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006e98:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	fa93 f2a3 	rbit	r2, r3
 8006ea2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006ea6:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8006eaa:	601a      	str	r2, [r3, #0]
 8006eac:	4b79      	ldr	r3, [pc, #484]	; (8007094 <HAL_RCC_OscConfig+0xc58>)
 8006eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eb0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006eb4:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8006eb8:	2102      	movs	r1, #2
 8006eba:	6011      	str	r1, [r2, #0]
 8006ebc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006ec0:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8006ec4:	6812      	ldr	r2, [r2, #0]
 8006ec6:	fa92 f1a2 	rbit	r1, r2
 8006eca:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006ece:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8006ed2:	6011      	str	r1, [r2, #0]
  return result;
 8006ed4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006ed8:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8006edc:	6812      	ldr	r2, [r2, #0]
 8006ede:	fab2 f282 	clz	r2, r2
 8006ee2:	b2d2      	uxtb	r2, r2
 8006ee4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006ee8:	b2d2      	uxtb	r2, r2
 8006eea:	f002 021f 	and.w	r2, r2, #31
 8006eee:	2101      	movs	r1, #1
 8006ef0:	fa01 f202 	lsl.w	r2, r1, r2
 8006ef4:	4013      	ands	r3, r2
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d084      	beq.n	8006e04 <HAL_RCC_OscConfig+0x9c8>
 8006efa:	e07f      	b.n	8006ffc <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006efc:	f7fc fcb8 	bl	8003870 <HAL_GetTick>
 8006f00:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006f04:	e00b      	b.n	8006f1e <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006f06:	f7fc fcb3 	bl	8003870 <HAL_GetTick>
 8006f0a:	4602      	mov	r2, r0
 8006f0c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006f10:	1ad3      	subs	r3, r2, r3
 8006f12:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f16:	4293      	cmp	r3, r2
 8006f18:	d901      	bls.n	8006f1e <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8006f1a:	2303      	movs	r3, #3
 8006f1c:	e2c4      	b.n	80074a8 <HAL_RCC_OscConfig+0x106c>
 8006f1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006f22:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8006f26:	2202      	movs	r2, #2
 8006f28:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006f2e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	fa93 f2a3 	rbit	r2, r3
 8006f38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006f3c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8006f40:	601a      	str	r2, [r3, #0]
 8006f42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006f46:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8006f4a:	2202      	movs	r2, #2
 8006f4c:	601a      	str	r2, [r3, #0]
 8006f4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006f52:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	fa93 f2a3 	rbit	r2, r3
 8006f5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006f60:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8006f64:	601a      	str	r2, [r3, #0]
  return result;
 8006f66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006f6a:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8006f6e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006f70:	fab3 f383 	clz	r3, r3
 8006f74:	b2db      	uxtb	r3, r3
 8006f76:	095b      	lsrs	r3, r3, #5
 8006f78:	b2db      	uxtb	r3, r3
 8006f7a:	f043 0302 	orr.w	r3, r3, #2
 8006f7e:	b2db      	uxtb	r3, r3
 8006f80:	2b02      	cmp	r3, #2
 8006f82:	d102      	bne.n	8006f8a <HAL_RCC_OscConfig+0xb4e>
 8006f84:	4b43      	ldr	r3, [pc, #268]	; (8007094 <HAL_RCC_OscConfig+0xc58>)
 8006f86:	6a1b      	ldr	r3, [r3, #32]
 8006f88:	e013      	b.n	8006fb2 <HAL_RCC_OscConfig+0xb76>
 8006f8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006f8e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8006f92:	2202      	movs	r2, #2
 8006f94:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006f9a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	fa93 f2a3 	rbit	r2, r3
 8006fa4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006fa8:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8006fac:	601a      	str	r2, [r3, #0]
 8006fae:	4b39      	ldr	r3, [pc, #228]	; (8007094 <HAL_RCC_OscConfig+0xc58>)
 8006fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fb2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006fb6:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8006fba:	2102      	movs	r1, #2
 8006fbc:	6011      	str	r1, [r2, #0]
 8006fbe:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006fc2:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8006fc6:	6812      	ldr	r2, [r2, #0]
 8006fc8:	fa92 f1a2 	rbit	r1, r2
 8006fcc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006fd0:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8006fd4:	6011      	str	r1, [r2, #0]
  return result;
 8006fd6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006fda:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8006fde:	6812      	ldr	r2, [r2, #0]
 8006fe0:	fab2 f282 	clz	r2, r2
 8006fe4:	b2d2      	uxtb	r2, r2
 8006fe6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006fea:	b2d2      	uxtb	r2, r2
 8006fec:	f002 021f 	and.w	r2, r2, #31
 8006ff0:	2101      	movs	r1, #1
 8006ff2:	fa01 f202 	lsl.w	r2, r1, r2
 8006ff6:	4013      	ands	r3, r2
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d184      	bne.n	8006f06 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006ffc:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8007000:	2b01      	cmp	r3, #1
 8007002:	d105      	bne.n	8007010 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007004:	4b23      	ldr	r3, [pc, #140]	; (8007094 <HAL_RCC_OscConfig+0xc58>)
 8007006:	69db      	ldr	r3, [r3, #28]
 8007008:	4a22      	ldr	r2, [pc, #136]	; (8007094 <HAL_RCC_OscConfig+0xc58>)
 800700a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800700e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007010:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007014:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	69db      	ldr	r3, [r3, #28]
 800701c:	2b00      	cmp	r3, #0
 800701e:	f000 8242 	beq.w	80074a6 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007022:	4b1c      	ldr	r3, [pc, #112]	; (8007094 <HAL_RCC_OscConfig+0xc58>)
 8007024:	685b      	ldr	r3, [r3, #4]
 8007026:	f003 030c 	and.w	r3, r3, #12
 800702a:	2b08      	cmp	r3, #8
 800702c:	f000 8213 	beq.w	8007456 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007030:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007034:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	69db      	ldr	r3, [r3, #28]
 800703c:	2b02      	cmp	r3, #2
 800703e:	f040 8162 	bne.w	8007306 <HAL_RCC_OscConfig+0xeca>
 8007042:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007046:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800704a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800704e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007050:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007054:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	fa93 f2a3 	rbit	r2, r3
 800705e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007062:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8007066:	601a      	str	r2, [r3, #0]
  return result;
 8007068:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800706c:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8007070:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007072:	fab3 f383 	clz	r3, r3
 8007076:	b2db      	uxtb	r3, r3
 8007078:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800707c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8007080:	009b      	lsls	r3, r3, #2
 8007082:	461a      	mov	r2, r3
 8007084:	2300      	movs	r3, #0
 8007086:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007088:	f7fc fbf2 	bl	8003870 <HAL_GetTick>
 800708c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007090:	e00c      	b.n	80070ac <HAL_RCC_OscConfig+0xc70>
 8007092:	bf00      	nop
 8007094:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007098:	f7fc fbea 	bl	8003870 <HAL_GetTick>
 800709c:	4602      	mov	r2, r0
 800709e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80070a2:	1ad3      	subs	r3, r2, r3
 80070a4:	2b02      	cmp	r3, #2
 80070a6:	d901      	bls.n	80070ac <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80070a8:	2303      	movs	r3, #3
 80070aa:	e1fd      	b.n	80074a8 <HAL_RCC_OscConfig+0x106c>
 80070ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80070b0:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80070b4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80070b8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80070ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80070be:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	fa93 f2a3 	rbit	r2, r3
 80070c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80070cc:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80070d0:	601a      	str	r2, [r3, #0]
  return result;
 80070d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80070d6:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80070da:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80070dc:	fab3 f383 	clz	r3, r3
 80070e0:	b2db      	uxtb	r3, r3
 80070e2:	095b      	lsrs	r3, r3, #5
 80070e4:	b2db      	uxtb	r3, r3
 80070e6:	f043 0301 	orr.w	r3, r3, #1
 80070ea:	b2db      	uxtb	r3, r3
 80070ec:	2b01      	cmp	r3, #1
 80070ee:	d102      	bne.n	80070f6 <HAL_RCC_OscConfig+0xcba>
 80070f0:	4bb0      	ldr	r3, [pc, #704]	; (80073b4 <HAL_RCC_OscConfig+0xf78>)
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	e027      	b.n	8007146 <HAL_RCC_OscConfig+0xd0a>
 80070f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80070fa:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80070fe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007102:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007104:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007108:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	fa93 f2a3 	rbit	r2, r3
 8007112:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007116:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800711a:	601a      	str	r2, [r3, #0]
 800711c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007120:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8007124:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007128:	601a      	str	r2, [r3, #0]
 800712a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800712e:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	fa93 f2a3 	rbit	r2, r3
 8007138:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800713c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8007140:	601a      	str	r2, [r3, #0]
 8007142:	4b9c      	ldr	r3, [pc, #624]	; (80073b4 <HAL_RCC_OscConfig+0xf78>)
 8007144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007146:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800714a:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800714e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8007152:	6011      	str	r1, [r2, #0]
 8007154:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007158:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800715c:	6812      	ldr	r2, [r2, #0]
 800715e:	fa92 f1a2 	rbit	r1, r2
 8007162:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007166:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800716a:	6011      	str	r1, [r2, #0]
  return result;
 800716c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007170:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8007174:	6812      	ldr	r2, [r2, #0]
 8007176:	fab2 f282 	clz	r2, r2
 800717a:	b2d2      	uxtb	r2, r2
 800717c:	f042 0220 	orr.w	r2, r2, #32
 8007180:	b2d2      	uxtb	r2, r2
 8007182:	f002 021f 	and.w	r2, r2, #31
 8007186:	2101      	movs	r1, #1
 8007188:	fa01 f202 	lsl.w	r2, r1, r2
 800718c:	4013      	ands	r3, r2
 800718e:	2b00      	cmp	r3, #0
 8007190:	d182      	bne.n	8007098 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007192:	4b88      	ldr	r3, [pc, #544]	; (80073b4 <HAL_RCC_OscConfig+0xf78>)
 8007194:	685b      	ldr	r3, [r3, #4]
 8007196:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800719a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800719e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80071a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80071aa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	6a1b      	ldr	r3, [r3, #32]
 80071b2:	430b      	orrs	r3, r1
 80071b4:	497f      	ldr	r1, [pc, #508]	; (80073b4 <HAL_RCC_OscConfig+0xf78>)
 80071b6:	4313      	orrs	r3, r2
 80071b8:	604b      	str	r3, [r1, #4]
 80071ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80071be:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80071c2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80071c6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80071c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80071cc:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	fa93 f2a3 	rbit	r2, r3
 80071d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80071da:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80071de:	601a      	str	r2, [r3, #0]
  return result;
 80071e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80071e4:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80071e8:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80071ea:	fab3 f383 	clz	r3, r3
 80071ee:	b2db      	uxtb	r3, r3
 80071f0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80071f4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80071f8:	009b      	lsls	r3, r3, #2
 80071fa:	461a      	mov	r2, r3
 80071fc:	2301      	movs	r3, #1
 80071fe:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007200:	f7fc fb36 	bl	8003870 <HAL_GetTick>
 8007204:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007208:	e009      	b.n	800721e <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800720a:	f7fc fb31 	bl	8003870 <HAL_GetTick>
 800720e:	4602      	mov	r2, r0
 8007210:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007214:	1ad3      	subs	r3, r2, r3
 8007216:	2b02      	cmp	r3, #2
 8007218:	d901      	bls.n	800721e <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 800721a:	2303      	movs	r3, #3
 800721c:	e144      	b.n	80074a8 <HAL_RCC_OscConfig+0x106c>
 800721e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007222:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8007226:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800722a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800722c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007230:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	fa93 f2a3 	rbit	r2, r3
 800723a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800723e:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8007242:	601a      	str	r2, [r3, #0]
  return result;
 8007244:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007248:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800724c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800724e:	fab3 f383 	clz	r3, r3
 8007252:	b2db      	uxtb	r3, r3
 8007254:	095b      	lsrs	r3, r3, #5
 8007256:	b2db      	uxtb	r3, r3
 8007258:	f043 0301 	orr.w	r3, r3, #1
 800725c:	b2db      	uxtb	r3, r3
 800725e:	2b01      	cmp	r3, #1
 8007260:	d102      	bne.n	8007268 <HAL_RCC_OscConfig+0xe2c>
 8007262:	4b54      	ldr	r3, [pc, #336]	; (80073b4 <HAL_RCC_OscConfig+0xf78>)
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	e027      	b.n	80072b8 <HAL_RCC_OscConfig+0xe7c>
 8007268:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800726c:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8007270:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007274:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007276:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800727a:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	fa93 f2a3 	rbit	r2, r3
 8007284:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007288:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800728c:	601a      	str	r2, [r3, #0]
 800728e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007292:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8007296:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800729a:	601a      	str	r2, [r3, #0]
 800729c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80072a0:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	fa93 f2a3 	rbit	r2, r3
 80072aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80072ae:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80072b2:	601a      	str	r2, [r3, #0]
 80072b4:	4b3f      	ldr	r3, [pc, #252]	; (80073b4 <HAL_RCC_OscConfig+0xf78>)
 80072b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072b8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80072bc:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80072c0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80072c4:	6011      	str	r1, [r2, #0]
 80072c6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80072ca:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80072ce:	6812      	ldr	r2, [r2, #0]
 80072d0:	fa92 f1a2 	rbit	r1, r2
 80072d4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80072d8:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80072dc:	6011      	str	r1, [r2, #0]
  return result;
 80072de:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80072e2:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80072e6:	6812      	ldr	r2, [r2, #0]
 80072e8:	fab2 f282 	clz	r2, r2
 80072ec:	b2d2      	uxtb	r2, r2
 80072ee:	f042 0220 	orr.w	r2, r2, #32
 80072f2:	b2d2      	uxtb	r2, r2
 80072f4:	f002 021f 	and.w	r2, r2, #31
 80072f8:	2101      	movs	r1, #1
 80072fa:	fa01 f202 	lsl.w	r2, r1, r2
 80072fe:	4013      	ands	r3, r2
 8007300:	2b00      	cmp	r3, #0
 8007302:	d082      	beq.n	800720a <HAL_RCC_OscConfig+0xdce>
 8007304:	e0cf      	b.n	80074a6 <HAL_RCC_OscConfig+0x106a>
 8007306:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800730a:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800730e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007312:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007314:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007318:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	fa93 f2a3 	rbit	r2, r3
 8007322:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007326:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800732a:	601a      	str	r2, [r3, #0]
  return result;
 800732c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007330:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8007334:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007336:	fab3 f383 	clz	r3, r3
 800733a:	b2db      	uxtb	r3, r3
 800733c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8007340:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8007344:	009b      	lsls	r3, r3, #2
 8007346:	461a      	mov	r2, r3
 8007348:	2300      	movs	r3, #0
 800734a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800734c:	f7fc fa90 	bl	8003870 <HAL_GetTick>
 8007350:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007354:	e009      	b.n	800736a <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007356:	f7fc fa8b 	bl	8003870 <HAL_GetTick>
 800735a:	4602      	mov	r2, r0
 800735c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007360:	1ad3      	subs	r3, r2, r3
 8007362:	2b02      	cmp	r3, #2
 8007364:	d901      	bls.n	800736a <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8007366:	2303      	movs	r3, #3
 8007368:	e09e      	b.n	80074a8 <HAL_RCC_OscConfig+0x106c>
 800736a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800736e:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8007372:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007376:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007378:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800737c:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	fa93 f2a3 	rbit	r2, r3
 8007386:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800738a:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800738e:	601a      	str	r2, [r3, #0]
  return result;
 8007390:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007394:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8007398:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800739a:	fab3 f383 	clz	r3, r3
 800739e:	b2db      	uxtb	r3, r3
 80073a0:	095b      	lsrs	r3, r3, #5
 80073a2:	b2db      	uxtb	r3, r3
 80073a4:	f043 0301 	orr.w	r3, r3, #1
 80073a8:	b2db      	uxtb	r3, r3
 80073aa:	2b01      	cmp	r3, #1
 80073ac:	d104      	bne.n	80073b8 <HAL_RCC_OscConfig+0xf7c>
 80073ae:	4b01      	ldr	r3, [pc, #4]	; (80073b4 <HAL_RCC_OscConfig+0xf78>)
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	e029      	b.n	8007408 <HAL_RCC_OscConfig+0xfcc>
 80073b4:	40021000 	.word	0x40021000
 80073b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80073bc:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80073c0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80073c4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80073c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80073ca:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	fa93 f2a3 	rbit	r2, r3
 80073d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80073d8:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80073dc:	601a      	str	r2, [r3, #0]
 80073de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80073e2:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80073e6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80073ea:	601a      	str	r2, [r3, #0]
 80073ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80073f0:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	fa93 f2a3 	rbit	r2, r3
 80073fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80073fe:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8007402:	601a      	str	r2, [r3, #0]
 8007404:	4b2b      	ldr	r3, [pc, #172]	; (80074b4 <HAL_RCC_OscConfig+0x1078>)
 8007406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007408:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800740c:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8007410:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8007414:	6011      	str	r1, [r2, #0]
 8007416:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800741a:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800741e:	6812      	ldr	r2, [r2, #0]
 8007420:	fa92 f1a2 	rbit	r1, r2
 8007424:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007428:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800742c:	6011      	str	r1, [r2, #0]
  return result;
 800742e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007432:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8007436:	6812      	ldr	r2, [r2, #0]
 8007438:	fab2 f282 	clz	r2, r2
 800743c:	b2d2      	uxtb	r2, r2
 800743e:	f042 0220 	orr.w	r2, r2, #32
 8007442:	b2d2      	uxtb	r2, r2
 8007444:	f002 021f 	and.w	r2, r2, #31
 8007448:	2101      	movs	r1, #1
 800744a:	fa01 f202 	lsl.w	r2, r1, r2
 800744e:	4013      	ands	r3, r2
 8007450:	2b00      	cmp	r3, #0
 8007452:	d180      	bne.n	8007356 <HAL_RCC_OscConfig+0xf1a>
 8007454:	e027      	b.n	80074a6 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007456:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800745a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	69db      	ldr	r3, [r3, #28]
 8007462:	2b01      	cmp	r3, #1
 8007464:	d101      	bne.n	800746a <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8007466:	2301      	movs	r3, #1
 8007468:	e01e      	b.n	80074a8 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800746a:	4b12      	ldr	r3, [pc, #72]	; (80074b4 <HAL_RCC_OscConfig+0x1078>)
 800746c:	685b      	ldr	r3, [r3, #4]
 800746e:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8007472:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8007476:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800747a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800747e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	6a1b      	ldr	r3, [r3, #32]
 8007486:	429a      	cmp	r2, r3
 8007488:	d10b      	bne.n	80074a2 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800748a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800748e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8007492:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007496:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800749e:	429a      	cmp	r2, r3
 80074a0:	d001      	beq.n	80074a6 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 80074a2:	2301      	movs	r3, #1
 80074a4:	e000      	b.n	80074a8 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80074a6:	2300      	movs	r3, #0
}
 80074a8:	4618      	mov	r0, r3
 80074aa:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80074ae:	46bd      	mov	sp, r7
 80074b0:	bd80      	pop	{r7, pc}
 80074b2:	bf00      	nop
 80074b4:	40021000 	.word	0x40021000

080074b8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80074b8:	b580      	push	{r7, lr}
 80074ba:	b09e      	sub	sp, #120	; 0x78
 80074bc:	af00      	add	r7, sp, #0
 80074be:	6078      	str	r0, [r7, #4]
 80074c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80074c2:	2300      	movs	r3, #0
 80074c4:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d101      	bne.n	80074d0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80074cc:	2301      	movs	r3, #1
 80074ce:	e162      	b.n	8007796 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80074d0:	4b90      	ldr	r3, [pc, #576]	; (8007714 <HAL_RCC_ClockConfig+0x25c>)
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	f003 0307 	and.w	r3, r3, #7
 80074d8:	683a      	ldr	r2, [r7, #0]
 80074da:	429a      	cmp	r2, r3
 80074dc:	d910      	bls.n	8007500 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80074de:	4b8d      	ldr	r3, [pc, #564]	; (8007714 <HAL_RCC_ClockConfig+0x25c>)
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	f023 0207 	bic.w	r2, r3, #7
 80074e6:	498b      	ldr	r1, [pc, #556]	; (8007714 <HAL_RCC_ClockConfig+0x25c>)
 80074e8:	683b      	ldr	r3, [r7, #0]
 80074ea:	4313      	orrs	r3, r2
 80074ec:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80074ee:	4b89      	ldr	r3, [pc, #548]	; (8007714 <HAL_RCC_ClockConfig+0x25c>)
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	f003 0307 	and.w	r3, r3, #7
 80074f6:	683a      	ldr	r2, [r7, #0]
 80074f8:	429a      	cmp	r2, r3
 80074fa:	d001      	beq.n	8007500 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80074fc:	2301      	movs	r3, #1
 80074fe:	e14a      	b.n	8007796 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	f003 0302 	and.w	r3, r3, #2
 8007508:	2b00      	cmp	r3, #0
 800750a:	d008      	beq.n	800751e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800750c:	4b82      	ldr	r3, [pc, #520]	; (8007718 <HAL_RCC_ClockConfig+0x260>)
 800750e:	685b      	ldr	r3, [r3, #4]
 8007510:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	689b      	ldr	r3, [r3, #8]
 8007518:	497f      	ldr	r1, [pc, #508]	; (8007718 <HAL_RCC_ClockConfig+0x260>)
 800751a:	4313      	orrs	r3, r2
 800751c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	f003 0301 	and.w	r3, r3, #1
 8007526:	2b00      	cmp	r3, #0
 8007528:	f000 80dc 	beq.w	80076e4 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	685b      	ldr	r3, [r3, #4]
 8007530:	2b01      	cmp	r3, #1
 8007532:	d13c      	bne.n	80075ae <HAL_RCC_ClockConfig+0xf6>
 8007534:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007538:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800753a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800753c:	fa93 f3a3 	rbit	r3, r3
 8007540:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8007542:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007544:	fab3 f383 	clz	r3, r3
 8007548:	b2db      	uxtb	r3, r3
 800754a:	095b      	lsrs	r3, r3, #5
 800754c:	b2db      	uxtb	r3, r3
 800754e:	f043 0301 	orr.w	r3, r3, #1
 8007552:	b2db      	uxtb	r3, r3
 8007554:	2b01      	cmp	r3, #1
 8007556:	d102      	bne.n	800755e <HAL_RCC_ClockConfig+0xa6>
 8007558:	4b6f      	ldr	r3, [pc, #444]	; (8007718 <HAL_RCC_ClockConfig+0x260>)
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	e00f      	b.n	800757e <HAL_RCC_ClockConfig+0xc6>
 800755e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007562:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007564:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007566:	fa93 f3a3 	rbit	r3, r3
 800756a:	667b      	str	r3, [r7, #100]	; 0x64
 800756c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007570:	663b      	str	r3, [r7, #96]	; 0x60
 8007572:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007574:	fa93 f3a3 	rbit	r3, r3
 8007578:	65fb      	str	r3, [r7, #92]	; 0x5c
 800757a:	4b67      	ldr	r3, [pc, #412]	; (8007718 <HAL_RCC_ClockConfig+0x260>)
 800757c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800757e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8007582:	65ba      	str	r2, [r7, #88]	; 0x58
 8007584:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007586:	fa92 f2a2 	rbit	r2, r2
 800758a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 800758c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800758e:	fab2 f282 	clz	r2, r2
 8007592:	b2d2      	uxtb	r2, r2
 8007594:	f042 0220 	orr.w	r2, r2, #32
 8007598:	b2d2      	uxtb	r2, r2
 800759a:	f002 021f 	and.w	r2, r2, #31
 800759e:	2101      	movs	r1, #1
 80075a0:	fa01 f202 	lsl.w	r2, r1, r2
 80075a4:	4013      	ands	r3, r2
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d17b      	bne.n	80076a2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80075aa:	2301      	movs	r3, #1
 80075ac:	e0f3      	b.n	8007796 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	685b      	ldr	r3, [r3, #4]
 80075b2:	2b02      	cmp	r3, #2
 80075b4:	d13c      	bne.n	8007630 <HAL_RCC_ClockConfig+0x178>
 80075b6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80075ba:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80075bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80075be:	fa93 f3a3 	rbit	r3, r3
 80075c2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80075c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80075c6:	fab3 f383 	clz	r3, r3
 80075ca:	b2db      	uxtb	r3, r3
 80075cc:	095b      	lsrs	r3, r3, #5
 80075ce:	b2db      	uxtb	r3, r3
 80075d0:	f043 0301 	orr.w	r3, r3, #1
 80075d4:	b2db      	uxtb	r3, r3
 80075d6:	2b01      	cmp	r3, #1
 80075d8:	d102      	bne.n	80075e0 <HAL_RCC_ClockConfig+0x128>
 80075da:	4b4f      	ldr	r3, [pc, #316]	; (8007718 <HAL_RCC_ClockConfig+0x260>)
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	e00f      	b.n	8007600 <HAL_RCC_ClockConfig+0x148>
 80075e0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80075e4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80075e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80075e8:	fa93 f3a3 	rbit	r3, r3
 80075ec:	647b      	str	r3, [r7, #68]	; 0x44
 80075ee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80075f2:	643b      	str	r3, [r7, #64]	; 0x40
 80075f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80075f6:	fa93 f3a3 	rbit	r3, r3
 80075fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80075fc:	4b46      	ldr	r3, [pc, #280]	; (8007718 <HAL_RCC_ClockConfig+0x260>)
 80075fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007600:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007604:	63ba      	str	r2, [r7, #56]	; 0x38
 8007606:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007608:	fa92 f2a2 	rbit	r2, r2
 800760c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800760e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007610:	fab2 f282 	clz	r2, r2
 8007614:	b2d2      	uxtb	r2, r2
 8007616:	f042 0220 	orr.w	r2, r2, #32
 800761a:	b2d2      	uxtb	r2, r2
 800761c:	f002 021f 	and.w	r2, r2, #31
 8007620:	2101      	movs	r1, #1
 8007622:	fa01 f202 	lsl.w	r2, r1, r2
 8007626:	4013      	ands	r3, r2
 8007628:	2b00      	cmp	r3, #0
 800762a:	d13a      	bne.n	80076a2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800762c:	2301      	movs	r3, #1
 800762e:	e0b2      	b.n	8007796 <HAL_RCC_ClockConfig+0x2de>
 8007630:	2302      	movs	r3, #2
 8007632:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007636:	fa93 f3a3 	rbit	r3, r3
 800763a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800763c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800763e:	fab3 f383 	clz	r3, r3
 8007642:	b2db      	uxtb	r3, r3
 8007644:	095b      	lsrs	r3, r3, #5
 8007646:	b2db      	uxtb	r3, r3
 8007648:	f043 0301 	orr.w	r3, r3, #1
 800764c:	b2db      	uxtb	r3, r3
 800764e:	2b01      	cmp	r3, #1
 8007650:	d102      	bne.n	8007658 <HAL_RCC_ClockConfig+0x1a0>
 8007652:	4b31      	ldr	r3, [pc, #196]	; (8007718 <HAL_RCC_ClockConfig+0x260>)
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	e00d      	b.n	8007674 <HAL_RCC_ClockConfig+0x1bc>
 8007658:	2302      	movs	r3, #2
 800765a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800765c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800765e:	fa93 f3a3 	rbit	r3, r3
 8007662:	627b      	str	r3, [r7, #36]	; 0x24
 8007664:	2302      	movs	r3, #2
 8007666:	623b      	str	r3, [r7, #32]
 8007668:	6a3b      	ldr	r3, [r7, #32]
 800766a:	fa93 f3a3 	rbit	r3, r3
 800766e:	61fb      	str	r3, [r7, #28]
 8007670:	4b29      	ldr	r3, [pc, #164]	; (8007718 <HAL_RCC_ClockConfig+0x260>)
 8007672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007674:	2202      	movs	r2, #2
 8007676:	61ba      	str	r2, [r7, #24]
 8007678:	69ba      	ldr	r2, [r7, #24]
 800767a:	fa92 f2a2 	rbit	r2, r2
 800767e:	617a      	str	r2, [r7, #20]
  return result;
 8007680:	697a      	ldr	r2, [r7, #20]
 8007682:	fab2 f282 	clz	r2, r2
 8007686:	b2d2      	uxtb	r2, r2
 8007688:	f042 0220 	orr.w	r2, r2, #32
 800768c:	b2d2      	uxtb	r2, r2
 800768e:	f002 021f 	and.w	r2, r2, #31
 8007692:	2101      	movs	r1, #1
 8007694:	fa01 f202 	lsl.w	r2, r1, r2
 8007698:	4013      	ands	r3, r2
 800769a:	2b00      	cmp	r3, #0
 800769c:	d101      	bne.n	80076a2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800769e:	2301      	movs	r3, #1
 80076a0:	e079      	b.n	8007796 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80076a2:	4b1d      	ldr	r3, [pc, #116]	; (8007718 <HAL_RCC_ClockConfig+0x260>)
 80076a4:	685b      	ldr	r3, [r3, #4]
 80076a6:	f023 0203 	bic.w	r2, r3, #3
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	685b      	ldr	r3, [r3, #4]
 80076ae:	491a      	ldr	r1, [pc, #104]	; (8007718 <HAL_RCC_ClockConfig+0x260>)
 80076b0:	4313      	orrs	r3, r2
 80076b2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80076b4:	f7fc f8dc 	bl	8003870 <HAL_GetTick>
 80076b8:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80076ba:	e00a      	b.n	80076d2 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80076bc:	f7fc f8d8 	bl	8003870 <HAL_GetTick>
 80076c0:	4602      	mov	r2, r0
 80076c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80076c4:	1ad3      	subs	r3, r2, r3
 80076c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80076ca:	4293      	cmp	r3, r2
 80076cc:	d901      	bls.n	80076d2 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80076ce:	2303      	movs	r3, #3
 80076d0:	e061      	b.n	8007796 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80076d2:	4b11      	ldr	r3, [pc, #68]	; (8007718 <HAL_RCC_ClockConfig+0x260>)
 80076d4:	685b      	ldr	r3, [r3, #4]
 80076d6:	f003 020c 	and.w	r2, r3, #12
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	685b      	ldr	r3, [r3, #4]
 80076de:	009b      	lsls	r3, r3, #2
 80076e0:	429a      	cmp	r2, r3
 80076e2:	d1eb      	bne.n	80076bc <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80076e4:	4b0b      	ldr	r3, [pc, #44]	; (8007714 <HAL_RCC_ClockConfig+0x25c>)
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	f003 0307 	and.w	r3, r3, #7
 80076ec:	683a      	ldr	r2, [r7, #0]
 80076ee:	429a      	cmp	r2, r3
 80076f0:	d214      	bcs.n	800771c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80076f2:	4b08      	ldr	r3, [pc, #32]	; (8007714 <HAL_RCC_ClockConfig+0x25c>)
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	f023 0207 	bic.w	r2, r3, #7
 80076fa:	4906      	ldr	r1, [pc, #24]	; (8007714 <HAL_RCC_ClockConfig+0x25c>)
 80076fc:	683b      	ldr	r3, [r7, #0]
 80076fe:	4313      	orrs	r3, r2
 8007700:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007702:	4b04      	ldr	r3, [pc, #16]	; (8007714 <HAL_RCC_ClockConfig+0x25c>)
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	f003 0307 	and.w	r3, r3, #7
 800770a:	683a      	ldr	r2, [r7, #0]
 800770c:	429a      	cmp	r2, r3
 800770e:	d005      	beq.n	800771c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8007710:	2301      	movs	r3, #1
 8007712:	e040      	b.n	8007796 <HAL_RCC_ClockConfig+0x2de>
 8007714:	40022000 	.word	0x40022000
 8007718:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	f003 0304 	and.w	r3, r3, #4
 8007724:	2b00      	cmp	r3, #0
 8007726:	d008      	beq.n	800773a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007728:	4b1d      	ldr	r3, [pc, #116]	; (80077a0 <HAL_RCC_ClockConfig+0x2e8>)
 800772a:	685b      	ldr	r3, [r3, #4]
 800772c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	68db      	ldr	r3, [r3, #12]
 8007734:	491a      	ldr	r1, [pc, #104]	; (80077a0 <HAL_RCC_ClockConfig+0x2e8>)
 8007736:	4313      	orrs	r3, r2
 8007738:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	f003 0308 	and.w	r3, r3, #8
 8007742:	2b00      	cmp	r3, #0
 8007744:	d009      	beq.n	800775a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007746:	4b16      	ldr	r3, [pc, #88]	; (80077a0 <HAL_RCC_ClockConfig+0x2e8>)
 8007748:	685b      	ldr	r3, [r3, #4]
 800774a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	691b      	ldr	r3, [r3, #16]
 8007752:	00db      	lsls	r3, r3, #3
 8007754:	4912      	ldr	r1, [pc, #72]	; (80077a0 <HAL_RCC_ClockConfig+0x2e8>)
 8007756:	4313      	orrs	r3, r2
 8007758:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800775a:	f000 f829 	bl	80077b0 <HAL_RCC_GetSysClockFreq>
 800775e:	4601      	mov	r1, r0
 8007760:	4b0f      	ldr	r3, [pc, #60]	; (80077a0 <HAL_RCC_ClockConfig+0x2e8>)
 8007762:	685b      	ldr	r3, [r3, #4]
 8007764:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007768:	22f0      	movs	r2, #240	; 0xf0
 800776a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800776c:	693a      	ldr	r2, [r7, #16]
 800776e:	fa92 f2a2 	rbit	r2, r2
 8007772:	60fa      	str	r2, [r7, #12]
  return result;
 8007774:	68fa      	ldr	r2, [r7, #12]
 8007776:	fab2 f282 	clz	r2, r2
 800777a:	b2d2      	uxtb	r2, r2
 800777c:	40d3      	lsrs	r3, r2
 800777e:	4a09      	ldr	r2, [pc, #36]	; (80077a4 <HAL_RCC_ClockConfig+0x2ec>)
 8007780:	5cd3      	ldrb	r3, [r2, r3]
 8007782:	fa21 f303 	lsr.w	r3, r1, r3
 8007786:	4a08      	ldr	r2, [pc, #32]	; (80077a8 <HAL_RCC_ClockConfig+0x2f0>)
 8007788:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800778a:	4b08      	ldr	r3, [pc, #32]	; (80077ac <HAL_RCC_ClockConfig+0x2f4>)
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	4618      	mov	r0, r3
 8007790:	f7fc f82a 	bl	80037e8 <HAL_InitTick>
  
  return HAL_OK;
 8007794:	2300      	movs	r3, #0
}
 8007796:	4618      	mov	r0, r3
 8007798:	3778      	adds	r7, #120	; 0x78
 800779a:	46bd      	mov	sp, r7
 800779c:	bd80      	pop	{r7, pc}
 800779e:	bf00      	nop
 80077a0:	40021000 	.word	0x40021000
 80077a4:	0800e294 	.word	0x0800e294
 80077a8:	20000050 	.word	0x20000050
 80077ac:	20000054 	.word	0x20000054

080077b0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80077b0:	b480      	push	{r7}
 80077b2:	b08b      	sub	sp, #44	; 0x2c
 80077b4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80077b6:	2300      	movs	r3, #0
 80077b8:	61fb      	str	r3, [r7, #28]
 80077ba:	2300      	movs	r3, #0
 80077bc:	61bb      	str	r3, [r7, #24]
 80077be:	2300      	movs	r3, #0
 80077c0:	627b      	str	r3, [r7, #36]	; 0x24
 80077c2:	2300      	movs	r3, #0
 80077c4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80077c6:	2300      	movs	r3, #0
 80077c8:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80077ca:	4b29      	ldr	r3, [pc, #164]	; (8007870 <HAL_RCC_GetSysClockFreq+0xc0>)
 80077cc:	685b      	ldr	r3, [r3, #4]
 80077ce:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80077d0:	69fb      	ldr	r3, [r7, #28]
 80077d2:	f003 030c 	and.w	r3, r3, #12
 80077d6:	2b04      	cmp	r3, #4
 80077d8:	d002      	beq.n	80077e0 <HAL_RCC_GetSysClockFreq+0x30>
 80077da:	2b08      	cmp	r3, #8
 80077dc:	d003      	beq.n	80077e6 <HAL_RCC_GetSysClockFreq+0x36>
 80077de:	e03c      	b.n	800785a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80077e0:	4b24      	ldr	r3, [pc, #144]	; (8007874 <HAL_RCC_GetSysClockFreq+0xc4>)
 80077e2:	623b      	str	r3, [r7, #32]
      break;
 80077e4:	e03c      	b.n	8007860 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80077e6:	69fb      	ldr	r3, [r7, #28]
 80077e8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80077ec:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80077f0:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80077f2:	68ba      	ldr	r2, [r7, #8]
 80077f4:	fa92 f2a2 	rbit	r2, r2
 80077f8:	607a      	str	r2, [r7, #4]
  return result;
 80077fa:	687a      	ldr	r2, [r7, #4]
 80077fc:	fab2 f282 	clz	r2, r2
 8007800:	b2d2      	uxtb	r2, r2
 8007802:	40d3      	lsrs	r3, r2
 8007804:	4a1c      	ldr	r2, [pc, #112]	; (8007878 <HAL_RCC_GetSysClockFreq+0xc8>)
 8007806:	5cd3      	ldrb	r3, [r2, r3]
 8007808:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800780a:	4b19      	ldr	r3, [pc, #100]	; (8007870 <HAL_RCC_GetSysClockFreq+0xc0>)
 800780c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800780e:	f003 030f 	and.w	r3, r3, #15
 8007812:	220f      	movs	r2, #15
 8007814:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007816:	693a      	ldr	r2, [r7, #16]
 8007818:	fa92 f2a2 	rbit	r2, r2
 800781c:	60fa      	str	r2, [r7, #12]
  return result;
 800781e:	68fa      	ldr	r2, [r7, #12]
 8007820:	fab2 f282 	clz	r2, r2
 8007824:	b2d2      	uxtb	r2, r2
 8007826:	40d3      	lsrs	r3, r2
 8007828:	4a14      	ldr	r2, [pc, #80]	; (800787c <HAL_RCC_GetSysClockFreq+0xcc>)
 800782a:	5cd3      	ldrb	r3, [r2, r3]
 800782c:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800782e:	69fb      	ldr	r3, [r7, #28]
 8007830:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007834:	2b00      	cmp	r3, #0
 8007836:	d008      	beq.n	800784a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8007838:	4a0e      	ldr	r2, [pc, #56]	; (8007874 <HAL_RCC_GetSysClockFreq+0xc4>)
 800783a:	69bb      	ldr	r3, [r7, #24]
 800783c:	fbb2 f2f3 	udiv	r2, r2, r3
 8007840:	697b      	ldr	r3, [r7, #20]
 8007842:	fb02 f303 	mul.w	r3, r2, r3
 8007846:	627b      	str	r3, [r7, #36]	; 0x24
 8007848:	e004      	b.n	8007854 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800784a:	697b      	ldr	r3, [r7, #20]
 800784c:	4a0c      	ldr	r2, [pc, #48]	; (8007880 <HAL_RCC_GetSysClockFreq+0xd0>)
 800784e:	fb02 f303 	mul.w	r3, r2, r3
 8007852:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8007854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007856:	623b      	str	r3, [r7, #32]
      break;
 8007858:	e002      	b.n	8007860 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800785a:	4b06      	ldr	r3, [pc, #24]	; (8007874 <HAL_RCC_GetSysClockFreq+0xc4>)
 800785c:	623b      	str	r3, [r7, #32]
      break;
 800785e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007860:	6a3b      	ldr	r3, [r7, #32]
}
 8007862:	4618      	mov	r0, r3
 8007864:	372c      	adds	r7, #44	; 0x2c
 8007866:	46bd      	mov	sp, r7
 8007868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786c:	4770      	bx	lr
 800786e:	bf00      	nop
 8007870:	40021000 	.word	0x40021000
 8007874:	007a1200 	.word	0x007a1200
 8007878:	0800e2ac 	.word	0x0800e2ac
 800787c:	0800e2bc 	.word	0x0800e2bc
 8007880:	003d0900 	.word	0x003d0900

08007884 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007884:	b480      	push	{r7}
 8007886:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007888:	4b03      	ldr	r3, [pc, #12]	; (8007898 <HAL_RCC_GetHCLKFreq+0x14>)
 800788a:	681b      	ldr	r3, [r3, #0]
}
 800788c:	4618      	mov	r0, r3
 800788e:	46bd      	mov	sp, r7
 8007890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007894:	4770      	bx	lr
 8007896:	bf00      	nop
 8007898:	20000050 	.word	0x20000050

0800789c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800789c:	b580      	push	{r7, lr}
 800789e:	b082      	sub	sp, #8
 80078a0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80078a2:	f7ff ffef 	bl	8007884 <HAL_RCC_GetHCLKFreq>
 80078a6:	4601      	mov	r1, r0
 80078a8:	4b0b      	ldr	r3, [pc, #44]	; (80078d8 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80078aa:	685b      	ldr	r3, [r3, #4]
 80078ac:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80078b0:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80078b4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80078b6:	687a      	ldr	r2, [r7, #4]
 80078b8:	fa92 f2a2 	rbit	r2, r2
 80078bc:	603a      	str	r2, [r7, #0]
  return result;
 80078be:	683a      	ldr	r2, [r7, #0]
 80078c0:	fab2 f282 	clz	r2, r2
 80078c4:	b2d2      	uxtb	r2, r2
 80078c6:	40d3      	lsrs	r3, r2
 80078c8:	4a04      	ldr	r2, [pc, #16]	; (80078dc <HAL_RCC_GetPCLK1Freq+0x40>)
 80078ca:	5cd3      	ldrb	r3, [r2, r3]
 80078cc:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80078d0:	4618      	mov	r0, r3
 80078d2:	3708      	adds	r7, #8
 80078d4:	46bd      	mov	sp, r7
 80078d6:	bd80      	pop	{r7, pc}
 80078d8:	40021000 	.word	0x40021000
 80078dc:	0800e2a4 	.word	0x0800e2a4

080078e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80078e0:	b580      	push	{r7, lr}
 80078e2:	b082      	sub	sp, #8
 80078e4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80078e6:	f7ff ffcd 	bl	8007884 <HAL_RCC_GetHCLKFreq>
 80078ea:	4601      	mov	r1, r0
 80078ec:	4b0b      	ldr	r3, [pc, #44]	; (800791c <HAL_RCC_GetPCLK2Freq+0x3c>)
 80078ee:	685b      	ldr	r3, [r3, #4]
 80078f0:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80078f4:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80078f8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80078fa:	687a      	ldr	r2, [r7, #4]
 80078fc:	fa92 f2a2 	rbit	r2, r2
 8007900:	603a      	str	r2, [r7, #0]
  return result;
 8007902:	683a      	ldr	r2, [r7, #0]
 8007904:	fab2 f282 	clz	r2, r2
 8007908:	b2d2      	uxtb	r2, r2
 800790a:	40d3      	lsrs	r3, r2
 800790c:	4a04      	ldr	r2, [pc, #16]	; (8007920 <HAL_RCC_GetPCLK2Freq+0x40>)
 800790e:	5cd3      	ldrb	r3, [r2, r3]
 8007910:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8007914:	4618      	mov	r0, r3
 8007916:	3708      	adds	r7, #8
 8007918:	46bd      	mov	sp, r7
 800791a:	bd80      	pop	{r7, pc}
 800791c:	40021000 	.word	0x40021000
 8007920:	0800e2a4 	.word	0x0800e2a4

08007924 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007924:	b580      	push	{r7, lr}
 8007926:	b092      	sub	sp, #72	; 0x48
 8007928:	af00      	add	r7, sp, #0
 800792a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800792c:	2300      	movs	r3, #0
 800792e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8007930:	2300      	movs	r3, #0
 8007932:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8007934:	2300      	movs	r3, #0
 8007936:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007942:	2b00      	cmp	r3, #0
 8007944:	f000 80d4 	beq.w	8007af0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007948:	4b4e      	ldr	r3, [pc, #312]	; (8007a84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800794a:	69db      	ldr	r3, [r3, #28]
 800794c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007950:	2b00      	cmp	r3, #0
 8007952:	d10e      	bne.n	8007972 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007954:	4b4b      	ldr	r3, [pc, #300]	; (8007a84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007956:	69db      	ldr	r3, [r3, #28]
 8007958:	4a4a      	ldr	r2, [pc, #296]	; (8007a84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800795a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800795e:	61d3      	str	r3, [r2, #28]
 8007960:	4b48      	ldr	r3, [pc, #288]	; (8007a84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007962:	69db      	ldr	r3, [r3, #28]
 8007964:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007968:	60bb      	str	r3, [r7, #8]
 800796a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800796c:	2301      	movs	r3, #1
 800796e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007972:	4b45      	ldr	r3, [pc, #276]	; (8007a88 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800797a:	2b00      	cmp	r3, #0
 800797c:	d118      	bne.n	80079b0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800797e:	4b42      	ldr	r3, [pc, #264]	; (8007a88 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	4a41      	ldr	r2, [pc, #260]	; (8007a88 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007984:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007988:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800798a:	f7fb ff71 	bl	8003870 <HAL_GetTick>
 800798e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007990:	e008      	b.n	80079a4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007992:	f7fb ff6d 	bl	8003870 <HAL_GetTick>
 8007996:	4602      	mov	r2, r0
 8007998:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800799a:	1ad3      	subs	r3, r2, r3
 800799c:	2b64      	cmp	r3, #100	; 0x64
 800799e:	d901      	bls.n	80079a4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80079a0:	2303      	movs	r3, #3
 80079a2:	e14b      	b.n	8007c3c <HAL_RCCEx_PeriphCLKConfig+0x318>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80079a4:	4b38      	ldr	r3, [pc, #224]	; (8007a88 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d0f0      	beq.n	8007992 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80079b0:	4b34      	ldr	r3, [pc, #208]	; (8007a84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80079b2:	6a1b      	ldr	r3, [r3, #32]
 80079b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80079b8:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80079ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80079bc:	2b00      	cmp	r3, #0
 80079be:	f000 8084 	beq.w	8007aca <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	685b      	ldr	r3, [r3, #4]
 80079c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80079ca:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80079cc:	429a      	cmp	r2, r3
 80079ce:	d07c      	beq.n	8007aca <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80079d0:	4b2c      	ldr	r3, [pc, #176]	; (8007a84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80079d2:	6a1b      	ldr	r3, [r3, #32]
 80079d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80079d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80079da:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80079de:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80079e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079e2:	fa93 f3a3 	rbit	r3, r3
 80079e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80079e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80079ea:	fab3 f383 	clz	r3, r3
 80079ee:	b2db      	uxtb	r3, r3
 80079f0:	461a      	mov	r2, r3
 80079f2:	4b26      	ldr	r3, [pc, #152]	; (8007a8c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80079f4:	4413      	add	r3, r2
 80079f6:	009b      	lsls	r3, r3, #2
 80079f8:	461a      	mov	r2, r3
 80079fa:	2301      	movs	r3, #1
 80079fc:	6013      	str	r3, [r2, #0]
 80079fe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007a02:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007a04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a06:	fa93 f3a3 	rbit	r3, r3
 8007a0a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8007a0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007a0e:	fab3 f383 	clz	r3, r3
 8007a12:	b2db      	uxtb	r3, r3
 8007a14:	461a      	mov	r2, r3
 8007a16:	4b1d      	ldr	r3, [pc, #116]	; (8007a8c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007a18:	4413      	add	r3, r2
 8007a1a:	009b      	lsls	r3, r3, #2
 8007a1c:	461a      	mov	r2, r3
 8007a1e:	2300      	movs	r3, #0
 8007a20:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8007a22:	4a18      	ldr	r2, [pc, #96]	; (8007a84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007a24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a26:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8007a28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a2a:	f003 0301 	and.w	r3, r3, #1
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d04b      	beq.n	8007aca <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007a32:	f7fb ff1d 	bl	8003870 <HAL_GetTick>
 8007a36:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007a38:	e00a      	b.n	8007a50 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007a3a:	f7fb ff19 	bl	8003870 <HAL_GetTick>
 8007a3e:	4602      	mov	r2, r0
 8007a40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007a42:	1ad3      	subs	r3, r2, r3
 8007a44:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a48:	4293      	cmp	r3, r2
 8007a4a:	d901      	bls.n	8007a50 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8007a4c:	2303      	movs	r3, #3
 8007a4e:	e0f5      	b.n	8007c3c <HAL_RCCEx_PeriphCLKConfig+0x318>
 8007a50:	2302      	movs	r3, #2
 8007a52:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007a54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a56:	fa93 f3a3 	rbit	r3, r3
 8007a5a:	627b      	str	r3, [r7, #36]	; 0x24
 8007a5c:	2302      	movs	r3, #2
 8007a5e:	623b      	str	r3, [r7, #32]
 8007a60:	6a3b      	ldr	r3, [r7, #32]
 8007a62:	fa93 f3a3 	rbit	r3, r3
 8007a66:	61fb      	str	r3, [r7, #28]
  return result;
 8007a68:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007a6a:	fab3 f383 	clz	r3, r3
 8007a6e:	b2db      	uxtb	r3, r3
 8007a70:	095b      	lsrs	r3, r3, #5
 8007a72:	b2db      	uxtb	r3, r3
 8007a74:	f043 0302 	orr.w	r3, r3, #2
 8007a78:	b2db      	uxtb	r3, r3
 8007a7a:	2b02      	cmp	r3, #2
 8007a7c:	d108      	bne.n	8007a90 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8007a7e:	4b01      	ldr	r3, [pc, #4]	; (8007a84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007a80:	6a1b      	ldr	r3, [r3, #32]
 8007a82:	e00d      	b.n	8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8007a84:	40021000 	.word	0x40021000
 8007a88:	40007000 	.word	0x40007000
 8007a8c:	10908100 	.word	0x10908100
 8007a90:	2302      	movs	r3, #2
 8007a92:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007a94:	69bb      	ldr	r3, [r7, #24]
 8007a96:	fa93 f3a3 	rbit	r3, r3
 8007a9a:	617b      	str	r3, [r7, #20]
 8007a9c:	4b69      	ldr	r3, [pc, #420]	; (8007c44 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8007a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aa0:	2202      	movs	r2, #2
 8007aa2:	613a      	str	r2, [r7, #16]
 8007aa4:	693a      	ldr	r2, [r7, #16]
 8007aa6:	fa92 f2a2 	rbit	r2, r2
 8007aaa:	60fa      	str	r2, [r7, #12]
  return result;
 8007aac:	68fa      	ldr	r2, [r7, #12]
 8007aae:	fab2 f282 	clz	r2, r2
 8007ab2:	b2d2      	uxtb	r2, r2
 8007ab4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007ab8:	b2d2      	uxtb	r2, r2
 8007aba:	f002 021f 	and.w	r2, r2, #31
 8007abe:	2101      	movs	r1, #1
 8007ac0:	fa01 f202 	lsl.w	r2, r1, r2
 8007ac4:	4013      	ands	r3, r2
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d0b7      	beq.n	8007a3a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8007aca:	4b5e      	ldr	r3, [pc, #376]	; (8007c44 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8007acc:	6a1b      	ldr	r3, [r3, #32]
 8007ace:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	685b      	ldr	r3, [r3, #4]
 8007ad6:	495b      	ldr	r1, [pc, #364]	; (8007c44 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8007ad8:	4313      	orrs	r3, r2
 8007ada:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8007adc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8007ae0:	2b01      	cmp	r3, #1
 8007ae2:	d105      	bne.n	8007af0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007ae4:	4b57      	ldr	r3, [pc, #348]	; (8007c44 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8007ae6:	69db      	ldr	r3, [r3, #28]
 8007ae8:	4a56      	ldr	r2, [pc, #344]	; (8007c44 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8007aea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007aee:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	f003 0301 	and.w	r3, r3, #1
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d008      	beq.n	8007b0e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007afc:	4b51      	ldr	r3, [pc, #324]	; (8007c44 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8007afe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b00:	f023 0203 	bic.w	r2, r3, #3
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	689b      	ldr	r3, [r3, #8]
 8007b08:	494e      	ldr	r1, [pc, #312]	; (8007c44 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8007b0a:	4313      	orrs	r3, r2
 8007b0c:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	f003 0302 	and.w	r3, r3, #2
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d008      	beq.n	8007b2c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007b1a:	4b4a      	ldr	r3, [pc, #296]	; (8007c44 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8007b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b1e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	68db      	ldr	r3, [r3, #12]
 8007b26:	4947      	ldr	r1, [pc, #284]	; (8007c44 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8007b28:	4313      	orrs	r3, r2
 8007b2a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	f003 0304 	and.w	r3, r3, #4
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d008      	beq.n	8007b4a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007b38:	4b42      	ldr	r3, [pc, #264]	; (8007c44 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8007b3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b3c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	691b      	ldr	r3, [r3, #16]
 8007b44:	493f      	ldr	r1, [pc, #252]	; (8007c44 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8007b46:	4313      	orrs	r3, r2
 8007b48:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	f003 0320 	and.w	r3, r3, #32
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d008      	beq.n	8007b68 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007b56:	4b3b      	ldr	r3, [pc, #236]	; (8007c44 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8007b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b5a:	f023 0210 	bic.w	r2, r3, #16
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	69db      	ldr	r3, [r3, #28]
 8007b62:	4938      	ldr	r1, [pc, #224]	; (8007c44 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8007b64:	4313      	orrs	r3, r2
 8007b66:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d008      	beq.n	8007b86 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8007b74:	4b33      	ldr	r3, [pc, #204]	; (8007c44 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8007b76:	685b      	ldr	r3, [r3, #4]
 8007b78:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b80:	4930      	ldr	r1, [pc, #192]	; (8007c44 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8007b82:	4313      	orrs	r3, r2
 8007b84:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d008      	beq.n	8007ba4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007b92:	4b2c      	ldr	r3, [pc, #176]	; (8007c44 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8007b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b96:	f023 0220 	bic.w	r2, r3, #32
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	6a1b      	ldr	r3, [r3, #32]
 8007b9e:	4929      	ldr	r1, [pc, #164]	; (8007c44 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8007ba0:	4313      	orrs	r3, r2
 8007ba2:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	f003 0308 	and.w	r3, r3, #8
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d008      	beq.n	8007bc2 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007bb0:	4b24      	ldr	r3, [pc, #144]	; (8007c44 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8007bb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bb4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	695b      	ldr	r3, [r3, #20]
 8007bbc:	4921      	ldr	r1, [pc, #132]	; (8007c44 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8007bbe:	4313      	orrs	r3, r2
 8007bc0:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	f003 0310 	and.w	r3, r3, #16
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d008      	beq.n	8007be0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007bce:	4b1d      	ldr	r3, [pc, #116]	; (8007c44 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8007bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bd2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	699b      	ldr	r3, [r3, #24]
 8007bda:	491a      	ldr	r1, [pc, #104]	; (8007c44 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8007bdc:	4313      	orrs	r3, r2
 8007bde:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d008      	beq.n	8007bfe <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007bec:	4b15      	ldr	r3, [pc, #84]	; (8007c44 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8007bee:	685b      	ldr	r3, [r3, #4]
 8007bf0:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bf8:	4912      	ldr	r1, [pc, #72]	; (8007c44 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8007bfa:	4313      	orrs	r3, r2
 8007bfc:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d008      	beq.n	8007c1c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8007c0a:	4b0e      	ldr	r3, [pc, #56]	; (8007c44 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8007c0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c0e:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c16:	490b      	ldr	r1, [pc, #44]	; (8007c44 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8007c18:	4313      	orrs	r3, r2
 8007c1a:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d008      	beq.n	8007c3a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8007c28:	4b06      	ldr	r3, [pc, #24]	; (8007c44 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8007c2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c2c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c34:	4903      	ldr	r1, [pc, #12]	; (8007c44 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8007c36:	4313      	orrs	r3, r2
 8007c38:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8007c3a:	2300      	movs	r3, #0
}
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	3748      	adds	r7, #72	; 0x48
 8007c40:	46bd      	mov	sp, r7
 8007c42:	bd80      	pop	{r7, pc}
 8007c44:	40021000 	.word	0x40021000

08007c48 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007c48:	b580      	push	{r7, lr}
 8007c4a:	b084      	sub	sp, #16
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d101      	bne.n	8007c5a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007c56:	2301      	movs	r3, #1
 8007c58:	e09d      	b.n	8007d96 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d108      	bne.n	8007c74 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	685b      	ldr	r3, [r3, #4]
 8007c66:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007c6a:	d009      	beq.n	8007c80 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	2200      	movs	r2, #0
 8007c70:	61da      	str	r2, [r3, #28]
 8007c72:	e005      	b.n	8007c80 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	2200      	movs	r2, #0
 8007c78:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	2200      	movs	r2, #0
 8007c7e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	2200      	movs	r2, #0
 8007c84:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007c8c:	b2db      	uxtb	r3, r3
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d106      	bne.n	8007ca0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	2200      	movs	r2, #0
 8007c96:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007c9a:	6878      	ldr	r0, [r7, #4]
 8007c9c:	f7fa f8a8 	bl	8001df0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	2202      	movs	r2, #2
 8007ca4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	681a      	ldr	r2, [r3, #0]
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007cb6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	68db      	ldr	r3, [r3, #12]
 8007cbc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007cc0:	d902      	bls.n	8007cc8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007cc2:	2300      	movs	r3, #0
 8007cc4:	60fb      	str	r3, [r7, #12]
 8007cc6:	e002      	b.n	8007cce <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007cc8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007ccc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	68db      	ldr	r3, [r3, #12]
 8007cd2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8007cd6:	d007      	beq.n	8007ce8 <HAL_SPI_Init+0xa0>
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	68db      	ldr	r3, [r3, #12]
 8007cdc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007ce0:	d002      	beq.n	8007ce8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	2200      	movs	r2, #0
 8007ce6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	685b      	ldr	r3, [r3, #4]
 8007cec:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	689b      	ldr	r3, [r3, #8]
 8007cf4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007cf8:	431a      	orrs	r2, r3
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	691b      	ldr	r3, [r3, #16]
 8007cfe:	f003 0302 	and.w	r3, r3, #2
 8007d02:	431a      	orrs	r2, r3
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	695b      	ldr	r3, [r3, #20]
 8007d08:	f003 0301 	and.w	r3, r3, #1
 8007d0c:	431a      	orrs	r2, r3
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	699b      	ldr	r3, [r3, #24]
 8007d12:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007d16:	431a      	orrs	r2, r3
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	69db      	ldr	r3, [r3, #28]
 8007d1c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007d20:	431a      	orrs	r2, r3
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	6a1b      	ldr	r3, [r3, #32]
 8007d26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d2a:	ea42 0103 	orr.w	r1, r2, r3
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d32:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	430a      	orrs	r2, r1
 8007d3c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	699b      	ldr	r3, [r3, #24]
 8007d42:	0c1b      	lsrs	r3, r3, #16
 8007d44:	f003 0204 	and.w	r2, r3, #4
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d4c:	f003 0310 	and.w	r3, r3, #16
 8007d50:	431a      	orrs	r2, r3
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d56:	f003 0308 	and.w	r3, r3, #8
 8007d5a:	431a      	orrs	r2, r3
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	68db      	ldr	r3, [r3, #12]
 8007d60:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8007d64:	ea42 0103 	orr.w	r1, r2, r3
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	430a      	orrs	r2, r1
 8007d74:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	69da      	ldr	r2, [r3, #28]
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007d84:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	2200      	movs	r2, #0
 8007d8a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	2201      	movs	r2, #1
 8007d90:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8007d94:	2300      	movs	r3, #0
}
 8007d96:	4618      	mov	r0, r3
 8007d98:	3710      	adds	r7, #16
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	bd80      	pop	{r7, pc}

08007d9e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007d9e:	b580      	push	{r7, lr}
 8007da0:	b082      	sub	sp, #8
 8007da2:	af00      	add	r7, sp, #0
 8007da4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d101      	bne.n	8007db0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007dac:	2301      	movs	r3, #1
 8007dae:	e049      	b.n	8007e44 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007db6:	b2db      	uxtb	r3, r3
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d106      	bne.n	8007dca <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	2200      	movs	r2, #0
 8007dc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007dc4:	6878      	ldr	r0, [r7, #4]
 8007dc6:	f7fa f857 	bl	8001e78 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	2202      	movs	r2, #2
 8007dce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681a      	ldr	r2, [r3, #0]
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	3304      	adds	r3, #4
 8007dda:	4619      	mov	r1, r3
 8007ddc:	4610      	mov	r0, r2
 8007dde:	f000 fa6b 	bl	80082b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	2201      	movs	r2, #1
 8007de6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	2201      	movs	r2, #1
 8007dee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	2201      	movs	r2, #1
 8007df6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	2201      	movs	r2, #1
 8007dfe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	2201      	movs	r2, #1
 8007e06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	2201      	movs	r2, #1
 8007e0e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	2201      	movs	r2, #1
 8007e16:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	2201      	movs	r2, #1
 8007e1e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	2201      	movs	r2, #1
 8007e26:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	2201      	movs	r2, #1
 8007e2e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	2201      	movs	r2, #1
 8007e36:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	2201      	movs	r2, #1
 8007e3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007e42:	2300      	movs	r3, #0
}
 8007e44:	4618      	mov	r0, r3
 8007e46:	3708      	adds	r7, #8
 8007e48:	46bd      	mov	sp, r7
 8007e4a:	bd80      	pop	{r7, pc}

08007e4c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007e4c:	b480      	push	{r7}
 8007e4e:	b085      	sub	sp, #20
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e5a:	b2db      	uxtb	r3, r3
 8007e5c:	2b01      	cmp	r3, #1
 8007e5e:	d001      	beq.n	8007e64 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007e60:	2301      	movs	r3, #1
 8007e62:	e03d      	b.n	8007ee0 <HAL_TIM_Base_Start+0x94>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	2202      	movs	r2, #2
 8007e68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	4a1e      	ldr	r2, [pc, #120]	; (8007eec <HAL_TIM_Base_Start+0xa0>)
 8007e72:	4293      	cmp	r3, r2
 8007e74:	d013      	beq.n	8007e9e <HAL_TIM_Base_Start+0x52>
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e7e:	d00e      	beq.n	8007e9e <HAL_TIM_Base_Start+0x52>
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	4a1a      	ldr	r2, [pc, #104]	; (8007ef0 <HAL_TIM_Base_Start+0xa4>)
 8007e86:	4293      	cmp	r3, r2
 8007e88:	d009      	beq.n	8007e9e <HAL_TIM_Base_Start+0x52>
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	4a19      	ldr	r2, [pc, #100]	; (8007ef4 <HAL_TIM_Base_Start+0xa8>)
 8007e90:	4293      	cmp	r3, r2
 8007e92:	d004      	beq.n	8007e9e <HAL_TIM_Base_Start+0x52>
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	4a17      	ldr	r2, [pc, #92]	; (8007ef8 <HAL_TIM_Base_Start+0xac>)
 8007e9a:	4293      	cmp	r3, r2
 8007e9c:	d115      	bne.n	8007eca <HAL_TIM_Base_Start+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	689a      	ldr	r2, [r3, #8]
 8007ea4:	4b15      	ldr	r3, [pc, #84]	; (8007efc <HAL_TIM_Base_Start+0xb0>)
 8007ea6:	4013      	ands	r3, r2
 8007ea8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	2b06      	cmp	r3, #6
 8007eae:	d015      	beq.n	8007edc <HAL_TIM_Base_Start+0x90>
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007eb6:	d011      	beq.n	8007edc <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	681a      	ldr	r2, [r3, #0]
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	f042 0201 	orr.w	r2, r2, #1
 8007ec6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ec8:	e008      	b.n	8007edc <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	681a      	ldr	r2, [r3, #0]
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	f042 0201 	orr.w	r2, r2, #1
 8007ed8:	601a      	str	r2, [r3, #0]
 8007eda:	e000      	b.n	8007ede <HAL_TIM_Base_Start+0x92>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007edc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007ede:	2300      	movs	r3, #0
}
 8007ee0:	4618      	mov	r0, r3
 8007ee2:	3714      	adds	r7, #20
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eea:	4770      	bx	lr
 8007eec:	40012c00 	.word	0x40012c00
 8007ef0:	40000400 	.word	0x40000400
 8007ef4:	40000800 	.word	0x40000800
 8007ef8:	40014000 	.word	0x40014000
 8007efc:	00010007 	.word	0x00010007

08007f00 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8007f00:	b480      	push	{r7}
 8007f02:	b083      	sub	sp, #12
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	6a1a      	ldr	r2, [r3, #32]
 8007f0e:	f241 1311 	movw	r3, #4369	; 0x1111
 8007f12:	4013      	ands	r3, r2
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d10f      	bne.n	8007f38 <HAL_TIM_Base_Stop+0x38>
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	6a1a      	ldr	r2, [r3, #32]
 8007f1e:	f240 4344 	movw	r3, #1092	; 0x444
 8007f22:	4013      	ands	r3, r2
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d107      	bne.n	8007f38 <HAL_TIM_Base_Stop+0x38>
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	681a      	ldr	r2, [r3, #0]
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	f022 0201 	bic.w	r2, r2, #1
 8007f36:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	2201      	movs	r2, #1
 8007f3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8007f40:	2300      	movs	r3, #0
}
 8007f42:	4618      	mov	r0, r3
 8007f44:	370c      	adds	r7, #12
 8007f46:	46bd      	mov	sp, r7
 8007f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4c:	4770      	bx	lr
	...

08007f50 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007f50:	b480      	push	{r7}
 8007f52:	b085      	sub	sp, #20
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f5e:	b2db      	uxtb	r3, r3
 8007f60:	2b01      	cmp	r3, #1
 8007f62:	d001      	beq.n	8007f68 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007f64:	2301      	movs	r3, #1
 8007f66:	e045      	b.n	8007ff4 <HAL_TIM_Base_Start_IT+0xa4>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	2202      	movs	r2, #2
 8007f6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	68da      	ldr	r2, [r3, #12]
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	f042 0201 	orr.w	r2, r2, #1
 8007f7e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	4a1e      	ldr	r2, [pc, #120]	; (8008000 <HAL_TIM_Base_Start_IT+0xb0>)
 8007f86:	4293      	cmp	r3, r2
 8007f88:	d013      	beq.n	8007fb2 <HAL_TIM_Base_Start_IT+0x62>
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f92:	d00e      	beq.n	8007fb2 <HAL_TIM_Base_Start_IT+0x62>
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	4a1a      	ldr	r2, [pc, #104]	; (8008004 <HAL_TIM_Base_Start_IT+0xb4>)
 8007f9a:	4293      	cmp	r3, r2
 8007f9c:	d009      	beq.n	8007fb2 <HAL_TIM_Base_Start_IT+0x62>
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	4a19      	ldr	r2, [pc, #100]	; (8008008 <HAL_TIM_Base_Start_IT+0xb8>)
 8007fa4:	4293      	cmp	r3, r2
 8007fa6:	d004      	beq.n	8007fb2 <HAL_TIM_Base_Start_IT+0x62>
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	4a17      	ldr	r2, [pc, #92]	; (800800c <HAL_TIM_Base_Start_IT+0xbc>)
 8007fae:	4293      	cmp	r3, r2
 8007fb0:	d115      	bne.n	8007fde <HAL_TIM_Base_Start_IT+0x8e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	689a      	ldr	r2, [r3, #8]
 8007fb8:	4b15      	ldr	r3, [pc, #84]	; (8008010 <HAL_TIM_Base_Start_IT+0xc0>)
 8007fba:	4013      	ands	r3, r2
 8007fbc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	2b06      	cmp	r3, #6
 8007fc2:	d015      	beq.n	8007ff0 <HAL_TIM_Base_Start_IT+0xa0>
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007fca:	d011      	beq.n	8007ff0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	681a      	ldr	r2, [r3, #0]
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	f042 0201 	orr.w	r2, r2, #1
 8007fda:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007fdc:	e008      	b.n	8007ff0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	681a      	ldr	r2, [r3, #0]
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	f042 0201 	orr.w	r2, r2, #1
 8007fec:	601a      	str	r2, [r3, #0]
 8007fee:	e000      	b.n	8007ff2 <HAL_TIM_Base_Start_IT+0xa2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ff0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007ff2:	2300      	movs	r3, #0
}
 8007ff4:	4618      	mov	r0, r3
 8007ff6:	3714      	adds	r7, #20
 8007ff8:	46bd      	mov	sp, r7
 8007ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ffe:	4770      	bx	lr
 8008000:	40012c00 	.word	0x40012c00
 8008004:	40000400 	.word	0x40000400
 8008008:	40000800 	.word	0x40000800
 800800c:	40014000 	.word	0x40014000
 8008010:	00010007 	.word	0x00010007

08008014 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008014:	b580      	push	{r7, lr}
 8008016:	b082      	sub	sp, #8
 8008018:	af00      	add	r7, sp, #0
 800801a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	691b      	ldr	r3, [r3, #16]
 8008022:	f003 0302 	and.w	r3, r3, #2
 8008026:	2b02      	cmp	r3, #2
 8008028:	d122      	bne.n	8008070 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	68db      	ldr	r3, [r3, #12]
 8008030:	f003 0302 	and.w	r3, r3, #2
 8008034:	2b02      	cmp	r3, #2
 8008036:	d11b      	bne.n	8008070 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	f06f 0202 	mvn.w	r2, #2
 8008040:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	2201      	movs	r2, #1
 8008046:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	699b      	ldr	r3, [r3, #24]
 800804e:	f003 0303 	and.w	r3, r3, #3
 8008052:	2b00      	cmp	r3, #0
 8008054:	d003      	beq.n	800805e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008056:	6878      	ldr	r0, [r7, #4]
 8008058:	f000 f90f 	bl	800827a <HAL_TIM_IC_CaptureCallback>
 800805c:	e005      	b.n	800806a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800805e:	6878      	ldr	r0, [r7, #4]
 8008060:	f000 f901 	bl	8008266 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008064:	6878      	ldr	r0, [r7, #4]
 8008066:	f000 f912 	bl	800828e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	2200      	movs	r2, #0
 800806e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	691b      	ldr	r3, [r3, #16]
 8008076:	f003 0304 	and.w	r3, r3, #4
 800807a:	2b04      	cmp	r3, #4
 800807c:	d122      	bne.n	80080c4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	68db      	ldr	r3, [r3, #12]
 8008084:	f003 0304 	and.w	r3, r3, #4
 8008088:	2b04      	cmp	r3, #4
 800808a:	d11b      	bne.n	80080c4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	f06f 0204 	mvn.w	r2, #4
 8008094:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	2202      	movs	r2, #2
 800809a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	699b      	ldr	r3, [r3, #24]
 80080a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d003      	beq.n	80080b2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80080aa:	6878      	ldr	r0, [r7, #4]
 80080ac:	f000 f8e5 	bl	800827a <HAL_TIM_IC_CaptureCallback>
 80080b0:	e005      	b.n	80080be <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80080b2:	6878      	ldr	r0, [r7, #4]
 80080b4:	f000 f8d7 	bl	8008266 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80080b8:	6878      	ldr	r0, [r7, #4]
 80080ba:	f000 f8e8 	bl	800828e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	2200      	movs	r2, #0
 80080c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	691b      	ldr	r3, [r3, #16]
 80080ca:	f003 0308 	and.w	r3, r3, #8
 80080ce:	2b08      	cmp	r3, #8
 80080d0:	d122      	bne.n	8008118 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	68db      	ldr	r3, [r3, #12]
 80080d8:	f003 0308 	and.w	r3, r3, #8
 80080dc:	2b08      	cmp	r3, #8
 80080de:	d11b      	bne.n	8008118 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	f06f 0208 	mvn.w	r2, #8
 80080e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	2204      	movs	r2, #4
 80080ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	69db      	ldr	r3, [r3, #28]
 80080f6:	f003 0303 	and.w	r3, r3, #3
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d003      	beq.n	8008106 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80080fe:	6878      	ldr	r0, [r7, #4]
 8008100:	f000 f8bb 	bl	800827a <HAL_TIM_IC_CaptureCallback>
 8008104:	e005      	b.n	8008112 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008106:	6878      	ldr	r0, [r7, #4]
 8008108:	f000 f8ad 	bl	8008266 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800810c:	6878      	ldr	r0, [r7, #4]
 800810e:	f000 f8be 	bl	800828e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	2200      	movs	r2, #0
 8008116:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	691b      	ldr	r3, [r3, #16]
 800811e:	f003 0310 	and.w	r3, r3, #16
 8008122:	2b10      	cmp	r3, #16
 8008124:	d122      	bne.n	800816c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	68db      	ldr	r3, [r3, #12]
 800812c:	f003 0310 	and.w	r3, r3, #16
 8008130:	2b10      	cmp	r3, #16
 8008132:	d11b      	bne.n	800816c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	f06f 0210 	mvn.w	r2, #16
 800813c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	2208      	movs	r2, #8
 8008142:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	69db      	ldr	r3, [r3, #28]
 800814a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800814e:	2b00      	cmp	r3, #0
 8008150:	d003      	beq.n	800815a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008152:	6878      	ldr	r0, [r7, #4]
 8008154:	f000 f891 	bl	800827a <HAL_TIM_IC_CaptureCallback>
 8008158:	e005      	b.n	8008166 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800815a:	6878      	ldr	r0, [r7, #4]
 800815c:	f000 f883 	bl	8008266 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008160:	6878      	ldr	r0, [r7, #4]
 8008162:	f000 f894 	bl	800828e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	2200      	movs	r2, #0
 800816a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	691b      	ldr	r3, [r3, #16]
 8008172:	f003 0301 	and.w	r3, r3, #1
 8008176:	2b01      	cmp	r3, #1
 8008178:	d10e      	bne.n	8008198 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	68db      	ldr	r3, [r3, #12]
 8008180:	f003 0301 	and.w	r3, r3, #1
 8008184:	2b01      	cmp	r3, #1
 8008186:	d107      	bne.n	8008198 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	f06f 0201 	mvn.w	r2, #1
 8008190:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008192:	6878      	ldr	r0, [r7, #4]
 8008194:	f000 f85d 	bl	8008252 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	691b      	ldr	r3, [r3, #16]
 800819e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80081a2:	2b80      	cmp	r3, #128	; 0x80
 80081a4:	d10e      	bne.n	80081c4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	68db      	ldr	r3, [r3, #12]
 80081ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80081b0:	2b80      	cmp	r3, #128	; 0x80
 80081b2:	d107      	bne.n	80081c4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80081bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80081be:	6878      	ldr	r0, [r7, #4]
 80081c0:	f000 f97a 	bl	80084b8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	691b      	ldr	r3, [r3, #16]
 80081ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80081d2:	d10e      	bne.n	80081f2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	68db      	ldr	r3, [r3, #12]
 80081da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80081de:	2b80      	cmp	r3, #128	; 0x80
 80081e0:	d107      	bne.n	80081f2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80081ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80081ec:	6878      	ldr	r0, [r7, #4]
 80081ee:	f000 f96d 	bl	80084cc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	691b      	ldr	r3, [r3, #16]
 80081f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081fc:	2b40      	cmp	r3, #64	; 0x40
 80081fe:	d10e      	bne.n	800821e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	68db      	ldr	r3, [r3, #12]
 8008206:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800820a:	2b40      	cmp	r3, #64	; 0x40
 800820c:	d107      	bne.n	800821e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008216:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008218:	6878      	ldr	r0, [r7, #4]
 800821a:	f000 f842 	bl	80082a2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	691b      	ldr	r3, [r3, #16]
 8008224:	f003 0320 	and.w	r3, r3, #32
 8008228:	2b20      	cmp	r3, #32
 800822a:	d10e      	bne.n	800824a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	68db      	ldr	r3, [r3, #12]
 8008232:	f003 0320 	and.w	r3, r3, #32
 8008236:	2b20      	cmp	r3, #32
 8008238:	d107      	bne.n	800824a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	f06f 0220 	mvn.w	r2, #32
 8008242:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008244:	6878      	ldr	r0, [r7, #4]
 8008246:	f000 f92d 	bl	80084a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800824a:	bf00      	nop
 800824c:	3708      	adds	r7, #8
 800824e:	46bd      	mov	sp, r7
 8008250:	bd80      	pop	{r7, pc}

08008252 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008252:	b480      	push	{r7}
 8008254:	b083      	sub	sp, #12
 8008256:	af00      	add	r7, sp, #0
 8008258:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800825a:	bf00      	nop
 800825c:	370c      	adds	r7, #12
 800825e:	46bd      	mov	sp, r7
 8008260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008264:	4770      	bx	lr

08008266 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008266:	b480      	push	{r7}
 8008268:	b083      	sub	sp, #12
 800826a:	af00      	add	r7, sp, #0
 800826c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800826e:	bf00      	nop
 8008270:	370c      	adds	r7, #12
 8008272:	46bd      	mov	sp, r7
 8008274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008278:	4770      	bx	lr

0800827a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800827a:	b480      	push	{r7}
 800827c:	b083      	sub	sp, #12
 800827e:	af00      	add	r7, sp, #0
 8008280:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008282:	bf00      	nop
 8008284:	370c      	adds	r7, #12
 8008286:	46bd      	mov	sp, r7
 8008288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800828c:	4770      	bx	lr

0800828e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800828e:	b480      	push	{r7}
 8008290:	b083      	sub	sp, #12
 8008292:	af00      	add	r7, sp, #0
 8008294:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008296:	bf00      	nop
 8008298:	370c      	adds	r7, #12
 800829a:	46bd      	mov	sp, r7
 800829c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a0:	4770      	bx	lr

080082a2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80082a2:	b480      	push	{r7}
 80082a4:	b083      	sub	sp, #12
 80082a6:	af00      	add	r7, sp, #0
 80082a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80082aa:	bf00      	nop
 80082ac:	370c      	adds	r7, #12
 80082ae:	46bd      	mov	sp, r7
 80082b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b4:	4770      	bx	lr
	...

080082b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80082b8:	b480      	push	{r7}
 80082ba:	b085      	sub	sp, #20
 80082bc:	af00      	add	r7, sp, #0
 80082be:	6078      	str	r0, [r7, #4]
 80082c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	4a36      	ldr	r2, [pc, #216]	; (80083a4 <TIM_Base_SetConfig+0xec>)
 80082cc:	4293      	cmp	r3, r2
 80082ce:	d00b      	beq.n	80082e8 <TIM_Base_SetConfig+0x30>
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80082d6:	d007      	beq.n	80082e8 <TIM_Base_SetConfig+0x30>
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	4a33      	ldr	r2, [pc, #204]	; (80083a8 <TIM_Base_SetConfig+0xf0>)
 80082dc:	4293      	cmp	r3, r2
 80082de:	d003      	beq.n	80082e8 <TIM_Base_SetConfig+0x30>
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	4a32      	ldr	r2, [pc, #200]	; (80083ac <TIM_Base_SetConfig+0xf4>)
 80082e4:	4293      	cmp	r3, r2
 80082e6:	d108      	bne.n	80082fa <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80082ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80082f0:	683b      	ldr	r3, [r7, #0]
 80082f2:	685b      	ldr	r3, [r3, #4]
 80082f4:	68fa      	ldr	r2, [r7, #12]
 80082f6:	4313      	orrs	r3, r2
 80082f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	4a29      	ldr	r2, [pc, #164]	; (80083a4 <TIM_Base_SetConfig+0xec>)
 80082fe:	4293      	cmp	r3, r2
 8008300:	d017      	beq.n	8008332 <TIM_Base_SetConfig+0x7a>
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008308:	d013      	beq.n	8008332 <TIM_Base_SetConfig+0x7a>
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	4a26      	ldr	r2, [pc, #152]	; (80083a8 <TIM_Base_SetConfig+0xf0>)
 800830e:	4293      	cmp	r3, r2
 8008310:	d00f      	beq.n	8008332 <TIM_Base_SetConfig+0x7a>
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	4a25      	ldr	r2, [pc, #148]	; (80083ac <TIM_Base_SetConfig+0xf4>)
 8008316:	4293      	cmp	r3, r2
 8008318:	d00b      	beq.n	8008332 <TIM_Base_SetConfig+0x7a>
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	4a24      	ldr	r2, [pc, #144]	; (80083b0 <TIM_Base_SetConfig+0xf8>)
 800831e:	4293      	cmp	r3, r2
 8008320:	d007      	beq.n	8008332 <TIM_Base_SetConfig+0x7a>
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	4a23      	ldr	r2, [pc, #140]	; (80083b4 <TIM_Base_SetConfig+0xfc>)
 8008326:	4293      	cmp	r3, r2
 8008328:	d003      	beq.n	8008332 <TIM_Base_SetConfig+0x7a>
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	4a22      	ldr	r2, [pc, #136]	; (80083b8 <TIM_Base_SetConfig+0x100>)
 800832e:	4293      	cmp	r3, r2
 8008330:	d108      	bne.n	8008344 <TIM_Base_SetConfig+0x8c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008338:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800833a:	683b      	ldr	r3, [r7, #0]
 800833c:	68db      	ldr	r3, [r3, #12]
 800833e:	68fa      	ldr	r2, [r7, #12]
 8008340:	4313      	orrs	r3, r2
 8008342:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800834a:	683b      	ldr	r3, [r7, #0]
 800834c:	695b      	ldr	r3, [r3, #20]
 800834e:	4313      	orrs	r3, r2
 8008350:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	68fa      	ldr	r2, [r7, #12]
 8008356:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008358:	683b      	ldr	r3, [r7, #0]
 800835a:	689a      	ldr	r2, [r3, #8]
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008360:	683b      	ldr	r3, [r7, #0]
 8008362:	681a      	ldr	r2, [r3, #0]
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	4a0e      	ldr	r2, [pc, #56]	; (80083a4 <TIM_Base_SetConfig+0xec>)
 800836c:	4293      	cmp	r3, r2
 800836e:	d00b      	beq.n	8008388 <TIM_Base_SetConfig+0xd0>
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	4a0f      	ldr	r2, [pc, #60]	; (80083b0 <TIM_Base_SetConfig+0xf8>)
 8008374:	4293      	cmp	r3, r2
 8008376:	d007      	beq.n	8008388 <TIM_Base_SetConfig+0xd0>
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	4a0e      	ldr	r2, [pc, #56]	; (80083b4 <TIM_Base_SetConfig+0xfc>)
 800837c:	4293      	cmp	r3, r2
 800837e:	d003      	beq.n	8008388 <TIM_Base_SetConfig+0xd0>
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	4a0d      	ldr	r2, [pc, #52]	; (80083b8 <TIM_Base_SetConfig+0x100>)
 8008384:	4293      	cmp	r3, r2
 8008386:	d103      	bne.n	8008390 <TIM_Base_SetConfig+0xd8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008388:	683b      	ldr	r3, [r7, #0]
 800838a:	691a      	ldr	r2, [r3, #16]
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	2201      	movs	r2, #1
 8008394:	615a      	str	r2, [r3, #20]
}
 8008396:	bf00      	nop
 8008398:	3714      	adds	r7, #20
 800839a:	46bd      	mov	sp, r7
 800839c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a0:	4770      	bx	lr
 80083a2:	bf00      	nop
 80083a4:	40012c00 	.word	0x40012c00
 80083a8:	40000400 	.word	0x40000400
 80083ac:	40000800 	.word	0x40000800
 80083b0:	40014000 	.word	0x40014000
 80083b4:	40014400 	.word	0x40014400
 80083b8:	40014800 	.word	0x40014800

080083bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80083bc:	b480      	push	{r7}
 80083be:	b085      	sub	sp, #20
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	6078      	str	r0, [r7, #4]
 80083c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80083cc:	2b01      	cmp	r3, #1
 80083ce:	d101      	bne.n	80083d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80083d0:	2302      	movs	r3, #2
 80083d2:	e059      	b.n	8008488 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	2201      	movs	r2, #1
 80083d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	2202      	movs	r2, #2
 80083e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	685b      	ldr	r3, [r3, #4]
 80083ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	689b      	ldr	r3, [r3, #8]
 80083f2:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	4a26      	ldr	r2, [pc, #152]	; (8008494 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80083fa:	4293      	cmp	r3, r2
 80083fc:	d108      	bne.n	8008410 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008404:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008406:	683b      	ldr	r3, [r7, #0]
 8008408:	685b      	ldr	r3, [r3, #4]
 800840a:	68fa      	ldr	r2, [r7, #12]
 800840c:	4313      	orrs	r3, r2
 800840e:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008416:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008418:	683b      	ldr	r3, [r7, #0]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	68fa      	ldr	r2, [r7, #12]
 800841e:	4313      	orrs	r3, r2
 8008420:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	68fa      	ldr	r2, [r7, #12]
 8008428:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	4a19      	ldr	r2, [pc, #100]	; (8008494 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8008430:	4293      	cmp	r3, r2
 8008432:	d013      	beq.n	800845c <HAL_TIMEx_MasterConfigSynchronization+0xa0>
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800843c:	d00e      	beq.n	800845c <HAL_TIMEx_MasterConfigSynchronization+0xa0>
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	4a15      	ldr	r2, [pc, #84]	; (8008498 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008444:	4293      	cmp	r3, r2
 8008446:	d009      	beq.n	800845c <HAL_TIMEx_MasterConfigSynchronization+0xa0>
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	4a13      	ldr	r2, [pc, #76]	; (800849c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800844e:	4293      	cmp	r3, r2
 8008450:	d004      	beq.n	800845c <HAL_TIMEx_MasterConfigSynchronization+0xa0>
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	4a12      	ldr	r2, [pc, #72]	; (80084a0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008458:	4293      	cmp	r3, r2
 800845a:	d10c      	bne.n	8008476 <HAL_TIMEx_MasterConfigSynchronization+0xba>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800845c:	68bb      	ldr	r3, [r7, #8]
 800845e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008462:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008464:	683b      	ldr	r3, [r7, #0]
 8008466:	689b      	ldr	r3, [r3, #8]
 8008468:	68ba      	ldr	r2, [r7, #8]
 800846a:	4313      	orrs	r3, r2
 800846c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	68ba      	ldr	r2, [r7, #8]
 8008474:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	2201      	movs	r2, #1
 800847a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	2200      	movs	r2, #0
 8008482:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008486:	2300      	movs	r3, #0
}
 8008488:	4618      	mov	r0, r3
 800848a:	3714      	adds	r7, #20
 800848c:	46bd      	mov	sp, r7
 800848e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008492:	4770      	bx	lr
 8008494:	40012c00 	.word	0x40012c00
 8008498:	40000400 	.word	0x40000400
 800849c:	40000800 	.word	0x40000800
 80084a0:	40014000 	.word	0x40014000

080084a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80084a4:	b480      	push	{r7}
 80084a6:	b083      	sub	sp, #12
 80084a8:	af00      	add	r7, sp, #0
 80084aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80084ac:	bf00      	nop
 80084ae:	370c      	adds	r7, #12
 80084b0:	46bd      	mov	sp, r7
 80084b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b6:	4770      	bx	lr

080084b8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80084b8:	b480      	push	{r7}
 80084ba:	b083      	sub	sp, #12
 80084bc:	af00      	add	r7, sp, #0
 80084be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80084c0:	bf00      	nop
 80084c2:	370c      	adds	r7, #12
 80084c4:	46bd      	mov	sp, r7
 80084c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ca:	4770      	bx	lr

080084cc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80084cc:	b480      	push	{r7}
 80084ce:	b083      	sub	sp, #12
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80084d4:	bf00      	nop
 80084d6:	370c      	adds	r7, #12
 80084d8:	46bd      	mov	sp, r7
 80084da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084de:	4770      	bx	lr

080084e0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80084e0:	b580      	push	{r7, lr}
 80084e2:	b082      	sub	sp, #8
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d101      	bne.n	80084f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80084ee:	2301      	movs	r3, #1
 80084f0:	e040      	b.n	8008574 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d106      	bne.n	8008508 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	2200      	movs	r2, #0
 80084fe:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008502:	6878      	ldr	r0, [r7, #4]
 8008504:	f7f9 fd06 	bl	8001f14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	2224      	movs	r2, #36	; 0x24
 800850c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	681a      	ldr	r2, [r3, #0]
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	f022 0201 	bic.w	r2, r2, #1
 800851c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800851e:	6878      	ldr	r0, [r7, #4]
 8008520:	f000 f8b6 	bl	8008690 <UART_SetConfig>
 8008524:	4603      	mov	r3, r0
 8008526:	2b01      	cmp	r3, #1
 8008528:	d101      	bne.n	800852e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800852a:	2301      	movs	r3, #1
 800852c:	e022      	b.n	8008574 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008532:	2b00      	cmp	r3, #0
 8008534:	d002      	beq.n	800853c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8008536:	6878      	ldr	r0, [r7, #4]
 8008538:	f000 fa7e 	bl	8008a38 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	685a      	ldr	r2, [r3, #4]
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800854a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	689a      	ldr	r2, [r3, #8]
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800855a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	681a      	ldr	r2, [r3, #0]
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	f042 0201 	orr.w	r2, r2, #1
 800856a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800856c:	6878      	ldr	r0, [r7, #4]
 800856e:	f000 fb05 	bl	8008b7c <UART_CheckIdleState>
 8008572:	4603      	mov	r3, r0
}
 8008574:	4618      	mov	r0, r3
 8008576:	3708      	adds	r7, #8
 8008578:	46bd      	mov	sp, r7
 800857a:	bd80      	pop	{r7, pc}

0800857c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800857c:	b580      	push	{r7, lr}
 800857e:	b08a      	sub	sp, #40	; 0x28
 8008580:	af02      	add	r7, sp, #8
 8008582:	60f8      	str	r0, [r7, #12]
 8008584:	60b9      	str	r1, [r7, #8]
 8008586:	603b      	str	r3, [r7, #0]
 8008588:	4613      	mov	r3, r2
 800858a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008590:	2b20      	cmp	r3, #32
 8008592:	d178      	bne.n	8008686 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008594:	68bb      	ldr	r3, [r7, #8]
 8008596:	2b00      	cmp	r3, #0
 8008598:	d002      	beq.n	80085a0 <HAL_UART_Transmit+0x24>
 800859a:	88fb      	ldrh	r3, [r7, #6]
 800859c:	2b00      	cmp	r3, #0
 800859e:	d101      	bne.n	80085a4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80085a0:	2301      	movs	r3, #1
 80085a2:	e071      	b.n	8008688 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	2200      	movs	r2, #0
 80085a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	2221      	movs	r2, #33	; 0x21
 80085b0:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80085b2:	f7fb f95d 	bl	8003870 <HAL_GetTick>
 80085b6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	88fa      	ldrh	r2, [r7, #6]
 80085bc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	88fa      	ldrh	r2, [r7, #6]
 80085c4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	689b      	ldr	r3, [r3, #8]
 80085cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80085d0:	d108      	bne.n	80085e4 <HAL_UART_Transmit+0x68>
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	691b      	ldr	r3, [r3, #16]
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d104      	bne.n	80085e4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80085da:	2300      	movs	r3, #0
 80085dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80085de:	68bb      	ldr	r3, [r7, #8]
 80085e0:	61bb      	str	r3, [r7, #24]
 80085e2:	e003      	b.n	80085ec <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80085e4:	68bb      	ldr	r3, [r7, #8]
 80085e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80085e8:	2300      	movs	r3, #0
 80085ea:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80085ec:	e030      	b.n	8008650 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80085ee:	683b      	ldr	r3, [r7, #0]
 80085f0:	9300      	str	r3, [sp, #0]
 80085f2:	697b      	ldr	r3, [r7, #20]
 80085f4:	2200      	movs	r2, #0
 80085f6:	2180      	movs	r1, #128	; 0x80
 80085f8:	68f8      	ldr	r0, [r7, #12]
 80085fa:	f000 fb67 	bl	8008ccc <UART_WaitOnFlagUntilTimeout>
 80085fe:	4603      	mov	r3, r0
 8008600:	2b00      	cmp	r3, #0
 8008602:	d004      	beq.n	800860e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	2220      	movs	r2, #32
 8008608:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800860a:	2303      	movs	r3, #3
 800860c:	e03c      	b.n	8008688 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 800860e:	69fb      	ldr	r3, [r7, #28]
 8008610:	2b00      	cmp	r3, #0
 8008612:	d10b      	bne.n	800862c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008614:	69bb      	ldr	r3, [r7, #24]
 8008616:	881a      	ldrh	r2, [r3, #0]
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008620:	b292      	uxth	r2, r2
 8008622:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8008624:	69bb      	ldr	r3, [r7, #24]
 8008626:	3302      	adds	r3, #2
 8008628:	61bb      	str	r3, [r7, #24]
 800862a:	e008      	b.n	800863e <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800862c:	69fb      	ldr	r3, [r7, #28]
 800862e:	781a      	ldrb	r2, [r3, #0]
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	b292      	uxth	r2, r2
 8008636:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008638:	69fb      	ldr	r3, [r7, #28]
 800863a:	3301      	adds	r3, #1
 800863c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008644:	b29b      	uxth	r3, r3
 8008646:	3b01      	subs	r3, #1
 8008648:	b29a      	uxth	r2, r3
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008656:	b29b      	uxth	r3, r3
 8008658:	2b00      	cmp	r3, #0
 800865a:	d1c8      	bne.n	80085ee <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800865c:	683b      	ldr	r3, [r7, #0]
 800865e:	9300      	str	r3, [sp, #0]
 8008660:	697b      	ldr	r3, [r7, #20]
 8008662:	2200      	movs	r2, #0
 8008664:	2140      	movs	r1, #64	; 0x40
 8008666:	68f8      	ldr	r0, [r7, #12]
 8008668:	f000 fb30 	bl	8008ccc <UART_WaitOnFlagUntilTimeout>
 800866c:	4603      	mov	r3, r0
 800866e:	2b00      	cmp	r3, #0
 8008670:	d004      	beq.n	800867c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	2220      	movs	r2, #32
 8008676:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8008678:	2303      	movs	r3, #3
 800867a:	e005      	b.n	8008688 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	2220      	movs	r2, #32
 8008680:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8008682:	2300      	movs	r3, #0
 8008684:	e000      	b.n	8008688 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8008686:	2302      	movs	r3, #2
  }
}
 8008688:	4618      	mov	r0, r3
 800868a:	3720      	adds	r7, #32
 800868c:	46bd      	mov	sp, r7
 800868e:	bd80      	pop	{r7, pc}

08008690 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008690:	b580      	push	{r7, lr}
 8008692:	b088      	sub	sp, #32
 8008694:	af00      	add	r7, sp, #0
 8008696:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008698:	2300      	movs	r3, #0
 800869a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	689a      	ldr	r2, [r3, #8]
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	691b      	ldr	r3, [r3, #16]
 80086a4:	431a      	orrs	r2, r3
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	695b      	ldr	r3, [r3, #20]
 80086aa:	431a      	orrs	r2, r3
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	69db      	ldr	r3, [r3, #28]
 80086b0:	4313      	orrs	r3, r2
 80086b2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80086be:	f023 030c 	bic.w	r3, r3, #12
 80086c2:	687a      	ldr	r2, [r7, #4]
 80086c4:	6812      	ldr	r2, [r2, #0]
 80086c6:	6979      	ldr	r1, [r7, #20]
 80086c8:	430b      	orrs	r3, r1
 80086ca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	685b      	ldr	r3, [r3, #4]
 80086d2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	68da      	ldr	r2, [r3, #12]
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	430a      	orrs	r2, r1
 80086e0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	699b      	ldr	r3, [r3, #24]
 80086e6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	6a1b      	ldr	r3, [r3, #32]
 80086ec:	697a      	ldr	r2, [r7, #20]
 80086ee:	4313      	orrs	r3, r2
 80086f0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	689b      	ldr	r3, [r3, #8]
 80086f8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	697a      	ldr	r2, [r7, #20]
 8008702:	430a      	orrs	r2, r1
 8008704:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	4aa7      	ldr	r2, [pc, #668]	; (80089a8 <UART_SetConfig+0x318>)
 800870c:	4293      	cmp	r3, r2
 800870e:	d120      	bne.n	8008752 <UART_SetConfig+0xc2>
 8008710:	4ba6      	ldr	r3, [pc, #664]	; (80089ac <UART_SetConfig+0x31c>)
 8008712:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008714:	f003 0303 	and.w	r3, r3, #3
 8008718:	2b03      	cmp	r3, #3
 800871a:	d817      	bhi.n	800874c <UART_SetConfig+0xbc>
 800871c:	a201      	add	r2, pc, #4	; (adr r2, 8008724 <UART_SetConfig+0x94>)
 800871e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008722:	bf00      	nop
 8008724:	08008735 	.word	0x08008735
 8008728:	08008741 	.word	0x08008741
 800872c:	08008747 	.word	0x08008747
 8008730:	0800873b 	.word	0x0800873b
 8008734:	2301      	movs	r3, #1
 8008736:	77fb      	strb	r3, [r7, #31]
 8008738:	e0b5      	b.n	80088a6 <UART_SetConfig+0x216>
 800873a:	2302      	movs	r3, #2
 800873c:	77fb      	strb	r3, [r7, #31]
 800873e:	e0b2      	b.n	80088a6 <UART_SetConfig+0x216>
 8008740:	2304      	movs	r3, #4
 8008742:	77fb      	strb	r3, [r7, #31]
 8008744:	e0af      	b.n	80088a6 <UART_SetConfig+0x216>
 8008746:	2308      	movs	r3, #8
 8008748:	77fb      	strb	r3, [r7, #31]
 800874a:	e0ac      	b.n	80088a6 <UART_SetConfig+0x216>
 800874c:	2310      	movs	r3, #16
 800874e:	77fb      	strb	r3, [r7, #31]
 8008750:	e0a9      	b.n	80088a6 <UART_SetConfig+0x216>
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	4a96      	ldr	r2, [pc, #600]	; (80089b0 <UART_SetConfig+0x320>)
 8008758:	4293      	cmp	r3, r2
 800875a:	d124      	bne.n	80087a6 <UART_SetConfig+0x116>
 800875c:	4b93      	ldr	r3, [pc, #588]	; (80089ac <UART_SetConfig+0x31c>)
 800875e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008760:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008764:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008768:	d011      	beq.n	800878e <UART_SetConfig+0xfe>
 800876a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800876e:	d817      	bhi.n	80087a0 <UART_SetConfig+0x110>
 8008770:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008774:	d011      	beq.n	800879a <UART_SetConfig+0x10a>
 8008776:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800877a:	d811      	bhi.n	80087a0 <UART_SetConfig+0x110>
 800877c:	2b00      	cmp	r3, #0
 800877e:	d003      	beq.n	8008788 <UART_SetConfig+0xf8>
 8008780:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008784:	d006      	beq.n	8008794 <UART_SetConfig+0x104>
 8008786:	e00b      	b.n	80087a0 <UART_SetConfig+0x110>
 8008788:	2300      	movs	r3, #0
 800878a:	77fb      	strb	r3, [r7, #31]
 800878c:	e08b      	b.n	80088a6 <UART_SetConfig+0x216>
 800878e:	2302      	movs	r3, #2
 8008790:	77fb      	strb	r3, [r7, #31]
 8008792:	e088      	b.n	80088a6 <UART_SetConfig+0x216>
 8008794:	2304      	movs	r3, #4
 8008796:	77fb      	strb	r3, [r7, #31]
 8008798:	e085      	b.n	80088a6 <UART_SetConfig+0x216>
 800879a:	2308      	movs	r3, #8
 800879c:	77fb      	strb	r3, [r7, #31]
 800879e:	e082      	b.n	80088a6 <UART_SetConfig+0x216>
 80087a0:	2310      	movs	r3, #16
 80087a2:	77fb      	strb	r3, [r7, #31]
 80087a4:	e07f      	b.n	80088a6 <UART_SetConfig+0x216>
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	4a82      	ldr	r2, [pc, #520]	; (80089b4 <UART_SetConfig+0x324>)
 80087ac:	4293      	cmp	r3, r2
 80087ae:	d124      	bne.n	80087fa <UART_SetConfig+0x16a>
 80087b0:	4b7e      	ldr	r3, [pc, #504]	; (80089ac <UART_SetConfig+0x31c>)
 80087b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087b4:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80087b8:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80087bc:	d011      	beq.n	80087e2 <UART_SetConfig+0x152>
 80087be:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80087c2:	d817      	bhi.n	80087f4 <UART_SetConfig+0x164>
 80087c4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80087c8:	d011      	beq.n	80087ee <UART_SetConfig+0x15e>
 80087ca:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80087ce:	d811      	bhi.n	80087f4 <UART_SetConfig+0x164>
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d003      	beq.n	80087dc <UART_SetConfig+0x14c>
 80087d4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80087d8:	d006      	beq.n	80087e8 <UART_SetConfig+0x158>
 80087da:	e00b      	b.n	80087f4 <UART_SetConfig+0x164>
 80087dc:	2300      	movs	r3, #0
 80087de:	77fb      	strb	r3, [r7, #31]
 80087e0:	e061      	b.n	80088a6 <UART_SetConfig+0x216>
 80087e2:	2302      	movs	r3, #2
 80087e4:	77fb      	strb	r3, [r7, #31]
 80087e6:	e05e      	b.n	80088a6 <UART_SetConfig+0x216>
 80087e8:	2304      	movs	r3, #4
 80087ea:	77fb      	strb	r3, [r7, #31]
 80087ec:	e05b      	b.n	80088a6 <UART_SetConfig+0x216>
 80087ee:	2308      	movs	r3, #8
 80087f0:	77fb      	strb	r3, [r7, #31]
 80087f2:	e058      	b.n	80088a6 <UART_SetConfig+0x216>
 80087f4:	2310      	movs	r3, #16
 80087f6:	77fb      	strb	r3, [r7, #31]
 80087f8:	e055      	b.n	80088a6 <UART_SetConfig+0x216>
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	4a6e      	ldr	r2, [pc, #440]	; (80089b8 <UART_SetConfig+0x328>)
 8008800:	4293      	cmp	r3, r2
 8008802:	d124      	bne.n	800884e <UART_SetConfig+0x1be>
 8008804:	4b69      	ldr	r3, [pc, #420]	; (80089ac <UART_SetConfig+0x31c>)
 8008806:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008808:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800880c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008810:	d011      	beq.n	8008836 <UART_SetConfig+0x1a6>
 8008812:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008816:	d817      	bhi.n	8008848 <UART_SetConfig+0x1b8>
 8008818:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800881c:	d011      	beq.n	8008842 <UART_SetConfig+0x1b2>
 800881e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008822:	d811      	bhi.n	8008848 <UART_SetConfig+0x1b8>
 8008824:	2b00      	cmp	r3, #0
 8008826:	d003      	beq.n	8008830 <UART_SetConfig+0x1a0>
 8008828:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800882c:	d006      	beq.n	800883c <UART_SetConfig+0x1ac>
 800882e:	e00b      	b.n	8008848 <UART_SetConfig+0x1b8>
 8008830:	2300      	movs	r3, #0
 8008832:	77fb      	strb	r3, [r7, #31]
 8008834:	e037      	b.n	80088a6 <UART_SetConfig+0x216>
 8008836:	2302      	movs	r3, #2
 8008838:	77fb      	strb	r3, [r7, #31]
 800883a:	e034      	b.n	80088a6 <UART_SetConfig+0x216>
 800883c:	2304      	movs	r3, #4
 800883e:	77fb      	strb	r3, [r7, #31]
 8008840:	e031      	b.n	80088a6 <UART_SetConfig+0x216>
 8008842:	2308      	movs	r3, #8
 8008844:	77fb      	strb	r3, [r7, #31]
 8008846:	e02e      	b.n	80088a6 <UART_SetConfig+0x216>
 8008848:	2310      	movs	r3, #16
 800884a:	77fb      	strb	r3, [r7, #31]
 800884c:	e02b      	b.n	80088a6 <UART_SetConfig+0x216>
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	4a5a      	ldr	r2, [pc, #360]	; (80089bc <UART_SetConfig+0x32c>)
 8008854:	4293      	cmp	r3, r2
 8008856:	d124      	bne.n	80088a2 <UART_SetConfig+0x212>
 8008858:	4b54      	ldr	r3, [pc, #336]	; (80089ac <UART_SetConfig+0x31c>)
 800885a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800885c:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8008860:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8008864:	d011      	beq.n	800888a <UART_SetConfig+0x1fa>
 8008866:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800886a:	d817      	bhi.n	800889c <UART_SetConfig+0x20c>
 800886c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008870:	d011      	beq.n	8008896 <UART_SetConfig+0x206>
 8008872:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008876:	d811      	bhi.n	800889c <UART_SetConfig+0x20c>
 8008878:	2b00      	cmp	r3, #0
 800887a:	d003      	beq.n	8008884 <UART_SetConfig+0x1f4>
 800887c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008880:	d006      	beq.n	8008890 <UART_SetConfig+0x200>
 8008882:	e00b      	b.n	800889c <UART_SetConfig+0x20c>
 8008884:	2300      	movs	r3, #0
 8008886:	77fb      	strb	r3, [r7, #31]
 8008888:	e00d      	b.n	80088a6 <UART_SetConfig+0x216>
 800888a:	2302      	movs	r3, #2
 800888c:	77fb      	strb	r3, [r7, #31]
 800888e:	e00a      	b.n	80088a6 <UART_SetConfig+0x216>
 8008890:	2304      	movs	r3, #4
 8008892:	77fb      	strb	r3, [r7, #31]
 8008894:	e007      	b.n	80088a6 <UART_SetConfig+0x216>
 8008896:	2308      	movs	r3, #8
 8008898:	77fb      	strb	r3, [r7, #31]
 800889a:	e004      	b.n	80088a6 <UART_SetConfig+0x216>
 800889c:	2310      	movs	r3, #16
 800889e:	77fb      	strb	r3, [r7, #31]
 80088a0:	e001      	b.n	80088a6 <UART_SetConfig+0x216>
 80088a2:	2310      	movs	r3, #16
 80088a4:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	69db      	ldr	r3, [r3, #28]
 80088aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80088ae:	d15b      	bne.n	8008968 <UART_SetConfig+0x2d8>
  {
    switch (clocksource)
 80088b0:	7ffb      	ldrb	r3, [r7, #31]
 80088b2:	2b08      	cmp	r3, #8
 80088b4:	d827      	bhi.n	8008906 <UART_SetConfig+0x276>
 80088b6:	a201      	add	r2, pc, #4	; (adr r2, 80088bc <UART_SetConfig+0x22c>)
 80088b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088bc:	080088e1 	.word	0x080088e1
 80088c0:	080088e9 	.word	0x080088e9
 80088c4:	080088f1 	.word	0x080088f1
 80088c8:	08008907 	.word	0x08008907
 80088cc:	080088f7 	.word	0x080088f7
 80088d0:	08008907 	.word	0x08008907
 80088d4:	08008907 	.word	0x08008907
 80088d8:	08008907 	.word	0x08008907
 80088dc:	080088ff 	.word	0x080088ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80088e0:	f7fe ffdc 	bl	800789c <HAL_RCC_GetPCLK1Freq>
 80088e4:	61b8      	str	r0, [r7, #24]
        break;
 80088e6:	e013      	b.n	8008910 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80088e8:	f7fe fffa 	bl	80078e0 <HAL_RCC_GetPCLK2Freq>
 80088ec:	61b8      	str	r0, [r7, #24]
        break;
 80088ee:	e00f      	b.n	8008910 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80088f0:	4b33      	ldr	r3, [pc, #204]	; (80089c0 <UART_SetConfig+0x330>)
 80088f2:	61bb      	str	r3, [r7, #24]
        break;
 80088f4:	e00c      	b.n	8008910 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80088f6:	f7fe ff5b 	bl	80077b0 <HAL_RCC_GetSysClockFreq>
 80088fa:	61b8      	str	r0, [r7, #24]
        break;
 80088fc:	e008      	b.n	8008910 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80088fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008902:	61bb      	str	r3, [r7, #24]
        break;
 8008904:	e004      	b.n	8008910 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 8008906:	2300      	movs	r3, #0
 8008908:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800890a:	2301      	movs	r3, #1
 800890c:	77bb      	strb	r3, [r7, #30]
        break;
 800890e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008910:	69bb      	ldr	r3, [r7, #24]
 8008912:	2b00      	cmp	r3, #0
 8008914:	f000 8082 	beq.w	8008a1c <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008918:	69bb      	ldr	r3, [r7, #24]
 800891a:	005a      	lsls	r2, r3, #1
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	685b      	ldr	r3, [r3, #4]
 8008920:	085b      	lsrs	r3, r3, #1
 8008922:	441a      	add	r2, r3
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	685b      	ldr	r3, [r3, #4]
 8008928:	fbb2 f3f3 	udiv	r3, r2, r3
 800892c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800892e:	693b      	ldr	r3, [r7, #16]
 8008930:	2b0f      	cmp	r3, #15
 8008932:	d916      	bls.n	8008962 <UART_SetConfig+0x2d2>
 8008934:	693b      	ldr	r3, [r7, #16]
 8008936:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800893a:	d212      	bcs.n	8008962 <UART_SetConfig+0x2d2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800893c:	693b      	ldr	r3, [r7, #16]
 800893e:	b29b      	uxth	r3, r3
 8008940:	f023 030f 	bic.w	r3, r3, #15
 8008944:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008946:	693b      	ldr	r3, [r7, #16]
 8008948:	085b      	lsrs	r3, r3, #1
 800894a:	b29b      	uxth	r3, r3
 800894c:	f003 0307 	and.w	r3, r3, #7
 8008950:	b29a      	uxth	r2, r3
 8008952:	89fb      	ldrh	r3, [r7, #14]
 8008954:	4313      	orrs	r3, r2
 8008956:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	89fa      	ldrh	r2, [r7, #14]
 800895e:	60da      	str	r2, [r3, #12]
 8008960:	e05c      	b.n	8008a1c <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8008962:	2301      	movs	r3, #1
 8008964:	77bb      	strb	r3, [r7, #30]
 8008966:	e059      	b.n	8008a1c <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008968:	7ffb      	ldrb	r3, [r7, #31]
 800896a:	2b08      	cmp	r3, #8
 800896c:	d835      	bhi.n	80089da <UART_SetConfig+0x34a>
 800896e:	a201      	add	r2, pc, #4	; (adr r2, 8008974 <UART_SetConfig+0x2e4>)
 8008970:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008974:	08008999 	.word	0x08008999
 8008978:	080089a1 	.word	0x080089a1
 800897c:	080089c5 	.word	0x080089c5
 8008980:	080089db 	.word	0x080089db
 8008984:	080089cb 	.word	0x080089cb
 8008988:	080089db 	.word	0x080089db
 800898c:	080089db 	.word	0x080089db
 8008990:	080089db 	.word	0x080089db
 8008994:	080089d3 	.word	0x080089d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008998:	f7fe ff80 	bl	800789c <HAL_RCC_GetPCLK1Freq>
 800899c:	61b8      	str	r0, [r7, #24]
        break;
 800899e:	e021      	b.n	80089e4 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80089a0:	f7fe ff9e 	bl	80078e0 <HAL_RCC_GetPCLK2Freq>
 80089a4:	61b8      	str	r0, [r7, #24]
        break;
 80089a6:	e01d      	b.n	80089e4 <UART_SetConfig+0x354>
 80089a8:	40013800 	.word	0x40013800
 80089ac:	40021000 	.word	0x40021000
 80089b0:	40004400 	.word	0x40004400
 80089b4:	40004800 	.word	0x40004800
 80089b8:	40004c00 	.word	0x40004c00
 80089bc:	40005000 	.word	0x40005000
 80089c0:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80089c4:	4b1b      	ldr	r3, [pc, #108]	; (8008a34 <UART_SetConfig+0x3a4>)
 80089c6:	61bb      	str	r3, [r7, #24]
        break;
 80089c8:	e00c      	b.n	80089e4 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80089ca:	f7fe fef1 	bl	80077b0 <HAL_RCC_GetSysClockFreq>
 80089ce:	61b8      	str	r0, [r7, #24]
        break;
 80089d0:	e008      	b.n	80089e4 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80089d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80089d6:	61bb      	str	r3, [r7, #24]
        break;
 80089d8:	e004      	b.n	80089e4 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 80089da:	2300      	movs	r3, #0
 80089dc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80089de:	2301      	movs	r3, #1
 80089e0:	77bb      	strb	r3, [r7, #30]
        break;
 80089e2:	bf00      	nop
    }

    if (pclk != 0U)
 80089e4:	69bb      	ldr	r3, [r7, #24]
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d018      	beq.n	8008a1c <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	685b      	ldr	r3, [r3, #4]
 80089ee:	085a      	lsrs	r2, r3, #1
 80089f0:	69bb      	ldr	r3, [r7, #24]
 80089f2:	441a      	add	r2, r3
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	685b      	ldr	r3, [r3, #4]
 80089f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80089fc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80089fe:	693b      	ldr	r3, [r7, #16]
 8008a00:	2b0f      	cmp	r3, #15
 8008a02:	d909      	bls.n	8008a18 <UART_SetConfig+0x388>
 8008a04:	693b      	ldr	r3, [r7, #16]
 8008a06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008a0a:	d205      	bcs.n	8008a18 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008a0c:	693b      	ldr	r3, [r7, #16]
 8008a0e:	b29a      	uxth	r2, r3
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	60da      	str	r2, [r3, #12]
 8008a16:	e001      	b.n	8008a1c <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8008a18:	2301      	movs	r3, #1
 8008a1a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	2200      	movs	r2, #0
 8008a20:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	2200      	movs	r2, #0
 8008a26:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8008a28:	7fbb      	ldrb	r3, [r7, #30]
}
 8008a2a:	4618      	mov	r0, r3
 8008a2c:	3720      	adds	r7, #32
 8008a2e:	46bd      	mov	sp, r7
 8008a30:	bd80      	pop	{r7, pc}
 8008a32:	bf00      	nop
 8008a34:	007a1200 	.word	0x007a1200

08008a38 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008a38:	b480      	push	{r7}
 8008a3a:	b083      	sub	sp, #12
 8008a3c:	af00      	add	r7, sp, #0
 8008a3e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a44:	f003 0301 	and.w	r3, r3, #1
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d00a      	beq.n	8008a62 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	685b      	ldr	r3, [r3, #4]
 8008a52:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	430a      	orrs	r2, r1
 8008a60:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a66:	f003 0302 	and.w	r3, r3, #2
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d00a      	beq.n	8008a84 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	685b      	ldr	r3, [r3, #4]
 8008a74:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	430a      	orrs	r2, r1
 8008a82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a88:	f003 0304 	and.w	r3, r3, #4
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d00a      	beq.n	8008aa6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	685b      	ldr	r3, [r3, #4]
 8008a96:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	430a      	orrs	r2, r1
 8008aa4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008aaa:	f003 0308 	and.w	r3, r3, #8
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d00a      	beq.n	8008ac8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	685b      	ldr	r3, [r3, #4]
 8008ab8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	430a      	orrs	r2, r1
 8008ac6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008acc:	f003 0310 	and.w	r3, r3, #16
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d00a      	beq.n	8008aea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	689b      	ldr	r3, [r3, #8]
 8008ada:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	430a      	orrs	r2, r1
 8008ae8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008aee:	f003 0320 	and.w	r3, r3, #32
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d00a      	beq.n	8008b0c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	689b      	ldr	r3, [r3, #8]
 8008afc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	430a      	orrs	r2, r1
 8008b0a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d01a      	beq.n	8008b4e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	685b      	ldr	r3, [r3, #4]
 8008b1e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	430a      	orrs	r2, r1
 8008b2c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b32:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008b36:	d10a      	bne.n	8008b4e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	685b      	ldr	r3, [r3, #4]
 8008b3e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	430a      	orrs	r2, r1
 8008b4c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d00a      	beq.n	8008b70 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	685b      	ldr	r3, [r3, #4]
 8008b60:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	430a      	orrs	r2, r1
 8008b6e:	605a      	str	r2, [r3, #4]
  }
}
 8008b70:	bf00      	nop
 8008b72:	370c      	adds	r7, #12
 8008b74:	46bd      	mov	sp, r7
 8008b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b7a:	4770      	bx	lr

08008b7c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008b7c:	b580      	push	{r7, lr}
 8008b7e:	b098      	sub	sp, #96	; 0x60
 8008b80:	af02      	add	r7, sp, #8
 8008b82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	2200      	movs	r2, #0
 8008b88:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008b8c:	f7fa fe70 	bl	8003870 <HAL_GetTick>
 8008b90:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	f003 0308 	and.w	r3, r3, #8
 8008b9c:	2b08      	cmp	r3, #8
 8008b9e:	d12e      	bne.n	8008bfe <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008ba0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008ba4:	9300      	str	r3, [sp, #0]
 8008ba6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008ba8:	2200      	movs	r2, #0
 8008baa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008bae:	6878      	ldr	r0, [r7, #4]
 8008bb0:	f000 f88c 	bl	8008ccc <UART_WaitOnFlagUntilTimeout>
 8008bb4:	4603      	mov	r3, r0
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d021      	beq.n	8008bfe <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bc2:	e853 3f00 	ldrex	r3, [r3]
 8008bc6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008bc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008bca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008bce:	653b      	str	r3, [r7, #80]	; 0x50
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	461a      	mov	r2, r3
 8008bd6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008bd8:	647b      	str	r3, [r7, #68]	; 0x44
 8008bda:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bdc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008bde:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008be0:	e841 2300 	strex	r3, r2, [r1]
 8008be4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008be6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d1e6      	bne.n	8008bba <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	2220      	movs	r2, #32
 8008bf0:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	2200      	movs	r2, #0
 8008bf6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008bfa:	2303      	movs	r3, #3
 8008bfc:	e062      	b.n	8008cc4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	f003 0304 	and.w	r3, r3, #4
 8008c08:	2b04      	cmp	r3, #4
 8008c0a:	d149      	bne.n	8008ca0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008c0c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008c10:	9300      	str	r3, [sp, #0]
 8008c12:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008c14:	2200      	movs	r2, #0
 8008c16:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008c1a:	6878      	ldr	r0, [r7, #4]
 8008c1c:	f000 f856 	bl	8008ccc <UART_WaitOnFlagUntilTimeout>
 8008c20:	4603      	mov	r3, r0
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d03c      	beq.n	8008ca0 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c2e:	e853 3f00 	ldrex	r3, [r3]
 8008c32:	623b      	str	r3, [r7, #32]
   return(result);
 8008c34:	6a3b      	ldr	r3, [r7, #32]
 8008c36:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008c3a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	461a      	mov	r2, r3
 8008c42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008c44:	633b      	str	r3, [r7, #48]	; 0x30
 8008c46:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c48:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008c4a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008c4c:	e841 2300 	strex	r3, r2, [r1]
 8008c50:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008c52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d1e6      	bne.n	8008c26 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	3308      	adds	r3, #8
 8008c5e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c60:	693b      	ldr	r3, [r7, #16]
 8008c62:	e853 3f00 	ldrex	r3, [r3]
 8008c66:	60fb      	str	r3, [r7, #12]
   return(result);
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	f023 0301 	bic.w	r3, r3, #1
 8008c6e:	64bb      	str	r3, [r7, #72]	; 0x48
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	3308      	adds	r3, #8
 8008c76:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008c78:	61fa      	str	r2, [r7, #28]
 8008c7a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c7c:	69b9      	ldr	r1, [r7, #24]
 8008c7e:	69fa      	ldr	r2, [r7, #28]
 8008c80:	e841 2300 	strex	r3, r2, [r1]
 8008c84:	617b      	str	r3, [r7, #20]
   return(result);
 8008c86:	697b      	ldr	r3, [r7, #20]
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d1e5      	bne.n	8008c58 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	2220      	movs	r2, #32
 8008c90:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	2200      	movs	r2, #0
 8008c98:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008c9c:	2303      	movs	r3, #3
 8008c9e:	e011      	b.n	8008cc4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	2220      	movs	r2, #32
 8008ca4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	2220      	movs	r2, #32
 8008caa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	2200      	movs	r2, #0
 8008cb2:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	2200      	movs	r2, #0
 8008cb8:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	2200      	movs	r2, #0
 8008cbe:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8008cc2:	2300      	movs	r3, #0
}
 8008cc4:	4618      	mov	r0, r3
 8008cc6:	3758      	adds	r7, #88	; 0x58
 8008cc8:	46bd      	mov	sp, r7
 8008cca:	bd80      	pop	{r7, pc}

08008ccc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008ccc:	b580      	push	{r7, lr}
 8008cce:	b084      	sub	sp, #16
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	60f8      	str	r0, [r7, #12]
 8008cd4:	60b9      	str	r1, [r7, #8]
 8008cd6:	603b      	str	r3, [r7, #0]
 8008cd8:	4613      	mov	r3, r2
 8008cda:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008cdc:	e049      	b.n	8008d72 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008cde:	69bb      	ldr	r3, [r7, #24]
 8008ce0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ce4:	d045      	beq.n	8008d72 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008ce6:	f7fa fdc3 	bl	8003870 <HAL_GetTick>
 8008cea:	4602      	mov	r2, r0
 8008cec:	683b      	ldr	r3, [r7, #0]
 8008cee:	1ad3      	subs	r3, r2, r3
 8008cf0:	69ba      	ldr	r2, [r7, #24]
 8008cf2:	429a      	cmp	r2, r3
 8008cf4:	d302      	bcc.n	8008cfc <UART_WaitOnFlagUntilTimeout+0x30>
 8008cf6:	69bb      	ldr	r3, [r7, #24]
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d101      	bne.n	8008d00 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008cfc:	2303      	movs	r3, #3
 8008cfe:	e048      	b.n	8008d92 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	f003 0304 	and.w	r3, r3, #4
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d031      	beq.n	8008d72 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	69db      	ldr	r3, [r3, #28]
 8008d14:	f003 0308 	and.w	r3, r3, #8
 8008d18:	2b08      	cmp	r3, #8
 8008d1a:	d110      	bne.n	8008d3e <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	2208      	movs	r2, #8
 8008d22:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8008d24:	68f8      	ldr	r0, [r7, #12]
 8008d26:	f000 f838 	bl	8008d9a <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	2208      	movs	r2, #8
 8008d2e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	2200      	movs	r2, #0
 8008d36:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8008d3a:	2301      	movs	r3, #1
 8008d3c:	e029      	b.n	8008d92 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	69db      	ldr	r3, [r3, #28]
 8008d44:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008d48:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008d4c:	d111      	bne.n	8008d72 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008d56:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008d58:	68f8      	ldr	r0, [r7, #12]
 8008d5a:	f000 f81e 	bl	8008d9a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	2220      	movs	r2, #32
 8008d62:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	2200      	movs	r2, #0
 8008d6a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8008d6e:	2303      	movs	r3, #3
 8008d70:	e00f      	b.n	8008d92 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	69da      	ldr	r2, [r3, #28]
 8008d78:	68bb      	ldr	r3, [r7, #8]
 8008d7a:	4013      	ands	r3, r2
 8008d7c:	68ba      	ldr	r2, [r7, #8]
 8008d7e:	429a      	cmp	r2, r3
 8008d80:	bf0c      	ite	eq
 8008d82:	2301      	moveq	r3, #1
 8008d84:	2300      	movne	r3, #0
 8008d86:	b2db      	uxtb	r3, r3
 8008d88:	461a      	mov	r2, r3
 8008d8a:	79fb      	ldrb	r3, [r7, #7]
 8008d8c:	429a      	cmp	r2, r3
 8008d8e:	d0a6      	beq.n	8008cde <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008d90:	2300      	movs	r3, #0
}
 8008d92:	4618      	mov	r0, r3
 8008d94:	3710      	adds	r7, #16
 8008d96:	46bd      	mov	sp, r7
 8008d98:	bd80      	pop	{r7, pc}

08008d9a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008d9a:	b480      	push	{r7}
 8008d9c:	b095      	sub	sp, #84	; 0x54
 8008d9e:	af00      	add	r7, sp, #0
 8008da0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008da8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008daa:	e853 3f00 	ldrex	r3, [r3]
 8008dae:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008db0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008db2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008db6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	461a      	mov	r2, r3
 8008dbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008dc0:	643b      	str	r3, [r7, #64]	; 0x40
 8008dc2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dc4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008dc6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008dc8:	e841 2300 	strex	r3, r2, [r1]
 8008dcc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008dce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d1e6      	bne.n	8008da2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	3308      	adds	r3, #8
 8008dda:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ddc:	6a3b      	ldr	r3, [r7, #32]
 8008dde:	e853 3f00 	ldrex	r3, [r3]
 8008de2:	61fb      	str	r3, [r7, #28]
   return(result);
 8008de4:	69fb      	ldr	r3, [r7, #28]
 8008de6:	f023 0301 	bic.w	r3, r3, #1
 8008dea:	64bb      	str	r3, [r7, #72]	; 0x48
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	3308      	adds	r3, #8
 8008df2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008df4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008df6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008df8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008dfa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008dfc:	e841 2300 	strex	r3, r2, [r1]
 8008e00:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d1e5      	bne.n	8008dd4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008e0c:	2b01      	cmp	r3, #1
 8008e0e:	d118      	bne.n	8008e42 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	e853 3f00 	ldrex	r3, [r3]
 8008e1c:	60bb      	str	r3, [r7, #8]
   return(result);
 8008e1e:	68bb      	ldr	r3, [r7, #8]
 8008e20:	f023 0310 	bic.w	r3, r3, #16
 8008e24:	647b      	str	r3, [r7, #68]	; 0x44
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	461a      	mov	r2, r3
 8008e2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008e2e:	61bb      	str	r3, [r7, #24]
 8008e30:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e32:	6979      	ldr	r1, [r7, #20]
 8008e34:	69ba      	ldr	r2, [r7, #24]
 8008e36:	e841 2300 	strex	r3, r2, [r1]
 8008e3a:	613b      	str	r3, [r7, #16]
   return(result);
 8008e3c:	693b      	ldr	r3, [r7, #16]
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d1e6      	bne.n	8008e10 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	2220      	movs	r2, #32
 8008e46:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	2200      	movs	r2, #0
 8008e4e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	2200      	movs	r2, #0
 8008e54:	669a      	str	r2, [r3, #104]	; 0x68
}
 8008e56:	bf00      	nop
 8008e58:	3754      	adds	r7, #84	; 0x54
 8008e5a:	46bd      	mov	sp, r7
 8008e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e60:	4770      	bx	lr

08008e62 <__cvt>:
 8008e62:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008e66:	ec55 4b10 	vmov	r4, r5, d0
 8008e6a:	2d00      	cmp	r5, #0
 8008e6c:	460e      	mov	r6, r1
 8008e6e:	4619      	mov	r1, r3
 8008e70:	462b      	mov	r3, r5
 8008e72:	bfbb      	ittet	lt
 8008e74:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008e78:	461d      	movlt	r5, r3
 8008e7a:	2300      	movge	r3, #0
 8008e7c:	232d      	movlt	r3, #45	; 0x2d
 8008e7e:	700b      	strb	r3, [r1, #0]
 8008e80:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008e82:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008e86:	4691      	mov	r9, r2
 8008e88:	f023 0820 	bic.w	r8, r3, #32
 8008e8c:	bfbc      	itt	lt
 8008e8e:	4622      	movlt	r2, r4
 8008e90:	4614      	movlt	r4, r2
 8008e92:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008e96:	d005      	beq.n	8008ea4 <__cvt+0x42>
 8008e98:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008e9c:	d100      	bne.n	8008ea0 <__cvt+0x3e>
 8008e9e:	3601      	adds	r6, #1
 8008ea0:	2102      	movs	r1, #2
 8008ea2:	e000      	b.n	8008ea6 <__cvt+0x44>
 8008ea4:	2103      	movs	r1, #3
 8008ea6:	ab03      	add	r3, sp, #12
 8008ea8:	9301      	str	r3, [sp, #4]
 8008eaa:	ab02      	add	r3, sp, #8
 8008eac:	9300      	str	r3, [sp, #0]
 8008eae:	ec45 4b10 	vmov	d0, r4, r5
 8008eb2:	4653      	mov	r3, sl
 8008eb4:	4632      	mov	r2, r6
 8008eb6:	f001 f89f 	bl	8009ff8 <_dtoa_r>
 8008eba:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008ebe:	4607      	mov	r7, r0
 8008ec0:	d102      	bne.n	8008ec8 <__cvt+0x66>
 8008ec2:	f019 0f01 	tst.w	r9, #1
 8008ec6:	d022      	beq.n	8008f0e <__cvt+0xac>
 8008ec8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008ecc:	eb07 0906 	add.w	r9, r7, r6
 8008ed0:	d110      	bne.n	8008ef4 <__cvt+0x92>
 8008ed2:	783b      	ldrb	r3, [r7, #0]
 8008ed4:	2b30      	cmp	r3, #48	; 0x30
 8008ed6:	d10a      	bne.n	8008eee <__cvt+0x8c>
 8008ed8:	2200      	movs	r2, #0
 8008eda:	2300      	movs	r3, #0
 8008edc:	4620      	mov	r0, r4
 8008ede:	4629      	mov	r1, r5
 8008ee0:	f7f7 fdf2 	bl	8000ac8 <__aeabi_dcmpeq>
 8008ee4:	b918      	cbnz	r0, 8008eee <__cvt+0x8c>
 8008ee6:	f1c6 0601 	rsb	r6, r6, #1
 8008eea:	f8ca 6000 	str.w	r6, [sl]
 8008eee:	f8da 3000 	ldr.w	r3, [sl]
 8008ef2:	4499      	add	r9, r3
 8008ef4:	2200      	movs	r2, #0
 8008ef6:	2300      	movs	r3, #0
 8008ef8:	4620      	mov	r0, r4
 8008efa:	4629      	mov	r1, r5
 8008efc:	f7f7 fde4 	bl	8000ac8 <__aeabi_dcmpeq>
 8008f00:	b108      	cbz	r0, 8008f06 <__cvt+0xa4>
 8008f02:	f8cd 900c 	str.w	r9, [sp, #12]
 8008f06:	2230      	movs	r2, #48	; 0x30
 8008f08:	9b03      	ldr	r3, [sp, #12]
 8008f0a:	454b      	cmp	r3, r9
 8008f0c:	d307      	bcc.n	8008f1e <__cvt+0xbc>
 8008f0e:	9b03      	ldr	r3, [sp, #12]
 8008f10:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008f12:	1bdb      	subs	r3, r3, r7
 8008f14:	4638      	mov	r0, r7
 8008f16:	6013      	str	r3, [r2, #0]
 8008f18:	b004      	add	sp, #16
 8008f1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f1e:	1c59      	adds	r1, r3, #1
 8008f20:	9103      	str	r1, [sp, #12]
 8008f22:	701a      	strb	r2, [r3, #0]
 8008f24:	e7f0      	b.n	8008f08 <__cvt+0xa6>

08008f26 <__exponent>:
 8008f26:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008f28:	4603      	mov	r3, r0
 8008f2a:	2900      	cmp	r1, #0
 8008f2c:	bfb8      	it	lt
 8008f2e:	4249      	neglt	r1, r1
 8008f30:	f803 2b02 	strb.w	r2, [r3], #2
 8008f34:	bfb4      	ite	lt
 8008f36:	222d      	movlt	r2, #45	; 0x2d
 8008f38:	222b      	movge	r2, #43	; 0x2b
 8008f3a:	2909      	cmp	r1, #9
 8008f3c:	7042      	strb	r2, [r0, #1]
 8008f3e:	dd2a      	ble.n	8008f96 <__exponent+0x70>
 8008f40:	f10d 0207 	add.w	r2, sp, #7
 8008f44:	4617      	mov	r7, r2
 8008f46:	260a      	movs	r6, #10
 8008f48:	4694      	mov	ip, r2
 8008f4a:	fb91 f5f6 	sdiv	r5, r1, r6
 8008f4e:	fb06 1415 	mls	r4, r6, r5, r1
 8008f52:	3430      	adds	r4, #48	; 0x30
 8008f54:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8008f58:	460c      	mov	r4, r1
 8008f5a:	2c63      	cmp	r4, #99	; 0x63
 8008f5c:	f102 32ff 	add.w	r2, r2, #4294967295
 8008f60:	4629      	mov	r1, r5
 8008f62:	dcf1      	bgt.n	8008f48 <__exponent+0x22>
 8008f64:	3130      	adds	r1, #48	; 0x30
 8008f66:	f1ac 0402 	sub.w	r4, ip, #2
 8008f6a:	f802 1c01 	strb.w	r1, [r2, #-1]
 8008f6e:	1c41      	adds	r1, r0, #1
 8008f70:	4622      	mov	r2, r4
 8008f72:	42ba      	cmp	r2, r7
 8008f74:	d30a      	bcc.n	8008f8c <__exponent+0x66>
 8008f76:	f10d 0209 	add.w	r2, sp, #9
 8008f7a:	eba2 020c 	sub.w	r2, r2, ip
 8008f7e:	42bc      	cmp	r4, r7
 8008f80:	bf88      	it	hi
 8008f82:	2200      	movhi	r2, #0
 8008f84:	4413      	add	r3, r2
 8008f86:	1a18      	subs	r0, r3, r0
 8008f88:	b003      	add	sp, #12
 8008f8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008f8c:	f812 5b01 	ldrb.w	r5, [r2], #1
 8008f90:	f801 5f01 	strb.w	r5, [r1, #1]!
 8008f94:	e7ed      	b.n	8008f72 <__exponent+0x4c>
 8008f96:	2330      	movs	r3, #48	; 0x30
 8008f98:	3130      	adds	r1, #48	; 0x30
 8008f9a:	7083      	strb	r3, [r0, #2]
 8008f9c:	70c1      	strb	r1, [r0, #3]
 8008f9e:	1d03      	adds	r3, r0, #4
 8008fa0:	e7f1      	b.n	8008f86 <__exponent+0x60>
	...

08008fa4 <_printf_float>:
 8008fa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fa8:	ed2d 8b02 	vpush	{d8}
 8008fac:	b08d      	sub	sp, #52	; 0x34
 8008fae:	460c      	mov	r4, r1
 8008fb0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008fb4:	4616      	mov	r6, r2
 8008fb6:	461f      	mov	r7, r3
 8008fb8:	4605      	mov	r5, r0
 8008fba:	f000 ff19 	bl	8009df0 <_localeconv_r>
 8008fbe:	f8d0 a000 	ldr.w	sl, [r0]
 8008fc2:	4650      	mov	r0, sl
 8008fc4:	f7f7 f954 	bl	8000270 <strlen>
 8008fc8:	2300      	movs	r3, #0
 8008fca:	930a      	str	r3, [sp, #40]	; 0x28
 8008fcc:	6823      	ldr	r3, [r4, #0]
 8008fce:	9305      	str	r3, [sp, #20]
 8008fd0:	f8d8 3000 	ldr.w	r3, [r8]
 8008fd4:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008fd8:	3307      	adds	r3, #7
 8008fda:	f023 0307 	bic.w	r3, r3, #7
 8008fde:	f103 0208 	add.w	r2, r3, #8
 8008fe2:	f8c8 2000 	str.w	r2, [r8]
 8008fe6:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008fea:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008fee:	9307      	str	r3, [sp, #28]
 8008ff0:	f8cd 8018 	str.w	r8, [sp, #24]
 8008ff4:	ee08 0a10 	vmov	s16, r0
 8008ff8:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8008ffc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009000:	4b9e      	ldr	r3, [pc, #632]	; (800927c <_printf_float+0x2d8>)
 8009002:	f04f 32ff 	mov.w	r2, #4294967295
 8009006:	f7f7 fd91 	bl	8000b2c <__aeabi_dcmpun>
 800900a:	bb88      	cbnz	r0, 8009070 <_printf_float+0xcc>
 800900c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009010:	4b9a      	ldr	r3, [pc, #616]	; (800927c <_printf_float+0x2d8>)
 8009012:	f04f 32ff 	mov.w	r2, #4294967295
 8009016:	f7f7 fd6b 	bl	8000af0 <__aeabi_dcmple>
 800901a:	bb48      	cbnz	r0, 8009070 <_printf_float+0xcc>
 800901c:	2200      	movs	r2, #0
 800901e:	2300      	movs	r3, #0
 8009020:	4640      	mov	r0, r8
 8009022:	4649      	mov	r1, r9
 8009024:	f7f7 fd5a 	bl	8000adc <__aeabi_dcmplt>
 8009028:	b110      	cbz	r0, 8009030 <_printf_float+0x8c>
 800902a:	232d      	movs	r3, #45	; 0x2d
 800902c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009030:	4a93      	ldr	r2, [pc, #588]	; (8009280 <_printf_float+0x2dc>)
 8009032:	4b94      	ldr	r3, [pc, #592]	; (8009284 <_printf_float+0x2e0>)
 8009034:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009038:	bf94      	ite	ls
 800903a:	4690      	movls	r8, r2
 800903c:	4698      	movhi	r8, r3
 800903e:	2303      	movs	r3, #3
 8009040:	6123      	str	r3, [r4, #16]
 8009042:	9b05      	ldr	r3, [sp, #20]
 8009044:	f023 0304 	bic.w	r3, r3, #4
 8009048:	6023      	str	r3, [r4, #0]
 800904a:	f04f 0900 	mov.w	r9, #0
 800904e:	9700      	str	r7, [sp, #0]
 8009050:	4633      	mov	r3, r6
 8009052:	aa0b      	add	r2, sp, #44	; 0x2c
 8009054:	4621      	mov	r1, r4
 8009056:	4628      	mov	r0, r5
 8009058:	f000 f9da 	bl	8009410 <_printf_common>
 800905c:	3001      	adds	r0, #1
 800905e:	f040 8090 	bne.w	8009182 <_printf_float+0x1de>
 8009062:	f04f 30ff 	mov.w	r0, #4294967295
 8009066:	b00d      	add	sp, #52	; 0x34
 8009068:	ecbd 8b02 	vpop	{d8}
 800906c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009070:	4642      	mov	r2, r8
 8009072:	464b      	mov	r3, r9
 8009074:	4640      	mov	r0, r8
 8009076:	4649      	mov	r1, r9
 8009078:	f7f7 fd58 	bl	8000b2c <__aeabi_dcmpun>
 800907c:	b140      	cbz	r0, 8009090 <_printf_float+0xec>
 800907e:	464b      	mov	r3, r9
 8009080:	2b00      	cmp	r3, #0
 8009082:	bfbc      	itt	lt
 8009084:	232d      	movlt	r3, #45	; 0x2d
 8009086:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800908a:	4a7f      	ldr	r2, [pc, #508]	; (8009288 <_printf_float+0x2e4>)
 800908c:	4b7f      	ldr	r3, [pc, #508]	; (800928c <_printf_float+0x2e8>)
 800908e:	e7d1      	b.n	8009034 <_printf_float+0x90>
 8009090:	6863      	ldr	r3, [r4, #4]
 8009092:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8009096:	9206      	str	r2, [sp, #24]
 8009098:	1c5a      	adds	r2, r3, #1
 800909a:	d13f      	bne.n	800911c <_printf_float+0x178>
 800909c:	2306      	movs	r3, #6
 800909e:	6063      	str	r3, [r4, #4]
 80090a0:	9b05      	ldr	r3, [sp, #20]
 80090a2:	6861      	ldr	r1, [r4, #4]
 80090a4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80090a8:	2300      	movs	r3, #0
 80090aa:	9303      	str	r3, [sp, #12]
 80090ac:	ab0a      	add	r3, sp, #40	; 0x28
 80090ae:	e9cd b301 	strd	fp, r3, [sp, #4]
 80090b2:	ab09      	add	r3, sp, #36	; 0x24
 80090b4:	ec49 8b10 	vmov	d0, r8, r9
 80090b8:	9300      	str	r3, [sp, #0]
 80090ba:	6022      	str	r2, [r4, #0]
 80090bc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80090c0:	4628      	mov	r0, r5
 80090c2:	f7ff fece 	bl	8008e62 <__cvt>
 80090c6:	9b06      	ldr	r3, [sp, #24]
 80090c8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80090ca:	2b47      	cmp	r3, #71	; 0x47
 80090cc:	4680      	mov	r8, r0
 80090ce:	d108      	bne.n	80090e2 <_printf_float+0x13e>
 80090d0:	1cc8      	adds	r0, r1, #3
 80090d2:	db02      	blt.n	80090da <_printf_float+0x136>
 80090d4:	6863      	ldr	r3, [r4, #4]
 80090d6:	4299      	cmp	r1, r3
 80090d8:	dd41      	ble.n	800915e <_printf_float+0x1ba>
 80090da:	f1ab 0302 	sub.w	r3, fp, #2
 80090de:	fa5f fb83 	uxtb.w	fp, r3
 80090e2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80090e6:	d820      	bhi.n	800912a <_printf_float+0x186>
 80090e8:	3901      	subs	r1, #1
 80090ea:	465a      	mov	r2, fp
 80090ec:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80090f0:	9109      	str	r1, [sp, #36]	; 0x24
 80090f2:	f7ff ff18 	bl	8008f26 <__exponent>
 80090f6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80090f8:	1813      	adds	r3, r2, r0
 80090fa:	2a01      	cmp	r2, #1
 80090fc:	4681      	mov	r9, r0
 80090fe:	6123      	str	r3, [r4, #16]
 8009100:	dc02      	bgt.n	8009108 <_printf_float+0x164>
 8009102:	6822      	ldr	r2, [r4, #0]
 8009104:	07d2      	lsls	r2, r2, #31
 8009106:	d501      	bpl.n	800910c <_printf_float+0x168>
 8009108:	3301      	adds	r3, #1
 800910a:	6123      	str	r3, [r4, #16]
 800910c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009110:	2b00      	cmp	r3, #0
 8009112:	d09c      	beq.n	800904e <_printf_float+0xaa>
 8009114:	232d      	movs	r3, #45	; 0x2d
 8009116:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800911a:	e798      	b.n	800904e <_printf_float+0xaa>
 800911c:	9a06      	ldr	r2, [sp, #24]
 800911e:	2a47      	cmp	r2, #71	; 0x47
 8009120:	d1be      	bne.n	80090a0 <_printf_float+0xfc>
 8009122:	2b00      	cmp	r3, #0
 8009124:	d1bc      	bne.n	80090a0 <_printf_float+0xfc>
 8009126:	2301      	movs	r3, #1
 8009128:	e7b9      	b.n	800909e <_printf_float+0xfa>
 800912a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800912e:	d118      	bne.n	8009162 <_printf_float+0x1be>
 8009130:	2900      	cmp	r1, #0
 8009132:	6863      	ldr	r3, [r4, #4]
 8009134:	dd0b      	ble.n	800914e <_printf_float+0x1aa>
 8009136:	6121      	str	r1, [r4, #16]
 8009138:	b913      	cbnz	r3, 8009140 <_printf_float+0x19c>
 800913a:	6822      	ldr	r2, [r4, #0]
 800913c:	07d0      	lsls	r0, r2, #31
 800913e:	d502      	bpl.n	8009146 <_printf_float+0x1a2>
 8009140:	3301      	adds	r3, #1
 8009142:	440b      	add	r3, r1
 8009144:	6123      	str	r3, [r4, #16]
 8009146:	65a1      	str	r1, [r4, #88]	; 0x58
 8009148:	f04f 0900 	mov.w	r9, #0
 800914c:	e7de      	b.n	800910c <_printf_float+0x168>
 800914e:	b913      	cbnz	r3, 8009156 <_printf_float+0x1b2>
 8009150:	6822      	ldr	r2, [r4, #0]
 8009152:	07d2      	lsls	r2, r2, #31
 8009154:	d501      	bpl.n	800915a <_printf_float+0x1b6>
 8009156:	3302      	adds	r3, #2
 8009158:	e7f4      	b.n	8009144 <_printf_float+0x1a0>
 800915a:	2301      	movs	r3, #1
 800915c:	e7f2      	b.n	8009144 <_printf_float+0x1a0>
 800915e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8009162:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009164:	4299      	cmp	r1, r3
 8009166:	db05      	blt.n	8009174 <_printf_float+0x1d0>
 8009168:	6823      	ldr	r3, [r4, #0]
 800916a:	6121      	str	r1, [r4, #16]
 800916c:	07d8      	lsls	r0, r3, #31
 800916e:	d5ea      	bpl.n	8009146 <_printf_float+0x1a2>
 8009170:	1c4b      	adds	r3, r1, #1
 8009172:	e7e7      	b.n	8009144 <_printf_float+0x1a0>
 8009174:	2900      	cmp	r1, #0
 8009176:	bfd4      	ite	le
 8009178:	f1c1 0202 	rsble	r2, r1, #2
 800917c:	2201      	movgt	r2, #1
 800917e:	4413      	add	r3, r2
 8009180:	e7e0      	b.n	8009144 <_printf_float+0x1a0>
 8009182:	6823      	ldr	r3, [r4, #0]
 8009184:	055a      	lsls	r2, r3, #21
 8009186:	d407      	bmi.n	8009198 <_printf_float+0x1f4>
 8009188:	6923      	ldr	r3, [r4, #16]
 800918a:	4642      	mov	r2, r8
 800918c:	4631      	mov	r1, r6
 800918e:	4628      	mov	r0, r5
 8009190:	47b8      	blx	r7
 8009192:	3001      	adds	r0, #1
 8009194:	d12c      	bne.n	80091f0 <_printf_float+0x24c>
 8009196:	e764      	b.n	8009062 <_printf_float+0xbe>
 8009198:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800919c:	f240 80e0 	bls.w	8009360 <_printf_float+0x3bc>
 80091a0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80091a4:	2200      	movs	r2, #0
 80091a6:	2300      	movs	r3, #0
 80091a8:	f7f7 fc8e 	bl	8000ac8 <__aeabi_dcmpeq>
 80091ac:	2800      	cmp	r0, #0
 80091ae:	d034      	beq.n	800921a <_printf_float+0x276>
 80091b0:	4a37      	ldr	r2, [pc, #220]	; (8009290 <_printf_float+0x2ec>)
 80091b2:	2301      	movs	r3, #1
 80091b4:	4631      	mov	r1, r6
 80091b6:	4628      	mov	r0, r5
 80091b8:	47b8      	blx	r7
 80091ba:	3001      	adds	r0, #1
 80091bc:	f43f af51 	beq.w	8009062 <_printf_float+0xbe>
 80091c0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80091c4:	429a      	cmp	r2, r3
 80091c6:	db02      	blt.n	80091ce <_printf_float+0x22a>
 80091c8:	6823      	ldr	r3, [r4, #0]
 80091ca:	07d8      	lsls	r0, r3, #31
 80091cc:	d510      	bpl.n	80091f0 <_printf_float+0x24c>
 80091ce:	ee18 3a10 	vmov	r3, s16
 80091d2:	4652      	mov	r2, sl
 80091d4:	4631      	mov	r1, r6
 80091d6:	4628      	mov	r0, r5
 80091d8:	47b8      	blx	r7
 80091da:	3001      	adds	r0, #1
 80091dc:	f43f af41 	beq.w	8009062 <_printf_float+0xbe>
 80091e0:	f04f 0800 	mov.w	r8, #0
 80091e4:	f104 091a 	add.w	r9, r4, #26
 80091e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80091ea:	3b01      	subs	r3, #1
 80091ec:	4543      	cmp	r3, r8
 80091ee:	dc09      	bgt.n	8009204 <_printf_float+0x260>
 80091f0:	6823      	ldr	r3, [r4, #0]
 80091f2:	079b      	lsls	r3, r3, #30
 80091f4:	f100 8107 	bmi.w	8009406 <_printf_float+0x462>
 80091f8:	68e0      	ldr	r0, [r4, #12]
 80091fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80091fc:	4298      	cmp	r0, r3
 80091fe:	bfb8      	it	lt
 8009200:	4618      	movlt	r0, r3
 8009202:	e730      	b.n	8009066 <_printf_float+0xc2>
 8009204:	2301      	movs	r3, #1
 8009206:	464a      	mov	r2, r9
 8009208:	4631      	mov	r1, r6
 800920a:	4628      	mov	r0, r5
 800920c:	47b8      	blx	r7
 800920e:	3001      	adds	r0, #1
 8009210:	f43f af27 	beq.w	8009062 <_printf_float+0xbe>
 8009214:	f108 0801 	add.w	r8, r8, #1
 8009218:	e7e6      	b.n	80091e8 <_printf_float+0x244>
 800921a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800921c:	2b00      	cmp	r3, #0
 800921e:	dc39      	bgt.n	8009294 <_printf_float+0x2f0>
 8009220:	4a1b      	ldr	r2, [pc, #108]	; (8009290 <_printf_float+0x2ec>)
 8009222:	2301      	movs	r3, #1
 8009224:	4631      	mov	r1, r6
 8009226:	4628      	mov	r0, r5
 8009228:	47b8      	blx	r7
 800922a:	3001      	adds	r0, #1
 800922c:	f43f af19 	beq.w	8009062 <_printf_float+0xbe>
 8009230:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8009234:	4313      	orrs	r3, r2
 8009236:	d102      	bne.n	800923e <_printf_float+0x29a>
 8009238:	6823      	ldr	r3, [r4, #0]
 800923a:	07d9      	lsls	r1, r3, #31
 800923c:	d5d8      	bpl.n	80091f0 <_printf_float+0x24c>
 800923e:	ee18 3a10 	vmov	r3, s16
 8009242:	4652      	mov	r2, sl
 8009244:	4631      	mov	r1, r6
 8009246:	4628      	mov	r0, r5
 8009248:	47b8      	blx	r7
 800924a:	3001      	adds	r0, #1
 800924c:	f43f af09 	beq.w	8009062 <_printf_float+0xbe>
 8009250:	f04f 0900 	mov.w	r9, #0
 8009254:	f104 0a1a 	add.w	sl, r4, #26
 8009258:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800925a:	425b      	negs	r3, r3
 800925c:	454b      	cmp	r3, r9
 800925e:	dc01      	bgt.n	8009264 <_printf_float+0x2c0>
 8009260:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009262:	e792      	b.n	800918a <_printf_float+0x1e6>
 8009264:	2301      	movs	r3, #1
 8009266:	4652      	mov	r2, sl
 8009268:	4631      	mov	r1, r6
 800926a:	4628      	mov	r0, r5
 800926c:	47b8      	blx	r7
 800926e:	3001      	adds	r0, #1
 8009270:	f43f aef7 	beq.w	8009062 <_printf_float+0xbe>
 8009274:	f109 0901 	add.w	r9, r9, #1
 8009278:	e7ee      	b.n	8009258 <_printf_float+0x2b4>
 800927a:	bf00      	nop
 800927c:	7fefffff 	.word	0x7fefffff
 8009280:	0800e2cc 	.word	0x0800e2cc
 8009284:	0800e2d0 	.word	0x0800e2d0
 8009288:	0800e2d4 	.word	0x0800e2d4
 800928c:	0800e2d8 	.word	0x0800e2d8
 8009290:	0800e2dc 	.word	0x0800e2dc
 8009294:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009296:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009298:	429a      	cmp	r2, r3
 800929a:	bfa8      	it	ge
 800929c:	461a      	movge	r2, r3
 800929e:	2a00      	cmp	r2, #0
 80092a0:	4691      	mov	r9, r2
 80092a2:	dc37      	bgt.n	8009314 <_printf_float+0x370>
 80092a4:	f04f 0b00 	mov.w	fp, #0
 80092a8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80092ac:	f104 021a 	add.w	r2, r4, #26
 80092b0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80092b2:	9305      	str	r3, [sp, #20]
 80092b4:	eba3 0309 	sub.w	r3, r3, r9
 80092b8:	455b      	cmp	r3, fp
 80092ba:	dc33      	bgt.n	8009324 <_printf_float+0x380>
 80092bc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80092c0:	429a      	cmp	r2, r3
 80092c2:	db3b      	blt.n	800933c <_printf_float+0x398>
 80092c4:	6823      	ldr	r3, [r4, #0]
 80092c6:	07da      	lsls	r2, r3, #31
 80092c8:	d438      	bmi.n	800933c <_printf_float+0x398>
 80092ca:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80092ce:	eba2 0903 	sub.w	r9, r2, r3
 80092d2:	9b05      	ldr	r3, [sp, #20]
 80092d4:	1ad2      	subs	r2, r2, r3
 80092d6:	4591      	cmp	r9, r2
 80092d8:	bfa8      	it	ge
 80092da:	4691      	movge	r9, r2
 80092dc:	f1b9 0f00 	cmp.w	r9, #0
 80092e0:	dc35      	bgt.n	800934e <_printf_float+0x3aa>
 80092e2:	f04f 0800 	mov.w	r8, #0
 80092e6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80092ea:	f104 0a1a 	add.w	sl, r4, #26
 80092ee:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80092f2:	1a9b      	subs	r3, r3, r2
 80092f4:	eba3 0309 	sub.w	r3, r3, r9
 80092f8:	4543      	cmp	r3, r8
 80092fa:	f77f af79 	ble.w	80091f0 <_printf_float+0x24c>
 80092fe:	2301      	movs	r3, #1
 8009300:	4652      	mov	r2, sl
 8009302:	4631      	mov	r1, r6
 8009304:	4628      	mov	r0, r5
 8009306:	47b8      	blx	r7
 8009308:	3001      	adds	r0, #1
 800930a:	f43f aeaa 	beq.w	8009062 <_printf_float+0xbe>
 800930e:	f108 0801 	add.w	r8, r8, #1
 8009312:	e7ec      	b.n	80092ee <_printf_float+0x34a>
 8009314:	4613      	mov	r3, r2
 8009316:	4631      	mov	r1, r6
 8009318:	4642      	mov	r2, r8
 800931a:	4628      	mov	r0, r5
 800931c:	47b8      	blx	r7
 800931e:	3001      	adds	r0, #1
 8009320:	d1c0      	bne.n	80092a4 <_printf_float+0x300>
 8009322:	e69e      	b.n	8009062 <_printf_float+0xbe>
 8009324:	2301      	movs	r3, #1
 8009326:	4631      	mov	r1, r6
 8009328:	4628      	mov	r0, r5
 800932a:	9205      	str	r2, [sp, #20]
 800932c:	47b8      	blx	r7
 800932e:	3001      	adds	r0, #1
 8009330:	f43f ae97 	beq.w	8009062 <_printf_float+0xbe>
 8009334:	9a05      	ldr	r2, [sp, #20]
 8009336:	f10b 0b01 	add.w	fp, fp, #1
 800933a:	e7b9      	b.n	80092b0 <_printf_float+0x30c>
 800933c:	ee18 3a10 	vmov	r3, s16
 8009340:	4652      	mov	r2, sl
 8009342:	4631      	mov	r1, r6
 8009344:	4628      	mov	r0, r5
 8009346:	47b8      	blx	r7
 8009348:	3001      	adds	r0, #1
 800934a:	d1be      	bne.n	80092ca <_printf_float+0x326>
 800934c:	e689      	b.n	8009062 <_printf_float+0xbe>
 800934e:	9a05      	ldr	r2, [sp, #20]
 8009350:	464b      	mov	r3, r9
 8009352:	4442      	add	r2, r8
 8009354:	4631      	mov	r1, r6
 8009356:	4628      	mov	r0, r5
 8009358:	47b8      	blx	r7
 800935a:	3001      	adds	r0, #1
 800935c:	d1c1      	bne.n	80092e2 <_printf_float+0x33e>
 800935e:	e680      	b.n	8009062 <_printf_float+0xbe>
 8009360:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009362:	2a01      	cmp	r2, #1
 8009364:	dc01      	bgt.n	800936a <_printf_float+0x3c6>
 8009366:	07db      	lsls	r3, r3, #31
 8009368:	d53a      	bpl.n	80093e0 <_printf_float+0x43c>
 800936a:	2301      	movs	r3, #1
 800936c:	4642      	mov	r2, r8
 800936e:	4631      	mov	r1, r6
 8009370:	4628      	mov	r0, r5
 8009372:	47b8      	blx	r7
 8009374:	3001      	adds	r0, #1
 8009376:	f43f ae74 	beq.w	8009062 <_printf_float+0xbe>
 800937a:	ee18 3a10 	vmov	r3, s16
 800937e:	4652      	mov	r2, sl
 8009380:	4631      	mov	r1, r6
 8009382:	4628      	mov	r0, r5
 8009384:	47b8      	blx	r7
 8009386:	3001      	adds	r0, #1
 8009388:	f43f ae6b 	beq.w	8009062 <_printf_float+0xbe>
 800938c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009390:	2200      	movs	r2, #0
 8009392:	2300      	movs	r3, #0
 8009394:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8009398:	f7f7 fb96 	bl	8000ac8 <__aeabi_dcmpeq>
 800939c:	b9d8      	cbnz	r0, 80093d6 <_printf_float+0x432>
 800939e:	f10a 33ff 	add.w	r3, sl, #4294967295
 80093a2:	f108 0201 	add.w	r2, r8, #1
 80093a6:	4631      	mov	r1, r6
 80093a8:	4628      	mov	r0, r5
 80093aa:	47b8      	blx	r7
 80093ac:	3001      	adds	r0, #1
 80093ae:	d10e      	bne.n	80093ce <_printf_float+0x42a>
 80093b0:	e657      	b.n	8009062 <_printf_float+0xbe>
 80093b2:	2301      	movs	r3, #1
 80093b4:	4652      	mov	r2, sl
 80093b6:	4631      	mov	r1, r6
 80093b8:	4628      	mov	r0, r5
 80093ba:	47b8      	blx	r7
 80093bc:	3001      	adds	r0, #1
 80093be:	f43f ae50 	beq.w	8009062 <_printf_float+0xbe>
 80093c2:	f108 0801 	add.w	r8, r8, #1
 80093c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80093c8:	3b01      	subs	r3, #1
 80093ca:	4543      	cmp	r3, r8
 80093cc:	dcf1      	bgt.n	80093b2 <_printf_float+0x40e>
 80093ce:	464b      	mov	r3, r9
 80093d0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80093d4:	e6da      	b.n	800918c <_printf_float+0x1e8>
 80093d6:	f04f 0800 	mov.w	r8, #0
 80093da:	f104 0a1a 	add.w	sl, r4, #26
 80093de:	e7f2      	b.n	80093c6 <_printf_float+0x422>
 80093e0:	2301      	movs	r3, #1
 80093e2:	4642      	mov	r2, r8
 80093e4:	e7df      	b.n	80093a6 <_printf_float+0x402>
 80093e6:	2301      	movs	r3, #1
 80093e8:	464a      	mov	r2, r9
 80093ea:	4631      	mov	r1, r6
 80093ec:	4628      	mov	r0, r5
 80093ee:	47b8      	blx	r7
 80093f0:	3001      	adds	r0, #1
 80093f2:	f43f ae36 	beq.w	8009062 <_printf_float+0xbe>
 80093f6:	f108 0801 	add.w	r8, r8, #1
 80093fa:	68e3      	ldr	r3, [r4, #12]
 80093fc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80093fe:	1a5b      	subs	r3, r3, r1
 8009400:	4543      	cmp	r3, r8
 8009402:	dcf0      	bgt.n	80093e6 <_printf_float+0x442>
 8009404:	e6f8      	b.n	80091f8 <_printf_float+0x254>
 8009406:	f04f 0800 	mov.w	r8, #0
 800940a:	f104 0919 	add.w	r9, r4, #25
 800940e:	e7f4      	b.n	80093fa <_printf_float+0x456>

08009410 <_printf_common>:
 8009410:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009414:	4616      	mov	r6, r2
 8009416:	4699      	mov	r9, r3
 8009418:	688a      	ldr	r2, [r1, #8]
 800941a:	690b      	ldr	r3, [r1, #16]
 800941c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009420:	4293      	cmp	r3, r2
 8009422:	bfb8      	it	lt
 8009424:	4613      	movlt	r3, r2
 8009426:	6033      	str	r3, [r6, #0]
 8009428:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800942c:	4607      	mov	r7, r0
 800942e:	460c      	mov	r4, r1
 8009430:	b10a      	cbz	r2, 8009436 <_printf_common+0x26>
 8009432:	3301      	adds	r3, #1
 8009434:	6033      	str	r3, [r6, #0]
 8009436:	6823      	ldr	r3, [r4, #0]
 8009438:	0699      	lsls	r1, r3, #26
 800943a:	bf42      	ittt	mi
 800943c:	6833      	ldrmi	r3, [r6, #0]
 800943e:	3302      	addmi	r3, #2
 8009440:	6033      	strmi	r3, [r6, #0]
 8009442:	6825      	ldr	r5, [r4, #0]
 8009444:	f015 0506 	ands.w	r5, r5, #6
 8009448:	d106      	bne.n	8009458 <_printf_common+0x48>
 800944a:	f104 0a19 	add.w	sl, r4, #25
 800944e:	68e3      	ldr	r3, [r4, #12]
 8009450:	6832      	ldr	r2, [r6, #0]
 8009452:	1a9b      	subs	r3, r3, r2
 8009454:	42ab      	cmp	r3, r5
 8009456:	dc26      	bgt.n	80094a6 <_printf_common+0x96>
 8009458:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800945c:	1e13      	subs	r3, r2, #0
 800945e:	6822      	ldr	r2, [r4, #0]
 8009460:	bf18      	it	ne
 8009462:	2301      	movne	r3, #1
 8009464:	0692      	lsls	r2, r2, #26
 8009466:	d42b      	bmi.n	80094c0 <_printf_common+0xb0>
 8009468:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800946c:	4649      	mov	r1, r9
 800946e:	4638      	mov	r0, r7
 8009470:	47c0      	blx	r8
 8009472:	3001      	adds	r0, #1
 8009474:	d01e      	beq.n	80094b4 <_printf_common+0xa4>
 8009476:	6823      	ldr	r3, [r4, #0]
 8009478:	6922      	ldr	r2, [r4, #16]
 800947a:	f003 0306 	and.w	r3, r3, #6
 800947e:	2b04      	cmp	r3, #4
 8009480:	bf02      	ittt	eq
 8009482:	68e5      	ldreq	r5, [r4, #12]
 8009484:	6833      	ldreq	r3, [r6, #0]
 8009486:	1aed      	subeq	r5, r5, r3
 8009488:	68a3      	ldr	r3, [r4, #8]
 800948a:	bf0c      	ite	eq
 800948c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009490:	2500      	movne	r5, #0
 8009492:	4293      	cmp	r3, r2
 8009494:	bfc4      	itt	gt
 8009496:	1a9b      	subgt	r3, r3, r2
 8009498:	18ed      	addgt	r5, r5, r3
 800949a:	2600      	movs	r6, #0
 800949c:	341a      	adds	r4, #26
 800949e:	42b5      	cmp	r5, r6
 80094a0:	d11a      	bne.n	80094d8 <_printf_common+0xc8>
 80094a2:	2000      	movs	r0, #0
 80094a4:	e008      	b.n	80094b8 <_printf_common+0xa8>
 80094a6:	2301      	movs	r3, #1
 80094a8:	4652      	mov	r2, sl
 80094aa:	4649      	mov	r1, r9
 80094ac:	4638      	mov	r0, r7
 80094ae:	47c0      	blx	r8
 80094b0:	3001      	adds	r0, #1
 80094b2:	d103      	bne.n	80094bc <_printf_common+0xac>
 80094b4:	f04f 30ff 	mov.w	r0, #4294967295
 80094b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80094bc:	3501      	adds	r5, #1
 80094be:	e7c6      	b.n	800944e <_printf_common+0x3e>
 80094c0:	18e1      	adds	r1, r4, r3
 80094c2:	1c5a      	adds	r2, r3, #1
 80094c4:	2030      	movs	r0, #48	; 0x30
 80094c6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80094ca:	4422      	add	r2, r4
 80094cc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80094d0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80094d4:	3302      	adds	r3, #2
 80094d6:	e7c7      	b.n	8009468 <_printf_common+0x58>
 80094d8:	2301      	movs	r3, #1
 80094da:	4622      	mov	r2, r4
 80094dc:	4649      	mov	r1, r9
 80094de:	4638      	mov	r0, r7
 80094e0:	47c0      	blx	r8
 80094e2:	3001      	adds	r0, #1
 80094e4:	d0e6      	beq.n	80094b4 <_printf_common+0xa4>
 80094e6:	3601      	adds	r6, #1
 80094e8:	e7d9      	b.n	800949e <_printf_common+0x8e>
	...

080094ec <_printf_i>:
 80094ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80094f0:	7e0f      	ldrb	r7, [r1, #24]
 80094f2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80094f4:	2f78      	cmp	r7, #120	; 0x78
 80094f6:	4691      	mov	r9, r2
 80094f8:	4680      	mov	r8, r0
 80094fa:	460c      	mov	r4, r1
 80094fc:	469a      	mov	sl, r3
 80094fe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009502:	d807      	bhi.n	8009514 <_printf_i+0x28>
 8009504:	2f62      	cmp	r7, #98	; 0x62
 8009506:	d80a      	bhi.n	800951e <_printf_i+0x32>
 8009508:	2f00      	cmp	r7, #0
 800950a:	f000 80d4 	beq.w	80096b6 <_printf_i+0x1ca>
 800950e:	2f58      	cmp	r7, #88	; 0x58
 8009510:	f000 80c0 	beq.w	8009694 <_printf_i+0x1a8>
 8009514:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009518:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800951c:	e03a      	b.n	8009594 <_printf_i+0xa8>
 800951e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009522:	2b15      	cmp	r3, #21
 8009524:	d8f6      	bhi.n	8009514 <_printf_i+0x28>
 8009526:	a101      	add	r1, pc, #4	; (adr r1, 800952c <_printf_i+0x40>)
 8009528:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800952c:	08009585 	.word	0x08009585
 8009530:	08009599 	.word	0x08009599
 8009534:	08009515 	.word	0x08009515
 8009538:	08009515 	.word	0x08009515
 800953c:	08009515 	.word	0x08009515
 8009540:	08009515 	.word	0x08009515
 8009544:	08009599 	.word	0x08009599
 8009548:	08009515 	.word	0x08009515
 800954c:	08009515 	.word	0x08009515
 8009550:	08009515 	.word	0x08009515
 8009554:	08009515 	.word	0x08009515
 8009558:	0800969d 	.word	0x0800969d
 800955c:	080095c5 	.word	0x080095c5
 8009560:	08009657 	.word	0x08009657
 8009564:	08009515 	.word	0x08009515
 8009568:	08009515 	.word	0x08009515
 800956c:	080096bf 	.word	0x080096bf
 8009570:	08009515 	.word	0x08009515
 8009574:	080095c5 	.word	0x080095c5
 8009578:	08009515 	.word	0x08009515
 800957c:	08009515 	.word	0x08009515
 8009580:	0800965f 	.word	0x0800965f
 8009584:	682b      	ldr	r3, [r5, #0]
 8009586:	1d1a      	adds	r2, r3, #4
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	602a      	str	r2, [r5, #0]
 800958c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009590:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009594:	2301      	movs	r3, #1
 8009596:	e09f      	b.n	80096d8 <_printf_i+0x1ec>
 8009598:	6820      	ldr	r0, [r4, #0]
 800959a:	682b      	ldr	r3, [r5, #0]
 800959c:	0607      	lsls	r7, r0, #24
 800959e:	f103 0104 	add.w	r1, r3, #4
 80095a2:	6029      	str	r1, [r5, #0]
 80095a4:	d501      	bpl.n	80095aa <_printf_i+0xbe>
 80095a6:	681e      	ldr	r6, [r3, #0]
 80095a8:	e003      	b.n	80095b2 <_printf_i+0xc6>
 80095aa:	0646      	lsls	r6, r0, #25
 80095ac:	d5fb      	bpl.n	80095a6 <_printf_i+0xba>
 80095ae:	f9b3 6000 	ldrsh.w	r6, [r3]
 80095b2:	2e00      	cmp	r6, #0
 80095b4:	da03      	bge.n	80095be <_printf_i+0xd2>
 80095b6:	232d      	movs	r3, #45	; 0x2d
 80095b8:	4276      	negs	r6, r6
 80095ba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80095be:	485a      	ldr	r0, [pc, #360]	; (8009728 <_printf_i+0x23c>)
 80095c0:	230a      	movs	r3, #10
 80095c2:	e012      	b.n	80095ea <_printf_i+0xfe>
 80095c4:	682b      	ldr	r3, [r5, #0]
 80095c6:	6820      	ldr	r0, [r4, #0]
 80095c8:	1d19      	adds	r1, r3, #4
 80095ca:	6029      	str	r1, [r5, #0]
 80095cc:	0605      	lsls	r5, r0, #24
 80095ce:	d501      	bpl.n	80095d4 <_printf_i+0xe8>
 80095d0:	681e      	ldr	r6, [r3, #0]
 80095d2:	e002      	b.n	80095da <_printf_i+0xee>
 80095d4:	0641      	lsls	r1, r0, #25
 80095d6:	d5fb      	bpl.n	80095d0 <_printf_i+0xe4>
 80095d8:	881e      	ldrh	r6, [r3, #0]
 80095da:	4853      	ldr	r0, [pc, #332]	; (8009728 <_printf_i+0x23c>)
 80095dc:	2f6f      	cmp	r7, #111	; 0x6f
 80095de:	bf0c      	ite	eq
 80095e0:	2308      	moveq	r3, #8
 80095e2:	230a      	movne	r3, #10
 80095e4:	2100      	movs	r1, #0
 80095e6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80095ea:	6865      	ldr	r5, [r4, #4]
 80095ec:	60a5      	str	r5, [r4, #8]
 80095ee:	2d00      	cmp	r5, #0
 80095f0:	bfa2      	ittt	ge
 80095f2:	6821      	ldrge	r1, [r4, #0]
 80095f4:	f021 0104 	bicge.w	r1, r1, #4
 80095f8:	6021      	strge	r1, [r4, #0]
 80095fa:	b90e      	cbnz	r6, 8009600 <_printf_i+0x114>
 80095fc:	2d00      	cmp	r5, #0
 80095fe:	d04b      	beq.n	8009698 <_printf_i+0x1ac>
 8009600:	4615      	mov	r5, r2
 8009602:	fbb6 f1f3 	udiv	r1, r6, r3
 8009606:	fb03 6711 	mls	r7, r3, r1, r6
 800960a:	5dc7      	ldrb	r7, [r0, r7]
 800960c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009610:	4637      	mov	r7, r6
 8009612:	42bb      	cmp	r3, r7
 8009614:	460e      	mov	r6, r1
 8009616:	d9f4      	bls.n	8009602 <_printf_i+0x116>
 8009618:	2b08      	cmp	r3, #8
 800961a:	d10b      	bne.n	8009634 <_printf_i+0x148>
 800961c:	6823      	ldr	r3, [r4, #0]
 800961e:	07de      	lsls	r6, r3, #31
 8009620:	d508      	bpl.n	8009634 <_printf_i+0x148>
 8009622:	6923      	ldr	r3, [r4, #16]
 8009624:	6861      	ldr	r1, [r4, #4]
 8009626:	4299      	cmp	r1, r3
 8009628:	bfde      	ittt	le
 800962a:	2330      	movle	r3, #48	; 0x30
 800962c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009630:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009634:	1b52      	subs	r2, r2, r5
 8009636:	6122      	str	r2, [r4, #16]
 8009638:	f8cd a000 	str.w	sl, [sp]
 800963c:	464b      	mov	r3, r9
 800963e:	aa03      	add	r2, sp, #12
 8009640:	4621      	mov	r1, r4
 8009642:	4640      	mov	r0, r8
 8009644:	f7ff fee4 	bl	8009410 <_printf_common>
 8009648:	3001      	adds	r0, #1
 800964a:	d14a      	bne.n	80096e2 <_printf_i+0x1f6>
 800964c:	f04f 30ff 	mov.w	r0, #4294967295
 8009650:	b004      	add	sp, #16
 8009652:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009656:	6823      	ldr	r3, [r4, #0]
 8009658:	f043 0320 	orr.w	r3, r3, #32
 800965c:	6023      	str	r3, [r4, #0]
 800965e:	4833      	ldr	r0, [pc, #204]	; (800972c <_printf_i+0x240>)
 8009660:	2778      	movs	r7, #120	; 0x78
 8009662:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009666:	6823      	ldr	r3, [r4, #0]
 8009668:	6829      	ldr	r1, [r5, #0]
 800966a:	061f      	lsls	r7, r3, #24
 800966c:	f851 6b04 	ldr.w	r6, [r1], #4
 8009670:	d402      	bmi.n	8009678 <_printf_i+0x18c>
 8009672:	065f      	lsls	r7, r3, #25
 8009674:	bf48      	it	mi
 8009676:	b2b6      	uxthmi	r6, r6
 8009678:	07df      	lsls	r7, r3, #31
 800967a:	bf48      	it	mi
 800967c:	f043 0320 	orrmi.w	r3, r3, #32
 8009680:	6029      	str	r1, [r5, #0]
 8009682:	bf48      	it	mi
 8009684:	6023      	strmi	r3, [r4, #0]
 8009686:	b91e      	cbnz	r6, 8009690 <_printf_i+0x1a4>
 8009688:	6823      	ldr	r3, [r4, #0]
 800968a:	f023 0320 	bic.w	r3, r3, #32
 800968e:	6023      	str	r3, [r4, #0]
 8009690:	2310      	movs	r3, #16
 8009692:	e7a7      	b.n	80095e4 <_printf_i+0xf8>
 8009694:	4824      	ldr	r0, [pc, #144]	; (8009728 <_printf_i+0x23c>)
 8009696:	e7e4      	b.n	8009662 <_printf_i+0x176>
 8009698:	4615      	mov	r5, r2
 800969a:	e7bd      	b.n	8009618 <_printf_i+0x12c>
 800969c:	682b      	ldr	r3, [r5, #0]
 800969e:	6826      	ldr	r6, [r4, #0]
 80096a0:	6961      	ldr	r1, [r4, #20]
 80096a2:	1d18      	adds	r0, r3, #4
 80096a4:	6028      	str	r0, [r5, #0]
 80096a6:	0635      	lsls	r5, r6, #24
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	d501      	bpl.n	80096b0 <_printf_i+0x1c4>
 80096ac:	6019      	str	r1, [r3, #0]
 80096ae:	e002      	b.n	80096b6 <_printf_i+0x1ca>
 80096b0:	0670      	lsls	r0, r6, #25
 80096b2:	d5fb      	bpl.n	80096ac <_printf_i+0x1c0>
 80096b4:	8019      	strh	r1, [r3, #0]
 80096b6:	2300      	movs	r3, #0
 80096b8:	6123      	str	r3, [r4, #16]
 80096ba:	4615      	mov	r5, r2
 80096bc:	e7bc      	b.n	8009638 <_printf_i+0x14c>
 80096be:	682b      	ldr	r3, [r5, #0]
 80096c0:	1d1a      	adds	r2, r3, #4
 80096c2:	602a      	str	r2, [r5, #0]
 80096c4:	681d      	ldr	r5, [r3, #0]
 80096c6:	6862      	ldr	r2, [r4, #4]
 80096c8:	2100      	movs	r1, #0
 80096ca:	4628      	mov	r0, r5
 80096cc:	f7f6 fd80 	bl	80001d0 <memchr>
 80096d0:	b108      	cbz	r0, 80096d6 <_printf_i+0x1ea>
 80096d2:	1b40      	subs	r0, r0, r5
 80096d4:	6060      	str	r0, [r4, #4]
 80096d6:	6863      	ldr	r3, [r4, #4]
 80096d8:	6123      	str	r3, [r4, #16]
 80096da:	2300      	movs	r3, #0
 80096dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80096e0:	e7aa      	b.n	8009638 <_printf_i+0x14c>
 80096e2:	6923      	ldr	r3, [r4, #16]
 80096e4:	462a      	mov	r2, r5
 80096e6:	4649      	mov	r1, r9
 80096e8:	4640      	mov	r0, r8
 80096ea:	47d0      	blx	sl
 80096ec:	3001      	adds	r0, #1
 80096ee:	d0ad      	beq.n	800964c <_printf_i+0x160>
 80096f0:	6823      	ldr	r3, [r4, #0]
 80096f2:	079b      	lsls	r3, r3, #30
 80096f4:	d413      	bmi.n	800971e <_printf_i+0x232>
 80096f6:	68e0      	ldr	r0, [r4, #12]
 80096f8:	9b03      	ldr	r3, [sp, #12]
 80096fa:	4298      	cmp	r0, r3
 80096fc:	bfb8      	it	lt
 80096fe:	4618      	movlt	r0, r3
 8009700:	e7a6      	b.n	8009650 <_printf_i+0x164>
 8009702:	2301      	movs	r3, #1
 8009704:	4632      	mov	r2, r6
 8009706:	4649      	mov	r1, r9
 8009708:	4640      	mov	r0, r8
 800970a:	47d0      	blx	sl
 800970c:	3001      	adds	r0, #1
 800970e:	d09d      	beq.n	800964c <_printf_i+0x160>
 8009710:	3501      	adds	r5, #1
 8009712:	68e3      	ldr	r3, [r4, #12]
 8009714:	9903      	ldr	r1, [sp, #12]
 8009716:	1a5b      	subs	r3, r3, r1
 8009718:	42ab      	cmp	r3, r5
 800971a:	dcf2      	bgt.n	8009702 <_printf_i+0x216>
 800971c:	e7eb      	b.n	80096f6 <_printf_i+0x20a>
 800971e:	2500      	movs	r5, #0
 8009720:	f104 0619 	add.w	r6, r4, #25
 8009724:	e7f5      	b.n	8009712 <_printf_i+0x226>
 8009726:	bf00      	nop
 8009728:	0800e2de 	.word	0x0800e2de
 800972c:	0800e2ef 	.word	0x0800e2ef

08009730 <_scanf_float>:
 8009730:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009734:	b087      	sub	sp, #28
 8009736:	4617      	mov	r7, r2
 8009738:	9303      	str	r3, [sp, #12]
 800973a:	688b      	ldr	r3, [r1, #8]
 800973c:	1e5a      	subs	r2, r3, #1
 800973e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8009742:	bf83      	ittte	hi
 8009744:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8009748:	195b      	addhi	r3, r3, r5
 800974a:	9302      	strhi	r3, [sp, #8]
 800974c:	2300      	movls	r3, #0
 800974e:	bf86      	itte	hi
 8009750:	f240 135d 	movwhi	r3, #349	; 0x15d
 8009754:	608b      	strhi	r3, [r1, #8]
 8009756:	9302      	strls	r3, [sp, #8]
 8009758:	680b      	ldr	r3, [r1, #0]
 800975a:	468b      	mov	fp, r1
 800975c:	2500      	movs	r5, #0
 800975e:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8009762:	f84b 3b1c 	str.w	r3, [fp], #28
 8009766:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800976a:	4680      	mov	r8, r0
 800976c:	460c      	mov	r4, r1
 800976e:	465e      	mov	r6, fp
 8009770:	46aa      	mov	sl, r5
 8009772:	46a9      	mov	r9, r5
 8009774:	9501      	str	r5, [sp, #4]
 8009776:	68a2      	ldr	r2, [r4, #8]
 8009778:	b152      	cbz	r2, 8009790 <_scanf_float+0x60>
 800977a:	683b      	ldr	r3, [r7, #0]
 800977c:	781b      	ldrb	r3, [r3, #0]
 800977e:	2b4e      	cmp	r3, #78	; 0x4e
 8009780:	d864      	bhi.n	800984c <_scanf_float+0x11c>
 8009782:	2b40      	cmp	r3, #64	; 0x40
 8009784:	d83c      	bhi.n	8009800 <_scanf_float+0xd0>
 8009786:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800978a:	b2c8      	uxtb	r0, r1
 800978c:	280e      	cmp	r0, #14
 800978e:	d93a      	bls.n	8009806 <_scanf_float+0xd6>
 8009790:	f1b9 0f00 	cmp.w	r9, #0
 8009794:	d003      	beq.n	800979e <_scanf_float+0x6e>
 8009796:	6823      	ldr	r3, [r4, #0]
 8009798:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800979c:	6023      	str	r3, [r4, #0]
 800979e:	f10a 3aff 	add.w	sl, sl, #4294967295
 80097a2:	f1ba 0f01 	cmp.w	sl, #1
 80097a6:	f200 8113 	bhi.w	80099d0 <_scanf_float+0x2a0>
 80097aa:	455e      	cmp	r6, fp
 80097ac:	f200 8105 	bhi.w	80099ba <_scanf_float+0x28a>
 80097b0:	2501      	movs	r5, #1
 80097b2:	4628      	mov	r0, r5
 80097b4:	b007      	add	sp, #28
 80097b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097ba:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80097be:	2a0d      	cmp	r2, #13
 80097c0:	d8e6      	bhi.n	8009790 <_scanf_float+0x60>
 80097c2:	a101      	add	r1, pc, #4	; (adr r1, 80097c8 <_scanf_float+0x98>)
 80097c4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80097c8:	08009907 	.word	0x08009907
 80097cc:	08009791 	.word	0x08009791
 80097d0:	08009791 	.word	0x08009791
 80097d4:	08009791 	.word	0x08009791
 80097d8:	08009967 	.word	0x08009967
 80097dc:	0800993f 	.word	0x0800993f
 80097e0:	08009791 	.word	0x08009791
 80097e4:	08009791 	.word	0x08009791
 80097e8:	08009915 	.word	0x08009915
 80097ec:	08009791 	.word	0x08009791
 80097f0:	08009791 	.word	0x08009791
 80097f4:	08009791 	.word	0x08009791
 80097f8:	08009791 	.word	0x08009791
 80097fc:	080098cd 	.word	0x080098cd
 8009800:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8009804:	e7db      	b.n	80097be <_scanf_float+0x8e>
 8009806:	290e      	cmp	r1, #14
 8009808:	d8c2      	bhi.n	8009790 <_scanf_float+0x60>
 800980a:	a001      	add	r0, pc, #4	; (adr r0, 8009810 <_scanf_float+0xe0>)
 800980c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8009810:	080098bf 	.word	0x080098bf
 8009814:	08009791 	.word	0x08009791
 8009818:	080098bf 	.word	0x080098bf
 800981c:	08009953 	.word	0x08009953
 8009820:	08009791 	.word	0x08009791
 8009824:	0800986d 	.word	0x0800986d
 8009828:	080098a9 	.word	0x080098a9
 800982c:	080098a9 	.word	0x080098a9
 8009830:	080098a9 	.word	0x080098a9
 8009834:	080098a9 	.word	0x080098a9
 8009838:	080098a9 	.word	0x080098a9
 800983c:	080098a9 	.word	0x080098a9
 8009840:	080098a9 	.word	0x080098a9
 8009844:	080098a9 	.word	0x080098a9
 8009848:	080098a9 	.word	0x080098a9
 800984c:	2b6e      	cmp	r3, #110	; 0x6e
 800984e:	d809      	bhi.n	8009864 <_scanf_float+0x134>
 8009850:	2b60      	cmp	r3, #96	; 0x60
 8009852:	d8b2      	bhi.n	80097ba <_scanf_float+0x8a>
 8009854:	2b54      	cmp	r3, #84	; 0x54
 8009856:	d077      	beq.n	8009948 <_scanf_float+0x218>
 8009858:	2b59      	cmp	r3, #89	; 0x59
 800985a:	d199      	bne.n	8009790 <_scanf_float+0x60>
 800985c:	2d07      	cmp	r5, #7
 800985e:	d197      	bne.n	8009790 <_scanf_float+0x60>
 8009860:	2508      	movs	r5, #8
 8009862:	e029      	b.n	80098b8 <_scanf_float+0x188>
 8009864:	2b74      	cmp	r3, #116	; 0x74
 8009866:	d06f      	beq.n	8009948 <_scanf_float+0x218>
 8009868:	2b79      	cmp	r3, #121	; 0x79
 800986a:	e7f6      	b.n	800985a <_scanf_float+0x12a>
 800986c:	6821      	ldr	r1, [r4, #0]
 800986e:	05c8      	lsls	r0, r1, #23
 8009870:	d51a      	bpl.n	80098a8 <_scanf_float+0x178>
 8009872:	9b02      	ldr	r3, [sp, #8]
 8009874:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8009878:	6021      	str	r1, [r4, #0]
 800987a:	f109 0901 	add.w	r9, r9, #1
 800987e:	b11b      	cbz	r3, 8009888 <_scanf_float+0x158>
 8009880:	3b01      	subs	r3, #1
 8009882:	3201      	adds	r2, #1
 8009884:	9302      	str	r3, [sp, #8]
 8009886:	60a2      	str	r2, [r4, #8]
 8009888:	68a3      	ldr	r3, [r4, #8]
 800988a:	3b01      	subs	r3, #1
 800988c:	60a3      	str	r3, [r4, #8]
 800988e:	6923      	ldr	r3, [r4, #16]
 8009890:	3301      	adds	r3, #1
 8009892:	6123      	str	r3, [r4, #16]
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	3b01      	subs	r3, #1
 8009898:	2b00      	cmp	r3, #0
 800989a:	607b      	str	r3, [r7, #4]
 800989c:	f340 8084 	ble.w	80099a8 <_scanf_float+0x278>
 80098a0:	683b      	ldr	r3, [r7, #0]
 80098a2:	3301      	adds	r3, #1
 80098a4:	603b      	str	r3, [r7, #0]
 80098a6:	e766      	b.n	8009776 <_scanf_float+0x46>
 80098a8:	eb1a 0f05 	cmn.w	sl, r5
 80098ac:	f47f af70 	bne.w	8009790 <_scanf_float+0x60>
 80098b0:	6822      	ldr	r2, [r4, #0]
 80098b2:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80098b6:	6022      	str	r2, [r4, #0]
 80098b8:	f806 3b01 	strb.w	r3, [r6], #1
 80098bc:	e7e4      	b.n	8009888 <_scanf_float+0x158>
 80098be:	6822      	ldr	r2, [r4, #0]
 80098c0:	0610      	lsls	r0, r2, #24
 80098c2:	f57f af65 	bpl.w	8009790 <_scanf_float+0x60>
 80098c6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80098ca:	e7f4      	b.n	80098b6 <_scanf_float+0x186>
 80098cc:	f1ba 0f00 	cmp.w	sl, #0
 80098d0:	d10e      	bne.n	80098f0 <_scanf_float+0x1c0>
 80098d2:	f1b9 0f00 	cmp.w	r9, #0
 80098d6:	d10e      	bne.n	80098f6 <_scanf_float+0x1c6>
 80098d8:	6822      	ldr	r2, [r4, #0]
 80098da:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80098de:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80098e2:	d108      	bne.n	80098f6 <_scanf_float+0x1c6>
 80098e4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80098e8:	6022      	str	r2, [r4, #0]
 80098ea:	f04f 0a01 	mov.w	sl, #1
 80098ee:	e7e3      	b.n	80098b8 <_scanf_float+0x188>
 80098f0:	f1ba 0f02 	cmp.w	sl, #2
 80098f4:	d055      	beq.n	80099a2 <_scanf_float+0x272>
 80098f6:	2d01      	cmp	r5, #1
 80098f8:	d002      	beq.n	8009900 <_scanf_float+0x1d0>
 80098fa:	2d04      	cmp	r5, #4
 80098fc:	f47f af48 	bne.w	8009790 <_scanf_float+0x60>
 8009900:	3501      	adds	r5, #1
 8009902:	b2ed      	uxtb	r5, r5
 8009904:	e7d8      	b.n	80098b8 <_scanf_float+0x188>
 8009906:	f1ba 0f01 	cmp.w	sl, #1
 800990a:	f47f af41 	bne.w	8009790 <_scanf_float+0x60>
 800990e:	f04f 0a02 	mov.w	sl, #2
 8009912:	e7d1      	b.n	80098b8 <_scanf_float+0x188>
 8009914:	b97d      	cbnz	r5, 8009936 <_scanf_float+0x206>
 8009916:	f1b9 0f00 	cmp.w	r9, #0
 800991a:	f47f af3c 	bne.w	8009796 <_scanf_float+0x66>
 800991e:	6822      	ldr	r2, [r4, #0]
 8009920:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8009924:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8009928:	f47f af39 	bne.w	800979e <_scanf_float+0x6e>
 800992c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009930:	6022      	str	r2, [r4, #0]
 8009932:	2501      	movs	r5, #1
 8009934:	e7c0      	b.n	80098b8 <_scanf_float+0x188>
 8009936:	2d03      	cmp	r5, #3
 8009938:	d0e2      	beq.n	8009900 <_scanf_float+0x1d0>
 800993a:	2d05      	cmp	r5, #5
 800993c:	e7de      	b.n	80098fc <_scanf_float+0x1cc>
 800993e:	2d02      	cmp	r5, #2
 8009940:	f47f af26 	bne.w	8009790 <_scanf_float+0x60>
 8009944:	2503      	movs	r5, #3
 8009946:	e7b7      	b.n	80098b8 <_scanf_float+0x188>
 8009948:	2d06      	cmp	r5, #6
 800994a:	f47f af21 	bne.w	8009790 <_scanf_float+0x60>
 800994e:	2507      	movs	r5, #7
 8009950:	e7b2      	b.n	80098b8 <_scanf_float+0x188>
 8009952:	6822      	ldr	r2, [r4, #0]
 8009954:	0591      	lsls	r1, r2, #22
 8009956:	f57f af1b 	bpl.w	8009790 <_scanf_float+0x60>
 800995a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800995e:	6022      	str	r2, [r4, #0]
 8009960:	f8cd 9004 	str.w	r9, [sp, #4]
 8009964:	e7a8      	b.n	80098b8 <_scanf_float+0x188>
 8009966:	6822      	ldr	r2, [r4, #0]
 8009968:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800996c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8009970:	d006      	beq.n	8009980 <_scanf_float+0x250>
 8009972:	0550      	lsls	r0, r2, #21
 8009974:	f57f af0c 	bpl.w	8009790 <_scanf_float+0x60>
 8009978:	f1b9 0f00 	cmp.w	r9, #0
 800997c:	f43f af0f 	beq.w	800979e <_scanf_float+0x6e>
 8009980:	0591      	lsls	r1, r2, #22
 8009982:	bf58      	it	pl
 8009984:	9901      	ldrpl	r1, [sp, #4]
 8009986:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800998a:	bf58      	it	pl
 800998c:	eba9 0101 	subpl.w	r1, r9, r1
 8009990:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8009994:	bf58      	it	pl
 8009996:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800999a:	6022      	str	r2, [r4, #0]
 800999c:	f04f 0900 	mov.w	r9, #0
 80099a0:	e78a      	b.n	80098b8 <_scanf_float+0x188>
 80099a2:	f04f 0a03 	mov.w	sl, #3
 80099a6:	e787      	b.n	80098b8 <_scanf_float+0x188>
 80099a8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80099ac:	4639      	mov	r1, r7
 80099ae:	4640      	mov	r0, r8
 80099b0:	4798      	blx	r3
 80099b2:	2800      	cmp	r0, #0
 80099b4:	f43f aedf 	beq.w	8009776 <_scanf_float+0x46>
 80099b8:	e6ea      	b.n	8009790 <_scanf_float+0x60>
 80099ba:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80099be:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80099c2:	463a      	mov	r2, r7
 80099c4:	4640      	mov	r0, r8
 80099c6:	4798      	blx	r3
 80099c8:	6923      	ldr	r3, [r4, #16]
 80099ca:	3b01      	subs	r3, #1
 80099cc:	6123      	str	r3, [r4, #16]
 80099ce:	e6ec      	b.n	80097aa <_scanf_float+0x7a>
 80099d0:	1e6b      	subs	r3, r5, #1
 80099d2:	2b06      	cmp	r3, #6
 80099d4:	d825      	bhi.n	8009a22 <_scanf_float+0x2f2>
 80099d6:	2d02      	cmp	r5, #2
 80099d8:	d836      	bhi.n	8009a48 <_scanf_float+0x318>
 80099da:	455e      	cmp	r6, fp
 80099dc:	f67f aee8 	bls.w	80097b0 <_scanf_float+0x80>
 80099e0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80099e4:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80099e8:	463a      	mov	r2, r7
 80099ea:	4640      	mov	r0, r8
 80099ec:	4798      	blx	r3
 80099ee:	6923      	ldr	r3, [r4, #16]
 80099f0:	3b01      	subs	r3, #1
 80099f2:	6123      	str	r3, [r4, #16]
 80099f4:	e7f1      	b.n	80099da <_scanf_float+0x2aa>
 80099f6:	9802      	ldr	r0, [sp, #8]
 80099f8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80099fc:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8009a00:	9002      	str	r0, [sp, #8]
 8009a02:	463a      	mov	r2, r7
 8009a04:	4640      	mov	r0, r8
 8009a06:	4798      	blx	r3
 8009a08:	6923      	ldr	r3, [r4, #16]
 8009a0a:	3b01      	subs	r3, #1
 8009a0c:	6123      	str	r3, [r4, #16]
 8009a0e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009a12:	fa5f fa8a 	uxtb.w	sl, sl
 8009a16:	f1ba 0f02 	cmp.w	sl, #2
 8009a1a:	d1ec      	bne.n	80099f6 <_scanf_float+0x2c6>
 8009a1c:	3d03      	subs	r5, #3
 8009a1e:	b2ed      	uxtb	r5, r5
 8009a20:	1b76      	subs	r6, r6, r5
 8009a22:	6823      	ldr	r3, [r4, #0]
 8009a24:	05da      	lsls	r2, r3, #23
 8009a26:	d52f      	bpl.n	8009a88 <_scanf_float+0x358>
 8009a28:	055b      	lsls	r3, r3, #21
 8009a2a:	d510      	bpl.n	8009a4e <_scanf_float+0x31e>
 8009a2c:	455e      	cmp	r6, fp
 8009a2e:	f67f aebf 	bls.w	80097b0 <_scanf_float+0x80>
 8009a32:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009a36:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009a3a:	463a      	mov	r2, r7
 8009a3c:	4640      	mov	r0, r8
 8009a3e:	4798      	blx	r3
 8009a40:	6923      	ldr	r3, [r4, #16]
 8009a42:	3b01      	subs	r3, #1
 8009a44:	6123      	str	r3, [r4, #16]
 8009a46:	e7f1      	b.n	8009a2c <_scanf_float+0x2fc>
 8009a48:	46aa      	mov	sl, r5
 8009a4a:	9602      	str	r6, [sp, #8]
 8009a4c:	e7df      	b.n	8009a0e <_scanf_float+0x2de>
 8009a4e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8009a52:	6923      	ldr	r3, [r4, #16]
 8009a54:	2965      	cmp	r1, #101	; 0x65
 8009a56:	f103 33ff 	add.w	r3, r3, #4294967295
 8009a5a:	f106 35ff 	add.w	r5, r6, #4294967295
 8009a5e:	6123      	str	r3, [r4, #16]
 8009a60:	d00c      	beq.n	8009a7c <_scanf_float+0x34c>
 8009a62:	2945      	cmp	r1, #69	; 0x45
 8009a64:	d00a      	beq.n	8009a7c <_scanf_float+0x34c>
 8009a66:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009a6a:	463a      	mov	r2, r7
 8009a6c:	4640      	mov	r0, r8
 8009a6e:	4798      	blx	r3
 8009a70:	6923      	ldr	r3, [r4, #16]
 8009a72:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8009a76:	3b01      	subs	r3, #1
 8009a78:	1eb5      	subs	r5, r6, #2
 8009a7a:	6123      	str	r3, [r4, #16]
 8009a7c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009a80:	463a      	mov	r2, r7
 8009a82:	4640      	mov	r0, r8
 8009a84:	4798      	blx	r3
 8009a86:	462e      	mov	r6, r5
 8009a88:	6825      	ldr	r5, [r4, #0]
 8009a8a:	f015 0510 	ands.w	r5, r5, #16
 8009a8e:	d158      	bne.n	8009b42 <_scanf_float+0x412>
 8009a90:	7035      	strb	r5, [r6, #0]
 8009a92:	6823      	ldr	r3, [r4, #0]
 8009a94:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009a98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009a9c:	d11c      	bne.n	8009ad8 <_scanf_float+0x3a8>
 8009a9e:	9b01      	ldr	r3, [sp, #4]
 8009aa0:	454b      	cmp	r3, r9
 8009aa2:	eba3 0209 	sub.w	r2, r3, r9
 8009aa6:	d124      	bne.n	8009af2 <_scanf_float+0x3c2>
 8009aa8:	2200      	movs	r2, #0
 8009aaa:	4659      	mov	r1, fp
 8009aac:	4640      	mov	r0, r8
 8009aae:	f002 fc4f 	bl	800c350 <_strtod_r>
 8009ab2:	9b03      	ldr	r3, [sp, #12]
 8009ab4:	6821      	ldr	r1, [r4, #0]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	f011 0f02 	tst.w	r1, #2
 8009abc:	ec57 6b10 	vmov	r6, r7, d0
 8009ac0:	f103 0204 	add.w	r2, r3, #4
 8009ac4:	d020      	beq.n	8009b08 <_scanf_float+0x3d8>
 8009ac6:	9903      	ldr	r1, [sp, #12]
 8009ac8:	600a      	str	r2, [r1, #0]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	e9c3 6700 	strd	r6, r7, [r3]
 8009ad0:	68e3      	ldr	r3, [r4, #12]
 8009ad2:	3301      	adds	r3, #1
 8009ad4:	60e3      	str	r3, [r4, #12]
 8009ad6:	e66c      	b.n	80097b2 <_scanf_float+0x82>
 8009ad8:	9b04      	ldr	r3, [sp, #16]
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d0e4      	beq.n	8009aa8 <_scanf_float+0x378>
 8009ade:	9905      	ldr	r1, [sp, #20]
 8009ae0:	230a      	movs	r3, #10
 8009ae2:	462a      	mov	r2, r5
 8009ae4:	3101      	adds	r1, #1
 8009ae6:	4640      	mov	r0, r8
 8009ae8:	f002 fcba 	bl	800c460 <_strtol_r>
 8009aec:	9b04      	ldr	r3, [sp, #16]
 8009aee:	9e05      	ldr	r6, [sp, #20]
 8009af0:	1ac2      	subs	r2, r0, r3
 8009af2:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8009af6:	429e      	cmp	r6, r3
 8009af8:	bf28      	it	cs
 8009afa:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8009afe:	4912      	ldr	r1, [pc, #72]	; (8009b48 <_scanf_float+0x418>)
 8009b00:	4630      	mov	r0, r6
 8009b02:	f000 f909 	bl	8009d18 <siprintf>
 8009b06:	e7cf      	b.n	8009aa8 <_scanf_float+0x378>
 8009b08:	f011 0f04 	tst.w	r1, #4
 8009b0c:	9903      	ldr	r1, [sp, #12]
 8009b0e:	600a      	str	r2, [r1, #0]
 8009b10:	d1db      	bne.n	8009aca <_scanf_float+0x39a>
 8009b12:	f8d3 8000 	ldr.w	r8, [r3]
 8009b16:	ee10 2a10 	vmov	r2, s0
 8009b1a:	ee10 0a10 	vmov	r0, s0
 8009b1e:	463b      	mov	r3, r7
 8009b20:	4639      	mov	r1, r7
 8009b22:	f7f7 f803 	bl	8000b2c <__aeabi_dcmpun>
 8009b26:	b128      	cbz	r0, 8009b34 <_scanf_float+0x404>
 8009b28:	4808      	ldr	r0, [pc, #32]	; (8009b4c <_scanf_float+0x41c>)
 8009b2a:	f000 f9d7 	bl	8009edc <nanf>
 8009b2e:	ed88 0a00 	vstr	s0, [r8]
 8009b32:	e7cd      	b.n	8009ad0 <_scanf_float+0x3a0>
 8009b34:	4630      	mov	r0, r6
 8009b36:	4639      	mov	r1, r7
 8009b38:	f7f7 f856 	bl	8000be8 <__aeabi_d2f>
 8009b3c:	f8c8 0000 	str.w	r0, [r8]
 8009b40:	e7c6      	b.n	8009ad0 <_scanf_float+0x3a0>
 8009b42:	2500      	movs	r5, #0
 8009b44:	e635      	b.n	80097b2 <_scanf_float+0x82>
 8009b46:	bf00      	nop
 8009b48:	0800e300 	.word	0x0800e300
 8009b4c:	0800e695 	.word	0x0800e695

08009b50 <std>:
 8009b50:	2300      	movs	r3, #0
 8009b52:	b510      	push	{r4, lr}
 8009b54:	4604      	mov	r4, r0
 8009b56:	e9c0 3300 	strd	r3, r3, [r0]
 8009b5a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009b5e:	6083      	str	r3, [r0, #8]
 8009b60:	8181      	strh	r1, [r0, #12]
 8009b62:	6643      	str	r3, [r0, #100]	; 0x64
 8009b64:	81c2      	strh	r2, [r0, #14]
 8009b66:	6183      	str	r3, [r0, #24]
 8009b68:	4619      	mov	r1, r3
 8009b6a:	2208      	movs	r2, #8
 8009b6c:	305c      	adds	r0, #92	; 0x5c
 8009b6e:	f000 f936 	bl	8009dde <memset>
 8009b72:	4b05      	ldr	r3, [pc, #20]	; (8009b88 <std+0x38>)
 8009b74:	6263      	str	r3, [r4, #36]	; 0x24
 8009b76:	4b05      	ldr	r3, [pc, #20]	; (8009b8c <std+0x3c>)
 8009b78:	62a3      	str	r3, [r4, #40]	; 0x28
 8009b7a:	4b05      	ldr	r3, [pc, #20]	; (8009b90 <std+0x40>)
 8009b7c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009b7e:	4b05      	ldr	r3, [pc, #20]	; (8009b94 <std+0x44>)
 8009b80:	6224      	str	r4, [r4, #32]
 8009b82:	6323      	str	r3, [r4, #48]	; 0x30
 8009b84:	bd10      	pop	{r4, pc}
 8009b86:	bf00      	nop
 8009b88:	08009d59 	.word	0x08009d59
 8009b8c:	08009d7b 	.word	0x08009d7b
 8009b90:	08009db3 	.word	0x08009db3
 8009b94:	08009dd7 	.word	0x08009dd7

08009b98 <stdio_exit_handler>:
 8009b98:	4a02      	ldr	r2, [pc, #8]	; (8009ba4 <stdio_exit_handler+0xc>)
 8009b9a:	4903      	ldr	r1, [pc, #12]	; (8009ba8 <stdio_exit_handler+0x10>)
 8009b9c:	4803      	ldr	r0, [pc, #12]	; (8009bac <stdio_exit_handler+0x14>)
 8009b9e:	f000 b869 	b.w	8009c74 <_fwalk_sglue>
 8009ba2:	bf00      	nop
 8009ba4:	2000005c 	.word	0x2000005c
 8009ba8:	0800c821 	.word	0x0800c821
 8009bac:	20000068 	.word	0x20000068

08009bb0 <cleanup_stdio>:
 8009bb0:	6841      	ldr	r1, [r0, #4]
 8009bb2:	4b0c      	ldr	r3, [pc, #48]	; (8009be4 <cleanup_stdio+0x34>)
 8009bb4:	4299      	cmp	r1, r3
 8009bb6:	b510      	push	{r4, lr}
 8009bb8:	4604      	mov	r4, r0
 8009bba:	d001      	beq.n	8009bc0 <cleanup_stdio+0x10>
 8009bbc:	f002 fe30 	bl	800c820 <_fflush_r>
 8009bc0:	68a1      	ldr	r1, [r4, #8]
 8009bc2:	4b09      	ldr	r3, [pc, #36]	; (8009be8 <cleanup_stdio+0x38>)
 8009bc4:	4299      	cmp	r1, r3
 8009bc6:	d002      	beq.n	8009bce <cleanup_stdio+0x1e>
 8009bc8:	4620      	mov	r0, r4
 8009bca:	f002 fe29 	bl	800c820 <_fflush_r>
 8009bce:	68e1      	ldr	r1, [r4, #12]
 8009bd0:	4b06      	ldr	r3, [pc, #24]	; (8009bec <cleanup_stdio+0x3c>)
 8009bd2:	4299      	cmp	r1, r3
 8009bd4:	d004      	beq.n	8009be0 <cleanup_stdio+0x30>
 8009bd6:	4620      	mov	r0, r4
 8009bd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009bdc:	f002 be20 	b.w	800c820 <_fflush_r>
 8009be0:	bd10      	pop	{r4, pc}
 8009be2:	bf00      	nop
 8009be4:	20000608 	.word	0x20000608
 8009be8:	20000670 	.word	0x20000670
 8009bec:	200006d8 	.word	0x200006d8

08009bf0 <global_stdio_init.part.0>:
 8009bf0:	b510      	push	{r4, lr}
 8009bf2:	4b0b      	ldr	r3, [pc, #44]	; (8009c20 <global_stdio_init.part.0+0x30>)
 8009bf4:	4c0b      	ldr	r4, [pc, #44]	; (8009c24 <global_stdio_init.part.0+0x34>)
 8009bf6:	4a0c      	ldr	r2, [pc, #48]	; (8009c28 <global_stdio_init.part.0+0x38>)
 8009bf8:	601a      	str	r2, [r3, #0]
 8009bfa:	4620      	mov	r0, r4
 8009bfc:	2200      	movs	r2, #0
 8009bfe:	2104      	movs	r1, #4
 8009c00:	f7ff ffa6 	bl	8009b50 <std>
 8009c04:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8009c08:	2201      	movs	r2, #1
 8009c0a:	2109      	movs	r1, #9
 8009c0c:	f7ff ffa0 	bl	8009b50 <std>
 8009c10:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8009c14:	2202      	movs	r2, #2
 8009c16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009c1a:	2112      	movs	r1, #18
 8009c1c:	f7ff bf98 	b.w	8009b50 <std>
 8009c20:	20000740 	.word	0x20000740
 8009c24:	20000608 	.word	0x20000608
 8009c28:	08009b99 	.word	0x08009b99

08009c2c <__sfp_lock_acquire>:
 8009c2c:	4801      	ldr	r0, [pc, #4]	; (8009c34 <__sfp_lock_acquire+0x8>)
 8009c2e:	f000 b953 	b.w	8009ed8 <__retarget_lock_acquire_recursive>
 8009c32:	bf00      	nop
 8009c34:	20000749 	.word	0x20000749

08009c38 <__sfp_lock_release>:
 8009c38:	4801      	ldr	r0, [pc, #4]	; (8009c40 <__sfp_lock_release+0x8>)
 8009c3a:	f000 b94e 	b.w	8009eda <__retarget_lock_release_recursive>
 8009c3e:	bf00      	nop
 8009c40:	20000749 	.word	0x20000749

08009c44 <__sinit>:
 8009c44:	b510      	push	{r4, lr}
 8009c46:	4604      	mov	r4, r0
 8009c48:	f7ff fff0 	bl	8009c2c <__sfp_lock_acquire>
 8009c4c:	6a23      	ldr	r3, [r4, #32]
 8009c4e:	b11b      	cbz	r3, 8009c58 <__sinit+0x14>
 8009c50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009c54:	f7ff bff0 	b.w	8009c38 <__sfp_lock_release>
 8009c58:	4b04      	ldr	r3, [pc, #16]	; (8009c6c <__sinit+0x28>)
 8009c5a:	6223      	str	r3, [r4, #32]
 8009c5c:	4b04      	ldr	r3, [pc, #16]	; (8009c70 <__sinit+0x2c>)
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d1f5      	bne.n	8009c50 <__sinit+0xc>
 8009c64:	f7ff ffc4 	bl	8009bf0 <global_stdio_init.part.0>
 8009c68:	e7f2      	b.n	8009c50 <__sinit+0xc>
 8009c6a:	bf00      	nop
 8009c6c:	08009bb1 	.word	0x08009bb1
 8009c70:	20000740 	.word	0x20000740

08009c74 <_fwalk_sglue>:
 8009c74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009c78:	4607      	mov	r7, r0
 8009c7a:	4688      	mov	r8, r1
 8009c7c:	4614      	mov	r4, r2
 8009c7e:	2600      	movs	r6, #0
 8009c80:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009c84:	f1b9 0901 	subs.w	r9, r9, #1
 8009c88:	d505      	bpl.n	8009c96 <_fwalk_sglue+0x22>
 8009c8a:	6824      	ldr	r4, [r4, #0]
 8009c8c:	2c00      	cmp	r4, #0
 8009c8e:	d1f7      	bne.n	8009c80 <_fwalk_sglue+0xc>
 8009c90:	4630      	mov	r0, r6
 8009c92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009c96:	89ab      	ldrh	r3, [r5, #12]
 8009c98:	2b01      	cmp	r3, #1
 8009c9a:	d907      	bls.n	8009cac <_fwalk_sglue+0x38>
 8009c9c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009ca0:	3301      	adds	r3, #1
 8009ca2:	d003      	beq.n	8009cac <_fwalk_sglue+0x38>
 8009ca4:	4629      	mov	r1, r5
 8009ca6:	4638      	mov	r0, r7
 8009ca8:	47c0      	blx	r8
 8009caa:	4306      	orrs	r6, r0
 8009cac:	3568      	adds	r5, #104	; 0x68
 8009cae:	e7e9      	b.n	8009c84 <_fwalk_sglue+0x10>

08009cb0 <sniprintf>:
 8009cb0:	b40c      	push	{r2, r3}
 8009cb2:	b530      	push	{r4, r5, lr}
 8009cb4:	4b17      	ldr	r3, [pc, #92]	; (8009d14 <sniprintf+0x64>)
 8009cb6:	1e0c      	subs	r4, r1, #0
 8009cb8:	681d      	ldr	r5, [r3, #0]
 8009cba:	b09d      	sub	sp, #116	; 0x74
 8009cbc:	da08      	bge.n	8009cd0 <sniprintf+0x20>
 8009cbe:	238b      	movs	r3, #139	; 0x8b
 8009cc0:	602b      	str	r3, [r5, #0]
 8009cc2:	f04f 30ff 	mov.w	r0, #4294967295
 8009cc6:	b01d      	add	sp, #116	; 0x74
 8009cc8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009ccc:	b002      	add	sp, #8
 8009cce:	4770      	bx	lr
 8009cd0:	f44f 7302 	mov.w	r3, #520	; 0x208
 8009cd4:	f8ad 3014 	strh.w	r3, [sp, #20]
 8009cd8:	bf14      	ite	ne
 8009cda:	f104 33ff 	addne.w	r3, r4, #4294967295
 8009cde:	4623      	moveq	r3, r4
 8009ce0:	9304      	str	r3, [sp, #16]
 8009ce2:	9307      	str	r3, [sp, #28]
 8009ce4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009ce8:	9002      	str	r0, [sp, #8]
 8009cea:	9006      	str	r0, [sp, #24]
 8009cec:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009cf0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8009cf2:	ab21      	add	r3, sp, #132	; 0x84
 8009cf4:	a902      	add	r1, sp, #8
 8009cf6:	4628      	mov	r0, r5
 8009cf8:	9301      	str	r3, [sp, #4]
 8009cfa:	f002 fc0d 	bl	800c518 <_svfiprintf_r>
 8009cfe:	1c43      	adds	r3, r0, #1
 8009d00:	bfbc      	itt	lt
 8009d02:	238b      	movlt	r3, #139	; 0x8b
 8009d04:	602b      	strlt	r3, [r5, #0]
 8009d06:	2c00      	cmp	r4, #0
 8009d08:	d0dd      	beq.n	8009cc6 <sniprintf+0x16>
 8009d0a:	9b02      	ldr	r3, [sp, #8]
 8009d0c:	2200      	movs	r2, #0
 8009d0e:	701a      	strb	r2, [r3, #0]
 8009d10:	e7d9      	b.n	8009cc6 <sniprintf+0x16>
 8009d12:	bf00      	nop
 8009d14:	200000b4 	.word	0x200000b4

08009d18 <siprintf>:
 8009d18:	b40e      	push	{r1, r2, r3}
 8009d1a:	b500      	push	{lr}
 8009d1c:	b09c      	sub	sp, #112	; 0x70
 8009d1e:	ab1d      	add	r3, sp, #116	; 0x74
 8009d20:	9002      	str	r0, [sp, #8]
 8009d22:	9006      	str	r0, [sp, #24]
 8009d24:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009d28:	4809      	ldr	r0, [pc, #36]	; (8009d50 <siprintf+0x38>)
 8009d2a:	9107      	str	r1, [sp, #28]
 8009d2c:	9104      	str	r1, [sp, #16]
 8009d2e:	4909      	ldr	r1, [pc, #36]	; (8009d54 <siprintf+0x3c>)
 8009d30:	f853 2b04 	ldr.w	r2, [r3], #4
 8009d34:	9105      	str	r1, [sp, #20]
 8009d36:	6800      	ldr	r0, [r0, #0]
 8009d38:	9301      	str	r3, [sp, #4]
 8009d3a:	a902      	add	r1, sp, #8
 8009d3c:	f002 fbec 	bl	800c518 <_svfiprintf_r>
 8009d40:	9b02      	ldr	r3, [sp, #8]
 8009d42:	2200      	movs	r2, #0
 8009d44:	701a      	strb	r2, [r3, #0]
 8009d46:	b01c      	add	sp, #112	; 0x70
 8009d48:	f85d eb04 	ldr.w	lr, [sp], #4
 8009d4c:	b003      	add	sp, #12
 8009d4e:	4770      	bx	lr
 8009d50:	200000b4 	.word	0x200000b4
 8009d54:	ffff0208 	.word	0xffff0208

08009d58 <__sread>:
 8009d58:	b510      	push	{r4, lr}
 8009d5a:	460c      	mov	r4, r1
 8009d5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d60:	f000 f86c 	bl	8009e3c <_read_r>
 8009d64:	2800      	cmp	r0, #0
 8009d66:	bfab      	itete	ge
 8009d68:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009d6a:	89a3      	ldrhlt	r3, [r4, #12]
 8009d6c:	181b      	addge	r3, r3, r0
 8009d6e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009d72:	bfac      	ite	ge
 8009d74:	6563      	strge	r3, [r4, #84]	; 0x54
 8009d76:	81a3      	strhlt	r3, [r4, #12]
 8009d78:	bd10      	pop	{r4, pc}

08009d7a <__swrite>:
 8009d7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d7e:	461f      	mov	r7, r3
 8009d80:	898b      	ldrh	r3, [r1, #12]
 8009d82:	05db      	lsls	r3, r3, #23
 8009d84:	4605      	mov	r5, r0
 8009d86:	460c      	mov	r4, r1
 8009d88:	4616      	mov	r6, r2
 8009d8a:	d505      	bpl.n	8009d98 <__swrite+0x1e>
 8009d8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d90:	2302      	movs	r3, #2
 8009d92:	2200      	movs	r2, #0
 8009d94:	f000 f840 	bl	8009e18 <_lseek_r>
 8009d98:	89a3      	ldrh	r3, [r4, #12]
 8009d9a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009d9e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009da2:	81a3      	strh	r3, [r4, #12]
 8009da4:	4632      	mov	r2, r6
 8009da6:	463b      	mov	r3, r7
 8009da8:	4628      	mov	r0, r5
 8009daa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009dae:	f000 b857 	b.w	8009e60 <_write_r>

08009db2 <__sseek>:
 8009db2:	b510      	push	{r4, lr}
 8009db4:	460c      	mov	r4, r1
 8009db6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009dba:	f000 f82d 	bl	8009e18 <_lseek_r>
 8009dbe:	1c43      	adds	r3, r0, #1
 8009dc0:	89a3      	ldrh	r3, [r4, #12]
 8009dc2:	bf15      	itete	ne
 8009dc4:	6560      	strne	r0, [r4, #84]	; 0x54
 8009dc6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009dca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009dce:	81a3      	strheq	r3, [r4, #12]
 8009dd0:	bf18      	it	ne
 8009dd2:	81a3      	strhne	r3, [r4, #12]
 8009dd4:	bd10      	pop	{r4, pc}

08009dd6 <__sclose>:
 8009dd6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009dda:	f000 b80d 	b.w	8009df8 <_close_r>

08009dde <memset>:
 8009dde:	4402      	add	r2, r0
 8009de0:	4603      	mov	r3, r0
 8009de2:	4293      	cmp	r3, r2
 8009de4:	d100      	bne.n	8009de8 <memset+0xa>
 8009de6:	4770      	bx	lr
 8009de8:	f803 1b01 	strb.w	r1, [r3], #1
 8009dec:	e7f9      	b.n	8009de2 <memset+0x4>
	...

08009df0 <_localeconv_r>:
 8009df0:	4800      	ldr	r0, [pc, #0]	; (8009df4 <_localeconv_r+0x4>)
 8009df2:	4770      	bx	lr
 8009df4:	200001a8 	.word	0x200001a8

08009df8 <_close_r>:
 8009df8:	b538      	push	{r3, r4, r5, lr}
 8009dfa:	4d06      	ldr	r5, [pc, #24]	; (8009e14 <_close_r+0x1c>)
 8009dfc:	2300      	movs	r3, #0
 8009dfe:	4604      	mov	r4, r0
 8009e00:	4608      	mov	r0, r1
 8009e02:	602b      	str	r3, [r5, #0]
 8009e04:	f7f8 f9a3 	bl	800214e <_close>
 8009e08:	1c43      	adds	r3, r0, #1
 8009e0a:	d102      	bne.n	8009e12 <_close_r+0x1a>
 8009e0c:	682b      	ldr	r3, [r5, #0]
 8009e0e:	b103      	cbz	r3, 8009e12 <_close_r+0x1a>
 8009e10:	6023      	str	r3, [r4, #0]
 8009e12:	bd38      	pop	{r3, r4, r5, pc}
 8009e14:	20000744 	.word	0x20000744

08009e18 <_lseek_r>:
 8009e18:	b538      	push	{r3, r4, r5, lr}
 8009e1a:	4d07      	ldr	r5, [pc, #28]	; (8009e38 <_lseek_r+0x20>)
 8009e1c:	4604      	mov	r4, r0
 8009e1e:	4608      	mov	r0, r1
 8009e20:	4611      	mov	r1, r2
 8009e22:	2200      	movs	r2, #0
 8009e24:	602a      	str	r2, [r5, #0]
 8009e26:	461a      	mov	r2, r3
 8009e28:	f7f8 f9b8 	bl	800219c <_lseek>
 8009e2c:	1c43      	adds	r3, r0, #1
 8009e2e:	d102      	bne.n	8009e36 <_lseek_r+0x1e>
 8009e30:	682b      	ldr	r3, [r5, #0]
 8009e32:	b103      	cbz	r3, 8009e36 <_lseek_r+0x1e>
 8009e34:	6023      	str	r3, [r4, #0]
 8009e36:	bd38      	pop	{r3, r4, r5, pc}
 8009e38:	20000744 	.word	0x20000744

08009e3c <_read_r>:
 8009e3c:	b538      	push	{r3, r4, r5, lr}
 8009e3e:	4d07      	ldr	r5, [pc, #28]	; (8009e5c <_read_r+0x20>)
 8009e40:	4604      	mov	r4, r0
 8009e42:	4608      	mov	r0, r1
 8009e44:	4611      	mov	r1, r2
 8009e46:	2200      	movs	r2, #0
 8009e48:	602a      	str	r2, [r5, #0]
 8009e4a:	461a      	mov	r2, r3
 8009e4c:	f7f8 f946 	bl	80020dc <_read>
 8009e50:	1c43      	adds	r3, r0, #1
 8009e52:	d102      	bne.n	8009e5a <_read_r+0x1e>
 8009e54:	682b      	ldr	r3, [r5, #0]
 8009e56:	b103      	cbz	r3, 8009e5a <_read_r+0x1e>
 8009e58:	6023      	str	r3, [r4, #0]
 8009e5a:	bd38      	pop	{r3, r4, r5, pc}
 8009e5c:	20000744 	.word	0x20000744

08009e60 <_write_r>:
 8009e60:	b538      	push	{r3, r4, r5, lr}
 8009e62:	4d07      	ldr	r5, [pc, #28]	; (8009e80 <_write_r+0x20>)
 8009e64:	4604      	mov	r4, r0
 8009e66:	4608      	mov	r0, r1
 8009e68:	4611      	mov	r1, r2
 8009e6a:	2200      	movs	r2, #0
 8009e6c:	602a      	str	r2, [r5, #0]
 8009e6e:	461a      	mov	r2, r3
 8009e70:	f7f8 f951 	bl	8002116 <_write>
 8009e74:	1c43      	adds	r3, r0, #1
 8009e76:	d102      	bne.n	8009e7e <_write_r+0x1e>
 8009e78:	682b      	ldr	r3, [r5, #0]
 8009e7a:	b103      	cbz	r3, 8009e7e <_write_r+0x1e>
 8009e7c:	6023      	str	r3, [r4, #0]
 8009e7e:	bd38      	pop	{r3, r4, r5, pc}
 8009e80:	20000744 	.word	0x20000744

08009e84 <__errno>:
 8009e84:	4b01      	ldr	r3, [pc, #4]	; (8009e8c <__errno+0x8>)
 8009e86:	6818      	ldr	r0, [r3, #0]
 8009e88:	4770      	bx	lr
 8009e8a:	bf00      	nop
 8009e8c:	200000b4 	.word	0x200000b4

08009e90 <__libc_init_array>:
 8009e90:	b570      	push	{r4, r5, r6, lr}
 8009e92:	4d0d      	ldr	r5, [pc, #52]	; (8009ec8 <__libc_init_array+0x38>)
 8009e94:	4c0d      	ldr	r4, [pc, #52]	; (8009ecc <__libc_init_array+0x3c>)
 8009e96:	1b64      	subs	r4, r4, r5
 8009e98:	10a4      	asrs	r4, r4, #2
 8009e9a:	2600      	movs	r6, #0
 8009e9c:	42a6      	cmp	r6, r4
 8009e9e:	d109      	bne.n	8009eb4 <__libc_init_array+0x24>
 8009ea0:	4d0b      	ldr	r5, [pc, #44]	; (8009ed0 <__libc_init_array+0x40>)
 8009ea2:	4c0c      	ldr	r4, [pc, #48]	; (8009ed4 <__libc_init_array+0x44>)
 8009ea4:	f003 fbd4 	bl	800d650 <_init>
 8009ea8:	1b64      	subs	r4, r4, r5
 8009eaa:	10a4      	asrs	r4, r4, #2
 8009eac:	2600      	movs	r6, #0
 8009eae:	42a6      	cmp	r6, r4
 8009eb0:	d105      	bne.n	8009ebe <__libc_init_array+0x2e>
 8009eb2:	bd70      	pop	{r4, r5, r6, pc}
 8009eb4:	f855 3b04 	ldr.w	r3, [r5], #4
 8009eb8:	4798      	blx	r3
 8009eba:	3601      	adds	r6, #1
 8009ebc:	e7ee      	b.n	8009e9c <__libc_init_array+0xc>
 8009ebe:	f855 3b04 	ldr.w	r3, [r5], #4
 8009ec2:	4798      	blx	r3
 8009ec4:	3601      	adds	r6, #1
 8009ec6:	e7f2      	b.n	8009eae <__libc_init_array+0x1e>
 8009ec8:	0800e6f8 	.word	0x0800e6f8
 8009ecc:	0800e6f8 	.word	0x0800e6f8
 8009ed0:	0800e6f8 	.word	0x0800e6f8
 8009ed4:	0800e6fc 	.word	0x0800e6fc

08009ed8 <__retarget_lock_acquire_recursive>:
 8009ed8:	4770      	bx	lr

08009eda <__retarget_lock_release_recursive>:
 8009eda:	4770      	bx	lr

08009edc <nanf>:
 8009edc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8009ee4 <nanf+0x8>
 8009ee0:	4770      	bx	lr
 8009ee2:	bf00      	nop
 8009ee4:	7fc00000 	.word	0x7fc00000

08009ee8 <quorem>:
 8009ee8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009eec:	6903      	ldr	r3, [r0, #16]
 8009eee:	690c      	ldr	r4, [r1, #16]
 8009ef0:	42a3      	cmp	r3, r4
 8009ef2:	4607      	mov	r7, r0
 8009ef4:	db7e      	blt.n	8009ff4 <quorem+0x10c>
 8009ef6:	3c01      	subs	r4, #1
 8009ef8:	f101 0814 	add.w	r8, r1, #20
 8009efc:	f100 0514 	add.w	r5, r0, #20
 8009f00:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009f04:	9301      	str	r3, [sp, #4]
 8009f06:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009f0a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009f0e:	3301      	adds	r3, #1
 8009f10:	429a      	cmp	r2, r3
 8009f12:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009f16:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009f1a:	fbb2 f6f3 	udiv	r6, r2, r3
 8009f1e:	d331      	bcc.n	8009f84 <quorem+0x9c>
 8009f20:	f04f 0e00 	mov.w	lr, #0
 8009f24:	4640      	mov	r0, r8
 8009f26:	46ac      	mov	ip, r5
 8009f28:	46f2      	mov	sl, lr
 8009f2a:	f850 2b04 	ldr.w	r2, [r0], #4
 8009f2e:	b293      	uxth	r3, r2
 8009f30:	fb06 e303 	mla	r3, r6, r3, lr
 8009f34:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009f38:	0c1a      	lsrs	r2, r3, #16
 8009f3a:	b29b      	uxth	r3, r3
 8009f3c:	ebaa 0303 	sub.w	r3, sl, r3
 8009f40:	f8dc a000 	ldr.w	sl, [ip]
 8009f44:	fa13 f38a 	uxtah	r3, r3, sl
 8009f48:	fb06 220e 	mla	r2, r6, lr, r2
 8009f4c:	9300      	str	r3, [sp, #0]
 8009f4e:	9b00      	ldr	r3, [sp, #0]
 8009f50:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009f54:	b292      	uxth	r2, r2
 8009f56:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009f5a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009f5e:	f8bd 3000 	ldrh.w	r3, [sp]
 8009f62:	4581      	cmp	r9, r0
 8009f64:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009f68:	f84c 3b04 	str.w	r3, [ip], #4
 8009f6c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009f70:	d2db      	bcs.n	8009f2a <quorem+0x42>
 8009f72:	f855 300b 	ldr.w	r3, [r5, fp]
 8009f76:	b92b      	cbnz	r3, 8009f84 <quorem+0x9c>
 8009f78:	9b01      	ldr	r3, [sp, #4]
 8009f7a:	3b04      	subs	r3, #4
 8009f7c:	429d      	cmp	r5, r3
 8009f7e:	461a      	mov	r2, r3
 8009f80:	d32c      	bcc.n	8009fdc <quorem+0xf4>
 8009f82:	613c      	str	r4, [r7, #16]
 8009f84:	4638      	mov	r0, r7
 8009f86:	f001 f9ef 	bl	800b368 <__mcmp>
 8009f8a:	2800      	cmp	r0, #0
 8009f8c:	db22      	blt.n	8009fd4 <quorem+0xec>
 8009f8e:	3601      	adds	r6, #1
 8009f90:	4629      	mov	r1, r5
 8009f92:	2000      	movs	r0, #0
 8009f94:	f858 2b04 	ldr.w	r2, [r8], #4
 8009f98:	f8d1 c000 	ldr.w	ip, [r1]
 8009f9c:	b293      	uxth	r3, r2
 8009f9e:	1ac3      	subs	r3, r0, r3
 8009fa0:	0c12      	lsrs	r2, r2, #16
 8009fa2:	fa13 f38c 	uxtah	r3, r3, ip
 8009fa6:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8009faa:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009fae:	b29b      	uxth	r3, r3
 8009fb0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009fb4:	45c1      	cmp	r9, r8
 8009fb6:	f841 3b04 	str.w	r3, [r1], #4
 8009fba:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009fbe:	d2e9      	bcs.n	8009f94 <quorem+0xac>
 8009fc0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009fc4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009fc8:	b922      	cbnz	r2, 8009fd4 <quorem+0xec>
 8009fca:	3b04      	subs	r3, #4
 8009fcc:	429d      	cmp	r5, r3
 8009fce:	461a      	mov	r2, r3
 8009fd0:	d30a      	bcc.n	8009fe8 <quorem+0x100>
 8009fd2:	613c      	str	r4, [r7, #16]
 8009fd4:	4630      	mov	r0, r6
 8009fd6:	b003      	add	sp, #12
 8009fd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fdc:	6812      	ldr	r2, [r2, #0]
 8009fde:	3b04      	subs	r3, #4
 8009fe0:	2a00      	cmp	r2, #0
 8009fe2:	d1ce      	bne.n	8009f82 <quorem+0x9a>
 8009fe4:	3c01      	subs	r4, #1
 8009fe6:	e7c9      	b.n	8009f7c <quorem+0x94>
 8009fe8:	6812      	ldr	r2, [r2, #0]
 8009fea:	3b04      	subs	r3, #4
 8009fec:	2a00      	cmp	r2, #0
 8009fee:	d1f0      	bne.n	8009fd2 <quorem+0xea>
 8009ff0:	3c01      	subs	r4, #1
 8009ff2:	e7eb      	b.n	8009fcc <quorem+0xe4>
 8009ff4:	2000      	movs	r0, #0
 8009ff6:	e7ee      	b.n	8009fd6 <quorem+0xee>

08009ff8 <_dtoa_r>:
 8009ff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ffc:	ed2d 8b04 	vpush	{d8-d9}
 800a000:	69c5      	ldr	r5, [r0, #28]
 800a002:	b093      	sub	sp, #76	; 0x4c
 800a004:	ed8d 0b02 	vstr	d0, [sp, #8]
 800a008:	ec57 6b10 	vmov	r6, r7, d0
 800a00c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a010:	9107      	str	r1, [sp, #28]
 800a012:	4604      	mov	r4, r0
 800a014:	920a      	str	r2, [sp, #40]	; 0x28
 800a016:	930d      	str	r3, [sp, #52]	; 0x34
 800a018:	b975      	cbnz	r5, 800a038 <_dtoa_r+0x40>
 800a01a:	2010      	movs	r0, #16
 800a01c:	f000 fe2a 	bl	800ac74 <malloc>
 800a020:	4602      	mov	r2, r0
 800a022:	61e0      	str	r0, [r4, #28]
 800a024:	b920      	cbnz	r0, 800a030 <_dtoa_r+0x38>
 800a026:	4bae      	ldr	r3, [pc, #696]	; (800a2e0 <_dtoa_r+0x2e8>)
 800a028:	21ef      	movs	r1, #239	; 0xef
 800a02a:	48ae      	ldr	r0, [pc, #696]	; (800a2e4 <_dtoa_r+0x2ec>)
 800a02c:	f002 fc74 	bl	800c918 <__assert_func>
 800a030:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a034:	6005      	str	r5, [r0, #0]
 800a036:	60c5      	str	r5, [r0, #12]
 800a038:	69e3      	ldr	r3, [r4, #28]
 800a03a:	6819      	ldr	r1, [r3, #0]
 800a03c:	b151      	cbz	r1, 800a054 <_dtoa_r+0x5c>
 800a03e:	685a      	ldr	r2, [r3, #4]
 800a040:	604a      	str	r2, [r1, #4]
 800a042:	2301      	movs	r3, #1
 800a044:	4093      	lsls	r3, r2
 800a046:	608b      	str	r3, [r1, #8]
 800a048:	4620      	mov	r0, r4
 800a04a:	f000 ff07 	bl	800ae5c <_Bfree>
 800a04e:	69e3      	ldr	r3, [r4, #28]
 800a050:	2200      	movs	r2, #0
 800a052:	601a      	str	r2, [r3, #0]
 800a054:	1e3b      	subs	r3, r7, #0
 800a056:	bfbb      	ittet	lt
 800a058:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a05c:	9303      	strlt	r3, [sp, #12]
 800a05e:	2300      	movge	r3, #0
 800a060:	2201      	movlt	r2, #1
 800a062:	bfac      	ite	ge
 800a064:	f8c8 3000 	strge.w	r3, [r8]
 800a068:	f8c8 2000 	strlt.w	r2, [r8]
 800a06c:	4b9e      	ldr	r3, [pc, #632]	; (800a2e8 <_dtoa_r+0x2f0>)
 800a06e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800a072:	ea33 0308 	bics.w	r3, r3, r8
 800a076:	d11b      	bne.n	800a0b0 <_dtoa_r+0xb8>
 800a078:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a07a:	f242 730f 	movw	r3, #9999	; 0x270f
 800a07e:	6013      	str	r3, [r2, #0]
 800a080:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800a084:	4333      	orrs	r3, r6
 800a086:	f000 8593 	beq.w	800abb0 <_dtoa_r+0xbb8>
 800a08a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a08c:	b963      	cbnz	r3, 800a0a8 <_dtoa_r+0xb0>
 800a08e:	4b97      	ldr	r3, [pc, #604]	; (800a2ec <_dtoa_r+0x2f4>)
 800a090:	e027      	b.n	800a0e2 <_dtoa_r+0xea>
 800a092:	4b97      	ldr	r3, [pc, #604]	; (800a2f0 <_dtoa_r+0x2f8>)
 800a094:	9300      	str	r3, [sp, #0]
 800a096:	3308      	adds	r3, #8
 800a098:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a09a:	6013      	str	r3, [r2, #0]
 800a09c:	9800      	ldr	r0, [sp, #0]
 800a09e:	b013      	add	sp, #76	; 0x4c
 800a0a0:	ecbd 8b04 	vpop	{d8-d9}
 800a0a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0a8:	4b90      	ldr	r3, [pc, #576]	; (800a2ec <_dtoa_r+0x2f4>)
 800a0aa:	9300      	str	r3, [sp, #0]
 800a0ac:	3303      	adds	r3, #3
 800a0ae:	e7f3      	b.n	800a098 <_dtoa_r+0xa0>
 800a0b0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a0b4:	2200      	movs	r2, #0
 800a0b6:	ec51 0b17 	vmov	r0, r1, d7
 800a0ba:	eeb0 8a47 	vmov.f32	s16, s14
 800a0be:	eef0 8a67 	vmov.f32	s17, s15
 800a0c2:	2300      	movs	r3, #0
 800a0c4:	f7f6 fd00 	bl	8000ac8 <__aeabi_dcmpeq>
 800a0c8:	4681      	mov	r9, r0
 800a0ca:	b160      	cbz	r0, 800a0e6 <_dtoa_r+0xee>
 800a0cc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a0ce:	2301      	movs	r3, #1
 800a0d0:	6013      	str	r3, [r2, #0]
 800a0d2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	f000 8568 	beq.w	800abaa <_dtoa_r+0xbb2>
 800a0da:	4b86      	ldr	r3, [pc, #536]	; (800a2f4 <_dtoa_r+0x2fc>)
 800a0dc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a0de:	6013      	str	r3, [r2, #0]
 800a0e0:	3b01      	subs	r3, #1
 800a0e2:	9300      	str	r3, [sp, #0]
 800a0e4:	e7da      	b.n	800a09c <_dtoa_r+0xa4>
 800a0e6:	aa10      	add	r2, sp, #64	; 0x40
 800a0e8:	a911      	add	r1, sp, #68	; 0x44
 800a0ea:	4620      	mov	r0, r4
 800a0ec:	eeb0 0a48 	vmov.f32	s0, s16
 800a0f0:	eef0 0a68 	vmov.f32	s1, s17
 800a0f4:	f001 fa4e 	bl	800b594 <__d2b>
 800a0f8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800a0fc:	4682      	mov	sl, r0
 800a0fe:	2d00      	cmp	r5, #0
 800a100:	d07f      	beq.n	800a202 <_dtoa_r+0x20a>
 800a102:	ee18 3a90 	vmov	r3, s17
 800a106:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a10a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800a10e:	ec51 0b18 	vmov	r0, r1, d8
 800a112:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a116:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a11a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800a11e:	4619      	mov	r1, r3
 800a120:	2200      	movs	r2, #0
 800a122:	4b75      	ldr	r3, [pc, #468]	; (800a2f8 <_dtoa_r+0x300>)
 800a124:	f7f6 f8b0 	bl	8000288 <__aeabi_dsub>
 800a128:	a367      	add	r3, pc, #412	; (adr r3, 800a2c8 <_dtoa_r+0x2d0>)
 800a12a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a12e:	f7f6 fa63 	bl	80005f8 <__aeabi_dmul>
 800a132:	a367      	add	r3, pc, #412	; (adr r3, 800a2d0 <_dtoa_r+0x2d8>)
 800a134:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a138:	f7f6 f8a8 	bl	800028c <__adddf3>
 800a13c:	4606      	mov	r6, r0
 800a13e:	4628      	mov	r0, r5
 800a140:	460f      	mov	r7, r1
 800a142:	f7f6 f9ef 	bl	8000524 <__aeabi_i2d>
 800a146:	a364      	add	r3, pc, #400	; (adr r3, 800a2d8 <_dtoa_r+0x2e0>)
 800a148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a14c:	f7f6 fa54 	bl	80005f8 <__aeabi_dmul>
 800a150:	4602      	mov	r2, r0
 800a152:	460b      	mov	r3, r1
 800a154:	4630      	mov	r0, r6
 800a156:	4639      	mov	r1, r7
 800a158:	f7f6 f898 	bl	800028c <__adddf3>
 800a15c:	4606      	mov	r6, r0
 800a15e:	460f      	mov	r7, r1
 800a160:	f7f6 fcfa 	bl	8000b58 <__aeabi_d2iz>
 800a164:	2200      	movs	r2, #0
 800a166:	4683      	mov	fp, r0
 800a168:	2300      	movs	r3, #0
 800a16a:	4630      	mov	r0, r6
 800a16c:	4639      	mov	r1, r7
 800a16e:	f7f6 fcb5 	bl	8000adc <__aeabi_dcmplt>
 800a172:	b148      	cbz	r0, 800a188 <_dtoa_r+0x190>
 800a174:	4658      	mov	r0, fp
 800a176:	f7f6 f9d5 	bl	8000524 <__aeabi_i2d>
 800a17a:	4632      	mov	r2, r6
 800a17c:	463b      	mov	r3, r7
 800a17e:	f7f6 fca3 	bl	8000ac8 <__aeabi_dcmpeq>
 800a182:	b908      	cbnz	r0, 800a188 <_dtoa_r+0x190>
 800a184:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a188:	f1bb 0f16 	cmp.w	fp, #22
 800a18c:	d857      	bhi.n	800a23e <_dtoa_r+0x246>
 800a18e:	4b5b      	ldr	r3, [pc, #364]	; (800a2fc <_dtoa_r+0x304>)
 800a190:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a194:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a198:	ec51 0b18 	vmov	r0, r1, d8
 800a19c:	f7f6 fc9e 	bl	8000adc <__aeabi_dcmplt>
 800a1a0:	2800      	cmp	r0, #0
 800a1a2:	d04e      	beq.n	800a242 <_dtoa_r+0x24a>
 800a1a4:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a1a8:	2300      	movs	r3, #0
 800a1aa:	930c      	str	r3, [sp, #48]	; 0x30
 800a1ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a1ae:	1b5b      	subs	r3, r3, r5
 800a1b0:	1e5a      	subs	r2, r3, #1
 800a1b2:	bf45      	ittet	mi
 800a1b4:	f1c3 0301 	rsbmi	r3, r3, #1
 800a1b8:	9305      	strmi	r3, [sp, #20]
 800a1ba:	2300      	movpl	r3, #0
 800a1bc:	2300      	movmi	r3, #0
 800a1be:	9206      	str	r2, [sp, #24]
 800a1c0:	bf54      	ite	pl
 800a1c2:	9305      	strpl	r3, [sp, #20]
 800a1c4:	9306      	strmi	r3, [sp, #24]
 800a1c6:	f1bb 0f00 	cmp.w	fp, #0
 800a1ca:	db3c      	blt.n	800a246 <_dtoa_r+0x24e>
 800a1cc:	9b06      	ldr	r3, [sp, #24]
 800a1ce:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800a1d2:	445b      	add	r3, fp
 800a1d4:	9306      	str	r3, [sp, #24]
 800a1d6:	2300      	movs	r3, #0
 800a1d8:	9308      	str	r3, [sp, #32]
 800a1da:	9b07      	ldr	r3, [sp, #28]
 800a1dc:	2b09      	cmp	r3, #9
 800a1de:	d868      	bhi.n	800a2b2 <_dtoa_r+0x2ba>
 800a1e0:	2b05      	cmp	r3, #5
 800a1e2:	bfc4      	itt	gt
 800a1e4:	3b04      	subgt	r3, #4
 800a1e6:	9307      	strgt	r3, [sp, #28]
 800a1e8:	9b07      	ldr	r3, [sp, #28]
 800a1ea:	f1a3 0302 	sub.w	r3, r3, #2
 800a1ee:	bfcc      	ite	gt
 800a1f0:	2500      	movgt	r5, #0
 800a1f2:	2501      	movle	r5, #1
 800a1f4:	2b03      	cmp	r3, #3
 800a1f6:	f200 8085 	bhi.w	800a304 <_dtoa_r+0x30c>
 800a1fa:	e8df f003 	tbb	[pc, r3]
 800a1fe:	3b2e      	.short	0x3b2e
 800a200:	5839      	.short	0x5839
 800a202:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800a206:	441d      	add	r5, r3
 800a208:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a20c:	2b20      	cmp	r3, #32
 800a20e:	bfc1      	itttt	gt
 800a210:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a214:	fa08 f803 	lslgt.w	r8, r8, r3
 800a218:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800a21c:	fa26 f303 	lsrgt.w	r3, r6, r3
 800a220:	bfd6      	itet	le
 800a222:	f1c3 0320 	rsble	r3, r3, #32
 800a226:	ea48 0003 	orrgt.w	r0, r8, r3
 800a22a:	fa06 f003 	lslle.w	r0, r6, r3
 800a22e:	f7f6 f969 	bl	8000504 <__aeabi_ui2d>
 800a232:	2201      	movs	r2, #1
 800a234:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800a238:	3d01      	subs	r5, #1
 800a23a:	920e      	str	r2, [sp, #56]	; 0x38
 800a23c:	e76f      	b.n	800a11e <_dtoa_r+0x126>
 800a23e:	2301      	movs	r3, #1
 800a240:	e7b3      	b.n	800a1aa <_dtoa_r+0x1b2>
 800a242:	900c      	str	r0, [sp, #48]	; 0x30
 800a244:	e7b2      	b.n	800a1ac <_dtoa_r+0x1b4>
 800a246:	9b05      	ldr	r3, [sp, #20]
 800a248:	eba3 030b 	sub.w	r3, r3, fp
 800a24c:	9305      	str	r3, [sp, #20]
 800a24e:	f1cb 0300 	rsb	r3, fp, #0
 800a252:	9308      	str	r3, [sp, #32]
 800a254:	2300      	movs	r3, #0
 800a256:	930b      	str	r3, [sp, #44]	; 0x2c
 800a258:	e7bf      	b.n	800a1da <_dtoa_r+0x1e2>
 800a25a:	2300      	movs	r3, #0
 800a25c:	9309      	str	r3, [sp, #36]	; 0x24
 800a25e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a260:	2b00      	cmp	r3, #0
 800a262:	dc52      	bgt.n	800a30a <_dtoa_r+0x312>
 800a264:	2301      	movs	r3, #1
 800a266:	9301      	str	r3, [sp, #4]
 800a268:	9304      	str	r3, [sp, #16]
 800a26a:	461a      	mov	r2, r3
 800a26c:	920a      	str	r2, [sp, #40]	; 0x28
 800a26e:	e00b      	b.n	800a288 <_dtoa_r+0x290>
 800a270:	2301      	movs	r3, #1
 800a272:	e7f3      	b.n	800a25c <_dtoa_r+0x264>
 800a274:	2300      	movs	r3, #0
 800a276:	9309      	str	r3, [sp, #36]	; 0x24
 800a278:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a27a:	445b      	add	r3, fp
 800a27c:	9301      	str	r3, [sp, #4]
 800a27e:	3301      	adds	r3, #1
 800a280:	2b01      	cmp	r3, #1
 800a282:	9304      	str	r3, [sp, #16]
 800a284:	bfb8      	it	lt
 800a286:	2301      	movlt	r3, #1
 800a288:	69e0      	ldr	r0, [r4, #28]
 800a28a:	2100      	movs	r1, #0
 800a28c:	2204      	movs	r2, #4
 800a28e:	f102 0614 	add.w	r6, r2, #20
 800a292:	429e      	cmp	r6, r3
 800a294:	d93d      	bls.n	800a312 <_dtoa_r+0x31a>
 800a296:	6041      	str	r1, [r0, #4]
 800a298:	4620      	mov	r0, r4
 800a29a:	f000 fd9f 	bl	800addc <_Balloc>
 800a29e:	9000      	str	r0, [sp, #0]
 800a2a0:	2800      	cmp	r0, #0
 800a2a2:	d139      	bne.n	800a318 <_dtoa_r+0x320>
 800a2a4:	4b16      	ldr	r3, [pc, #88]	; (800a300 <_dtoa_r+0x308>)
 800a2a6:	4602      	mov	r2, r0
 800a2a8:	f240 11af 	movw	r1, #431	; 0x1af
 800a2ac:	e6bd      	b.n	800a02a <_dtoa_r+0x32>
 800a2ae:	2301      	movs	r3, #1
 800a2b0:	e7e1      	b.n	800a276 <_dtoa_r+0x27e>
 800a2b2:	2501      	movs	r5, #1
 800a2b4:	2300      	movs	r3, #0
 800a2b6:	9307      	str	r3, [sp, #28]
 800a2b8:	9509      	str	r5, [sp, #36]	; 0x24
 800a2ba:	f04f 33ff 	mov.w	r3, #4294967295
 800a2be:	9301      	str	r3, [sp, #4]
 800a2c0:	9304      	str	r3, [sp, #16]
 800a2c2:	2200      	movs	r2, #0
 800a2c4:	2312      	movs	r3, #18
 800a2c6:	e7d1      	b.n	800a26c <_dtoa_r+0x274>
 800a2c8:	636f4361 	.word	0x636f4361
 800a2cc:	3fd287a7 	.word	0x3fd287a7
 800a2d0:	8b60c8b3 	.word	0x8b60c8b3
 800a2d4:	3fc68a28 	.word	0x3fc68a28
 800a2d8:	509f79fb 	.word	0x509f79fb
 800a2dc:	3fd34413 	.word	0x3fd34413
 800a2e0:	0800e312 	.word	0x0800e312
 800a2e4:	0800e329 	.word	0x0800e329
 800a2e8:	7ff00000 	.word	0x7ff00000
 800a2ec:	0800e30e 	.word	0x0800e30e
 800a2f0:	0800e305 	.word	0x0800e305
 800a2f4:	0800e2dd 	.word	0x0800e2dd
 800a2f8:	3ff80000 	.word	0x3ff80000
 800a2fc:	0800e418 	.word	0x0800e418
 800a300:	0800e381 	.word	0x0800e381
 800a304:	2301      	movs	r3, #1
 800a306:	9309      	str	r3, [sp, #36]	; 0x24
 800a308:	e7d7      	b.n	800a2ba <_dtoa_r+0x2c2>
 800a30a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a30c:	9301      	str	r3, [sp, #4]
 800a30e:	9304      	str	r3, [sp, #16]
 800a310:	e7ba      	b.n	800a288 <_dtoa_r+0x290>
 800a312:	3101      	adds	r1, #1
 800a314:	0052      	lsls	r2, r2, #1
 800a316:	e7ba      	b.n	800a28e <_dtoa_r+0x296>
 800a318:	69e3      	ldr	r3, [r4, #28]
 800a31a:	9a00      	ldr	r2, [sp, #0]
 800a31c:	601a      	str	r2, [r3, #0]
 800a31e:	9b04      	ldr	r3, [sp, #16]
 800a320:	2b0e      	cmp	r3, #14
 800a322:	f200 80a8 	bhi.w	800a476 <_dtoa_r+0x47e>
 800a326:	2d00      	cmp	r5, #0
 800a328:	f000 80a5 	beq.w	800a476 <_dtoa_r+0x47e>
 800a32c:	f1bb 0f00 	cmp.w	fp, #0
 800a330:	dd38      	ble.n	800a3a4 <_dtoa_r+0x3ac>
 800a332:	4bc0      	ldr	r3, [pc, #768]	; (800a634 <_dtoa_r+0x63c>)
 800a334:	f00b 020f 	and.w	r2, fp, #15
 800a338:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a33c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800a340:	e9d3 6700 	ldrd	r6, r7, [r3]
 800a344:	ea4f 182b 	mov.w	r8, fp, asr #4
 800a348:	d019      	beq.n	800a37e <_dtoa_r+0x386>
 800a34a:	4bbb      	ldr	r3, [pc, #748]	; (800a638 <_dtoa_r+0x640>)
 800a34c:	ec51 0b18 	vmov	r0, r1, d8
 800a350:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a354:	f7f6 fa7a 	bl	800084c <__aeabi_ddiv>
 800a358:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a35c:	f008 080f 	and.w	r8, r8, #15
 800a360:	2503      	movs	r5, #3
 800a362:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800a638 <_dtoa_r+0x640>
 800a366:	f1b8 0f00 	cmp.w	r8, #0
 800a36a:	d10a      	bne.n	800a382 <_dtoa_r+0x38a>
 800a36c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a370:	4632      	mov	r2, r6
 800a372:	463b      	mov	r3, r7
 800a374:	f7f6 fa6a 	bl	800084c <__aeabi_ddiv>
 800a378:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a37c:	e02b      	b.n	800a3d6 <_dtoa_r+0x3de>
 800a37e:	2502      	movs	r5, #2
 800a380:	e7ef      	b.n	800a362 <_dtoa_r+0x36a>
 800a382:	f018 0f01 	tst.w	r8, #1
 800a386:	d008      	beq.n	800a39a <_dtoa_r+0x3a2>
 800a388:	4630      	mov	r0, r6
 800a38a:	4639      	mov	r1, r7
 800a38c:	e9d9 2300 	ldrd	r2, r3, [r9]
 800a390:	f7f6 f932 	bl	80005f8 <__aeabi_dmul>
 800a394:	3501      	adds	r5, #1
 800a396:	4606      	mov	r6, r0
 800a398:	460f      	mov	r7, r1
 800a39a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800a39e:	f109 0908 	add.w	r9, r9, #8
 800a3a2:	e7e0      	b.n	800a366 <_dtoa_r+0x36e>
 800a3a4:	f000 809f 	beq.w	800a4e6 <_dtoa_r+0x4ee>
 800a3a8:	f1cb 0600 	rsb	r6, fp, #0
 800a3ac:	4ba1      	ldr	r3, [pc, #644]	; (800a634 <_dtoa_r+0x63c>)
 800a3ae:	4fa2      	ldr	r7, [pc, #648]	; (800a638 <_dtoa_r+0x640>)
 800a3b0:	f006 020f 	and.w	r2, r6, #15
 800a3b4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a3b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3bc:	ec51 0b18 	vmov	r0, r1, d8
 800a3c0:	f7f6 f91a 	bl	80005f8 <__aeabi_dmul>
 800a3c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a3c8:	1136      	asrs	r6, r6, #4
 800a3ca:	2300      	movs	r3, #0
 800a3cc:	2502      	movs	r5, #2
 800a3ce:	2e00      	cmp	r6, #0
 800a3d0:	d17e      	bne.n	800a4d0 <_dtoa_r+0x4d8>
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d1d0      	bne.n	800a378 <_dtoa_r+0x380>
 800a3d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a3d8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	f000 8084 	beq.w	800a4ea <_dtoa_r+0x4f2>
 800a3e2:	4b96      	ldr	r3, [pc, #600]	; (800a63c <_dtoa_r+0x644>)
 800a3e4:	2200      	movs	r2, #0
 800a3e6:	4640      	mov	r0, r8
 800a3e8:	4649      	mov	r1, r9
 800a3ea:	f7f6 fb77 	bl	8000adc <__aeabi_dcmplt>
 800a3ee:	2800      	cmp	r0, #0
 800a3f0:	d07b      	beq.n	800a4ea <_dtoa_r+0x4f2>
 800a3f2:	9b04      	ldr	r3, [sp, #16]
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d078      	beq.n	800a4ea <_dtoa_r+0x4f2>
 800a3f8:	9b01      	ldr	r3, [sp, #4]
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	dd39      	ble.n	800a472 <_dtoa_r+0x47a>
 800a3fe:	4b90      	ldr	r3, [pc, #576]	; (800a640 <_dtoa_r+0x648>)
 800a400:	2200      	movs	r2, #0
 800a402:	4640      	mov	r0, r8
 800a404:	4649      	mov	r1, r9
 800a406:	f7f6 f8f7 	bl	80005f8 <__aeabi_dmul>
 800a40a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a40e:	9e01      	ldr	r6, [sp, #4]
 800a410:	f10b 37ff 	add.w	r7, fp, #4294967295
 800a414:	3501      	adds	r5, #1
 800a416:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800a41a:	4628      	mov	r0, r5
 800a41c:	f7f6 f882 	bl	8000524 <__aeabi_i2d>
 800a420:	4642      	mov	r2, r8
 800a422:	464b      	mov	r3, r9
 800a424:	f7f6 f8e8 	bl	80005f8 <__aeabi_dmul>
 800a428:	4b86      	ldr	r3, [pc, #536]	; (800a644 <_dtoa_r+0x64c>)
 800a42a:	2200      	movs	r2, #0
 800a42c:	f7f5 ff2e 	bl	800028c <__adddf3>
 800a430:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800a434:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a438:	9303      	str	r3, [sp, #12]
 800a43a:	2e00      	cmp	r6, #0
 800a43c:	d158      	bne.n	800a4f0 <_dtoa_r+0x4f8>
 800a43e:	4b82      	ldr	r3, [pc, #520]	; (800a648 <_dtoa_r+0x650>)
 800a440:	2200      	movs	r2, #0
 800a442:	4640      	mov	r0, r8
 800a444:	4649      	mov	r1, r9
 800a446:	f7f5 ff1f 	bl	8000288 <__aeabi_dsub>
 800a44a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a44e:	4680      	mov	r8, r0
 800a450:	4689      	mov	r9, r1
 800a452:	f7f6 fb61 	bl	8000b18 <__aeabi_dcmpgt>
 800a456:	2800      	cmp	r0, #0
 800a458:	f040 8296 	bne.w	800a988 <_dtoa_r+0x990>
 800a45c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800a460:	4640      	mov	r0, r8
 800a462:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a466:	4649      	mov	r1, r9
 800a468:	f7f6 fb38 	bl	8000adc <__aeabi_dcmplt>
 800a46c:	2800      	cmp	r0, #0
 800a46e:	f040 8289 	bne.w	800a984 <_dtoa_r+0x98c>
 800a472:	ed8d 8b02 	vstr	d8, [sp, #8]
 800a476:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a478:	2b00      	cmp	r3, #0
 800a47a:	f2c0 814e 	blt.w	800a71a <_dtoa_r+0x722>
 800a47e:	f1bb 0f0e 	cmp.w	fp, #14
 800a482:	f300 814a 	bgt.w	800a71a <_dtoa_r+0x722>
 800a486:	4b6b      	ldr	r3, [pc, #428]	; (800a634 <_dtoa_r+0x63c>)
 800a488:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a48c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a490:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a492:	2b00      	cmp	r3, #0
 800a494:	f280 80dc 	bge.w	800a650 <_dtoa_r+0x658>
 800a498:	9b04      	ldr	r3, [sp, #16]
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	f300 80d8 	bgt.w	800a650 <_dtoa_r+0x658>
 800a4a0:	f040 826f 	bne.w	800a982 <_dtoa_r+0x98a>
 800a4a4:	4b68      	ldr	r3, [pc, #416]	; (800a648 <_dtoa_r+0x650>)
 800a4a6:	2200      	movs	r2, #0
 800a4a8:	4640      	mov	r0, r8
 800a4aa:	4649      	mov	r1, r9
 800a4ac:	f7f6 f8a4 	bl	80005f8 <__aeabi_dmul>
 800a4b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a4b4:	f7f6 fb26 	bl	8000b04 <__aeabi_dcmpge>
 800a4b8:	9e04      	ldr	r6, [sp, #16]
 800a4ba:	4637      	mov	r7, r6
 800a4bc:	2800      	cmp	r0, #0
 800a4be:	f040 8245 	bne.w	800a94c <_dtoa_r+0x954>
 800a4c2:	9d00      	ldr	r5, [sp, #0]
 800a4c4:	2331      	movs	r3, #49	; 0x31
 800a4c6:	f805 3b01 	strb.w	r3, [r5], #1
 800a4ca:	f10b 0b01 	add.w	fp, fp, #1
 800a4ce:	e241      	b.n	800a954 <_dtoa_r+0x95c>
 800a4d0:	07f2      	lsls	r2, r6, #31
 800a4d2:	d505      	bpl.n	800a4e0 <_dtoa_r+0x4e8>
 800a4d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a4d8:	f7f6 f88e 	bl	80005f8 <__aeabi_dmul>
 800a4dc:	3501      	adds	r5, #1
 800a4de:	2301      	movs	r3, #1
 800a4e0:	1076      	asrs	r6, r6, #1
 800a4e2:	3708      	adds	r7, #8
 800a4e4:	e773      	b.n	800a3ce <_dtoa_r+0x3d6>
 800a4e6:	2502      	movs	r5, #2
 800a4e8:	e775      	b.n	800a3d6 <_dtoa_r+0x3de>
 800a4ea:	9e04      	ldr	r6, [sp, #16]
 800a4ec:	465f      	mov	r7, fp
 800a4ee:	e792      	b.n	800a416 <_dtoa_r+0x41e>
 800a4f0:	9900      	ldr	r1, [sp, #0]
 800a4f2:	4b50      	ldr	r3, [pc, #320]	; (800a634 <_dtoa_r+0x63c>)
 800a4f4:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a4f8:	4431      	add	r1, r6
 800a4fa:	9102      	str	r1, [sp, #8]
 800a4fc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a4fe:	eeb0 9a47 	vmov.f32	s18, s14
 800a502:	eef0 9a67 	vmov.f32	s19, s15
 800a506:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a50a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a50e:	2900      	cmp	r1, #0
 800a510:	d044      	beq.n	800a59c <_dtoa_r+0x5a4>
 800a512:	494e      	ldr	r1, [pc, #312]	; (800a64c <_dtoa_r+0x654>)
 800a514:	2000      	movs	r0, #0
 800a516:	f7f6 f999 	bl	800084c <__aeabi_ddiv>
 800a51a:	ec53 2b19 	vmov	r2, r3, d9
 800a51e:	f7f5 feb3 	bl	8000288 <__aeabi_dsub>
 800a522:	9d00      	ldr	r5, [sp, #0]
 800a524:	ec41 0b19 	vmov	d9, r0, r1
 800a528:	4649      	mov	r1, r9
 800a52a:	4640      	mov	r0, r8
 800a52c:	f7f6 fb14 	bl	8000b58 <__aeabi_d2iz>
 800a530:	4606      	mov	r6, r0
 800a532:	f7f5 fff7 	bl	8000524 <__aeabi_i2d>
 800a536:	4602      	mov	r2, r0
 800a538:	460b      	mov	r3, r1
 800a53a:	4640      	mov	r0, r8
 800a53c:	4649      	mov	r1, r9
 800a53e:	f7f5 fea3 	bl	8000288 <__aeabi_dsub>
 800a542:	3630      	adds	r6, #48	; 0x30
 800a544:	f805 6b01 	strb.w	r6, [r5], #1
 800a548:	ec53 2b19 	vmov	r2, r3, d9
 800a54c:	4680      	mov	r8, r0
 800a54e:	4689      	mov	r9, r1
 800a550:	f7f6 fac4 	bl	8000adc <__aeabi_dcmplt>
 800a554:	2800      	cmp	r0, #0
 800a556:	d164      	bne.n	800a622 <_dtoa_r+0x62a>
 800a558:	4642      	mov	r2, r8
 800a55a:	464b      	mov	r3, r9
 800a55c:	4937      	ldr	r1, [pc, #220]	; (800a63c <_dtoa_r+0x644>)
 800a55e:	2000      	movs	r0, #0
 800a560:	f7f5 fe92 	bl	8000288 <__aeabi_dsub>
 800a564:	ec53 2b19 	vmov	r2, r3, d9
 800a568:	f7f6 fab8 	bl	8000adc <__aeabi_dcmplt>
 800a56c:	2800      	cmp	r0, #0
 800a56e:	f040 80b6 	bne.w	800a6de <_dtoa_r+0x6e6>
 800a572:	9b02      	ldr	r3, [sp, #8]
 800a574:	429d      	cmp	r5, r3
 800a576:	f43f af7c 	beq.w	800a472 <_dtoa_r+0x47a>
 800a57a:	4b31      	ldr	r3, [pc, #196]	; (800a640 <_dtoa_r+0x648>)
 800a57c:	ec51 0b19 	vmov	r0, r1, d9
 800a580:	2200      	movs	r2, #0
 800a582:	f7f6 f839 	bl	80005f8 <__aeabi_dmul>
 800a586:	4b2e      	ldr	r3, [pc, #184]	; (800a640 <_dtoa_r+0x648>)
 800a588:	ec41 0b19 	vmov	d9, r0, r1
 800a58c:	2200      	movs	r2, #0
 800a58e:	4640      	mov	r0, r8
 800a590:	4649      	mov	r1, r9
 800a592:	f7f6 f831 	bl	80005f8 <__aeabi_dmul>
 800a596:	4680      	mov	r8, r0
 800a598:	4689      	mov	r9, r1
 800a59a:	e7c5      	b.n	800a528 <_dtoa_r+0x530>
 800a59c:	ec51 0b17 	vmov	r0, r1, d7
 800a5a0:	f7f6 f82a 	bl	80005f8 <__aeabi_dmul>
 800a5a4:	9b02      	ldr	r3, [sp, #8]
 800a5a6:	9d00      	ldr	r5, [sp, #0]
 800a5a8:	930f      	str	r3, [sp, #60]	; 0x3c
 800a5aa:	ec41 0b19 	vmov	d9, r0, r1
 800a5ae:	4649      	mov	r1, r9
 800a5b0:	4640      	mov	r0, r8
 800a5b2:	f7f6 fad1 	bl	8000b58 <__aeabi_d2iz>
 800a5b6:	4606      	mov	r6, r0
 800a5b8:	f7f5 ffb4 	bl	8000524 <__aeabi_i2d>
 800a5bc:	3630      	adds	r6, #48	; 0x30
 800a5be:	4602      	mov	r2, r0
 800a5c0:	460b      	mov	r3, r1
 800a5c2:	4640      	mov	r0, r8
 800a5c4:	4649      	mov	r1, r9
 800a5c6:	f7f5 fe5f 	bl	8000288 <__aeabi_dsub>
 800a5ca:	f805 6b01 	strb.w	r6, [r5], #1
 800a5ce:	9b02      	ldr	r3, [sp, #8]
 800a5d0:	429d      	cmp	r5, r3
 800a5d2:	4680      	mov	r8, r0
 800a5d4:	4689      	mov	r9, r1
 800a5d6:	f04f 0200 	mov.w	r2, #0
 800a5da:	d124      	bne.n	800a626 <_dtoa_r+0x62e>
 800a5dc:	4b1b      	ldr	r3, [pc, #108]	; (800a64c <_dtoa_r+0x654>)
 800a5de:	ec51 0b19 	vmov	r0, r1, d9
 800a5e2:	f7f5 fe53 	bl	800028c <__adddf3>
 800a5e6:	4602      	mov	r2, r0
 800a5e8:	460b      	mov	r3, r1
 800a5ea:	4640      	mov	r0, r8
 800a5ec:	4649      	mov	r1, r9
 800a5ee:	f7f6 fa93 	bl	8000b18 <__aeabi_dcmpgt>
 800a5f2:	2800      	cmp	r0, #0
 800a5f4:	d173      	bne.n	800a6de <_dtoa_r+0x6e6>
 800a5f6:	ec53 2b19 	vmov	r2, r3, d9
 800a5fa:	4914      	ldr	r1, [pc, #80]	; (800a64c <_dtoa_r+0x654>)
 800a5fc:	2000      	movs	r0, #0
 800a5fe:	f7f5 fe43 	bl	8000288 <__aeabi_dsub>
 800a602:	4602      	mov	r2, r0
 800a604:	460b      	mov	r3, r1
 800a606:	4640      	mov	r0, r8
 800a608:	4649      	mov	r1, r9
 800a60a:	f7f6 fa67 	bl	8000adc <__aeabi_dcmplt>
 800a60e:	2800      	cmp	r0, #0
 800a610:	f43f af2f 	beq.w	800a472 <_dtoa_r+0x47a>
 800a614:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a616:	1e6b      	subs	r3, r5, #1
 800a618:	930f      	str	r3, [sp, #60]	; 0x3c
 800a61a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a61e:	2b30      	cmp	r3, #48	; 0x30
 800a620:	d0f8      	beq.n	800a614 <_dtoa_r+0x61c>
 800a622:	46bb      	mov	fp, r7
 800a624:	e04a      	b.n	800a6bc <_dtoa_r+0x6c4>
 800a626:	4b06      	ldr	r3, [pc, #24]	; (800a640 <_dtoa_r+0x648>)
 800a628:	f7f5 ffe6 	bl	80005f8 <__aeabi_dmul>
 800a62c:	4680      	mov	r8, r0
 800a62e:	4689      	mov	r9, r1
 800a630:	e7bd      	b.n	800a5ae <_dtoa_r+0x5b6>
 800a632:	bf00      	nop
 800a634:	0800e418 	.word	0x0800e418
 800a638:	0800e3f0 	.word	0x0800e3f0
 800a63c:	3ff00000 	.word	0x3ff00000
 800a640:	40240000 	.word	0x40240000
 800a644:	401c0000 	.word	0x401c0000
 800a648:	40140000 	.word	0x40140000
 800a64c:	3fe00000 	.word	0x3fe00000
 800a650:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a654:	9d00      	ldr	r5, [sp, #0]
 800a656:	4642      	mov	r2, r8
 800a658:	464b      	mov	r3, r9
 800a65a:	4630      	mov	r0, r6
 800a65c:	4639      	mov	r1, r7
 800a65e:	f7f6 f8f5 	bl	800084c <__aeabi_ddiv>
 800a662:	f7f6 fa79 	bl	8000b58 <__aeabi_d2iz>
 800a666:	9001      	str	r0, [sp, #4]
 800a668:	f7f5 ff5c 	bl	8000524 <__aeabi_i2d>
 800a66c:	4642      	mov	r2, r8
 800a66e:	464b      	mov	r3, r9
 800a670:	f7f5 ffc2 	bl	80005f8 <__aeabi_dmul>
 800a674:	4602      	mov	r2, r0
 800a676:	460b      	mov	r3, r1
 800a678:	4630      	mov	r0, r6
 800a67a:	4639      	mov	r1, r7
 800a67c:	f7f5 fe04 	bl	8000288 <__aeabi_dsub>
 800a680:	9e01      	ldr	r6, [sp, #4]
 800a682:	9f04      	ldr	r7, [sp, #16]
 800a684:	3630      	adds	r6, #48	; 0x30
 800a686:	f805 6b01 	strb.w	r6, [r5], #1
 800a68a:	9e00      	ldr	r6, [sp, #0]
 800a68c:	1bae      	subs	r6, r5, r6
 800a68e:	42b7      	cmp	r7, r6
 800a690:	4602      	mov	r2, r0
 800a692:	460b      	mov	r3, r1
 800a694:	d134      	bne.n	800a700 <_dtoa_r+0x708>
 800a696:	f7f5 fdf9 	bl	800028c <__adddf3>
 800a69a:	4642      	mov	r2, r8
 800a69c:	464b      	mov	r3, r9
 800a69e:	4606      	mov	r6, r0
 800a6a0:	460f      	mov	r7, r1
 800a6a2:	f7f6 fa39 	bl	8000b18 <__aeabi_dcmpgt>
 800a6a6:	b9c8      	cbnz	r0, 800a6dc <_dtoa_r+0x6e4>
 800a6a8:	4642      	mov	r2, r8
 800a6aa:	464b      	mov	r3, r9
 800a6ac:	4630      	mov	r0, r6
 800a6ae:	4639      	mov	r1, r7
 800a6b0:	f7f6 fa0a 	bl	8000ac8 <__aeabi_dcmpeq>
 800a6b4:	b110      	cbz	r0, 800a6bc <_dtoa_r+0x6c4>
 800a6b6:	9b01      	ldr	r3, [sp, #4]
 800a6b8:	07db      	lsls	r3, r3, #31
 800a6ba:	d40f      	bmi.n	800a6dc <_dtoa_r+0x6e4>
 800a6bc:	4651      	mov	r1, sl
 800a6be:	4620      	mov	r0, r4
 800a6c0:	f000 fbcc 	bl	800ae5c <_Bfree>
 800a6c4:	2300      	movs	r3, #0
 800a6c6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a6c8:	702b      	strb	r3, [r5, #0]
 800a6ca:	f10b 0301 	add.w	r3, fp, #1
 800a6ce:	6013      	str	r3, [r2, #0]
 800a6d0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	f43f ace2 	beq.w	800a09c <_dtoa_r+0xa4>
 800a6d8:	601d      	str	r5, [r3, #0]
 800a6da:	e4df      	b.n	800a09c <_dtoa_r+0xa4>
 800a6dc:	465f      	mov	r7, fp
 800a6de:	462b      	mov	r3, r5
 800a6e0:	461d      	mov	r5, r3
 800a6e2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a6e6:	2a39      	cmp	r2, #57	; 0x39
 800a6e8:	d106      	bne.n	800a6f8 <_dtoa_r+0x700>
 800a6ea:	9a00      	ldr	r2, [sp, #0]
 800a6ec:	429a      	cmp	r2, r3
 800a6ee:	d1f7      	bne.n	800a6e0 <_dtoa_r+0x6e8>
 800a6f0:	9900      	ldr	r1, [sp, #0]
 800a6f2:	2230      	movs	r2, #48	; 0x30
 800a6f4:	3701      	adds	r7, #1
 800a6f6:	700a      	strb	r2, [r1, #0]
 800a6f8:	781a      	ldrb	r2, [r3, #0]
 800a6fa:	3201      	adds	r2, #1
 800a6fc:	701a      	strb	r2, [r3, #0]
 800a6fe:	e790      	b.n	800a622 <_dtoa_r+0x62a>
 800a700:	4ba3      	ldr	r3, [pc, #652]	; (800a990 <_dtoa_r+0x998>)
 800a702:	2200      	movs	r2, #0
 800a704:	f7f5 ff78 	bl	80005f8 <__aeabi_dmul>
 800a708:	2200      	movs	r2, #0
 800a70a:	2300      	movs	r3, #0
 800a70c:	4606      	mov	r6, r0
 800a70e:	460f      	mov	r7, r1
 800a710:	f7f6 f9da 	bl	8000ac8 <__aeabi_dcmpeq>
 800a714:	2800      	cmp	r0, #0
 800a716:	d09e      	beq.n	800a656 <_dtoa_r+0x65e>
 800a718:	e7d0      	b.n	800a6bc <_dtoa_r+0x6c4>
 800a71a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a71c:	2a00      	cmp	r2, #0
 800a71e:	f000 80ca 	beq.w	800a8b6 <_dtoa_r+0x8be>
 800a722:	9a07      	ldr	r2, [sp, #28]
 800a724:	2a01      	cmp	r2, #1
 800a726:	f300 80ad 	bgt.w	800a884 <_dtoa_r+0x88c>
 800a72a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a72c:	2a00      	cmp	r2, #0
 800a72e:	f000 80a5 	beq.w	800a87c <_dtoa_r+0x884>
 800a732:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a736:	9e08      	ldr	r6, [sp, #32]
 800a738:	9d05      	ldr	r5, [sp, #20]
 800a73a:	9a05      	ldr	r2, [sp, #20]
 800a73c:	441a      	add	r2, r3
 800a73e:	9205      	str	r2, [sp, #20]
 800a740:	9a06      	ldr	r2, [sp, #24]
 800a742:	2101      	movs	r1, #1
 800a744:	441a      	add	r2, r3
 800a746:	4620      	mov	r0, r4
 800a748:	9206      	str	r2, [sp, #24]
 800a74a:	f000 fc87 	bl	800b05c <__i2b>
 800a74e:	4607      	mov	r7, r0
 800a750:	b165      	cbz	r5, 800a76c <_dtoa_r+0x774>
 800a752:	9b06      	ldr	r3, [sp, #24]
 800a754:	2b00      	cmp	r3, #0
 800a756:	dd09      	ble.n	800a76c <_dtoa_r+0x774>
 800a758:	42ab      	cmp	r3, r5
 800a75a:	9a05      	ldr	r2, [sp, #20]
 800a75c:	bfa8      	it	ge
 800a75e:	462b      	movge	r3, r5
 800a760:	1ad2      	subs	r2, r2, r3
 800a762:	9205      	str	r2, [sp, #20]
 800a764:	9a06      	ldr	r2, [sp, #24]
 800a766:	1aed      	subs	r5, r5, r3
 800a768:	1ad3      	subs	r3, r2, r3
 800a76a:	9306      	str	r3, [sp, #24]
 800a76c:	9b08      	ldr	r3, [sp, #32]
 800a76e:	b1f3      	cbz	r3, 800a7ae <_dtoa_r+0x7b6>
 800a770:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a772:	2b00      	cmp	r3, #0
 800a774:	f000 80a3 	beq.w	800a8be <_dtoa_r+0x8c6>
 800a778:	2e00      	cmp	r6, #0
 800a77a:	dd10      	ble.n	800a79e <_dtoa_r+0x7a6>
 800a77c:	4639      	mov	r1, r7
 800a77e:	4632      	mov	r2, r6
 800a780:	4620      	mov	r0, r4
 800a782:	f000 fd2b 	bl	800b1dc <__pow5mult>
 800a786:	4652      	mov	r2, sl
 800a788:	4601      	mov	r1, r0
 800a78a:	4607      	mov	r7, r0
 800a78c:	4620      	mov	r0, r4
 800a78e:	f000 fc7b 	bl	800b088 <__multiply>
 800a792:	4651      	mov	r1, sl
 800a794:	4680      	mov	r8, r0
 800a796:	4620      	mov	r0, r4
 800a798:	f000 fb60 	bl	800ae5c <_Bfree>
 800a79c:	46c2      	mov	sl, r8
 800a79e:	9b08      	ldr	r3, [sp, #32]
 800a7a0:	1b9a      	subs	r2, r3, r6
 800a7a2:	d004      	beq.n	800a7ae <_dtoa_r+0x7b6>
 800a7a4:	4651      	mov	r1, sl
 800a7a6:	4620      	mov	r0, r4
 800a7a8:	f000 fd18 	bl	800b1dc <__pow5mult>
 800a7ac:	4682      	mov	sl, r0
 800a7ae:	2101      	movs	r1, #1
 800a7b0:	4620      	mov	r0, r4
 800a7b2:	f000 fc53 	bl	800b05c <__i2b>
 800a7b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	4606      	mov	r6, r0
 800a7bc:	f340 8081 	ble.w	800a8c2 <_dtoa_r+0x8ca>
 800a7c0:	461a      	mov	r2, r3
 800a7c2:	4601      	mov	r1, r0
 800a7c4:	4620      	mov	r0, r4
 800a7c6:	f000 fd09 	bl	800b1dc <__pow5mult>
 800a7ca:	9b07      	ldr	r3, [sp, #28]
 800a7cc:	2b01      	cmp	r3, #1
 800a7ce:	4606      	mov	r6, r0
 800a7d0:	dd7a      	ble.n	800a8c8 <_dtoa_r+0x8d0>
 800a7d2:	f04f 0800 	mov.w	r8, #0
 800a7d6:	6933      	ldr	r3, [r6, #16]
 800a7d8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a7dc:	6918      	ldr	r0, [r3, #16]
 800a7de:	f000 fbef 	bl	800afc0 <__hi0bits>
 800a7e2:	f1c0 0020 	rsb	r0, r0, #32
 800a7e6:	9b06      	ldr	r3, [sp, #24]
 800a7e8:	4418      	add	r0, r3
 800a7ea:	f010 001f 	ands.w	r0, r0, #31
 800a7ee:	f000 8094 	beq.w	800a91a <_dtoa_r+0x922>
 800a7f2:	f1c0 0320 	rsb	r3, r0, #32
 800a7f6:	2b04      	cmp	r3, #4
 800a7f8:	f340 8085 	ble.w	800a906 <_dtoa_r+0x90e>
 800a7fc:	9b05      	ldr	r3, [sp, #20]
 800a7fe:	f1c0 001c 	rsb	r0, r0, #28
 800a802:	4403      	add	r3, r0
 800a804:	9305      	str	r3, [sp, #20]
 800a806:	9b06      	ldr	r3, [sp, #24]
 800a808:	4403      	add	r3, r0
 800a80a:	4405      	add	r5, r0
 800a80c:	9306      	str	r3, [sp, #24]
 800a80e:	9b05      	ldr	r3, [sp, #20]
 800a810:	2b00      	cmp	r3, #0
 800a812:	dd05      	ble.n	800a820 <_dtoa_r+0x828>
 800a814:	4651      	mov	r1, sl
 800a816:	461a      	mov	r2, r3
 800a818:	4620      	mov	r0, r4
 800a81a:	f000 fd39 	bl	800b290 <__lshift>
 800a81e:	4682      	mov	sl, r0
 800a820:	9b06      	ldr	r3, [sp, #24]
 800a822:	2b00      	cmp	r3, #0
 800a824:	dd05      	ble.n	800a832 <_dtoa_r+0x83a>
 800a826:	4631      	mov	r1, r6
 800a828:	461a      	mov	r2, r3
 800a82a:	4620      	mov	r0, r4
 800a82c:	f000 fd30 	bl	800b290 <__lshift>
 800a830:	4606      	mov	r6, r0
 800a832:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a834:	2b00      	cmp	r3, #0
 800a836:	d072      	beq.n	800a91e <_dtoa_r+0x926>
 800a838:	4631      	mov	r1, r6
 800a83a:	4650      	mov	r0, sl
 800a83c:	f000 fd94 	bl	800b368 <__mcmp>
 800a840:	2800      	cmp	r0, #0
 800a842:	da6c      	bge.n	800a91e <_dtoa_r+0x926>
 800a844:	2300      	movs	r3, #0
 800a846:	4651      	mov	r1, sl
 800a848:	220a      	movs	r2, #10
 800a84a:	4620      	mov	r0, r4
 800a84c:	f000 fb28 	bl	800aea0 <__multadd>
 800a850:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a852:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a856:	4682      	mov	sl, r0
 800a858:	2b00      	cmp	r3, #0
 800a85a:	f000 81b0 	beq.w	800abbe <_dtoa_r+0xbc6>
 800a85e:	2300      	movs	r3, #0
 800a860:	4639      	mov	r1, r7
 800a862:	220a      	movs	r2, #10
 800a864:	4620      	mov	r0, r4
 800a866:	f000 fb1b 	bl	800aea0 <__multadd>
 800a86a:	9b01      	ldr	r3, [sp, #4]
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	4607      	mov	r7, r0
 800a870:	f300 8096 	bgt.w	800a9a0 <_dtoa_r+0x9a8>
 800a874:	9b07      	ldr	r3, [sp, #28]
 800a876:	2b02      	cmp	r3, #2
 800a878:	dc59      	bgt.n	800a92e <_dtoa_r+0x936>
 800a87a:	e091      	b.n	800a9a0 <_dtoa_r+0x9a8>
 800a87c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a87e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a882:	e758      	b.n	800a736 <_dtoa_r+0x73e>
 800a884:	9b04      	ldr	r3, [sp, #16]
 800a886:	1e5e      	subs	r6, r3, #1
 800a888:	9b08      	ldr	r3, [sp, #32]
 800a88a:	42b3      	cmp	r3, r6
 800a88c:	bfbf      	itttt	lt
 800a88e:	9b08      	ldrlt	r3, [sp, #32]
 800a890:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800a892:	9608      	strlt	r6, [sp, #32]
 800a894:	1af3      	sublt	r3, r6, r3
 800a896:	bfb4      	ite	lt
 800a898:	18d2      	addlt	r2, r2, r3
 800a89a:	1b9e      	subge	r6, r3, r6
 800a89c:	9b04      	ldr	r3, [sp, #16]
 800a89e:	bfbc      	itt	lt
 800a8a0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800a8a2:	2600      	movlt	r6, #0
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	bfb7      	itett	lt
 800a8a8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800a8ac:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800a8b0:	1a9d      	sublt	r5, r3, r2
 800a8b2:	2300      	movlt	r3, #0
 800a8b4:	e741      	b.n	800a73a <_dtoa_r+0x742>
 800a8b6:	9e08      	ldr	r6, [sp, #32]
 800a8b8:	9d05      	ldr	r5, [sp, #20]
 800a8ba:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800a8bc:	e748      	b.n	800a750 <_dtoa_r+0x758>
 800a8be:	9a08      	ldr	r2, [sp, #32]
 800a8c0:	e770      	b.n	800a7a4 <_dtoa_r+0x7ac>
 800a8c2:	9b07      	ldr	r3, [sp, #28]
 800a8c4:	2b01      	cmp	r3, #1
 800a8c6:	dc19      	bgt.n	800a8fc <_dtoa_r+0x904>
 800a8c8:	9b02      	ldr	r3, [sp, #8]
 800a8ca:	b9bb      	cbnz	r3, 800a8fc <_dtoa_r+0x904>
 800a8cc:	9b03      	ldr	r3, [sp, #12]
 800a8ce:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a8d2:	b99b      	cbnz	r3, 800a8fc <_dtoa_r+0x904>
 800a8d4:	9b03      	ldr	r3, [sp, #12]
 800a8d6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a8da:	0d1b      	lsrs	r3, r3, #20
 800a8dc:	051b      	lsls	r3, r3, #20
 800a8de:	b183      	cbz	r3, 800a902 <_dtoa_r+0x90a>
 800a8e0:	9b05      	ldr	r3, [sp, #20]
 800a8e2:	3301      	adds	r3, #1
 800a8e4:	9305      	str	r3, [sp, #20]
 800a8e6:	9b06      	ldr	r3, [sp, #24]
 800a8e8:	3301      	adds	r3, #1
 800a8ea:	9306      	str	r3, [sp, #24]
 800a8ec:	f04f 0801 	mov.w	r8, #1
 800a8f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	f47f af6f 	bne.w	800a7d6 <_dtoa_r+0x7de>
 800a8f8:	2001      	movs	r0, #1
 800a8fa:	e774      	b.n	800a7e6 <_dtoa_r+0x7ee>
 800a8fc:	f04f 0800 	mov.w	r8, #0
 800a900:	e7f6      	b.n	800a8f0 <_dtoa_r+0x8f8>
 800a902:	4698      	mov	r8, r3
 800a904:	e7f4      	b.n	800a8f0 <_dtoa_r+0x8f8>
 800a906:	d082      	beq.n	800a80e <_dtoa_r+0x816>
 800a908:	9a05      	ldr	r2, [sp, #20]
 800a90a:	331c      	adds	r3, #28
 800a90c:	441a      	add	r2, r3
 800a90e:	9205      	str	r2, [sp, #20]
 800a910:	9a06      	ldr	r2, [sp, #24]
 800a912:	441a      	add	r2, r3
 800a914:	441d      	add	r5, r3
 800a916:	9206      	str	r2, [sp, #24]
 800a918:	e779      	b.n	800a80e <_dtoa_r+0x816>
 800a91a:	4603      	mov	r3, r0
 800a91c:	e7f4      	b.n	800a908 <_dtoa_r+0x910>
 800a91e:	9b04      	ldr	r3, [sp, #16]
 800a920:	2b00      	cmp	r3, #0
 800a922:	dc37      	bgt.n	800a994 <_dtoa_r+0x99c>
 800a924:	9b07      	ldr	r3, [sp, #28]
 800a926:	2b02      	cmp	r3, #2
 800a928:	dd34      	ble.n	800a994 <_dtoa_r+0x99c>
 800a92a:	9b04      	ldr	r3, [sp, #16]
 800a92c:	9301      	str	r3, [sp, #4]
 800a92e:	9b01      	ldr	r3, [sp, #4]
 800a930:	b963      	cbnz	r3, 800a94c <_dtoa_r+0x954>
 800a932:	4631      	mov	r1, r6
 800a934:	2205      	movs	r2, #5
 800a936:	4620      	mov	r0, r4
 800a938:	f000 fab2 	bl	800aea0 <__multadd>
 800a93c:	4601      	mov	r1, r0
 800a93e:	4606      	mov	r6, r0
 800a940:	4650      	mov	r0, sl
 800a942:	f000 fd11 	bl	800b368 <__mcmp>
 800a946:	2800      	cmp	r0, #0
 800a948:	f73f adbb 	bgt.w	800a4c2 <_dtoa_r+0x4ca>
 800a94c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a94e:	9d00      	ldr	r5, [sp, #0]
 800a950:	ea6f 0b03 	mvn.w	fp, r3
 800a954:	f04f 0800 	mov.w	r8, #0
 800a958:	4631      	mov	r1, r6
 800a95a:	4620      	mov	r0, r4
 800a95c:	f000 fa7e 	bl	800ae5c <_Bfree>
 800a960:	2f00      	cmp	r7, #0
 800a962:	f43f aeab 	beq.w	800a6bc <_dtoa_r+0x6c4>
 800a966:	f1b8 0f00 	cmp.w	r8, #0
 800a96a:	d005      	beq.n	800a978 <_dtoa_r+0x980>
 800a96c:	45b8      	cmp	r8, r7
 800a96e:	d003      	beq.n	800a978 <_dtoa_r+0x980>
 800a970:	4641      	mov	r1, r8
 800a972:	4620      	mov	r0, r4
 800a974:	f000 fa72 	bl	800ae5c <_Bfree>
 800a978:	4639      	mov	r1, r7
 800a97a:	4620      	mov	r0, r4
 800a97c:	f000 fa6e 	bl	800ae5c <_Bfree>
 800a980:	e69c      	b.n	800a6bc <_dtoa_r+0x6c4>
 800a982:	2600      	movs	r6, #0
 800a984:	4637      	mov	r7, r6
 800a986:	e7e1      	b.n	800a94c <_dtoa_r+0x954>
 800a988:	46bb      	mov	fp, r7
 800a98a:	4637      	mov	r7, r6
 800a98c:	e599      	b.n	800a4c2 <_dtoa_r+0x4ca>
 800a98e:	bf00      	nop
 800a990:	40240000 	.word	0x40240000
 800a994:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a996:	2b00      	cmp	r3, #0
 800a998:	f000 80c8 	beq.w	800ab2c <_dtoa_r+0xb34>
 800a99c:	9b04      	ldr	r3, [sp, #16]
 800a99e:	9301      	str	r3, [sp, #4]
 800a9a0:	2d00      	cmp	r5, #0
 800a9a2:	dd05      	ble.n	800a9b0 <_dtoa_r+0x9b8>
 800a9a4:	4639      	mov	r1, r7
 800a9a6:	462a      	mov	r2, r5
 800a9a8:	4620      	mov	r0, r4
 800a9aa:	f000 fc71 	bl	800b290 <__lshift>
 800a9ae:	4607      	mov	r7, r0
 800a9b0:	f1b8 0f00 	cmp.w	r8, #0
 800a9b4:	d05b      	beq.n	800aa6e <_dtoa_r+0xa76>
 800a9b6:	6879      	ldr	r1, [r7, #4]
 800a9b8:	4620      	mov	r0, r4
 800a9ba:	f000 fa0f 	bl	800addc <_Balloc>
 800a9be:	4605      	mov	r5, r0
 800a9c0:	b928      	cbnz	r0, 800a9ce <_dtoa_r+0x9d6>
 800a9c2:	4b83      	ldr	r3, [pc, #524]	; (800abd0 <_dtoa_r+0xbd8>)
 800a9c4:	4602      	mov	r2, r0
 800a9c6:	f240 21ef 	movw	r1, #751	; 0x2ef
 800a9ca:	f7ff bb2e 	b.w	800a02a <_dtoa_r+0x32>
 800a9ce:	693a      	ldr	r2, [r7, #16]
 800a9d0:	3202      	adds	r2, #2
 800a9d2:	0092      	lsls	r2, r2, #2
 800a9d4:	f107 010c 	add.w	r1, r7, #12
 800a9d8:	300c      	adds	r0, #12
 800a9da:	f001 ff85 	bl	800c8e8 <memcpy>
 800a9de:	2201      	movs	r2, #1
 800a9e0:	4629      	mov	r1, r5
 800a9e2:	4620      	mov	r0, r4
 800a9e4:	f000 fc54 	bl	800b290 <__lshift>
 800a9e8:	9b00      	ldr	r3, [sp, #0]
 800a9ea:	3301      	adds	r3, #1
 800a9ec:	9304      	str	r3, [sp, #16]
 800a9ee:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a9f2:	4413      	add	r3, r2
 800a9f4:	9308      	str	r3, [sp, #32]
 800a9f6:	9b02      	ldr	r3, [sp, #8]
 800a9f8:	f003 0301 	and.w	r3, r3, #1
 800a9fc:	46b8      	mov	r8, r7
 800a9fe:	9306      	str	r3, [sp, #24]
 800aa00:	4607      	mov	r7, r0
 800aa02:	9b04      	ldr	r3, [sp, #16]
 800aa04:	4631      	mov	r1, r6
 800aa06:	3b01      	subs	r3, #1
 800aa08:	4650      	mov	r0, sl
 800aa0a:	9301      	str	r3, [sp, #4]
 800aa0c:	f7ff fa6c 	bl	8009ee8 <quorem>
 800aa10:	4641      	mov	r1, r8
 800aa12:	9002      	str	r0, [sp, #8]
 800aa14:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800aa18:	4650      	mov	r0, sl
 800aa1a:	f000 fca5 	bl	800b368 <__mcmp>
 800aa1e:	463a      	mov	r2, r7
 800aa20:	9005      	str	r0, [sp, #20]
 800aa22:	4631      	mov	r1, r6
 800aa24:	4620      	mov	r0, r4
 800aa26:	f000 fcbb 	bl	800b3a0 <__mdiff>
 800aa2a:	68c2      	ldr	r2, [r0, #12]
 800aa2c:	4605      	mov	r5, r0
 800aa2e:	bb02      	cbnz	r2, 800aa72 <_dtoa_r+0xa7a>
 800aa30:	4601      	mov	r1, r0
 800aa32:	4650      	mov	r0, sl
 800aa34:	f000 fc98 	bl	800b368 <__mcmp>
 800aa38:	4602      	mov	r2, r0
 800aa3a:	4629      	mov	r1, r5
 800aa3c:	4620      	mov	r0, r4
 800aa3e:	9209      	str	r2, [sp, #36]	; 0x24
 800aa40:	f000 fa0c 	bl	800ae5c <_Bfree>
 800aa44:	9b07      	ldr	r3, [sp, #28]
 800aa46:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aa48:	9d04      	ldr	r5, [sp, #16]
 800aa4a:	ea43 0102 	orr.w	r1, r3, r2
 800aa4e:	9b06      	ldr	r3, [sp, #24]
 800aa50:	4319      	orrs	r1, r3
 800aa52:	d110      	bne.n	800aa76 <_dtoa_r+0xa7e>
 800aa54:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800aa58:	d029      	beq.n	800aaae <_dtoa_r+0xab6>
 800aa5a:	9b05      	ldr	r3, [sp, #20]
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	dd02      	ble.n	800aa66 <_dtoa_r+0xa6e>
 800aa60:	9b02      	ldr	r3, [sp, #8]
 800aa62:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800aa66:	9b01      	ldr	r3, [sp, #4]
 800aa68:	f883 9000 	strb.w	r9, [r3]
 800aa6c:	e774      	b.n	800a958 <_dtoa_r+0x960>
 800aa6e:	4638      	mov	r0, r7
 800aa70:	e7ba      	b.n	800a9e8 <_dtoa_r+0x9f0>
 800aa72:	2201      	movs	r2, #1
 800aa74:	e7e1      	b.n	800aa3a <_dtoa_r+0xa42>
 800aa76:	9b05      	ldr	r3, [sp, #20]
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	db04      	blt.n	800aa86 <_dtoa_r+0xa8e>
 800aa7c:	9907      	ldr	r1, [sp, #28]
 800aa7e:	430b      	orrs	r3, r1
 800aa80:	9906      	ldr	r1, [sp, #24]
 800aa82:	430b      	orrs	r3, r1
 800aa84:	d120      	bne.n	800aac8 <_dtoa_r+0xad0>
 800aa86:	2a00      	cmp	r2, #0
 800aa88:	dded      	ble.n	800aa66 <_dtoa_r+0xa6e>
 800aa8a:	4651      	mov	r1, sl
 800aa8c:	2201      	movs	r2, #1
 800aa8e:	4620      	mov	r0, r4
 800aa90:	f000 fbfe 	bl	800b290 <__lshift>
 800aa94:	4631      	mov	r1, r6
 800aa96:	4682      	mov	sl, r0
 800aa98:	f000 fc66 	bl	800b368 <__mcmp>
 800aa9c:	2800      	cmp	r0, #0
 800aa9e:	dc03      	bgt.n	800aaa8 <_dtoa_r+0xab0>
 800aaa0:	d1e1      	bne.n	800aa66 <_dtoa_r+0xa6e>
 800aaa2:	f019 0f01 	tst.w	r9, #1
 800aaa6:	d0de      	beq.n	800aa66 <_dtoa_r+0xa6e>
 800aaa8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800aaac:	d1d8      	bne.n	800aa60 <_dtoa_r+0xa68>
 800aaae:	9a01      	ldr	r2, [sp, #4]
 800aab0:	2339      	movs	r3, #57	; 0x39
 800aab2:	7013      	strb	r3, [r2, #0]
 800aab4:	462b      	mov	r3, r5
 800aab6:	461d      	mov	r5, r3
 800aab8:	3b01      	subs	r3, #1
 800aaba:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800aabe:	2a39      	cmp	r2, #57	; 0x39
 800aac0:	d06c      	beq.n	800ab9c <_dtoa_r+0xba4>
 800aac2:	3201      	adds	r2, #1
 800aac4:	701a      	strb	r2, [r3, #0]
 800aac6:	e747      	b.n	800a958 <_dtoa_r+0x960>
 800aac8:	2a00      	cmp	r2, #0
 800aaca:	dd07      	ble.n	800aadc <_dtoa_r+0xae4>
 800aacc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800aad0:	d0ed      	beq.n	800aaae <_dtoa_r+0xab6>
 800aad2:	9a01      	ldr	r2, [sp, #4]
 800aad4:	f109 0301 	add.w	r3, r9, #1
 800aad8:	7013      	strb	r3, [r2, #0]
 800aada:	e73d      	b.n	800a958 <_dtoa_r+0x960>
 800aadc:	9b04      	ldr	r3, [sp, #16]
 800aade:	9a08      	ldr	r2, [sp, #32]
 800aae0:	f803 9c01 	strb.w	r9, [r3, #-1]
 800aae4:	4293      	cmp	r3, r2
 800aae6:	d043      	beq.n	800ab70 <_dtoa_r+0xb78>
 800aae8:	4651      	mov	r1, sl
 800aaea:	2300      	movs	r3, #0
 800aaec:	220a      	movs	r2, #10
 800aaee:	4620      	mov	r0, r4
 800aaf0:	f000 f9d6 	bl	800aea0 <__multadd>
 800aaf4:	45b8      	cmp	r8, r7
 800aaf6:	4682      	mov	sl, r0
 800aaf8:	f04f 0300 	mov.w	r3, #0
 800aafc:	f04f 020a 	mov.w	r2, #10
 800ab00:	4641      	mov	r1, r8
 800ab02:	4620      	mov	r0, r4
 800ab04:	d107      	bne.n	800ab16 <_dtoa_r+0xb1e>
 800ab06:	f000 f9cb 	bl	800aea0 <__multadd>
 800ab0a:	4680      	mov	r8, r0
 800ab0c:	4607      	mov	r7, r0
 800ab0e:	9b04      	ldr	r3, [sp, #16]
 800ab10:	3301      	adds	r3, #1
 800ab12:	9304      	str	r3, [sp, #16]
 800ab14:	e775      	b.n	800aa02 <_dtoa_r+0xa0a>
 800ab16:	f000 f9c3 	bl	800aea0 <__multadd>
 800ab1a:	4639      	mov	r1, r7
 800ab1c:	4680      	mov	r8, r0
 800ab1e:	2300      	movs	r3, #0
 800ab20:	220a      	movs	r2, #10
 800ab22:	4620      	mov	r0, r4
 800ab24:	f000 f9bc 	bl	800aea0 <__multadd>
 800ab28:	4607      	mov	r7, r0
 800ab2a:	e7f0      	b.n	800ab0e <_dtoa_r+0xb16>
 800ab2c:	9b04      	ldr	r3, [sp, #16]
 800ab2e:	9301      	str	r3, [sp, #4]
 800ab30:	9d00      	ldr	r5, [sp, #0]
 800ab32:	4631      	mov	r1, r6
 800ab34:	4650      	mov	r0, sl
 800ab36:	f7ff f9d7 	bl	8009ee8 <quorem>
 800ab3a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800ab3e:	9b00      	ldr	r3, [sp, #0]
 800ab40:	f805 9b01 	strb.w	r9, [r5], #1
 800ab44:	1aea      	subs	r2, r5, r3
 800ab46:	9b01      	ldr	r3, [sp, #4]
 800ab48:	4293      	cmp	r3, r2
 800ab4a:	dd07      	ble.n	800ab5c <_dtoa_r+0xb64>
 800ab4c:	4651      	mov	r1, sl
 800ab4e:	2300      	movs	r3, #0
 800ab50:	220a      	movs	r2, #10
 800ab52:	4620      	mov	r0, r4
 800ab54:	f000 f9a4 	bl	800aea0 <__multadd>
 800ab58:	4682      	mov	sl, r0
 800ab5a:	e7ea      	b.n	800ab32 <_dtoa_r+0xb3a>
 800ab5c:	9b01      	ldr	r3, [sp, #4]
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	bfc8      	it	gt
 800ab62:	461d      	movgt	r5, r3
 800ab64:	9b00      	ldr	r3, [sp, #0]
 800ab66:	bfd8      	it	le
 800ab68:	2501      	movle	r5, #1
 800ab6a:	441d      	add	r5, r3
 800ab6c:	f04f 0800 	mov.w	r8, #0
 800ab70:	4651      	mov	r1, sl
 800ab72:	2201      	movs	r2, #1
 800ab74:	4620      	mov	r0, r4
 800ab76:	f000 fb8b 	bl	800b290 <__lshift>
 800ab7a:	4631      	mov	r1, r6
 800ab7c:	4682      	mov	sl, r0
 800ab7e:	f000 fbf3 	bl	800b368 <__mcmp>
 800ab82:	2800      	cmp	r0, #0
 800ab84:	dc96      	bgt.n	800aab4 <_dtoa_r+0xabc>
 800ab86:	d102      	bne.n	800ab8e <_dtoa_r+0xb96>
 800ab88:	f019 0f01 	tst.w	r9, #1
 800ab8c:	d192      	bne.n	800aab4 <_dtoa_r+0xabc>
 800ab8e:	462b      	mov	r3, r5
 800ab90:	461d      	mov	r5, r3
 800ab92:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ab96:	2a30      	cmp	r2, #48	; 0x30
 800ab98:	d0fa      	beq.n	800ab90 <_dtoa_r+0xb98>
 800ab9a:	e6dd      	b.n	800a958 <_dtoa_r+0x960>
 800ab9c:	9a00      	ldr	r2, [sp, #0]
 800ab9e:	429a      	cmp	r2, r3
 800aba0:	d189      	bne.n	800aab6 <_dtoa_r+0xabe>
 800aba2:	f10b 0b01 	add.w	fp, fp, #1
 800aba6:	2331      	movs	r3, #49	; 0x31
 800aba8:	e796      	b.n	800aad8 <_dtoa_r+0xae0>
 800abaa:	4b0a      	ldr	r3, [pc, #40]	; (800abd4 <_dtoa_r+0xbdc>)
 800abac:	f7ff ba99 	b.w	800a0e2 <_dtoa_r+0xea>
 800abb0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	f47f aa6d 	bne.w	800a092 <_dtoa_r+0x9a>
 800abb8:	4b07      	ldr	r3, [pc, #28]	; (800abd8 <_dtoa_r+0xbe0>)
 800abba:	f7ff ba92 	b.w	800a0e2 <_dtoa_r+0xea>
 800abbe:	9b01      	ldr	r3, [sp, #4]
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	dcb5      	bgt.n	800ab30 <_dtoa_r+0xb38>
 800abc4:	9b07      	ldr	r3, [sp, #28]
 800abc6:	2b02      	cmp	r3, #2
 800abc8:	f73f aeb1 	bgt.w	800a92e <_dtoa_r+0x936>
 800abcc:	e7b0      	b.n	800ab30 <_dtoa_r+0xb38>
 800abce:	bf00      	nop
 800abd0:	0800e381 	.word	0x0800e381
 800abd4:	0800e2dc 	.word	0x0800e2dc
 800abd8:	0800e305 	.word	0x0800e305

0800abdc <_free_r>:
 800abdc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800abde:	2900      	cmp	r1, #0
 800abe0:	d044      	beq.n	800ac6c <_free_r+0x90>
 800abe2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800abe6:	9001      	str	r0, [sp, #4]
 800abe8:	2b00      	cmp	r3, #0
 800abea:	f1a1 0404 	sub.w	r4, r1, #4
 800abee:	bfb8      	it	lt
 800abf0:	18e4      	addlt	r4, r4, r3
 800abf2:	f000 f8e7 	bl	800adc4 <__malloc_lock>
 800abf6:	4a1e      	ldr	r2, [pc, #120]	; (800ac70 <_free_r+0x94>)
 800abf8:	9801      	ldr	r0, [sp, #4]
 800abfa:	6813      	ldr	r3, [r2, #0]
 800abfc:	b933      	cbnz	r3, 800ac0c <_free_r+0x30>
 800abfe:	6063      	str	r3, [r4, #4]
 800ac00:	6014      	str	r4, [r2, #0]
 800ac02:	b003      	add	sp, #12
 800ac04:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ac08:	f000 b8e2 	b.w	800add0 <__malloc_unlock>
 800ac0c:	42a3      	cmp	r3, r4
 800ac0e:	d908      	bls.n	800ac22 <_free_r+0x46>
 800ac10:	6825      	ldr	r5, [r4, #0]
 800ac12:	1961      	adds	r1, r4, r5
 800ac14:	428b      	cmp	r3, r1
 800ac16:	bf01      	itttt	eq
 800ac18:	6819      	ldreq	r1, [r3, #0]
 800ac1a:	685b      	ldreq	r3, [r3, #4]
 800ac1c:	1949      	addeq	r1, r1, r5
 800ac1e:	6021      	streq	r1, [r4, #0]
 800ac20:	e7ed      	b.n	800abfe <_free_r+0x22>
 800ac22:	461a      	mov	r2, r3
 800ac24:	685b      	ldr	r3, [r3, #4]
 800ac26:	b10b      	cbz	r3, 800ac2c <_free_r+0x50>
 800ac28:	42a3      	cmp	r3, r4
 800ac2a:	d9fa      	bls.n	800ac22 <_free_r+0x46>
 800ac2c:	6811      	ldr	r1, [r2, #0]
 800ac2e:	1855      	adds	r5, r2, r1
 800ac30:	42a5      	cmp	r5, r4
 800ac32:	d10b      	bne.n	800ac4c <_free_r+0x70>
 800ac34:	6824      	ldr	r4, [r4, #0]
 800ac36:	4421      	add	r1, r4
 800ac38:	1854      	adds	r4, r2, r1
 800ac3a:	42a3      	cmp	r3, r4
 800ac3c:	6011      	str	r1, [r2, #0]
 800ac3e:	d1e0      	bne.n	800ac02 <_free_r+0x26>
 800ac40:	681c      	ldr	r4, [r3, #0]
 800ac42:	685b      	ldr	r3, [r3, #4]
 800ac44:	6053      	str	r3, [r2, #4]
 800ac46:	440c      	add	r4, r1
 800ac48:	6014      	str	r4, [r2, #0]
 800ac4a:	e7da      	b.n	800ac02 <_free_r+0x26>
 800ac4c:	d902      	bls.n	800ac54 <_free_r+0x78>
 800ac4e:	230c      	movs	r3, #12
 800ac50:	6003      	str	r3, [r0, #0]
 800ac52:	e7d6      	b.n	800ac02 <_free_r+0x26>
 800ac54:	6825      	ldr	r5, [r4, #0]
 800ac56:	1961      	adds	r1, r4, r5
 800ac58:	428b      	cmp	r3, r1
 800ac5a:	bf04      	itt	eq
 800ac5c:	6819      	ldreq	r1, [r3, #0]
 800ac5e:	685b      	ldreq	r3, [r3, #4]
 800ac60:	6063      	str	r3, [r4, #4]
 800ac62:	bf04      	itt	eq
 800ac64:	1949      	addeq	r1, r1, r5
 800ac66:	6021      	streq	r1, [r4, #0]
 800ac68:	6054      	str	r4, [r2, #4]
 800ac6a:	e7ca      	b.n	800ac02 <_free_r+0x26>
 800ac6c:	b003      	add	sp, #12
 800ac6e:	bd30      	pop	{r4, r5, pc}
 800ac70:	2000074c 	.word	0x2000074c

0800ac74 <malloc>:
 800ac74:	4b02      	ldr	r3, [pc, #8]	; (800ac80 <malloc+0xc>)
 800ac76:	4601      	mov	r1, r0
 800ac78:	6818      	ldr	r0, [r3, #0]
 800ac7a:	f000 b823 	b.w	800acc4 <_malloc_r>
 800ac7e:	bf00      	nop
 800ac80:	200000b4 	.word	0x200000b4

0800ac84 <sbrk_aligned>:
 800ac84:	b570      	push	{r4, r5, r6, lr}
 800ac86:	4e0e      	ldr	r6, [pc, #56]	; (800acc0 <sbrk_aligned+0x3c>)
 800ac88:	460c      	mov	r4, r1
 800ac8a:	6831      	ldr	r1, [r6, #0]
 800ac8c:	4605      	mov	r5, r0
 800ac8e:	b911      	cbnz	r1, 800ac96 <sbrk_aligned+0x12>
 800ac90:	f001 fe1a 	bl	800c8c8 <_sbrk_r>
 800ac94:	6030      	str	r0, [r6, #0]
 800ac96:	4621      	mov	r1, r4
 800ac98:	4628      	mov	r0, r5
 800ac9a:	f001 fe15 	bl	800c8c8 <_sbrk_r>
 800ac9e:	1c43      	adds	r3, r0, #1
 800aca0:	d00a      	beq.n	800acb8 <sbrk_aligned+0x34>
 800aca2:	1cc4      	adds	r4, r0, #3
 800aca4:	f024 0403 	bic.w	r4, r4, #3
 800aca8:	42a0      	cmp	r0, r4
 800acaa:	d007      	beq.n	800acbc <sbrk_aligned+0x38>
 800acac:	1a21      	subs	r1, r4, r0
 800acae:	4628      	mov	r0, r5
 800acb0:	f001 fe0a 	bl	800c8c8 <_sbrk_r>
 800acb4:	3001      	adds	r0, #1
 800acb6:	d101      	bne.n	800acbc <sbrk_aligned+0x38>
 800acb8:	f04f 34ff 	mov.w	r4, #4294967295
 800acbc:	4620      	mov	r0, r4
 800acbe:	bd70      	pop	{r4, r5, r6, pc}
 800acc0:	20000750 	.word	0x20000750

0800acc4 <_malloc_r>:
 800acc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800acc8:	1ccd      	adds	r5, r1, #3
 800acca:	f025 0503 	bic.w	r5, r5, #3
 800acce:	3508      	adds	r5, #8
 800acd0:	2d0c      	cmp	r5, #12
 800acd2:	bf38      	it	cc
 800acd4:	250c      	movcc	r5, #12
 800acd6:	2d00      	cmp	r5, #0
 800acd8:	4607      	mov	r7, r0
 800acda:	db01      	blt.n	800ace0 <_malloc_r+0x1c>
 800acdc:	42a9      	cmp	r1, r5
 800acde:	d905      	bls.n	800acec <_malloc_r+0x28>
 800ace0:	230c      	movs	r3, #12
 800ace2:	603b      	str	r3, [r7, #0]
 800ace4:	2600      	movs	r6, #0
 800ace6:	4630      	mov	r0, r6
 800ace8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800acec:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800adc0 <_malloc_r+0xfc>
 800acf0:	f000 f868 	bl	800adc4 <__malloc_lock>
 800acf4:	f8d8 3000 	ldr.w	r3, [r8]
 800acf8:	461c      	mov	r4, r3
 800acfa:	bb5c      	cbnz	r4, 800ad54 <_malloc_r+0x90>
 800acfc:	4629      	mov	r1, r5
 800acfe:	4638      	mov	r0, r7
 800ad00:	f7ff ffc0 	bl	800ac84 <sbrk_aligned>
 800ad04:	1c43      	adds	r3, r0, #1
 800ad06:	4604      	mov	r4, r0
 800ad08:	d155      	bne.n	800adb6 <_malloc_r+0xf2>
 800ad0a:	f8d8 4000 	ldr.w	r4, [r8]
 800ad0e:	4626      	mov	r6, r4
 800ad10:	2e00      	cmp	r6, #0
 800ad12:	d145      	bne.n	800ada0 <_malloc_r+0xdc>
 800ad14:	2c00      	cmp	r4, #0
 800ad16:	d048      	beq.n	800adaa <_malloc_r+0xe6>
 800ad18:	6823      	ldr	r3, [r4, #0]
 800ad1a:	4631      	mov	r1, r6
 800ad1c:	4638      	mov	r0, r7
 800ad1e:	eb04 0903 	add.w	r9, r4, r3
 800ad22:	f001 fdd1 	bl	800c8c8 <_sbrk_r>
 800ad26:	4581      	cmp	r9, r0
 800ad28:	d13f      	bne.n	800adaa <_malloc_r+0xe6>
 800ad2a:	6821      	ldr	r1, [r4, #0]
 800ad2c:	1a6d      	subs	r5, r5, r1
 800ad2e:	4629      	mov	r1, r5
 800ad30:	4638      	mov	r0, r7
 800ad32:	f7ff ffa7 	bl	800ac84 <sbrk_aligned>
 800ad36:	3001      	adds	r0, #1
 800ad38:	d037      	beq.n	800adaa <_malloc_r+0xe6>
 800ad3a:	6823      	ldr	r3, [r4, #0]
 800ad3c:	442b      	add	r3, r5
 800ad3e:	6023      	str	r3, [r4, #0]
 800ad40:	f8d8 3000 	ldr.w	r3, [r8]
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d038      	beq.n	800adba <_malloc_r+0xf6>
 800ad48:	685a      	ldr	r2, [r3, #4]
 800ad4a:	42a2      	cmp	r2, r4
 800ad4c:	d12b      	bne.n	800ada6 <_malloc_r+0xe2>
 800ad4e:	2200      	movs	r2, #0
 800ad50:	605a      	str	r2, [r3, #4]
 800ad52:	e00f      	b.n	800ad74 <_malloc_r+0xb0>
 800ad54:	6822      	ldr	r2, [r4, #0]
 800ad56:	1b52      	subs	r2, r2, r5
 800ad58:	d41f      	bmi.n	800ad9a <_malloc_r+0xd6>
 800ad5a:	2a0b      	cmp	r2, #11
 800ad5c:	d917      	bls.n	800ad8e <_malloc_r+0xca>
 800ad5e:	1961      	adds	r1, r4, r5
 800ad60:	42a3      	cmp	r3, r4
 800ad62:	6025      	str	r5, [r4, #0]
 800ad64:	bf18      	it	ne
 800ad66:	6059      	strne	r1, [r3, #4]
 800ad68:	6863      	ldr	r3, [r4, #4]
 800ad6a:	bf08      	it	eq
 800ad6c:	f8c8 1000 	streq.w	r1, [r8]
 800ad70:	5162      	str	r2, [r4, r5]
 800ad72:	604b      	str	r3, [r1, #4]
 800ad74:	4638      	mov	r0, r7
 800ad76:	f104 060b 	add.w	r6, r4, #11
 800ad7a:	f000 f829 	bl	800add0 <__malloc_unlock>
 800ad7e:	f026 0607 	bic.w	r6, r6, #7
 800ad82:	1d23      	adds	r3, r4, #4
 800ad84:	1af2      	subs	r2, r6, r3
 800ad86:	d0ae      	beq.n	800ace6 <_malloc_r+0x22>
 800ad88:	1b9b      	subs	r3, r3, r6
 800ad8a:	50a3      	str	r3, [r4, r2]
 800ad8c:	e7ab      	b.n	800ace6 <_malloc_r+0x22>
 800ad8e:	42a3      	cmp	r3, r4
 800ad90:	6862      	ldr	r2, [r4, #4]
 800ad92:	d1dd      	bne.n	800ad50 <_malloc_r+0x8c>
 800ad94:	f8c8 2000 	str.w	r2, [r8]
 800ad98:	e7ec      	b.n	800ad74 <_malloc_r+0xb0>
 800ad9a:	4623      	mov	r3, r4
 800ad9c:	6864      	ldr	r4, [r4, #4]
 800ad9e:	e7ac      	b.n	800acfa <_malloc_r+0x36>
 800ada0:	4634      	mov	r4, r6
 800ada2:	6876      	ldr	r6, [r6, #4]
 800ada4:	e7b4      	b.n	800ad10 <_malloc_r+0x4c>
 800ada6:	4613      	mov	r3, r2
 800ada8:	e7cc      	b.n	800ad44 <_malloc_r+0x80>
 800adaa:	230c      	movs	r3, #12
 800adac:	603b      	str	r3, [r7, #0]
 800adae:	4638      	mov	r0, r7
 800adb0:	f000 f80e 	bl	800add0 <__malloc_unlock>
 800adb4:	e797      	b.n	800ace6 <_malloc_r+0x22>
 800adb6:	6025      	str	r5, [r4, #0]
 800adb8:	e7dc      	b.n	800ad74 <_malloc_r+0xb0>
 800adba:	605b      	str	r3, [r3, #4]
 800adbc:	deff      	udf	#255	; 0xff
 800adbe:	bf00      	nop
 800adc0:	2000074c 	.word	0x2000074c

0800adc4 <__malloc_lock>:
 800adc4:	4801      	ldr	r0, [pc, #4]	; (800adcc <__malloc_lock+0x8>)
 800adc6:	f7ff b887 	b.w	8009ed8 <__retarget_lock_acquire_recursive>
 800adca:	bf00      	nop
 800adcc:	20000748 	.word	0x20000748

0800add0 <__malloc_unlock>:
 800add0:	4801      	ldr	r0, [pc, #4]	; (800add8 <__malloc_unlock+0x8>)
 800add2:	f7ff b882 	b.w	8009eda <__retarget_lock_release_recursive>
 800add6:	bf00      	nop
 800add8:	20000748 	.word	0x20000748

0800addc <_Balloc>:
 800addc:	b570      	push	{r4, r5, r6, lr}
 800adde:	69c6      	ldr	r6, [r0, #28]
 800ade0:	4604      	mov	r4, r0
 800ade2:	460d      	mov	r5, r1
 800ade4:	b976      	cbnz	r6, 800ae04 <_Balloc+0x28>
 800ade6:	2010      	movs	r0, #16
 800ade8:	f7ff ff44 	bl	800ac74 <malloc>
 800adec:	4602      	mov	r2, r0
 800adee:	61e0      	str	r0, [r4, #28]
 800adf0:	b920      	cbnz	r0, 800adfc <_Balloc+0x20>
 800adf2:	4b18      	ldr	r3, [pc, #96]	; (800ae54 <_Balloc+0x78>)
 800adf4:	4818      	ldr	r0, [pc, #96]	; (800ae58 <_Balloc+0x7c>)
 800adf6:	216b      	movs	r1, #107	; 0x6b
 800adf8:	f001 fd8e 	bl	800c918 <__assert_func>
 800adfc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ae00:	6006      	str	r6, [r0, #0]
 800ae02:	60c6      	str	r6, [r0, #12]
 800ae04:	69e6      	ldr	r6, [r4, #28]
 800ae06:	68f3      	ldr	r3, [r6, #12]
 800ae08:	b183      	cbz	r3, 800ae2c <_Balloc+0x50>
 800ae0a:	69e3      	ldr	r3, [r4, #28]
 800ae0c:	68db      	ldr	r3, [r3, #12]
 800ae0e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ae12:	b9b8      	cbnz	r0, 800ae44 <_Balloc+0x68>
 800ae14:	2101      	movs	r1, #1
 800ae16:	fa01 f605 	lsl.w	r6, r1, r5
 800ae1a:	1d72      	adds	r2, r6, #5
 800ae1c:	0092      	lsls	r2, r2, #2
 800ae1e:	4620      	mov	r0, r4
 800ae20:	f001 fd98 	bl	800c954 <_calloc_r>
 800ae24:	b160      	cbz	r0, 800ae40 <_Balloc+0x64>
 800ae26:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ae2a:	e00e      	b.n	800ae4a <_Balloc+0x6e>
 800ae2c:	2221      	movs	r2, #33	; 0x21
 800ae2e:	2104      	movs	r1, #4
 800ae30:	4620      	mov	r0, r4
 800ae32:	f001 fd8f 	bl	800c954 <_calloc_r>
 800ae36:	69e3      	ldr	r3, [r4, #28]
 800ae38:	60f0      	str	r0, [r6, #12]
 800ae3a:	68db      	ldr	r3, [r3, #12]
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d1e4      	bne.n	800ae0a <_Balloc+0x2e>
 800ae40:	2000      	movs	r0, #0
 800ae42:	bd70      	pop	{r4, r5, r6, pc}
 800ae44:	6802      	ldr	r2, [r0, #0]
 800ae46:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ae4a:	2300      	movs	r3, #0
 800ae4c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ae50:	e7f7      	b.n	800ae42 <_Balloc+0x66>
 800ae52:	bf00      	nop
 800ae54:	0800e312 	.word	0x0800e312
 800ae58:	0800e392 	.word	0x0800e392

0800ae5c <_Bfree>:
 800ae5c:	b570      	push	{r4, r5, r6, lr}
 800ae5e:	69c6      	ldr	r6, [r0, #28]
 800ae60:	4605      	mov	r5, r0
 800ae62:	460c      	mov	r4, r1
 800ae64:	b976      	cbnz	r6, 800ae84 <_Bfree+0x28>
 800ae66:	2010      	movs	r0, #16
 800ae68:	f7ff ff04 	bl	800ac74 <malloc>
 800ae6c:	4602      	mov	r2, r0
 800ae6e:	61e8      	str	r0, [r5, #28]
 800ae70:	b920      	cbnz	r0, 800ae7c <_Bfree+0x20>
 800ae72:	4b09      	ldr	r3, [pc, #36]	; (800ae98 <_Bfree+0x3c>)
 800ae74:	4809      	ldr	r0, [pc, #36]	; (800ae9c <_Bfree+0x40>)
 800ae76:	218f      	movs	r1, #143	; 0x8f
 800ae78:	f001 fd4e 	bl	800c918 <__assert_func>
 800ae7c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ae80:	6006      	str	r6, [r0, #0]
 800ae82:	60c6      	str	r6, [r0, #12]
 800ae84:	b13c      	cbz	r4, 800ae96 <_Bfree+0x3a>
 800ae86:	69eb      	ldr	r3, [r5, #28]
 800ae88:	6862      	ldr	r2, [r4, #4]
 800ae8a:	68db      	ldr	r3, [r3, #12]
 800ae8c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ae90:	6021      	str	r1, [r4, #0]
 800ae92:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ae96:	bd70      	pop	{r4, r5, r6, pc}
 800ae98:	0800e312 	.word	0x0800e312
 800ae9c:	0800e392 	.word	0x0800e392

0800aea0 <__multadd>:
 800aea0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aea4:	690d      	ldr	r5, [r1, #16]
 800aea6:	4607      	mov	r7, r0
 800aea8:	460c      	mov	r4, r1
 800aeaa:	461e      	mov	r6, r3
 800aeac:	f101 0c14 	add.w	ip, r1, #20
 800aeb0:	2000      	movs	r0, #0
 800aeb2:	f8dc 3000 	ldr.w	r3, [ip]
 800aeb6:	b299      	uxth	r1, r3
 800aeb8:	fb02 6101 	mla	r1, r2, r1, r6
 800aebc:	0c1e      	lsrs	r6, r3, #16
 800aebe:	0c0b      	lsrs	r3, r1, #16
 800aec0:	fb02 3306 	mla	r3, r2, r6, r3
 800aec4:	b289      	uxth	r1, r1
 800aec6:	3001      	adds	r0, #1
 800aec8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800aecc:	4285      	cmp	r5, r0
 800aece:	f84c 1b04 	str.w	r1, [ip], #4
 800aed2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800aed6:	dcec      	bgt.n	800aeb2 <__multadd+0x12>
 800aed8:	b30e      	cbz	r6, 800af1e <__multadd+0x7e>
 800aeda:	68a3      	ldr	r3, [r4, #8]
 800aedc:	42ab      	cmp	r3, r5
 800aede:	dc19      	bgt.n	800af14 <__multadd+0x74>
 800aee0:	6861      	ldr	r1, [r4, #4]
 800aee2:	4638      	mov	r0, r7
 800aee4:	3101      	adds	r1, #1
 800aee6:	f7ff ff79 	bl	800addc <_Balloc>
 800aeea:	4680      	mov	r8, r0
 800aeec:	b928      	cbnz	r0, 800aefa <__multadd+0x5a>
 800aeee:	4602      	mov	r2, r0
 800aef0:	4b0c      	ldr	r3, [pc, #48]	; (800af24 <__multadd+0x84>)
 800aef2:	480d      	ldr	r0, [pc, #52]	; (800af28 <__multadd+0x88>)
 800aef4:	21ba      	movs	r1, #186	; 0xba
 800aef6:	f001 fd0f 	bl	800c918 <__assert_func>
 800aefa:	6922      	ldr	r2, [r4, #16]
 800aefc:	3202      	adds	r2, #2
 800aefe:	f104 010c 	add.w	r1, r4, #12
 800af02:	0092      	lsls	r2, r2, #2
 800af04:	300c      	adds	r0, #12
 800af06:	f001 fcef 	bl	800c8e8 <memcpy>
 800af0a:	4621      	mov	r1, r4
 800af0c:	4638      	mov	r0, r7
 800af0e:	f7ff ffa5 	bl	800ae5c <_Bfree>
 800af12:	4644      	mov	r4, r8
 800af14:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800af18:	3501      	adds	r5, #1
 800af1a:	615e      	str	r6, [r3, #20]
 800af1c:	6125      	str	r5, [r4, #16]
 800af1e:	4620      	mov	r0, r4
 800af20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af24:	0800e381 	.word	0x0800e381
 800af28:	0800e392 	.word	0x0800e392

0800af2c <__s2b>:
 800af2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800af30:	460c      	mov	r4, r1
 800af32:	4615      	mov	r5, r2
 800af34:	461f      	mov	r7, r3
 800af36:	2209      	movs	r2, #9
 800af38:	3308      	adds	r3, #8
 800af3a:	4606      	mov	r6, r0
 800af3c:	fb93 f3f2 	sdiv	r3, r3, r2
 800af40:	2100      	movs	r1, #0
 800af42:	2201      	movs	r2, #1
 800af44:	429a      	cmp	r2, r3
 800af46:	db09      	blt.n	800af5c <__s2b+0x30>
 800af48:	4630      	mov	r0, r6
 800af4a:	f7ff ff47 	bl	800addc <_Balloc>
 800af4e:	b940      	cbnz	r0, 800af62 <__s2b+0x36>
 800af50:	4602      	mov	r2, r0
 800af52:	4b19      	ldr	r3, [pc, #100]	; (800afb8 <__s2b+0x8c>)
 800af54:	4819      	ldr	r0, [pc, #100]	; (800afbc <__s2b+0x90>)
 800af56:	21d3      	movs	r1, #211	; 0xd3
 800af58:	f001 fcde 	bl	800c918 <__assert_func>
 800af5c:	0052      	lsls	r2, r2, #1
 800af5e:	3101      	adds	r1, #1
 800af60:	e7f0      	b.n	800af44 <__s2b+0x18>
 800af62:	9b08      	ldr	r3, [sp, #32]
 800af64:	6143      	str	r3, [r0, #20]
 800af66:	2d09      	cmp	r5, #9
 800af68:	f04f 0301 	mov.w	r3, #1
 800af6c:	6103      	str	r3, [r0, #16]
 800af6e:	dd16      	ble.n	800af9e <__s2b+0x72>
 800af70:	f104 0909 	add.w	r9, r4, #9
 800af74:	46c8      	mov	r8, r9
 800af76:	442c      	add	r4, r5
 800af78:	f818 3b01 	ldrb.w	r3, [r8], #1
 800af7c:	4601      	mov	r1, r0
 800af7e:	3b30      	subs	r3, #48	; 0x30
 800af80:	220a      	movs	r2, #10
 800af82:	4630      	mov	r0, r6
 800af84:	f7ff ff8c 	bl	800aea0 <__multadd>
 800af88:	45a0      	cmp	r8, r4
 800af8a:	d1f5      	bne.n	800af78 <__s2b+0x4c>
 800af8c:	f1a5 0408 	sub.w	r4, r5, #8
 800af90:	444c      	add	r4, r9
 800af92:	1b2d      	subs	r5, r5, r4
 800af94:	1963      	adds	r3, r4, r5
 800af96:	42bb      	cmp	r3, r7
 800af98:	db04      	blt.n	800afa4 <__s2b+0x78>
 800af9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800af9e:	340a      	adds	r4, #10
 800afa0:	2509      	movs	r5, #9
 800afa2:	e7f6      	b.n	800af92 <__s2b+0x66>
 800afa4:	f814 3b01 	ldrb.w	r3, [r4], #1
 800afa8:	4601      	mov	r1, r0
 800afaa:	3b30      	subs	r3, #48	; 0x30
 800afac:	220a      	movs	r2, #10
 800afae:	4630      	mov	r0, r6
 800afb0:	f7ff ff76 	bl	800aea0 <__multadd>
 800afb4:	e7ee      	b.n	800af94 <__s2b+0x68>
 800afb6:	bf00      	nop
 800afb8:	0800e381 	.word	0x0800e381
 800afbc:	0800e392 	.word	0x0800e392

0800afc0 <__hi0bits>:
 800afc0:	0c03      	lsrs	r3, r0, #16
 800afc2:	041b      	lsls	r3, r3, #16
 800afc4:	b9d3      	cbnz	r3, 800affc <__hi0bits+0x3c>
 800afc6:	0400      	lsls	r0, r0, #16
 800afc8:	2310      	movs	r3, #16
 800afca:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800afce:	bf04      	itt	eq
 800afd0:	0200      	lsleq	r0, r0, #8
 800afd2:	3308      	addeq	r3, #8
 800afd4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800afd8:	bf04      	itt	eq
 800afda:	0100      	lsleq	r0, r0, #4
 800afdc:	3304      	addeq	r3, #4
 800afde:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800afe2:	bf04      	itt	eq
 800afe4:	0080      	lsleq	r0, r0, #2
 800afe6:	3302      	addeq	r3, #2
 800afe8:	2800      	cmp	r0, #0
 800afea:	db05      	blt.n	800aff8 <__hi0bits+0x38>
 800afec:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800aff0:	f103 0301 	add.w	r3, r3, #1
 800aff4:	bf08      	it	eq
 800aff6:	2320      	moveq	r3, #32
 800aff8:	4618      	mov	r0, r3
 800affa:	4770      	bx	lr
 800affc:	2300      	movs	r3, #0
 800affe:	e7e4      	b.n	800afca <__hi0bits+0xa>

0800b000 <__lo0bits>:
 800b000:	6803      	ldr	r3, [r0, #0]
 800b002:	f013 0207 	ands.w	r2, r3, #7
 800b006:	d00c      	beq.n	800b022 <__lo0bits+0x22>
 800b008:	07d9      	lsls	r1, r3, #31
 800b00a:	d422      	bmi.n	800b052 <__lo0bits+0x52>
 800b00c:	079a      	lsls	r2, r3, #30
 800b00e:	bf49      	itett	mi
 800b010:	085b      	lsrmi	r3, r3, #1
 800b012:	089b      	lsrpl	r3, r3, #2
 800b014:	6003      	strmi	r3, [r0, #0]
 800b016:	2201      	movmi	r2, #1
 800b018:	bf5c      	itt	pl
 800b01a:	6003      	strpl	r3, [r0, #0]
 800b01c:	2202      	movpl	r2, #2
 800b01e:	4610      	mov	r0, r2
 800b020:	4770      	bx	lr
 800b022:	b299      	uxth	r1, r3
 800b024:	b909      	cbnz	r1, 800b02a <__lo0bits+0x2a>
 800b026:	0c1b      	lsrs	r3, r3, #16
 800b028:	2210      	movs	r2, #16
 800b02a:	b2d9      	uxtb	r1, r3
 800b02c:	b909      	cbnz	r1, 800b032 <__lo0bits+0x32>
 800b02e:	3208      	adds	r2, #8
 800b030:	0a1b      	lsrs	r3, r3, #8
 800b032:	0719      	lsls	r1, r3, #28
 800b034:	bf04      	itt	eq
 800b036:	091b      	lsreq	r3, r3, #4
 800b038:	3204      	addeq	r2, #4
 800b03a:	0799      	lsls	r1, r3, #30
 800b03c:	bf04      	itt	eq
 800b03e:	089b      	lsreq	r3, r3, #2
 800b040:	3202      	addeq	r2, #2
 800b042:	07d9      	lsls	r1, r3, #31
 800b044:	d403      	bmi.n	800b04e <__lo0bits+0x4e>
 800b046:	085b      	lsrs	r3, r3, #1
 800b048:	f102 0201 	add.w	r2, r2, #1
 800b04c:	d003      	beq.n	800b056 <__lo0bits+0x56>
 800b04e:	6003      	str	r3, [r0, #0]
 800b050:	e7e5      	b.n	800b01e <__lo0bits+0x1e>
 800b052:	2200      	movs	r2, #0
 800b054:	e7e3      	b.n	800b01e <__lo0bits+0x1e>
 800b056:	2220      	movs	r2, #32
 800b058:	e7e1      	b.n	800b01e <__lo0bits+0x1e>
	...

0800b05c <__i2b>:
 800b05c:	b510      	push	{r4, lr}
 800b05e:	460c      	mov	r4, r1
 800b060:	2101      	movs	r1, #1
 800b062:	f7ff febb 	bl	800addc <_Balloc>
 800b066:	4602      	mov	r2, r0
 800b068:	b928      	cbnz	r0, 800b076 <__i2b+0x1a>
 800b06a:	4b05      	ldr	r3, [pc, #20]	; (800b080 <__i2b+0x24>)
 800b06c:	4805      	ldr	r0, [pc, #20]	; (800b084 <__i2b+0x28>)
 800b06e:	f240 1145 	movw	r1, #325	; 0x145
 800b072:	f001 fc51 	bl	800c918 <__assert_func>
 800b076:	2301      	movs	r3, #1
 800b078:	6144      	str	r4, [r0, #20]
 800b07a:	6103      	str	r3, [r0, #16]
 800b07c:	bd10      	pop	{r4, pc}
 800b07e:	bf00      	nop
 800b080:	0800e381 	.word	0x0800e381
 800b084:	0800e392 	.word	0x0800e392

0800b088 <__multiply>:
 800b088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b08c:	4691      	mov	r9, r2
 800b08e:	690a      	ldr	r2, [r1, #16]
 800b090:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b094:	429a      	cmp	r2, r3
 800b096:	bfb8      	it	lt
 800b098:	460b      	movlt	r3, r1
 800b09a:	460c      	mov	r4, r1
 800b09c:	bfbc      	itt	lt
 800b09e:	464c      	movlt	r4, r9
 800b0a0:	4699      	movlt	r9, r3
 800b0a2:	6927      	ldr	r7, [r4, #16]
 800b0a4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b0a8:	68a3      	ldr	r3, [r4, #8]
 800b0aa:	6861      	ldr	r1, [r4, #4]
 800b0ac:	eb07 060a 	add.w	r6, r7, sl
 800b0b0:	42b3      	cmp	r3, r6
 800b0b2:	b085      	sub	sp, #20
 800b0b4:	bfb8      	it	lt
 800b0b6:	3101      	addlt	r1, #1
 800b0b8:	f7ff fe90 	bl	800addc <_Balloc>
 800b0bc:	b930      	cbnz	r0, 800b0cc <__multiply+0x44>
 800b0be:	4602      	mov	r2, r0
 800b0c0:	4b44      	ldr	r3, [pc, #272]	; (800b1d4 <__multiply+0x14c>)
 800b0c2:	4845      	ldr	r0, [pc, #276]	; (800b1d8 <__multiply+0x150>)
 800b0c4:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800b0c8:	f001 fc26 	bl	800c918 <__assert_func>
 800b0cc:	f100 0514 	add.w	r5, r0, #20
 800b0d0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b0d4:	462b      	mov	r3, r5
 800b0d6:	2200      	movs	r2, #0
 800b0d8:	4543      	cmp	r3, r8
 800b0da:	d321      	bcc.n	800b120 <__multiply+0x98>
 800b0dc:	f104 0314 	add.w	r3, r4, #20
 800b0e0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b0e4:	f109 0314 	add.w	r3, r9, #20
 800b0e8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b0ec:	9202      	str	r2, [sp, #8]
 800b0ee:	1b3a      	subs	r2, r7, r4
 800b0f0:	3a15      	subs	r2, #21
 800b0f2:	f022 0203 	bic.w	r2, r2, #3
 800b0f6:	3204      	adds	r2, #4
 800b0f8:	f104 0115 	add.w	r1, r4, #21
 800b0fc:	428f      	cmp	r7, r1
 800b0fe:	bf38      	it	cc
 800b100:	2204      	movcc	r2, #4
 800b102:	9201      	str	r2, [sp, #4]
 800b104:	9a02      	ldr	r2, [sp, #8]
 800b106:	9303      	str	r3, [sp, #12]
 800b108:	429a      	cmp	r2, r3
 800b10a:	d80c      	bhi.n	800b126 <__multiply+0x9e>
 800b10c:	2e00      	cmp	r6, #0
 800b10e:	dd03      	ble.n	800b118 <__multiply+0x90>
 800b110:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b114:	2b00      	cmp	r3, #0
 800b116:	d05b      	beq.n	800b1d0 <__multiply+0x148>
 800b118:	6106      	str	r6, [r0, #16]
 800b11a:	b005      	add	sp, #20
 800b11c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b120:	f843 2b04 	str.w	r2, [r3], #4
 800b124:	e7d8      	b.n	800b0d8 <__multiply+0x50>
 800b126:	f8b3 a000 	ldrh.w	sl, [r3]
 800b12a:	f1ba 0f00 	cmp.w	sl, #0
 800b12e:	d024      	beq.n	800b17a <__multiply+0xf2>
 800b130:	f104 0e14 	add.w	lr, r4, #20
 800b134:	46a9      	mov	r9, r5
 800b136:	f04f 0c00 	mov.w	ip, #0
 800b13a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b13e:	f8d9 1000 	ldr.w	r1, [r9]
 800b142:	fa1f fb82 	uxth.w	fp, r2
 800b146:	b289      	uxth	r1, r1
 800b148:	fb0a 110b 	mla	r1, sl, fp, r1
 800b14c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800b150:	f8d9 2000 	ldr.w	r2, [r9]
 800b154:	4461      	add	r1, ip
 800b156:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b15a:	fb0a c20b 	mla	r2, sl, fp, ip
 800b15e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b162:	b289      	uxth	r1, r1
 800b164:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b168:	4577      	cmp	r7, lr
 800b16a:	f849 1b04 	str.w	r1, [r9], #4
 800b16e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b172:	d8e2      	bhi.n	800b13a <__multiply+0xb2>
 800b174:	9a01      	ldr	r2, [sp, #4]
 800b176:	f845 c002 	str.w	ip, [r5, r2]
 800b17a:	9a03      	ldr	r2, [sp, #12]
 800b17c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b180:	3304      	adds	r3, #4
 800b182:	f1b9 0f00 	cmp.w	r9, #0
 800b186:	d021      	beq.n	800b1cc <__multiply+0x144>
 800b188:	6829      	ldr	r1, [r5, #0]
 800b18a:	f104 0c14 	add.w	ip, r4, #20
 800b18e:	46ae      	mov	lr, r5
 800b190:	f04f 0a00 	mov.w	sl, #0
 800b194:	f8bc b000 	ldrh.w	fp, [ip]
 800b198:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b19c:	fb09 220b 	mla	r2, r9, fp, r2
 800b1a0:	4452      	add	r2, sl
 800b1a2:	b289      	uxth	r1, r1
 800b1a4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b1a8:	f84e 1b04 	str.w	r1, [lr], #4
 800b1ac:	f85c 1b04 	ldr.w	r1, [ip], #4
 800b1b0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b1b4:	f8be 1000 	ldrh.w	r1, [lr]
 800b1b8:	fb09 110a 	mla	r1, r9, sl, r1
 800b1bc:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800b1c0:	4567      	cmp	r7, ip
 800b1c2:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b1c6:	d8e5      	bhi.n	800b194 <__multiply+0x10c>
 800b1c8:	9a01      	ldr	r2, [sp, #4]
 800b1ca:	50a9      	str	r1, [r5, r2]
 800b1cc:	3504      	adds	r5, #4
 800b1ce:	e799      	b.n	800b104 <__multiply+0x7c>
 800b1d0:	3e01      	subs	r6, #1
 800b1d2:	e79b      	b.n	800b10c <__multiply+0x84>
 800b1d4:	0800e381 	.word	0x0800e381
 800b1d8:	0800e392 	.word	0x0800e392

0800b1dc <__pow5mult>:
 800b1dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b1e0:	4615      	mov	r5, r2
 800b1e2:	f012 0203 	ands.w	r2, r2, #3
 800b1e6:	4606      	mov	r6, r0
 800b1e8:	460f      	mov	r7, r1
 800b1ea:	d007      	beq.n	800b1fc <__pow5mult+0x20>
 800b1ec:	4c25      	ldr	r4, [pc, #148]	; (800b284 <__pow5mult+0xa8>)
 800b1ee:	3a01      	subs	r2, #1
 800b1f0:	2300      	movs	r3, #0
 800b1f2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b1f6:	f7ff fe53 	bl	800aea0 <__multadd>
 800b1fa:	4607      	mov	r7, r0
 800b1fc:	10ad      	asrs	r5, r5, #2
 800b1fe:	d03d      	beq.n	800b27c <__pow5mult+0xa0>
 800b200:	69f4      	ldr	r4, [r6, #28]
 800b202:	b97c      	cbnz	r4, 800b224 <__pow5mult+0x48>
 800b204:	2010      	movs	r0, #16
 800b206:	f7ff fd35 	bl	800ac74 <malloc>
 800b20a:	4602      	mov	r2, r0
 800b20c:	61f0      	str	r0, [r6, #28]
 800b20e:	b928      	cbnz	r0, 800b21c <__pow5mult+0x40>
 800b210:	4b1d      	ldr	r3, [pc, #116]	; (800b288 <__pow5mult+0xac>)
 800b212:	481e      	ldr	r0, [pc, #120]	; (800b28c <__pow5mult+0xb0>)
 800b214:	f240 11b3 	movw	r1, #435	; 0x1b3
 800b218:	f001 fb7e 	bl	800c918 <__assert_func>
 800b21c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b220:	6004      	str	r4, [r0, #0]
 800b222:	60c4      	str	r4, [r0, #12]
 800b224:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800b228:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b22c:	b94c      	cbnz	r4, 800b242 <__pow5mult+0x66>
 800b22e:	f240 2171 	movw	r1, #625	; 0x271
 800b232:	4630      	mov	r0, r6
 800b234:	f7ff ff12 	bl	800b05c <__i2b>
 800b238:	2300      	movs	r3, #0
 800b23a:	f8c8 0008 	str.w	r0, [r8, #8]
 800b23e:	4604      	mov	r4, r0
 800b240:	6003      	str	r3, [r0, #0]
 800b242:	f04f 0900 	mov.w	r9, #0
 800b246:	07eb      	lsls	r3, r5, #31
 800b248:	d50a      	bpl.n	800b260 <__pow5mult+0x84>
 800b24a:	4639      	mov	r1, r7
 800b24c:	4622      	mov	r2, r4
 800b24e:	4630      	mov	r0, r6
 800b250:	f7ff ff1a 	bl	800b088 <__multiply>
 800b254:	4639      	mov	r1, r7
 800b256:	4680      	mov	r8, r0
 800b258:	4630      	mov	r0, r6
 800b25a:	f7ff fdff 	bl	800ae5c <_Bfree>
 800b25e:	4647      	mov	r7, r8
 800b260:	106d      	asrs	r5, r5, #1
 800b262:	d00b      	beq.n	800b27c <__pow5mult+0xa0>
 800b264:	6820      	ldr	r0, [r4, #0]
 800b266:	b938      	cbnz	r0, 800b278 <__pow5mult+0x9c>
 800b268:	4622      	mov	r2, r4
 800b26a:	4621      	mov	r1, r4
 800b26c:	4630      	mov	r0, r6
 800b26e:	f7ff ff0b 	bl	800b088 <__multiply>
 800b272:	6020      	str	r0, [r4, #0]
 800b274:	f8c0 9000 	str.w	r9, [r0]
 800b278:	4604      	mov	r4, r0
 800b27a:	e7e4      	b.n	800b246 <__pow5mult+0x6a>
 800b27c:	4638      	mov	r0, r7
 800b27e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b282:	bf00      	nop
 800b284:	0800e4e0 	.word	0x0800e4e0
 800b288:	0800e312 	.word	0x0800e312
 800b28c:	0800e392 	.word	0x0800e392

0800b290 <__lshift>:
 800b290:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b294:	460c      	mov	r4, r1
 800b296:	6849      	ldr	r1, [r1, #4]
 800b298:	6923      	ldr	r3, [r4, #16]
 800b29a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b29e:	68a3      	ldr	r3, [r4, #8]
 800b2a0:	4607      	mov	r7, r0
 800b2a2:	4691      	mov	r9, r2
 800b2a4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b2a8:	f108 0601 	add.w	r6, r8, #1
 800b2ac:	42b3      	cmp	r3, r6
 800b2ae:	db0b      	blt.n	800b2c8 <__lshift+0x38>
 800b2b0:	4638      	mov	r0, r7
 800b2b2:	f7ff fd93 	bl	800addc <_Balloc>
 800b2b6:	4605      	mov	r5, r0
 800b2b8:	b948      	cbnz	r0, 800b2ce <__lshift+0x3e>
 800b2ba:	4602      	mov	r2, r0
 800b2bc:	4b28      	ldr	r3, [pc, #160]	; (800b360 <__lshift+0xd0>)
 800b2be:	4829      	ldr	r0, [pc, #164]	; (800b364 <__lshift+0xd4>)
 800b2c0:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800b2c4:	f001 fb28 	bl	800c918 <__assert_func>
 800b2c8:	3101      	adds	r1, #1
 800b2ca:	005b      	lsls	r3, r3, #1
 800b2cc:	e7ee      	b.n	800b2ac <__lshift+0x1c>
 800b2ce:	2300      	movs	r3, #0
 800b2d0:	f100 0114 	add.w	r1, r0, #20
 800b2d4:	f100 0210 	add.w	r2, r0, #16
 800b2d8:	4618      	mov	r0, r3
 800b2da:	4553      	cmp	r3, sl
 800b2dc:	db33      	blt.n	800b346 <__lshift+0xb6>
 800b2de:	6920      	ldr	r0, [r4, #16]
 800b2e0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b2e4:	f104 0314 	add.w	r3, r4, #20
 800b2e8:	f019 091f 	ands.w	r9, r9, #31
 800b2ec:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b2f0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b2f4:	d02b      	beq.n	800b34e <__lshift+0xbe>
 800b2f6:	f1c9 0e20 	rsb	lr, r9, #32
 800b2fa:	468a      	mov	sl, r1
 800b2fc:	2200      	movs	r2, #0
 800b2fe:	6818      	ldr	r0, [r3, #0]
 800b300:	fa00 f009 	lsl.w	r0, r0, r9
 800b304:	4310      	orrs	r0, r2
 800b306:	f84a 0b04 	str.w	r0, [sl], #4
 800b30a:	f853 2b04 	ldr.w	r2, [r3], #4
 800b30e:	459c      	cmp	ip, r3
 800b310:	fa22 f20e 	lsr.w	r2, r2, lr
 800b314:	d8f3      	bhi.n	800b2fe <__lshift+0x6e>
 800b316:	ebac 0304 	sub.w	r3, ip, r4
 800b31a:	3b15      	subs	r3, #21
 800b31c:	f023 0303 	bic.w	r3, r3, #3
 800b320:	3304      	adds	r3, #4
 800b322:	f104 0015 	add.w	r0, r4, #21
 800b326:	4584      	cmp	ip, r0
 800b328:	bf38      	it	cc
 800b32a:	2304      	movcc	r3, #4
 800b32c:	50ca      	str	r2, [r1, r3]
 800b32e:	b10a      	cbz	r2, 800b334 <__lshift+0xa4>
 800b330:	f108 0602 	add.w	r6, r8, #2
 800b334:	3e01      	subs	r6, #1
 800b336:	4638      	mov	r0, r7
 800b338:	612e      	str	r6, [r5, #16]
 800b33a:	4621      	mov	r1, r4
 800b33c:	f7ff fd8e 	bl	800ae5c <_Bfree>
 800b340:	4628      	mov	r0, r5
 800b342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b346:	f842 0f04 	str.w	r0, [r2, #4]!
 800b34a:	3301      	adds	r3, #1
 800b34c:	e7c5      	b.n	800b2da <__lshift+0x4a>
 800b34e:	3904      	subs	r1, #4
 800b350:	f853 2b04 	ldr.w	r2, [r3], #4
 800b354:	f841 2f04 	str.w	r2, [r1, #4]!
 800b358:	459c      	cmp	ip, r3
 800b35a:	d8f9      	bhi.n	800b350 <__lshift+0xc0>
 800b35c:	e7ea      	b.n	800b334 <__lshift+0xa4>
 800b35e:	bf00      	nop
 800b360:	0800e381 	.word	0x0800e381
 800b364:	0800e392 	.word	0x0800e392

0800b368 <__mcmp>:
 800b368:	b530      	push	{r4, r5, lr}
 800b36a:	6902      	ldr	r2, [r0, #16]
 800b36c:	690c      	ldr	r4, [r1, #16]
 800b36e:	1b12      	subs	r2, r2, r4
 800b370:	d10e      	bne.n	800b390 <__mcmp+0x28>
 800b372:	f100 0314 	add.w	r3, r0, #20
 800b376:	3114      	adds	r1, #20
 800b378:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b37c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b380:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b384:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b388:	42a5      	cmp	r5, r4
 800b38a:	d003      	beq.n	800b394 <__mcmp+0x2c>
 800b38c:	d305      	bcc.n	800b39a <__mcmp+0x32>
 800b38e:	2201      	movs	r2, #1
 800b390:	4610      	mov	r0, r2
 800b392:	bd30      	pop	{r4, r5, pc}
 800b394:	4283      	cmp	r3, r0
 800b396:	d3f3      	bcc.n	800b380 <__mcmp+0x18>
 800b398:	e7fa      	b.n	800b390 <__mcmp+0x28>
 800b39a:	f04f 32ff 	mov.w	r2, #4294967295
 800b39e:	e7f7      	b.n	800b390 <__mcmp+0x28>

0800b3a0 <__mdiff>:
 800b3a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3a4:	460c      	mov	r4, r1
 800b3a6:	4606      	mov	r6, r0
 800b3a8:	4611      	mov	r1, r2
 800b3aa:	4620      	mov	r0, r4
 800b3ac:	4690      	mov	r8, r2
 800b3ae:	f7ff ffdb 	bl	800b368 <__mcmp>
 800b3b2:	1e05      	subs	r5, r0, #0
 800b3b4:	d110      	bne.n	800b3d8 <__mdiff+0x38>
 800b3b6:	4629      	mov	r1, r5
 800b3b8:	4630      	mov	r0, r6
 800b3ba:	f7ff fd0f 	bl	800addc <_Balloc>
 800b3be:	b930      	cbnz	r0, 800b3ce <__mdiff+0x2e>
 800b3c0:	4b3a      	ldr	r3, [pc, #232]	; (800b4ac <__mdiff+0x10c>)
 800b3c2:	4602      	mov	r2, r0
 800b3c4:	f240 2137 	movw	r1, #567	; 0x237
 800b3c8:	4839      	ldr	r0, [pc, #228]	; (800b4b0 <__mdiff+0x110>)
 800b3ca:	f001 faa5 	bl	800c918 <__assert_func>
 800b3ce:	2301      	movs	r3, #1
 800b3d0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b3d4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3d8:	bfa4      	itt	ge
 800b3da:	4643      	movge	r3, r8
 800b3dc:	46a0      	movge	r8, r4
 800b3de:	4630      	mov	r0, r6
 800b3e0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b3e4:	bfa6      	itte	ge
 800b3e6:	461c      	movge	r4, r3
 800b3e8:	2500      	movge	r5, #0
 800b3ea:	2501      	movlt	r5, #1
 800b3ec:	f7ff fcf6 	bl	800addc <_Balloc>
 800b3f0:	b920      	cbnz	r0, 800b3fc <__mdiff+0x5c>
 800b3f2:	4b2e      	ldr	r3, [pc, #184]	; (800b4ac <__mdiff+0x10c>)
 800b3f4:	4602      	mov	r2, r0
 800b3f6:	f240 2145 	movw	r1, #581	; 0x245
 800b3fa:	e7e5      	b.n	800b3c8 <__mdiff+0x28>
 800b3fc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b400:	6926      	ldr	r6, [r4, #16]
 800b402:	60c5      	str	r5, [r0, #12]
 800b404:	f104 0914 	add.w	r9, r4, #20
 800b408:	f108 0514 	add.w	r5, r8, #20
 800b40c:	f100 0e14 	add.w	lr, r0, #20
 800b410:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800b414:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b418:	f108 0210 	add.w	r2, r8, #16
 800b41c:	46f2      	mov	sl, lr
 800b41e:	2100      	movs	r1, #0
 800b420:	f859 3b04 	ldr.w	r3, [r9], #4
 800b424:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b428:	fa11 f88b 	uxtah	r8, r1, fp
 800b42c:	b299      	uxth	r1, r3
 800b42e:	0c1b      	lsrs	r3, r3, #16
 800b430:	eba8 0801 	sub.w	r8, r8, r1
 800b434:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b438:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b43c:	fa1f f888 	uxth.w	r8, r8
 800b440:	1419      	asrs	r1, r3, #16
 800b442:	454e      	cmp	r6, r9
 800b444:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b448:	f84a 3b04 	str.w	r3, [sl], #4
 800b44c:	d8e8      	bhi.n	800b420 <__mdiff+0x80>
 800b44e:	1b33      	subs	r3, r6, r4
 800b450:	3b15      	subs	r3, #21
 800b452:	f023 0303 	bic.w	r3, r3, #3
 800b456:	3304      	adds	r3, #4
 800b458:	3415      	adds	r4, #21
 800b45a:	42a6      	cmp	r6, r4
 800b45c:	bf38      	it	cc
 800b45e:	2304      	movcc	r3, #4
 800b460:	441d      	add	r5, r3
 800b462:	4473      	add	r3, lr
 800b464:	469e      	mov	lr, r3
 800b466:	462e      	mov	r6, r5
 800b468:	4566      	cmp	r6, ip
 800b46a:	d30e      	bcc.n	800b48a <__mdiff+0xea>
 800b46c:	f10c 0203 	add.w	r2, ip, #3
 800b470:	1b52      	subs	r2, r2, r5
 800b472:	f022 0203 	bic.w	r2, r2, #3
 800b476:	3d03      	subs	r5, #3
 800b478:	45ac      	cmp	ip, r5
 800b47a:	bf38      	it	cc
 800b47c:	2200      	movcc	r2, #0
 800b47e:	4413      	add	r3, r2
 800b480:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800b484:	b17a      	cbz	r2, 800b4a6 <__mdiff+0x106>
 800b486:	6107      	str	r7, [r0, #16]
 800b488:	e7a4      	b.n	800b3d4 <__mdiff+0x34>
 800b48a:	f856 8b04 	ldr.w	r8, [r6], #4
 800b48e:	fa11 f288 	uxtah	r2, r1, r8
 800b492:	1414      	asrs	r4, r2, #16
 800b494:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b498:	b292      	uxth	r2, r2
 800b49a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800b49e:	f84e 2b04 	str.w	r2, [lr], #4
 800b4a2:	1421      	asrs	r1, r4, #16
 800b4a4:	e7e0      	b.n	800b468 <__mdiff+0xc8>
 800b4a6:	3f01      	subs	r7, #1
 800b4a8:	e7ea      	b.n	800b480 <__mdiff+0xe0>
 800b4aa:	bf00      	nop
 800b4ac:	0800e381 	.word	0x0800e381
 800b4b0:	0800e392 	.word	0x0800e392

0800b4b4 <__ulp>:
 800b4b4:	b082      	sub	sp, #8
 800b4b6:	ed8d 0b00 	vstr	d0, [sp]
 800b4ba:	9a01      	ldr	r2, [sp, #4]
 800b4bc:	4b0f      	ldr	r3, [pc, #60]	; (800b4fc <__ulp+0x48>)
 800b4be:	4013      	ands	r3, r2
 800b4c0:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	dc08      	bgt.n	800b4da <__ulp+0x26>
 800b4c8:	425b      	negs	r3, r3
 800b4ca:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800b4ce:	ea4f 5223 	mov.w	r2, r3, asr #20
 800b4d2:	da04      	bge.n	800b4de <__ulp+0x2a>
 800b4d4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b4d8:	4113      	asrs	r3, r2
 800b4da:	2200      	movs	r2, #0
 800b4dc:	e008      	b.n	800b4f0 <__ulp+0x3c>
 800b4de:	f1a2 0314 	sub.w	r3, r2, #20
 800b4e2:	2b1e      	cmp	r3, #30
 800b4e4:	bfda      	itte	le
 800b4e6:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800b4ea:	40da      	lsrle	r2, r3
 800b4ec:	2201      	movgt	r2, #1
 800b4ee:	2300      	movs	r3, #0
 800b4f0:	4619      	mov	r1, r3
 800b4f2:	4610      	mov	r0, r2
 800b4f4:	ec41 0b10 	vmov	d0, r0, r1
 800b4f8:	b002      	add	sp, #8
 800b4fa:	4770      	bx	lr
 800b4fc:	7ff00000 	.word	0x7ff00000

0800b500 <__b2d>:
 800b500:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b504:	6906      	ldr	r6, [r0, #16]
 800b506:	f100 0814 	add.w	r8, r0, #20
 800b50a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800b50e:	1f37      	subs	r7, r6, #4
 800b510:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800b514:	4610      	mov	r0, r2
 800b516:	f7ff fd53 	bl	800afc0 <__hi0bits>
 800b51a:	f1c0 0320 	rsb	r3, r0, #32
 800b51e:	280a      	cmp	r0, #10
 800b520:	600b      	str	r3, [r1, #0]
 800b522:	491b      	ldr	r1, [pc, #108]	; (800b590 <__b2d+0x90>)
 800b524:	dc15      	bgt.n	800b552 <__b2d+0x52>
 800b526:	f1c0 0c0b 	rsb	ip, r0, #11
 800b52a:	fa22 f30c 	lsr.w	r3, r2, ip
 800b52e:	45b8      	cmp	r8, r7
 800b530:	ea43 0501 	orr.w	r5, r3, r1
 800b534:	bf34      	ite	cc
 800b536:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800b53a:	2300      	movcs	r3, #0
 800b53c:	3015      	adds	r0, #21
 800b53e:	fa02 f000 	lsl.w	r0, r2, r0
 800b542:	fa23 f30c 	lsr.w	r3, r3, ip
 800b546:	4303      	orrs	r3, r0
 800b548:	461c      	mov	r4, r3
 800b54a:	ec45 4b10 	vmov	d0, r4, r5
 800b54e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b552:	45b8      	cmp	r8, r7
 800b554:	bf3a      	itte	cc
 800b556:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800b55a:	f1a6 0708 	subcc.w	r7, r6, #8
 800b55e:	2300      	movcs	r3, #0
 800b560:	380b      	subs	r0, #11
 800b562:	d012      	beq.n	800b58a <__b2d+0x8a>
 800b564:	f1c0 0120 	rsb	r1, r0, #32
 800b568:	fa23 f401 	lsr.w	r4, r3, r1
 800b56c:	4082      	lsls	r2, r0
 800b56e:	4322      	orrs	r2, r4
 800b570:	4547      	cmp	r7, r8
 800b572:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800b576:	bf8c      	ite	hi
 800b578:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800b57c:	2200      	movls	r2, #0
 800b57e:	4083      	lsls	r3, r0
 800b580:	40ca      	lsrs	r2, r1
 800b582:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800b586:	4313      	orrs	r3, r2
 800b588:	e7de      	b.n	800b548 <__b2d+0x48>
 800b58a:	ea42 0501 	orr.w	r5, r2, r1
 800b58e:	e7db      	b.n	800b548 <__b2d+0x48>
 800b590:	3ff00000 	.word	0x3ff00000

0800b594 <__d2b>:
 800b594:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b598:	460f      	mov	r7, r1
 800b59a:	2101      	movs	r1, #1
 800b59c:	ec59 8b10 	vmov	r8, r9, d0
 800b5a0:	4616      	mov	r6, r2
 800b5a2:	f7ff fc1b 	bl	800addc <_Balloc>
 800b5a6:	4604      	mov	r4, r0
 800b5a8:	b930      	cbnz	r0, 800b5b8 <__d2b+0x24>
 800b5aa:	4602      	mov	r2, r0
 800b5ac:	4b24      	ldr	r3, [pc, #144]	; (800b640 <__d2b+0xac>)
 800b5ae:	4825      	ldr	r0, [pc, #148]	; (800b644 <__d2b+0xb0>)
 800b5b0:	f240 310f 	movw	r1, #783	; 0x30f
 800b5b4:	f001 f9b0 	bl	800c918 <__assert_func>
 800b5b8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b5bc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b5c0:	bb2d      	cbnz	r5, 800b60e <__d2b+0x7a>
 800b5c2:	9301      	str	r3, [sp, #4]
 800b5c4:	f1b8 0300 	subs.w	r3, r8, #0
 800b5c8:	d026      	beq.n	800b618 <__d2b+0x84>
 800b5ca:	4668      	mov	r0, sp
 800b5cc:	9300      	str	r3, [sp, #0]
 800b5ce:	f7ff fd17 	bl	800b000 <__lo0bits>
 800b5d2:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b5d6:	b1e8      	cbz	r0, 800b614 <__d2b+0x80>
 800b5d8:	f1c0 0320 	rsb	r3, r0, #32
 800b5dc:	fa02 f303 	lsl.w	r3, r2, r3
 800b5e0:	430b      	orrs	r3, r1
 800b5e2:	40c2      	lsrs	r2, r0
 800b5e4:	6163      	str	r3, [r4, #20]
 800b5e6:	9201      	str	r2, [sp, #4]
 800b5e8:	9b01      	ldr	r3, [sp, #4]
 800b5ea:	61a3      	str	r3, [r4, #24]
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	bf14      	ite	ne
 800b5f0:	2202      	movne	r2, #2
 800b5f2:	2201      	moveq	r2, #1
 800b5f4:	6122      	str	r2, [r4, #16]
 800b5f6:	b1bd      	cbz	r5, 800b628 <__d2b+0x94>
 800b5f8:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b5fc:	4405      	add	r5, r0
 800b5fe:	603d      	str	r5, [r7, #0]
 800b600:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b604:	6030      	str	r0, [r6, #0]
 800b606:	4620      	mov	r0, r4
 800b608:	b003      	add	sp, #12
 800b60a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b60e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b612:	e7d6      	b.n	800b5c2 <__d2b+0x2e>
 800b614:	6161      	str	r1, [r4, #20]
 800b616:	e7e7      	b.n	800b5e8 <__d2b+0x54>
 800b618:	a801      	add	r0, sp, #4
 800b61a:	f7ff fcf1 	bl	800b000 <__lo0bits>
 800b61e:	9b01      	ldr	r3, [sp, #4]
 800b620:	6163      	str	r3, [r4, #20]
 800b622:	3020      	adds	r0, #32
 800b624:	2201      	movs	r2, #1
 800b626:	e7e5      	b.n	800b5f4 <__d2b+0x60>
 800b628:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b62c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b630:	6038      	str	r0, [r7, #0]
 800b632:	6918      	ldr	r0, [r3, #16]
 800b634:	f7ff fcc4 	bl	800afc0 <__hi0bits>
 800b638:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b63c:	e7e2      	b.n	800b604 <__d2b+0x70>
 800b63e:	bf00      	nop
 800b640:	0800e381 	.word	0x0800e381
 800b644:	0800e392 	.word	0x0800e392

0800b648 <__ratio>:
 800b648:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b64c:	4688      	mov	r8, r1
 800b64e:	4669      	mov	r1, sp
 800b650:	4681      	mov	r9, r0
 800b652:	f7ff ff55 	bl	800b500 <__b2d>
 800b656:	a901      	add	r1, sp, #4
 800b658:	4640      	mov	r0, r8
 800b65a:	ec55 4b10 	vmov	r4, r5, d0
 800b65e:	f7ff ff4f 	bl	800b500 <__b2d>
 800b662:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b666:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800b66a:	eba3 0c02 	sub.w	ip, r3, r2
 800b66e:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b672:	1a9b      	subs	r3, r3, r2
 800b674:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800b678:	ec51 0b10 	vmov	r0, r1, d0
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	bfd6      	itet	le
 800b680:	460a      	movle	r2, r1
 800b682:	462a      	movgt	r2, r5
 800b684:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b688:	468b      	mov	fp, r1
 800b68a:	462f      	mov	r7, r5
 800b68c:	bfd4      	ite	le
 800b68e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800b692:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800b696:	4620      	mov	r0, r4
 800b698:	ee10 2a10 	vmov	r2, s0
 800b69c:	465b      	mov	r3, fp
 800b69e:	4639      	mov	r1, r7
 800b6a0:	f7f5 f8d4 	bl	800084c <__aeabi_ddiv>
 800b6a4:	ec41 0b10 	vmov	d0, r0, r1
 800b6a8:	b003      	add	sp, #12
 800b6aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b6ae <__copybits>:
 800b6ae:	3901      	subs	r1, #1
 800b6b0:	b570      	push	{r4, r5, r6, lr}
 800b6b2:	1149      	asrs	r1, r1, #5
 800b6b4:	6914      	ldr	r4, [r2, #16]
 800b6b6:	3101      	adds	r1, #1
 800b6b8:	f102 0314 	add.w	r3, r2, #20
 800b6bc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b6c0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b6c4:	1f05      	subs	r5, r0, #4
 800b6c6:	42a3      	cmp	r3, r4
 800b6c8:	d30c      	bcc.n	800b6e4 <__copybits+0x36>
 800b6ca:	1aa3      	subs	r3, r4, r2
 800b6cc:	3b11      	subs	r3, #17
 800b6ce:	f023 0303 	bic.w	r3, r3, #3
 800b6d2:	3211      	adds	r2, #17
 800b6d4:	42a2      	cmp	r2, r4
 800b6d6:	bf88      	it	hi
 800b6d8:	2300      	movhi	r3, #0
 800b6da:	4418      	add	r0, r3
 800b6dc:	2300      	movs	r3, #0
 800b6de:	4288      	cmp	r0, r1
 800b6e0:	d305      	bcc.n	800b6ee <__copybits+0x40>
 800b6e2:	bd70      	pop	{r4, r5, r6, pc}
 800b6e4:	f853 6b04 	ldr.w	r6, [r3], #4
 800b6e8:	f845 6f04 	str.w	r6, [r5, #4]!
 800b6ec:	e7eb      	b.n	800b6c6 <__copybits+0x18>
 800b6ee:	f840 3b04 	str.w	r3, [r0], #4
 800b6f2:	e7f4      	b.n	800b6de <__copybits+0x30>

0800b6f4 <__any_on>:
 800b6f4:	f100 0214 	add.w	r2, r0, #20
 800b6f8:	6900      	ldr	r0, [r0, #16]
 800b6fa:	114b      	asrs	r3, r1, #5
 800b6fc:	4298      	cmp	r0, r3
 800b6fe:	b510      	push	{r4, lr}
 800b700:	db11      	blt.n	800b726 <__any_on+0x32>
 800b702:	dd0a      	ble.n	800b71a <__any_on+0x26>
 800b704:	f011 011f 	ands.w	r1, r1, #31
 800b708:	d007      	beq.n	800b71a <__any_on+0x26>
 800b70a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b70e:	fa24 f001 	lsr.w	r0, r4, r1
 800b712:	fa00 f101 	lsl.w	r1, r0, r1
 800b716:	428c      	cmp	r4, r1
 800b718:	d10b      	bne.n	800b732 <__any_on+0x3e>
 800b71a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b71e:	4293      	cmp	r3, r2
 800b720:	d803      	bhi.n	800b72a <__any_on+0x36>
 800b722:	2000      	movs	r0, #0
 800b724:	bd10      	pop	{r4, pc}
 800b726:	4603      	mov	r3, r0
 800b728:	e7f7      	b.n	800b71a <__any_on+0x26>
 800b72a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b72e:	2900      	cmp	r1, #0
 800b730:	d0f5      	beq.n	800b71e <__any_on+0x2a>
 800b732:	2001      	movs	r0, #1
 800b734:	e7f6      	b.n	800b724 <__any_on+0x30>

0800b736 <sulp>:
 800b736:	b570      	push	{r4, r5, r6, lr}
 800b738:	4604      	mov	r4, r0
 800b73a:	460d      	mov	r5, r1
 800b73c:	ec45 4b10 	vmov	d0, r4, r5
 800b740:	4616      	mov	r6, r2
 800b742:	f7ff feb7 	bl	800b4b4 <__ulp>
 800b746:	ec51 0b10 	vmov	r0, r1, d0
 800b74a:	b17e      	cbz	r6, 800b76c <sulp+0x36>
 800b74c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800b750:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b754:	2b00      	cmp	r3, #0
 800b756:	dd09      	ble.n	800b76c <sulp+0x36>
 800b758:	051b      	lsls	r3, r3, #20
 800b75a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800b75e:	2400      	movs	r4, #0
 800b760:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800b764:	4622      	mov	r2, r4
 800b766:	462b      	mov	r3, r5
 800b768:	f7f4 ff46 	bl	80005f8 <__aeabi_dmul>
 800b76c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b770 <_strtod_l>:
 800b770:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b774:	ed2d 8b02 	vpush	{d8}
 800b778:	b09b      	sub	sp, #108	; 0x6c
 800b77a:	4604      	mov	r4, r0
 800b77c:	9213      	str	r2, [sp, #76]	; 0x4c
 800b77e:	2200      	movs	r2, #0
 800b780:	9216      	str	r2, [sp, #88]	; 0x58
 800b782:	460d      	mov	r5, r1
 800b784:	f04f 0800 	mov.w	r8, #0
 800b788:	f04f 0900 	mov.w	r9, #0
 800b78c:	460a      	mov	r2, r1
 800b78e:	9215      	str	r2, [sp, #84]	; 0x54
 800b790:	7811      	ldrb	r1, [r2, #0]
 800b792:	292b      	cmp	r1, #43	; 0x2b
 800b794:	d04c      	beq.n	800b830 <_strtod_l+0xc0>
 800b796:	d83a      	bhi.n	800b80e <_strtod_l+0x9e>
 800b798:	290d      	cmp	r1, #13
 800b79a:	d834      	bhi.n	800b806 <_strtod_l+0x96>
 800b79c:	2908      	cmp	r1, #8
 800b79e:	d834      	bhi.n	800b80a <_strtod_l+0x9a>
 800b7a0:	2900      	cmp	r1, #0
 800b7a2:	d03d      	beq.n	800b820 <_strtod_l+0xb0>
 800b7a4:	2200      	movs	r2, #0
 800b7a6:	920a      	str	r2, [sp, #40]	; 0x28
 800b7a8:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800b7aa:	7832      	ldrb	r2, [r6, #0]
 800b7ac:	2a30      	cmp	r2, #48	; 0x30
 800b7ae:	f040 80b4 	bne.w	800b91a <_strtod_l+0x1aa>
 800b7b2:	7872      	ldrb	r2, [r6, #1]
 800b7b4:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800b7b8:	2a58      	cmp	r2, #88	; 0x58
 800b7ba:	d170      	bne.n	800b89e <_strtod_l+0x12e>
 800b7bc:	9302      	str	r3, [sp, #8]
 800b7be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b7c0:	9301      	str	r3, [sp, #4]
 800b7c2:	ab16      	add	r3, sp, #88	; 0x58
 800b7c4:	9300      	str	r3, [sp, #0]
 800b7c6:	4a8e      	ldr	r2, [pc, #568]	; (800ba00 <_strtod_l+0x290>)
 800b7c8:	ab17      	add	r3, sp, #92	; 0x5c
 800b7ca:	a915      	add	r1, sp, #84	; 0x54
 800b7cc:	4620      	mov	r0, r4
 800b7ce:	f001 f93f 	bl	800ca50 <__gethex>
 800b7d2:	f010 070f 	ands.w	r7, r0, #15
 800b7d6:	4605      	mov	r5, r0
 800b7d8:	d005      	beq.n	800b7e6 <_strtod_l+0x76>
 800b7da:	2f06      	cmp	r7, #6
 800b7dc:	d12a      	bne.n	800b834 <_strtod_l+0xc4>
 800b7de:	3601      	adds	r6, #1
 800b7e0:	2300      	movs	r3, #0
 800b7e2:	9615      	str	r6, [sp, #84]	; 0x54
 800b7e4:	930a      	str	r3, [sp, #40]	; 0x28
 800b7e6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	f040 857f 	bne.w	800c2ec <_strtod_l+0xb7c>
 800b7ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b7f0:	b1db      	cbz	r3, 800b82a <_strtod_l+0xba>
 800b7f2:	4642      	mov	r2, r8
 800b7f4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800b7f8:	ec43 2b10 	vmov	d0, r2, r3
 800b7fc:	b01b      	add	sp, #108	; 0x6c
 800b7fe:	ecbd 8b02 	vpop	{d8}
 800b802:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b806:	2920      	cmp	r1, #32
 800b808:	d1cc      	bne.n	800b7a4 <_strtod_l+0x34>
 800b80a:	3201      	adds	r2, #1
 800b80c:	e7bf      	b.n	800b78e <_strtod_l+0x1e>
 800b80e:	292d      	cmp	r1, #45	; 0x2d
 800b810:	d1c8      	bne.n	800b7a4 <_strtod_l+0x34>
 800b812:	2101      	movs	r1, #1
 800b814:	910a      	str	r1, [sp, #40]	; 0x28
 800b816:	1c51      	adds	r1, r2, #1
 800b818:	9115      	str	r1, [sp, #84]	; 0x54
 800b81a:	7852      	ldrb	r2, [r2, #1]
 800b81c:	2a00      	cmp	r2, #0
 800b81e:	d1c3      	bne.n	800b7a8 <_strtod_l+0x38>
 800b820:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b822:	9515      	str	r5, [sp, #84]	; 0x54
 800b824:	2b00      	cmp	r3, #0
 800b826:	f040 855f 	bne.w	800c2e8 <_strtod_l+0xb78>
 800b82a:	4642      	mov	r2, r8
 800b82c:	464b      	mov	r3, r9
 800b82e:	e7e3      	b.n	800b7f8 <_strtod_l+0x88>
 800b830:	2100      	movs	r1, #0
 800b832:	e7ef      	b.n	800b814 <_strtod_l+0xa4>
 800b834:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800b836:	b13a      	cbz	r2, 800b848 <_strtod_l+0xd8>
 800b838:	2135      	movs	r1, #53	; 0x35
 800b83a:	a818      	add	r0, sp, #96	; 0x60
 800b83c:	f7ff ff37 	bl	800b6ae <__copybits>
 800b840:	9916      	ldr	r1, [sp, #88]	; 0x58
 800b842:	4620      	mov	r0, r4
 800b844:	f7ff fb0a 	bl	800ae5c <_Bfree>
 800b848:	3f01      	subs	r7, #1
 800b84a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b84c:	2f04      	cmp	r7, #4
 800b84e:	d806      	bhi.n	800b85e <_strtod_l+0xee>
 800b850:	e8df f007 	tbb	[pc, r7]
 800b854:	201d0314 	.word	0x201d0314
 800b858:	14          	.byte	0x14
 800b859:	00          	.byte	0x00
 800b85a:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 800b85e:	05e9      	lsls	r1, r5, #23
 800b860:	bf48      	it	mi
 800b862:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800b866:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b86a:	0d1b      	lsrs	r3, r3, #20
 800b86c:	051b      	lsls	r3, r3, #20
 800b86e:	2b00      	cmp	r3, #0
 800b870:	d1b9      	bne.n	800b7e6 <_strtod_l+0x76>
 800b872:	f7fe fb07 	bl	8009e84 <__errno>
 800b876:	2322      	movs	r3, #34	; 0x22
 800b878:	6003      	str	r3, [r0, #0]
 800b87a:	e7b4      	b.n	800b7e6 <_strtod_l+0x76>
 800b87c:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 800b880:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800b884:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800b888:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800b88c:	e7e7      	b.n	800b85e <_strtod_l+0xee>
 800b88e:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800ba08 <_strtod_l+0x298>
 800b892:	e7e4      	b.n	800b85e <_strtod_l+0xee>
 800b894:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800b898:	f04f 38ff 	mov.w	r8, #4294967295
 800b89c:	e7df      	b.n	800b85e <_strtod_l+0xee>
 800b89e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b8a0:	1c5a      	adds	r2, r3, #1
 800b8a2:	9215      	str	r2, [sp, #84]	; 0x54
 800b8a4:	785b      	ldrb	r3, [r3, #1]
 800b8a6:	2b30      	cmp	r3, #48	; 0x30
 800b8a8:	d0f9      	beq.n	800b89e <_strtod_l+0x12e>
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	d09b      	beq.n	800b7e6 <_strtod_l+0x76>
 800b8ae:	2301      	movs	r3, #1
 800b8b0:	f04f 0a00 	mov.w	sl, #0
 800b8b4:	9304      	str	r3, [sp, #16]
 800b8b6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b8b8:	930b      	str	r3, [sp, #44]	; 0x2c
 800b8ba:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800b8be:	46d3      	mov	fp, sl
 800b8c0:	220a      	movs	r2, #10
 800b8c2:	9815      	ldr	r0, [sp, #84]	; 0x54
 800b8c4:	7806      	ldrb	r6, [r0, #0]
 800b8c6:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800b8ca:	b2d9      	uxtb	r1, r3
 800b8cc:	2909      	cmp	r1, #9
 800b8ce:	d926      	bls.n	800b91e <_strtod_l+0x1ae>
 800b8d0:	494c      	ldr	r1, [pc, #304]	; (800ba04 <_strtod_l+0x294>)
 800b8d2:	2201      	movs	r2, #1
 800b8d4:	f000 ffe6 	bl	800c8a4 <strncmp>
 800b8d8:	2800      	cmp	r0, #0
 800b8da:	d030      	beq.n	800b93e <_strtod_l+0x1ce>
 800b8dc:	2000      	movs	r0, #0
 800b8de:	4632      	mov	r2, r6
 800b8e0:	9005      	str	r0, [sp, #20]
 800b8e2:	465e      	mov	r6, fp
 800b8e4:	4603      	mov	r3, r0
 800b8e6:	2a65      	cmp	r2, #101	; 0x65
 800b8e8:	d001      	beq.n	800b8ee <_strtod_l+0x17e>
 800b8ea:	2a45      	cmp	r2, #69	; 0x45
 800b8ec:	d113      	bne.n	800b916 <_strtod_l+0x1a6>
 800b8ee:	b91e      	cbnz	r6, 800b8f8 <_strtod_l+0x188>
 800b8f0:	9a04      	ldr	r2, [sp, #16]
 800b8f2:	4302      	orrs	r2, r0
 800b8f4:	d094      	beq.n	800b820 <_strtod_l+0xb0>
 800b8f6:	2600      	movs	r6, #0
 800b8f8:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800b8fa:	1c6a      	adds	r2, r5, #1
 800b8fc:	9215      	str	r2, [sp, #84]	; 0x54
 800b8fe:	786a      	ldrb	r2, [r5, #1]
 800b900:	2a2b      	cmp	r2, #43	; 0x2b
 800b902:	d074      	beq.n	800b9ee <_strtod_l+0x27e>
 800b904:	2a2d      	cmp	r2, #45	; 0x2d
 800b906:	d078      	beq.n	800b9fa <_strtod_l+0x28a>
 800b908:	f04f 0c00 	mov.w	ip, #0
 800b90c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800b910:	2909      	cmp	r1, #9
 800b912:	d97f      	bls.n	800ba14 <_strtod_l+0x2a4>
 800b914:	9515      	str	r5, [sp, #84]	; 0x54
 800b916:	2700      	movs	r7, #0
 800b918:	e09e      	b.n	800ba58 <_strtod_l+0x2e8>
 800b91a:	2300      	movs	r3, #0
 800b91c:	e7c8      	b.n	800b8b0 <_strtod_l+0x140>
 800b91e:	f1bb 0f08 	cmp.w	fp, #8
 800b922:	bfd8      	it	le
 800b924:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800b926:	f100 0001 	add.w	r0, r0, #1
 800b92a:	bfda      	itte	le
 800b92c:	fb02 3301 	mlale	r3, r2, r1, r3
 800b930:	9309      	strle	r3, [sp, #36]	; 0x24
 800b932:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800b936:	f10b 0b01 	add.w	fp, fp, #1
 800b93a:	9015      	str	r0, [sp, #84]	; 0x54
 800b93c:	e7c1      	b.n	800b8c2 <_strtod_l+0x152>
 800b93e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b940:	1c5a      	adds	r2, r3, #1
 800b942:	9215      	str	r2, [sp, #84]	; 0x54
 800b944:	785a      	ldrb	r2, [r3, #1]
 800b946:	f1bb 0f00 	cmp.w	fp, #0
 800b94a:	d037      	beq.n	800b9bc <_strtod_l+0x24c>
 800b94c:	9005      	str	r0, [sp, #20]
 800b94e:	465e      	mov	r6, fp
 800b950:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800b954:	2b09      	cmp	r3, #9
 800b956:	d912      	bls.n	800b97e <_strtod_l+0x20e>
 800b958:	2301      	movs	r3, #1
 800b95a:	e7c4      	b.n	800b8e6 <_strtod_l+0x176>
 800b95c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b95e:	1c5a      	adds	r2, r3, #1
 800b960:	9215      	str	r2, [sp, #84]	; 0x54
 800b962:	785a      	ldrb	r2, [r3, #1]
 800b964:	3001      	adds	r0, #1
 800b966:	2a30      	cmp	r2, #48	; 0x30
 800b968:	d0f8      	beq.n	800b95c <_strtod_l+0x1ec>
 800b96a:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800b96e:	2b08      	cmp	r3, #8
 800b970:	f200 84c1 	bhi.w	800c2f6 <_strtod_l+0xb86>
 800b974:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b976:	9005      	str	r0, [sp, #20]
 800b978:	2000      	movs	r0, #0
 800b97a:	930b      	str	r3, [sp, #44]	; 0x2c
 800b97c:	4606      	mov	r6, r0
 800b97e:	3a30      	subs	r2, #48	; 0x30
 800b980:	f100 0301 	add.w	r3, r0, #1
 800b984:	d014      	beq.n	800b9b0 <_strtod_l+0x240>
 800b986:	9905      	ldr	r1, [sp, #20]
 800b988:	4419      	add	r1, r3
 800b98a:	9105      	str	r1, [sp, #20]
 800b98c:	4633      	mov	r3, r6
 800b98e:	eb00 0c06 	add.w	ip, r0, r6
 800b992:	210a      	movs	r1, #10
 800b994:	4563      	cmp	r3, ip
 800b996:	d113      	bne.n	800b9c0 <_strtod_l+0x250>
 800b998:	1833      	adds	r3, r6, r0
 800b99a:	2b08      	cmp	r3, #8
 800b99c:	f106 0601 	add.w	r6, r6, #1
 800b9a0:	4406      	add	r6, r0
 800b9a2:	dc1a      	bgt.n	800b9da <_strtod_l+0x26a>
 800b9a4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b9a6:	230a      	movs	r3, #10
 800b9a8:	fb03 2301 	mla	r3, r3, r1, r2
 800b9ac:	9309      	str	r3, [sp, #36]	; 0x24
 800b9ae:	2300      	movs	r3, #0
 800b9b0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800b9b2:	1c51      	adds	r1, r2, #1
 800b9b4:	9115      	str	r1, [sp, #84]	; 0x54
 800b9b6:	7852      	ldrb	r2, [r2, #1]
 800b9b8:	4618      	mov	r0, r3
 800b9ba:	e7c9      	b.n	800b950 <_strtod_l+0x1e0>
 800b9bc:	4658      	mov	r0, fp
 800b9be:	e7d2      	b.n	800b966 <_strtod_l+0x1f6>
 800b9c0:	2b08      	cmp	r3, #8
 800b9c2:	f103 0301 	add.w	r3, r3, #1
 800b9c6:	dc03      	bgt.n	800b9d0 <_strtod_l+0x260>
 800b9c8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800b9ca:	434f      	muls	r7, r1
 800b9cc:	9709      	str	r7, [sp, #36]	; 0x24
 800b9ce:	e7e1      	b.n	800b994 <_strtod_l+0x224>
 800b9d0:	2b10      	cmp	r3, #16
 800b9d2:	bfd8      	it	le
 800b9d4:	fb01 fa0a 	mulle.w	sl, r1, sl
 800b9d8:	e7dc      	b.n	800b994 <_strtod_l+0x224>
 800b9da:	2e10      	cmp	r6, #16
 800b9dc:	bfdc      	itt	le
 800b9de:	230a      	movle	r3, #10
 800b9e0:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800b9e4:	e7e3      	b.n	800b9ae <_strtod_l+0x23e>
 800b9e6:	2300      	movs	r3, #0
 800b9e8:	9305      	str	r3, [sp, #20]
 800b9ea:	2301      	movs	r3, #1
 800b9ec:	e780      	b.n	800b8f0 <_strtod_l+0x180>
 800b9ee:	f04f 0c00 	mov.w	ip, #0
 800b9f2:	1caa      	adds	r2, r5, #2
 800b9f4:	9215      	str	r2, [sp, #84]	; 0x54
 800b9f6:	78aa      	ldrb	r2, [r5, #2]
 800b9f8:	e788      	b.n	800b90c <_strtod_l+0x19c>
 800b9fa:	f04f 0c01 	mov.w	ip, #1
 800b9fe:	e7f8      	b.n	800b9f2 <_strtod_l+0x282>
 800ba00:	0800e4f0 	.word	0x0800e4f0
 800ba04:	0800e4ec 	.word	0x0800e4ec
 800ba08:	7ff00000 	.word	0x7ff00000
 800ba0c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800ba0e:	1c51      	adds	r1, r2, #1
 800ba10:	9115      	str	r1, [sp, #84]	; 0x54
 800ba12:	7852      	ldrb	r2, [r2, #1]
 800ba14:	2a30      	cmp	r2, #48	; 0x30
 800ba16:	d0f9      	beq.n	800ba0c <_strtod_l+0x29c>
 800ba18:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800ba1c:	2908      	cmp	r1, #8
 800ba1e:	f63f af7a 	bhi.w	800b916 <_strtod_l+0x1a6>
 800ba22:	3a30      	subs	r2, #48	; 0x30
 800ba24:	9208      	str	r2, [sp, #32]
 800ba26:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800ba28:	920c      	str	r2, [sp, #48]	; 0x30
 800ba2a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800ba2c:	1c57      	adds	r7, r2, #1
 800ba2e:	9715      	str	r7, [sp, #84]	; 0x54
 800ba30:	7852      	ldrb	r2, [r2, #1]
 800ba32:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800ba36:	f1be 0f09 	cmp.w	lr, #9
 800ba3a:	d938      	bls.n	800baae <_strtod_l+0x33e>
 800ba3c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800ba3e:	1a7f      	subs	r7, r7, r1
 800ba40:	2f08      	cmp	r7, #8
 800ba42:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800ba46:	dc03      	bgt.n	800ba50 <_strtod_l+0x2e0>
 800ba48:	9908      	ldr	r1, [sp, #32]
 800ba4a:	428f      	cmp	r7, r1
 800ba4c:	bfa8      	it	ge
 800ba4e:	460f      	movge	r7, r1
 800ba50:	f1bc 0f00 	cmp.w	ip, #0
 800ba54:	d000      	beq.n	800ba58 <_strtod_l+0x2e8>
 800ba56:	427f      	negs	r7, r7
 800ba58:	2e00      	cmp	r6, #0
 800ba5a:	d14f      	bne.n	800bafc <_strtod_l+0x38c>
 800ba5c:	9904      	ldr	r1, [sp, #16]
 800ba5e:	4301      	orrs	r1, r0
 800ba60:	f47f aec1 	bne.w	800b7e6 <_strtod_l+0x76>
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	f47f aedb 	bne.w	800b820 <_strtod_l+0xb0>
 800ba6a:	2a69      	cmp	r2, #105	; 0x69
 800ba6c:	d029      	beq.n	800bac2 <_strtod_l+0x352>
 800ba6e:	dc26      	bgt.n	800babe <_strtod_l+0x34e>
 800ba70:	2a49      	cmp	r2, #73	; 0x49
 800ba72:	d026      	beq.n	800bac2 <_strtod_l+0x352>
 800ba74:	2a4e      	cmp	r2, #78	; 0x4e
 800ba76:	f47f aed3 	bne.w	800b820 <_strtod_l+0xb0>
 800ba7a:	499b      	ldr	r1, [pc, #620]	; (800bce8 <_strtod_l+0x578>)
 800ba7c:	a815      	add	r0, sp, #84	; 0x54
 800ba7e:	f001 fa27 	bl	800ced0 <__match>
 800ba82:	2800      	cmp	r0, #0
 800ba84:	f43f aecc 	beq.w	800b820 <_strtod_l+0xb0>
 800ba88:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ba8a:	781b      	ldrb	r3, [r3, #0]
 800ba8c:	2b28      	cmp	r3, #40	; 0x28
 800ba8e:	d12f      	bne.n	800baf0 <_strtod_l+0x380>
 800ba90:	4996      	ldr	r1, [pc, #600]	; (800bcec <_strtod_l+0x57c>)
 800ba92:	aa18      	add	r2, sp, #96	; 0x60
 800ba94:	a815      	add	r0, sp, #84	; 0x54
 800ba96:	f001 fa2f 	bl	800cef8 <__hexnan>
 800ba9a:	2805      	cmp	r0, #5
 800ba9c:	d128      	bne.n	800baf0 <_strtod_l+0x380>
 800ba9e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800baa0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800baa4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800baa8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800baac:	e69b      	b.n	800b7e6 <_strtod_l+0x76>
 800baae:	9f08      	ldr	r7, [sp, #32]
 800bab0:	210a      	movs	r1, #10
 800bab2:	fb01 2107 	mla	r1, r1, r7, r2
 800bab6:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800baba:	9208      	str	r2, [sp, #32]
 800babc:	e7b5      	b.n	800ba2a <_strtod_l+0x2ba>
 800babe:	2a6e      	cmp	r2, #110	; 0x6e
 800bac0:	e7d9      	b.n	800ba76 <_strtod_l+0x306>
 800bac2:	498b      	ldr	r1, [pc, #556]	; (800bcf0 <_strtod_l+0x580>)
 800bac4:	a815      	add	r0, sp, #84	; 0x54
 800bac6:	f001 fa03 	bl	800ced0 <__match>
 800baca:	2800      	cmp	r0, #0
 800bacc:	f43f aea8 	beq.w	800b820 <_strtod_l+0xb0>
 800bad0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bad2:	4988      	ldr	r1, [pc, #544]	; (800bcf4 <_strtod_l+0x584>)
 800bad4:	3b01      	subs	r3, #1
 800bad6:	a815      	add	r0, sp, #84	; 0x54
 800bad8:	9315      	str	r3, [sp, #84]	; 0x54
 800bada:	f001 f9f9 	bl	800ced0 <__match>
 800bade:	b910      	cbnz	r0, 800bae6 <_strtod_l+0x376>
 800bae0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bae2:	3301      	adds	r3, #1
 800bae4:	9315      	str	r3, [sp, #84]	; 0x54
 800bae6:	f8df 921c 	ldr.w	r9, [pc, #540]	; 800bd04 <_strtod_l+0x594>
 800baea:	f04f 0800 	mov.w	r8, #0
 800baee:	e67a      	b.n	800b7e6 <_strtod_l+0x76>
 800baf0:	4881      	ldr	r0, [pc, #516]	; (800bcf8 <_strtod_l+0x588>)
 800baf2:	f000 ff09 	bl	800c908 <nan>
 800baf6:	ec59 8b10 	vmov	r8, r9, d0
 800bafa:	e674      	b.n	800b7e6 <_strtod_l+0x76>
 800bafc:	9b05      	ldr	r3, [sp, #20]
 800bafe:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bb00:	1afb      	subs	r3, r7, r3
 800bb02:	f1bb 0f00 	cmp.w	fp, #0
 800bb06:	bf08      	it	eq
 800bb08:	46b3      	moveq	fp, r6
 800bb0a:	2e10      	cmp	r6, #16
 800bb0c:	9308      	str	r3, [sp, #32]
 800bb0e:	4635      	mov	r5, r6
 800bb10:	bfa8      	it	ge
 800bb12:	2510      	movge	r5, #16
 800bb14:	f7f4 fcf6 	bl	8000504 <__aeabi_ui2d>
 800bb18:	2e09      	cmp	r6, #9
 800bb1a:	4680      	mov	r8, r0
 800bb1c:	4689      	mov	r9, r1
 800bb1e:	dd13      	ble.n	800bb48 <_strtod_l+0x3d8>
 800bb20:	4b76      	ldr	r3, [pc, #472]	; (800bcfc <_strtod_l+0x58c>)
 800bb22:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800bb26:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800bb2a:	f7f4 fd65 	bl	80005f8 <__aeabi_dmul>
 800bb2e:	4680      	mov	r8, r0
 800bb30:	4650      	mov	r0, sl
 800bb32:	4689      	mov	r9, r1
 800bb34:	f7f4 fce6 	bl	8000504 <__aeabi_ui2d>
 800bb38:	4602      	mov	r2, r0
 800bb3a:	460b      	mov	r3, r1
 800bb3c:	4640      	mov	r0, r8
 800bb3e:	4649      	mov	r1, r9
 800bb40:	f7f4 fba4 	bl	800028c <__adddf3>
 800bb44:	4680      	mov	r8, r0
 800bb46:	4689      	mov	r9, r1
 800bb48:	2e0f      	cmp	r6, #15
 800bb4a:	dc38      	bgt.n	800bbbe <_strtod_l+0x44e>
 800bb4c:	9b08      	ldr	r3, [sp, #32]
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	f43f ae49 	beq.w	800b7e6 <_strtod_l+0x76>
 800bb54:	dd24      	ble.n	800bba0 <_strtod_l+0x430>
 800bb56:	2b16      	cmp	r3, #22
 800bb58:	dc0b      	bgt.n	800bb72 <_strtod_l+0x402>
 800bb5a:	4968      	ldr	r1, [pc, #416]	; (800bcfc <_strtod_l+0x58c>)
 800bb5c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800bb60:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bb64:	4642      	mov	r2, r8
 800bb66:	464b      	mov	r3, r9
 800bb68:	f7f4 fd46 	bl	80005f8 <__aeabi_dmul>
 800bb6c:	4680      	mov	r8, r0
 800bb6e:	4689      	mov	r9, r1
 800bb70:	e639      	b.n	800b7e6 <_strtod_l+0x76>
 800bb72:	9a08      	ldr	r2, [sp, #32]
 800bb74:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 800bb78:	4293      	cmp	r3, r2
 800bb7a:	db20      	blt.n	800bbbe <_strtod_l+0x44e>
 800bb7c:	4c5f      	ldr	r4, [pc, #380]	; (800bcfc <_strtod_l+0x58c>)
 800bb7e:	f1c6 060f 	rsb	r6, r6, #15
 800bb82:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800bb86:	4642      	mov	r2, r8
 800bb88:	464b      	mov	r3, r9
 800bb8a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bb8e:	f7f4 fd33 	bl	80005f8 <__aeabi_dmul>
 800bb92:	9b08      	ldr	r3, [sp, #32]
 800bb94:	1b9e      	subs	r6, r3, r6
 800bb96:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800bb9a:	e9d4 2300 	ldrd	r2, r3, [r4]
 800bb9e:	e7e3      	b.n	800bb68 <_strtod_l+0x3f8>
 800bba0:	9b08      	ldr	r3, [sp, #32]
 800bba2:	3316      	adds	r3, #22
 800bba4:	db0b      	blt.n	800bbbe <_strtod_l+0x44e>
 800bba6:	9b05      	ldr	r3, [sp, #20]
 800bba8:	1bdf      	subs	r7, r3, r7
 800bbaa:	4b54      	ldr	r3, [pc, #336]	; (800bcfc <_strtod_l+0x58c>)
 800bbac:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800bbb0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bbb4:	4640      	mov	r0, r8
 800bbb6:	4649      	mov	r1, r9
 800bbb8:	f7f4 fe48 	bl	800084c <__aeabi_ddiv>
 800bbbc:	e7d6      	b.n	800bb6c <_strtod_l+0x3fc>
 800bbbe:	9b08      	ldr	r3, [sp, #32]
 800bbc0:	1b75      	subs	r5, r6, r5
 800bbc2:	441d      	add	r5, r3
 800bbc4:	2d00      	cmp	r5, #0
 800bbc6:	dd70      	ble.n	800bcaa <_strtod_l+0x53a>
 800bbc8:	f015 030f 	ands.w	r3, r5, #15
 800bbcc:	d00a      	beq.n	800bbe4 <_strtod_l+0x474>
 800bbce:	494b      	ldr	r1, [pc, #300]	; (800bcfc <_strtod_l+0x58c>)
 800bbd0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800bbd4:	4642      	mov	r2, r8
 800bbd6:	464b      	mov	r3, r9
 800bbd8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bbdc:	f7f4 fd0c 	bl	80005f8 <__aeabi_dmul>
 800bbe0:	4680      	mov	r8, r0
 800bbe2:	4689      	mov	r9, r1
 800bbe4:	f035 050f 	bics.w	r5, r5, #15
 800bbe8:	d04d      	beq.n	800bc86 <_strtod_l+0x516>
 800bbea:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800bbee:	dd22      	ble.n	800bc36 <_strtod_l+0x4c6>
 800bbf0:	2500      	movs	r5, #0
 800bbf2:	46ab      	mov	fp, r5
 800bbf4:	9509      	str	r5, [sp, #36]	; 0x24
 800bbf6:	9505      	str	r5, [sp, #20]
 800bbf8:	2322      	movs	r3, #34	; 0x22
 800bbfa:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800bd04 <_strtod_l+0x594>
 800bbfe:	6023      	str	r3, [r4, #0]
 800bc00:	f04f 0800 	mov.w	r8, #0
 800bc04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	f43f aded 	beq.w	800b7e6 <_strtod_l+0x76>
 800bc0c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800bc0e:	4620      	mov	r0, r4
 800bc10:	f7ff f924 	bl	800ae5c <_Bfree>
 800bc14:	9905      	ldr	r1, [sp, #20]
 800bc16:	4620      	mov	r0, r4
 800bc18:	f7ff f920 	bl	800ae5c <_Bfree>
 800bc1c:	4659      	mov	r1, fp
 800bc1e:	4620      	mov	r0, r4
 800bc20:	f7ff f91c 	bl	800ae5c <_Bfree>
 800bc24:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bc26:	4620      	mov	r0, r4
 800bc28:	f7ff f918 	bl	800ae5c <_Bfree>
 800bc2c:	4629      	mov	r1, r5
 800bc2e:	4620      	mov	r0, r4
 800bc30:	f7ff f914 	bl	800ae5c <_Bfree>
 800bc34:	e5d7      	b.n	800b7e6 <_strtod_l+0x76>
 800bc36:	4b32      	ldr	r3, [pc, #200]	; (800bd00 <_strtod_l+0x590>)
 800bc38:	9304      	str	r3, [sp, #16]
 800bc3a:	2300      	movs	r3, #0
 800bc3c:	112d      	asrs	r5, r5, #4
 800bc3e:	4640      	mov	r0, r8
 800bc40:	4649      	mov	r1, r9
 800bc42:	469a      	mov	sl, r3
 800bc44:	2d01      	cmp	r5, #1
 800bc46:	dc21      	bgt.n	800bc8c <_strtod_l+0x51c>
 800bc48:	b10b      	cbz	r3, 800bc4e <_strtod_l+0x4de>
 800bc4a:	4680      	mov	r8, r0
 800bc4c:	4689      	mov	r9, r1
 800bc4e:	492c      	ldr	r1, [pc, #176]	; (800bd00 <_strtod_l+0x590>)
 800bc50:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800bc54:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800bc58:	4642      	mov	r2, r8
 800bc5a:	464b      	mov	r3, r9
 800bc5c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bc60:	f7f4 fcca 	bl	80005f8 <__aeabi_dmul>
 800bc64:	4b27      	ldr	r3, [pc, #156]	; (800bd04 <_strtod_l+0x594>)
 800bc66:	460a      	mov	r2, r1
 800bc68:	400b      	ands	r3, r1
 800bc6a:	4927      	ldr	r1, [pc, #156]	; (800bd08 <_strtod_l+0x598>)
 800bc6c:	428b      	cmp	r3, r1
 800bc6e:	4680      	mov	r8, r0
 800bc70:	d8be      	bhi.n	800bbf0 <_strtod_l+0x480>
 800bc72:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800bc76:	428b      	cmp	r3, r1
 800bc78:	bf86      	itte	hi
 800bc7a:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 800bd0c <_strtod_l+0x59c>
 800bc7e:	f04f 38ff 	movhi.w	r8, #4294967295
 800bc82:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800bc86:	2300      	movs	r3, #0
 800bc88:	9304      	str	r3, [sp, #16]
 800bc8a:	e07b      	b.n	800bd84 <_strtod_l+0x614>
 800bc8c:	07ea      	lsls	r2, r5, #31
 800bc8e:	d505      	bpl.n	800bc9c <_strtod_l+0x52c>
 800bc90:	9b04      	ldr	r3, [sp, #16]
 800bc92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc96:	f7f4 fcaf 	bl	80005f8 <__aeabi_dmul>
 800bc9a:	2301      	movs	r3, #1
 800bc9c:	9a04      	ldr	r2, [sp, #16]
 800bc9e:	3208      	adds	r2, #8
 800bca0:	f10a 0a01 	add.w	sl, sl, #1
 800bca4:	106d      	asrs	r5, r5, #1
 800bca6:	9204      	str	r2, [sp, #16]
 800bca8:	e7cc      	b.n	800bc44 <_strtod_l+0x4d4>
 800bcaa:	d0ec      	beq.n	800bc86 <_strtod_l+0x516>
 800bcac:	426d      	negs	r5, r5
 800bcae:	f015 020f 	ands.w	r2, r5, #15
 800bcb2:	d00a      	beq.n	800bcca <_strtod_l+0x55a>
 800bcb4:	4b11      	ldr	r3, [pc, #68]	; (800bcfc <_strtod_l+0x58c>)
 800bcb6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bcba:	4640      	mov	r0, r8
 800bcbc:	4649      	mov	r1, r9
 800bcbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcc2:	f7f4 fdc3 	bl	800084c <__aeabi_ddiv>
 800bcc6:	4680      	mov	r8, r0
 800bcc8:	4689      	mov	r9, r1
 800bcca:	112d      	asrs	r5, r5, #4
 800bccc:	d0db      	beq.n	800bc86 <_strtod_l+0x516>
 800bcce:	2d1f      	cmp	r5, #31
 800bcd0:	dd1e      	ble.n	800bd10 <_strtod_l+0x5a0>
 800bcd2:	2500      	movs	r5, #0
 800bcd4:	46ab      	mov	fp, r5
 800bcd6:	9509      	str	r5, [sp, #36]	; 0x24
 800bcd8:	9505      	str	r5, [sp, #20]
 800bcda:	2322      	movs	r3, #34	; 0x22
 800bcdc:	f04f 0800 	mov.w	r8, #0
 800bce0:	f04f 0900 	mov.w	r9, #0
 800bce4:	6023      	str	r3, [r4, #0]
 800bce6:	e78d      	b.n	800bc04 <_strtod_l+0x494>
 800bce8:	0800e2d9 	.word	0x0800e2d9
 800bcec:	0800e504 	.word	0x0800e504
 800bcf0:	0800e2d1 	.word	0x0800e2d1
 800bcf4:	0800e308 	.word	0x0800e308
 800bcf8:	0800e695 	.word	0x0800e695
 800bcfc:	0800e418 	.word	0x0800e418
 800bd00:	0800e3f0 	.word	0x0800e3f0
 800bd04:	7ff00000 	.word	0x7ff00000
 800bd08:	7ca00000 	.word	0x7ca00000
 800bd0c:	7fefffff 	.word	0x7fefffff
 800bd10:	f015 0310 	ands.w	r3, r5, #16
 800bd14:	bf18      	it	ne
 800bd16:	236a      	movne	r3, #106	; 0x6a
 800bd18:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 800c0bc <_strtod_l+0x94c>
 800bd1c:	9304      	str	r3, [sp, #16]
 800bd1e:	4640      	mov	r0, r8
 800bd20:	4649      	mov	r1, r9
 800bd22:	2300      	movs	r3, #0
 800bd24:	07ea      	lsls	r2, r5, #31
 800bd26:	d504      	bpl.n	800bd32 <_strtod_l+0x5c2>
 800bd28:	e9da 2300 	ldrd	r2, r3, [sl]
 800bd2c:	f7f4 fc64 	bl	80005f8 <__aeabi_dmul>
 800bd30:	2301      	movs	r3, #1
 800bd32:	106d      	asrs	r5, r5, #1
 800bd34:	f10a 0a08 	add.w	sl, sl, #8
 800bd38:	d1f4      	bne.n	800bd24 <_strtod_l+0x5b4>
 800bd3a:	b10b      	cbz	r3, 800bd40 <_strtod_l+0x5d0>
 800bd3c:	4680      	mov	r8, r0
 800bd3e:	4689      	mov	r9, r1
 800bd40:	9b04      	ldr	r3, [sp, #16]
 800bd42:	b1bb      	cbz	r3, 800bd74 <_strtod_l+0x604>
 800bd44:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800bd48:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	4649      	mov	r1, r9
 800bd50:	dd10      	ble.n	800bd74 <_strtod_l+0x604>
 800bd52:	2b1f      	cmp	r3, #31
 800bd54:	f340 811e 	ble.w	800bf94 <_strtod_l+0x824>
 800bd58:	2b34      	cmp	r3, #52	; 0x34
 800bd5a:	bfde      	ittt	le
 800bd5c:	f04f 33ff 	movle.w	r3, #4294967295
 800bd60:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800bd64:	4093      	lslle	r3, r2
 800bd66:	f04f 0800 	mov.w	r8, #0
 800bd6a:	bfcc      	ite	gt
 800bd6c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800bd70:	ea03 0901 	andle.w	r9, r3, r1
 800bd74:	2200      	movs	r2, #0
 800bd76:	2300      	movs	r3, #0
 800bd78:	4640      	mov	r0, r8
 800bd7a:	4649      	mov	r1, r9
 800bd7c:	f7f4 fea4 	bl	8000ac8 <__aeabi_dcmpeq>
 800bd80:	2800      	cmp	r0, #0
 800bd82:	d1a6      	bne.n	800bcd2 <_strtod_l+0x562>
 800bd84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bd86:	9300      	str	r3, [sp, #0]
 800bd88:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800bd8a:	4633      	mov	r3, r6
 800bd8c:	465a      	mov	r2, fp
 800bd8e:	4620      	mov	r0, r4
 800bd90:	f7ff f8cc 	bl	800af2c <__s2b>
 800bd94:	9009      	str	r0, [sp, #36]	; 0x24
 800bd96:	2800      	cmp	r0, #0
 800bd98:	f43f af2a 	beq.w	800bbf0 <_strtod_l+0x480>
 800bd9c:	9a08      	ldr	r2, [sp, #32]
 800bd9e:	9b05      	ldr	r3, [sp, #20]
 800bda0:	2a00      	cmp	r2, #0
 800bda2:	eba3 0307 	sub.w	r3, r3, r7
 800bda6:	bfa8      	it	ge
 800bda8:	2300      	movge	r3, #0
 800bdaa:	930c      	str	r3, [sp, #48]	; 0x30
 800bdac:	2500      	movs	r5, #0
 800bdae:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800bdb2:	9312      	str	r3, [sp, #72]	; 0x48
 800bdb4:	46ab      	mov	fp, r5
 800bdb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bdb8:	4620      	mov	r0, r4
 800bdba:	6859      	ldr	r1, [r3, #4]
 800bdbc:	f7ff f80e 	bl	800addc <_Balloc>
 800bdc0:	9005      	str	r0, [sp, #20]
 800bdc2:	2800      	cmp	r0, #0
 800bdc4:	f43f af18 	beq.w	800bbf8 <_strtod_l+0x488>
 800bdc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bdca:	691a      	ldr	r2, [r3, #16]
 800bdcc:	3202      	adds	r2, #2
 800bdce:	f103 010c 	add.w	r1, r3, #12
 800bdd2:	0092      	lsls	r2, r2, #2
 800bdd4:	300c      	adds	r0, #12
 800bdd6:	f000 fd87 	bl	800c8e8 <memcpy>
 800bdda:	ec49 8b10 	vmov	d0, r8, r9
 800bdde:	aa18      	add	r2, sp, #96	; 0x60
 800bde0:	a917      	add	r1, sp, #92	; 0x5c
 800bde2:	4620      	mov	r0, r4
 800bde4:	f7ff fbd6 	bl	800b594 <__d2b>
 800bde8:	ec49 8b18 	vmov	d8, r8, r9
 800bdec:	9016      	str	r0, [sp, #88]	; 0x58
 800bdee:	2800      	cmp	r0, #0
 800bdf0:	f43f af02 	beq.w	800bbf8 <_strtod_l+0x488>
 800bdf4:	2101      	movs	r1, #1
 800bdf6:	4620      	mov	r0, r4
 800bdf8:	f7ff f930 	bl	800b05c <__i2b>
 800bdfc:	4683      	mov	fp, r0
 800bdfe:	2800      	cmp	r0, #0
 800be00:	f43f aefa 	beq.w	800bbf8 <_strtod_l+0x488>
 800be04:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800be06:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800be08:	2e00      	cmp	r6, #0
 800be0a:	bfab      	itete	ge
 800be0c:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 800be0e:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 800be10:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800be12:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 800be16:	bfac      	ite	ge
 800be18:	eb06 0a03 	addge.w	sl, r6, r3
 800be1c:	1b9f      	sublt	r7, r3, r6
 800be1e:	9b04      	ldr	r3, [sp, #16]
 800be20:	1af6      	subs	r6, r6, r3
 800be22:	4416      	add	r6, r2
 800be24:	4ba0      	ldr	r3, [pc, #640]	; (800c0a8 <_strtod_l+0x938>)
 800be26:	3e01      	subs	r6, #1
 800be28:	429e      	cmp	r6, r3
 800be2a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800be2e:	f280 80c4 	bge.w	800bfba <_strtod_l+0x84a>
 800be32:	1b9b      	subs	r3, r3, r6
 800be34:	2b1f      	cmp	r3, #31
 800be36:	eba2 0203 	sub.w	r2, r2, r3
 800be3a:	f04f 0101 	mov.w	r1, #1
 800be3e:	f300 80b0 	bgt.w	800bfa2 <_strtod_l+0x832>
 800be42:	fa01 f303 	lsl.w	r3, r1, r3
 800be46:	930e      	str	r3, [sp, #56]	; 0x38
 800be48:	2300      	movs	r3, #0
 800be4a:	930d      	str	r3, [sp, #52]	; 0x34
 800be4c:	eb0a 0602 	add.w	r6, sl, r2
 800be50:	9b04      	ldr	r3, [sp, #16]
 800be52:	45b2      	cmp	sl, r6
 800be54:	4417      	add	r7, r2
 800be56:	441f      	add	r7, r3
 800be58:	4653      	mov	r3, sl
 800be5a:	bfa8      	it	ge
 800be5c:	4633      	movge	r3, r6
 800be5e:	42bb      	cmp	r3, r7
 800be60:	bfa8      	it	ge
 800be62:	463b      	movge	r3, r7
 800be64:	2b00      	cmp	r3, #0
 800be66:	bfc2      	ittt	gt
 800be68:	1af6      	subgt	r6, r6, r3
 800be6a:	1aff      	subgt	r7, r7, r3
 800be6c:	ebaa 0a03 	subgt.w	sl, sl, r3
 800be70:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800be72:	2b00      	cmp	r3, #0
 800be74:	dd17      	ble.n	800bea6 <_strtod_l+0x736>
 800be76:	4659      	mov	r1, fp
 800be78:	461a      	mov	r2, r3
 800be7a:	4620      	mov	r0, r4
 800be7c:	f7ff f9ae 	bl	800b1dc <__pow5mult>
 800be80:	4683      	mov	fp, r0
 800be82:	2800      	cmp	r0, #0
 800be84:	f43f aeb8 	beq.w	800bbf8 <_strtod_l+0x488>
 800be88:	4601      	mov	r1, r0
 800be8a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800be8c:	4620      	mov	r0, r4
 800be8e:	f7ff f8fb 	bl	800b088 <__multiply>
 800be92:	900b      	str	r0, [sp, #44]	; 0x2c
 800be94:	2800      	cmp	r0, #0
 800be96:	f43f aeaf 	beq.w	800bbf8 <_strtod_l+0x488>
 800be9a:	9916      	ldr	r1, [sp, #88]	; 0x58
 800be9c:	4620      	mov	r0, r4
 800be9e:	f7fe ffdd 	bl	800ae5c <_Bfree>
 800bea2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bea4:	9316      	str	r3, [sp, #88]	; 0x58
 800bea6:	2e00      	cmp	r6, #0
 800bea8:	f300 808c 	bgt.w	800bfc4 <_strtod_l+0x854>
 800beac:	9b08      	ldr	r3, [sp, #32]
 800beae:	2b00      	cmp	r3, #0
 800beb0:	dd08      	ble.n	800bec4 <_strtod_l+0x754>
 800beb2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800beb4:	9905      	ldr	r1, [sp, #20]
 800beb6:	4620      	mov	r0, r4
 800beb8:	f7ff f990 	bl	800b1dc <__pow5mult>
 800bebc:	9005      	str	r0, [sp, #20]
 800bebe:	2800      	cmp	r0, #0
 800bec0:	f43f ae9a 	beq.w	800bbf8 <_strtod_l+0x488>
 800bec4:	2f00      	cmp	r7, #0
 800bec6:	dd08      	ble.n	800beda <_strtod_l+0x76a>
 800bec8:	9905      	ldr	r1, [sp, #20]
 800beca:	463a      	mov	r2, r7
 800becc:	4620      	mov	r0, r4
 800bece:	f7ff f9df 	bl	800b290 <__lshift>
 800bed2:	9005      	str	r0, [sp, #20]
 800bed4:	2800      	cmp	r0, #0
 800bed6:	f43f ae8f 	beq.w	800bbf8 <_strtod_l+0x488>
 800beda:	f1ba 0f00 	cmp.w	sl, #0
 800bede:	dd08      	ble.n	800bef2 <_strtod_l+0x782>
 800bee0:	4659      	mov	r1, fp
 800bee2:	4652      	mov	r2, sl
 800bee4:	4620      	mov	r0, r4
 800bee6:	f7ff f9d3 	bl	800b290 <__lshift>
 800beea:	4683      	mov	fp, r0
 800beec:	2800      	cmp	r0, #0
 800beee:	f43f ae83 	beq.w	800bbf8 <_strtod_l+0x488>
 800bef2:	9a05      	ldr	r2, [sp, #20]
 800bef4:	9916      	ldr	r1, [sp, #88]	; 0x58
 800bef6:	4620      	mov	r0, r4
 800bef8:	f7ff fa52 	bl	800b3a0 <__mdiff>
 800befc:	4605      	mov	r5, r0
 800befe:	2800      	cmp	r0, #0
 800bf00:	f43f ae7a 	beq.w	800bbf8 <_strtod_l+0x488>
 800bf04:	68c3      	ldr	r3, [r0, #12]
 800bf06:	930b      	str	r3, [sp, #44]	; 0x2c
 800bf08:	2300      	movs	r3, #0
 800bf0a:	60c3      	str	r3, [r0, #12]
 800bf0c:	4659      	mov	r1, fp
 800bf0e:	f7ff fa2b 	bl	800b368 <__mcmp>
 800bf12:	2800      	cmp	r0, #0
 800bf14:	da60      	bge.n	800bfd8 <_strtod_l+0x868>
 800bf16:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bf18:	ea53 0308 	orrs.w	r3, r3, r8
 800bf1c:	f040 8084 	bne.w	800c028 <_strtod_l+0x8b8>
 800bf20:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	d17f      	bne.n	800c028 <_strtod_l+0x8b8>
 800bf28:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800bf2c:	0d1b      	lsrs	r3, r3, #20
 800bf2e:	051b      	lsls	r3, r3, #20
 800bf30:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800bf34:	d978      	bls.n	800c028 <_strtod_l+0x8b8>
 800bf36:	696b      	ldr	r3, [r5, #20]
 800bf38:	b913      	cbnz	r3, 800bf40 <_strtod_l+0x7d0>
 800bf3a:	692b      	ldr	r3, [r5, #16]
 800bf3c:	2b01      	cmp	r3, #1
 800bf3e:	dd73      	ble.n	800c028 <_strtod_l+0x8b8>
 800bf40:	4629      	mov	r1, r5
 800bf42:	2201      	movs	r2, #1
 800bf44:	4620      	mov	r0, r4
 800bf46:	f7ff f9a3 	bl	800b290 <__lshift>
 800bf4a:	4659      	mov	r1, fp
 800bf4c:	4605      	mov	r5, r0
 800bf4e:	f7ff fa0b 	bl	800b368 <__mcmp>
 800bf52:	2800      	cmp	r0, #0
 800bf54:	dd68      	ble.n	800c028 <_strtod_l+0x8b8>
 800bf56:	9904      	ldr	r1, [sp, #16]
 800bf58:	4a54      	ldr	r2, [pc, #336]	; (800c0ac <_strtod_l+0x93c>)
 800bf5a:	464b      	mov	r3, r9
 800bf5c:	2900      	cmp	r1, #0
 800bf5e:	f000 8084 	beq.w	800c06a <_strtod_l+0x8fa>
 800bf62:	ea02 0109 	and.w	r1, r2, r9
 800bf66:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800bf6a:	dc7e      	bgt.n	800c06a <_strtod_l+0x8fa>
 800bf6c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800bf70:	f77f aeb3 	ble.w	800bcda <_strtod_l+0x56a>
 800bf74:	4b4e      	ldr	r3, [pc, #312]	; (800c0b0 <_strtod_l+0x940>)
 800bf76:	4640      	mov	r0, r8
 800bf78:	4649      	mov	r1, r9
 800bf7a:	2200      	movs	r2, #0
 800bf7c:	f7f4 fb3c 	bl	80005f8 <__aeabi_dmul>
 800bf80:	4b4a      	ldr	r3, [pc, #296]	; (800c0ac <_strtod_l+0x93c>)
 800bf82:	400b      	ands	r3, r1
 800bf84:	4680      	mov	r8, r0
 800bf86:	4689      	mov	r9, r1
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	f47f ae3f 	bne.w	800bc0c <_strtod_l+0x49c>
 800bf8e:	2322      	movs	r3, #34	; 0x22
 800bf90:	6023      	str	r3, [r4, #0]
 800bf92:	e63b      	b.n	800bc0c <_strtod_l+0x49c>
 800bf94:	f04f 32ff 	mov.w	r2, #4294967295
 800bf98:	fa02 f303 	lsl.w	r3, r2, r3
 800bf9c:	ea03 0808 	and.w	r8, r3, r8
 800bfa0:	e6e8      	b.n	800bd74 <_strtod_l+0x604>
 800bfa2:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800bfa6:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800bfaa:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800bfae:	36e2      	adds	r6, #226	; 0xe2
 800bfb0:	fa01 f306 	lsl.w	r3, r1, r6
 800bfb4:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 800bfb8:	e748      	b.n	800be4c <_strtod_l+0x6dc>
 800bfba:	2100      	movs	r1, #0
 800bfbc:	2301      	movs	r3, #1
 800bfbe:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 800bfc2:	e743      	b.n	800be4c <_strtod_l+0x6dc>
 800bfc4:	9916      	ldr	r1, [sp, #88]	; 0x58
 800bfc6:	4632      	mov	r2, r6
 800bfc8:	4620      	mov	r0, r4
 800bfca:	f7ff f961 	bl	800b290 <__lshift>
 800bfce:	9016      	str	r0, [sp, #88]	; 0x58
 800bfd0:	2800      	cmp	r0, #0
 800bfd2:	f47f af6b 	bne.w	800beac <_strtod_l+0x73c>
 800bfd6:	e60f      	b.n	800bbf8 <_strtod_l+0x488>
 800bfd8:	46ca      	mov	sl, r9
 800bfda:	d171      	bne.n	800c0c0 <_strtod_l+0x950>
 800bfdc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800bfde:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bfe2:	b352      	cbz	r2, 800c03a <_strtod_l+0x8ca>
 800bfe4:	4a33      	ldr	r2, [pc, #204]	; (800c0b4 <_strtod_l+0x944>)
 800bfe6:	4293      	cmp	r3, r2
 800bfe8:	d12a      	bne.n	800c040 <_strtod_l+0x8d0>
 800bfea:	9b04      	ldr	r3, [sp, #16]
 800bfec:	4641      	mov	r1, r8
 800bfee:	b1fb      	cbz	r3, 800c030 <_strtod_l+0x8c0>
 800bff0:	4b2e      	ldr	r3, [pc, #184]	; (800c0ac <_strtod_l+0x93c>)
 800bff2:	ea09 0303 	and.w	r3, r9, r3
 800bff6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800bffa:	f04f 32ff 	mov.w	r2, #4294967295
 800bffe:	d81a      	bhi.n	800c036 <_strtod_l+0x8c6>
 800c000:	0d1b      	lsrs	r3, r3, #20
 800c002:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800c006:	fa02 f303 	lsl.w	r3, r2, r3
 800c00a:	4299      	cmp	r1, r3
 800c00c:	d118      	bne.n	800c040 <_strtod_l+0x8d0>
 800c00e:	4b2a      	ldr	r3, [pc, #168]	; (800c0b8 <_strtod_l+0x948>)
 800c010:	459a      	cmp	sl, r3
 800c012:	d102      	bne.n	800c01a <_strtod_l+0x8aa>
 800c014:	3101      	adds	r1, #1
 800c016:	f43f adef 	beq.w	800bbf8 <_strtod_l+0x488>
 800c01a:	4b24      	ldr	r3, [pc, #144]	; (800c0ac <_strtod_l+0x93c>)
 800c01c:	ea0a 0303 	and.w	r3, sl, r3
 800c020:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800c024:	f04f 0800 	mov.w	r8, #0
 800c028:	9b04      	ldr	r3, [sp, #16]
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	d1a2      	bne.n	800bf74 <_strtod_l+0x804>
 800c02e:	e5ed      	b.n	800bc0c <_strtod_l+0x49c>
 800c030:	f04f 33ff 	mov.w	r3, #4294967295
 800c034:	e7e9      	b.n	800c00a <_strtod_l+0x89a>
 800c036:	4613      	mov	r3, r2
 800c038:	e7e7      	b.n	800c00a <_strtod_l+0x89a>
 800c03a:	ea53 0308 	orrs.w	r3, r3, r8
 800c03e:	d08a      	beq.n	800bf56 <_strtod_l+0x7e6>
 800c040:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c042:	b1e3      	cbz	r3, 800c07e <_strtod_l+0x90e>
 800c044:	ea13 0f0a 	tst.w	r3, sl
 800c048:	d0ee      	beq.n	800c028 <_strtod_l+0x8b8>
 800c04a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c04c:	9a04      	ldr	r2, [sp, #16]
 800c04e:	4640      	mov	r0, r8
 800c050:	4649      	mov	r1, r9
 800c052:	b1c3      	cbz	r3, 800c086 <_strtod_l+0x916>
 800c054:	f7ff fb6f 	bl	800b736 <sulp>
 800c058:	4602      	mov	r2, r0
 800c05a:	460b      	mov	r3, r1
 800c05c:	ec51 0b18 	vmov	r0, r1, d8
 800c060:	f7f4 f914 	bl	800028c <__adddf3>
 800c064:	4680      	mov	r8, r0
 800c066:	4689      	mov	r9, r1
 800c068:	e7de      	b.n	800c028 <_strtod_l+0x8b8>
 800c06a:	4013      	ands	r3, r2
 800c06c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800c070:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800c074:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800c078:	f04f 38ff 	mov.w	r8, #4294967295
 800c07c:	e7d4      	b.n	800c028 <_strtod_l+0x8b8>
 800c07e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c080:	ea13 0f08 	tst.w	r3, r8
 800c084:	e7e0      	b.n	800c048 <_strtod_l+0x8d8>
 800c086:	f7ff fb56 	bl	800b736 <sulp>
 800c08a:	4602      	mov	r2, r0
 800c08c:	460b      	mov	r3, r1
 800c08e:	ec51 0b18 	vmov	r0, r1, d8
 800c092:	f7f4 f8f9 	bl	8000288 <__aeabi_dsub>
 800c096:	2200      	movs	r2, #0
 800c098:	2300      	movs	r3, #0
 800c09a:	4680      	mov	r8, r0
 800c09c:	4689      	mov	r9, r1
 800c09e:	f7f4 fd13 	bl	8000ac8 <__aeabi_dcmpeq>
 800c0a2:	2800      	cmp	r0, #0
 800c0a4:	d0c0      	beq.n	800c028 <_strtod_l+0x8b8>
 800c0a6:	e618      	b.n	800bcda <_strtod_l+0x56a>
 800c0a8:	fffffc02 	.word	0xfffffc02
 800c0ac:	7ff00000 	.word	0x7ff00000
 800c0b0:	39500000 	.word	0x39500000
 800c0b4:	000fffff 	.word	0x000fffff
 800c0b8:	7fefffff 	.word	0x7fefffff
 800c0bc:	0800e518 	.word	0x0800e518
 800c0c0:	4659      	mov	r1, fp
 800c0c2:	4628      	mov	r0, r5
 800c0c4:	f7ff fac0 	bl	800b648 <__ratio>
 800c0c8:	ec57 6b10 	vmov	r6, r7, d0
 800c0cc:	ee10 0a10 	vmov	r0, s0
 800c0d0:	2200      	movs	r2, #0
 800c0d2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c0d6:	4639      	mov	r1, r7
 800c0d8:	f7f4 fd0a 	bl	8000af0 <__aeabi_dcmple>
 800c0dc:	2800      	cmp	r0, #0
 800c0de:	d071      	beq.n	800c1c4 <_strtod_l+0xa54>
 800c0e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	d17c      	bne.n	800c1e0 <_strtod_l+0xa70>
 800c0e6:	f1b8 0f00 	cmp.w	r8, #0
 800c0ea:	d15a      	bne.n	800c1a2 <_strtod_l+0xa32>
 800c0ec:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	d15d      	bne.n	800c1b0 <_strtod_l+0xa40>
 800c0f4:	4b90      	ldr	r3, [pc, #576]	; (800c338 <_strtod_l+0xbc8>)
 800c0f6:	2200      	movs	r2, #0
 800c0f8:	4630      	mov	r0, r6
 800c0fa:	4639      	mov	r1, r7
 800c0fc:	f7f4 fcee 	bl	8000adc <__aeabi_dcmplt>
 800c100:	2800      	cmp	r0, #0
 800c102:	d15c      	bne.n	800c1be <_strtod_l+0xa4e>
 800c104:	4630      	mov	r0, r6
 800c106:	4639      	mov	r1, r7
 800c108:	4b8c      	ldr	r3, [pc, #560]	; (800c33c <_strtod_l+0xbcc>)
 800c10a:	2200      	movs	r2, #0
 800c10c:	f7f4 fa74 	bl	80005f8 <__aeabi_dmul>
 800c110:	4606      	mov	r6, r0
 800c112:	460f      	mov	r7, r1
 800c114:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800c118:	9606      	str	r6, [sp, #24]
 800c11a:	9307      	str	r3, [sp, #28]
 800c11c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c120:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800c124:	4b86      	ldr	r3, [pc, #536]	; (800c340 <_strtod_l+0xbd0>)
 800c126:	ea0a 0303 	and.w	r3, sl, r3
 800c12a:	930d      	str	r3, [sp, #52]	; 0x34
 800c12c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c12e:	4b85      	ldr	r3, [pc, #532]	; (800c344 <_strtod_l+0xbd4>)
 800c130:	429a      	cmp	r2, r3
 800c132:	f040 8090 	bne.w	800c256 <_strtod_l+0xae6>
 800c136:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800c13a:	ec49 8b10 	vmov	d0, r8, r9
 800c13e:	f7ff f9b9 	bl	800b4b4 <__ulp>
 800c142:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c146:	ec51 0b10 	vmov	r0, r1, d0
 800c14a:	f7f4 fa55 	bl	80005f8 <__aeabi_dmul>
 800c14e:	4642      	mov	r2, r8
 800c150:	464b      	mov	r3, r9
 800c152:	f7f4 f89b 	bl	800028c <__adddf3>
 800c156:	460b      	mov	r3, r1
 800c158:	4979      	ldr	r1, [pc, #484]	; (800c340 <_strtod_l+0xbd0>)
 800c15a:	4a7b      	ldr	r2, [pc, #492]	; (800c348 <_strtod_l+0xbd8>)
 800c15c:	4019      	ands	r1, r3
 800c15e:	4291      	cmp	r1, r2
 800c160:	4680      	mov	r8, r0
 800c162:	d944      	bls.n	800c1ee <_strtod_l+0xa7e>
 800c164:	ee18 2a90 	vmov	r2, s17
 800c168:	4b78      	ldr	r3, [pc, #480]	; (800c34c <_strtod_l+0xbdc>)
 800c16a:	429a      	cmp	r2, r3
 800c16c:	d104      	bne.n	800c178 <_strtod_l+0xa08>
 800c16e:	ee18 3a10 	vmov	r3, s16
 800c172:	3301      	adds	r3, #1
 800c174:	f43f ad40 	beq.w	800bbf8 <_strtod_l+0x488>
 800c178:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 800c34c <_strtod_l+0xbdc>
 800c17c:	f04f 38ff 	mov.w	r8, #4294967295
 800c180:	9916      	ldr	r1, [sp, #88]	; 0x58
 800c182:	4620      	mov	r0, r4
 800c184:	f7fe fe6a 	bl	800ae5c <_Bfree>
 800c188:	9905      	ldr	r1, [sp, #20]
 800c18a:	4620      	mov	r0, r4
 800c18c:	f7fe fe66 	bl	800ae5c <_Bfree>
 800c190:	4659      	mov	r1, fp
 800c192:	4620      	mov	r0, r4
 800c194:	f7fe fe62 	bl	800ae5c <_Bfree>
 800c198:	4629      	mov	r1, r5
 800c19a:	4620      	mov	r0, r4
 800c19c:	f7fe fe5e 	bl	800ae5c <_Bfree>
 800c1a0:	e609      	b.n	800bdb6 <_strtod_l+0x646>
 800c1a2:	f1b8 0f01 	cmp.w	r8, #1
 800c1a6:	d103      	bne.n	800c1b0 <_strtod_l+0xa40>
 800c1a8:	f1b9 0f00 	cmp.w	r9, #0
 800c1ac:	f43f ad95 	beq.w	800bcda <_strtod_l+0x56a>
 800c1b0:	ed9f 7b55 	vldr	d7, [pc, #340]	; 800c308 <_strtod_l+0xb98>
 800c1b4:	4f60      	ldr	r7, [pc, #384]	; (800c338 <_strtod_l+0xbc8>)
 800c1b6:	ed8d 7b06 	vstr	d7, [sp, #24]
 800c1ba:	2600      	movs	r6, #0
 800c1bc:	e7ae      	b.n	800c11c <_strtod_l+0x9ac>
 800c1be:	4f5f      	ldr	r7, [pc, #380]	; (800c33c <_strtod_l+0xbcc>)
 800c1c0:	2600      	movs	r6, #0
 800c1c2:	e7a7      	b.n	800c114 <_strtod_l+0x9a4>
 800c1c4:	4b5d      	ldr	r3, [pc, #372]	; (800c33c <_strtod_l+0xbcc>)
 800c1c6:	4630      	mov	r0, r6
 800c1c8:	4639      	mov	r1, r7
 800c1ca:	2200      	movs	r2, #0
 800c1cc:	f7f4 fa14 	bl	80005f8 <__aeabi_dmul>
 800c1d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c1d2:	4606      	mov	r6, r0
 800c1d4:	460f      	mov	r7, r1
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d09c      	beq.n	800c114 <_strtod_l+0x9a4>
 800c1da:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800c1de:	e79d      	b.n	800c11c <_strtod_l+0x9ac>
 800c1e0:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 800c310 <_strtod_l+0xba0>
 800c1e4:	ed8d 7b06 	vstr	d7, [sp, #24]
 800c1e8:	ec57 6b17 	vmov	r6, r7, d7
 800c1ec:	e796      	b.n	800c11c <_strtod_l+0x9ac>
 800c1ee:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800c1f2:	9b04      	ldr	r3, [sp, #16]
 800c1f4:	46ca      	mov	sl, r9
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	d1c2      	bne.n	800c180 <_strtod_l+0xa10>
 800c1fa:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c1fe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c200:	0d1b      	lsrs	r3, r3, #20
 800c202:	051b      	lsls	r3, r3, #20
 800c204:	429a      	cmp	r2, r3
 800c206:	d1bb      	bne.n	800c180 <_strtod_l+0xa10>
 800c208:	4630      	mov	r0, r6
 800c20a:	4639      	mov	r1, r7
 800c20c:	f7f4 fd3c 	bl	8000c88 <__aeabi_d2lz>
 800c210:	f7f4 f9c4 	bl	800059c <__aeabi_l2d>
 800c214:	4602      	mov	r2, r0
 800c216:	460b      	mov	r3, r1
 800c218:	4630      	mov	r0, r6
 800c21a:	4639      	mov	r1, r7
 800c21c:	f7f4 f834 	bl	8000288 <__aeabi_dsub>
 800c220:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c222:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c226:	ea43 0308 	orr.w	r3, r3, r8
 800c22a:	4313      	orrs	r3, r2
 800c22c:	4606      	mov	r6, r0
 800c22e:	460f      	mov	r7, r1
 800c230:	d054      	beq.n	800c2dc <_strtod_l+0xb6c>
 800c232:	a339      	add	r3, pc, #228	; (adr r3, 800c318 <_strtod_l+0xba8>)
 800c234:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c238:	f7f4 fc50 	bl	8000adc <__aeabi_dcmplt>
 800c23c:	2800      	cmp	r0, #0
 800c23e:	f47f ace5 	bne.w	800bc0c <_strtod_l+0x49c>
 800c242:	a337      	add	r3, pc, #220	; (adr r3, 800c320 <_strtod_l+0xbb0>)
 800c244:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c248:	4630      	mov	r0, r6
 800c24a:	4639      	mov	r1, r7
 800c24c:	f7f4 fc64 	bl	8000b18 <__aeabi_dcmpgt>
 800c250:	2800      	cmp	r0, #0
 800c252:	d095      	beq.n	800c180 <_strtod_l+0xa10>
 800c254:	e4da      	b.n	800bc0c <_strtod_l+0x49c>
 800c256:	9b04      	ldr	r3, [sp, #16]
 800c258:	b333      	cbz	r3, 800c2a8 <_strtod_l+0xb38>
 800c25a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c25c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800c260:	d822      	bhi.n	800c2a8 <_strtod_l+0xb38>
 800c262:	a331      	add	r3, pc, #196	; (adr r3, 800c328 <_strtod_l+0xbb8>)
 800c264:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c268:	4630      	mov	r0, r6
 800c26a:	4639      	mov	r1, r7
 800c26c:	f7f4 fc40 	bl	8000af0 <__aeabi_dcmple>
 800c270:	b1a0      	cbz	r0, 800c29c <_strtod_l+0xb2c>
 800c272:	4639      	mov	r1, r7
 800c274:	4630      	mov	r0, r6
 800c276:	f7f4 fc97 	bl	8000ba8 <__aeabi_d2uiz>
 800c27a:	2801      	cmp	r0, #1
 800c27c:	bf38      	it	cc
 800c27e:	2001      	movcc	r0, #1
 800c280:	f7f4 f940 	bl	8000504 <__aeabi_ui2d>
 800c284:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c286:	4606      	mov	r6, r0
 800c288:	460f      	mov	r7, r1
 800c28a:	bb23      	cbnz	r3, 800c2d6 <_strtod_l+0xb66>
 800c28c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c290:	9010      	str	r0, [sp, #64]	; 0x40
 800c292:	9311      	str	r3, [sp, #68]	; 0x44
 800c294:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800c298:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800c29c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c29e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c2a0:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800c2a4:	1a9b      	subs	r3, r3, r2
 800c2a6:	930f      	str	r3, [sp, #60]	; 0x3c
 800c2a8:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800c2ac:	eeb0 0a48 	vmov.f32	s0, s16
 800c2b0:	eef0 0a68 	vmov.f32	s1, s17
 800c2b4:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800c2b8:	f7ff f8fc 	bl	800b4b4 <__ulp>
 800c2bc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800c2c0:	ec53 2b10 	vmov	r2, r3, d0
 800c2c4:	f7f4 f998 	bl	80005f8 <__aeabi_dmul>
 800c2c8:	ec53 2b18 	vmov	r2, r3, d8
 800c2cc:	f7f3 ffde 	bl	800028c <__adddf3>
 800c2d0:	4680      	mov	r8, r0
 800c2d2:	4689      	mov	r9, r1
 800c2d4:	e78d      	b.n	800c1f2 <_strtod_l+0xa82>
 800c2d6:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800c2da:	e7db      	b.n	800c294 <_strtod_l+0xb24>
 800c2dc:	a314      	add	r3, pc, #80	; (adr r3, 800c330 <_strtod_l+0xbc0>)
 800c2de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2e2:	f7f4 fbfb 	bl	8000adc <__aeabi_dcmplt>
 800c2e6:	e7b3      	b.n	800c250 <_strtod_l+0xae0>
 800c2e8:	2300      	movs	r3, #0
 800c2ea:	930a      	str	r3, [sp, #40]	; 0x28
 800c2ec:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800c2ee:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c2f0:	6013      	str	r3, [r2, #0]
 800c2f2:	f7ff ba7c 	b.w	800b7ee <_strtod_l+0x7e>
 800c2f6:	2a65      	cmp	r2, #101	; 0x65
 800c2f8:	f43f ab75 	beq.w	800b9e6 <_strtod_l+0x276>
 800c2fc:	2a45      	cmp	r2, #69	; 0x45
 800c2fe:	f43f ab72 	beq.w	800b9e6 <_strtod_l+0x276>
 800c302:	2301      	movs	r3, #1
 800c304:	f7ff bbaa 	b.w	800ba5c <_strtod_l+0x2ec>
 800c308:	00000000 	.word	0x00000000
 800c30c:	bff00000 	.word	0xbff00000
 800c310:	00000000 	.word	0x00000000
 800c314:	3ff00000 	.word	0x3ff00000
 800c318:	94a03595 	.word	0x94a03595
 800c31c:	3fdfffff 	.word	0x3fdfffff
 800c320:	35afe535 	.word	0x35afe535
 800c324:	3fe00000 	.word	0x3fe00000
 800c328:	ffc00000 	.word	0xffc00000
 800c32c:	41dfffff 	.word	0x41dfffff
 800c330:	94a03595 	.word	0x94a03595
 800c334:	3fcfffff 	.word	0x3fcfffff
 800c338:	3ff00000 	.word	0x3ff00000
 800c33c:	3fe00000 	.word	0x3fe00000
 800c340:	7ff00000 	.word	0x7ff00000
 800c344:	7fe00000 	.word	0x7fe00000
 800c348:	7c9fffff 	.word	0x7c9fffff
 800c34c:	7fefffff 	.word	0x7fefffff

0800c350 <_strtod_r>:
 800c350:	4b01      	ldr	r3, [pc, #4]	; (800c358 <_strtod_r+0x8>)
 800c352:	f7ff ba0d 	b.w	800b770 <_strtod_l>
 800c356:	bf00      	nop
 800c358:	200000b8 	.word	0x200000b8

0800c35c <_strtol_l.constprop.0>:
 800c35c:	2b01      	cmp	r3, #1
 800c35e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c362:	d001      	beq.n	800c368 <_strtol_l.constprop.0+0xc>
 800c364:	2b24      	cmp	r3, #36	; 0x24
 800c366:	d906      	bls.n	800c376 <_strtol_l.constprop.0+0x1a>
 800c368:	f7fd fd8c 	bl	8009e84 <__errno>
 800c36c:	2316      	movs	r3, #22
 800c36e:	6003      	str	r3, [r0, #0]
 800c370:	2000      	movs	r0, #0
 800c372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c376:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800c45c <_strtol_l.constprop.0+0x100>
 800c37a:	460d      	mov	r5, r1
 800c37c:	462e      	mov	r6, r5
 800c37e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c382:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800c386:	f017 0708 	ands.w	r7, r7, #8
 800c38a:	d1f7      	bne.n	800c37c <_strtol_l.constprop.0+0x20>
 800c38c:	2c2d      	cmp	r4, #45	; 0x2d
 800c38e:	d132      	bne.n	800c3f6 <_strtol_l.constprop.0+0x9a>
 800c390:	782c      	ldrb	r4, [r5, #0]
 800c392:	2701      	movs	r7, #1
 800c394:	1cb5      	adds	r5, r6, #2
 800c396:	2b00      	cmp	r3, #0
 800c398:	d05b      	beq.n	800c452 <_strtol_l.constprop.0+0xf6>
 800c39a:	2b10      	cmp	r3, #16
 800c39c:	d109      	bne.n	800c3b2 <_strtol_l.constprop.0+0x56>
 800c39e:	2c30      	cmp	r4, #48	; 0x30
 800c3a0:	d107      	bne.n	800c3b2 <_strtol_l.constprop.0+0x56>
 800c3a2:	782c      	ldrb	r4, [r5, #0]
 800c3a4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800c3a8:	2c58      	cmp	r4, #88	; 0x58
 800c3aa:	d14d      	bne.n	800c448 <_strtol_l.constprop.0+0xec>
 800c3ac:	786c      	ldrb	r4, [r5, #1]
 800c3ae:	2310      	movs	r3, #16
 800c3b0:	3502      	adds	r5, #2
 800c3b2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800c3b6:	f108 38ff 	add.w	r8, r8, #4294967295
 800c3ba:	f04f 0e00 	mov.w	lr, #0
 800c3be:	fbb8 f9f3 	udiv	r9, r8, r3
 800c3c2:	4676      	mov	r6, lr
 800c3c4:	fb03 8a19 	mls	sl, r3, r9, r8
 800c3c8:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800c3cc:	f1bc 0f09 	cmp.w	ip, #9
 800c3d0:	d816      	bhi.n	800c400 <_strtol_l.constprop.0+0xa4>
 800c3d2:	4664      	mov	r4, ip
 800c3d4:	42a3      	cmp	r3, r4
 800c3d6:	dd24      	ble.n	800c422 <_strtol_l.constprop.0+0xc6>
 800c3d8:	f1be 3fff 	cmp.w	lr, #4294967295
 800c3dc:	d008      	beq.n	800c3f0 <_strtol_l.constprop.0+0x94>
 800c3de:	45b1      	cmp	r9, r6
 800c3e0:	d31c      	bcc.n	800c41c <_strtol_l.constprop.0+0xc0>
 800c3e2:	d101      	bne.n	800c3e8 <_strtol_l.constprop.0+0x8c>
 800c3e4:	45a2      	cmp	sl, r4
 800c3e6:	db19      	blt.n	800c41c <_strtol_l.constprop.0+0xc0>
 800c3e8:	fb06 4603 	mla	r6, r6, r3, r4
 800c3ec:	f04f 0e01 	mov.w	lr, #1
 800c3f0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c3f4:	e7e8      	b.n	800c3c8 <_strtol_l.constprop.0+0x6c>
 800c3f6:	2c2b      	cmp	r4, #43	; 0x2b
 800c3f8:	bf04      	itt	eq
 800c3fa:	782c      	ldrbeq	r4, [r5, #0]
 800c3fc:	1cb5      	addeq	r5, r6, #2
 800c3fe:	e7ca      	b.n	800c396 <_strtol_l.constprop.0+0x3a>
 800c400:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800c404:	f1bc 0f19 	cmp.w	ip, #25
 800c408:	d801      	bhi.n	800c40e <_strtol_l.constprop.0+0xb2>
 800c40a:	3c37      	subs	r4, #55	; 0x37
 800c40c:	e7e2      	b.n	800c3d4 <_strtol_l.constprop.0+0x78>
 800c40e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800c412:	f1bc 0f19 	cmp.w	ip, #25
 800c416:	d804      	bhi.n	800c422 <_strtol_l.constprop.0+0xc6>
 800c418:	3c57      	subs	r4, #87	; 0x57
 800c41a:	e7db      	b.n	800c3d4 <_strtol_l.constprop.0+0x78>
 800c41c:	f04f 3eff 	mov.w	lr, #4294967295
 800c420:	e7e6      	b.n	800c3f0 <_strtol_l.constprop.0+0x94>
 800c422:	f1be 3fff 	cmp.w	lr, #4294967295
 800c426:	d105      	bne.n	800c434 <_strtol_l.constprop.0+0xd8>
 800c428:	2322      	movs	r3, #34	; 0x22
 800c42a:	6003      	str	r3, [r0, #0]
 800c42c:	4646      	mov	r6, r8
 800c42e:	b942      	cbnz	r2, 800c442 <_strtol_l.constprop.0+0xe6>
 800c430:	4630      	mov	r0, r6
 800c432:	e79e      	b.n	800c372 <_strtol_l.constprop.0+0x16>
 800c434:	b107      	cbz	r7, 800c438 <_strtol_l.constprop.0+0xdc>
 800c436:	4276      	negs	r6, r6
 800c438:	2a00      	cmp	r2, #0
 800c43a:	d0f9      	beq.n	800c430 <_strtol_l.constprop.0+0xd4>
 800c43c:	f1be 0f00 	cmp.w	lr, #0
 800c440:	d000      	beq.n	800c444 <_strtol_l.constprop.0+0xe8>
 800c442:	1e69      	subs	r1, r5, #1
 800c444:	6011      	str	r1, [r2, #0]
 800c446:	e7f3      	b.n	800c430 <_strtol_l.constprop.0+0xd4>
 800c448:	2430      	movs	r4, #48	; 0x30
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	d1b1      	bne.n	800c3b2 <_strtol_l.constprop.0+0x56>
 800c44e:	2308      	movs	r3, #8
 800c450:	e7af      	b.n	800c3b2 <_strtol_l.constprop.0+0x56>
 800c452:	2c30      	cmp	r4, #48	; 0x30
 800c454:	d0a5      	beq.n	800c3a2 <_strtol_l.constprop.0+0x46>
 800c456:	230a      	movs	r3, #10
 800c458:	e7ab      	b.n	800c3b2 <_strtol_l.constprop.0+0x56>
 800c45a:	bf00      	nop
 800c45c:	0800e541 	.word	0x0800e541

0800c460 <_strtol_r>:
 800c460:	f7ff bf7c 	b.w	800c35c <_strtol_l.constprop.0>

0800c464 <__ssputs_r>:
 800c464:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c468:	688e      	ldr	r6, [r1, #8]
 800c46a:	461f      	mov	r7, r3
 800c46c:	42be      	cmp	r6, r7
 800c46e:	680b      	ldr	r3, [r1, #0]
 800c470:	4682      	mov	sl, r0
 800c472:	460c      	mov	r4, r1
 800c474:	4690      	mov	r8, r2
 800c476:	d82c      	bhi.n	800c4d2 <__ssputs_r+0x6e>
 800c478:	898a      	ldrh	r2, [r1, #12]
 800c47a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c47e:	d026      	beq.n	800c4ce <__ssputs_r+0x6a>
 800c480:	6965      	ldr	r5, [r4, #20]
 800c482:	6909      	ldr	r1, [r1, #16]
 800c484:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c488:	eba3 0901 	sub.w	r9, r3, r1
 800c48c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c490:	1c7b      	adds	r3, r7, #1
 800c492:	444b      	add	r3, r9
 800c494:	106d      	asrs	r5, r5, #1
 800c496:	429d      	cmp	r5, r3
 800c498:	bf38      	it	cc
 800c49a:	461d      	movcc	r5, r3
 800c49c:	0553      	lsls	r3, r2, #21
 800c49e:	d527      	bpl.n	800c4f0 <__ssputs_r+0x8c>
 800c4a0:	4629      	mov	r1, r5
 800c4a2:	f7fe fc0f 	bl	800acc4 <_malloc_r>
 800c4a6:	4606      	mov	r6, r0
 800c4a8:	b360      	cbz	r0, 800c504 <__ssputs_r+0xa0>
 800c4aa:	6921      	ldr	r1, [r4, #16]
 800c4ac:	464a      	mov	r2, r9
 800c4ae:	f000 fa1b 	bl	800c8e8 <memcpy>
 800c4b2:	89a3      	ldrh	r3, [r4, #12]
 800c4b4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c4b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c4bc:	81a3      	strh	r3, [r4, #12]
 800c4be:	6126      	str	r6, [r4, #16]
 800c4c0:	6165      	str	r5, [r4, #20]
 800c4c2:	444e      	add	r6, r9
 800c4c4:	eba5 0509 	sub.w	r5, r5, r9
 800c4c8:	6026      	str	r6, [r4, #0]
 800c4ca:	60a5      	str	r5, [r4, #8]
 800c4cc:	463e      	mov	r6, r7
 800c4ce:	42be      	cmp	r6, r7
 800c4d0:	d900      	bls.n	800c4d4 <__ssputs_r+0x70>
 800c4d2:	463e      	mov	r6, r7
 800c4d4:	6820      	ldr	r0, [r4, #0]
 800c4d6:	4632      	mov	r2, r6
 800c4d8:	4641      	mov	r1, r8
 800c4da:	f000 f9c9 	bl	800c870 <memmove>
 800c4de:	68a3      	ldr	r3, [r4, #8]
 800c4e0:	1b9b      	subs	r3, r3, r6
 800c4e2:	60a3      	str	r3, [r4, #8]
 800c4e4:	6823      	ldr	r3, [r4, #0]
 800c4e6:	4433      	add	r3, r6
 800c4e8:	6023      	str	r3, [r4, #0]
 800c4ea:	2000      	movs	r0, #0
 800c4ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c4f0:	462a      	mov	r2, r5
 800c4f2:	f000 fdae 	bl	800d052 <_realloc_r>
 800c4f6:	4606      	mov	r6, r0
 800c4f8:	2800      	cmp	r0, #0
 800c4fa:	d1e0      	bne.n	800c4be <__ssputs_r+0x5a>
 800c4fc:	6921      	ldr	r1, [r4, #16]
 800c4fe:	4650      	mov	r0, sl
 800c500:	f7fe fb6c 	bl	800abdc <_free_r>
 800c504:	230c      	movs	r3, #12
 800c506:	f8ca 3000 	str.w	r3, [sl]
 800c50a:	89a3      	ldrh	r3, [r4, #12]
 800c50c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c510:	81a3      	strh	r3, [r4, #12]
 800c512:	f04f 30ff 	mov.w	r0, #4294967295
 800c516:	e7e9      	b.n	800c4ec <__ssputs_r+0x88>

0800c518 <_svfiprintf_r>:
 800c518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c51c:	4698      	mov	r8, r3
 800c51e:	898b      	ldrh	r3, [r1, #12]
 800c520:	061b      	lsls	r3, r3, #24
 800c522:	b09d      	sub	sp, #116	; 0x74
 800c524:	4607      	mov	r7, r0
 800c526:	460d      	mov	r5, r1
 800c528:	4614      	mov	r4, r2
 800c52a:	d50e      	bpl.n	800c54a <_svfiprintf_r+0x32>
 800c52c:	690b      	ldr	r3, [r1, #16]
 800c52e:	b963      	cbnz	r3, 800c54a <_svfiprintf_r+0x32>
 800c530:	2140      	movs	r1, #64	; 0x40
 800c532:	f7fe fbc7 	bl	800acc4 <_malloc_r>
 800c536:	6028      	str	r0, [r5, #0]
 800c538:	6128      	str	r0, [r5, #16]
 800c53a:	b920      	cbnz	r0, 800c546 <_svfiprintf_r+0x2e>
 800c53c:	230c      	movs	r3, #12
 800c53e:	603b      	str	r3, [r7, #0]
 800c540:	f04f 30ff 	mov.w	r0, #4294967295
 800c544:	e0d0      	b.n	800c6e8 <_svfiprintf_r+0x1d0>
 800c546:	2340      	movs	r3, #64	; 0x40
 800c548:	616b      	str	r3, [r5, #20]
 800c54a:	2300      	movs	r3, #0
 800c54c:	9309      	str	r3, [sp, #36]	; 0x24
 800c54e:	2320      	movs	r3, #32
 800c550:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c554:	f8cd 800c 	str.w	r8, [sp, #12]
 800c558:	2330      	movs	r3, #48	; 0x30
 800c55a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800c700 <_svfiprintf_r+0x1e8>
 800c55e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c562:	f04f 0901 	mov.w	r9, #1
 800c566:	4623      	mov	r3, r4
 800c568:	469a      	mov	sl, r3
 800c56a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c56e:	b10a      	cbz	r2, 800c574 <_svfiprintf_r+0x5c>
 800c570:	2a25      	cmp	r2, #37	; 0x25
 800c572:	d1f9      	bne.n	800c568 <_svfiprintf_r+0x50>
 800c574:	ebba 0b04 	subs.w	fp, sl, r4
 800c578:	d00b      	beq.n	800c592 <_svfiprintf_r+0x7a>
 800c57a:	465b      	mov	r3, fp
 800c57c:	4622      	mov	r2, r4
 800c57e:	4629      	mov	r1, r5
 800c580:	4638      	mov	r0, r7
 800c582:	f7ff ff6f 	bl	800c464 <__ssputs_r>
 800c586:	3001      	adds	r0, #1
 800c588:	f000 80a9 	beq.w	800c6de <_svfiprintf_r+0x1c6>
 800c58c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c58e:	445a      	add	r2, fp
 800c590:	9209      	str	r2, [sp, #36]	; 0x24
 800c592:	f89a 3000 	ldrb.w	r3, [sl]
 800c596:	2b00      	cmp	r3, #0
 800c598:	f000 80a1 	beq.w	800c6de <_svfiprintf_r+0x1c6>
 800c59c:	2300      	movs	r3, #0
 800c59e:	f04f 32ff 	mov.w	r2, #4294967295
 800c5a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c5a6:	f10a 0a01 	add.w	sl, sl, #1
 800c5aa:	9304      	str	r3, [sp, #16]
 800c5ac:	9307      	str	r3, [sp, #28]
 800c5ae:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c5b2:	931a      	str	r3, [sp, #104]	; 0x68
 800c5b4:	4654      	mov	r4, sl
 800c5b6:	2205      	movs	r2, #5
 800c5b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c5bc:	4850      	ldr	r0, [pc, #320]	; (800c700 <_svfiprintf_r+0x1e8>)
 800c5be:	f7f3 fe07 	bl	80001d0 <memchr>
 800c5c2:	9a04      	ldr	r2, [sp, #16]
 800c5c4:	b9d8      	cbnz	r0, 800c5fe <_svfiprintf_r+0xe6>
 800c5c6:	06d0      	lsls	r0, r2, #27
 800c5c8:	bf44      	itt	mi
 800c5ca:	2320      	movmi	r3, #32
 800c5cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c5d0:	0711      	lsls	r1, r2, #28
 800c5d2:	bf44      	itt	mi
 800c5d4:	232b      	movmi	r3, #43	; 0x2b
 800c5d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c5da:	f89a 3000 	ldrb.w	r3, [sl]
 800c5de:	2b2a      	cmp	r3, #42	; 0x2a
 800c5e0:	d015      	beq.n	800c60e <_svfiprintf_r+0xf6>
 800c5e2:	9a07      	ldr	r2, [sp, #28]
 800c5e4:	4654      	mov	r4, sl
 800c5e6:	2000      	movs	r0, #0
 800c5e8:	f04f 0c0a 	mov.w	ip, #10
 800c5ec:	4621      	mov	r1, r4
 800c5ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c5f2:	3b30      	subs	r3, #48	; 0x30
 800c5f4:	2b09      	cmp	r3, #9
 800c5f6:	d94d      	bls.n	800c694 <_svfiprintf_r+0x17c>
 800c5f8:	b1b0      	cbz	r0, 800c628 <_svfiprintf_r+0x110>
 800c5fa:	9207      	str	r2, [sp, #28]
 800c5fc:	e014      	b.n	800c628 <_svfiprintf_r+0x110>
 800c5fe:	eba0 0308 	sub.w	r3, r0, r8
 800c602:	fa09 f303 	lsl.w	r3, r9, r3
 800c606:	4313      	orrs	r3, r2
 800c608:	9304      	str	r3, [sp, #16]
 800c60a:	46a2      	mov	sl, r4
 800c60c:	e7d2      	b.n	800c5b4 <_svfiprintf_r+0x9c>
 800c60e:	9b03      	ldr	r3, [sp, #12]
 800c610:	1d19      	adds	r1, r3, #4
 800c612:	681b      	ldr	r3, [r3, #0]
 800c614:	9103      	str	r1, [sp, #12]
 800c616:	2b00      	cmp	r3, #0
 800c618:	bfbb      	ittet	lt
 800c61a:	425b      	neglt	r3, r3
 800c61c:	f042 0202 	orrlt.w	r2, r2, #2
 800c620:	9307      	strge	r3, [sp, #28]
 800c622:	9307      	strlt	r3, [sp, #28]
 800c624:	bfb8      	it	lt
 800c626:	9204      	strlt	r2, [sp, #16]
 800c628:	7823      	ldrb	r3, [r4, #0]
 800c62a:	2b2e      	cmp	r3, #46	; 0x2e
 800c62c:	d10c      	bne.n	800c648 <_svfiprintf_r+0x130>
 800c62e:	7863      	ldrb	r3, [r4, #1]
 800c630:	2b2a      	cmp	r3, #42	; 0x2a
 800c632:	d134      	bne.n	800c69e <_svfiprintf_r+0x186>
 800c634:	9b03      	ldr	r3, [sp, #12]
 800c636:	1d1a      	adds	r2, r3, #4
 800c638:	681b      	ldr	r3, [r3, #0]
 800c63a:	9203      	str	r2, [sp, #12]
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	bfb8      	it	lt
 800c640:	f04f 33ff 	movlt.w	r3, #4294967295
 800c644:	3402      	adds	r4, #2
 800c646:	9305      	str	r3, [sp, #20]
 800c648:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800c710 <_svfiprintf_r+0x1f8>
 800c64c:	7821      	ldrb	r1, [r4, #0]
 800c64e:	2203      	movs	r2, #3
 800c650:	4650      	mov	r0, sl
 800c652:	f7f3 fdbd 	bl	80001d0 <memchr>
 800c656:	b138      	cbz	r0, 800c668 <_svfiprintf_r+0x150>
 800c658:	9b04      	ldr	r3, [sp, #16]
 800c65a:	eba0 000a 	sub.w	r0, r0, sl
 800c65e:	2240      	movs	r2, #64	; 0x40
 800c660:	4082      	lsls	r2, r0
 800c662:	4313      	orrs	r3, r2
 800c664:	3401      	adds	r4, #1
 800c666:	9304      	str	r3, [sp, #16]
 800c668:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c66c:	4825      	ldr	r0, [pc, #148]	; (800c704 <_svfiprintf_r+0x1ec>)
 800c66e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c672:	2206      	movs	r2, #6
 800c674:	f7f3 fdac 	bl	80001d0 <memchr>
 800c678:	2800      	cmp	r0, #0
 800c67a:	d038      	beq.n	800c6ee <_svfiprintf_r+0x1d6>
 800c67c:	4b22      	ldr	r3, [pc, #136]	; (800c708 <_svfiprintf_r+0x1f0>)
 800c67e:	bb1b      	cbnz	r3, 800c6c8 <_svfiprintf_r+0x1b0>
 800c680:	9b03      	ldr	r3, [sp, #12]
 800c682:	3307      	adds	r3, #7
 800c684:	f023 0307 	bic.w	r3, r3, #7
 800c688:	3308      	adds	r3, #8
 800c68a:	9303      	str	r3, [sp, #12]
 800c68c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c68e:	4433      	add	r3, r6
 800c690:	9309      	str	r3, [sp, #36]	; 0x24
 800c692:	e768      	b.n	800c566 <_svfiprintf_r+0x4e>
 800c694:	fb0c 3202 	mla	r2, ip, r2, r3
 800c698:	460c      	mov	r4, r1
 800c69a:	2001      	movs	r0, #1
 800c69c:	e7a6      	b.n	800c5ec <_svfiprintf_r+0xd4>
 800c69e:	2300      	movs	r3, #0
 800c6a0:	3401      	adds	r4, #1
 800c6a2:	9305      	str	r3, [sp, #20]
 800c6a4:	4619      	mov	r1, r3
 800c6a6:	f04f 0c0a 	mov.w	ip, #10
 800c6aa:	4620      	mov	r0, r4
 800c6ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c6b0:	3a30      	subs	r2, #48	; 0x30
 800c6b2:	2a09      	cmp	r2, #9
 800c6b4:	d903      	bls.n	800c6be <_svfiprintf_r+0x1a6>
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	d0c6      	beq.n	800c648 <_svfiprintf_r+0x130>
 800c6ba:	9105      	str	r1, [sp, #20]
 800c6bc:	e7c4      	b.n	800c648 <_svfiprintf_r+0x130>
 800c6be:	fb0c 2101 	mla	r1, ip, r1, r2
 800c6c2:	4604      	mov	r4, r0
 800c6c4:	2301      	movs	r3, #1
 800c6c6:	e7f0      	b.n	800c6aa <_svfiprintf_r+0x192>
 800c6c8:	ab03      	add	r3, sp, #12
 800c6ca:	9300      	str	r3, [sp, #0]
 800c6cc:	462a      	mov	r2, r5
 800c6ce:	4b0f      	ldr	r3, [pc, #60]	; (800c70c <_svfiprintf_r+0x1f4>)
 800c6d0:	a904      	add	r1, sp, #16
 800c6d2:	4638      	mov	r0, r7
 800c6d4:	f7fc fc66 	bl	8008fa4 <_printf_float>
 800c6d8:	1c42      	adds	r2, r0, #1
 800c6da:	4606      	mov	r6, r0
 800c6dc:	d1d6      	bne.n	800c68c <_svfiprintf_r+0x174>
 800c6de:	89ab      	ldrh	r3, [r5, #12]
 800c6e0:	065b      	lsls	r3, r3, #25
 800c6e2:	f53f af2d 	bmi.w	800c540 <_svfiprintf_r+0x28>
 800c6e6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c6e8:	b01d      	add	sp, #116	; 0x74
 800c6ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c6ee:	ab03      	add	r3, sp, #12
 800c6f0:	9300      	str	r3, [sp, #0]
 800c6f2:	462a      	mov	r2, r5
 800c6f4:	4b05      	ldr	r3, [pc, #20]	; (800c70c <_svfiprintf_r+0x1f4>)
 800c6f6:	a904      	add	r1, sp, #16
 800c6f8:	4638      	mov	r0, r7
 800c6fa:	f7fc fef7 	bl	80094ec <_printf_i>
 800c6fe:	e7eb      	b.n	800c6d8 <_svfiprintf_r+0x1c0>
 800c700:	0800e641 	.word	0x0800e641
 800c704:	0800e64b 	.word	0x0800e64b
 800c708:	08008fa5 	.word	0x08008fa5
 800c70c:	0800c465 	.word	0x0800c465
 800c710:	0800e647 	.word	0x0800e647

0800c714 <__sflush_r>:
 800c714:	898a      	ldrh	r2, [r1, #12]
 800c716:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c71a:	4605      	mov	r5, r0
 800c71c:	0710      	lsls	r0, r2, #28
 800c71e:	460c      	mov	r4, r1
 800c720:	d458      	bmi.n	800c7d4 <__sflush_r+0xc0>
 800c722:	684b      	ldr	r3, [r1, #4]
 800c724:	2b00      	cmp	r3, #0
 800c726:	dc05      	bgt.n	800c734 <__sflush_r+0x20>
 800c728:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c72a:	2b00      	cmp	r3, #0
 800c72c:	dc02      	bgt.n	800c734 <__sflush_r+0x20>
 800c72e:	2000      	movs	r0, #0
 800c730:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c734:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c736:	2e00      	cmp	r6, #0
 800c738:	d0f9      	beq.n	800c72e <__sflush_r+0x1a>
 800c73a:	2300      	movs	r3, #0
 800c73c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c740:	682f      	ldr	r7, [r5, #0]
 800c742:	6a21      	ldr	r1, [r4, #32]
 800c744:	602b      	str	r3, [r5, #0]
 800c746:	d032      	beq.n	800c7ae <__sflush_r+0x9a>
 800c748:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c74a:	89a3      	ldrh	r3, [r4, #12]
 800c74c:	075a      	lsls	r2, r3, #29
 800c74e:	d505      	bpl.n	800c75c <__sflush_r+0x48>
 800c750:	6863      	ldr	r3, [r4, #4]
 800c752:	1ac0      	subs	r0, r0, r3
 800c754:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c756:	b10b      	cbz	r3, 800c75c <__sflush_r+0x48>
 800c758:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c75a:	1ac0      	subs	r0, r0, r3
 800c75c:	2300      	movs	r3, #0
 800c75e:	4602      	mov	r2, r0
 800c760:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c762:	6a21      	ldr	r1, [r4, #32]
 800c764:	4628      	mov	r0, r5
 800c766:	47b0      	blx	r6
 800c768:	1c43      	adds	r3, r0, #1
 800c76a:	89a3      	ldrh	r3, [r4, #12]
 800c76c:	d106      	bne.n	800c77c <__sflush_r+0x68>
 800c76e:	6829      	ldr	r1, [r5, #0]
 800c770:	291d      	cmp	r1, #29
 800c772:	d82b      	bhi.n	800c7cc <__sflush_r+0xb8>
 800c774:	4a29      	ldr	r2, [pc, #164]	; (800c81c <__sflush_r+0x108>)
 800c776:	410a      	asrs	r2, r1
 800c778:	07d6      	lsls	r6, r2, #31
 800c77a:	d427      	bmi.n	800c7cc <__sflush_r+0xb8>
 800c77c:	2200      	movs	r2, #0
 800c77e:	6062      	str	r2, [r4, #4]
 800c780:	04d9      	lsls	r1, r3, #19
 800c782:	6922      	ldr	r2, [r4, #16]
 800c784:	6022      	str	r2, [r4, #0]
 800c786:	d504      	bpl.n	800c792 <__sflush_r+0x7e>
 800c788:	1c42      	adds	r2, r0, #1
 800c78a:	d101      	bne.n	800c790 <__sflush_r+0x7c>
 800c78c:	682b      	ldr	r3, [r5, #0]
 800c78e:	b903      	cbnz	r3, 800c792 <__sflush_r+0x7e>
 800c790:	6560      	str	r0, [r4, #84]	; 0x54
 800c792:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c794:	602f      	str	r7, [r5, #0]
 800c796:	2900      	cmp	r1, #0
 800c798:	d0c9      	beq.n	800c72e <__sflush_r+0x1a>
 800c79a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c79e:	4299      	cmp	r1, r3
 800c7a0:	d002      	beq.n	800c7a8 <__sflush_r+0x94>
 800c7a2:	4628      	mov	r0, r5
 800c7a4:	f7fe fa1a 	bl	800abdc <_free_r>
 800c7a8:	2000      	movs	r0, #0
 800c7aa:	6360      	str	r0, [r4, #52]	; 0x34
 800c7ac:	e7c0      	b.n	800c730 <__sflush_r+0x1c>
 800c7ae:	2301      	movs	r3, #1
 800c7b0:	4628      	mov	r0, r5
 800c7b2:	47b0      	blx	r6
 800c7b4:	1c41      	adds	r1, r0, #1
 800c7b6:	d1c8      	bne.n	800c74a <__sflush_r+0x36>
 800c7b8:	682b      	ldr	r3, [r5, #0]
 800c7ba:	2b00      	cmp	r3, #0
 800c7bc:	d0c5      	beq.n	800c74a <__sflush_r+0x36>
 800c7be:	2b1d      	cmp	r3, #29
 800c7c0:	d001      	beq.n	800c7c6 <__sflush_r+0xb2>
 800c7c2:	2b16      	cmp	r3, #22
 800c7c4:	d101      	bne.n	800c7ca <__sflush_r+0xb6>
 800c7c6:	602f      	str	r7, [r5, #0]
 800c7c8:	e7b1      	b.n	800c72e <__sflush_r+0x1a>
 800c7ca:	89a3      	ldrh	r3, [r4, #12]
 800c7cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c7d0:	81a3      	strh	r3, [r4, #12]
 800c7d2:	e7ad      	b.n	800c730 <__sflush_r+0x1c>
 800c7d4:	690f      	ldr	r7, [r1, #16]
 800c7d6:	2f00      	cmp	r7, #0
 800c7d8:	d0a9      	beq.n	800c72e <__sflush_r+0x1a>
 800c7da:	0793      	lsls	r3, r2, #30
 800c7dc:	680e      	ldr	r6, [r1, #0]
 800c7de:	bf08      	it	eq
 800c7e0:	694b      	ldreq	r3, [r1, #20]
 800c7e2:	600f      	str	r7, [r1, #0]
 800c7e4:	bf18      	it	ne
 800c7e6:	2300      	movne	r3, #0
 800c7e8:	eba6 0807 	sub.w	r8, r6, r7
 800c7ec:	608b      	str	r3, [r1, #8]
 800c7ee:	f1b8 0f00 	cmp.w	r8, #0
 800c7f2:	dd9c      	ble.n	800c72e <__sflush_r+0x1a>
 800c7f4:	6a21      	ldr	r1, [r4, #32]
 800c7f6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c7f8:	4643      	mov	r3, r8
 800c7fa:	463a      	mov	r2, r7
 800c7fc:	4628      	mov	r0, r5
 800c7fe:	47b0      	blx	r6
 800c800:	2800      	cmp	r0, #0
 800c802:	dc06      	bgt.n	800c812 <__sflush_r+0xfe>
 800c804:	89a3      	ldrh	r3, [r4, #12]
 800c806:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c80a:	81a3      	strh	r3, [r4, #12]
 800c80c:	f04f 30ff 	mov.w	r0, #4294967295
 800c810:	e78e      	b.n	800c730 <__sflush_r+0x1c>
 800c812:	4407      	add	r7, r0
 800c814:	eba8 0800 	sub.w	r8, r8, r0
 800c818:	e7e9      	b.n	800c7ee <__sflush_r+0xda>
 800c81a:	bf00      	nop
 800c81c:	dfbffffe 	.word	0xdfbffffe

0800c820 <_fflush_r>:
 800c820:	b538      	push	{r3, r4, r5, lr}
 800c822:	690b      	ldr	r3, [r1, #16]
 800c824:	4605      	mov	r5, r0
 800c826:	460c      	mov	r4, r1
 800c828:	b913      	cbnz	r3, 800c830 <_fflush_r+0x10>
 800c82a:	2500      	movs	r5, #0
 800c82c:	4628      	mov	r0, r5
 800c82e:	bd38      	pop	{r3, r4, r5, pc}
 800c830:	b118      	cbz	r0, 800c83a <_fflush_r+0x1a>
 800c832:	6a03      	ldr	r3, [r0, #32]
 800c834:	b90b      	cbnz	r3, 800c83a <_fflush_r+0x1a>
 800c836:	f7fd fa05 	bl	8009c44 <__sinit>
 800c83a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c83e:	2b00      	cmp	r3, #0
 800c840:	d0f3      	beq.n	800c82a <_fflush_r+0xa>
 800c842:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c844:	07d0      	lsls	r0, r2, #31
 800c846:	d404      	bmi.n	800c852 <_fflush_r+0x32>
 800c848:	0599      	lsls	r1, r3, #22
 800c84a:	d402      	bmi.n	800c852 <_fflush_r+0x32>
 800c84c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c84e:	f7fd fb43 	bl	8009ed8 <__retarget_lock_acquire_recursive>
 800c852:	4628      	mov	r0, r5
 800c854:	4621      	mov	r1, r4
 800c856:	f7ff ff5d 	bl	800c714 <__sflush_r>
 800c85a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c85c:	07da      	lsls	r2, r3, #31
 800c85e:	4605      	mov	r5, r0
 800c860:	d4e4      	bmi.n	800c82c <_fflush_r+0xc>
 800c862:	89a3      	ldrh	r3, [r4, #12]
 800c864:	059b      	lsls	r3, r3, #22
 800c866:	d4e1      	bmi.n	800c82c <_fflush_r+0xc>
 800c868:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c86a:	f7fd fb36 	bl	8009eda <__retarget_lock_release_recursive>
 800c86e:	e7dd      	b.n	800c82c <_fflush_r+0xc>

0800c870 <memmove>:
 800c870:	4288      	cmp	r0, r1
 800c872:	b510      	push	{r4, lr}
 800c874:	eb01 0402 	add.w	r4, r1, r2
 800c878:	d902      	bls.n	800c880 <memmove+0x10>
 800c87a:	4284      	cmp	r4, r0
 800c87c:	4623      	mov	r3, r4
 800c87e:	d807      	bhi.n	800c890 <memmove+0x20>
 800c880:	1e43      	subs	r3, r0, #1
 800c882:	42a1      	cmp	r1, r4
 800c884:	d008      	beq.n	800c898 <memmove+0x28>
 800c886:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c88a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c88e:	e7f8      	b.n	800c882 <memmove+0x12>
 800c890:	4402      	add	r2, r0
 800c892:	4601      	mov	r1, r0
 800c894:	428a      	cmp	r2, r1
 800c896:	d100      	bne.n	800c89a <memmove+0x2a>
 800c898:	bd10      	pop	{r4, pc}
 800c89a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c89e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c8a2:	e7f7      	b.n	800c894 <memmove+0x24>

0800c8a4 <strncmp>:
 800c8a4:	b510      	push	{r4, lr}
 800c8a6:	b16a      	cbz	r2, 800c8c4 <strncmp+0x20>
 800c8a8:	3901      	subs	r1, #1
 800c8aa:	1884      	adds	r4, r0, r2
 800c8ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c8b0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800c8b4:	429a      	cmp	r2, r3
 800c8b6:	d103      	bne.n	800c8c0 <strncmp+0x1c>
 800c8b8:	42a0      	cmp	r0, r4
 800c8ba:	d001      	beq.n	800c8c0 <strncmp+0x1c>
 800c8bc:	2a00      	cmp	r2, #0
 800c8be:	d1f5      	bne.n	800c8ac <strncmp+0x8>
 800c8c0:	1ad0      	subs	r0, r2, r3
 800c8c2:	bd10      	pop	{r4, pc}
 800c8c4:	4610      	mov	r0, r2
 800c8c6:	e7fc      	b.n	800c8c2 <strncmp+0x1e>

0800c8c8 <_sbrk_r>:
 800c8c8:	b538      	push	{r3, r4, r5, lr}
 800c8ca:	4d06      	ldr	r5, [pc, #24]	; (800c8e4 <_sbrk_r+0x1c>)
 800c8cc:	2300      	movs	r3, #0
 800c8ce:	4604      	mov	r4, r0
 800c8d0:	4608      	mov	r0, r1
 800c8d2:	602b      	str	r3, [r5, #0]
 800c8d4:	f7f5 fc70 	bl	80021b8 <_sbrk>
 800c8d8:	1c43      	adds	r3, r0, #1
 800c8da:	d102      	bne.n	800c8e2 <_sbrk_r+0x1a>
 800c8dc:	682b      	ldr	r3, [r5, #0]
 800c8de:	b103      	cbz	r3, 800c8e2 <_sbrk_r+0x1a>
 800c8e0:	6023      	str	r3, [r4, #0]
 800c8e2:	bd38      	pop	{r3, r4, r5, pc}
 800c8e4:	20000744 	.word	0x20000744

0800c8e8 <memcpy>:
 800c8e8:	440a      	add	r2, r1
 800c8ea:	4291      	cmp	r1, r2
 800c8ec:	f100 33ff 	add.w	r3, r0, #4294967295
 800c8f0:	d100      	bne.n	800c8f4 <memcpy+0xc>
 800c8f2:	4770      	bx	lr
 800c8f4:	b510      	push	{r4, lr}
 800c8f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c8fa:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c8fe:	4291      	cmp	r1, r2
 800c900:	d1f9      	bne.n	800c8f6 <memcpy+0xe>
 800c902:	bd10      	pop	{r4, pc}
 800c904:	0000      	movs	r0, r0
	...

0800c908 <nan>:
 800c908:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800c910 <nan+0x8>
 800c90c:	4770      	bx	lr
 800c90e:	bf00      	nop
 800c910:	00000000 	.word	0x00000000
 800c914:	7ff80000 	.word	0x7ff80000

0800c918 <__assert_func>:
 800c918:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c91a:	4614      	mov	r4, r2
 800c91c:	461a      	mov	r2, r3
 800c91e:	4b09      	ldr	r3, [pc, #36]	; (800c944 <__assert_func+0x2c>)
 800c920:	681b      	ldr	r3, [r3, #0]
 800c922:	4605      	mov	r5, r0
 800c924:	68d8      	ldr	r0, [r3, #12]
 800c926:	b14c      	cbz	r4, 800c93c <__assert_func+0x24>
 800c928:	4b07      	ldr	r3, [pc, #28]	; (800c948 <__assert_func+0x30>)
 800c92a:	9100      	str	r1, [sp, #0]
 800c92c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c930:	4906      	ldr	r1, [pc, #24]	; (800c94c <__assert_func+0x34>)
 800c932:	462b      	mov	r3, r5
 800c934:	f000 fbca 	bl	800d0cc <fiprintf>
 800c938:	f000 fbda 	bl	800d0f0 <abort>
 800c93c:	4b04      	ldr	r3, [pc, #16]	; (800c950 <__assert_func+0x38>)
 800c93e:	461c      	mov	r4, r3
 800c940:	e7f3      	b.n	800c92a <__assert_func+0x12>
 800c942:	bf00      	nop
 800c944:	200000b4 	.word	0x200000b4
 800c948:	0800e65a 	.word	0x0800e65a
 800c94c:	0800e667 	.word	0x0800e667
 800c950:	0800e695 	.word	0x0800e695

0800c954 <_calloc_r>:
 800c954:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c956:	fba1 2402 	umull	r2, r4, r1, r2
 800c95a:	b94c      	cbnz	r4, 800c970 <_calloc_r+0x1c>
 800c95c:	4611      	mov	r1, r2
 800c95e:	9201      	str	r2, [sp, #4]
 800c960:	f7fe f9b0 	bl	800acc4 <_malloc_r>
 800c964:	9a01      	ldr	r2, [sp, #4]
 800c966:	4605      	mov	r5, r0
 800c968:	b930      	cbnz	r0, 800c978 <_calloc_r+0x24>
 800c96a:	4628      	mov	r0, r5
 800c96c:	b003      	add	sp, #12
 800c96e:	bd30      	pop	{r4, r5, pc}
 800c970:	220c      	movs	r2, #12
 800c972:	6002      	str	r2, [r0, #0]
 800c974:	2500      	movs	r5, #0
 800c976:	e7f8      	b.n	800c96a <_calloc_r+0x16>
 800c978:	4621      	mov	r1, r4
 800c97a:	f7fd fa30 	bl	8009dde <memset>
 800c97e:	e7f4      	b.n	800c96a <_calloc_r+0x16>

0800c980 <rshift>:
 800c980:	6903      	ldr	r3, [r0, #16]
 800c982:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800c986:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c98a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800c98e:	f100 0414 	add.w	r4, r0, #20
 800c992:	dd45      	ble.n	800ca20 <rshift+0xa0>
 800c994:	f011 011f 	ands.w	r1, r1, #31
 800c998:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800c99c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800c9a0:	d10c      	bne.n	800c9bc <rshift+0x3c>
 800c9a2:	f100 0710 	add.w	r7, r0, #16
 800c9a6:	4629      	mov	r1, r5
 800c9a8:	42b1      	cmp	r1, r6
 800c9aa:	d334      	bcc.n	800ca16 <rshift+0x96>
 800c9ac:	1a9b      	subs	r3, r3, r2
 800c9ae:	009b      	lsls	r3, r3, #2
 800c9b0:	1eea      	subs	r2, r5, #3
 800c9b2:	4296      	cmp	r6, r2
 800c9b4:	bf38      	it	cc
 800c9b6:	2300      	movcc	r3, #0
 800c9b8:	4423      	add	r3, r4
 800c9ba:	e015      	b.n	800c9e8 <rshift+0x68>
 800c9bc:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800c9c0:	f1c1 0820 	rsb	r8, r1, #32
 800c9c4:	40cf      	lsrs	r7, r1
 800c9c6:	f105 0e04 	add.w	lr, r5, #4
 800c9ca:	46a1      	mov	r9, r4
 800c9cc:	4576      	cmp	r6, lr
 800c9ce:	46f4      	mov	ip, lr
 800c9d0:	d815      	bhi.n	800c9fe <rshift+0x7e>
 800c9d2:	1a9a      	subs	r2, r3, r2
 800c9d4:	0092      	lsls	r2, r2, #2
 800c9d6:	3a04      	subs	r2, #4
 800c9d8:	3501      	adds	r5, #1
 800c9da:	42ae      	cmp	r6, r5
 800c9dc:	bf38      	it	cc
 800c9de:	2200      	movcc	r2, #0
 800c9e0:	18a3      	adds	r3, r4, r2
 800c9e2:	50a7      	str	r7, [r4, r2]
 800c9e4:	b107      	cbz	r7, 800c9e8 <rshift+0x68>
 800c9e6:	3304      	adds	r3, #4
 800c9e8:	1b1a      	subs	r2, r3, r4
 800c9ea:	42a3      	cmp	r3, r4
 800c9ec:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c9f0:	bf08      	it	eq
 800c9f2:	2300      	moveq	r3, #0
 800c9f4:	6102      	str	r2, [r0, #16]
 800c9f6:	bf08      	it	eq
 800c9f8:	6143      	streq	r3, [r0, #20]
 800c9fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c9fe:	f8dc c000 	ldr.w	ip, [ip]
 800ca02:	fa0c fc08 	lsl.w	ip, ip, r8
 800ca06:	ea4c 0707 	orr.w	r7, ip, r7
 800ca0a:	f849 7b04 	str.w	r7, [r9], #4
 800ca0e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ca12:	40cf      	lsrs	r7, r1
 800ca14:	e7da      	b.n	800c9cc <rshift+0x4c>
 800ca16:	f851 cb04 	ldr.w	ip, [r1], #4
 800ca1a:	f847 cf04 	str.w	ip, [r7, #4]!
 800ca1e:	e7c3      	b.n	800c9a8 <rshift+0x28>
 800ca20:	4623      	mov	r3, r4
 800ca22:	e7e1      	b.n	800c9e8 <rshift+0x68>

0800ca24 <__hexdig_fun>:
 800ca24:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800ca28:	2b09      	cmp	r3, #9
 800ca2a:	d802      	bhi.n	800ca32 <__hexdig_fun+0xe>
 800ca2c:	3820      	subs	r0, #32
 800ca2e:	b2c0      	uxtb	r0, r0
 800ca30:	4770      	bx	lr
 800ca32:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800ca36:	2b05      	cmp	r3, #5
 800ca38:	d801      	bhi.n	800ca3e <__hexdig_fun+0x1a>
 800ca3a:	3847      	subs	r0, #71	; 0x47
 800ca3c:	e7f7      	b.n	800ca2e <__hexdig_fun+0xa>
 800ca3e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800ca42:	2b05      	cmp	r3, #5
 800ca44:	d801      	bhi.n	800ca4a <__hexdig_fun+0x26>
 800ca46:	3827      	subs	r0, #39	; 0x27
 800ca48:	e7f1      	b.n	800ca2e <__hexdig_fun+0xa>
 800ca4a:	2000      	movs	r0, #0
 800ca4c:	4770      	bx	lr
	...

0800ca50 <__gethex>:
 800ca50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca54:	4617      	mov	r7, r2
 800ca56:	680a      	ldr	r2, [r1, #0]
 800ca58:	b085      	sub	sp, #20
 800ca5a:	f102 0b02 	add.w	fp, r2, #2
 800ca5e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800ca62:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800ca66:	4681      	mov	r9, r0
 800ca68:	468a      	mov	sl, r1
 800ca6a:	9302      	str	r3, [sp, #8]
 800ca6c:	32fe      	adds	r2, #254	; 0xfe
 800ca6e:	eb02 030b 	add.w	r3, r2, fp
 800ca72:	46d8      	mov	r8, fp
 800ca74:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800ca78:	9301      	str	r3, [sp, #4]
 800ca7a:	2830      	cmp	r0, #48	; 0x30
 800ca7c:	d0f7      	beq.n	800ca6e <__gethex+0x1e>
 800ca7e:	f7ff ffd1 	bl	800ca24 <__hexdig_fun>
 800ca82:	4604      	mov	r4, r0
 800ca84:	2800      	cmp	r0, #0
 800ca86:	d138      	bne.n	800cafa <__gethex+0xaa>
 800ca88:	49a7      	ldr	r1, [pc, #668]	; (800cd28 <__gethex+0x2d8>)
 800ca8a:	2201      	movs	r2, #1
 800ca8c:	4640      	mov	r0, r8
 800ca8e:	f7ff ff09 	bl	800c8a4 <strncmp>
 800ca92:	4606      	mov	r6, r0
 800ca94:	2800      	cmp	r0, #0
 800ca96:	d169      	bne.n	800cb6c <__gethex+0x11c>
 800ca98:	f898 0001 	ldrb.w	r0, [r8, #1]
 800ca9c:	465d      	mov	r5, fp
 800ca9e:	f7ff ffc1 	bl	800ca24 <__hexdig_fun>
 800caa2:	2800      	cmp	r0, #0
 800caa4:	d064      	beq.n	800cb70 <__gethex+0x120>
 800caa6:	465a      	mov	r2, fp
 800caa8:	7810      	ldrb	r0, [r2, #0]
 800caaa:	2830      	cmp	r0, #48	; 0x30
 800caac:	4690      	mov	r8, r2
 800caae:	f102 0201 	add.w	r2, r2, #1
 800cab2:	d0f9      	beq.n	800caa8 <__gethex+0x58>
 800cab4:	f7ff ffb6 	bl	800ca24 <__hexdig_fun>
 800cab8:	2301      	movs	r3, #1
 800caba:	fab0 f480 	clz	r4, r0
 800cabe:	0964      	lsrs	r4, r4, #5
 800cac0:	465e      	mov	r6, fp
 800cac2:	9301      	str	r3, [sp, #4]
 800cac4:	4642      	mov	r2, r8
 800cac6:	4615      	mov	r5, r2
 800cac8:	3201      	adds	r2, #1
 800caca:	7828      	ldrb	r0, [r5, #0]
 800cacc:	f7ff ffaa 	bl	800ca24 <__hexdig_fun>
 800cad0:	2800      	cmp	r0, #0
 800cad2:	d1f8      	bne.n	800cac6 <__gethex+0x76>
 800cad4:	4994      	ldr	r1, [pc, #592]	; (800cd28 <__gethex+0x2d8>)
 800cad6:	2201      	movs	r2, #1
 800cad8:	4628      	mov	r0, r5
 800cada:	f7ff fee3 	bl	800c8a4 <strncmp>
 800cade:	b978      	cbnz	r0, 800cb00 <__gethex+0xb0>
 800cae0:	b946      	cbnz	r6, 800caf4 <__gethex+0xa4>
 800cae2:	1c6e      	adds	r6, r5, #1
 800cae4:	4632      	mov	r2, r6
 800cae6:	4615      	mov	r5, r2
 800cae8:	3201      	adds	r2, #1
 800caea:	7828      	ldrb	r0, [r5, #0]
 800caec:	f7ff ff9a 	bl	800ca24 <__hexdig_fun>
 800caf0:	2800      	cmp	r0, #0
 800caf2:	d1f8      	bne.n	800cae6 <__gethex+0x96>
 800caf4:	1b73      	subs	r3, r6, r5
 800caf6:	009e      	lsls	r6, r3, #2
 800caf8:	e004      	b.n	800cb04 <__gethex+0xb4>
 800cafa:	2400      	movs	r4, #0
 800cafc:	4626      	mov	r6, r4
 800cafe:	e7e1      	b.n	800cac4 <__gethex+0x74>
 800cb00:	2e00      	cmp	r6, #0
 800cb02:	d1f7      	bne.n	800caf4 <__gethex+0xa4>
 800cb04:	782b      	ldrb	r3, [r5, #0]
 800cb06:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800cb0a:	2b50      	cmp	r3, #80	; 0x50
 800cb0c:	d13d      	bne.n	800cb8a <__gethex+0x13a>
 800cb0e:	786b      	ldrb	r3, [r5, #1]
 800cb10:	2b2b      	cmp	r3, #43	; 0x2b
 800cb12:	d02f      	beq.n	800cb74 <__gethex+0x124>
 800cb14:	2b2d      	cmp	r3, #45	; 0x2d
 800cb16:	d031      	beq.n	800cb7c <__gethex+0x12c>
 800cb18:	1c69      	adds	r1, r5, #1
 800cb1a:	f04f 0b00 	mov.w	fp, #0
 800cb1e:	7808      	ldrb	r0, [r1, #0]
 800cb20:	f7ff ff80 	bl	800ca24 <__hexdig_fun>
 800cb24:	1e42      	subs	r2, r0, #1
 800cb26:	b2d2      	uxtb	r2, r2
 800cb28:	2a18      	cmp	r2, #24
 800cb2a:	d82e      	bhi.n	800cb8a <__gethex+0x13a>
 800cb2c:	f1a0 0210 	sub.w	r2, r0, #16
 800cb30:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800cb34:	f7ff ff76 	bl	800ca24 <__hexdig_fun>
 800cb38:	f100 3cff 	add.w	ip, r0, #4294967295
 800cb3c:	fa5f fc8c 	uxtb.w	ip, ip
 800cb40:	f1bc 0f18 	cmp.w	ip, #24
 800cb44:	d91d      	bls.n	800cb82 <__gethex+0x132>
 800cb46:	f1bb 0f00 	cmp.w	fp, #0
 800cb4a:	d000      	beq.n	800cb4e <__gethex+0xfe>
 800cb4c:	4252      	negs	r2, r2
 800cb4e:	4416      	add	r6, r2
 800cb50:	f8ca 1000 	str.w	r1, [sl]
 800cb54:	b1dc      	cbz	r4, 800cb8e <__gethex+0x13e>
 800cb56:	9b01      	ldr	r3, [sp, #4]
 800cb58:	2b00      	cmp	r3, #0
 800cb5a:	bf14      	ite	ne
 800cb5c:	f04f 0800 	movne.w	r8, #0
 800cb60:	f04f 0806 	moveq.w	r8, #6
 800cb64:	4640      	mov	r0, r8
 800cb66:	b005      	add	sp, #20
 800cb68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb6c:	4645      	mov	r5, r8
 800cb6e:	4626      	mov	r6, r4
 800cb70:	2401      	movs	r4, #1
 800cb72:	e7c7      	b.n	800cb04 <__gethex+0xb4>
 800cb74:	f04f 0b00 	mov.w	fp, #0
 800cb78:	1ca9      	adds	r1, r5, #2
 800cb7a:	e7d0      	b.n	800cb1e <__gethex+0xce>
 800cb7c:	f04f 0b01 	mov.w	fp, #1
 800cb80:	e7fa      	b.n	800cb78 <__gethex+0x128>
 800cb82:	230a      	movs	r3, #10
 800cb84:	fb03 0002 	mla	r0, r3, r2, r0
 800cb88:	e7d0      	b.n	800cb2c <__gethex+0xdc>
 800cb8a:	4629      	mov	r1, r5
 800cb8c:	e7e0      	b.n	800cb50 <__gethex+0x100>
 800cb8e:	eba5 0308 	sub.w	r3, r5, r8
 800cb92:	3b01      	subs	r3, #1
 800cb94:	4621      	mov	r1, r4
 800cb96:	2b07      	cmp	r3, #7
 800cb98:	dc0a      	bgt.n	800cbb0 <__gethex+0x160>
 800cb9a:	4648      	mov	r0, r9
 800cb9c:	f7fe f91e 	bl	800addc <_Balloc>
 800cba0:	4604      	mov	r4, r0
 800cba2:	b940      	cbnz	r0, 800cbb6 <__gethex+0x166>
 800cba4:	4b61      	ldr	r3, [pc, #388]	; (800cd2c <__gethex+0x2dc>)
 800cba6:	4602      	mov	r2, r0
 800cba8:	21e4      	movs	r1, #228	; 0xe4
 800cbaa:	4861      	ldr	r0, [pc, #388]	; (800cd30 <__gethex+0x2e0>)
 800cbac:	f7ff feb4 	bl	800c918 <__assert_func>
 800cbb0:	3101      	adds	r1, #1
 800cbb2:	105b      	asrs	r3, r3, #1
 800cbb4:	e7ef      	b.n	800cb96 <__gethex+0x146>
 800cbb6:	f100 0a14 	add.w	sl, r0, #20
 800cbba:	2300      	movs	r3, #0
 800cbbc:	495a      	ldr	r1, [pc, #360]	; (800cd28 <__gethex+0x2d8>)
 800cbbe:	f8cd a004 	str.w	sl, [sp, #4]
 800cbc2:	469b      	mov	fp, r3
 800cbc4:	45a8      	cmp	r8, r5
 800cbc6:	d342      	bcc.n	800cc4e <__gethex+0x1fe>
 800cbc8:	9801      	ldr	r0, [sp, #4]
 800cbca:	f840 bb04 	str.w	fp, [r0], #4
 800cbce:	eba0 000a 	sub.w	r0, r0, sl
 800cbd2:	1080      	asrs	r0, r0, #2
 800cbd4:	6120      	str	r0, [r4, #16]
 800cbd6:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800cbda:	4658      	mov	r0, fp
 800cbdc:	f7fe f9f0 	bl	800afc0 <__hi0bits>
 800cbe0:	683d      	ldr	r5, [r7, #0]
 800cbe2:	eba8 0000 	sub.w	r0, r8, r0
 800cbe6:	42a8      	cmp	r0, r5
 800cbe8:	dd59      	ble.n	800cc9e <__gethex+0x24e>
 800cbea:	eba0 0805 	sub.w	r8, r0, r5
 800cbee:	4641      	mov	r1, r8
 800cbf0:	4620      	mov	r0, r4
 800cbf2:	f7fe fd7f 	bl	800b6f4 <__any_on>
 800cbf6:	4683      	mov	fp, r0
 800cbf8:	b1b8      	cbz	r0, 800cc2a <__gethex+0x1da>
 800cbfa:	f108 33ff 	add.w	r3, r8, #4294967295
 800cbfe:	1159      	asrs	r1, r3, #5
 800cc00:	f003 021f 	and.w	r2, r3, #31
 800cc04:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800cc08:	f04f 0b01 	mov.w	fp, #1
 800cc0c:	fa0b f202 	lsl.w	r2, fp, r2
 800cc10:	420a      	tst	r2, r1
 800cc12:	d00a      	beq.n	800cc2a <__gethex+0x1da>
 800cc14:	455b      	cmp	r3, fp
 800cc16:	dd06      	ble.n	800cc26 <__gethex+0x1d6>
 800cc18:	f1a8 0102 	sub.w	r1, r8, #2
 800cc1c:	4620      	mov	r0, r4
 800cc1e:	f7fe fd69 	bl	800b6f4 <__any_on>
 800cc22:	2800      	cmp	r0, #0
 800cc24:	d138      	bne.n	800cc98 <__gethex+0x248>
 800cc26:	f04f 0b02 	mov.w	fp, #2
 800cc2a:	4641      	mov	r1, r8
 800cc2c:	4620      	mov	r0, r4
 800cc2e:	f7ff fea7 	bl	800c980 <rshift>
 800cc32:	4446      	add	r6, r8
 800cc34:	68bb      	ldr	r3, [r7, #8]
 800cc36:	42b3      	cmp	r3, r6
 800cc38:	da41      	bge.n	800ccbe <__gethex+0x26e>
 800cc3a:	4621      	mov	r1, r4
 800cc3c:	4648      	mov	r0, r9
 800cc3e:	f7fe f90d 	bl	800ae5c <_Bfree>
 800cc42:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cc44:	2300      	movs	r3, #0
 800cc46:	6013      	str	r3, [r2, #0]
 800cc48:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800cc4c:	e78a      	b.n	800cb64 <__gethex+0x114>
 800cc4e:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800cc52:	2a2e      	cmp	r2, #46	; 0x2e
 800cc54:	d014      	beq.n	800cc80 <__gethex+0x230>
 800cc56:	2b20      	cmp	r3, #32
 800cc58:	d106      	bne.n	800cc68 <__gethex+0x218>
 800cc5a:	9b01      	ldr	r3, [sp, #4]
 800cc5c:	f843 bb04 	str.w	fp, [r3], #4
 800cc60:	f04f 0b00 	mov.w	fp, #0
 800cc64:	9301      	str	r3, [sp, #4]
 800cc66:	465b      	mov	r3, fp
 800cc68:	7828      	ldrb	r0, [r5, #0]
 800cc6a:	9303      	str	r3, [sp, #12]
 800cc6c:	f7ff feda 	bl	800ca24 <__hexdig_fun>
 800cc70:	9b03      	ldr	r3, [sp, #12]
 800cc72:	f000 000f 	and.w	r0, r0, #15
 800cc76:	4098      	lsls	r0, r3
 800cc78:	ea4b 0b00 	orr.w	fp, fp, r0
 800cc7c:	3304      	adds	r3, #4
 800cc7e:	e7a1      	b.n	800cbc4 <__gethex+0x174>
 800cc80:	45a8      	cmp	r8, r5
 800cc82:	d8e8      	bhi.n	800cc56 <__gethex+0x206>
 800cc84:	2201      	movs	r2, #1
 800cc86:	4628      	mov	r0, r5
 800cc88:	9303      	str	r3, [sp, #12]
 800cc8a:	f7ff fe0b 	bl	800c8a4 <strncmp>
 800cc8e:	4926      	ldr	r1, [pc, #152]	; (800cd28 <__gethex+0x2d8>)
 800cc90:	9b03      	ldr	r3, [sp, #12]
 800cc92:	2800      	cmp	r0, #0
 800cc94:	d1df      	bne.n	800cc56 <__gethex+0x206>
 800cc96:	e795      	b.n	800cbc4 <__gethex+0x174>
 800cc98:	f04f 0b03 	mov.w	fp, #3
 800cc9c:	e7c5      	b.n	800cc2a <__gethex+0x1da>
 800cc9e:	da0b      	bge.n	800ccb8 <__gethex+0x268>
 800cca0:	eba5 0800 	sub.w	r8, r5, r0
 800cca4:	4621      	mov	r1, r4
 800cca6:	4642      	mov	r2, r8
 800cca8:	4648      	mov	r0, r9
 800ccaa:	f7fe faf1 	bl	800b290 <__lshift>
 800ccae:	eba6 0608 	sub.w	r6, r6, r8
 800ccb2:	4604      	mov	r4, r0
 800ccb4:	f100 0a14 	add.w	sl, r0, #20
 800ccb8:	f04f 0b00 	mov.w	fp, #0
 800ccbc:	e7ba      	b.n	800cc34 <__gethex+0x1e4>
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	42b3      	cmp	r3, r6
 800ccc2:	dd73      	ble.n	800cdac <__gethex+0x35c>
 800ccc4:	1b9e      	subs	r6, r3, r6
 800ccc6:	42b5      	cmp	r5, r6
 800ccc8:	dc34      	bgt.n	800cd34 <__gethex+0x2e4>
 800ccca:	68fb      	ldr	r3, [r7, #12]
 800cccc:	2b02      	cmp	r3, #2
 800ccce:	d023      	beq.n	800cd18 <__gethex+0x2c8>
 800ccd0:	2b03      	cmp	r3, #3
 800ccd2:	d025      	beq.n	800cd20 <__gethex+0x2d0>
 800ccd4:	2b01      	cmp	r3, #1
 800ccd6:	d115      	bne.n	800cd04 <__gethex+0x2b4>
 800ccd8:	42b5      	cmp	r5, r6
 800ccda:	d113      	bne.n	800cd04 <__gethex+0x2b4>
 800ccdc:	2d01      	cmp	r5, #1
 800ccde:	d10b      	bne.n	800ccf8 <__gethex+0x2a8>
 800cce0:	9a02      	ldr	r2, [sp, #8]
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	6013      	str	r3, [r2, #0]
 800cce6:	2301      	movs	r3, #1
 800cce8:	6123      	str	r3, [r4, #16]
 800ccea:	f8ca 3000 	str.w	r3, [sl]
 800ccee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ccf0:	f04f 0862 	mov.w	r8, #98	; 0x62
 800ccf4:	601c      	str	r4, [r3, #0]
 800ccf6:	e735      	b.n	800cb64 <__gethex+0x114>
 800ccf8:	1e69      	subs	r1, r5, #1
 800ccfa:	4620      	mov	r0, r4
 800ccfc:	f7fe fcfa 	bl	800b6f4 <__any_on>
 800cd00:	2800      	cmp	r0, #0
 800cd02:	d1ed      	bne.n	800cce0 <__gethex+0x290>
 800cd04:	4621      	mov	r1, r4
 800cd06:	4648      	mov	r0, r9
 800cd08:	f7fe f8a8 	bl	800ae5c <_Bfree>
 800cd0c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cd0e:	2300      	movs	r3, #0
 800cd10:	6013      	str	r3, [r2, #0]
 800cd12:	f04f 0850 	mov.w	r8, #80	; 0x50
 800cd16:	e725      	b.n	800cb64 <__gethex+0x114>
 800cd18:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	d1f2      	bne.n	800cd04 <__gethex+0x2b4>
 800cd1e:	e7df      	b.n	800cce0 <__gethex+0x290>
 800cd20:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cd22:	2b00      	cmp	r3, #0
 800cd24:	d1dc      	bne.n	800cce0 <__gethex+0x290>
 800cd26:	e7ed      	b.n	800cd04 <__gethex+0x2b4>
 800cd28:	0800e4ec 	.word	0x0800e4ec
 800cd2c:	0800e381 	.word	0x0800e381
 800cd30:	0800e696 	.word	0x0800e696
 800cd34:	f106 38ff 	add.w	r8, r6, #4294967295
 800cd38:	f1bb 0f00 	cmp.w	fp, #0
 800cd3c:	d133      	bne.n	800cda6 <__gethex+0x356>
 800cd3e:	f1b8 0f00 	cmp.w	r8, #0
 800cd42:	d004      	beq.n	800cd4e <__gethex+0x2fe>
 800cd44:	4641      	mov	r1, r8
 800cd46:	4620      	mov	r0, r4
 800cd48:	f7fe fcd4 	bl	800b6f4 <__any_on>
 800cd4c:	4683      	mov	fp, r0
 800cd4e:	ea4f 1268 	mov.w	r2, r8, asr #5
 800cd52:	2301      	movs	r3, #1
 800cd54:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800cd58:	f008 081f 	and.w	r8, r8, #31
 800cd5c:	fa03 f308 	lsl.w	r3, r3, r8
 800cd60:	4213      	tst	r3, r2
 800cd62:	4631      	mov	r1, r6
 800cd64:	4620      	mov	r0, r4
 800cd66:	bf18      	it	ne
 800cd68:	f04b 0b02 	orrne.w	fp, fp, #2
 800cd6c:	1bad      	subs	r5, r5, r6
 800cd6e:	f7ff fe07 	bl	800c980 <rshift>
 800cd72:	687e      	ldr	r6, [r7, #4]
 800cd74:	f04f 0802 	mov.w	r8, #2
 800cd78:	f1bb 0f00 	cmp.w	fp, #0
 800cd7c:	d04a      	beq.n	800ce14 <__gethex+0x3c4>
 800cd7e:	68fb      	ldr	r3, [r7, #12]
 800cd80:	2b02      	cmp	r3, #2
 800cd82:	d016      	beq.n	800cdb2 <__gethex+0x362>
 800cd84:	2b03      	cmp	r3, #3
 800cd86:	d018      	beq.n	800cdba <__gethex+0x36a>
 800cd88:	2b01      	cmp	r3, #1
 800cd8a:	d109      	bne.n	800cda0 <__gethex+0x350>
 800cd8c:	f01b 0f02 	tst.w	fp, #2
 800cd90:	d006      	beq.n	800cda0 <__gethex+0x350>
 800cd92:	f8da 3000 	ldr.w	r3, [sl]
 800cd96:	ea4b 0b03 	orr.w	fp, fp, r3
 800cd9a:	f01b 0f01 	tst.w	fp, #1
 800cd9e:	d10f      	bne.n	800cdc0 <__gethex+0x370>
 800cda0:	f048 0810 	orr.w	r8, r8, #16
 800cda4:	e036      	b.n	800ce14 <__gethex+0x3c4>
 800cda6:	f04f 0b01 	mov.w	fp, #1
 800cdaa:	e7d0      	b.n	800cd4e <__gethex+0x2fe>
 800cdac:	f04f 0801 	mov.w	r8, #1
 800cdb0:	e7e2      	b.n	800cd78 <__gethex+0x328>
 800cdb2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cdb4:	f1c3 0301 	rsb	r3, r3, #1
 800cdb8:	930f      	str	r3, [sp, #60]	; 0x3c
 800cdba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cdbc:	2b00      	cmp	r3, #0
 800cdbe:	d0ef      	beq.n	800cda0 <__gethex+0x350>
 800cdc0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800cdc4:	f104 0214 	add.w	r2, r4, #20
 800cdc8:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800cdcc:	9301      	str	r3, [sp, #4]
 800cdce:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800cdd2:	2300      	movs	r3, #0
 800cdd4:	4694      	mov	ip, r2
 800cdd6:	f852 1b04 	ldr.w	r1, [r2], #4
 800cdda:	f1b1 3fff 	cmp.w	r1, #4294967295
 800cdde:	d01e      	beq.n	800ce1e <__gethex+0x3ce>
 800cde0:	3101      	adds	r1, #1
 800cde2:	f8cc 1000 	str.w	r1, [ip]
 800cde6:	f1b8 0f02 	cmp.w	r8, #2
 800cdea:	f104 0214 	add.w	r2, r4, #20
 800cdee:	d13d      	bne.n	800ce6c <__gethex+0x41c>
 800cdf0:	683b      	ldr	r3, [r7, #0]
 800cdf2:	3b01      	subs	r3, #1
 800cdf4:	42ab      	cmp	r3, r5
 800cdf6:	d10b      	bne.n	800ce10 <__gethex+0x3c0>
 800cdf8:	1169      	asrs	r1, r5, #5
 800cdfa:	2301      	movs	r3, #1
 800cdfc:	f005 051f 	and.w	r5, r5, #31
 800ce00:	fa03 f505 	lsl.w	r5, r3, r5
 800ce04:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ce08:	421d      	tst	r5, r3
 800ce0a:	bf18      	it	ne
 800ce0c:	f04f 0801 	movne.w	r8, #1
 800ce10:	f048 0820 	orr.w	r8, r8, #32
 800ce14:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ce16:	601c      	str	r4, [r3, #0]
 800ce18:	9b02      	ldr	r3, [sp, #8]
 800ce1a:	601e      	str	r6, [r3, #0]
 800ce1c:	e6a2      	b.n	800cb64 <__gethex+0x114>
 800ce1e:	4290      	cmp	r0, r2
 800ce20:	f842 3c04 	str.w	r3, [r2, #-4]
 800ce24:	d8d6      	bhi.n	800cdd4 <__gethex+0x384>
 800ce26:	68a2      	ldr	r2, [r4, #8]
 800ce28:	4593      	cmp	fp, r2
 800ce2a:	db17      	blt.n	800ce5c <__gethex+0x40c>
 800ce2c:	6861      	ldr	r1, [r4, #4]
 800ce2e:	4648      	mov	r0, r9
 800ce30:	3101      	adds	r1, #1
 800ce32:	f7fd ffd3 	bl	800addc <_Balloc>
 800ce36:	4682      	mov	sl, r0
 800ce38:	b918      	cbnz	r0, 800ce42 <__gethex+0x3f2>
 800ce3a:	4b1b      	ldr	r3, [pc, #108]	; (800cea8 <__gethex+0x458>)
 800ce3c:	4602      	mov	r2, r0
 800ce3e:	2184      	movs	r1, #132	; 0x84
 800ce40:	e6b3      	b.n	800cbaa <__gethex+0x15a>
 800ce42:	6922      	ldr	r2, [r4, #16]
 800ce44:	3202      	adds	r2, #2
 800ce46:	f104 010c 	add.w	r1, r4, #12
 800ce4a:	0092      	lsls	r2, r2, #2
 800ce4c:	300c      	adds	r0, #12
 800ce4e:	f7ff fd4b 	bl	800c8e8 <memcpy>
 800ce52:	4621      	mov	r1, r4
 800ce54:	4648      	mov	r0, r9
 800ce56:	f7fe f801 	bl	800ae5c <_Bfree>
 800ce5a:	4654      	mov	r4, sl
 800ce5c:	6922      	ldr	r2, [r4, #16]
 800ce5e:	1c51      	adds	r1, r2, #1
 800ce60:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800ce64:	6121      	str	r1, [r4, #16]
 800ce66:	2101      	movs	r1, #1
 800ce68:	6151      	str	r1, [r2, #20]
 800ce6a:	e7bc      	b.n	800cde6 <__gethex+0x396>
 800ce6c:	6921      	ldr	r1, [r4, #16]
 800ce6e:	4559      	cmp	r1, fp
 800ce70:	dd0b      	ble.n	800ce8a <__gethex+0x43a>
 800ce72:	2101      	movs	r1, #1
 800ce74:	4620      	mov	r0, r4
 800ce76:	f7ff fd83 	bl	800c980 <rshift>
 800ce7a:	68bb      	ldr	r3, [r7, #8]
 800ce7c:	3601      	adds	r6, #1
 800ce7e:	42b3      	cmp	r3, r6
 800ce80:	f6ff aedb 	blt.w	800cc3a <__gethex+0x1ea>
 800ce84:	f04f 0801 	mov.w	r8, #1
 800ce88:	e7c2      	b.n	800ce10 <__gethex+0x3c0>
 800ce8a:	f015 051f 	ands.w	r5, r5, #31
 800ce8e:	d0f9      	beq.n	800ce84 <__gethex+0x434>
 800ce90:	9b01      	ldr	r3, [sp, #4]
 800ce92:	441a      	add	r2, r3
 800ce94:	f1c5 0520 	rsb	r5, r5, #32
 800ce98:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800ce9c:	f7fe f890 	bl	800afc0 <__hi0bits>
 800cea0:	42a8      	cmp	r0, r5
 800cea2:	dbe6      	blt.n	800ce72 <__gethex+0x422>
 800cea4:	e7ee      	b.n	800ce84 <__gethex+0x434>
 800cea6:	bf00      	nop
 800cea8:	0800e381 	.word	0x0800e381

0800ceac <L_shift>:
 800ceac:	f1c2 0208 	rsb	r2, r2, #8
 800ceb0:	0092      	lsls	r2, r2, #2
 800ceb2:	b570      	push	{r4, r5, r6, lr}
 800ceb4:	f1c2 0620 	rsb	r6, r2, #32
 800ceb8:	6843      	ldr	r3, [r0, #4]
 800ceba:	6804      	ldr	r4, [r0, #0]
 800cebc:	fa03 f506 	lsl.w	r5, r3, r6
 800cec0:	432c      	orrs	r4, r5
 800cec2:	40d3      	lsrs	r3, r2
 800cec4:	6004      	str	r4, [r0, #0]
 800cec6:	f840 3f04 	str.w	r3, [r0, #4]!
 800ceca:	4288      	cmp	r0, r1
 800cecc:	d3f4      	bcc.n	800ceb8 <L_shift+0xc>
 800cece:	bd70      	pop	{r4, r5, r6, pc}

0800ced0 <__match>:
 800ced0:	b530      	push	{r4, r5, lr}
 800ced2:	6803      	ldr	r3, [r0, #0]
 800ced4:	3301      	adds	r3, #1
 800ced6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ceda:	b914      	cbnz	r4, 800cee2 <__match+0x12>
 800cedc:	6003      	str	r3, [r0, #0]
 800cede:	2001      	movs	r0, #1
 800cee0:	bd30      	pop	{r4, r5, pc}
 800cee2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cee6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800ceea:	2d19      	cmp	r5, #25
 800ceec:	bf98      	it	ls
 800ceee:	3220      	addls	r2, #32
 800cef0:	42a2      	cmp	r2, r4
 800cef2:	d0f0      	beq.n	800ced6 <__match+0x6>
 800cef4:	2000      	movs	r0, #0
 800cef6:	e7f3      	b.n	800cee0 <__match+0x10>

0800cef8 <__hexnan>:
 800cef8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cefc:	680b      	ldr	r3, [r1, #0]
 800cefe:	6801      	ldr	r1, [r0, #0]
 800cf00:	115e      	asrs	r6, r3, #5
 800cf02:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800cf06:	f013 031f 	ands.w	r3, r3, #31
 800cf0a:	b087      	sub	sp, #28
 800cf0c:	bf18      	it	ne
 800cf0e:	3604      	addne	r6, #4
 800cf10:	2500      	movs	r5, #0
 800cf12:	1f37      	subs	r7, r6, #4
 800cf14:	4682      	mov	sl, r0
 800cf16:	4690      	mov	r8, r2
 800cf18:	9301      	str	r3, [sp, #4]
 800cf1a:	f846 5c04 	str.w	r5, [r6, #-4]
 800cf1e:	46b9      	mov	r9, r7
 800cf20:	463c      	mov	r4, r7
 800cf22:	9502      	str	r5, [sp, #8]
 800cf24:	46ab      	mov	fp, r5
 800cf26:	784a      	ldrb	r2, [r1, #1]
 800cf28:	1c4b      	adds	r3, r1, #1
 800cf2a:	9303      	str	r3, [sp, #12]
 800cf2c:	b342      	cbz	r2, 800cf80 <__hexnan+0x88>
 800cf2e:	4610      	mov	r0, r2
 800cf30:	9105      	str	r1, [sp, #20]
 800cf32:	9204      	str	r2, [sp, #16]
 800cf34:	f7ff fd76 	bl	800ca24 <__hexdig_fun>
 800cf38:	2800      	cmp	r0, #0
 800cf3a:	d14f      	bne.n	800cfdc <__hexnan+0xe4>
 800cf3c:	9a04      	ldr	r2, [sp, #16]
 800cf3e:	9905      	ldr	r1, [sp, #20]
 800cf40:	2a20      	cmp	r2, #32
 800cf42:	d818      	bhi.n	800cf76 <__hexnan+0x7e>
 800cf44:	9b02      	ldr	r3, [sp, #8]
 800cf46:	459b      	cmp	fp, r3
 800cf48:	dd13      	ble.n	800cf72 <__hexnan+0x7a>
 800cf4a:	454c      	cmp	r4, r9
 800cf4c:	d206      	bcs.n	800cf5c <__hexnan+0x64>
 800cf4e:	2d07      	cmp	r5, #7
 800cf50:	dc04      	bgt.n	800cf5c <__hexnan+0x64>
 800cf52:	462a      	mov	r2, r5
 800cf54:	4649      	mov	r1, r9
 800cf56:	4620      	mov	r0, r4
 800cf58:	f7ff ffa8 	bl	800ceac <L_shift>
 800cf5c:	4544      	cmp	r4, r8
 800cf5e:	d950      	bls.n	800d002 <__hexnan+0x10a>
 800cf60:	2300      	movs	r3, #0
 800cf62:	f1a4 0904 	sub.w	r9, r4, #4
 800cf66:	f844 3c04 	str.w	r3, [r4, #-4]
 800cf6a:	f8cd b008 	str.w	fp, [sp, #8]
 800cf6e:	464c      	mov	r4, r9
 800cf70:	461d      	mov	r5, r3
 800cf72:	9903      	ldr	r1, [sp, #12]
 800cf74:	e7d7      	b.n	800cf26 <__hexnan+0x2e>
 800cf76:	2a29      	cmp	r2, #41	; 0x29
 800cf78:	d155      	bne.n	800d026 <__hexnan+0x12e>
 800cf7a:	3102      	adds	r1, #2
 800cf7c:	f8ca 1000 	str.w	r1, [sl]
 800cf80:	f1bb 0f00 	cmp.w	fp, #0
 800cf84:	d04f      	beq.n	800d026 <__hexnan+0x12e>
 800cf86:	454c      	cmp	r4, r9
 800cf88:	d206      	bcs.n	800cf98 <__hexnan+0xa0>
 800cf8a:	2d07      	cmp	r5, #7
 800cf8c:	dc04      	bgt.n	800cf98 <__hexnan+0xa0>
 800cf8e:	462a      	mov	r2, r5
 800cf90:	4649      	mov	r1, r9
 800cf92:	4620      	mov	r0, r4
 800cf94:	f7ff ff8a 	bl	800ceac <L_shift>
 800cf98:	4544      	cmp	r4, r8
 800cf9a:	d934      	bls.n	800d006 <__hexnan+0x10e>
 800cf9c:	f1a8 0204 	sub.w	r2, r8, #4
 800cfa0:	4623      	mov	r3, r4
 800cfa2:	f853 1b04 	ldr.w	r1, [r3], #4
 800cfa6:	f842 1f04 	str.w	r1, [r2, #4]!
 800cfaa:	429f      	cmp	r7, r3
 800cfac:	d2f9      	bcs.n	800cfa2 <__hexnan+0xaa>
 800cfae:	1b3b      	subs	r3, r7, r4
 800cfb0:	f023 0303 	bic.w	r3, r3, #3
 800cfb4:	3304      	adds	r3, #4
 800cfb6:	3e03      	subs	r6, #3
 800cfb8:	3401      	adds	r4, #1
 800cfba:	42a6      	cmp	r6, r4
 800cfbc:	bf38      	it	cc
 800cfbe:	2304      	movcc	r3, #4
 800cfc0:	4443      	add	r3, r8
 800cfc2:	2200      	movs	r2, #0
 800cfc4:	f843 2b04 	str.w	r2, [r3], #4
 800cfc8:	429f      	cmp	r7, r3
 800cfca:	d2fb      	bcs.n	800cfc4 <__hexnan+0xcc>
 800cfcc:	683b      	ldr	r3, [r7, #0]
 800cfce:	b91b      	cbnz	r3, 800cfd8 <__hexnan+0xe0>
 800cfd0:	4547      	cmp	r7, r8
 800cfd2:	d126      	bne.n	800d022 <__hexnan+0x12a>
 800cfd4:	2301      	movs	r3, #1
 800cfd6:	603b      	str	r3, [r7, #0]
 800cfd8:	2005      	movs	r0, #5
 800cfda:	e025      	b.n	800d028 <__hexnan+0x130>
 800cfdc:	3501      	adds	r5, #1
 800cfde:	2d08      	cmp	r5, #8
 800cfe0:	f10b 0b01 	add.w	fp, fp, #1
 800cfe4:	dd06      	ble.n	800cff4 <__hexnan+0xfc>
 800cfe6:	4544      	cmp	r4, r8
 800cfe8:	d9c3      	bls.n	800cf72 <__hexnan+0x7a>
 800cfea:	2300      	movs	r3, #0
 800cfec:	f844 3c04 	str.w	r3, [r4, #-4]
 800cff0:	2501      	movs	r5, #1
 800cff2:	3c04      	subs	r4, #4
 800cff4:	6822      	ldr	r2, [r4, #0]
 800cff6:	f000 000f 	and.w	r0, r0, #15
 800cffa:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800cffe:	6020      	str	r0, [r4, #0]
 800d000:	e7b7      	b.n	800cf72 <__hexnan+0x7a>
 800d002:	2508      	movs	r5, #8
 800d004:	e7b5      	b.n	800cf72 <__hexnan+0x7a>
 800d006:	9b01      	ldr	r3, [sp, #4]
 800d008:	2b00      	cmp	r3, #0
 800d00a:	d0df      	beq.n	800cfcc <__hexnan+0xd4>
 800d00c:	f1c3 0320 	rsb	r3, r3, #32
 800d010:	f04f 32ff 	mov.w	r2, #4294967295
 800d014:	40da      	lsrs	r2, r3
 800d016:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800d01a:	4013      	ands	r3, r2
 800d01c:	f846 3c04 	str.w	r3, [r6, #-4]
 800d020:	e7d4      	b.n	800cfcc <__hexnan+0xd4>
 800d022:	3f04      	subs	r7, #4
 800d024:	e7d2      	b.n	800cfcc <__hexnan+0xd4>
 800d026:	2004      	movs	r0, #4
 800d028:	b007      	add	sp, #28
 800d02a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d02e <__ascii_mbtowc>:
 800d02e:	b082      	sub	sp, #8
 800d030:	b901      	cbnz	r1, 800d034 <__ascii_mbtowc+0x6>
 800d032:	a901      	add	r1, sp, #4
 800d034:	b142      	cbz	r2, 800d048 <__ascii_mbtowc+0x1a>
 800d036:	b14b      	cbz	r3, 800d04c <__ascii_mbtowc+0x1e>
 800d038:	7813      	ldrb	r3, [r2, #0]
 800d03a:	600b      	str	r3, [r1, #0]
 800d03c:	7812      	ldrb	r2, [r2, #0]
 800d03e:	1e10      	subs	r0, r2, #0
 800d040:	bf18      	it	ne
 800d042:	2001      	movne	r0, #1
 800d044:	b002      	add	sp, #8
 800d046:	4770      	bx	lr
 800d048:	4610      	mov	r0, r2
 800d04a:	e7fb      	b.n	800d044 <__ascii_mbtowc+0x16>
 800d04c:	f06f 0001 	mvn.w	r0, #1
 800d050:	e7f8      	b.n	800d044 <__ascii_mbtowc+0x16>

0800d052 <_realloc_r>:
 800d052:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d056:	4680      	mov	r8, r0
 800d058:	4614      	mov	r4, r2
 800d05a:	460e      	mov	r6, r1
 800d05c:	b921      	cbnz	r1, 800d068 <_realloc_r+0x16>
 800d05e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d062:	4611      	mov	r1, r2
 800d064:	f7fd be2e 	b.w	800acc4 <_malloc_r>
 800d068:	b92a      	cbnz	r2, 800d076 <_realloc_r+0x24>
 800d06a:	f7fd fdb7 	bl	800abdc <_free_r>
 800d06e:	4625      	mov	r5, r4
 800d070:	4628      	mov	r0, r5
 800d072:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d076:	f000 f842 	bl	800d0fe <_malloc_usable_size_r>
 800d07a:	4284      	cmp	r4, r0
 800d07c:	4607      	mov	r7, r0
 800d07e:	d802      	bhi.n	800d086 <_realloc_r+0x34>
 800d080:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d084:	d812      	bhi.n	800d0ac <_realloc_r+0x5a>
 800d086:	4621      	mov	r1, r4
 800d088:	4640      	mov	r0, r8
 800d08a:	f7fd fe1b 	bl	800acc4 <_malloc_r>
 800d08e:	4605      	mov	r5, r0
 800d090:	2800      	cmp	r0, #0
 800d092:	d0ed      	beq.n	800d070 <_realloc_r+0x1e>
 800d094:	42bc      	cmp	r4, r7
 800d096:	4622      	mov	r2, r4
 800d098:	4631      	mov	r1, r6
 800d09a:	bf28      	it	cs
 800d09c:	463a      	movcs	r2, r7
 800d09e:	f7ff fc23 	bl	800c8e8 <memcpy>
 800d0a2:	4631      	mov	r1, r6
 800d0a4:	4640      	mov	r0, r8
 800d0a6:	f7fd fd99 	bl	800abdc <_free_r>
 800d0aa:	e7e1      	b.n	800d070 <_realloc_r+0x1e>
 800d0ac:	4635      	mov	r5, r6
 800d0ae:	e7df      	b.n	800d070 <_realloc_r+0x1e>

0800d0b0 <__ascii_wctomb>:
 800d0b0:	b149      	cbz	r1, 800d0c6 <__ascii_wctomb+0x16>
 800d0b2:	2aff      	cmp	r2, #255	; 0xff
 800d0b4:	bf85      	ittet	hi
 800d0b6:	238a      	movhi	r3, #138	; 0x8a
 800d0b8:	6003      	strhi	r3, [r0, #0]
 800d0ba:	700a      	strbls	r2, [r1, #0]
 800d0bc:	f04f 30ff 	movhi.w	r0, #4294967295
 800d0c0:	bf98      	it	ls
 800d0c2:	2001      	movls	r0, #1
 800d0c4:	4770      	bx	lr
 800d0c6:	4608      	mov	r0, r1
 800d0c8:	4770      	bx	lr
	...

0800d0cc <fiprintf>:
 800d0cc:	b40e      	push	{r1, r2, r3}
 800d0ce:	b503      	push	{r0, r1, lr}
 800d0d0:	4601      	mov	r1, r0
 800d0d2:	ab03      	add	r3, sp, #12
 800d0d4:	4805      	ldr	r0, [pc, #20]	; (800d0ec <fiprintf+0x20>)
 800d0d6:	f853 2b04 	ldr.w	r2, [r3], #4
 800d0da:	6800      	ldr	r0, [r0, #0]
 800d0dc:	9301      	str	r3, [sp, #4]
 800d0de:	f000 f83f 	bl	800d160 <_vfiprintf_r>
 800d0e2:	b002      	add	sp, #8
 800d0e4:	f85d eb04 	ldr.w	lr, [sp], #4
 800d0e8:	b003      	add	sp, #12
 800d0ea:	4770      	bx	lr
 800d0ec:	200000b4 	.word	0x200000b4

0800d0f0 <abort>:
 800d0f0:	b508      	push	{r3, lr}
 800d0f2:	2006      	movs	r0, #6
 800d0f4:	f000 fa0c 	bl	800d510 <raise>
 800d0f8:	2001      	movs	r0, #1
 800d0fa:	f7f4 ffe5 	bl	80020c8 <_exit>

0800d0fe <_malloc_usable_size_r>:
 800d0fe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d102:	1f18      	subs	r0, r3, #4
 800d104:	2b00      	cmp	r3, #0
 800d106:	bfbc      	itt	lt
 800d108:	580b      	ldrlt	r3, [r1, r0]
 800d10a:	18c0      	addlt	r0, r0, r3
 800d10c:	4770      	bx	lr

0800d10e <__sfputc_r>:
 800d10e:	6893      	ldr	r3, [r2, #8]
 800d110:	3b01      	subs	r3, #1
 800d112:	2b00      	cmp	r3, #0
 800d114:	b410      	push	{r4}
 800d116:	6093      	str	r3, [r2, #8]
 800d118:	da08      	bge.n	800d12c <__sfputc_r+0x1e>
 800d11a:	6994      	ldr	r4, [r2, #24]
 800d11c:	42a3      	cmp	r3, r4
 800d11e:	db01      	blt.n	800d124 <__sfputc_r+0x16>
 800d120:	290a      	cmp	r1, #10
 800d122:	d103      	bne.n	800d12c <__sfputc_r+0x1e>
 800d124:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d128:	f000 b934 	b.w	800d394 <__swbuf_r>
 800d12c:	6813      	ldr	r3, [r2, #0]
 800d12e:	1c58      	adds	r0, r3, #1
 800d130:	6010      	str	r0, [r2, #0]
 800d132:	7019      	strb	r1, [r3, #0]
 800d134:	4608      	mov	r0, r1
 800d136:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d13a:	4770      	bx	lr

0800d13c <__sfputs_r>:
 800d13c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d13e:	4606      	mov	r6, r0
 800d140:	460f      	mov	r7, r1
 800d142:	4614      	mov	r4, r2
 800d144:	18d5      	adds	r5, r2, r3
 800d146:	42ac      	cmp	r4, r5
 800d148:	d101      	bne.n	800d14e <__sfputs_r+0x12>
 800d14a:	2000      	movs	r0, #0
 800d14c:	e007      	b.n	800d15e <__sfputs_r+0x22>
 800d14e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d152:	463a      	mov	r2, r7
 800d154:	4630      	mov	r0, r6
 800d156:	f7ff ffda 	bl	800d10e <__sfputc_r>
 800d15a:	1c43      	adds	r3, r0, #1
 800d15c:	d1f3      	bne.n	800d146 <__sfputs_r+0xa>
 800d15e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d160 <_vfiprintf_r>:
 800d160:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d164:	460d      	mov	r5, r1
 800d166:	b09d      	sub	sp, #116	; 0x74
 800d168:	4614      	mov	r4, r2
 800d16a:	4698      	mov	r8, r3
 800d16c:	4606      	mov	r6, r0
 800d16e:	b118      	cbz	r0, 800d178 <_vfiprintf_r+0x18>
 800d170:	6a03      	ldr	r3, [r0, #32]
 800d172:	b90b      	cbnz	r3, 800d178 <_vfiprintf_r+0x18>
 800d174:	f7fc fd66 	bl	8009c44 <__sinit>
 800d178:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d17a:	07d9      	lsls	r1, r3, #31
 800d17c:	d405      	bmi.n	800d18a <_vfiprintf_r+0x2a>
 800d17e:	89ab      	ldrh	r3, [r5, #12]
 800d180:	059a      	lsls	r2, r3, #22
 800d182:	d402      	bmi.n	800d18a <_vfiprintf_r+0x2a>
 800d184:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d186:	f7fc fea7 	bl	8009ed8 <__retarget_lock_acquire_recursive>
 800d18a:	89ab      	ldrh	r3, [r5, #12]
 800d18c:	071b      	lsls	r3, r3, #28
 800d18e:	d501      	bpl.n	800d194 <_vfiprintf_r+0x34>
 800d190:	692b      	ldr	r3, [r5, #16]
 800d192:	b99b      	cbnz	r3, 800d1bc <_vfiprintf_r+0x5c>
 800d194:	4629      	mov	r1, r5
 800d196:	4630      	mov	r0, r6
 800d198:	f000 f93a 	bl	800d410 <__swsetup_r>
 800d19c:	b170      	cbz	r0, 800d1bc <_vfiprintf_r+0x5c>
 800d19e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d1a0:	07dc      	lsls	r4, r3, #31
 800d1a2:	d504      	bpl.n	800d1ae <_vfiprintf_r+0x4e>
 800d1a4:	f04f 30ff 	mov.w	r0, #4294967295
 800d1a8:	b01d      	add	sp, #116	; 0x74
 800d1aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d1ae:	89ab      	ldrh	r3, [r5, #12]
 800d1b0:	0598      	lsls	r0, r3, #22
 800d1b2:	d4f7      	bmi.n	800d1a4 <_vfiprintf_r+0x44>
 800d1b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d1b6:	f7fc fe90 	bl	8009eda <__retarget_lock_release_recursive>
 800d1ba:	e7f3      	b.n	800d1a4 <_vfiprintf_r+0x44>
 800d1bc:	2300      	movs	r3, #0
 800d1be:	9309      	str	r3, [sp, #36]	; 0x24
 800d1c0:	2320      	movs	r3, #32
 800d1c2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d1c6:	f8cd 800c 	str.w	r8, [sp, #12]
 800d1ca:	2330      	movs	r3, #48	; 0x30
 800d1cc:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800d380 <_vfiprintf_r+0x220>
 800d1d0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d1d4:	f04f 0901 	mov.w	r9, #1
 800d1d8:	4623      	mov	r3, r4
 800d1da:	469a      	mov	sl, r3
 800d1dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d1e0:	b10a      	cbz	r2, 800d1e6 <_vfiprintf_r+0x86>
 800d1e2:	2a25      	cmp	r2, #37	; 0x25
 800d1e4:	d1f9      	bne.n	800d1da <_vfiprintf_r+0x7a>
 800d1e6:	ebba 0b04 	subs.w	fp, sl, r4
 800d1ea:	d00b      	beq.n	800d204 <_vfiprintf_r+0xa4>
 800d1ec:	465b      	mov	r3, fp
 800d1ee:	4622      	mov	r2, r4
 800d1f0:	4629      	mov	r1, r5
 800d1f2:	4630      	mov	r0, r6
 800d1f4:	f7ff ffa2 	bl	800d13c <__sfputs_r>
 800d1f8:	3001      	adds	r0, #1
 800d1fa:	f000 80a9 	beq.w	800d350 <_vfiprintf_r+0x1f0>
 800d1fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d200:	445a      	add	r2, fp
 800d202:	9209      	str	r2, [sp, #36]	; 0x24
 800d204:	f89a 3000 	ldrb.w	r3, [sl]
 800d208:	2b00      	cmp	r3, #0
 800d20a:	f000 80a1 	beq.w	800d350 <_vfiprintf_r+0x1f0>
 800d20e:	2300      	movs	r3, #0
 800d210:	f04f 32ff 	mov.w	r2, #4294967295
 800d214:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d218:	f10a 0a01 	add.w	sl, sl, #1
 800d21c:	9304      	str	r3, [sp, #16]
 800d21e:	9307      	str	r3, [sp, #28]
 800d220:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d224:	931a      	str	r3, [sp, #104]	; 0x68
 800d226:	4654      	mov	r4, sl
 800d228:	2205      	movs	r2, #5
 800d22a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d22e:	4854      	ldr	r0, [pc, #336]	; (800d380 <_vfiprintf_r+0x220>)
 800d230:	f7f2 ffce 	bl	80001d0 <memchr>
 800d234:	9a04      	ldr	r2, [sp, #16]
 800d236:	b9d8      	cbnz	r0, 800d270 <_vfiprintf_r+0x110>
 800d238:	06d1      	lsls	r1, r2, #27
 800d23a:	bf44      	itt	mi
 800d23c:	2320      	movmi	r3, #32
 800d23e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d242:	0713      	lsls	r3, r2, #28
 800d244:	bf44      	itt	mi
 800d246:	232b      	movmi	r3, #43	; 0x2b
 800d248:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d24c:	f89a 3000 	ldrb.w	r3, [sl]
 800d250:	2b2a      	cmp	r3, #42	; 0x2a
 800d252:	d015      	beq.n	800d280 <_vfiprintf_r+0x120>
 800d254:	9a07      	ldr	r2, [sp, #28]
 800d256:	4654      	mov	r4, sl
 800d258:	2000      	movs	r0, #0
 800d25a:	f04f 0c0a 	mov.w	ip, #10
 800d25e:	4621      	mov	r1, r4
 800d260:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d264:	3b30      	subs	r3, #48	; 0x30
 800d266:	2b09      	cmp	r3, #9
 800d268:	d94d      	bls.n	800d306 <_vfiprintf_r+0x1a6>
 800d26a:	b1b0      	cbz	r0, 800d29a <_vfiprintf_r+0x13a>
 800d26c:	9207      	str	r2, [sp, #28]
 800d26e:	e014      	b.n	800d29a <_vfiprintf_r+0x13a>
 800d270:	eba0 0308 	sub.w	r3, r0, r8
 800d274:	fa09 f303 	lsl.w	r3, r9, r3
 800d278:	4313      	orrs	r3, r2
 800d27a:	9304      	str	r3, [sp, #16]
 800d27c:	46a2      	mov	sl, r4
 800d27e:	e7d2      	b.n	800d226 <_vfiprintf_r+0xc6>
 800d280:	9b03      	ldr	r3, [sp, #12]
 800d282:	1d19      	adds	r1, r3, #4
 800d284:	681b      	ldr	r3, [r3, #0]
 800d286:	9103      	str	r1, [sp, #12]
 800d288:	2b00      	cmp	r3, #0
 800d28a:	bfbb      	ittet	lt
 800d28c:	425b      	neglt	r3, r3
 800d28e:	f042 0202 	orrlt.w	r2, r2, #2
 800d292:	9307      	strge	r3, [sp, #28]
 800d294:	9307      	strlt	r3, [sp, #28]
 800d296:	bfb8      	it	lt
 800d298:	9204      	strlt	r2, [sp, #16]
 800d29a:	7823      	ldrb	r3, [r4, #0]
 800d29c:	2b2e      	cmp	r3, #46	; 0x2e
 800d29e:	d10c      	bne.n	800d2ba <_vfiprintf_r+0x15a>
 800d2a0:	7863      	ldrb	r3, [r4, #1]
 800d2a2:	2b2a      	cmp	r3, #42	; 0x2a
 800d2a4:	d134      	bne.n	800d310 <_vfiprintf_r+0x1b0>
 800d2a6:	9b03      	ldr	r3, [sp, #12]
 800d2a8:	1d1a      	adds	r2, r3, #4
 800d2aa:	681b      	ldr	r3, [r3, #0]
 800d2ac:	9203      	str	r2, [sp, #12]
 800d2ae:	2b00      	cmp	r3, #0
 800d2b0:	bfb8      	it	lt
 800d2b2:	f04f 33ff 	movlt.w	r3, #4294967295
 800d2b6:	3402      	adds	r4, #2
 800d2b8:	9305      	str	r3, [sp, #20]
 800d2ba:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800d390 <_vfiprintf_r+0x230>
 800d2be:	7821      	ldrb	r1, [r4, #0]
 800d2c0:	2203      	movs	r2, #3
 800d2c2:	4650      	mov	r0, sl
 800d2c4:	f7f2 ff84 	bl	80001d0 <memchr>
 800d2c8:	b138      	cbz	r0, 800d2da <_vfiprintf_r+0x17a>
 800d2ca:	9b04      	ldr	r3, [sp, #16]
 800d2cc:	eba0 000a 	sub.w	r0, r0, sl
 800d2d0:	2240      	movs	r2, #64	; 0x40
 800d2d2:	4082      	lsls	r2, r0
 800d2d4:	4313      	orrs	r3, r2
 800d2d6:	3401      	adds	r4, #1
 800d2d8:	9304      	str	r3, [sp, #16]
 800d2da:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d2de:	4829      	ldr	r0, [pc, #164]	; (800d384 <_vfiprintf_r+0x224>)
 800d2e0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d2e4:	2206      	movs	r2, #6
 800d2e6:	f7f2 ff73 	bl	80001d0 <memchr>
 800d2ea:	2800      	cmp	r0, #0
 800d2ec:	d03f      	beq.n	800d36e <_vfiprintf_r+0x20e>
 800d2ee:	4b26      	ldr	r3, [pc, #152]	; (800d388 <_vfiprintf_r+0x228>)
 800d2f0:	bb1b      	cbnz	r3, 800d33a <_vfiprintf_r+0x1da>
 800d2f2:	9b03      	ldr	r3, [sp, #12]
 800d2f4:	3307      	adds	r3, #7
 800d2f6:	f023 0307 	bic.w	r3, r3, #7
 800d2fa:	3308      	adds	r3, #8
 800d2fc:	9303      	str	r3, [sp, #12]
 800d2fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d300:	443b      	add	r3, r7
 800d302:	9309      	str	r3, [sp, #36]	; 0x24
 800d304:	e768      	b.n	800d1d8 <_vfiprintf_r+0x78>
 800d306:	fb0c 3202 	mla	r2, ip, r2, r3
 800d30a:	460c      	mov	r4, r1
 800d30c:	2001      	movs	r0, #1
 800d30e:	e7a6      	b.n	800d25e <_vfiprintf_r+0xfe>
 800d310:	2300      	movs	r3, #0
 800d312:	3401      	adds	r4, #1
 800d314:	9305      	str	r3, [sp, #20]
 800d316:	4619      	mov	r1, r3
 800d318:	f04f 0c0a 	mov.w	ip, #10
 800d31c:	4620      	mov	r0, r4
 800d31e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d322:	3a30      	subs	r2, #48	; 0x30
 800d324:	2a09      	cmp	r2, #9
 800d326:	d903      	bls.n	800d330 <_vfiprintf_r+0x1d0>
 800d328:	2b00      	cmp	r3, #0
 800d32a:	d0c6      	beq.n	800d2ba <_vfiprintf_r+0x15a>
 800d32c:	9105      	str	r1, [sp, #20]
 800d32e:	e7c4      	b.n	800d2ba <_vfiprintf_r+0x15a>
 800d330:	fb0c 2101 	mla	r1, ip, r1, r2
 800d334:	4604      	mov	r4, r0
 800d336:	2301      	movs	r3, #1
 800d338:	e7f0      	b.n	800d31c <_vfiprintf_r+0x1bc>
 800d33a:	ab03      	add	r3, sp, #12
 800d33c:	9300      	str	r3, [sp, #0]
 800d33e:	462a      	mov	r2, r5
 800d340:	4b12      	ldr	r3, [pc, #72]	; (800d38c <_vfiprintf_r+0x22c>)
 800d342:	a904      	add	r1, sp, #16
 800d344:	4630      	mov	r0, r6
 800d346:	f7fb fe2d 	bl	8008fa4 <_printf_float>
 800d34a:	4607      	mov	r7, r0
 800d34c:	1c78      	adds	r0, r7, #1
 800d34e:	d1d6      	bne.n	800d2fe <_vfiprintf_r+0x19e>
 800d350:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d352:	07d9      	lsls	r1, r3, #31
 800d354:	d405      	bmi.n	800d362 <_vfiprintf_r+0x202>
 800d356:	89ab      	ldrh	r3, [r5, #12]
 800d358:	059a      	lsls	r2, r3, #22
 800d35a:	d402      	bmi.n	800d362 <_vfiprintf_r+0x202>
 800d35c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d35e:	f7fc fdbc 	bl	8009eda <__retarget_lock_release_recursive>
 800d362:	89ab      	ldrh	r3, [r5, #12]
 800d364:	065b      	lsls	r3, r3, #25
 800d366:	f53f af1d 	bmi.w	800d1a4 <_vfiprintf_r+0x44>
 800d36a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d36c:	e71c      	b.n	800d1a8 <_vfiprintf_r+0x48>
 800d36e:	ab03      	add	r3, sp, #12
 800d370:	9300      	str	r3, [sp, #0]
 800d372:	462a      	mov	r2, r5
 800d374:	4b05      	ldr	r3, [pc, #20]	; (800d38c <_vfiprintf_r+0x22c>)
 800d376:	a904      	add	r1, sp, #16
 800d378:	4630      	mov	r0, r6
 800d37a:	f7fc f8b7 	bl	80094ec <_printf_i>
 800d37e:	e7e4      	b.n	800d34a <_vfiprintf_r+0x1ea>
 800d380:	0800e641 	.word	0x0800e641
 800d384:	0800e64b 	.word	0x0800e64b
 800d388:	08008fa5 	.word	0x08008fa5
 800d38c:	0800d13d 	.word	0x0800d13d
 800d390:	0800e647 	.word	0x0800e647

0800d394 <__swbuf_r>:
 800d394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d396:	460e      	mov	r6, r1
 800d398:	4614      	mov	r4, r2
 800d39a:	4605      	mov	r5, r0
 800d39c:	b118      	cbz	r0, 800d3a6 <__swbuf_r+0x12>
 800d39e:	6a03      	ldr	r3, [r0, #32]
 800d3a0:	b90b      	cbnz	r3, 800d3a6 <__swbuf_r+0x12>
 800d3a2:	f7fc fc4f 	bl	8009c44 <__sinit>
 800d3a6:	69a3      	ldr	r3, [r4, #24]
 800d3a8:	60a3      	str	r3, [r4, #8]
 800d3aa:	89a3      	ldrh	r3, [r4, #12]
 800d3ac:	071a      	lsls	r2, r3, #28
 800d3ae:	d525      	bpl.n	800d3fc <__swbuf_r+0x68>
 800d3b0:	6923      	ldr	r3, [r4, #16]
 800d3b2:	b31b      	cbz	r3, 800d3fc <__swbuf_r+0x68>
 800d3b4:	6823      	ldr	r3, [r4, #0]
 800d3b6:	6922      	ldr	r2, [r4, #16]
 800d3b8:	1a98      	subs	r0, r3, r2
 800d3ba:	6963      	ldr	r3, [r4, #20]
 800d3bc:	b2f6      	uxtb	r6, r6
 800d3be:	4283      	cmp	r3, r0
 800d3c0:	4637      	mov	r7, r6
 800d3c2:	dc04      	bgt.n	800d3ce <__swbuf_r+0x3a>
 800d3c4:	4621      	mov	r1, r4
 800d3c6:	4628      	mov	r0, r5
 800d3c8:	f7ff fa2a 	bl	800c820 <_fflush_r>
 800d3cc:	b9e0      	cbnz	r0, 800d408 <__swbuf_r+0x74>
 800d3ce:	68a3      	ldr	r3, [r4, #8]
 800d3d0:	3b01      	subs	r3, #1
 800d3d2:	60a3      	str	r3, [r4, #8]
 800d3d4:	6823      	ldr	r3, [r4, #0]
 800d3d6:	1c5a      	adds	r2, r3, #1
 800d3d8:	6022      	str	r2, [r4, #0]
 800d3da:	701e      	strb	r6, [r3, #0]
 800d3dc:	6962      	ldr	r2, [r4, #20]
 800d3de:	1c43      	adds	r3, r0, #1
 800d3e0:	429a      	cmp	r2, r3
 800d3e2:	d004      	beq.n	800d3ee <__swbuf_r+0x5a>
 800d3e4:	89a3      	ldrh	r3, [r4, #12]
 800d3e6:	07db      	lsls	r3, r3, #31
 800d3e8:	d506      	bpl.n	800d3f8 <__swbuf_r+0x64>
 800d3ea:	2e0a      	cmp	r6, #10
 800d3ec:	d104      	bne.n	800d3f8 <__swbuf_r+0x64>
 800d3ee:	4621      	mov	r1, r4
 800d3f0:	4628      	mov	r0, r5
 800d3f2:	f7ff fa15 	bl	800c820 <_fflush_r>
 800d3f6:	b938      	cbnz	r0, 800d408 <__swbuf_r+0x74>
 800d3f8:	4638      	mov	r0, r7
 800d3fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d3fc:	4621      	mov	r1, r4
 800d3fe:	4628      	mov	r0, r5
 800d400:	f000 f806 	bl	800d410 <__swsetup_r>
 800d404:	2800      	cmp	r0, #0
 800d406:	d0d5      	beq.n	800d3b4 <__swbuf_r+0x20>
 800d408:	f04f 37ff 	mov.w	r7, #4294967295
 800d40c:	e7f4      	b.n	800d3f8 <__swbuf_r+0x64>
	...

0800d410 <__swsetup_r>:
 800d410:	b538      	push	{r3, r4, r5, lr}
 800d412:	4b2a      	ldr	r3, [pc, #168]	; (800d4bc <__swsetup_r+0xac>)
 800d414:	4605      	mov	r5, r0
 800d416:	6818      	ldr	r0, [r3, #0]
 800d418:	460c      	mov	r4, r1
 800d41a:	b118      	cbz	r0, 800d424 <__swsetup_r+0x14>
 800d41c:	6a03      	ldr	r3, [r0, #32]
 800d41e:	b90b      	cbnz	r3, 800d424 <__swsetup_r+0x14>
 800d420:	f7fc fc10 	bl	8009c44 <__sinit>
 800d424:	89a3      	ldrh	r3, [r4, #12]
 800d426:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d42a:	0718      	lsls	r0, r3, #28
 800d42c:	d422      	bmi.n	800d474 <__swsetup_r+0x64>
 800d42e:	06d9      	lsls	r1, r3, #27
 800d430:	d407      	bmi.n	800d442 <__swsetup_r+0x32>
 800d432:	2309      	movs	r3, #9
 800d434:	602b      	str	r3, [r5, #0]
 800d436:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d43a:	81a3      	strh	r3, [r4, #12]
 800d43c:	f04f 30ff 	mov.w	r0, #4294967295
 800d440:	e034      	b.n	800d4ac <__swsetup_r+0x9c>
 800d442:	0758      	lsls	r0, r3, #29
 800d444:	d512      	bpl.n	800d46c <__swsetup_r+0x5c>
 800d446:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d448:	b141      	cbz	r1, 800d45c <__swsetup_r+0x4c>
 800d44a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d44e:	4299      	cmp	r1, r3
 800d450:	d002      	beq.n	800d458 <__swsetup_r+0x48>
 800d452:	4628      	mov	r0, r5
 800d454:	f7fd fbc2 	bl	800abdc <_free_r>
 800d458:	2300      	movs	r3, #0
 800d45a:	6363      	str	r3, [r4, #52]	; 0x34
 800d45c:	89a3      	ldrh	r3, [r4, #12]
 800d45e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d462:	81a3      	strh	r3, [r4, #12]
 800d464:	2300      	movs	r3, #0
 800d466:	6063      	str	r3, [r4, #4]
 800d468:	6923      	ldr	r3, [r4, #16]
 800d46a:	6023      	str	r3, [r4, #0]
 800d46c:	89a3      	ldrh	r3, [r4, #12]
 800d46e:	f043 0308 	orr.w	r3, r3, #8
 800d472:	81a3      	strh	r3, [r4, #12]
 800d474:	6923      	ldr	r3, [r4, #16]
 800d476:	b94b      	cbnz	r3, 800d48c <__swsetup_r+0x7c>
 800d478:	89a3      	ldrh	r3, [r4, #12]
 800d47a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d47e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d482:	d003      	beq.n	800d48c <__swsetup_r+0x7c>
 800d484:	4621      	mov	r1, r4
 800d486:	4628      	mov	r0, r5
 800d488:	f000 f884 	bl	800d594 <__smakebuf_r>
 800d48c:	89a0      	ldrh	r0, [r4, #12]
 800d48e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d492:	f010 0301 	ands.w	r3, r0, #1
 800d496:	d00a      	beq.n	800d4ae <__swsetup_r+0x9e>
 800d498:	2300      	movs	r3, #0
 800d49a:	60a3      	str	r3, [r4, #8]
 800d49c:	6963      	ldr	r3, [r4, #20]
 800d49e:	425b      	negs	r3, r3
 800d4a0:	61a3      	str	r3, [r4, #24]
 800d4a2:	6923      	ldr	r3, [r4, #16]
 800d4a4:	b943      	cbnz	r3, 800d4b8 <__swsetup_r+0xa8>
 800d4a6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d4aa:	d1c4      	bne.n	800d436 <__swsetup_r+0x26>
 800d4ac:	bd38      	pop	{r3, r4, r5, pc}
 800d4ae:	0781      	lsls	r1, r0, #30
 800d4b0:	bf58      	it	pl
 800d4b2:	6963      	ldrpl	r3, [r4, #20]
 800d4b4:	60a3      	str	r3, [r4, #8]
 800d4b6:	e7f4      	b.n	800d4a2 <__swsetup_r+0x92>
 800d4b8:	2000      	movs	r0, #0
 800d4ba:	e7f7      	b.n	800d4ac <__swsetup_r+0x9c>
 800d4bc:	200000b4 	.word	0x200000b4

0800d4c0 <_raise_r>:
 800d4c0:	291f      	cmp	r1, #31
 800d4c2:	b538      	push	{r3, r4, r5, lr}
 800d4c4:	4604      	mov	r4, r0
 800d4c6:	460d      	mov	r5, r1
 800d4c8:	d904      	bls.n	800d4d4 <_raise_r+0x14>
 800d4ca:	2316      	movs	r3, #22
 800d4cc:	6003      	str	r3, [r0, #0]
 800d4ce:	f04f 30ff 	mov.w	r0, #4294967295
 800d4d2:	bd38      	pop	{r3, r4, r5, pc}
 800d4d4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800d4d6:	b112      	cbz	r2, 800d4de <_raise_r+0x1e>
 800d4d8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d4dc:	b94b      	cbnz	r3, 800d4f2 <_raise_r+0x32>
 800d4de:	4620      	mov	r0, r4
 800d4e0:	f000 f830 	bl	800d544 <_getpid_r>
 800d4e4:	462a      	mov	r2, r5
 800d4e6:	4601      	mov	r1, r0
 800d4e8:	4620      	mov	r0, r4
 800d4ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d4ee:	f000 b817 	b.w	800d520 <_kill_r>
 800d4f2:	2b01      	cmp	r3, #1
 800d4f4:	d00a      	beq.n	800d50c <_raise_r+0x4c>
 800d4f6:	1c59      	adds	r1, r3, #1
 800d4f8:	d103      	bne.n	800d502 <_raise_r+0x42>
 800d4fa:	2316      	movs	r3, #22
 800d4fc:	6003      	str	r3, [r0, #0]
 800d4fe:	2001      	movs	r0, #1
 800d500:	e7e7      	b.n	800d4d2 <_raise_r+0x12>
 800d502:	2400      	movs	r4, #0
 800d504:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d508:	4628      	mov	r0, r5
 800d50a:	4798      	blx	r3
 800d50c:	2000      	movs	r0, #0
 800d50e:	e7e0      	b.n	800d4d2 <_raise_r+0x12>

0800d510 <raise>:
 800d510:	4b02      	ldr	r3, [pc, #8]	; (800d51c <raise+0xc>)
 800d512:	4601      	mov	r1, r0
 800d514:	6818      	ldr	r0, [r3, #0]
 800d516:	f7ff bfd3 	b.w	800d4c0 <_raise_r>
 800d51a:	bf00      	nop
 800d51c:	200000b4 	.word	0x200000b4

0800d520 <_kill_r>:
 800d520:	b538      	push	{r3, r4, r5, lr}
 800d522:	4d07      	ldr	r5, [pc, #28]	; (800d540 <_kill_r+0x20>)
 800d524:	2300      	movs	r3, #0
 800d526:	4604      	mov	r4, r0
 800d528:	4608      	mov	r0, r1
 800d52a:	4611      	mov	r1, r2
 800d52c:	602b      	str	r3, [r5, #0]
 800d52e:	f7f4 fdbb 	bl	80020a8 <_kill>
 800d532:	1c43      	adds	r3, r0, #1
 800d534:	d102      	bne.n	800d53c <_kill_r+0x1c>
 800d536:	682b      	ldr	r3, [r5, #0]
 800d538:	b103      	cbz	r3, 800d53c <_kill_r+0x1c>
 800d53a:	6023      	str	r3, [r4, #0]
 800d53c:	bd38      	pop	{r3, r4, r5, pc}
 800d53e:	bf00      	nop
 800d540:	20000744 	.word	0x20000744

0800d544 <_getpid_r>:
 800d544:	f7f4 bda8 	b.w	8002098 <_getpid>

0800d548 <__swhatbuf_r>:
 800d548:	b570      	push	{r4, r5, r6, lr}
 800d54a:	460c      	mov	r4, r1
 800d54c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d550:	2900      	cmp	r1, #0
 800d552:	b096      	sub	sp, #88	; 0x58
 800d554:	4615      	mov	r5, r2
 800d556:	461e      	mov	r6, r3
 800d558:	da0d      	bge.n	800d576 <__swhatbuf_r+0x2e>
 800d55a:	89a3      	ldrh	r3, [r4, #12]
 800d55c:	f013 0f80 	tst.w	r3, #128	; 0x80
 800d560:	f04f 0100 	mov.w	r1, #0
 800d564:	bf0c      	ite	eq
 800d566:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800d56a:	2340      	movne	r3, #64	; 0x40
 800d56c:	2000      	movs	r0, #0
 800d56e:	6031      	str	r1, [r6, #0]
 800d570:	602b      	str	r3, [r5, #0]
 800d572:	b016      	add	sp, #88	; 0x58
 800d574:	bd70      	pop	{r4, r5, r6, pc}
 800d576:	466a      	mov	r2, sp
 800d578:	f000 f848 	bl	800d60c <_fstat_r>
 800d57c:	2800      	cmp	r0, #0
 800d57e:	dbec      	blt.n	800d55a <__swhatbuf_r+0x12>
 800d580:	9901      	ldr	r1, [sp, #4]
 800d582:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800d586:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800d58a:	4259      	negs	r1, r3
 800d58c:	4159      	adcs	r1, r3
 800d58e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d592:	e7eb      	b.n	800d56c <__swhatbuf_r+0x24>

0800d594 <__smakebuf_r>:
 800d594:	898b      	ldrh	r3, [r1, #12]
 800d596:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d598:	079d      	lsls	r5, r3, #30
 800d59a:	4606      	mov	r6, r0
 800d59c:	460c      	mov	r4, r1
 800d59e:	d507      	bpl.n	800d5b0 <__smakebuf_r+0x1c>
 800d5a0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d5a4:	6023      	str	r3, [r4, #0]
 800d5a6:	6123      	str	r3, [r4, #16]
 800d5a8:	2301      	movs	r3, #1
 800d5aa:	6163      	str	r3, [r4, #20]
 800d5ac:	b002      	add	sp, #8
 800d5ae:	bd70      	pop	{r4, r5, r6, pc}
 800d5b0:	ab01      	add	r3, sp, #4
 800d5b2:	466a      	mov	r2, sp
 800d5b4:	f7ff ffc8 	bl	800d548 <__swhatbuf_r>
 800d5b8:	9900      	ldr	r1, [sp, #0]
 800d5ba:	4605      	mov	r5, r0
 800d5bc:	4630      	mov	r0, r6
 800d5be:	f7fd fb81 	bl	800acc4 <_malloc_r>
 800d5c2:	b948      	cbnz	r0, 800d5d8 <__smakebuf_r+0x44>
 800d5c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d5c8:	059a      	lsls	r2, r3, #22
 800d5ca:	d4ef      	bmi.n	800d5ac <__smakebuf_r+0x18>
 800d5cc:	f023 0303 	bic.w	r3, r3, #3
 800d5d0:	f043 0302 	orr.w	r3, r3, #2
 800d5d4:	81a3      	strh	r3, [r4, #12]
 800d5d6:	e7e3      	b.n	800d5a0 <__smakebuf_r+0xc>
 800d5d8:	89a3      	ldrh	r3, [r4, #12]
 800d5da:	6020      	str	r0, [r4, #0]
 800d5dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d5e0:	81a3      	strh	r3, [r4, #12]
 800d5e2:	9b00      	ldr	r3, [sp, #0]
 800d5e4:	6163      	str	r3, [r4, #20]
 800d5e6:	9b01      	ldr	r3, [sp, #4]
 800d5e8:	6120      	str	r0, [r4, #16]
 800d5ea:	b15b      	cbz	r3, 800d604 <__smakebuf_r+0x70>
 800d5ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d5f0:	4630      	mov	r0, r6
 800d5f2:	f000 f81d 	bl	800d630 <_isatty_r>
 800d5f6:	b128      	cbz	r0, 800d604 <__smakebuf_r+0x70>
 800d5f8:	89a3      	ldrh	r3, [r4, #12]
 800d5fa:	f023 0303 	bic.w	r3, r3, #3
 800d5fe:	f043 0301 	orr.w	r3, r3, #1
 800d602:	81a3      	strh	r3, [r4, #12]
 800d604:	89a3      	ldrh	r3, [r4, #12]
 800d606:	431d      	orrs	r5, r3
 800d608:	81a5      	strh	r5, [r4, #12]
 800d60a:	e7cf      	b.n	800d5ac <__smakebuf_r+0x18>

0800d60c <_fstat_r>:
 800d60c:	b538      	push	{r3, r4, r5, lr}
 800d60e:	4d07      	ldr	r5, [pc, #28]	; (800d62c <_fstat_r+0x20>)
 800d610:	2300      	movs	r3, #0
 800d612:	4604      	mov	r4, r0
 800d614:	4608      	mov	r0, r1
 800d616:	4611      	mov	r1, r2
 800d618:	602b      	str	r3, [r5, #0]
 800d61a:	f7f4 fda4 	bl	8002166 <_fstat>
 800d61e:	1c43      	adds	r3, r0, #1
 800d620:	d102      	bne.n	800d628 <_fstat_r+0x1c>
 800d622:	682b      	ldr	r3, [r5, #0]
 800d624:	b103      	cbz	r3, 800d628 <_fstat_r+0x1c>
 800d626:	6023      	str	r3, [r4, #0]
 800d628:	bd38      	pop	{r3, r4, r5, pc}
 800d62a:	bf00      	nop
 800d62c:	20000744 	.word	0x20000744

0800d630 <_isatty_r>:
 800d630:	b538      	push	{r3, r4, r5, lr}
 800d632:	4d06      	ldr	r5, [pc, #24]	; (800d64c <_isatty_r+0x1c>)
 800d634:	2300      	movs	r3, #0
 800d636:	4604      	mov	r4, r0
 800d638:	4608      	mov	r0, r1
 800d63a:	602b      	str	r3, [r5, #0]
 800d63c:	f7f4 fda3 	bl	8002186 <_isatty>
 800d640:	1c43      	adds	r3, r0, #1
 800d642:	d102      	bne.n	800d64a <_isatty_r+0x1a>
 800d644:	682b      	ldr	r3, [r5, #0]
 800d646:	b103      	cbz	r3, 800d64a <_isatty_r+0x1a>
 800d648:	6023      	str	r3, [r4, #0]
 800d64a:	bd38      	pop	{r3, r4, r5, pc}
 800d64c:	20000744 	.word	0x20000744

0800d650 <_init>:
 800d650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d652:	bf00      	nop
 800d654:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d656:	bc08      	pop	{r3}
 800d658:	469e      	mov	lr, r3
 800d65a:	4770      	bx	lr

0800d65c <_fini>:
 800d65c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d65e:	bf00      	nop
 800d660:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d662:	bc08      	pop	{r3}
 800d664:	469e      	mov	lr, r3
 800d666:	4770      	bx	lr
