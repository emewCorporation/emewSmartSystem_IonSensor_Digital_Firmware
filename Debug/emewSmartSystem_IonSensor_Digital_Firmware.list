
emewSmartSystem_IonSensor_Digital_Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bf70  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000010c8  0800c100  0800c100  0001c100  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d1c8  0800d1c8  000201f4  2**0
                  CONTENTS
  4 .ARM          00000000  0800d1c8  0800d1c8  000201f4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800d1c8  0800d1c8  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d1c8  0800d1c8  0001d1c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d1cc  0800d1cc  0001d1cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  0800d1d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004e0  200001f4  0800d3c4  000201f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200006d4  0800d3c4  000206d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a440  00000000  00000000  00020267  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003a8d  00000000  00000000  0003a6a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001608  00000000  00000000  0003e138  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001128  00000000  00000000  0003f740  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002142f  00000000  00000000  00040868  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00020681  00000000  00000000  00061c97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b6ffe  00000000  00000000  00082318  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000705c  00000000  00000000  00139318  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007f  00000000  00000000  00140374  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f4 	.word	0x200001f4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c0e8 	.word	0x0800c0e8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001f8 	.word	0x200001f8
 80001cc:	0800c0e8 	.word	0x0800c0e8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_d2lz>:
 8000c88:	b538      	push	{r3, r4, r5, lr}
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	4604      	mov	r4, r0
 8000c90:	460d      	mov	r5, r1
 8000c92:	f7ff ff23 	bl	8000adc <__aeabi_dcmplt>
 8000c96:	b928      	cbnz	r0, 8000ca4 <__aeabi_d2lz+0x1c>
 8000c98:	4620      	mov	r0, r4
 8000c9a:	4629      	mov	r1, r5
 8000c9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ca0:	f000 b80a 	b.w	8000cb8 <__aeabi_d2ulz>
 8000ca4:	4620      	mov	r0, r4
 8000ca6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000caa:	f000 f805 	bl	8000cb8 <__aeabi_d2ulz>
 8000cae:	4240      	negs	r0, r0
 8000cb0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb4:	bd38      	pop	{r3, r4, r5, pc}
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_d2ulz>:
 8000cb8:	b5d0      	push	{r4, r6, r7, lr}
 8000cba:	4b0c      	ldr	r3, [pc, #48]	; (8000cec <__aeabi_d2ulz+0x34>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	4606      	mov	r6, r0
 8000cc0:	460f      	mov	r7, r1
 8000cc2:	f7ff fc99 	bl	80005f8 <__aeabi_dmul>
 8000cc6:	f7ff ff6f 	bl	8000ba8 <__aeabi_d2uiz>
 8000cca:	4604      	mov	r4, r0
 8000ccc:	f7ff fc1a 	bl	8000504 <__aeabi_ui2d>
 8000cd0:	4b07      	ldr	r3, [pc, #28]	; (8000cf0 <__aeabi_d2ulz+0x38>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	f7ff fc90 	bl	80005f8 <__aeabi_dmul>
 8000cd8:	4602      	mov	r2, r0
 8000cda:	460b      	mov	r3, r1
 8000cdc:	4630      	mov	r0, r6
 8000cde:	4639      	mov	r1, r7
 8000ce0:	f7ff fad2 	bl	8000288 <__aeabi_dsub>
 8000ce4:	f7ff ff60 	bl	8000ba8 <__aeabi_d2uiz>
 8000ce8:	4621      	mov	r1, r4
 8000cea:	bdd0      	pop	{r4, r6, r7, pc}
 8000cec:	3df00000 	.word	0x3df00000
 8000cf0:	41f00000 	.word	0x41f00000

08000cf4 <uint16_to_bytes>:

}


//Store uint16 value into a byte array in little endian form
void uint16_to_bytes(uint16_t InputValue, uint8_t *OutputByteArray){
 8000cf4:	b480      	push	{r7}
 8000cf6:	b083      	sub	sp, #12
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	6039      	str	r1, [r7, #0]
 8000cfe:	80fb      	strh	r3, [r7, #6]
	OutputByteArray[0] = (InputValue&0x00FF);
 8000d00:	88fb      	ldrh	r3, [r7, #6]
 8000d02:	b2da      	uxtb	r2, r3
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	701a      	strb	r2, [r3, #0]
	OutputByteArray[1] = (InputValue>>8)&0x00FF;
 8000d08:	88fb      	ldrh	r3, [r7, #6]
 8000d0a:	0a1b      	lsrs	r3, r3, #8
 8000d0c:	b29a      	uxth	r2, r3
 8000d0e:	683b      	ldr	r3, [r7, #0]
 8000d10:	3301      	adds	r3, #1
 8000d12:	b2d2      	uxtb	r2, r2
 8000d14:	701a      	strb	r2, [r3, #0]
}
 8000d16:	bf00      	nop
 8000d18:	370c      	adds	r7, #12
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr

08000d22 <bytes_to_uint16>:


//Store little endian byte array into uint16 value
uint16_t bytes_to_uint16(uint8_t *InputByteArray){
 8000d22:	b480      	push	{r7}
 8000d24:	b085      	sub	sp, #20
 8000d26:	af00      	add	r7, sp, #0
 8000d28:	6078      	str	r0, [r7, #4]

	//Parse the bytes into a "workable" value
	uint32_t Converted_Value = ((InputByteArray[1]<<8)&0xFF00) |
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	3301      	adds	r3, #1
 8000d2e:	781b      	ldrb	r3, [r3, #0]
 8000d30:	021b      	lsls	r3, r3, #8
 8000d32:	b29b      	uxth	r3, r3
								(InputByteArray[0]&0x000FF);
 8000d34:	687a      	ldr	r2, [r7, #4]
 8000d36:	7812      	ldrb	r2, [r2, #0]
	uint32_t Converted_Value = ((InputByteArray[1]<<8)&0xFF00) |
 8000d38:	4313      	orrs	r3, r2
 8000d3a:	60fb      	str	r3, [r7, #12]

	return Converted_Value;
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	b29b      	uxth	r3, r3

}
 8000d40:	4618      	mov	r0, r3
 8000d42:	3714      	adds	r7, #20
 8000d44:	46bd      	mov	sp, r7
 8000d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4a:	4770      	bx	lr

08000d4c <Read_Button1>:

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////  Pin Read Functions //////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GPIO_PinState Read_Button1(void) { return HAL_GPIO_ReadPin( GPIOA, GPIO_PIN_5 ); }
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	af00      	add	r7, sp, #0
 8000d50:	2120      	movs	r1, #32
 8000d52:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d56:	f003 faad 	bl	80042b4 <HAL_GPIO_ReadPin>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	bd80      	pop	{r7, pc}

08000d60 <Read_Button2>:
GPIO_PinState Read_Button2(void) { return HAL_GPIO_ReadPin( GPIOA, GPIO_PIN_6 ); }
 8000d60:	b580      	push	{r7, lr}
 8000d62:	af00      	add	r7, sp, #0
 8000d64:	2140      	movs	r1, #64	; 0x40
 8000d66:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d6a:	f003 faa3 	bl	80042b4 <HAL_GPIO_ReadPin>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	4618      	mov	r0, r3
 8000d72:	bd80      	pop	{r7, pc}

08000d74 <Read_Button3>:
GPIO_PinState Read_Button3(void) { return HAL_GPIO_ReadPin( GPIOA, GPIO_PIN_7 ); }
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0
 8000d78:	2180      	movs	r1, #128	; 0x80
 8000d7a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d7e:	f003 fa99 	bl	80042b4 <HAL_GPIO_ReadPin>
 8000d82:	4603      	mov	r3, r0
 8000d84:	4618      	mov	r0, r3
 8000d86:	bd80      	pop	{r7, pc}

08000d88 <Set_LED_HeartBeat>:
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////    LED Pin Control Functions ////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


void Set_LED_HeartBeat(_Bool State)  {  HAL_GPIO_WritePin( GPIOC, GPIO_PIN_13, State ); }
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b082      	sub	sp, #8
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	4603      	mov	r3, r0
 8000d90:	71fb      	strb	r3, [r7, #7]
 8000d92:	79fb      	ldrb	r3, [r7, #7]
 8000d94:	461a      	mov	r2, r3
 8000d96:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d9a:	4803      	ldr	r0, [pc, #12]	; (8000da8 <Set_LED_HeartBeat+0x20>)
 8000d9c:	f003 faa2 	bl	80042e4 <HAL_GPIO_WritePin>
 8000da0:	bf00      	nop
 8000da2:	3708      	adds	r7, #8
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	48000800 	.word	0x48000800

08000dac <Set_LED_Indication1>:
void Set_LED_Indication1(_Bool State){  HAL_GPIO_WritePin( GPIOB, GPIO_PIN_0, State );  }
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b082      	sub	sp, #8
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	4603      	mov	r3, r0
 8000db4:	71fb      	strb	r3, [r7, #7]
 8000db6:	79fb      	ldrb	r3, [r7, #7]
 8000db8:	461a      	mov	r2, r3
 8000dba:	2101      	movs	r1, #1
 8000dbc:	4803      	ldr	r0, [pc, #12]	; (8000dcc <Set_LED_Indication1+0x20>)
 8000dbe:	f003 fa91 	bl	80042e4 <HAL_GPIO_WritePin>
 8000dc2:	bf00      	nop
 8000dc4:	3708      	adds	r7, #8
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	48000400 	.word	0x48000400

08000dd0 <Set_LED_Indication2>:
void Set_LED_Indication2(_Bool State){  HAL_GPIO_WritePin( GPIOB, GPIO_PIN_1, State );  }
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b082      	sub	sp, #8
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	71fb      	strb	r3, [r7, #7]
 8000dda:	79fb      	ldrb	r3, [r7, #7]
 8000ddc:	461a      	mov	r2, r3
 8000dde:	2102      	movs	r1, #2
 8000de0:	4803      	ldr	r0, [pc, #12]	; (8000df0 <Set_LED_Indication2+0x20>)
 8000de2:	f003 fa7f 	bl	80042e4 <HAL_GPIO_WritePin>
 8000de6:	bf00      	nop
 8000de8:	3708      	adds	r7, #8
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	48000400 	.word	0x48000400

08000df4 <Set_LED_Indication3>:
void Set_LED_Indication3(_Bool State){  HAL_GPIO_WritePin( GPIOB, GPIO_PIN_2, State );  }
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b082      	sub	sp, #8
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	71fb      	strb	r3, [r7, #7]
 8000dfe:	79fb      	ldrb	r3, [r7, #7]
 8000e00:	461a      	mov	r2, r3
 8000e02:	2104      	movs	r1, #4
 8000e04:	4803      	ldr	r0, [pc, #12]	; (8000e14 <Set_LED_Indication3+0x20>)
 8000e06:	f003 fa6d 	bl	80042e4 <HAL_GPIO_WritePin>
 8000e0a:	bf00      	nop
 8000e0c:	3708      	adds	r7, #8
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	48000400 	.word	0x48000400

08000e18 <Set_LED_Indication4>:
void Set_LED_Indication4(_Bool State){  HAL_GPIO_WritePin( GPIOB, GPIO_PIN_10, State ); }
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b082      	sub	sp, #8
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	4603      	mov	r3, r0
 8000e20:	71fb      	strb	r3, [r7, #7]
 8000e22:	79fb      	ldrb	r3, [r7, #7]
 8000e24:	461a      	mov	r2, r3
 8000e26:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e2a:	4803      	ldr	r0, [pc, #12]	; (8000e38 <Set_LED_Indication4+0x20>)
 8000e2c:	f003 fa5a 	bl	80042e4 <HAL_GPIO_WritePin>
 8000e30:	bf00      	nop
 8000e32:	3708      	adds	r7, #8
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}
 8000e38:	48000400 	.word	0x48000400

08000e3c <Set_LED_Indication5>:
void Set_LED_Indication5(_Bool State){  HAL_GPIO_WritePin( GPIOB, GPIO_PIN_11, State ); }
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b082      	sub	sp, #8
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	4603      	mov	r3, r0
 8000e44:	71fb      	strb	r3, [r7, #7]
 8000e46:	79fb      	ldrb	r3, [r7, #7]
 8000e48:	461a      	mov	r2, r3
 8000e4a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e4e:	4803      	ldr	r0, [pc, #12]	; (8000e5c <Set_LED_Indication5+0x20>)
 8000e50:	f003 fa48 	bl	80042e4 <HAL_GPIO_WritePin>
 8000e54:	bf00      	nop
 8000e56:	3708      	adds	r7, #8
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	48000400 	.word	0x48000400

08000e60 <Set_LED_Metal>:
void Set_LED_Metal(_Bool State)		{  HAL_GPIO_WritePin( GPIOC, GPIO_PIN_14, State );  }
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b082      	sub	sp, #8
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	4603      	mov	r3, r0
 8000e68:	71fb      	strb	r3, [r7, #7]
 8000e6a:	79fb      	ldrb	r3, [r7, #7]
 8000e6c:	461a      	mov	r2, r3
 8000e6e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e72:	4803      	ldr	r0, [pc, #12]	; (8000e80 <Set_LED_Metal+0x20>)
 8000e74:	f003 fa36 	bl	80042e4 <HAL_GPIO_WritePin>
 8000e78:	bf00      	nop
 8000e7a:	3708      	adds	r7, #8
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	48000800 	.word	0x48000800

08000e84 <Set_LED_Turbidity>:
void Set_LED_Turbidity(_Bool State) {  HAL_GPIO_WritePin( GPIOC, GPIO_PIN_15, State );  }
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b082      	sub	sp, #8
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	71fb      	strb	r3, [r7, #7]
 8000e8e:	79fb      	ldrb	r3, [r7, #7]
 8000e90:	461a      	mov	r2, r3
 8000e92:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e96:	4803      	ldr	r0, [pc, #12]	; (8000ea4 <Set_LED_Turbidity+0x20>)
 8000e98:	f003 fa24 	bl	80042e4 <HAL_GPIO_WritePin>
 8000e9c:	bf00      	nop
 8000e9e:	3708      	adds	r7, #8
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	48000800 	.word	0x48000800

08000ea8 <Set_Flash_CS>:
void Set_Flash_CS(_Bool State)		{  HAL_GPIO_WritePin( GPIOB, GPIO_PIN_12, State );  }
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	4603      	mov	r3, r0
 8000eb0:	71fb      	strb	r3, [r7, #7]
 8000eb2:	79fb      	ldrb	r3, [r7, #7]
 8000eb4:	461a      	mov	r2, r3
 8000eb6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000eba:	4803      	ldr	r0, [pc, #12]	; (8000ec8 <Set_Flash_CS+0x20>)
 8000ebc:	f003 fa12 	bl	80042e4 <HAL_GPIO_WritePin>
 8000ec0:	bf00      	nop
 8000ec2:	3708      	adds	r7, #8
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	48000400 	.word	0x48000400

08000ecc <Set_Flash_WP>:
void Set_Flash_WP(_Bool State) 		{  HAL_GPIO_WritePin( GPIOA, GPIO_PIN_10, State );  }
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b082      	sub	sp, #8
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	71fb      	strb	r3, [r7, #7]
 8000ed6:	79fb      	ldrb	r3, [r7, #7]
 8000ed8:	461a      	mov	r2, r3
 8000eda:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ede:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ee2:	f003 f9ff 	bl	80042e4 <HAL_GPIO_WritePin>
 8000ee6:	bf00      	nop
 8000ee8:	3708      	adds	r7, #8
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}
	...

08000ef0 <Toggle_LED_HeartBeat>:


void Toggle_LED_HeartBeat(void)  {  HAL_GPIO_TogglePin( GPIOC, GPIO_PIN_13 ); }
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	af00      	add	r7, sp, #0
 8000ef4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ef8:	4802      	ldr	r0, [pc, #8]	; (8000f04 <Toggle_LED_HeartBeat+0x14>)
 8000efa:	f003 fa0b 	bl	8004314 <HAL_GPIO_TogglePin>
 8000efe:	bf00      	nop
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	48000800 	.word	0x48000800

08000f08 <DebugPrint>:
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////  CONSOLE PRINT  //////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//Print string data to console over UART
void DebugPrint(uint8_t PrintEnable, char* StringBuffer, uint16_t Size){
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b082      	sub	sp, #8
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	4603      	mov	r3, r0
 8000f10:	6039      	str	r1, [r7, #0]
 8000f12:	71fb      	strb	r3, [r7, #7]
 8000f14:	4613      	mov	r3, r2
 8000f16:	80bb      	strh	r3, [r7, #4]

	//If print condition is enabled, send data over UART
	if(PrintEnable == true){
 8000f18:	79fb      	ldrb	r3, [r7, #7]
 8000f1a:	2b01      	cmp	r3, #1
 8000f1c:	d105      	bne.n	8000f2a <DebugPrint+0x22>
		HAL_UART_Transmit(&UART_COMM, (uint8_t*)StringBuffer, Size, 100 );
 8000f1e:	88ba      	ldrh	r2, [r7, #4]
 8000f20:	2364      	movs	r3, #100	; 0x64
 8000f22:	6839      	ldr	r1, [r7, #0]
 8000f24:	4803      	ldr	r0, [pc, #12]	; (8000f34 <DebugPrint+0x2c>)
 8000f26:	f006 f875 	bl	8007014 <HAL_UART_Transmit>
	}

}
 8000f2a:	bf00      	nop
 8000f2c:	3708      	adds	r7, #8
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	200003d4 	.word	0x200003d4

08000f38 <PrimaryStateMachine>:
//////////////////////////////////////  System State Machines /////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


//Setup for transmitting CANbus
void PrimaryStateMachine(void){
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	af00      	add	r7, sp, #0

	switch(PrimaryState){
 8000f3c:	4b1c      	ldr	r3, [pc, #112]	; (8000fb0 <PrimaryStateMachine+0x78>)
 8000f3e:	781b      	ldrb	r3, [r3, #0]
 8000f40:	2b03      	cmp	r3, #3
 8000f42:	d81d      	bhi.n	8000f80 <PrimaryStateMachine+0x48>
 8000f44:	a201      	add	r2, pc, #4	; (adr r2, 8000f4c <PrimaryStateMachine+0x14>)
 8000f46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f4a:	bf00      	nop
 8000f4c:	08000fab 	.word	0x08000fab
 8000f50:	08000f5d 	.word	0x08000f5d
 8000f54:	08000f69 	.word	0x08000f69
 8000f58:	08000f75 	.word	0x08000f75
		case 0x00:
			break;

		//Pairing Routine
		case 0x01:
			ControllerPairRoutine();
 8000f5c:	f001 fca8 	bl	80028b0 <ControllerPairRoutine>
			PrimaryState=0x00;
 8000f60:	4b13      	ldr	r3, [pc, #76]	; (8000fb0 <PrimaryStateMachine+0x78>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	701a      	strb	r2, [r3, #0]
			break;
 8000f66:	e021      	b.n	8000fac <PrimaryStateMachine+0x74>

		//Connection Ping
		case 0x02:
			ControllerPingRoutine();
 8000f68:	f001 fdae 	bl	8002ac8 <ControllerPingRoutine>
			PrimaryState=0x00;
 8000f6c:	4b10      	ldr	r3, [pc, #64]	; (8000fb0 <PrimaryStateMachine+0x78>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	701a      	strb	r2, [r3, #0]
			break;
 8000f72:	e01b      	b.n	8000fac <PrimaryStateMachine+0x74>

		//Sensor read
		case 0x03:
			SensorMeasurementRoutine();
 8000f74:	f001 fe1c 	bl	8002bb0 <SensorMeasurementRoutine>
			PrimaryState=0x00;
 8000f78:	4b0d      	ldr	r3, [pc, #52]	; (8000fb0 <PrimaryStateMachine+0x78>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	701a      	strb	r2, [r3, #0]
			break;
 8000f7e:	e015      	b.n	8000fac <PrimaryStateMachine+0x74>

		//Fail case for unimplemented states
		default:
			memset(PrintBuffer, '\0', COMM_SIZE);  snprintf(PrintBuffer, COMM_SIZE-1, "\n\n\rInvalid Instruction Received - Transitioning to Standby State"  );
 8000f80:	2280      	movs	r2, #128	; 0x80
 8000f82:	2100      	movs	r1, #0
 8000f84:	480b      	ldr	r0, [pc, #44]	; (8000fb4 <PrimaryStateMachine+0x7c>)
 8000f86:	f007 fc76 	bl	8008876 <memset>
 8000f8a:	4a0b      	ldr	r2, [pc, #44]	; (8000fb8 <PrimaryStateMachine+0x80>)
 8000f8c:	217f      	movs	r1, #127	; 0x7f
 8000f8e:	4809      	ldr	r0, [pc, #36]	; (8000fb4 <PrimaryStateMachine+0x7c>)
 8000f90:	f007 fbda 	bl	8008748 <sniprintf>
			DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE);
 8000f94:	4b09      	ldr	r3, [pc, #36]	; (8000fbc <PrimaryStateMachine+0x84>)
 8000f96:	781b      	ldrb	r3, [r3, #0]
 8000f98:	2280      	movs	r2, #128	; 0x80
 8000f9a:	4906      	ldr	r1, [pc, #24]	; (8000fb4 <PrimaryStateMachine+0x7c>)
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f7ff ffb3 	bl	8000f08 <DebugPrint>
			PrimaryState=0x00;
 8000fa2:	4b03      	ldr	r3, [pc, #12]	; (8000fb0 <PrimaryStateMachine+0x78>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	701a      	strb	r2, [r3, #0]

	}  //End switch statement


}
 8000fa8:	e000      	b.n	8000fac <PrimaryStateMachine+0x74>
			break;
 8000faa:	bf00      	nop
}
 8000fac:	bf00      	nop
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	2000052a 	.word	0x2000052a
 8000fb4:	20000468 	.word	0x20000468
 8000fb8:	0800c100 	.word	0x0800c100
 8000fbc:	2000001b 	.word	0x2000001b

08000fc0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b084      	sub	sp, #16
 8000fc4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fc6:	f002 fa15 	bl	80033f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fca:	f000 f9ff 	bl	80013cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fce:	f000 fbbf 	bl	8001750 <MX_GPIO_Init>
  MX_CAN_Init();
 8000fd2:	f000 fa53 	bl	800147c <MX_CAN_Init>
  MX_I2C1_Init();
 8000fd6:	f000 fa87 	bl	80014e8 <MX_I2C1_Init>
  MX_SPI2_Init();
 8000fda:	f000 fac5 	bl	8001568 <MX_SPI2_Init>
  MX_TIM6_Init();
 8000fde:	f000 fb01 	bl	80015e4 <MX_TIM6_Init>
  MX_TIM16_Init();
 8000fe2:	f000 fb37 	bl	8001654 <MX_TIM16_Init>
  MX_TIM17_Init();
 8000fe6:	f000 fb5b 	bl	80016a0 <MX_TIM17_Init>
  MX_USART2_UART_Init();
 8000fea:	f000 fb81 	bl	80016f0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  //Prevents user code execution on firmware update
  HAL_Delay(1000);
 8000fee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ff2:	f002 fa65 	bl	80034c0 <HAL_Delay>

  //Print the opening splash message
  StartupPrint_Routine();
 8000ff6:	f001 fb95 	bl	8002724 <StartupPrint_Routine>

  memset(PrintBuffer, '\0', COMM_SIZE); snprintf(PrintBuffer, COMM_SIZE-1, "\n\n\rFirmware Version: %s", FirmwareVersion );
 8000ffa:	2280      	movs	r2, #128	; 0x80
 8000ffc:	2100      	movs	r1, #0
 8000ffe:	4891      	ldr	r0, [pc, #580]	; (8001244 <main+0x284>)
 8001000:	f007 fc39 	bl	8008876 <memset>
 8001004:	4b90      	ldr	r3, [pc, #576]	; (8001248 <main+0x288>)
 8001006:	4a91      	ldr	r2, [pc, #580]	; (800124c <main+0x28c>)
 8001008:	217f      	movs	r1, #127	; 0x7f
 800100a:	488e      	ldr	r0, [pc, #568]	; (8001244 <main+0x284>)
 800100c:	f007 fb9c 	bl	8008748 <sniprintf>
  DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE);
 8001010:	4b8f      	ldr	r3, [pc, #572]	; (8001250 <main+0x290>)
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	2280      	movs	r2, #128	; 0x80
 8001016:	498b      	ldr	r1, [pc, #556]	; (8001244 <main+0x284>)
 8001018:	4618      	mov	r0, r3
 800101a:	f7ff ff75 	bl	8000f08 <DebugPrint>
  memset(PrintBuffer, '\0', COMM_SIZE); snprintf(PrintBuffer, COMM_SIZE-1, "\n\rDevice Mode: %s", DeviceMode );
 800101e:	2280      	movs	r2, #128	; 0x80
 8001020:	2100      	movs	r1, #0
 8001022:	4888      	ldr	r0, [pc, #544]	; (8001244 <main+0x284>)
 8001024:	f007 fc27 	bl	8008876 <memset>
 8001028:	4b8a      	ldr	r3, [pc, #552]	; (8001254 <main+0x294>)
 800102a:	4a8b      	ldr	r2, [pc, #556]	; (8001258 <main+0x298>)
 800102c:	217f      	movs	r1, #127	; 0x7f
 800102e:	4885      	ldr	r0, [pc, #532]	; (8001244 <main+0x284>)
 8001030:	f007 fb8a 	bl	8008748 <sniprintf>
  DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE);
 8001034:	4b86      	ldr	r3, [pc, #536]	; (8001250 <main+0x290>)
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	2280      	movs	r2, #128	; 0x80
 800103a:	4982      	ldr	r1, [pc, #520]	; (8001244 <main+0x284>)
 800103c:	4618      	mov	r0, r3
 800103e:	f7ff ff63 	bl	8000f08 <DebugPrint>
  if(0){ ProgramEEPROM_All(); 		 }
  if(0){ ProgramEEPROM_CAN(); 		 }
  if(0){ ProgramEEPROM_SensorType(); }

  //Perform Ion Sensor activation routine
  if( SystemActivation() == true ){
 8001042:	f001 fdbd 	bl	8002bc0 <SystemActivation>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d011      	beq.n	8001070 <main+0xb0>
	  memset(PrintBuffer, '\0', COMM_SIZE); snprintf(PrintBuffer, COMM_SIZE-1, "\n\rAll subsystems successfully activated"  );
 800104c:	2280      	movs	r2, #128	; 0x80
 800104e:	2100      	movs	r1, #0
 8001050:	487c      	ldr	r0, [pc, #496]	; (8001244 <main+0x284>)
 8001052:	f007 fc10 	bl	8008876 <memset>
 8001056:	4a81      	ldr	r2, [pc, #516]	; (800125c <main+0x29c>)
 8001058:	217f      	movs	r1, #127	; 0x7f
 800105a:	487a      	ldr	r0, [pc, #488]	; (8001244 <main+0x284>)
 800105c:	f007 fb74 	bl	8008748 <sniprintf>
	  DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE);
 8001060:	4b7b      	ldr	r3, [pc, #492]	; (8001250 <main+0x290>)
 8001062:	781b      	ldrb	r3, [r3, #0]
 8001064:	2280      	movs	r2, #128	; 0x80
 8001066:	4977      	ldr	r1, [pc, #476]	; (8001244 <main+0x284>)
 8001068:	4618      	mov	r0, r3
 800106a:	f7ff ff4d 	bl	8000f08 <DebugPrint>
 800106e:	e013      	b.n	8001098 <main+0xd8>
  }else{
	  MasterActivation = false;
 8001070:	4b7b      	ldr	r3, [pc, #492]	; (8001260 <main+0x2a0>)
 8001072:	2200      	movs	r2, #0
 8001074:	701a      	strb	r2, [r3, #0]
	  memset(PrintBuffer, '\0', COMM_SIZE); snprintf(PrintBuffer, COMM_SIZE-1, "\n\rCRITICAL ERROR - Could not activate all subsystems"  );
 8001076:	2280      	movs	r2, #128	; 0x80
 8001078:	2100      	movs	r1, #0
 800107a:	4872      	ldr	r0, [pc, #456]	; (8001244 <main+0x284>)
 800107c:	f007 fbfb 	bl	8008876 <memset>
 8001080:	4a78      	ldr	r2, [pc, #480]	; (8001264 <main+0x2a4>)
 8001082:	217f      	movs	r1, #127	; 0x7f
 8001084:	486f      	ldr	r0, [pc, #444]	; (8001244 <main+0x284>)
 8001086:	f007 fb5f 	bl	8008748 <sniprintf>
	  DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE);
 800108a:	4b71      	ldr	r3, [pc, #452]	; (8001250 <main+0x290>)
 800108c:	781b      	ldrb	r3, [r3, #0]
 800108e:	2280      	movs	r2, #128	; 0x80
 8001090:	496c      	ldr	r1, [pc, #432]	; (8001244 <main+0x284>)
 8001092:	4618      	mov	r0, r3
 8001094:	f7ff ff38 	bl	8000f08 <DebugPrint>
  }

  //Print the sensor information stored in the EEPROM
  SystemSettingPrint_Routine();
 8001098:	f001 fb98 	bl	80027cc <SystemSettingPrint_Routine>

  //Init the CANBus with retrieved system information
  CANSetup(SysInfo.CAN_Address);
 800109c:	4b72      	ldr	r3, [pc, #456]	; (8001268 <main+0x2a8>)
 800109e:	891b      	ldrh	r3, [r3, #8]
 80010a0:	4618      	mov	r0, r3
 80010a2:	f001 f9c5 	bl	8002430 <CANSetup>
  uint32_t ReadRegister=0;
 80010a6:	2300      	movs	r3, #0
 80010a8:	60bb      	str	r3, [r7, #8]
  ReadRegister=CANBUS_EXT.Instance->MCR;
 80010aa:	4b70      	ldr	r3, [pc, #448]	; (800126c <main+0x2ac>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	60bb      	str	r3, [r7, #8]
  memset(PrintBuffer, '\0', COMM_SIZE); snprintf(PrintBuffer, COMM_SIZE-1, "\n\n\rCAN MCR Register: 0x%2lX", ReadRegister  );
 80010b2:	2280      	movs	r2, #128	; 0x80
 80010b4:	2100      	movs	r1, #0
 80010b6:	4863      	ldr	r0, [pc, #396]	; (8001244 <main+0x284>)
 80010b8:	f007 fbdd 	bl	8008876 <memset>
 80010bc:	68bb      	ldr	r3, [r7, #8]
 80010be:	4a6c      	ldr	r2, [pc, #432]	; (8001270 <main+0x2b0>)
 80010c0:	217f      	movs	r1, #127	; 0x7f
 80010c2:	4860      	ldr	r0, [pc, #384]	; (8001244 <main+0x284>)
 80010c4:	f007 fb40 	bl	8008748 <sniprintf>
  DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE);
 80010c8:	4b61      	ldr	r3, [pc, #388]	; (8001250 <main+0x290>)
 80010ca:	781b      	ldrb	r3, [r3, #0]
 80010cc:	2280      	movs	r2, #128	; 0x80
 80010ce:	495d      	ldr	r1, [pc, #372]	; (8001244 <main+0x284>)
 80010d0:	4618      	mov	r0, r3
 80010d2:	f7ff ff19 	bl	8000f08 <DebugPrint>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  //Print message saying that the master while loop has been successfully entered
  if(MasterActivation==true){
 80010d6:	4b62      	ldr	r3, [pc, #392]	; (8001260 <main+0x2a0>)
 80010d8:	781b      	ldrb	r3, [r3, #0]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d010      	beq.n	8001100 <main+0x140>
	  memset(PrintBuffer, '\0', COMM_SIZE); snprintf(PrintBuffer, COMM_SIZE-1, "\n\n\rMaster while loop entered" );
 80010de:	2280      	movs	r2, #128	; 0x80
 80010e0:	2100      	movs	r1, #0
 80010e2:	4858      	ldr	r0, [pc, #352]	; (8001244 <main+0x284>)
 80010e4:	f007 fbc7 	bl	8008876 <memset>
 80010e8:	4a62      	ldr	r2, [pc, #392]	; (8001274 <main+0x2b4>)
 80010ea:	217f      	movs	r1, #127	; 0x7f
 80010ec:	4855      	ldr	r0, [pc, #340]	; (8001244 <main+0x284>)
 80010ee:	f007 fb2b 	bl	8008748 <sniprintf>
	  DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE);
 80010f2:	4b57      	ldr	r3, [pc, #348]	; (8001250 <main+0x290>)
 80010f4:	781b      	ldrb	r3, [r3, #0]
 80010f6:	2280      	movs	r2, #128	; 0x80
 80010f8:	4952      	ldr	r1, [pc, #328]	; (8001244 <main+0x284>)
 80010fa:	4618      	mov	r0, r3
 80010fc:	f7ff ff04 	bl	8000f08 <DebugPrint>
  }


  uint8_t Status;
  //uint8_t ReadBuffer[6] = {0x00};
  uint8_t ctrlbool=0;
 8001100:	2300      	movs	r3, #0
 8001102:	73fb      	strb	r3, [r7, #15]

  while(MasterActivation==true){
 8001104:	e134      	b.n	8001370 <main+0x3b0>

	  //Check heart beat LED
	  if( HeartBeatFlag == true ){
 8001106:	4b5c      	ldr	r3, [pc, #368]	; (8001278 <main+0x2b8>)
 8001108:	781b      	ldrb	r3, [r3, #0]
 800110a:	2b00      	cmp	r3, #0
 800110c:	d004      	beq.n	8001118 <main+0x158>
		  HeartBeatFlag = false;
 800110e:	4b5a      	ldr	r3, [pc, #360]	; (8001278 <main+0x2b8>)
 8001110:	2200      	movs	r2, #0
 8001112:	701a      	strb	r2, [r3, #0]
		  Toggle_LED_HeartBeat();
 8001114:	f7ff feec 	bl	8000ef0 <Toggle_LED_HeartBeat>
	  }

	  //Check CAN FIFO0 for an instruction on the bus
  	  if(HAL_CAN_GetRxFifoFillLevel(&CANBUS_EXT, CAN_RX_FIFO0) != 0){		//If FIFO0 has a message, retrieve it
 8001118:	2100      	movs	r1, #0
 800111a:	4854      	ldr	r0, [pc, #336]	; (800126c <main+0x2ac>)
 800111c:	f002 fdef 	bl	8003cfe <HAL_CAN_GetRxFifoFillLevel>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d054      	beq.n	80011d0 <main+0x210>
  		  CAN_ClearFIFO(CAN_RX_FIFO1);
 8001126:	2001      	movs	r0, #1
 8001128:	f000 fe98 	bl	8001e5c <CAN_ClearFIFO>
  		  memset(CAN_ReceivedMessage, 0, 8);
 800112c:	2208      	movs	r2, #8
 800112e:	2100      	movs	r1, #0
 8001130:	4852      	ldr	r0, [pc, #328]	; (800127c <main+0x2bc>)
 8001132:	f007 fba0 	bl	8008876 <memset>
  		  ret = HAL_CAN_GetRxMessage(&CANBUS_EXT, CAN_RX_FIFO0, &pRxHeader, CAN_ReceivedMessage);
 8001136:	4b51      	ldr	r3, [pc, #324]	; (800127c <main+0x2bc>)
 8001138:	4a51      	ldr	r2, [pc, #324]	; (8001280 <main+0x2c0>)
 800113a:	2100      	movs	r1, #0
 800113c:	484b      	ldr	r0, [pc, #300]	; (800126c <main+0x2ac>)
 800113e:	f002 fcbc 	bl	8003aba <HAL_CAN_GetRxMessage>
 8001142:	4603      	mov	r3, r0
 8001144:	461a      	mov	r2, r3
 8001146:	4b4f      	ldr	r3, [pc, #316]	; (8001284 <main+0x2c4>)
 8001148:	701a      	strb	r2, [r3, #0]
  		  if( ret == HAL_OK ) {
 800114a:	4b4e      	ldr	r3, [pc, #312]	; (8001284 <main+0x2c4>)
 800114c:	781b      	ldrb	r3, [r3, #0]
 800114e:	2b00      	cmp	r3, #0
 8001150:	d12a      	bne.n	80011a8 <main+0x1e8>
  			  PrimaryState = CAN_ReceivedMessage[0];
 8001152:	4b4a      	ldr	r3, [pc, #296]	; (800127c <main+0x2bc>)
 8001154:	781a      	ldrb	r2, [r3, #0]
 8001156:	4b4c      	ldr	r3, [pc, #304]	; (8001288 <main+0x2c8>)
 8001158:	701a      	strb	r2, [r3, #0]
  			  memset(PrintBuffer, '\0', COMM_SIZE);  snprintf(PrintBuffer, COMM_SIZE-1, "\n\n\rCAN message received on FIFO0 from 0x%03lX", pRxHeader.StdId);
 800115a:	2280      	movs	r2, #128	; 0x80
 800115c:	2100      	movs	r1, #0
 800115e:	4839      	ldr	r0, [pc, #228]	; (8001244 <main+0x284>)
 8001160:	f007 fb89 	bl	8008876 <memset>
 8001164:	4b46      	ldr	r3, [pc, #280]	; (8001280 <main+0x2c0>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4a48      	ldr	r2, [pc, #288]	; (800128c <main+0x2cc>)
 800116a:	217f      	movs	r1, #127	; 0x7f
 800116c:	4835      	ldr	r0, [pc, #212]	; (8001244 <main+0x284>)
 800116e:	f007 faeb 	bl	8008748 <sniprintf>
  			  DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE);
 8001172:	4b37      	ldr	r3, [pc, #220]	; (8001250 <main+0x290>)
 8001174:	781b      	ldrb	r3, [r3, #0]
 8001176:	2280      	movs	r2, #128	; 0x80
 8001178:	4932      	ldr	r1, [pc, #200]	; (8001244 <main+0x284>)
 800117a:	4618      	mov	r0, r3
 800117c:	f7ff fec4 	bl	8000f08 <DebugPrint>
  			  memset(PrintBuffer, '\0', COMM_SIZE);  snprintf(PrintBuffer, COMM_SIZE-1, "\n\r\t- PrimaryState = %u", PrimaryState);
 8001180:	2280      	movs	r2, #128	; 0x80
 8001182:	2100      	movs	r1, #0
 8001184:	482f      	ldr	r0, [pc, #188]	; (8001244 <main+0x284>)
 8001186:	f007 fb76 	bl	8008876 <memset>
 800118a:	4b3f      	ldr	r3, [pc, #252]	; (8001288 <main+0x2c8>)
 800118c:	781b      	ldrb	r3, [r3, #0]
 800118e:	4a40      	ldr	r2, [pc, #256]	; (8001290 <main+0x2d0>)
 8001190:	217f      	movs	r1, #127	; 0x7f
 8001192:	482c      	ldr	r0, [pc, #176]	; (8001244 <main+0x284>)
 8001194:	f007 fad8 	bl	8008748 <sniprintf>
  			  DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE);
 8001198:	4b2d      	ldr	r3, [pc, #180]	; (8001250 <main+0x290>)
 800119a:	781b      	ldrb	r3, [r3, #0]
 800119c:	2280      	movs	r2, #128	; 0x80
 800119e:	4929      	ldr	r1, [pc, #164]	; (8001244 <main+0x284>)
 80011a0:	4618      	mov	r0, r3
 80011a2:	f7ff feb1 	bl	8000f08 <DebugPrint>
 80011a6:	e013      	b.n	80011d0 <main+0x210>
  		  }else{
  	  		  memset(PrintBuffer, '\0', COMM_SIZE);  snprintf(PrintBuffer, COMM_SIZE-1, "\n\rCAN message could not be received on FIFO0"  );
 80011a8:	2280      	movs	r2, #128	; 0x80
 80011aa:	2100      	movs	r1, #0
 80011ac:	4825      	ldr	r0, [pc, #148]	; (8001244 <main+0x284>)
 80011ae:	f007 fb62 	bl	8008876 <memset>
 80011b2:	4a38      	ldr	r2, [pc, #224]	; (8001294 <main+0x2d4>)
 80011b4:	217f      	movs	r1, #127	; 0x7f
 80011b6:	4823      	ldr	r0, [pc, #140]	; (8001244 <main+0x284>)
 80011b8:	f007 fac6 	bl	8008748 <sniprintf>
  	  		  DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE);
 80011bc:	4b24      	ldr	r3, [pc, #144]	; (8001250 <main+0x290>)
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	2280      	movs	r2, #128	; 0x80
 80011c2:	4920      	ldr	r1, [pc, #128]	; (8001244 <main+0x284>)
 80011c4:	4618      	mov	r0, r3
 80011c6:	f7ff fe9f 	bl	8000f08 <DebugPrint>
  	  		  PrimaryState=0x00;
 80011ca:	4b2f      	ldr	r3, [pc, #188]	; (8001288 <main+0x2c8>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	701a      	strb	r2, [r3, #0]
  		  }
  	  }

	  //Enter primary state machine
	  PrimaryStateMachine();
 80011d0:	f7ff feb2 	bl	8000f38 <PrimaryStateMachine>





	  if(SysInfo.Button1==true){
 80011d4:	4b24      	ldr	r3, [pc, #144]	; (8001268 <main+0x2a8>)
 80011d6:	781b      	ldrb	r3, [r3, #0]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d072      	beq.n	80012c2 <main+0x302>
		  SysInfo.Button1=false;
 80011dc:	4b22      	ldr	r3, [pc, #136]	; (8001268 <main+0x2a8>)
 80011de:	2200      	movs	r2, #0
 80011e0:	701a      	strb	r2, [r3, #0]
		  memset(PrintBuffer, '\0', COMM_SIZE); snprintf(PrintBuffer, COMM_SIZE-1, "\n\rButton 1 Pressed");
 80011e2:	2280      	movs	r2, #128	; 0x80
 80011e4:	2100      	movs	r1, #0
 80011e6:	4817      	ldr	r0, [pc, #92]	; (8001244 <main+0x284>)
 80011e8:	f007 fb45 	bl	8008876 <memset>
 80011ec:	4a2a      	ldr	r2, [pc, #168]	; (8001298 <main+0x2d8>)
 80011ee:	217f      	movs	r1, #127	; 0x7f
 80011f0:	4814      	ldr	r0, [pc, #80]	; (8001244 <main+0x284>)
 80011f2:	f007 faa9 	bl	8008748 <sniprintf>
		  DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE);
 80011f6:	4b16      	ldr	r3, [pc, #88]	; (8001250 <main+0x290>)
 80011f8:	781b      	ldrb	r3, [r3, #0]
 80011fa:	2280      	movs	r2, #128	; 0x80
 80011fc:	4911      	ldr	r1, [pc, #68]	; (8001244 <main+0x284>)
 80011fe:	4618      	mov	r0, r3
 8001200:	f7ff fe82 	bl	8000f08 <DebugPrint>

		  Status = MCP4726A1T_WriteAllMemory(VREF_BUFF,PD_NO,G_1X, 1600);
 8001204:	f44f 63c8 	mov.w	r3, #1600	; 0x640
 8001208:	2200      	movs	r2, #0
 800120a:	2100      	movs	r1, #0
 800120c:	2003      	movs	r0, #3
 800120e:	f001 f85b 	bl	80022c8 <MCP4726A1T_WriteAllMemory>
 8001212:	4603      	mov	r3, r0
 8001214:	71fb      	strb	r3, [r7, #7]
		  if(Status != 0x2F){
 8001216:	79fb      	ldrb	r3, [r7, #7]
 8001218:	2b2f      	cmp	r3, #47	; 0x2f
 800121a:	d041      	beq.n	80012a0 <main+0x2e0>
			  memset(PrintBuffer, '\0', COMM_SIZE); snprintf(PrintBuffer, COMM_SIZE-1, "\n\rDAC Write All Fail -> Status 0x%02X", Status );
 800121c:	2280      	movs	r2, #128	; 0x80
 800121e:	2100      	movs	r1, #0
 8001220:	4808      	ldr	r0, [pc, #32]	; (8001244 <main+0x284>)
 8001222:	f007 fb28 	bl	8008876 <memset>
 8001226:	79fb      	ldrb	r3, [r7, #7]
 8001228:	4a1c      	ldr	r2, [pc, #112]	; (800129c <main+0x2dc>)
 800122a:	217f      	movs	r1, #127	; 0x7f
 800122c:	4805      	ldr	r0, [pc, #20]	; (8001244 <main+0x284>)
 800122e:	f007 fa8b 	bl	8008748 <sniprintf>
			  DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE);
 8001232:	4b07      	ldr	r3, [pc, #28]	; (8001250 <main+0x290>)
 8001234:	781b      	ldrb	r3, [r3, #0]
 8001236:	2280      	movs	r2, #128	; 0x80
 8001238:	4902      	ldr	r1, [pc, #8]	; (8001244 <main+0x284>)
 800123a:	4618      	mov	r0, r3
 800123c:	f7ff fe64 	bl	8000f08 <DebugPrint>
 8001240:	e03f      	b.n	80012c2 <main+0x302>
 8001242:	bf00      	nop
 8001244:	20000468 	.word	0x20000468
 8001248:	20000000 	.word	0x20000000
 800124c:	0800c144 	.word	0x0800c144
 8001250:	2000001b 	.word	0x2000001b
 8001254:	20000008 	.word	0x20000008
 8001258:	0800c15c 	.word	0x0800c15c
 800125c:	0800c170 	.word	0x0800c170
 8001260:	2000001c 	.word	0x2000001c
 8001264:	0800c198 	.word	0x0800c198
 8001268:	2000045c 	.word	0x2000045c
 800126c:	20000210 	.word	0x20000210
 8001270:	0800c1d0 	.word	0x0800c1d0
 8001274:	0800c1ec 	.word	0x0800c1ec
 8001278:	20000529 	.word	0x20000529
 800127c:	20000520 	.word	0x20000520
 8001280:	20000504 	.word	0x20000504
 8001284:	20000528 	.word	0x20000528
 8001288:	2000052a 	.word	0x2000052a
 800128c:	0800c20c 	.word	0x0800c20c
 8001290:	0800c23c 	.word	0x0800c23c
 8001294:	0800c254 	.word	0x0800c254
 8001298:	0800c284 	.word	0x0800c284
 800129c:	0800c298 	.word	0x0800c298
		  }else{
			  memset(PrintBuffer, '\0', COMM_SIZE); snprintf(PrintBuffer, COMM_SIZE-1, "\n\rDAC Write All Success");
 80012a0:	2280      	movs	r2, #128	; 0x80
 80012a2:	2100      	movs	r1, #0
 80012a4:	4840      	ldr	r0, [pc, #256]	; (80013a8 <main+0x3e8>)
 80012a6:	f007 fae6 	bl	8008876 <memset>
 80012aa:	4a40      	ldr	r2, [pc, #256]	; (80013ac <main+0x3ec>)
 80012ac:	217f      	movs	r1, #127	; 0x7f
 80012ae:	483e      	ldr	r0, [pc, #248]	; (80013a8 <main+0x3e8>)
 80012b0:	f007 fa4a 	bl	8008748 <sniprintf>
			  DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE);
 80012b4:	4b3e      	ldr	r3, [pc, #248]	; (80013b0 <main+0x3f0>)
 80012b6:	781b      	ldrb	r3, [r3, #0]
 80012b8:	2280      	movs	r2, #128	; 0x80
 80012ba:	493b      	ldr	r1, [pc, #236]	; (80013a8 <main+0x3e8>)
 80012bc:	4618      	mov	r0, r3
 80012be:	f7ff fe23 	bl	8000f08 <DebugPrint>
		  }

	  }


	  if(SysInfo.Button2==true){
 80012c2:	4b3c      	ldr	r3, [pc, #240]	; (80013b4 <main+0x3f4>)
 80012c4:	785b      	ldrb	r3, [r3, #1]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d024      	beq.n	8001314 <main+0x354>
		  SysInfo.Button2=false;
 80012ca:	4b3a      	ldr	r3, [pc, #232]	; (80013b4 <main+0x3f4>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	705a      	strb	r2, [r3, #1]
		  memset(PrintBuffer, '\0', COMM_SIZE); snprintf(PrintBuffer, COMM_SIZE-1, "\n\rButton 2 Pressed");
 80012d0:	2280      	movs	r2, #128	; 0x80
 80012d2:	2100      	movs	r1, #0
 80012d4:	4834      	ldr	r0, [pc, #208]	; (80013a8 <main+0x3e8>)
 80012d6:	f007 face 	bl	8008876 <memset>
 80012da:	4a37      	ldr	r2, [pc, #220]	; (80013b8 <main+0x3f8>)
 80012dc:	217f      	movs	r1, #127	; 0x7f
 80012de:	4832      	ldr	r0, [pc, #200]	; (80013a8 <main+0x3e8>)
 80012e0:	f007 fa32 	bl	8008748 <sniprintf>
		  DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE);
 80012e4:	4b32      	ldr	r3, [pc, #200]	; (80013b0 <main+0x3f0>)
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	2280      	movs	r2, #128	; 0x80
 80012ea:	492f      	ldr	r1, [pc, #188]	; (80013a8 <main+0x3e8>)
 80012ec:	4618      	mov	r0, r3
 80012ee:	f7ff fe0b 	bl	8000f08 <DebugPrint>

		  //Print routine enter message
		  memset(PrintBuffer, '\0', COMM_SIZE);  snprintf(PrintBuffer, COMM_SIZE-1, "\n\n\rVoltage Measurement Routine Entered"  );
 80012f2:	2280      	movs	r2, #128	; 0x80
 80012f4:	2100      	movs	r1, #0
 80012f6:	482c      	ldr	r0, [pc, #176]	; (80013a8 <main+0x3e8>)
 80012f8:	f007 fabd 	bl	8008876 <memset>
 80012fc:	4a2f      	ldr	r2, [pc, #188]	; (80013bc <main+0x3fc>)
 80012fe:	217f      	movs	r1, #127	; 0x7f
 8001300:	4829      	ldr	r0, [pc, #164]	; (80013a8 <main+0x3e8>)
 8001302:	f007 fa21 	bl	8008748 <sniprintf>
		  DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE);
 8001306:	4b2a      	ldr	r3, [pc, #168]	; (80013b0 <main+0x3f0>)
 8001308:	781b      	ldrb	r3, [r3, #0]
 800130a:	2280      	movs	r2, #128	; 0x80
 800130c:	4926      	ldr	r1, [pc, #152]	; (80013a8 <main+0x3e8>)
 800130e:	4618      	mov	r0, r3
 8001310:	f7ff fdfa 	bl	8000f08 <DebugPrint>


	  }


	  if(SysInfo.Button3==true){
 8001314:	4b27      	ldr	r3, [pc, #156]	; (80013b4 <main+0x3f4>)
 8001316:	789b      	ldrb	r3, [r3, #2]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d029      	beq.n	8001370 <main+0x3b0>
		  SysInfo.Button3=false;
 800131c:	4b25      	ldr	r3, [pc, #148]	; (80013b4 <main+0x3f4>)
 800131e:	2200      	movs	r2, #0
 8001320:	709a      	strb	r2, [r3, #2]
		  memset(PrintBuffer, '\0', COMM_SIZE); snprintf(PrintBuffer, COMM_SIZE-1, "\n\rButton 3 Pressed");
 8001322:	2280      	movs	r2, #128	; 0x80
 8001324:	2100      	movs	r1, #0
 8001326:	4820      	ldr	r0, [pc, #128]	; (80013a8 <main+0x3e8>)
 8001328:	f007 faa5 	bl	8008876 <memset>
 800132c:	4a24      	ldr	r2, [pc, #144]	; (80013c0 <main+0x400>)
 800132e:	217f      	movs	r1, #127	; 0x7f
 8001330:	481d      	ldr	r0, [pc, #116]	; (80013a8 <main+0x3e8>)
 8001332:	f007 fa09 	bl	8008748 <sniprintf>
		  DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE);
 8001336:	4b1e      	ldr	r3, [pc, #120]	; (80013b0 <main+0x3f0>)
 8001338:	781b      	ldrb	r3, [r3, #0]
 800133a:	2280      	movs	r2, #128	; 0x80
 800133c:	491a      	ldr	r1, [pc, #104]	; (80013a8 <main+0x3e8>)
 800133e:	4618      	mov	r0, r3
 8001340:	f7ff fde2 	bl	8000f08 <DebugPrint>

		  Toggle_LED_HeartBeat();
 8001344:	f7ff fdd4 	bl	8000ef0 <Toggle_LED_HeartBeat>
		  if(ctrlbool==0){
 8001348:	7bfb      	ldrb	r3, [r7, #15]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d108      	bne.n	8001360 <main+0x3a0>
			 Set_LED_Metal(1);
 800134e:	2001      	movs	r0, #1
 8001350:	f7ff fd86 	bl	8000e60 <Set_LED_Metal>
			 Set_LED_Turbidity(0);
 8001354:	2000      	movs	r0, #0
 8001356:	f7ff fd95 	bl	8000e84 <Set_LED_Turbidity>
			 ctrlbool = 1;
 800135a:	2301      	movs	r3, #1
 800135c:	73fb      	strb	r3, [r7, #15]
 800135e:	e007      	b.n	8001370 <main+0x3b0>
		 }else{
			 Set_LED_Metal(0);
 8001360:	2000      	movs	r0, #0
 8001362:	f7ff fd7d 	bl	8000e60 <Set_LED_Metal>
			 Set_LED_Turbidity(1);
 8001366:	2001      	movs	r0, #1
 8001368:	f7ff fd8c 	bl	8000e84 <Set_LED_Turbidity>
			 ctrlbool = 0;
 800136c:	2300      	movs	r3, #0
 800136e:	73fb      	strb	r3, [r7, #15]
  while(MasterActivation==true){
 8001370:	4b14      	ldr	r3, [pc, #80]	; (80013c4 <main+0x404>)
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	2b00      	cmp	r3, #0
 8001376:	f47f aec6 	bne.w	8001106 <main+0x146>

    /* USER CODE BEGIN 3 */
  }

  //Print message alerting user master while loops has been left
  memset(PrintBuffer, '\0', COMM_SIZE); snprintf(PrintBuffer, COMM_SIZE-1, "\n\n\rWARNING: Ion sensor shutting down" );
 800137a:	2280      	movs	r2, #128	; 0x80
 800137c:	2100      	movs	r1, #0
 800137e:	480a      	ldr	r0, [pc, #40]	; (80013a8 <main+0x3e8>)
 8001380:	f007 fa79 	bl	8008876 <memset>
 8001384:	4a10      	ldr	r2, [pc, #64]	; (80013c8 <main+0x408>)
 8001386:	217f      	movs	r1, #127	; 0x7f
 8001388:	4807      	ldr	r0, [pc, #28]	; (80013a8 <main+0x3e8>)
 800138a:	f007 f9dd 	bl	8008748 <sniprintf>
  DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE);
 800138e:	4b08      	ldr	r3, [pc, #32]	; (80013b0 <main+0x3f0>)
 8001390:	781b      	ldrb	r3, [r3, #0]
 8001392:	2280      	movs	r2, #128	; 0x80
 8001394:	4904      	ldr	r1, [pc, #16]	; (80013a8 <main+0x3e8>)
 8001396:	4618      	mov	r0, r3
 8001398:	f7ff fdb6 	bl	8000f08 <DebugPrint>
 800139c:	2300      	movs	r3, #0


  /* USER CODE END 3 */
}
 800139e:	4618      	mov	r0, r3
 80013a0:	3710      	adds	r7, #16
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	20000468 	.word	0x20000468
 80013ac:	0800c2c0 	.word	0x0800c2c0
 80013b0:	2000001b 	.word	0x2000001b
 80013b4:	2000045c 	.word	0x2000045c
 80013b8:	0800c2d8 	.word	0x0800c2d8
 80013bc:	0800c2ec 	.word	0x0800c2ec
 80013c0:	0800c314 	.word	0x0800c314
 80013c4:	2000001c 	.word	0x2000001c
 80013c8:	0800c328 	.word	0x0800c328

080013cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b09c      	sub	sp, #112	; 0x70
 80013d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013d2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80013d6:	2228      	movs	r2, #40	; 0x28
 80013d8:	2100      	movs	r1, #0
 80013da:	4618      	mov	r0, r3
 80013dc:	f007 fa4b 	bl	8008876 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013e0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80013e4:	2200      	movs	r2, #0
 80013e6:	601a      	str	r2, [r3, #0]
 80013e8:	605a      	str	r2, [r3, #4]
 80013ea:	609a      	str	r2, [r3, #8]
 80013ec:	60da      	str	r2, [r3, #12]
 80013ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013f0:	463b      	mov	r3, r7
 80013f2:	2234      	movs	r2, #52	; 0x34
 80013f4:	2100      	movs	r1, #0
 80013f6:	4618      	mov	r0, r3
 80013f8:	f007 fa3d 	bl	8008876 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80013fc:	2302      	movs	r3, #2
 80013fe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001400:	2301      	movs	r3, #1
 8001402:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001404:	2310      	movs	r3, #16
 8001406:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001408:	2302      	movs	r3, #2
 800140a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800140c:	2300      	movs	r3, #0
 800140e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8001410:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001414:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001416:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800141a:	4618      	mov	r0, r3
 800141c:	f003 fd5a 	bl	8004ed4 <HAL_RCC_OscConfig>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d001      	beq.n	800142a <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8001426:	f000 fa47 	bl	80018b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800142a:	230f      	movs	r3, #15
 800142c:	637b      	str	r3, [r7, #52]	; 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800142e:	2302      	movs	r3, #2
 8001430:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001432:	2300      	movs	r3, #0
 8001434:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001436:	2300      	movs	r3, #0
 8001438:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800143a:	2300      	movs	r3, #0
 800143c:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800143e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001442:	2100      	movs	r1, #0
 8001444:	4618      	mov	r0, r3
 8001446:	f004 fd83 	bl	8005f50 <HAL_RCC_ClockConfig>
 800144a:	4603      	mov	r3, r0
 800144c:	2b00      	cmp	r3, #0
 800144e:	d001      	beq.n	8001454 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8001450:	f000 fa32 	bl	80018b8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 8001454:	2322      	movs	r3, #34	; 0x22
 8001456:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001458:	2300      	movs	r3, #0
 800145a:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800145c:	2300      	movs	r3, #0
 800145e:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001460:	463b      	mov	r3, r7
 8001462:	4618      	mov	r0, r3
 8001464:	f004 ffaa 	bl	80063bc <HAL_RCCEx_PeriphCLKConfig>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d001      	beq.n	8001472 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800146e:	f000 fa23 	bl	80018b8 <Error_Handler>
  }
}
 8001472:	bf00      	nop
 8001474:	3770      	adds	r7, #112	; 0x70
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
	...

0800147c <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 8001480:	4b17      	ldr	r3, [pc, #92]	; (80014e0 <MX_CAN_Init+0x64>)
 8001482:	4a18      	ldr	r2, [pc, #96]	; (80014e4 <MX_CAN_Init+0x68>)
 8001484:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 8001486:	4b16      	ldr	r3, [pc, #88]	; (80014e0 <MX_CAN_Init+0x64>)
 8001488:	2204      	movs	r2, #4
 800148a:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 800148c:	4b14      	ldr	r3, [pc, #80]	; (80014e0 <MX_CAN_Init+0x64>)
 800148e:	2200      	movs	r2, #0
 8001490:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001492:	4b13      	ldr	r3, [pc, #76]	; (80014e0 <MX_CAN_Init+0x64>)
 8001494:	2200      	movs	r2, #0
 8001496:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_13TQ;
 8001498:	4b11      	ldr	r3, [pc, #68]	; (80014e0 <MX_CAN_Init+0x64>)
 800149a:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 800149e:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 80014a0:	4b0f      	ldr	r3, [pc, #60]	; (80014e0 <MX_CAN_Init+0x64>)
 80014a2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80014a6:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80014a8:	4b0d      	ldr	r3, [pc, #52]	; (80014e0 <MX_CAN_Init+0x64>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80014ae:	4b0c      	ldr	r3, [pc, #48]	; (80014e0 <MX_CAN_Init+0x64>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80014b4:	4b0a      	ldr	r3, [pc, #40]	; (80014e0 <MX_CAN_Init+0x64>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = ENABLE;
 80014ba:	4b09      	ldr	r3, [pc, #36]	; (80014e0 <MX_CAN_Init+0x64>)
 80014bc:	2201      	movs	r2, #1
 80014be:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80014c0:	4b07      	ldr	r3, [pc, #28]	; (80014e0 <MX_CAN_Init+0x64>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80014c6:	4b06      	ldr	r3, [pc, #24]	; (80014e0 <MX_CAN_Init+0x64>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80014cc:	4804      	ldr	r0, [pc, #16]	; (80014e0 <MX_CAN_Init+0x64>)
 80014ce:	f002 f81b 	bl	8003508 <HAL_CAN_Init>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d001      	beq.n	80014dc <MX_CAN_Init+0x60>
  {
    Error_Handler();
 80014d8:	f000 f9ee 	bl	80018b8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 80014dc:	bf00      	nop
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	20000210 	.word	0x20000210
 80014e4:	40006400 	.word	0x40006400

080014e8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80014ec:	4b1b      	ldr	r3, [pc, #108]	; (800155c <MX_I2C1_Init+0x74>)
 80014ee:	4a1c      	ldr	r2, [pc, #112]	; (8001560 <MX_I2C1_Init+0x78>)
 80014f0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80014f2:	4b1a      	ldr	r3, [pc, #104]	; (800155c <MX_I2C1_Init+0x74>)
 80014f4:	4a1b      	ldr	r2, [pc, #108]	; (8001564 <MX_I2C1_Init+0x7c>)
 80014f6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80014f8:	4b18      	ldr	r3, [pc, #96]	; (800155c <MX_I2C1_Init+0x74>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014fe:	4b17      	ldr	r3, [pc, #92]	; (800155c <MX_I2C1_Init+0x74>)
 8001500:	2201      	movs	r2, #1
 8001502:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001504:	4b15      	ldr	r3, [pc, #84]	; (800155c <MX_I2C1_Init+0x74>)
 8001506:	2200      	movs	r2, #0
 8001508:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800150a:	4b14      	ldr	r3, [pc, #80]	; (800155c <MX_I2C1_Init+0x74>)
 800150c:	2200      	movs	r2, #0
 800150e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001510:	4b12      	ldr	r3, [pc, #72]	; (800155c <MX_I2C1_Init+0x74>)
 8001512:	2200      	movs	r2, #0
 8001514:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001516:	4b11      	ldr	r3, [pc, #68]	; (800155c <MX_I2C1_Init+0x74>)
 8001518:	2200      	movs	r2, #0
 800151a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800151c:	4b0f      	ldr	r3, [pc, #60]	; (800155c <MX_I2C1_Init+0x74>)
 800151e:	2200      	movs	r2, #0
 8001520:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001522:	480e      	ldr	r0, [pc, #56]	; (800155c <MX_I2C1_Init+0x74>)
 8001524:	f002 ff33 	bl	800438e <HAL_I2C_Init>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d001      	beq.n	8001532 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800152e:	f000 f9c3 	bl	80018b8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001532:	2100      	movs	r1, #0
 8001534:	4809      	ldr	r0, [pc, #36]	; (800155c <MX_I2C1_Init+0x74>)
 8001536:	f003 fc35 	bl	8004da4 <HAL_I2CEx_ConfigAnalogFilter>
 800153a:	4603      	mov	r3, r0
 800153c:	2b00      	cmp	r3, #0
 800153e:	d001      	beq.n	8001544 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001540:	f000 f9ba 	bl	80018b8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001544:	2100      	movs	r1, #0
 8001546:	4805      	ldr	r0, [pc, #20]	; (800155c <MX_I2C1_Init+0x74>)
 8001548:	f003 fc77 	bl	8004e3a <HAL_I2CEx_ConfigDigitalFilter>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d001      	beq.n	8001556 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001552:	f000 f9b1 	bl	80018b8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001556:	bf00      	nop
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	20000238 	.word	0x20000238
 8001560:	40005400 	.word	0x40005400
 8001564:	2000090e 	.word	0x2000090e

08001568 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800156c:	4b1b      	ldr	r3, [pc, #108]	; (80015dc <MX_SPI2_Init+0x74>)
 800156e:	4a1c      	ldr	r2, [pc, #112]	; (80015e0 <MX_SPI2_Init+0x78>)
 8001570:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001572:	4b1a      	ldr	r3, [pc, #104]	; (80015dc <MX_SPI2_Init+0x74>)
 8001574:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001578:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800157a:	4b18      	ldr	r3, [pc, #96]	; (80015dc <MX_SPI2_Init+0x74>)
 800157c:	2200      	movs	r2, #0
 800157e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001580:	4b16      	ldr	r3, [pc, #88]	; (80015dc <MX_SPI2_Init+0x74>)
 8001582:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001586:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001588:	4b14      	ldr	r3, [pc, #80]	; (80015dc <MX_SPI2_Init+0x74>)
 800158a:	2202      	movs	r2, #2
 800158c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 800158e:	4b13      	ldr	r3, [pc, #76]	; (80015dc <MX_SPI2_Init+0x74>)
 8001590:	2201      	movs	r2, #1
 8001592:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001594:	4b11      	ldr	r3, [pc, #68]	; (80015dc <MX_SPI2_Init+0x74>)
 8001596:	f44f 7200 	mov.w	r2, #512	; 0x200
 800159a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800159c:	4b0f      	ldr	r3, [pc, #60]	; (80015dc <MX_SPI2_Init+0x74>)
 800159e:	2210      	movs	r2, #16
 80015a0:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80015a2:	4b0e      	ldr	r3, [pc, #56]	; (80015dc <MX_SPI2_Init+0x74>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80015a8:	4b0c      	ldr	r3, [pc, #48]	; (80015dc <MX_SPI2_Init+0x74>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80015ae:	4b0b      	ldr	r3, [pc, #44]	; (80015dc <MX_SPI2_Init+0x74>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80015b4:	4b09      	ldr	r3, [pc, #36]	; (80015dc <MX_SPI2_Init+0x74>)
 80015b6:	2207      	movs	r2, #7
 80015b8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80015ba:	4b08      	ldr	r3, [pc, #32]	; (80015dc <MX_SPI2_Init+0x74>)
 80015bc:	2200      	movs	r2, #0
 80015be:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80015c0:	4b06      	ldr	r3, [pc, #24]	; (80015dc <MX_SPI2_Init+0x74>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80015c6:	4805      	ldr	r0, [pc, #20]	; (80015dc <MX_SPI2_Init+0x74>)
 80015c8:	f005 f88a 	bl	80066e0 <HAL_SPI_Init>
 80015cc:	4603      	mov	r3, r0
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d001      	beq.n	80015d6 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80015d2:	f000 f971 	bl	80018b8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80015d6:	bf00      	nop
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	2000028c 	.word	0x2000028c
 80015e0:	40003800 	.word	0x40003800

080015e4 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b084      	sub	sp, #16
 80015e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015ea:	1d3b      	adds	r3, r7, #4
 80015ec:	2200      	movs	r2, #0
 80015ee:	601a      	str	r2, [r3, #0]
 80015f0:	605a      	str	r2, [r3, #4]
 80015f2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80015f4:	4b15      	ldr	r3, [pc, #84]	; (800164c <MX_TIM6_Init+0x68>)
 80015f6:	4a16      	ldr	r2, [pc, #88]	; (8001650 <MX_TIM6_Init+0x6c>)
 80015f8:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 16000-1;
 80015fa:	4b14      	ldr	r3, [pc, #80]	; (800164c <MX_TIM6_Init+0x68>)
 80015fc:	f643 627f 	movw	r2, #15999	; 0x3e7f
 8001600:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001602:	4b12      	ldr	r3, [pc, #72]	; (800164c <MX_TIM6_Init+0x68>)
 8001604:	2200      	movs	r2, #0
 8001606:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 500-1;
 8001608:	4b10      	ldr	r3, [pc, #64]	; (800164c <MX_TIM6_Init+0x68>)
 800160a:	f240 12f3 	movw	r2, #499	; 0x1f3
 800160e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001610:	4b0e      	ldr	r3, [pc, #56]	; (800164c <MX_TIM6_Init+0x68>)
 8001612:	2200      	movs	r2, #0
 8001614:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001616:	480d      	ldr	r0, [pc, #52]	; (800164c <MX_TIM6_Init+0x68>)
 8001618:	f005 f90d 	bl	8006836 <HAL_TIM_Base_Init>
 800161c:	4603      	mov	r3, r0
 800161e:	2b00      	cmp	r3, #0
 8001620:	d001      	beq.n	8001626 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8001622:	f000 f949 	bl	80018b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001626:	2300      	movs	r3, #0
 8001628:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800162a:	2300      	movs	r3, #0
 800162c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800162e:	1d3b      	adds	r3, r7, #4
 8001630:	4619      	mov	r1, r3
 8001632:	4806      	ldr	r0, [pc, #24]	; (800164c <MX_TIM6_Init+0x68>)
 8001634:	f005 fc0e 	bl	8006e54 <HAL_TIMEx_MasterConfigSynchronization>
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0
 800163c:	d001      	beq.n	8001642 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 800163e:	f000 f93b 	bl	80018b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001642:	bf00      	nop
 8001644:	3710      	adds	r7, #16
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	200002f0 	.word	0x200002f0
 8001650:	40001000 	.word	0x40001000

08001654 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001658:	4b0f      	ldr	r3, [pc, #60]	; (8001698 <MX_TIM16_Init+0x44>)
 800165a:	4a10      	ldr	r2, [pc, #64]	; (800169c <MX_TIM16_Init+0x48>)
 800165c:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 16-1;
 800165e:	4b0e      	ldr	r3, [pc, #56]	; (8001698 <MX_TIM16_Init+0x44>)
 8001660:	220f      	movs	r2, #15
 8001662:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001664:	4b0c      	ldr	r3, [pc, #48]	; (8001698 <MX_TIM16_Init+0x44>)
 8001666:	2200      	movs	r2, #0
 8001668:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 800166a:	4b0b      	ldr	r3, [pc, #44]	; (8001698 <MX_TIM16_Init+0x44>)
 800166c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001670:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001672:	4b09      	ldr	r3, [pc, #36]	; (8001698 <MX_TIM16_Init+0x44>)
 8001674:	2200      	movs	r2, #0
 8001676:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001678:	4b07      	ldr	r3, [pc, #28]	; (8001698 <MX_TIM16_Init+0x44>)
 800167a:	2200      	movs	r2, #0
 800167c:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800167e:	4b06      	ldr	r3, [pc, #24]	; (8001698 <MX_TIM16_Init+0x44>)
 8001680:	2200      	movs	r2, #0
 8001682:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001684:	4804      	ldr	r0, [pc, #16]	; (8001698 <MX_TIM16_Init+0x44>)
 8001686:	f005 f8d6 	bl	8006836 <HAL_TIM_Base_Init>
 800168a:	4603      	mov	r3, r0
 800168c:	2b00      	cmp	r3, #0
 800168e:	d001      	beq.n	8001694 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8001690:	f000 f912 	bl	80018b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8001694:	bf00      	nop
 8001696:	bd80      	pop	{r7, pc}
 8001698:	2000033c 	.word	0x2000033c
 800169c:	40014400 	.word	0x40014400

080016a0 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 80016a4:	4b10      	ldr	r3, [pc, #64]	; (80016e8 <MX_TIM17_Init+0x48>)
 80016a6:	4a11      	ldr	r2, [pc, #68]	; (80016ec <MX_TIM17_Init+0x4c>)
 80016a8:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 16000-1;
 80016aa:	4b0f      	ldr	r3, [pc, #60]	; (80016e8 <MX_TIM17_Init+0x48>)
 80016ac:	f643 627f 	movw	r2, #15999	; 0x3e7f
 80016b0:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016b2:	4b0d      	ldr	r3, [pc, #52]	; (80016e8 <MX_TIM17_Init+0x48>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 80016b8:	4b0b      	ldr	r3, [pc, #44]	; (80016e8 <MX_TIM17_Init+0x48>)
 80016ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016be:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016c0:	4b09      	ldr	r3, [pc, #36]	; (80016e8 <MX_TIM17_Init+0x48>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 80016c6:	4b08      	ldr	r3, [pc, #32]	; (80016e8 <MX_TIM17_Init+0x48>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016cc:	4b06      	ldr	r3, [pc, #24]	; (80016e8 <MX_TIM17_Init+0x48>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80016d2:	4805      	ldr	r0, [pc, #20]	; (80016e8 <MX_TIM17_Init+0x48>)
 80016d4:	f005 f8af 	bl	8006836 <HAL_TIM_Base_Init>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d001      	beq.n	80016e2 <MX_TIM17_Init+0x42>
  {
    Error_Handler();
 80016de:	f000 f8eb 	bl	80018b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 80016e2:	bf00      	nop
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	20000388 	.word	0x20000388
 80016ec:	40014800 	.word	0x40014800

080016f0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80016f4:	4b14      	ldr	r3, [pc, #80]	; (8001748 <MX_USART2_UART_Init+0x58>)
 80016f6:	4a15      	ldr	r2, [pc, #84]	; (800174c <MX_USART2_UART_Init+0x5c>)
 80016f8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80016fa:	4b13      	ldr	r3, [pc, #76]	; (8001748 <MX_USART2_UART_Init+0x58>)
 80016fc:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8001700:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001702:	4b11      	ldr	r3, [pc, #68]	; (8001748 <MX_USART2_UART_Init+0x58>)
 8001704:	2200      	movs	r2, #0
 8001706:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001708:	4b0f      	ldr	r3, [pc, #60]	; (8001748 <MX_USART2_UART_Init+0x58>)
 800170a:	2200      	movs	r2, #0
 800170c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800170e:	4b0e      	ldr	r3, [pc, #56]	; (8001748 <MX_USART2_UART_Init+0x58>)
 8001710:	2200      	movs	r2, #0
 8001712:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001714:	4b0c      	ldr	r3, [pc, #48]	; (8001748 <MX_USART2_UART_Init+0x58>)
 8001716:	220c      	movs	r2, #12
 8001718:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800171a:	4b0b      	ldr	r3, [pc, #44]	; (8001748 <MX_USART2_UART_Init+0x58>)
 800171c:	2200      	movs	r2, #0
 800171e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001720:	4b09      	ldr	r3, [pc, #36]	; (8001748 <MX_USART2_UART_Init+0x58>)
 8001722:	2200      	movs	r2, #0
 8001724:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001726:	4b08      	ldr	r3, [pc, #32]	; (8001748 <MX_USART2_UART_Init+0x58>)
 8001728:	2200      	movs	r2, #0
 800172a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800172c:	4b06      	ldr	r3, [pc, #24]	; (8001748 <MX_USART2_UART_Init+0x58>)
 800172e:	2200      	movs	r2, #0
 8001730:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001732:	4805      	ldr	r0, [pc, #20]	; (8001748 <MX_USART2_UART_Init+0x58>)
 8001734:	f005 fc20 	bl	8006f78 <HAL_UART_Init>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d001      	beq.n	8001742 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800173e:	f000 f8bb 	bl	80018b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001742:	bf00      	nop
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	200003d4 	.word	0x200003d4
 800174c:	40004400 	.word	0x40004400

08001750 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b088      	sub	sp, #32
 8001754:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001756:	f107 030c 	add.w	r3, r7, #12
 800175a:	2200      	movs	r2, #0
 800175c:	601a      	str	r2, [r3, #0]
 800175e:	605a      	str	r2, [r3, #4]
 8001760:	609a      	str	r2, [r3, #8]
 8001762:	60da      	str	r2, [r3, #12]
 8001764:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001766:	4b51      	ldr	r3, [pc, #324]	; (80018ac <MX_GPIO_Init+0x15c>)
 8001768:	695b      	ldr	r3, [r3, #20]
 800176a:	4a50      	ldr	r2, [pc, #320]	; (80018ac <MX_GPIO_Init+0x15c>)
 800176c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001770:	6153      	str	r3, [r2, #20]
 8001772:	4b4e      	ldr	r3, [pc, #312]	; (80018ac <MX_GPIO_Init+0x15c>)
 8001774:	695b      	ldr	r3, [r3, #20]
 8001776:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800177a:	60bb      	str	r3, [r7, #8]
 800177c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800177e:	4b4b      	ldr	r3, [pc, #300]	; (80018ac <MX_GPIO_Init+0x15c>)
 8001780:	695b      	ldr	r3, [r3, #20]
 8001782:	4a4a      	ldr	r2, [pc, #296]	; (80018ac <MX_GPIO_Init+0x15c>)
 8001784:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001788:	6153      	str	r3, [r2, #20]
 800178a:	4b48      	ldr	r3, [pc, #288]	; (80018ac <MX_GPIO_Init+0x15c>)
 800178c:	695b      	ldr	r3, [r3, #20]
 800178e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001792:	607b      	str	r3, [r7, #4]
 8001794:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001796:	4b45      	ldr	r3, [pc, #276]	; (80018ac <MX_GPIO_Init+0x15c>)
 8001798:	695b      	ldr	r3, [r3, #20]
 800179a:	4a44      	ldr	r2, [pc, #272]	; (80018ac <MX_GPIO_Init+0x15c>)
 800179c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017a0:	6153      	str	r3, [r2, #20]
 80017a2:	4b42      	ldr	r3, [pc, #264]	; (80018ac <MX_GPIO_Init+0x15c>)
 80017a4:	695b      	ldr	r3, [r3, #20]
 80017a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80017aa:	603b      	str	r3, [r7, #0]
 80017ac:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, HRTBEAT_LED_Pin|SENSOR_LED_1_Pin|SENSOR_LED_2_Pin, GPIO_PIN_RESET);
 80017ae:	2200      	movs	r2, #0
 80017b0:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 80017b4:	483e      	ldr	r0, [pc, #248]	; (80018b0 <MX_GPIO_Init+0x160>)
 80017b6:	f002 fd95 	bl	80042e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, V_ADC_CS_Pin|FLASH_WP_Pin, GPIO_PIN_SET);
 80017ba:	2201      	movs	r2, #1
 80017bc:	f44f 6182 	mov.w	r1, #1040	; 0x410
 80017c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017c4:	f002 fd8e 	bl	80042e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, INDICATION_LED_1_Pin|INDICATION_LED_2_Pin|INDICATION_LED_3_Pin|INDICATION_LED_4_Pin
 80017c8:	2200      	movs	r2, #0
 80017ca:	f640 4107 	movw	r1, #3079	; 0xc07
 80017ce:	4839      	ldr	r0, [pc, #228]	; (80018b4 <MX_GPIO_Init+0x164>)
 80017d0:	f002 fd88 	bl	80042e4 <HAL_GPIO_WritePin>
                          |INDICATION_LED_5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FLASH_EN_GPIO_Port, FLASH_EN_Pin, GPIO_PIN_SET);
 80017d4:	2201      	movs	r2, #1
 80017d6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80017da:	4836      	ldr	r0, [pc, #216]	; (80018b4 <MX_GPIO_Init+0x164>)
 80017dc:	f002 fd82 	bl	80042e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : HRTBEAT_LED_Pin */
  GPIO_InitStruct.Pin = HRTBEAT_LED_Pin;
 80017e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017e4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017e6:	2301      	movs	r3, #1
 80017e8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ea:	2300      	movs	r3, #0
 80017ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ee:	2300      	movs	r3, #0
 80017f0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HRTBEAT_LED_GPIO_Port, &GPIO_InitStruct);
 80017f2:	f107 030c 	add.w	r3, r7, #12
 80017f6:	4619      	mov	r1, r3
 80017f8:	482d      	ldr	r0, [pc, #180]	; (80018b0 <MX_GPIO_Init+0x160>)
 80017fa:	f002 fbe1 	bl	8003fc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SENSOR_LED_1_Pin SENSOR_LED_2_Pin */
  GPIO_InitStruct.Pin = SENSOR_LED_1_Pin|SENSOR_LED_2_Pin;
 80017fe:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001802:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001804:	2301      	movs	r3, #1
 8001806:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001808:	2302      	movs	r3, #2
 800180a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800180c:	2300      	movs	r3, #0
 800180e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001810:	f107 030c 	add.w	r3, r7, #12
 8001814:	4619      	mov	r1, r3
 8001816:	4826      	ldr	r0, [pc, #152]	; (80018b0 <MX_GPIO_Init+0x160>)
 8001818:	f002 fbd2 	bl	8003fc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : V_ADC_CS_Pin */
  GPIO_InitStruct.Pin = V_ADC_CS_Pin;
 800181c:	2310      	movs	r3, #16
 800181e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001820:	2301      	movs	r3, #1
 8001822:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001824:	2301      	movs	r3, #1
 8001826:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001828:	2303      	movs	r3, #3
 800182a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(V_ADC_CS_GPIO_Port, &GPIO_InitStruct);
 800182c:	f107 030c 	add.w	r3, r7, #12
 8001830:	4619      	mov	r1, r3
 8001832:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001836:	f002 fbc3 	bl	8003fc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON1_EXTI5_Pin BUTTON2_EXTI6_Pin BUTTON3_EXTI7_Pin */
  GPIO_InitStruct.Pin = BUTTON1_EXTI5_Pin|BUTTON2_EXTI6_Pin|BUTTON3_EXTI7_Pin;
 800183a:	23e0      	movs	r3, #224	; 0xe0
 800183c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800183e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001842:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001844:	2300      	movs	r3, #0
 8001846:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001848:	f107 030c 	add.w	r3, r7, #12
 800184c:	4619      	mov	r1, r3
 800184e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001852:	f002 fbb5 	bl	8003fc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : INDICATION_LED_1_Pin INDICATION_LED_2_Pin INDICATION_LED_3_Pin INDICATION_LED_4_Pin
                           INDICATION_LED_5_Pin FLASH_EN_Pin */
  GPIO_InitStruct.Pin = INDICATION_LED_1_Pin|INDICATION_LED_2_Pin|INDICATION_LED_3_Pin|INDICATION_LED_4_Pin
 8001856:	f641 4307 	movw	r3, #7175	; 0x1c07
 800185a:	60fb      	str	r3, [r7, #12]
                          |INDICATION_LED_5_Pin|FLASH_EN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800185c:	2301      	movs	r3, #1
 800185e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001860:	2300      	movs	r3, #0
 8001862:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001864:	2300      	movs	r3, #0
 8001866:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001868:	f107 030c 	add.w	r3, r7, #12
 800186c:	4619      	mov	r1, r3
 800186e:	4811      	ldr	r0, [pc, #68]	; (80018b4 <MX_GPIO_Init+0x164>)
 8001870:	f002 fba6 	bl	8003fc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : FLASH_WP_Pin */
  GPIO_InitStruct.Pin = FLASH_WP_Pin;
 8001874:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001878:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800187a:	2301      	movs	r3, #1
 800187c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800187e:	2300      	movs	r3, #0
 8001880:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001882:	2300      	movs	r3, #0
 8001884:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(FLASH_WP_GPIO_Port, &GPIO_InitStruct);
 8001886:	f107 030c 	add.w	r3, r7, #12
 800188a:	4619      	mov	r1, r3
 800188c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001890:	f002 fb96 	bl	8003fc0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001894:	2200      	movs	r2, #0
 8001896:	2100      	movs	r1, #0
 8001898:	2017      	movs	r0, #23
 800189a:	f002 fb5a 	bl	8003f52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800189e:	2017      	movs	r0, #23
 80018a0:	f002 fb73 	bl	8003f8a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80018a4:	bf00      	nop
 80018a6:	3720      	adds	r7, #32
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	40021000 	.word	0x40021000
 80018b0:	48000800 	.word	0x48000800
 80018b4:	48000400 	.word	0x48000400

080018b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018b8:	b480      	push	{r7}
 80018ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018bc:	b672      	cpsid	i
}
 80018be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018c0:	e7fe      	b.n	80018c0 <Error_Handler+0x8>
	...

080018c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b083      	sub	sp, #12
 80018c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018ca:	4b0f      	ldr	r3, [pc, #60]	; (8001908 <HAL_MspInit+0x44>)
 80018cc:	699b      	ldr	r3, [r3, #24]
 80018ce:	4a0e      	ldr	r2, [pc, #56]	; (8001908 <HAL_MspInit+0x44>)
 80018d0:	f043 0301 	orr.w	r3, r3, #1
 80018d4:	6193      	str	r3, [r2, #24]
 80018d6:	4b0c      	ldr	r3, [pc, #48]	; (8001908 <HAL_MspInit+0x44>)
 80018d8:	699b      	ldr	r3, [r3, #24]
 80018da:	f003 0301 	and.w	r3, r3, #1
 80018de:	607b      	str	r3, [r7, #4]
 80018e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018e2:	4b09      	ldr	r3, [pc, #36]	; (8001908 <HAL_MspInit+0x44>)
 80018e4:	69db      	ldr	r3, [r3, #28]
 80018e6:	4a08      	ldr	r2, [pc, #32]	; (8001908 <HAL_MspInit+0x44>)
 80018e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018ec:	61d3      	str	r3, [r2, #28]
 80018ee:	4b06      	ldr	r3, [pc, #24]	; (8001908 <HAL_MspInit+0x44>)
 80018f0:	69db      	ldr	r3, [r3, #28]
 80018f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018f6:	603b      	str	r3, [r7, #0]
 80018f8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018fa:	bf00      	nop
 80018fc:	370c      	adds	r7, #12
 80018fe:	46bd      	mov	sp, r7
 8001900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001904:	4770      	bx	lr
 8001906:	bf00      	nop
 8001908:	40021000 	.word	0x40021000

0800190c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b08a      	sub	sp, #40	; 0x28
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001914:	f107 0314 	add.w	r3, r7, #20
 8001918:	2200      	movs	r2, #0
 800191a:	601a      	str	r2, [r3, #0]
 800191c:	605a      	str	r2, [r3, #4]
 800191e:	609a      	str	r2, [r3, #8]
 8001920:	60da      	str	r2, [r3, #12]
 8001922:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4a17      	ldr	r2, [pc, #92]	; (8001988 <HAL_CAN_MspInit+0x7c>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d128      	bne.n	8001980 <HAL_CAN_MspInit+0x74>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800192e:	4b17      	ldr	r3, [pc, #92]	; (800198c <HAL_CAN_MspInit+0x80>)
 8001930:	69db      	ldr	r3, [r3, #28]
 8001932:	4a16      	ldr	r2, [pc, #88]	; (800198c <HAL_CAN_MspInit+0x80>)
 8001934:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001938:	61d3      	str	r3, [r2, #28]
 800193a:	4b14      	ldr	r3, [pc, #80]	; (800198c <HAL_CAN_MspInit+0x80>)
 800193c:	69db      	ldr	r3, [r3, #28]
 800193e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001942:	613b      	str	r3, [r7, #16]
 8001944:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001946:	4b11      	ldr	r3, [pc, #68]	; (800198c <HAL_CAN_MspInit+0x80>)
 8001948:	695b      	ldr	r3, [r3, #20]
 800194a:	4a10      	ldr	r2, [pc, #64]	; (800198c <HAL_CAN_MspInit+0x80>)
 800194c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001950:	6153      	str	r3, [r2, #20]
 8001952:	4b0e      	ldr	r3, [pc, #56]	; (800198c <HAL_CAN_MspInit+0x80>)
 8001954:	695b      	ldr	r3, [r3, #20]
 8001956:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800195a:	60fb      	str	r3, [r7, #12]
 800195c:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800195e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001962:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001964:	2302      	movs	r3, #2
 8001966:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001968:	2300      	movs	r3, #0
 800196a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800196c:	2303      	movs	r3, #3
 800196e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 8001970:	2309      	movs	r3, #9
 8001972:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001974:	f107 0314 	add.w	r3, r7, #20
 8001978:	4619      	mov	r1, r3
 800197a:	4805      	ldr	r0, [pc, #20]	; (8001990 <HAL_CAN_MspInit+0x84>)
 800197c:	f002 fb20 	bl	8003fc0 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 8001980:	bf00      	nop
 8001982:	3728      	adds	r7, #40	; 0x28
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}
 8001988:	40006400 	.word	0x40006400
 800198c:	40021000 	.word	0x40021000
 8001990:	48000400 	.word	0x48000400

08001994 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b08a      	sub	sp, #40	; 0x28
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800199c:	f107 0314 	add.w	r3, r7, #20
 80019a0:	2200      	movs	r2, #0
 80019a2:	601a      	str	r2, [r3, #0]
 80019a4:	605a      	str	r2, [r3, #4]
 80019a6:	609a      	str	r2, [r3, #8]
 80019a8:	60da      	str	r2, [r3, #12]
 80019aa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a17      	ldr	r2, [pc, #92]	; (8001a10 <HAL_I2C_MspInit+0x7c>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d127      	bne.n	8001a06 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019b6:	4b17      	ldr	r3, [pc, #92]	; (8001a14 <HAL_I2C_MspInit+0x80>)
 80019b8:	695b      	ldr	r3, [r3, #20]
 80019ba:	4a16      	ldr	r2, [pc, #88]	; (8001a14 <HAL_I2C_MspInit+0x80>)
 80019bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019c0:	6153      	str	r3, [r2, #20]
 80019c2:	4b14      	ldr	r3, [pc, #80]	; (8001a14 <HAL_I2C_MspInit+0x80>)
 80019c4:	695b      	ldr	r3, [r3, #20]
 80019c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80019ca:	613b      	str	r3, [r7, #16]
 80019cc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80019ce:	23c0      	movs	r3, #192	; 0xc0
 80019d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019d2:	2312      	movs	r3, #18
 80019d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d6:	2300      	movs	r3, #0
 80019d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80019da:	2303      	movs	r3, #3
 80019dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80019de:	2304      	movs	r3, #4
 80019e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019e2:	f107 0314 	add.w	r3, r7, #20
 80019e6:	4619      	mov	r1, r3
 80019e8:	480b      	ldr	r0, [pc, #44]	; (8001a18 <HAL_I2C_MspInit+0x84>)
 80019ea:	f002 fae9 	bl	8003fc0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80019ee:	4b09      	ldr	r3, [pc, #36]	; (8001a14 <HAL_I2C_MspInit+0x80>)
 80019f0:	69db      	ldr	r3, [r3, #28]
 80019f2:	4a08      	ldr	r2, [pc, #32]	; (8001a14 <HAL_I2C_MspInit+0x80>)
 80019f4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80019f8:	61d3      	str	r3, [r2, #28]
 80019fa:	4b06      	ldr	r3, [pc, #24]	; (8001a14 <HAL_I2C_MspInit+0x80>)
 80019fc:	69db      	ldr	r3, [r3, #28]
 80019fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a02:	60fb      	str	r3, [r7, #12]
 8001a04:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001a06:	bf00      	nop
 8001a08:	3728      	adds	r7, #40	; 0x28
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	40005400 	.word	0x40005400
 8001a14:	40021000 	.word	0x40021000
 8001a18:	48000400 	.word	0x48000400

08001a1c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b08a      	sub	sp, #40	; 0x28
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a24:	f107 0314 	add.w	r3, r7, #20
 8001a28:	2200      	movs	r2, #0
 8001a2a:	601a      	str	r2, [r3, #0]
 8001a2c:	605a      	str	r2, [r3, #4]
 8001a2e:	609a      	str	r2, [r3, #8]
 8001a30:	60da      	str	r2, [r3, #12]
 8001a32:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a17      	ldr	r2, [pc, #92]	; (8001a98 <HAL_SPI_MspInit+0x7c>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d128      	bne.n	8001a90 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001a3e:	4b17      	ldr	r3, [pc, #92]	; (8001a9c <HAL_SPI_MspInit+0x80>)
 8001a40:	69db      	ldr	r3, [r3, #28]
 8001a42:	4a16      	ldr	r2, [pc, #88]	; (8001a9c <HAL_SPI_MspInit+0x80>)
 8001a44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a48:	61d3      	str	r3, [r2, #28]
 8001a4a:	4b14      	ldr	r3, [pc, #80]	; (8001a9c <HAL_SPI_MspInit+0x80>)
 8001a4c:	69db      	ldr	r3, [r3, #28]
 8001a4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a52:	613b      	str	r3, [r7, #16]
 8001a54:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a56:	4b11      	ldr	r3, [pc, #68]	; (8001a9c <HAL_SPI_MspInit+0x80>)
 8001a58:	695b      	ldr	r3, [r3, #20]
 8001a5a:	4a10      	ldr	r2, [pc, #64]	; (8001a9c <HAL_SPI_MspInit+0x80>)
 8001a5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a60:	6153      	str	r3, [r2, #20]
 8001a62:	4b0e      	ldr	r3, [pc, #56]	; (8001a9c <HAL_SPI_MspInit+0x80>)
 8001a64:	695b      	ldr	r3, [r3, #20]
 8001a66:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a6a:	60fb      	str	r3, [r7, #12]
 8001a6c:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001a6e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001a72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a74:	2302      	movs	r3, #2
 8001a76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a7c:	2303      	movs	r3, #3
 8001a7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001a80:	2305      	movs	r3, #5
 8001a82:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a84:	f107 0314 	add.w	r3, r7, #20
 8001a88:	4619      	mov	r1, r3
 8001a8a:	4805      	ldr	r0, [pc, #20]	; (8001aa0 <HAL_SPI_MspInit+0x84>)
 8001a8c:	f002 fa98 	bl	8003fc0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001a90:	bf00      	nop
 8001a92:	3728      	adds	r7, #40	; 0x28
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	40003800 	.word	0x40003800
 8001a9c:	40021000 	.word	0x40021000
 8001aa0:	48000400 	.word	0x48000400

08001aa4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b086      	sub	sp, #24
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a1f      	ldr	r2, [pc, #124]	; (8001b30 <HAL_TIM_Base_MspInit+0x8c>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d114      	bne.n	8001ae0 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001ab6:	4b1f      	ldr	r3, [pc, #124]	; (8001b34 <HAL_TIM_Base_MspInit+0x90>)
 8001ab8:	69db      	ldr	r3, [r3, #28]
 8001aba:	4a1e      	ldr	r2, [pc, #120]	; (8001b34 <HAL_TIM_Base_MspInit+0x90>)
 8001abc:	f043 0310 	orr.w	r3, r3, #16
 8001ac0:	61d3      	str	r3, [r2, #28]
 8001ac2:	4b1c      	ldr	r3, [pc, #112]	; (8001b34 <HAL_TIM_Base_MspInit+0x90>)
 8001ac4:	69db      	ldr	r3, [r3, #28]
 8001ac6:	f003 0310 	and.w	r3, r3, #16
 8001aca:	617b      	str	r3, [r7, #20]
 8001acc:	697b      	ldr	r3, [r7, #20]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001ace:	2200      	movs	r2, #0
 8001ad0:	2100      	movs	r1, #0
 8001ad2:	2036      	movs	r0, #54	; 0x36
 8001ad4:	f002 fa3d 	bl	8003f52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001ad8:	2036      	movs	r0, #54	; 0x36
 8001ada:	f002 fa56 	bl	8003f8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8001ade:	e022      	b.n	8001b26 <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM16)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a14      	ldr	r2, [pc, #80]	; (8001b38 <HAL_TIM_Base_MspInit+0x94>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d10c      	bne.n	8001b04 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001aea:	4b12      	ldr	r3, [pc, #72]	; (8001b34 <HAL_TIM_Base_MspInit+0x90>)
 8001aec:	699b      	ldr	r3, [r3, #24]
 8001aee:	4a11      	ldr	r2, [pc, #68]	; (8001b34 <HAL_TIM_Base_MspInit+0x90>)
 8001af0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001af4:	6193      	str	r3, [r2, #24]
 8001af6:	4b0f      	ldr	r3, [pc, #60]	; (8001b34 <HAL_TIM_Base_MspInit+0x90>)
 8001af8:	699b      	ldr	r3, [r3, #24]
 8001afa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001afe:	613b      	str	r3, [r7, #16]
 8001b00:	693b      	ldr	r3, [r7, #16]
}
 8001b02:	e010      	b.n	8001b26 <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM17)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a0c      	ldr	r2, [pc, #48]	; (8001b3c <HAL_TIM_Base_MspInit+0x98>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d10b      	bne.n	8001b26 <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8001b0e:	4b09      	ldr	r3, [pc, #36]	; (8001b34 <HAL_TIM_Base_MspInit+0x90>)
 8001b10:	699b      	ldr	r3, [r3, #24]
 8001b12:	4a08      	ldr	r2, [pc, #32]	; (8001b34 <HAL_TIM_Base_MspInit+0x90>)
 8001b14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b18:	6193      	str	r3, [r2, #24]
 8001b1a:	4b06      	ldr	r3, [pc, #24]	; (8001b34 <HAL_TIM_Base_MspInit+0x90>)
 8001b1c:	699b      	ldr	r3, [r3, #24]
 8001b1e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b22:	60fb      	str	r3, [r7, #12]
 8001b24:	68fb      	ldr	r3, [r7, #12]
}
 8001b26:	bf00      	nop
 8001b28:	3718      	adds	r7, #24
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	40001000 	.word	0x40001000
 8001b34:	40021000 	.word	0x40021000
 8001b38:	40014400 	.word	0x40014400
 8001b3c:	40014800 	.word	0x40014800

08001b40 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b08a      	sub	sp, #40	; 0x28
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b48:	f107 0314 	add.w	r3, r7, #20
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	601a      	str	r2, [r3, #0]
 8001b50:	605a      	str	r2, [r3, #4]
 8001b52:	609a      	str	r2, [r3, #8]
 8001b54:	60da      	str	r2, [r3, #12]
 8001b56:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a17      	ldr	r2, [pc, #92]	; (8001bbc <HAL_UART_MspInit+0x7c>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d128      	bne.n	8001bb4 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b62:	4b17      	ldr	r3, [pc, #92]	; (8001bc0 <HAL_UART_MspInit+0x80>)
 8001b64:	69db      	ldr	r3, [r3, #28]
 8001b66:	4a16      	ldr	r2, [pc, #88]	; (8001bc0 <HAL_UART_MspInit+0x80>)
 8001b68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b6c:	61d3      	str	r3, [r2, #28]
 8001b6e:	4b14      	ldr	r3, [pc, #80]	; (8001bc0 <HAL_UART_MspInit+0x80>)
 8001b70:	69db      	ldr	r3, [r3, #28]
 8001b72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b76:	613b      	str	r3, [r7, #16]
 8001b78:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b7a:	4b11      	ldr	r3, [pc, #68]	; (8001bc0 <HAL_UART_MspInit+0x80>)
 8001b7c:	695b      	ldr	r3, [r3, #20]
 8001b7e:	4a10      	ldr	r2, [pc, #64]	; (8001bc0 <HAL_UART_MspInit+0x80>)
 8001b80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b84:	6153      	str	r3, [r2, #20]
 8001b86:	4b0e      	ldr	r3, [pc, #56]	; (8001bc0 <HAL_UART_MspInit+0x80>)
 8001b88:	695b      	ldr	r3, [r3, #20]
 8001b8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b8e:	60fb      	str	r3, [r7, #12]
 8001b90:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001b92:	230c      	movs	r3, #12
 8001b94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b96:	2302      	movs	r3, #2
 8001b98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b9e:	2303      	movs	r3, #3
 8001ba0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001ba2:	2307      	movs	r3, #7
 8001ba4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ba6:	f107 0314 	add.w	r3, r7, #20
 8001baa:	4619      	mov	r1, r3
 8001bac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bb0:	f002 fa06 	bl	8003fc0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001bb4:	bf00      	nop
 8001bb6:	3728      	adds	r7, #40	; 0x28
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}
 8001bbc:	40004400 	.word	0x40004400
 8001bc0:	40021000 	.word	0x40021000

08001bc4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001bc8:	e7fe      	b.n	8001bc8 <NMI_Handler+0x4>

08001bca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bca:	b480      	push	{r7}
 8001bcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bce:	e7fe      	b.n	8001bce <HardFault_Handler+0x4>

08001bd0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bd4:	e7fe      	b.n	8001bd4 <MemManage_Handler+0x4>

08001bd6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bd6:	b480      	push	{r7}
 8001bd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bda:	e7fe      	b.n	8001bda <BusFault_Handler+0x4>

08001bdc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001be0:	e7fe      	b.n	8001be0 <UsageFault_Handler+0x4>

08001be2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001be2:	b480      	push	{r7}
 8001be4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001be6:	bf00      	nop
 8001be8:	46bd      	mov	sp, r7
 8001bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bee:	4770      	bx	lr

08001bf0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bf4:	bf00      	nop
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfc:	4770      	bx	lr

08001bfe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bfe:	b480      	push	{r7}
 8001c00:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c02:	bf00      	nop
 8001c04:	46bd      	mov	sp, r7
 8001c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0a:	4770      	bx	lr

08001c0c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c10:	f001 fc36 	bl	8003480 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c14:	bf00      	nop
 8001c16:	bd80      	pop	{r7, pc}

08001c18 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b082      	sub	sp, #8
 8001c1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
	  //EXTI0 triggers on rising or falling edge detection of the external button line
	  for(int i=0; i<30000; i++);					//Debounce button
 8001c1e:	2300      	movs	r3, #0
 8001c20:	607b      	str	r3, [r7, #4]
 8001c22:	e002      	b.n	8001c2a <EXTI9_5_IRQHandler+0x12>
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	3301      	adds	r3, #1
 8001c28:	607b      	str	r3, [r7, #4]
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	f247 522f 	movw	r2, #29999	; 0x752f
 8001c30:	4293      	cmp	r3, r2
 8001c32:	ddf7      	ble.n	8001c24 <EXTI9_5_IRQHandler+0xc>
	  SysInfo.Button1 = Read_Button1();			//Set variable based on current state of the button after debounce
 8001c34:	f7ff f88a 	bl	8000d4c <Read_Button1>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	bf14      	ite	ne
 8001c3e:	2301      	movne	r3, #1
 8001c40:	2300      	moveq	r3, #0
 8001c42:	b2da      	uxtb	r2, r3
 8001c44:	4b11      	ldr	r3, [pc, #68]	; (8001c8c <EXTI9_5_IRQHandler+0x74>)
 8001c46:	701a      	strb	r2, [r3, #0]
	  SysInfo.Button2 = Read_Button2();			//Set variable based on current state of the button after debounce
 8001c48:	f7ff f88a 	bl	8000d60 <Read_Button2>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	bf14      	ite	ne
 8001c52:	2301      	movne	r3, #1
 8001c54:	2300      	moveq	r3, #0
 8001c56:	b2da      	uxtb	r2, r3
 8001c58:	4b0c      	ldr	r3, [pc, #48]	; (8001c8c <EXTI9_5_IRQHandler+0x74>)
 8001c5a:	705a      	strb	r2, [r3, #1]
	  SysInfo.Button3 = Read_Button3();			//Set variable based on current state of the button after debounce
 8001c5c:	f7ff f88a 	bl	8000d74 <Read_Button3>
 8001c60:	4603      	mov	r3, r0
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	bf14      	ite	ne
 8001c66:	2301      	movne	r3, #1
 8001c68:	2300      	moveq	r3, #0
 8001c6a:	b2da      	uxtb	r2, r3
 8001c6c:	4b07      	ldr	r3, [pc, #28]	; (8001c8c <EXTI9_5_IRQHandler+0x74>)
 8001c6e:	709a      	strb	r2, [r3, #2]


  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON1_EXTI5_Pin);
 8001c70:	2020      	movs	r0, #32
 8001c72:	f002 fb69 	bl	8004348 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON2_EXTI6_Pin);
 8001c76:	2040      	movs	r0, #64	; 0x40
 8001c78:	f002 fb66 	bl	8004348 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON3_EXTI7_Pin);
 8001c7c:	2080      	movs	r0, #128	; 0x80
 8001c7e:	f002 fb63 	bl	8004348 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001c82:	bf00      	nop
 8001c84:	3708      	adds	r7, #8
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	2000045c 	.word	0x2000045c

08001c90 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles Timer 6 interrupt and DAC underrun interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */
	HeartBeatFlag = true;		//Set heartbeat LED to true when 1 second has elapsed
 8001c94:	4b03      	ldr	r3, [pc, #12]	; (8001ca4 <TIM6_DAC_IRQHandler+0x14>)
 8001c96:	2201      	movs	r2, #1
 8001c98:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001c9a:	4803      	ldr	r0, [pc, #12]	; (8001ca8 <TIM6_DAC_IRQHandler+0x18>)
 8001c9c:	f004 ff06 	bl	8006aac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001ca0:	bf00      	nop
 8001ca2:	bd80      	pop	{r7, pc}
 8001ca4:	20000529 	.word	0x20000529
 8001ca8:	200002f0 	.word	0x200002f0

08001cac <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001cac:	b480      	push	{r7}
 8001cae:	af00      	add	r7, sp, #0
  return 1;
 8001cb0:	2301      	movs	r3, #1
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cba:	4770      	bx	lr

08001cbc <_kill>:

int _kill(int pid, int sig)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b082      	sub	sp, #8
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
 8001cc4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001cc6:	f006 fe29 	bl	800891c <__errno>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	2216      	movs	r2, #22
 8001cce:	601a      	str	r2, [r3, #0]
  return -1;
 8001cd0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	3708      	adds	r7, #8
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}

08001cdc <_exit>:

void _exit (int status)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b082      	sub	sp, #8
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001ce4:	f04f 31ff 	mov.w	r1, #4294967295
 8001ce8:	6878      	ldr	r0, [r7, #4]
 8001cea:	f7ff ffe7 	bl	8001cbc <_kill>
  while (1) {}    /* Make sure we hang here */
 8001cee:	e7fe      	b.n	8001cee <_exit+0x12>

08001cf0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b086      	sub	sp, #24
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	60f8      	str	r0, [r7, #12]
 8001cf8:	60b9      	str	r1, [r7, #8]
 8001cfa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	617b      	str	r3, [r7, #20]
 8001d00:	e00a      	b.n	8001d18 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001d02:	f3af 8000 	nop.w
 8001d06:	4601      	mov	r1, r0
 8001d08:	68bb      	ldr	r3, [r7, #8]
 8001d0a:	1c5a      	adds	r2, r3, #1
 8001d0c:	60ba      	str	r2, [r7, #8]
 8001d0e:	b2ca      	uxtb	r2, r1
 8001d10:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d12:	697b      	ldr	r3, [r7, #20]
 8001d14:	3301      	adds	r3, #1
 8001d16:	617b      	str	r3, [r7, #20]
 8001d18:	697a      	ldr	r2, [r7, #20]
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	429a      	cmp	r2, r3
 8001d1e:	dbf0      	blt.n	8001d02 <_read+0x12>
  }

  return len;
 8001d20:	687b      	ldr	r3, [r7, #4]
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	3718      	adds	r7, #24
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}

08001d2a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001d2a:	b580      	push	{r7, lr}
 8001d2c:	b086      	sub	sp, #24
 8001d2e:	af00      	add	r7, sp, #0
 8001d30:	60f8      	str	r0, [r7, #12]
 8001d32:	60b9      	str	r1, [r7, #8]
 8001d34:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d36:	2300      	movs	r3, #0
 8001d38:	617b      	str	r3, [r7, #20]
 8001d3a:	e009      	b.n	8001d50 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001d3c:	68bb      	ldr	r3, [r7, #8]
 8001d3e:	1c5a      	adds	r2, r3, #1
 8001d40:	60ba      	str	r2, [r7, #8]
 8001d42:	781b      	ldrb	r3, [r3, #0]
 8001d44:	4618      	mov	r0, r3
 8001d46:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d4a:	697b      	ldr	r3, [r7, #20]
 8001d4c:	3301      	adds	r3, #1
 8001d4e:	617b      	str	r3, [r7, #20]
 8001d50:	697a      	ldr	r2, [r7, #20]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	429a      	cmp	r2, r3
 8001d56:	dbf1      	blt.n	8001d3c <_write+0x12>
  }
  return len;
 8001d58:	687b      	ldr	r3, [r7, #4]
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	3718      	adds	r7, #24
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}

08001d62 <_close>:

int _close(int file)
{
 8001d62:	b480      	push	{r7}
 8001d64:	b083      	sub	sp, #12
 8001d66:	af00      	add	r7, sp, #0
 8001d68:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001d6a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	370c      	adds	r7, #12
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr

08001d7a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d7a:	b480      	push	{r7}
 8001d7c:	b083      	sub	sp, #12
 8001d7e:	af00      	add	r7, sp, #0
 8001d80:	6078      	str	r0, [r7, #4]
 8001d82:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d8a:	605a      	str	r2, [r3, #4]
  return 0;
 8001d8c:	2300      	movs	r3, #0
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	370c      	adds	r7, #12
 8001d92:	46bd      	mov	sp, r7
 8001d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d98:	4770      	bx	lr

08001d9a <_isatty>:

int _isatty(int file)
{
 8001d9a:	b480      	push	{r7}
 8001d9c:	b083      	sub	sp, #12
 8001d9e:	af00      	add	r7, sp, #0
 8001da0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001da2:	2301      	movs	r3, #1
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	370c      	adds	r7, #12
 8001da8:	46bd      	mov	sp, r7
 8001daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dae:	4770      	bx	lr

08001db0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b085      	sub	sp, #20
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	60f8      	str	r0, [r7, #12]
 8001db8:	60b9      	str	r1, [r7, #8]
 8001dba:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001dbc:	2300      	movs	r3, #0
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	3714      	adds	r7, #20
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc8:	4770      	bx	lr
	...

08001dcc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b086      	sub	sp, #24
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001dd4:	4a14      	ldr	r2, [pc, #80]	; (8001e28 <_sbrk+0x5c>)
 8001dd6:	4b15      	ldr	r3, [pc, #84]	; (8001e2c <_sbrk+0x60>)
 8001dd8:	1ad3      	subs	r3, r2, r3
 8001dda:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001de0:	4b13      	ldr	r3, [pc, #76]	; (8001e30 <_sbrk+0x64>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d102      	bne.n	8001dee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001de8:	4b11      	ldr	r3, [pc, #68]	; (8001e30 <_sbrk+0x64>)
 8001dea:	4a12      	ldr	r2, [pc, #72]	; (8001e34 <_sbrk+0x68>)
 8001dec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001dee:	4b10      	ldr	r3, [pc, #64]	; (8001e30 <_sbrk+0x64>)
 8001df0:	681a      	ldr	r2, [r3, #0]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	4413      	add	r3, r2
 8001df6:	693a      	ldr	r2, [r7, #16]
 8001df8:	429a      	cmp	r2, r3
 8001dfa:	d207      	bcs.n	8001e0c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001dfc:	f006 fd8e 	bl	800891c <__errno>
 8001e00:	4603      	mov	r3, r0
 8001e02:	220c      	movs	r2, #12
 8001e04:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e06:	f04f 33ff 	mov.w	r3, #4294967295
 8001e0a:	e009      	b.n	8001e20 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e0c:	4b08      	ldr	r3, [pc, #32]	; (8001e30 <_sbrk+0x64>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e12:	4b07      	ldr	r3, [pc, #28]	; (8001e30 <_sbrk+0x64>)
 8001e14:	681a      	ldr	r2, [r3, #0]
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	4413      	add	r3, r2
 8001e1a:	4a05      	ldr	r2, [pc, #20]	; (8001e30 <_sbrk+0x64>)
 8001e1c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e1e:	68fb      	ldr	r3, [r7, #12]
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	3718      	adds	r7, #24
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}
 8001e28:	20008000 	.word	0x20008000
 8001e2c:	00000400 	.word	0x00000400
 8001e30:	2000052c 	.word	0x2000052c
 8001e34:	200006d8 	.word	0x200006d8

08001e38 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e3c:	4b06      	ldr	r3, [pc, #24]	; (8001e58 <SystemInit+0x20>)
 8001e3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e42:	4a05      	ldr	r2, [pc, #20]	; (8001e58 <SystemInit+0x20>)
 8001e44:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e48:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e4c:	bf00      	nop
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e54:	4770      	bx	lr
 8001e56:	bf00      	nop
 8001e58:	e000ed00 	.word	0xe000ed00

08001e5c <CAN_ClearFIFO>:
////////////////////////////////////////  uC CANBUS MANAGEMENT AND PROTOCOL FUNCTIONS /////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


//Clear the FIFO buffer of the specified CANBus FIFO
void CAN_ClearFIFO(uint32_t RxFifo){
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b08c      	sub	sp, #48	; 0x30
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]

	//Ensure the FIFO passed is valid
	if( RxFifo==CAN_RX_FIFO0 || RxFifo==CAN_RX_FIFO1 ){
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d012      	beq.n	8001e90 <CAN_ClearFIFO+0x34>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2b01      	cmp	r3, #1
 8001e6e:	d118      	bne.n	8001ea2 <CAN_ClearFIFO+0x46>
		CAN_RxHeaderTypeDef cRxHeader;
		uint8_t cMessageBuffer[8];
		HAL_StatusTypeDef cRet;

		//Retrieve FIFO messages until the buffer is empty
		while( HAL_CAN_GetRxFifoFillLevel(&CANBUS_EXT, RxFifo) != 0 ){
 8001e70:	e00e      	b.n	8001e90 <CAN_ClearFIFO+0x34>
			cRet=HAL_CAN_GetRxMessage(&CANBUS_EXT, RxFifo, &cRxHeader, cMessageBuffer);
 8001e72:	f107 0308 	add.w	r3, r7, #8
 8001e76:	f107 0210 	add.w	r2, r7, #16
 8001e7a:	6879      	ldr	r1, [r7, #4]
 8001e7c:	480b      	ldr	r0, [pc, #44]	; (8001eac <CAN_ClearFIFO+0x50>)
 8001e7e:	f001 fe1c 	bl	8003aba <HAL_CAN_GetRxMessage>
 8001e82:	4603      	mov	r3, r0
 8001e84:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if(cRet!=HAL_OK){break;}
 8001e88:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d107      	bne.n	8001ea0 <CAN_ClearFIFO+0x44>
		while( HAL_CAN_GetRxFifoFillLevel(&CANBUS_EXT, RxFifo) != 0 ){
 8001e90:	6879      	ldr	r1, [r7, #4]
 8001e92:	4806      	ldr	r0, [pc, #24]	; (8001eac <CAN_ClearFIFO+0x50>)
 8001e94:	f001 ff33 	bl	8003cfe <HAL_CAN_GetRxFifoFillLevel>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d1e9      	bne.n	8001e72 <CAN_ClearFIFO+0x16>
		}

	}

}
 8001e9e:	e000      	b.n	8001ea2 <CAN_ClearFIFO+0x46>
			if(cRet!=HAL_OK){break;}
 8001ea0:	bf00      	nop
}
 8001ea2:	bf00      	nop
 8001ea4:	3730      	adds	r7, #48	; 0x30
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	20000210 	.word	0x20000210

08001eb0 <eeprom_Read>:

}


//Function to read data from the EEPROM IC
eeprom_status_t eeprom_Read(uint16_t MemADDR, uint8_t* ReadArray, int ReadArraySize){
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b088      	sub	sp, #32
 8001eb4:	af02      	add	r7, sp, #8
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	60b9      	str	r1, [r7, #8]
 8001eba:	607a      	str	r2, [r7, #4]
 8001ebc:	81fb      	strh	r3, [r7, #14]

	//Modify the I2C address value with the 3 most significant bits from MemADDR
	uint16_t DeviceADDR_Modified = DeviceADDR | ((MemADDR>>8)&0x0007) ;
 8001ebe:	89fb      	ldrh	r3, [r7, #14]
 8001ec0:	0a1b      	lsrs	r3, r3, #8
 8001ec2:	b29b      	uxth	r3, r3
 8001ec4:	b21b      	sxth	r3, r3
 8001ec6:	f003 0307 	and.w	r3, r3, #7
 8001eca:	b21a      	sxth	r2, r3
 8001ecc:	2350      	movs	r3, #80	; 0x50
 8001ece:	b21b      	sxth	r3, r3
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	b21b      	sxth	r3, r3
 8001ed4:	82fb      	strh	r3, [r7, #22]

	//Create a write buffer and store EEPROM read address
	uint8_t WriteBuffer[1] = {MemADDR} ;
 8001ed6:	89fb      	ldrh	r3, [r7, #14]
 8001ed8:	b2db      	uxtb	r3, r3
 8001eda:	753b      	strb	r3, [r7, #20]

	//Read data byte(s) from the EEPROM IC
	hal_i2c_status = HAL_I2C_Master_Transmit(&I2C_SYS, (DeviceADDR_Modified<<1), WriteBuffer, sizeof(WriteBuffer), 100);		//Set the read address in the EEPROM IC
 8001edc:	8afb      	ldrh	r3, [r7, #22]
 8001ede:	005b      	lsls	r3, r3, #1
 8001ee0:	b299      	uxth	r1, r3
 8001ee2:	f107 0214 	add.w	r2, r7, #20
 8001ee6:	2364      	movs	r3, #100	; 0x64
 8001ee8:	9300      	str	r3, [sp, #0]
 8001eea:	2301      	movs	r3, #1
 8001eec:	4816      	ldr	r0, [pc, #88]	; (8001f48 <eeprom_Read+0x98>)
 8001eee:	f002 fadd 	bl	80044ac <HAL_I2C_Master_Transmit>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	461a      	mov	r2, r3
 8001ef6:	4b15      	ldr	r3, [pc, #84]	; (8001f4c <eeprom_Read+0x9c>)
 8001ef8:	701a      	strb	r2, [r3, #0]
	if( hal_i2c_status != HAL_OK ){
 8001efa:	4b14      	ldr	r3, [pc, #80]	; (8001f4c <eeprom_Read+0x9c>)
 8001efc:	781b      	ldrb	r3, [r3, #0]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d002      	beq.n	8001f08 <eeprom_Read+0x58>
		return EEPROM_ERROR_I2C_WRITE;
 8001f02:	f06f 0301 	mvn.w	r3, #1
 8001f06:	e01a      	b.n	8001f3e <eeprom_Read+0x8e>
	}else{
		hal_i2c_status = HAL_I2C_Master_Receive(&I2C_SYS, (DeviceADDR_Modified<<1)|0x01, ReadArray, ReadArraySize, 100);		//Read data from the EEPROM IC starting at the previously set address
 8001f08:	8afb      	ldrh	r3, [r7, #22]
 8001f0a:	005b      	lsls	r3, r3, #1
 8001f0c:	b21b      	sxth	r3, r3
 8001f0e:	f043 0301 	orr.w	r3, r3, #1
 8001f12:	b21b      	sxth	r3, r3
 8001f14:	b299      	uxth	r1, r3
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	b29b      	uxth	r3, r3
 8001f1a:	2264      	movs	r2, #100	; 0x64
 8001f1c:	9200      	str	r2, [sp, #0]
 8001f1e:	68ba      	ldr	r2, [r7, #8]
 8001f20:	4809      	ldr	r0, [pc, #36]	; (8001f48 <eeprom_Read+0x98>)
 8001f22:	f002 fbb7 	bl	8004694 <HAL_I2C_Master_Receive>
 8001f26:	4603      	mov	r3, r0
 8001f28:	461a      	mov	r2, r3
 8001f2a:	4b08      	ldr	r3, [pc, #32]	; (8001f4c <eeprom_Read+0x9c>)
 8001f2c:	701a      	strb	r2, [r3, #0]
		if( hal_i2c_status != HAL_OK ){	return EEPROM_ERROR_I2C_READ; }
 8001f2e:	4b07      	ldr	r3, [pc, #28]	; (8001f4c <eeprom_Read+0x9c>)
 8001f30:	781b      	ldrb	r3, [r3, #0]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d002      	beq.n	8001f3c <eeprom_Read+0x8c>
 8001f36:	f04f 33ff 	mov.w	r3, #4294967295
 8001f3a:	e000      	b.n	8001f3e <eeprom_Read+0x8e>
	}

	//Return success code
	return EEPROM_STATUS_OK;
 8001f3c:	2300      	movs	r3, #0

}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	3718      	adds	r7, #24
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}
 8001f46:	bf00      	nop
 8001f48:	20000238 	.word	0x20000238
 8001f4c:	20000530 	.word	0x20000530

08001f50 <MCP3421_ADC_Reset>:
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


//Reset the MCP3421A3T's configuration register to its POR value and validate the values
//This is needed because there is no way to force the chip's registers to a POR state, therefore if the system is reset, the IC will maintain its old values
adc_status_t MCP3421_ADC_Reset(void){
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b082      	sub	sp, #8
 8001f54:	af00      	add	r7, sp, #0

	//Power-On-Reset value of the ADC's configuration register
	uint8_t POR_RegValue = 0x10;
 8001f56:	2310      	movs	r3, #16
 8001f58:	71fb      	strb	r3, [r7, #7]

	//Write the POR value to the config register
	if( MCP3421_ADC_Write_Config(&POR_RegValue) != ADC_STATUS_OK){ return ADC_ERROR_I2C_WRITE; }
 8001f5a:	1dfb      	adds	r3, r7, #7
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f000 f861 	bl	8002024 <MCP3421_ADC_Write_Config>
 8001f62:	4603      	mov	r3, r0
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d002      	beq.n	8001f6e <MCP3421_ADC_Reset+0x1e>
 8001f68:	f06f 0301 	mvn.w	r3, #1
 8001f6c:	e011      	b.n	8001f92 <MCP3421_ADC_Reset+0x42>

	//Read the config byte from the MCP3421A3T and compare it to the POR value (RDY bit is masked by retrieval function)
	uint8_t ReadConfigByte;
	if( MCP3421_ADC_Read_Config(&ReadConfigByte) != ADC_STATUS_OK){ return ADC_ERROR_I2C_READ; }
 8001f6e:	1dbb      	adds	r3, r7, #6
 8001f70:	4618      	mov	r0, r3
 8001f72:	f000 f83a 	bl	8001fea <MCP3421_ADC_Read_Config>
 8001f76:	4603      	mov	r3, r0
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d002      	beq.n	8001f82 <MCP3421_ADC_Reset+0x32>
 8001f7c:	f04f 33ff 	mov.w	r3, #4294967295
 8001f80:	e007      	b.n	8001f92 <MCP3421_ADC_Reset+0x42>
	if( ReadConfigByte != POR_RegValue){ return ADC_ERROR_READBACK; }
 8001f82:	79ba      	ldrb	r2, [r7, #6]
 8001f84:	79fb      	ldrb	r3, [r7, #7]
 8001f86:	429a      	cmp	r2, r3
 8001f88:	d002      	beq.n	8001f90 <MCP3421_ADC_Reset+0x40>
 8001f8a:	f06f 0303 	mvn.w	r3, #3
 8001f8e:	e000      	b.n	8001f92 <MCP3421_ADC_Reset+0x42>

 	//memset(PrintBuffer, '\0', COMM_SIZE);	snprintf(PrintBuffer, COMM_SIZE-1, "\n\n\rRead ADC Config Value is 0x%02X", ReadConfigByte );
    //DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE );

	//Return operation success
	return ADC_STATUS_OK;
 8001f90:	2300      	movs	r3, #0

}
 8001f92:	4618      	mov	r0, r3
 8001f94:	3708      	adds	r7, #8
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}

08001f9a <MCP3421_ADC_Init>:



//Initiate the MCP3421A3T's configuration register and validate the values
adc_status_t MCP3421_ADC_Init( uint8_t ConfigValue ){
 8001f9a:	b580      	push	{r7, lr}
 8001f9c:	b084      	sub	sp, #16
 8001f9e:	af00      	add	r7, sp, #0
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	71fb      	strb	r3, [r7, #7]

	//Local function variables
	_Bool TestFlag = true;
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	73fb      	strb	r3, [r7, #15]

	//Write the passed config value to the configuration register
	if( MCP3421_ADC_Write_Config(&ConfigValue) != ADC_STATUS_OK){ return ADC_ERROR_I2C_WRITE; }
 8001fa8:	1dfb      	adds	r3, r7, #7
 8001faa:	4618      	mov	r0, r3
 8001fac:	f000 f83a 	bl	8002024 <MCP3421_ADC_Write_Config>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d002      	beq.n	8001fbc <MCP3421_ADC_Init+0x22>
 8001fb6:	f06f 0301 	mvn.w	r3, #1
 8001fba:	e012      	b.n	8001fe2 <MCP3421_ADC_Init+0x48>

	//Read the config byte from the MCP3421A3T and compare it to the expected value (RDY bit is masked by retrieval function)
	uint8_t ReadConfigByte;
	if( MCP3421_ADC_Read_Config(&ReadConfigByte) != ADC_STATUS_OK){ return ADC_ERROR_I2C_READ; }
 8001fbc:	f107 030e 	add.w	r3, r7, #14
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f000 f812 	bl	8001fea <MCP3421_ADC_Read_Config>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d002      	beq.n	8001fd2 <MCP3421_ADC_Init+0x38>
 8001fcc:	f04f 33ff 	mov.w	r3, #4294967295
 8001fd0:	e007      	b.n	8001fe2 <MCP3421_ADC_Init+0x48>
	if( ReadConfigByte != ConfigValue){ return ADC_ERROR_READBACK; }
 8001fd2:	7bba      	ldrb	r2, [r7, #14]
 8001fd4:	79fb      	ldrb	r3, [r7, #7]
 8001fd6:	429a      	cmp	r2, r3
 8001fd8:	d002      	beq.n	8001fe0 <MCP3421_ADC_Init+0x46>
 8001fda:	f06f 0303 	mvn.w	r3, #3
 8001fde:	e000      	b.n	8001fe2 <MCP3421_ADC_Init+0x48>

 	//memset(PrintBuffer, '\0', COMM_SIZE);	snprintf(PrintBuffer, COMM_SIZE-1, "\n\n\rConfig Value is 0x%02X", ReadConfigByte );
    //DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE );

	//Return operation success
	return ADC_STATUS_OK;
 8001fe0:	2300      	movs	r3, #0

}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	3710      	adds	r7, #16
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}

08001fea <MCP3421_ADC_Read_Config>:




//Read the data in the MCP3421's configuration register (RDY bit is masked as its volatile)
adc_status_t MCP3421_ADC_Read_Config( uint8_t* ReadByte ){
 8001fea:	b580      	push	{r7, lr}
 8001fec:	b084      	sub	sp, #16
 8001fee:	af00      	add	r7, sp, #0
 8001ff0:	6078      	str	r0, [r7, #4]

	//Local function variables
	uint8_t ReadBuffer[4] = {0x00};
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	60fb      	str	r3, [r7, #12]

	//Read 4-bytes from the MCP3421 assuming 18-bit mode operation
	//This is done as all sample modes repeat the config-byte at the end, so it is known that the 4th byte is the configuration byte across all modes due to the repetition
	if( MCP3421_ADC_Read( ReadBuffer, 4 ) != ADC_STATUS_OK){ return ADC_ERROR_I2C_READ; }
 8001ff6:	f107 030c 	add.w	r3, r7, #12
 8001ffa:	2104      	movs	r1, #4
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f000 f83d 	bl	800207c <MCP3421_ADC_Read>
 8002002:	4603      	mov	r3, r0
 8002004:	2b00      	cmp	r3, #0
 8002006:	d002      	beq.n	800200e <MCP3421_ADC_Read_Config+0x24>
 8002008:	f04f 33ff 	mov.w	r3, #4294967295
 800200c:	e006      	b.n	800201c <MCP3421_ADC_Read_Config+0x32>

	//Mask the RDY bit and update the value of the passed memory address
	*ReadByte = ReadBuffer[3]&0x7F;
 800200e:	7bfb      	ldrb	r3, [r7, #15]
 8002010:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002014:	b2da      	uxtb	r2, r3
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	701a      	strb	r2, [r3, #0]

	//Return operation success
	return ADC_STATUS_OK;
 800201a:	2300      	movs	r3, #0

}
 800201c:	4618      	mov	r0, r3
 800201e:	3710      	adds	r7, #16
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}

08002024 <MCP3421_ADC_Write_Config>:
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////  I2C ADC Communication Functions  //////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//Write the passed byte to the MCP3421's configuration register
adc_status_t MCP3421_ADC_Write_Config(uint8_t* WriteArray){
 8002024:	b580      	push	{r7, lr}
 8002026:	b084      	sub	sp, #16
 8002028:	af02      	add	r7, sp, #8
 800202a:	6078      	str	r0, [r7, #4]

	//Check for invalid parameter conditions
	if(WriteArray==NULL){ return ADC_ERROR_PARAMETER; }
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d102      	bne.n	8002038 <MCP3421_ADC_Write_Config+0x14>
 8002032:	f06f 0302 	mvn.w	r3, #2
 8002036:	e019      	b.n	800206c <MCP3421_ADC_Write_Config+0x48>

	//Issue the i2c write data command to the ADC with the config data package
	hal_i2c_status = HAL_I2C_Master_Transmit(&I2C_SYS, (ADC_DeviceADDR<<1), WriteArray, 1, 50);
 8002038:	236b      	movs	r3, #107	; 0x6b
 800203a:	b29b      	uxth	r3, r3
 800203c:	005b      	lsls	r3, r3, #1
 800203e:	b299      	uxth	r1, r3
 8002040:	2332      	movs	r3, #50	; 0x32
 8002042:	9300      	str	r3, [sp, #0]
 8002044:	2301      	movs	r3, #1
 8002046:	687a      	ldr	r2, [r7, #4]
 8002048:	480a      	ldr	r0, [pc, #40]	; (8002074 <MCP3421_ADC_Write_Config+0x50>)
 800204a:	f002 fa2f 	bl	80044ac <HAL_I2C_Master_Transmit>
 800204e:	4603      	mov	r3, r0
 8002050:	461a      	mov	r2, r3
 8002052:	4b09      	ldr	r3, [pc, #36]	; (8002078 <MCP3421_ADC_Write_Config+0x54>)
 8002054:	701a      	strb	r2, [r3, #0]
	if( hal_i2c_status != HAL_OK ){	return ADC_ERROR_I2C_WRITE;	}
 8002056:	4b08      	ldr	r3, [pc, #32]	; (8002078 <MCP3421_ADC_Write_Config+0x54>)
 8002058:	781b      	ldrb	r3, [r3, #0]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d002      	beq.n	8002064 <MCP3421_ADC_Write_Config+0x40>
 800205e:	f06f 0301 	mvn.w	r3, #1
 8002062:	e003      	b.n	800206c <MCP3421_ADC_Write_Config+0x48>

	//Return success
	HAL_Delay(100);
 8002064:	2064      	movs	r0, #100	; 0x64
 8002066:	f001 fa2b 	bl	80034c0 <HAL_Delay>
	return ADC_STATUS_OK;
 800206a:	2300      	movs	r3, #0

}
 800206c:	4618      	mov	r0, r3
 800206e:	3708      	adds	r7, #8
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}
 8002074:	20000238 	.word	0x20000238
 8002078:	20000531 	.word	0x20000531

0800207c <MCP3421_ADC_Read>:


//General purpose read function for the MCP3421 ADC
adc_status_t MCP3421_ADC_Read( uint8_t* ReadArray, uint16_t ReadArraySize){
 800207c:	b580      	push	{r7, lr}
 800207e:	b084      	sub	sp, #16
 8002080:	af02      	add	r7, sp, #8
 8002082:	6078      	str	r0, [r7, #4]
 8002084:	460b      	mov	r3, r1
 8002086:	807b      	strh	r3, [r7, #2]

	//Check for invalid parameter conditions
	if(ReadArray==NULL || ReadArraySize==0){ return ADC_ERROR_PARAMETER; }
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d002      	beq.n	8002094 <MCP3421_ADC_Read+0x18>
 800208e:	887b      	ldrh	r3, [r7, #2]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d102      	bne.n	800209a <MCP3421_ADC_Read+0x1e>
 8002094:	f06f 0302 	mvn.w	r3, #2
 8002098:	e019      	b.n	80020ce <MCP3421_ADC_Read+0x52>

	//Issue read data instruction to ADC and read the specified number of bytes from the ADC's memory
	hal_i2c_status = HAL_I2C_Master_Receive(&I2C_SYS, (ADC_DeviceADDR<<1)|0x01, ReadArray, ReadArraySize, 50);
 800209a:	236b      	movs	r3, #107	; 0x6b
 800209c:	005b      	lsls	r3, r3, #1
 800209e:	b21b      	sxth	r3, r3
 80020a0:	f043 0301 	orr.w	r3, r3, #1
 80020a4:	b21b      	sxth	r3, r3
 80020a6:	b299      	uxth	r1, r3
 80020a8:	887b      	ldrh	r3, [r7, #2]
 80020aa:	2232      	movs	r2, #50	; 0x32
 80020ac:	9200      	str	r2, [sp, #0]
 80020ae:	687a      	ldr	r2, [r7, #4]
 80020b0:	4809      	ldr	r0, [pc, #36]	; (80020d8 <MCP3421_ADC_Read+0x5c>)
 80020b2:	f002 faef 	bl	8004694 <HAL_I2C_Master_Receive>
 80020b6:	4603      	mov	r3, r0
 80020b8:	461a      	mov	r2, r3
 80020ba:	4b08      	ldr	r3, [pc, #32]	; (80020dc <MCP3421_ADC_Read+0x60>)
 80020bc:	701a      	strb	r2, [r3, #0]
	if( hal_i2c_status != HAL_OK ){	return ADC_ERROR_I2C_READ; }
 80020be:	4b07      	ldr	r3, [pc, #28]	; (80020dc <MCP3421_ADC_Read+0x60>)
 80020c0:	781b      	ldrb	r3, [r3, #0]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d002      	beq.n	80020cc <MCP3421_ADC_Read+0x50>
 80020c6:	f04f 33ff 	mov.w	r3, #4294967295
 80020ca:	e000      	b.n	80020ce <MCP3421_ADC_Read+0x52>

	//Return success
	return ADC_STATUS_OK;
 80020cc:	2300      	movs	r3, #0

}
 80020ce:	4618      	mov	r0, r3
 80020d0:	3708      	adds	r7, #8
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	bf00      	nop
 80020d8:	20000238 	.word	0x20000238
 80020dc:	20000531 	.word	0x20000531

080020e0 <MCP4726A1T_VoltageOut>:
//////////////////////////////////////  High Level DAC Control Functions //////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//Set the output voltage of the DAC
//Volatile config must have gain = 1 and voltage reference = VREF or results will be unexpected
dac_status_t MCP4726A1T_VoltageOut(float VoltageOutput){
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b086      	sub	sp, #24
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	ed87 0a01 	vstr	s0, [r7, #4]

	//Check passed parameters for invalid information
	if(VoltageOutput < 0 || VoltageOutput > 2.048){ return DAC_ERROR_PARAMETER; }
 80020ea:	edd7 7a01 	vldr	s15, [r7, #4]
 80020ee:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80020f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020f6:	d40a      	bmi.n	800210e <MCP4726A1T_VoltageOut+0x2e>
 80020f8:	6878      	ldr	r0, [r7, #4]
 80020fa:	f7fe fa25 	bl	8000548 <__aeabi_f2d>
 80020fe:	a31b      	add	r3, pc, #108	; (adr r3, 800216c <MCP4726A1T_VoltageOut+0x8c>)
 8002100:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002104:	f7fe fd08 	bl	8000b18 <__aeabi_dcmpgt>
 8002108:	4603      	mov	r3, r0
 800210a:	2b00      	cmp	r3, #0
 800210c:	d002      	beq.n	8002114 <MCP4726A1T_VoltageOut+0x34>
 800210e:	f06f 0302 	mvn.w	r3, #2
 8002112:	e025      	b.n	8002160 <MCP4726A1T_VoltageOut+0x80>

	//Local function variables
	const float VoltageReference	 = 2.048;
 8002114:	4b14      	ldr	r3, [pc, #80]	; (8002168 <MCP4726A1T_VoltageOut+0x88>)
 8002116:	617b      	str	r3, [r7, #20]
	const uint16_t ResistorsInLadder = 4096;
 8002118:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800211c:	827b      	strh	r3, [r7, #18]
	const uint16_t Gain = 1;
 800211e:	2301      	movs	r3, #1
 8002120:	823b      	strh	r3, [r7, #16]

	//Calculate the required DAC register value
	uint16_t DAC_RegValue = (uint16_t) ( (VoltageOutput*ResistorsInLadder)/(Gain*VoltageReference) );
 8002122:	8a7b      	ldrh	r3, [r7, #18]
 8002124:	ee07 3a90 	vmov	s15, r3
 8002128:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800212c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002130:	ee67 6a27 	vmul.f32	s13, s14, s15
 8002134:	8a3b      	ldrh	r3, [r7, #16]
 8002136:	ee07 3a90 	vmov	s15, r3
 800213a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800213e:	edd7 7a05 	vldr	s15, [r7, #20]
 8002142:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002146:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800214a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800214e:	ee17 3a90 	vmov	r3, s15
 8002152:	81fb      	strh	r3, [r7, #14]

	//Write the DAC register value
	return MCP4726A1T_WriteVolatileDACRegister(PD_NO, DAC_RegValue);
 8002154:	89fb      	ldrh	r3, [r7, #14]
 8002156:	4619      	mov	r1, r3
 8002158:	2000      	movs	r0, #0
 800215a:	f000 f8d3 	bl	8002304 <MCP4726A1T_WriteVolatileDACRegister>
 800215e:	4603      	mov	r3, r0

}
 8002160:	4618      	mov	r0, r3
 8002162:	3718      	adds	r7, #24
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}
 8002168:	4003126f 	.word	0x4003126f
 800216c:	d2f1a9fc 	.word	0xd2f1a9fc
 8002170:	4000624d 	.word	0x4000624d

08002174 <MCP4726A1T_WriteMemory>:
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////  Private DAC Memory Access Functions ///////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//Function to perform a generic memory write to either ALL memory or VOLATILE memory
dac_status_t MCP4726A1T_WriteMemory(uint8_t MemoryType, uint8_t VoltRefBits, uint8_t PowerDownBits, uint8_t GainBit, uint16_t DAC_Data){
 8002174:	b590      	push	{r4, r7, lr}
 8002176:	b089      	sub	sp, #36	; 0x24
 8002178:	af02      	add	r7, sp, #8
 800217a:	4604      	mov	r4, r0
 800217c:	4608      	mov	r0, r1
 800217e:	4611      	mov	r1, r2
 8002180:	461a      	mov	r2, r3
 8002182:	4623      	mov	r3, r4
 8002184:	71fb      	strb	r3, [r7, #7]
 8002186:	4603      	mov	r3, r0
 8002188:	71bb      	strb	r3, [r7, #6]
 800218a:	460b      	mov	r3, r1
 800218c:	717b      	strb	r3, [r7, #5]
 800218e:	4613      	mov	r3, r2
 8002190:	713b      	strb	r3, [r7, #4]

	//Check passed parameters for invalid information
	if(MemoryType != DAC_MEMORY_ALL && MemoryType != DAC_MEMORY_VOLATILE){ return DAC_ERROR_PARAMETER; }
 8002192:	79fb      	ldrb	r3, [r7, #7]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d005      	beq.n	80021a4 <MCP4726A1T_WriteMemory+0x30>
 8002198:	79fb      	ldrb	r3, [r7, #7]
 800219a:	2b01      	cmp	r3, #1
 800219c:	d002      	beq.n	80021a4 <MCP4726A1T_WriteMemory+0x30>
 800219e:	f06f 0302 	mvn.w	r3, #2
 80021a2:	e089      	b.n	80022b8 <MCP4726A1T_WriteMemory+0x144>
	if(VoltRefBits != VDD_UNBUFF && VoltRefBits != VREF_UNBUFF && VoltRefBits != VREF_BUFF ){ return DAC_ERROR_PARAMETER; }
 80021a4:	79bb      	ldrb	r3, [r7, #6]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d008      	beq.n	80021bc <MCP4726A1T_WriteMemory+0x48>
 80021aa:	79bb      	ldrb	r3, [r7, #6]
 80021ac:	2b02      	cmp	r3, #2
 80021ae:	d005      	beq.n	80021bc <MCP4726A1T_WriteMemory+0x48>
 80021b0:	79bb      	ldrb	r3, [r7, #6]
 80021b2:	2b03      	cmp	r3, #3
 80021b4:	d002      	beq.n	80021bc <MCP4726A1T_WriteMemory+0x48>
 80021b6:	f06f 0302 	mvn.w	r3, #2
 80021ba:	e07d      	b.n	80022b8 <MCP4726A1T_WriteMemory+0x144>
	if(PowerDownBits != PD_NO && PowerDownBits != PD_1K && PowerDownBits != PD_100K && PowerDownBits != PD_500K ){ return DAC_ERROR_PARAMETER; }
 80021bc:	797b      	ldrb	r3, [r7, #5]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d00b      	beq.n	80021da <MCP4726A1T_WriteMemory+0x66>
 80021c2:	797b      	ldrb	r3, [r7, #5]
 80021c4:	2b01      	cmp	r3, #1
 80021c6:	d008      	beq.n	80021da <MCP4726A1T_WriteMemory+0x66>
 80021c8:	797b      	ldrb	r3, [r7, #5]
 80021ca:	2b02      	cmp	r3, #2
 80021cc:	d005      	beq.n	80021da <MCP4726A1T_WriteMemory+0x66>
 80021ce:	797b      	ldrb	r3, [r7, #5]
 80021d0:	2b03      	cmp	r3, #3
 80021d2:	d002      	beq.n	80021da <MCP4726A1T_WriteMemory+0x66>
 80021d4:	f06f 0302 	mvn.w	r3, #2
 80021d8:	e06e      	b.n	80022b8 <MCP4726A1T_WriteMemory+0x144>
	if(GainBit != G_1X && GainBit != G_2X){ return DAC_ERROR_PARAMETER; }
 80021da:	793b      	ldrb	r3, [r7, #4]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d005      	beq.n	80021ec <MCP4726A1T_WriteMemory+0x78>
 80021e0:	793b      	ldrb	r3, [r7, #4]
 80021e2:	2b01      	cmp	r3, #1
 80021e4:	d002      	beq.n	80021ec <MCP4726A1T_WriteMemory+0x78>
 80021e6:	f06f 0302 	mvn.w	r3, #2
 80021ea:	e065      	b.n	80022b8 <MCP4726A1T_WriteMemory+0x144>
	if(DAC_Data>0x0FFF){ return DAC_ERROR_PARAMETER; }
 80021ec:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80021ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021f2:	d302      	bcc.n	80021fa <MCP4726A1T_WriteMemory+0x86>
 80021f4:	f06f 0302 	mvn.w	r3, #2
 80021f8:	e05e      	b.n	80022b8 <MCP4726A1T_WriteMemory+0x144>

	//Combined the I2C general call command and the device address information (shift device address by 1 for r/w bit)
	uint16_t I2C_DeviceAddress = (I2C_GeneralCall<<8) | (DeviceAddr<<1);
 80021fa:	2300      	movs	r3, #0
 80021fc:	021b      	lsls	r3, r3, #8
 80021fe:	b21a      	sxth	r2, r3
 8002200:	2361      	movs	r3, #97	; 0x61
 8002202:	005b      	lsls	r3, r3, #1
 8002204:	b21b      	sxth	r3, r3
 8002206:	4313      	orrs	r3, r2
 8002208:	b21b      	sxth	r3, r3
 800220a:	82bb      	strh	r3, [r7, #20]

	//Determine command
	uint8_t MemoryTypeCMD;
	if(MemoryType==0){ MemoryTypeCMD = 0x60; }		//Command for ALL memory
 800220c:	79fb      	ldrb	r3, [r7, #7]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d102      	bne.n	8002218 <MCP4726A1T_WriteMemory+0xa4>
 8002212:	2360      	movs	r3, #96	; 0x60
 8002214:	75fb      	strb	r3, [r7, #23]
 8002216:	e001      	b.n	800221c <MCP4726A1T_WriteMemory+0xa8>
	else{ MemoryTypeCMD = 0x40;}					//Command for VOLATILE memory
 8002218:	2340      	movs	r3, #64	; 0x40
 800221a:	75fb      	strb	r3, [r7, #23]

	//Format the passed DAC data to big endian
	uint8_t DAC_Data_BigEndian[2];
	DAC_Data = DAC_Data&0x0FFF;
 800221c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800221e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002222:	853b      	strh	r3, [r7, #40]	; 0x28
	DAC_Data_BigEndian[0] = (uint8_t)((DAC_Data>>8)&0x00FF);
 8002224:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002226:	0a1b      	lsrs	r3, r3, #8
 8002228:	b29b      	uxth	r3, r3
 800222a:	b2db      	uxtb	r3, r3
 800222c:	743b      	strb	r3, [r7, #16]
	DAC_Data_BigEndian[1] = (uint8_t)(DAC_Data&0x00FF);
 800222e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002230:	b2db      	uxtb	r3, r3
 8002232:	747b      	strb	r3, [r7, #17]

	//Create a data payload containing the write data
	uint8_t WriteBuffer[3];
	WriteBuffer[0] = MemoryTypeCMD | (VoltRefBits&0x03)<<3 | (PowerDownBits&0x03)<<1 | (0x01&GainBit);
 8002234:	79bb      	ldrb	r3, [r7, #6]
 8002236:	00db      	lsls	r3, r3, #3
 8002238:	b25b      	sxtb	r3, r3
 800223a:	f003 0318 	and.w	r3, r3, #24
 800223e:	b25a      	sxtb	r2, r3
 8002240:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002244:	4313      	orrs	r3, r2
 8002246:	b25a      	sxtb	r2, r3
 8002248:	797b      	ldrb	r3, [r7, #5]
 800224a:	005b      	lsls	r3, r3, #1
 800224c:	b25b      	sxtb	r3, r3
 800224e:	f003 0306 	and.w	r3, r3, #6
 8002252:	b25b      	sxtb	r3, r3
 8002254:	4313      	orrs	r3, r2
 8002256:	b25a      	sxtb	r2, r3
 8002258:	f997 3004 	ldrsb.w	r3, [r7, #4]
 800225c:	f003 0301 	and.w	r3, r3, #1
 8002260:	b25b      	sxtb	r3, r3
 8002262:	4313      	orrs	r3, r2
 8002264:	b25b      	sxtb	r3, r3
 8002266:	b2db      	uxtb	r3, r3
 8002268:	733b      	strb	r3, [r7, #12]
	WriteBuffer[1] = ((DAC_Data_BigEndian[0]<<4)&0xF0) | ((DAC_Data_BigEndian[1]>>4)&0x0F);
 800226a:	7c3b      	ldrb	r3, [r7, #16]
 800226c:	011b      	lsls	r3, r3, #4
 800226e:	b25a      	sxtb	r2, r3
 8002270:	7c7b      	ldrb	r3, [r7, #17]
 8002272:	091b      	lsrs	r3, r3, #4
 8002274:	b2db      	uxtb	r3, r3
 8002276:	b25b      	sxtb	r3, r3
 8002278:	4313      	orrs	r3, r2
 800227a:	b25b      	sxtb	r3, r3
 800227c:	b2db      	uxtb	r3, r3
 800227e:	737b      	strb	r3, [r7, #13]
	WriteBuffer[2] = ((DAC_Data_BigEndian[1]<<4)&0xF0);
 8002280:	7c7b      	ldrb	r3, [r7, #17]
 8002282:	011b      	lsls	r3, r3, #4
 8002284:	b2db      	uxtb	r3, r3
 8002286:	73bb      	strb	r3, [r7, #14]

	//Write the buffer data to the DAC IC
	hal_i2c_status = HAL_I2C_Master_Transmit(&I2C_SYS, I2C_DeviceAddress, WriteBuffer, 3, 100);
 8002288:	f107 020c 	add.w	r2, r7, #12
 800228c:	8ab9      	ldrh	r1, [r7, #20]
 800228e:	2364      	movs	r3, #100	; 0x64
 8002290:	9300      	str	r3, [sp, #0]
 8002292:	2303      	movs	r3, #3
 8002294:	480a      	ldr	r0, [pc, #40]	; (80022c0 <MCP4726A1T_WriteMemory+0x14c>)
 8002296:	f002 f909 	bl	80044ac <HAL_I2C_Master_Transmit>
 800229a:	4603      	mov	r3, r0
 800229c:	461a      	mov	r2, r3
 800229e:	4b09      	ldr	r3, [pc, #36]	; (80022c4 <MCP4726A1T_WriteMemory+0x150>)
 80022a0:	701a      	strb	r2, [r3, #0]
	if( hal_i2c_status != HAL_OK ){ return DAC_ERROR_I2C_WRITE; }
 80022a2:	4b08      	ldr	r3, [pc, #32]	; (80022c4 <MCP4726A1T_WriteMemory+0x150>)
 80022a4:	781b      	ldrb	r3, [r3, #0]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d002      	beq.n	80022b0 <MCP4726A1T_WriteMemory+0x13c>
 80022aa:	f06f 0301 	mvn.w	r3, #1
 80022ae:	e003      	b.n	80022b8 <MCP4726A1T_WriteMemory+0x144>

	//Wait 50ms for max EEPROM programming time
	HAL_Delay(50);
 80022b0:	2032      	movs	r0, #50	; 0x32
 80022b2:	f001 f905 	bl	80034c0 <HAL_Delay>

	//Return success code
	return DAC_STATUS_OK;
 80022b6:	2300      	movs	r3, #0

}
 80022b8:	4618      	mov	r0, r3
 80022ba:	371c      	adds	r7, #28
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd90      	pop	{r4, r7, pc}
 80022c0:	20000238 	.word	0x20000238
 80022c4:	20000532 	.word	0x20000532

080022c8 <MCP4726A1T_WriteAllMemory>:
	return MCP4726A1T_WriteMemory( DAC_MEMORY_VOLATILE, VoltRefBits, PowerDownBits, GainBit, DAC_Data);

}

//Function to perform a write all memory operation
dac_status_t MCP4726A1T_WriteAllMemory(uint8_t VoltRefBits, uint8_t PowerDownBits, uint8_t GainBit, uint16_t DAC_Data){
 80022c8:	b590      	push	{r4, r7, lr}
 80022ca:	b085      	sub	sp, #20
 80022cc:	af02      	add	r7, sp, #8
 80022ce:	4604      	mov	r4, r0
 80022d0:	4608      	mov	r0, r1
 80022d2:	4611      	mov	r1, r2
 80022d4:	461a      	mov	r2, r3
 80022d6:	4623      	mov	r3, r4
 80022d8:	71fb      	strb	r3, [r7, #7]
 80022da:	4603      	mov	r3, r0
 80022dc:	71bb      	strb	r3, [r7, #6]
 80022de:	460b      	mov	r3, r1
 80022e0:	717b      	strb	r3, [r7, #5]
 80022e2:	4613      	mov	r3, r2
 80022e4:	807b      	strh	r3, [r7, #2]

	return MCP4726A1T_WriteMemory( DAC_MEMORY_ALL, VoltRefBits, PowerDownBits, GainBit, DAC_Data);
 80022e6:	7978      	ldrb	r0, [r7, #5]
 80022e8:	79ba      	ldrb	r2, [r7, #6]
 80022ea:	79f9      	ldrb	r1, [r7, #7]
 80022ec:	887b      	ldrh	r3, [r7, #2]
 80022ee:	9300      	str	r3, [sp, #0]
 80022f0:	4603      	mov	r3, r0
 80022f2:	2000      	movs	r0, #0
 80022f4:	f7ff ff3e 	bl	8002174 <MCP4726A1T_WriteMemory>
 80022f8:	4603      	mov	r3, r0

}
 80022fa:	4618      	mov	r0, r3
 80022fc:	370c      	adds	r7, #12
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd90      	pop	{r4, r7, pc}
	...

08002304 <MCP4726A1T_WriteVolatileDACRegister>:



//Function to perform a volatile DAC data register write
dac_status_t MCP4726A1T_WriteVolatileDACRegister(uint8_t PowerDownBits, uint16_t DAC_Data){
 8002304:	b580      	push	{r7, lr}
 8002306:	b086      	sub	sp, #24
 8002308:	af02      	add	r7, sp, #8
 800230a:	4603      	mov	r3, r0
 800230c:	460a      	mov	r2, r1
 800230e:	71fb      	strb	r3, [r7, #7]
 8002310:	4613      	mov	r3, r2
 8002312:	80bb      	strh	r3, [r7, #4]

	//Check passed parameters for invalid information
	if(PowerDownBits != PD_NO && PowerDownBits != PD_1K && PowerDownBits != PD_100K && PowerDownBits != PD_500K ){ return DAC_ERROR_PARAMETER; }
 8002314:	79fb      	ldrb	r3, [r7, #7]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d00b      	beq.n	8002332 <MCP4726A1T_WriteVolatileDACRegister+0x2e>
 800231a:	79fb      	ldrb	r3, [r7, #7]
 800231c:	2b01      	cmp	r3, #1
 800231e:	d008      	beq.n	8002332 <MCP4726A1T_WriteVolatileDACRegister+0x2e>
 8002320:	79fb      	ldrb	r3, [r7, #7]
 8002322:	2b02      	cmp	r3, #2
 8002324:	d005      	beq.n	8002332 <MCP4726A1T_WriteVolatileDACRegister+0x2e>
 8002326:	79fb      	ldrb	r3, [r7, #7]
 8002328:	2b03      	cmp	r3, #3
 800232a:	d002      	beq.n	8002332 <MCP4726A1T_WriteVolatileDACRegister+0x2e>
 800232c:	f06f 0302 	mvn.w	r3, #2
 8002330:	e044      	b.n	80023bc <MCP4726A1T_WriteVolatileDACRegister+0xb8>
	if(DAC_Data>0x0FFF){ return DAC_ERROR_PARAMETER; }
 8002332:	88bb      	ldrh	r3, [r7, #4]
 8002334:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002338:	d302      	bcc.n	8002340 <MCP4726A1T_WriteVolatileDACRegister+0x3c>
 800233a:	f06f 0302 	mvn.w	r3, #2
 800233e:	e03d      	b.n	80023bc <MCP4726A1T_WriteVolatileDACRegister+0xb8>

	//Combined the I2C general call command and the device address information (shift device address by 1 for r/w bit)
	uint16_t I2C_DeviceAddress = (I2C_GeneralCall<<8) | (DeviceAddr<<1);
 8002340:	2300      	movs	r3, #0
 8002342:	021b      	lsls	r3, r3, #8
 8002344:	b21a      	sxth	r2, r3
 8002346:	2361      	movs	r3, #97	; 0x61
 8002348:	005b      	lsls	r3, r3, #1
 800234a:	b21b      	sxth	r3, r3
 800234c:	4313      	orrs	r3, r2
 800234e:	b21b      	sxth	r3, r3
 8002350:	81fb      	strh	r3, [r7, #14]

	//Format the passed DAC data to big endian
	uint8_t DAC_Data_BigEndian[2];
	DAC_Data = DAC_Data&0x0FFF;
 8002352:	88bb      	ldrh	r3, [r7, #4]
 8002354:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002358:	80bb      	strh	r3, [r7, #4]
	DAC_Data_BigEndian[0] = (uint8_t)((DAC_Data>>8)&0x00FF);
 800235a:	88bb      	ldrh	r3, [r7, #4]
 800235c:	0a1b      	lsrs	r3, r3, #8
 800235e:	b29b      	uxth	r3, r3
 8002360:	b2db      	uxtb	r3, r3
 8002362:	733b      	strb	r3, [r7, #12]
	DAC_Data_BigEndian[1] = (uint8_t)(DAC_Data&0x00FF);
 8002364:	88bb      	ldrh	r3, [r7, #4]
 8002366:	b2db      	uxtb	r3, r3
 8002368:	737b      	strb	r3, [r7, #13]

	//Create a data payload containing the write data
	uint8_t WriteBuffer[2];
	WriteBuffer[0] = 0x00 | (PowerDownBits&0x03)<<4 | (DAC_Data_BigEndian[0]&0x0F);
 800236a:	79fb      	ldrb	r3, [r7, #7]
 800236c:	011b      	lsls	r3, r3, #4
 800236e:	b25b      	sxtb	r3, r3
 8002370:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002374:	b25a      	sxtb	r2, r3
 8002376:	7b3b      	ldrb	r3, [r7, #12]
 8002378:	b25b      	sxtb	r3, r3
 800237a:	f003 030f 	and.w	r3, r3, #15
 800237e:	b25b      	sxtb	r3, r3
 8002380:	4313      	orrs	r3, r2
 8002382:	b25b      	sxtb	r3, r3
 8002384:	b2db      	uxtb	r3, r3
 8002386:	723b      	strb	r3, [r7, #8]
	WriteBuffer[1] = DAC_Data_BigEndian[1];
 8002388:	7b7b      	ldrb	r3, [r7, #13]
 800238a:	727b      	strb	r3, [r7, #9]

	//Write the buffer data to the DAC IC
	hal_i2c_status = HAL_I2C_Master_Transmit(&I2C_SYS, I2C_DeviceAddress, WriteBuffer, 2, 100);
 800238c:	f107 0208 	add.w	r2, r7, #8
 8002390:	89f9      	ldrh	r1, [r7, #14]
 8002392:	2364      	movs	r3, #100	; 0x64
 8002394:	9300      	str	r3, [sp, #0]
 8002396:	2302      	movs	r3, #2
 8002398:	480a      	ldr	r0, [pc, #40]	; (80023c4 <MCP4726A1T_WriteVolatileDACRegister+0xc0>)
 800239a:	f002 f887 	bl	80044ac <HAL_I2C_Master_Transmit>
 800239e:	4603      	mov	r3, r0
 80023a0:	461a      	mov	r2, r3
 80023a2:	4b09      	ldr	r3, [pc, #36]	; (80023c8 <MCP4726A1T_WriteVolatileDACRegister+0xc4>)
 80023a4:	701a      	strb	r2, [r3, #0]
	if( hal_i2c_status != HAL_OK ){	return DAC_ERROR_I2C_WRITE;	}
 80023a6:	4b08      	ldr	r3, [pc, #32]	; (80023c8 <MCP4726A1T_WriteVolatileDACRegister+0xc4>)
 80023a8:	781b      	ldrb	r3, [r3, #0]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d002      	beq.n	80023b4 <MCP4726A1T_WriteVolatileDACRegister+0xb0>
 80023ae:	f06f 0301 	mvn.w	r3, #1
 80023b2:	e003      	b.n	80023bc <MCP4726A1T_WriteVolatileDACRegister+0xb8>

	//Wait 50ms for max EEPROM programming time
	HAL_Delay(50);
 80023b4:	2032      	movs	r0, #50	; 0x32
 80023b6:	f001 f883 	bl	80034c0 <HAL_Delay>

	//Return success code
	return DAC_STATUS_OK;
 80023ba:	2300      	movs	r3, #0

}
 80023bc:	4618      	mov	r0, r3
 80023be:	3710      	adds	r7, #16
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd80      	pop	{r7, pc}
 80023c4:	20000238 	.word	0x20000238
 80023c8:	20000532 	.word	0x20000532

080023cc <MCP4726A1T_ReadAllMemory>:
}


//Function to read data from eeprom and volatile DAC memory
//Read array must be 6 bytes in length
dac_status_t MCP4726A1T_ReadAllMemory(uint8_t* ReadArray){
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b086      	sub	sp, #24
 80023d0:	af02      	add	r7, sp, #8
 80023d2:	6078      	str	r0, [r7, #4]

	//Check passed parameters for invalid information
	if(ReadArray == NULL ){ return DAC_ERROR_PARAMETER; }
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d102      	bne.n	80023e0 <MCP4726A1T_ReadAllMemory+0x14>
 80023da:	f06f 0302 	mvn.w	r3, #2
 80023de:	e01f      	b.n	8002420 <MCP4726A1T_ReadAllMemory+0x54>

	//Combined the I2C general call command and the device address information (shift device address by 1 for r/w bit)
	uint16_t I2C_DeviceAddress = (I2C_GeneralCall<<8) | (DeviceAddr<<1);
 80023e0:	2300      	movs	r3, #0
 80023e2:	021b      	lsls	r3, r3, #8
 80023e4:	b21a      	sxth	r2, r3
 80023e6:	2361      	movs	r3, #97	; 0x61
 80023e8:	005b      	lsls	r3, r3, #1
 80023ea:	b21b      	sxth	r3, r3
 80023ec:	4313      	orrs	r3, r2
 80023ee:	b21b      	sxth	r3, r3
 80023f0:	81fb      	strh	r3, [r7, #14]

	//Issue the read command to the DAC and receive the data from memory
	hal_i2c_status = HAL_I2C_Master_Receive(&I2C_SYS, I2C_DeviceAddress|0x01, ReadArray, 6, 100);
 80023f2:	89fb      	ldrh	r3, [r7, #14]
 80023f4:	f043 0301 	orr.w	r3, r3, #1
 80023f8:	b299      	uxth	r1, r3
 80023fa:	2364      	movs	r3, #100	; 0x64
 80023fc:	9300      	str	r3, [sp, #0]
 80023fe:	2306      	movs	r3, #6
 8002400:	687a      	ldr	r2, [r7, #4]
 8002402:	4809      	ldr	r0, [pc, #36]	; (8002428 <MCP4726A1T_ReadAllMemory+0x5c>)
 8002404:	f002 f946 	bl	8004694 <HAL_I2C_Master_Receive>
 8002408:	4603      	mov	r3, r0
 800240a:	461a      	mov	r2, r3
 800240c:	4b07      	ldr	r3, [pc, #28]	; (800242c <MCP4726A1T_ReadAllMemory+0x60>)
 800240e:	701a      	strb	r2, [r3, #0]
	if( hal_i2c_status != HAL_OK ){ return DAC_ERROR_I2C_READ; }
 8002410:	4b06      	ldr	r3, [pc, #24]	; (800242c <MCP4726A1T_ReadAllMemory+0x60>)
 8002412:	781b      	ldrb	r3, [r3, #0]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d002      	beq.n	800241e <MCP4726A1T_ReadAllMemory+0x52>
 8002418:	f04f 33ff 	mov.w	r3, #4294967295
 800241c:	e000      	b.n	8002420 <MCP4726A1T_ReadAllMemory+0x54>

	//Return success code
	return DAC_STATUS_OK;
 800241e:	2300      	movs	r3, #0

}
 8002420:	4618      	mov	r0, r3
 8002422:	3710      	adds	r7, #16
 8002424:	46bd      	mov	sp, r7
 8002426:	bd80      	pop	{r7, pc}
 8002428:	20000238 	.word	0x20000238
 800242c:	20000532 	.word	0x20000532

08002430 <CANSetup>:
////////////////////////////////////////    CANBus System Setup and Activation Function ///////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


//Setup for transmitting CANbus
void CANSetup(uint16_t CANBusID){
 8002430:	b580      	push	{r7, lr}
 8002432:	b082      	sub	sp, #8
 8002434:	af00      	add	r7, sp, #0
 8002436:	4603      	mov	r3, r0
 8002438:	80fb      	strh	r3, [r7, #6]

	//Setup transmit header 0 CAN headers
	pTxHeader.StdId = 0x0400;				 	 // 11 bit ID
 800243a:	4ba8      	ldr	r3, [pc, #672]	; (80026dc <CANSetup+0x2ac>)
 800243c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002440:	601a      	str	r2, [r3, #0]
	pTxHeader.DLC	= 8;						 // Specifies that 8 bytes will be transmitted per message
 8002442:	4ba6      	ldr	r3, [pc, #664]	; (80026dc <CANSetup+0x2ac>)
 8002444:	2208      	movs	r2, #8
 8002446:	611a      	str	r2, [r3, #16]
	pTxHeader.IDE 	= CAN_ID_STD; 			     // Specifies standard ID (11-bit ID)
 8002448:	4ba4      	ldr	r3, [pc, #656]	; (80026dc <CANSetup+0x2ac>)
 800244a:	2200      	movs	r2, #0
 800244c:	609a      	str	r2, [r3, #8]
	pTxHeader.RTR 	= CAN_RTR_DATA; 			 // Specifies data type as "Data Frame"
 800244e:	4ba3      	ldr	r3, [pc, #652]	; (80026dc <CANSetup+0x2ac>)
 8002450:	2200      	movs	r2, #0
 8002452:	60da      	str	r2, [r3, #12]

	//Setup for CAN filter 0 - Used for FIFO0
	sFilterConfig0.FilterBank  		 	= 0;
 8002454:	4ba2      	ldr	r3, [pc, #648]	; (80026e0 <CANSetup+0x2b0>)
 8002456:	2200      	movs	r2, #0
 8002458:	615a      	str	r2, [r3, #20]
	sFilterConfig0.FilterMode   		= CAN_FILTERMODE_IDLIST;
 800245a:	4ba1      	ldr	r3, [pc, #644]	; (80026e0 <CANSetup+0x2b0>)
 800245c:	2201      	movs	r2, #1
 800245e:	619a      	str	r2, [r3, #24]
	sFilterConfig0.FilterScale  		= CAN_FILTERSCALE_16BIT;
 8002460:	4b9f      	ldr	r3, [pc, #636]	; (80026e0 <CANSetup+0x2b0>)
 8002462:	2200      	movs	r2, #0
 8002464:	61da      	str	r2, [r3, #28]
	sFilterConfig0.FilterIdHigh			= (CANBusID&0x01FF)<<5;
 8002466:	88fb      	ldrh	r3, [r7, #6]
 8002468:	015b      	lsls	r3, r3, #5
 800246a:	461a      	mov	r2, r3
 800246c:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8002470:	4013      	ands	r3, r2
 8002472:	4a9b      	ldr	r2, [pc, #620]	; (80026e0 <CANSetup+0x2b0>)
 8002474:	6013      	str	r3, [r2, #0]
	sFilterConfig0.FilterIdLow  		= (0x0000)<<5;
 8002476:	4b9a      	ldr	r3, [pc, #616]	; (80026e0 <CANSetup+0x2b0>)
 8002478:	2200      	movs	r2, #0
 800247a:	605a      	str	r2, [r3, #4]
	sFilterConfig0.FilterMaskIdHigh 	= (0x0000)<<5;
 800247c:	4b98      	ldr	r3, [pc, #608]	; (80026e0 <CANSetup+0x2b0>)
 800247e:	2200      	movs	r2, #0
 8002480:	609a      	str	r2, [r3, #8]
	sFilterConfig0.FilterMaskIdLow 		= (0x0000)<<5;
 8002482:	4b97      	ldr	r3, [pc, #604]	; (80026e0 <CANSetup+0x2b0>)
 8002484:	2200      	movs	r2, #0
 8002486:	60da      	str	r2, [r3, #12]
	sFilterConfig0.FilterFIFOAssignment = CAN_RX_FIFO0;
 8002488:	4b95      	ldr	r3, [pc, #596]	; (80026e0 <CANSetup+0x2b0>)
 800248a:	2200      	movs	r2, #0
 800248c:	611a      	str	r2, [r3, #16]
	sFilterConfig0.FilterActivation 	= ENABLE;
 800248e:	4b94      	ldr	r3, [pc, #592]	; (80026e0 <CANSetup+0x2b0>)
 8002490:	2201      	movs	r2, #1
 8002492:	621a      	str	r2, [r3, #32]

	//Setup for CAN filter 1 - Used for FIFO1
	sFilterConfig1.FilterBank 			= 1;
 8002494:	4b93      	ldr	r3, [pc, #588]	; (80026e4 <CANSetup+0x2b4>)
 8002496:	2201      	movs	r2, #1
 8002498:	615a      	str	r2, [r3, #20]
	sFilterConfig1.FilterMode 			= CAN_FILTERMODE_IDLIST;
 800249a:	4b92      	ldr	r3, [pc, #584]	; (80026e4 <CANSetup+0x2b4>)
 800249c:	2201      	movs	r2, #1
 800249e:	619a      	str	r2, [r3, #24]
	sFilterConfig1.FilterScale 			= CAN_FILTERSCALE_16BIT;
 80024a0:	4b90      	ldr	r3, [pc, #576]	; (80026e4 <CANSetup+0x2b4>)
 80024a2:	2200      	movs	r2, #0
 80024a4:	61da      	str	r2, [r3, #28]
	sFilterConfig1.FilterIdHigh			= ((CANBusID&0x01FF)|0x0200)<<5;
 80024a6:	88fb      	ldrh	r3, [r7, #6]
 80024a8:	015a      	lsls	r2, r3, #5
 80024aa:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80024ae:	4013      	ands	r3, r2
 80024b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024b4:	461a      	mov	r2, r3
 80024b6:	4b8b      	ldr	r3, [pc, #556]	; (80026e4 <CANSetup+0x2b4>)
 80024b8:	601a      	str	r2, [r3, #0]
	sFilterConfig1.FilterIdLow 			= (0x0200)<<5;
 80024ba:	4b8a      	ldr	r3, [pc, #552]	; (80026e4 <CANSetup+0x2b4>)
 80024bc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80024c0:	605a      	str	r2, [r3, #4]
	sFilterConfig1.FilterMaskIdHigh     = (0x0200)<<5;
 80024c2:	4b88      	ldr	r3, [pc, #544]	; (80026e4 <CANSetup+0x2b4>)
 80024c4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80024c8:	609a      	str	r2, [r3, #8]
	sFilterConfig1.FilterMaskIdLow 	    = (0x0200)<<5;
 80024ca:	4b86      	ldr	r3, [pc, #536]	; (80026e4 <CANSetup+0x2b4>)
 80024cc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80024d0:	60da      	str	r2, [r3, #12]
	sFilterConfig1.FilterFIFOAssignment = CAN_RX_FIFO1;
 80024d2:	4b84      	ldr	r3, [pc, #528]	; (80026e4 <CANSetup+0x2b4>)
 80024d4:	2201      	movs	r2, #1
 80024d6:	611a      	str	r2, [r3, #16]
	sFilterConfig1.FilterActivation 	= ENABLE;
 80024d8:	4b82      	ldr	r3, [pc, #520]	; (80026e4 <CANSetup+0x2b4>)
 80024da:	2201      	movs	r2, #1
 80024dc:	621a      	str	r2, [r3, #32]


	//Print CANBus Initialization message
    memset(PrintBuffer, '\0', COMM_SIZE);  snprintf(PrintBuffer, COMM_SIZE-1, "\n\n\rCANBus Initialization Sequence:" );
 80024de:	2280      	movs	r2, #128	; 0x80
 80024e0:	2100      	movs	r1, #0
 80024e2:	4881      	ldr	r0, [pc, #516]	; (80026e8 <CANSetup+0x2b8>)
 80024e4:	f006 f9c7 	bl	8008876 <memset>
 80024e8:	4a80      	ldr	r2, [pc, #512]	; (80026ec <CANSetup+0x2bc>)
 80024ea:	217f      	movs	r1, #127	; 0x7f
 80024ec:	487e      	ldr	r0, [pc, #504]	; (80026e8 <CANSetup+0x2b8>)
 80024ee:	f006 f92b 	bl	8008748 <sniprintf>
  	DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE);
 80024f2:	4b7f      	ldr	r3, [pc, #508]	; (80026f0 <CANSetup+0x2c0>)
 80024f4:	781b      	ldrb	r3, [r3, #0]
 80024f6:	2280      	movs	r2, #128	; 0x80
 80024f8:	497b      	ldr	r1, [pc, #492]	; (80026e8 <CANSetup+0x2b8>)
 80024fa:	4618      	mov	r0, r3
 80024fc:	f7fe fd04 	bl	8000f08 <DebugPrint>


	//Init Config Filter 0
	ret=HAL_CAN_ConfigFilter(&CANBUS_EXT, &sFilterConfig0);
 8002500:	4977      	ldr	r1, [pc, #476]	; (80026e0 <CANSetup+0x2b0>)
 8002502:	487c      	ldr	r0, [pc, #496]	; (80026f4 <CANSetup+0x2c4>)
 8002504:	f001 f8fb 	bl	80036fe <HAL_CAN_ConfigFilter>
 8002508:	4603      	mov	r3, r0
 800250a:	461a      	mov	r2, r3
 800250c:	4b7a      	ldr	r3, [pc, #488]	; (80026f8 <CANSetup+0x2c8>)
 800250e:	701a      	strb	r2, [r3, #0]
	if( ret != HAL_OK ) {
 8002510:	4b79      	ldr	r3, [pc, #484]	; (80026f8 <CANSetup+0x2c8>)
 8002512:	781b      	ldrb	r3, [r3, #0]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d011      	beq.n	800253c <CANSetup+0x10c>
	    memset(PrintBuffer, '\0', COMM_SIZE);  snprintf(PrintBuffer, COMM_SIZE-1, "\n\r    - CAN ERROR - Config filter 0 failed to be set" );
 8002518:	2280      	movs	r2, #128	; 0x80
 800251a:	2100      	movs	r1, #0
 800251c:	4872      	ldr	r0, [pc, #456]	; (80026e8 <CANSetup+0x2b8>)
 800251e:	f006 f9aa 	bl	8008876 <memset>
 8002522:	4a76      	ldr	r2, [pc, #472]	; (80026fc <CANSetup+0x2cc>)
 8002524:	217f      	movs	r1, #127	; 0x7f
 8002526:	4870      	ldr	r0, [pc, #448]	; (80026e8 <CANSetup+0x2b8>)
 8002528:	f006 f90e 	bl	8008748 <sniprintf>
	  	DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE);
 800252c:	4b70      	ldr	r3, [pc, #448]	; (80026f0 <CANSetup+0x2c0>)
 800252e:	781b      	ldrb	r3, [r3, #0]
 8002530:	2280      	movs	r2, #128	; 0x80
 8002532:	496d      	ldr	r1, [pc, #436]	; (80026e8 <CANSetup+0x2b8>)
 8002534:	4618      	mov	r0, r3
 8002536:	f7fe fce7 	bl	8000f08 <DebugPrint>
 800253a:	e010      	b.n	800255e <CANSetup+0x12e>
	}else {
		memset(PrintBuffer, '\0', COMM_SIZE);  snprintf(PrintBuffer, COMM_SIZE-1, "\n\r    - Config Filter 0 Set" );
 800253c:	2280      	movs	r2, #128	; 0x80
 800253e:	2100      	movs	r1, #0
 8002540:	4869      	ldr	r0, [pc, #420]	; (80026e8 <CANSetup+0x2b8>)
 8002542:	f006 f998 	bl	8008876 <memset>
 8002546:	4a6e      	ldr	r2, [pc, #440]	; (8002700 <CANSetup+0x2d0>)
 8002548:	217f      	movs	r1, #127	; 0x7f
 800254a:	4867      	ldr	r0, [pc, #412]	; (80026e8 <CANSetup+0x2b8>)
 800254c:	f006 f8fc 	bl	8008748 <sniprintf>
		DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE);
 8002550:	4b67      	ldr	r3, [pc, #412]	; (80026f0 <CANSetup+0x2c0>)
 8002552:	781b      	ldrb	r3, [r3, #0]
 8002554:	2280      	movs	r2, #128	; 0x80
 8002556:	4964      	ldr	r1, [pc, #400]	; (80026e8 <CANSetup+0x2b8>)
 8002558:	4618      	mov	r0, r3
 800255a:	f7fe fcd5 	bl	8000f08 <DebugPrint>
	}

	//Init Config Filter 1
	ret=HAL_CAN_ConfigFilter(&CANBUS_EXT, &sFilterConfig1);
 800255e:	4961      	ldr	r1, [pc, #388]	; (80026e4 <CANSetup+0x2b4>)
 8002560:	4864      	ldr	r0, [pc, #400]	; (80026f4 <CANSetup+0x2c4>)
 8002562:	f001 f8cc 	bl	80036fe <HAL_CAN_ConfigFilter>
 8002566:	4603      	mov	r3, r0
 8002568:	461a      	mov	r2, r3
 800256a:	4b63      	ldr	r3, [pc, #396]	; (80026f8 <CANSetup+0x2c8>)
 800256c:	701a      	strb	r2, [r3, #0]
	if( ret != HAL_OK ) {
 800256e:	4b62      	ldr	r3, [pc, #392]	; (80026f8 <CANSetup+0x2c8>)
 8002570:	781b      	ldrb	r3, [r3, #0]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d011      	beq.n	800259a <CANSetup+0x16a>
	    memset(PrintBuffer, '\0', COMM_SIZE);  snprintf(PrintBuffer, COMM_SIZE-1, "\n\r    - CAN ERROR - Config Filter 1 Failed" );
 8002576:	2280      	movs	r2, #128	; 0x80
 8002578:	2100      	movs	r1, #0
 800257a:	485b      	ldr	r0, [pc, #364]	; (80026e8 <CANSetup+0x2b8>)
 800257c:	f006 f97b 	bl	8008876 <memset>
 8002580:	4a60      	ldr	r2, [pc, #384]	; (8002704 <CANSetup+0x2d4>)
 8002582:	217f      	movs	r1, #127	; 0x7f
 8002584:	4858      	ldr	r0, [pc, #352]	; (80026e8 <CANSetup+0x2b8>)
 8002586:	f006 f8df 	bl	8008748 <sniprintf>
	  	DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE);
 800258a:	4b59      	ldr	r3, [pc, #356]	; (80026f0 <CANSetup+0x2c0>)
 800258c:	781b      	ldrb	r3, [r3, #0]
 800258e:	2280      	movs	r2, #128	; 0x80
 8002590:	4955      	ldr	r1, [pc, #340]	; (80026e8 <CANSetup+0x2b8>)
 8002592:	4618      	mov	r0, r3
 8002594:	f7fe fcb8 	bl	8000f08 <DebugPrint>
 8002598:	e010      	b.n	80025bc <CANSetup+0x18c>
	}else {
		memset(PrintBuffer, '\0', COMM_SIZE);  snprintf(PrintBuffer, COMM_SIZE-1, "\n\r    - Config Filter 1 Set" );
 800259a:	2280      	movs	r2, #128	; 0x80
 800259c:	2100      	movs	r1, #0
 800259e:	4852      	ldr	r0, [pc, #328]	; (80026e8 <CANSetup+0x2b8>)
 80025a0:	f006 f969 	bl	8008876 <memset>
 80025a4:	4a58      	ldr	r2, [pc, #352]	; (8002708 <CANSetup+0x2d8>)
 80025a6:	217f      	movs	r1, #127	; 0x7f
 80025a8:	484f      	ldr	r0, [pc, #316]	; (80026e8 <CANSetup+0x2b8>)
 80025aa:	f006 f8cd 	bl	8008748 <sniprintf>
		DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE);
 80025ae:	4b50      	ldr	r3, [pc, #320]	; (80026f0 <CANSetup+0x2c0>)
 80025b0:	781b      	ldrb	r3, [r3, #0]
 80025b2:	2280      	movs	r2, #128	; 0x80
 80025b4:	494c      	ldr	r1, [pc, #304]	; (80026e8 <CANSetup+0x2b8>)
 80025b6:	4618      	mov	r0, r3
 80025b8:	f7fe fca6 	bl	8000f08 <DebugPrint>
	}

	//Start Notifications on Receive for FIFO0
	ret=HAL_CAN_ActivateNotification(&CANBUS_EXT, CAN_IT_RX_FIFO0_MSG_PENDING);
 80025bc:	2102      	movs	r1, #2
 80025be:	484d      	ldr	r0, [pc, #308]	; (80026f4 <CANSetup+0x2c4>)
 80025c0:	f001 fbc5 	bl	8003d4e <HAL_CAN_ActivateNotification>
 80025c4:	4603      	mov	r3, r0
 80025c6:	461a      	mov	r2, r3
 80025c8:	4b4b      	ldr	r3, [pc, #300]	; (80026f8 <CANSetup+0x2c8>)
 80025ca:	701a      	strb	r2, [r3, #0]
	if ( ret != HAL_OK ) {
 80025cc:	4b4a      	ldr	r3, [pc, #296]	; (80026f8 <CANSetup+0x2c8>)
 80025ce:	781b      	ldrb	r3, [r3, #0]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d011      	beq.n	80025f8 <CANSetup+0x1c8>
		memset(PrintBuffer, '\0', COMM_SIZE);  snprintf(PrintBuffer, COMM_SIZE-1, "\n\r    - CAN ERROR - Activate FIFO0 Notification Failed"  );
 80025d4:	2280      	movs	r2, #128	; 0x80
 80025d6:	2100      	movs	r1, #0
 80025d8:	4843      	ldr	r0, [pc, #268]	; (80026e8 <CANSetup+0x2b8>)
 80025da:	f006 f94c 	bl	8008876 <memset>
 80025de:	4a4b      	ldr	r2, [pc, #300]	; (800270c <CANSetup+0x2dc>)
 80025e0:	217f      	movs	r1, #127	; 0x7f
 80025e2:	4841      	ldr	r0, [pc, #260]	; (80026e8 <CANSetup+0x2b8>)
 80025e4:	f006 f8b0 	bl	8008748 <sniprintf>
		DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE);
 80025e8:	4b41      	ldr	r3, [pc, #260]	; (80026f0 <CANSetup+0x2c0>)
 80025ea:	781b      	ldrb	r3, [r3, #0]
 80025ec:	2280      	movs	r2, #128	; 0x80
 80025ee:	493e      	ldr	r1, [pc, #248]	; (80026e8 <CANSetup+0x2b8>)
 80025f0:	4618      	mov	r0, r3
 80025f2:	f7fe fc89 	bl	8000f08 <DebugPrint>
 80025f6:	e010      	b.n	800261a <CANSetup+0x1ea>
	}else{
		memset(PrintBuffer, '\0', COMM_SIZE);  snprintf(PrintBuffer, COMM_SIZE-1, "\n\r    - Notification on FIFO0 Receive Started" );
 80025f8:	2280      	movs	r2, #128	; 0x80
 80025fa:	2100      	movs	r1, #0
 80025fc:	483a      	ldr	r0, [pc, #232]	; (80026e8 <CANSetup+0x2b8>)
 80025fe:	f006 f93a 	bl	8008876 <memset>
 8002602:	4a43      	ldr	r2, [pc, #268]	; (8002710 <CANSetup+0x2e0>)
 8002604:	217f      	movs	r1, #127	; 0x7f
 8002606:	4838      	ldr	r0, [pc, #224]	; (80026e8 <CANSetup+0x2b8>)
 8002608:	f006 f89e 	bl	8008748 <sniprintf>
		DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE);
 800260c:	4b38      	ldr	r3, [pc, #224]	; (80026f0 <CANSetup+0x2c0>)
 800260e:	781b      	ldrb	r3, [r3, #0]
 8002610:	2280      	movs	r2, #128	; 0x80
 8002612:	4935      	ldr	r1, [pc, #212]	; (80026e8 <CANSetup+0x2b8>)
 8002614:	4618      	mov	r0, r3
 8002616:	f7fe fc77 	bl	8000f08 <DebugPrint>
	}


	//Start Notifications on Receive for FIFO1
		ret=HAL_CAN_ActivateNotification(&CANBUS_EXT, CAN_IT_RX_FIFO1_MSG_PENDING);
 800261a:	2110      	movs	r1, #16
 800261c:	4835      	ldr	r0, [pc, #212]	; (80026f4 <CANSetup+0x2c4>)
 800261e:	f001 fb96 	bl	8003d4e <HAL_CAN_ActivateNotification>
 8002622:	4603      	mov	r3, r0
 8002624:	461a      	mov	r2, r3
 8002626:	4b34      	ldr	r3, [pc, #208]	; (80026f8 <CANSetup+0x2c8>)
 8002628:	701a      	strb	r2, [r3, #0]
		if ( ret != HAL_OK ) {
 800262a:	4b33      	ldr	r3, [pc, #204]	; (80026f8 <CANSetup+0x2c8>)
 800262c:	781b      	ldrb	r3, [r3, #0]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d011      	beq.n	8002656 <CANSetup+0x226>
			memset(PrintBuffer, '\0', COMM_SIZE);  snprintf(PrintBuffer, COMM_SIZE-1, "\n\r    - CAN ERROR - Activate FIFO1 Notification Failed"  );
 8002632:	2280      	movs	r2, #128	; 0x80
 8002634:	2100      	movs	r1, #0
 8002636:	482c      	ldr	r0, [pc, #176]	; (80026e8 <CANSetup+0x2b8>)
 8002638:	f006 f91d 	bl	8008876 <memset>
 800263c:	4a35      	ldr	r2, [pc, #212]	; (8002714 <CANSetup+0x2e4>)
 800263e:	217f      	movs	r1, #127	; 0x7f
 8002640:	4829      	ldr	r0, [pc, #164]	; (80026e8 <CANSetup+0x2b8>)
 8002642:	f006 f881 	bl	8008748 <sniprintf>
			DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE);
 8002646:	4b2a      	ldr	r3, [pc, #168]	; (80026f0 <CANSetup+0x2c0>)
 8002648:	781b      	ldrb	r3, [r3, #0]
 800264a:	2280      	movs	r2, #128	; 0x80
 800264c:	4926      	ldr	r1, [pc, #152]	; (80026e8 <CANSetup+0x2b8>)
 800264e:	4618      	mov	r0, r3
 8002650:	f7fe fc5a 	bl	8000f08 <DebugPrint>
 8002654:	e010      	b.n	8002678 <CANSetup+0x248>
		}else{
			memset(PrintBuffer, '\0', COMM_SIZE);  snprintf(PrintBuffer, COMM_SIZE-1, "\n\r    - Notification on FIFO1 Receive Started" );
 8002656:	2280      	movs	r2, #128	; 0x80
 8002658:	2100      	movs	r1, #0
 800265a:	4823      	ldr	r0, [pc, #140]	; (80026e8 <CANSetup+0x2b8>)
 800265c:	f006 f90b 	bl	8008876 <memset>
 8002660:	4a2d      	ldr	r2, [pc, #180]	; (8002718 <CANSetup+0x2e8>)
 8002662:	217f      	movs	r1, #127	; 0x7f
 8002664:	4820      	ldr	r0, [pc, #128]	; (80026e8 <CANSetup+0x2b8>)
 8002666:	f006 f86f 	bl	8008748 <sniprintf>
			DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE);
 800266a:	4b21      	ldr	r3, [pc, #132]	; (80026f0 <CANSetup+0x2c0>)
 800266c:	781b      	ldrb	r3, [r3, #0]
 800266e:	2280      	movs	r2, #128	; 0x80
 8002670:	491d      	ldr	r1, [pc, #116]	; (80026e8 <CANSetup+0x2b8>)
 8002672:	4618      	mov	r0, r3
 8002674:	f7fe fc48 	bl	8000f08 <DebugPrint>
		}


	//Start the CANBus
	ret=HAL_CAN_Start(&CANBUS_EXT);
 8002678:	481e      	ldr	r0, [pc, #120]	; (80026f4 <CANSetup+0x2c4>)
 800267a:	f001 f90a 	bl	8003892 <HAL_CAN_Start>
 800267e:	4603      	mov	r3, r0
 8002680:	461a      	mov	r2, r3
 8002682:	4b1d      	ldr	r3, [pc, #116]	; (80026f8 <CANSetup+0x2c8>)
 8002684:	701a      	strb	r2, [r3, #0]
	if ( ret != HAL_OK ) {
 8002686:	4b1c      	ldr	r3, [pc, #112]	; (80026f8 <CANSetup+0x2c8>)
 8002688:	781b      	ldrb	r3, [r3, #0]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d011      	beq.n	80026b2 <CANSetup+0x282>
		memset(PrintBuffer, '\0', COMM_SIZE);  snprintf(PrintBuffer, COMM_SIZE-1, "\n\rERROR - CANBus Hardware Start Failed"  );
 800268e:	2280      	movs	r2, #128	; 0x80
 8002690:	2100      	movs	r1, #0
 8002692:	4815      	ldr	r0, [pc, #84]	; (80026e8 <CANSetup+0x2b8>)
 8002694:	f006 f8ef 	bl	8008876 <memset>
 8002698:	4a20      	ldr	r2, [pc, #128]	; (800271c <CANSetup+0x2ec>)
 800269a:	217f      	movs	r1, #127	; 0x7f
 800269c:	4812      	ldr	r0, [pc, #72]	; (80026e8 <CANSetup+0x2b8>)
 800269e:	f006 f853 	bl	8008748 <sniprintf>
		DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE);
 80026a2:	4b13      	ldr	r3, [pc, #76]	; (80026f0 <CANSetup+0x2c0>)
 80026a4:	781b      	ldrb	r3, [r3, #0]
 80026a6:	2280      	movs	r2, #128	; 0x80
 80026a8:	490f      	ldr	r1, [pc, #60]	; (80026e8 <CANSetup+0x2b8>)
 80026aa:	4618      	mov	r0, r3
 80026ac:	f7fe fc2c 	bl	8000f08 <DebugPrint>
		memset(PrintBuffer, '\0', COMM_SIZE);  snprintf(PrintBuffer, COMM_SIZE-1, "\n\rCANBus Hardware Activated"  );
		DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE);
	}


}
 80026b0:	e010      	b.n	80026d4 <CANSetup+0x2a4>
		memset(PrintBuffer, '\0', COMM_SIZE);  snprintf(PrintBuffer, COMM_SIZE-1, "\n\rCANBus Hardware Activated"  );
 80026b2:	2280      	movs	r2, #128	; 0x80
 80026b4:	2100      	movs	r1, #0
 80026b6:	480c      	ldr	r0, [pc, #48]	; (80026e8 <CANSetup+0x2b8>)
 80026b8:	f006 f8dd 	bl	8008876 <memset>
 80026bc:	4a18      	ldr	r2, [pc, #96]	; (8002720 <CANSetup+0x2f0>)
 80026be:	217f      	movs	r1, #127	; 0x7f
 80026c0:	4809      	ldr	r0, [pc, #36]	; (80026e8 <CANSetup+0x2b8>)
 80026c2:	f006 f841 	bl	8008748 <sniprintf>
		DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE);
 80026c6:	4b0a      	ldr	r3, [pc, #40]	; (80026f0 <CANSetup+0x2c0>)
 80026c8:	781b      	ldrb	r3, [r3, #0]
 80026ca:	2280      	movs	r2, #128	; 0x80
 80026cc:	4906      	ldr	r1, [pc, #24]	; (80026e8 <CANSetup+0x2b8>)
 80026ce:	4618      	mov	r0, r3
 80026d0:	f7fe fc1a 	bl	8000f08 <DebugPrint>
}
 80026d4:	bf00      	nop
 80026d6:	3708      	adds	r7, #8
 80026d8:	46bd      	mov	sp, r7
 80026da:	bd80      	pop	{r7, pc}
 80026dc:	200004ec 	.word	0x200004ec
 80026e0:	20000534 	.word	0x20000534
 80026e4:	2000055c 	.word	0x2000055c
 80026e8:	20000468 	.word	0x20000468
 80026ec:	0800c350 	.word	0x0800c350
 80026f0:	2000001b 	.word	0x2000001b
 80026f4:	20000210 	.word	0x20000210
 80026f8:	20000528 	.word	0x20000528
 80026fc:	0800c374 	.word	0x0800c374
 8002700:	0800c3ac 	.word	0x0800c3ac
 8002704:	0800c3c8 	.word	0x0800c3c8
 8002708:	0800c3f4 	.word	0x0800c3f4
 800270c:	0800c410 	.word	0x0800c410
 8002710:	0800c448 	.word	0x0800c448
 8002714:	0800c478 	.word	0x0800c478
 8002718:	0800c4b0 	.word	0x0800c4b0
 800271c:	0800c4e0 	.word	0x0800c4e0
 8002720:	0800c508 	.word	0x0800c508

08002724 <StartupPrint_Routine>:
//////////////////////////////////////// Functions to Print System Information to Debug Console  //////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


//Function to print the startup splash message
void StartupPrint_Routine(void){
 8002724:	b580      	push	{r7, lr}
 8002726:	af00      	add	r7, sp, #0

	memset(PrintBuffer, '\0', COMM_SIZE);  snprintf(PrintBuffer, COMM_SIZE-1, "\r\n\n\n\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~" );
 8002728:	2280      	movs	r2, #128	; 0x80
 800272a:	2100      	movs	r1, #0
 800272c:	4821      	ldr	r0, [pc, #132]	; (80027b4 <StartupPrint_Routine+0x90>)
 800272e:	f006 f8a2 	bl	8008876 <memset>
 8002732:	4a21      	ldr	r2, [pc, #132]	; (80027b8 <StartupPrint_Routine+0x94>)
 8002734:	217f      	movs	r1, #127	; 0x7f
 8002736:	481f      	ldr	r0, [pc, #124]	; (80027b4 <StartupPrint_Routine+0x90>)
 8002738:	f006 f806 	bl	8008748 <sniprintf>
	DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE);
 800273c:	4b1f      	ldr	r3, [pc, #124]	; (80027bc <StartupPrint_Routine+0x98>)
 800273e:	781b      	ldrb	r3, [r3, #0]
 8002740:	2280      	movs	r2, #128	; 0x80
 8002742:	491c      	ldr	r1, [pc, #112]	; (80027b4 <StartupPrint_Routine+0x90>)
 8002744:	4618      	mov	r0, r3
 8002746:	f7fe fbdf 	bl	8000f08 <DebugPrint>
	memset(PrintBuffer, '\0', COMM_SIZE);  snprintf(PrintBuffer, COMM_SIZE-1, "\n\r~~~~~~~~~~ emewCorporation Electrolyte Monitoring System ~~~~~~~~~~" );
 800274a:	2280      	movs	r2, #128	; 0x80
 800274c:	2100      	movs	r1, #0
 800274e:	4819      	ldr	r0, [pc, #100]	; (80027b4 <StartupPrint_Routine+0x90>)
 8002750:	f006 f891 	bl	8008876 <memset>
 8002754:	4a1a      	ldr	r2, [pc, #104]	; (80027c0 <StartupPrint_Routine+0x9c>)
 8002756:	217f      	movs	r1, #127	; 0x7f
 8002758:	4816      	ldr	r0, [pc, #88]	; (80027b4 <StartupPrint_Routine+0x90>)
 800275a:	f005 fff5 	bl	8008748 <sniprintf>
	DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE);
 800275e:	4b17      	ldr	r3, [pc, #92]	; (80027bc <StartupPrint_Routine+0x98>)
 8002760:	781b      	ldrb	r3, [r3, #0]
 8002762:	2280      	movs	r2, #128	; 0x80
 8002764:	4913      	ldr	r1, [pc, #76]	; (80027b4 <StartupPrint_Routine+0x90>)
 8002766:	4618      	mov	r0, r3
 8002768:	f7fe fbce 	bl	8000f08 <DebugPrint>
	memset(PrintBuffer, '\0', COMM_SIZE);  snprintf(PrintBuffer, COMM_SIZE-1, "\n\r~~~~~~~~~~                   Ion Sensor                  ~~~~~~~~~~" );
 800276c:	2280      	movs	r2, #128	; 0x80
 800276e:	2100      	movs	r1, #0
 8002770:	4810      	ldr	r0, [pc, #64]	; (80027b4 <StartupPrint_Routine+0x90>)
 8002772:	f006 f880 	bl	8008876 <memset>
 8002776:	4a13      	ldr	r2, [pc, #76]	; (80027c4 <StartupPrint_Routine+0xa0>)
 8002778:	217f      	movs	r1, #127	; 0x7f
 800277a:	480e      	ldr	r0, [pc, #56]	; (80027b4 <StartupPrint_Routine+0x90>)
 800277c:	f005 ffe4 	bl	8008748 <sniprintf>
	DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE);
 8002780:	4b0e      	ldr	r3, [pc, #56]	; (80027bc <StartupPrint_Routine+0x98>)
 8002782:	781b      	ldrb	r3, [r3, #0]
 8002784:	2280      	movs	r2, #128	; 0x80
 8002786:	490b      	ldr	r1, [pc, #44]	; (80027b4 <StartupPrint_Routine+0x90>)
 8002788:	4618      	mov	r0, r3
 800278a:	f7fe fbbd 	bl	8000f08 <DebugPrint>
	memset(PrintBuffer, '\0', COMM_SIZE);  snprintf(PrintBuffer, COMM_SIZE-1, "\n\r~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~" );
 800278e:	2280      	movs	r2, #128	; 0x80
 8002790:	2100      	movs	r1, #0
 8002792:	4808      	ldr	r0, [pc, #32]	; (80027b4 <StartupPrint_Routine+0x90>)
 8002794:	f006 f86f 	bl	8008876 <memset>
 8002798:	4a0b      	ldr	r2, [pc, #44]	; (80027c8 <StartupPrint_Routine+0xa4>)
 800279a:	217f      	movs	r1, #127	; 0x7f
 800279c:	4805      	ldr	r0, [pc, #20]	; (80027b4 <StartupPrint_Routine+0x90>)
 800279e:	f005 ffd3 	bl	8008748 <sniprintf>
	DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE);
 80027a2:	4b06      	ldr	r3, [pc, #24]	; (80027bc <StartupPrint_Routine+0x98>)
 80027a4:	781b      	ldrb	r3, [r3, #0]
 80027a6:	2280      	movs	r2, #128	; 0x80
 80027a8:	4902      	ldr	r1, [pc, #8]	; (80027b4 <StartupPrint_Routine+0x90>)
 80027aa:	4618      	mov	r0, r3
 80027ac:	f7fe fbac 	bl	8000f08 <DebugPrint>

}
 80027b0:	bf00      	nop
 80027b2:	bd80      	pop	{r7, pc}
 80027b4:	20000468 	.word	0x20000468
 80027b8:	0800c524 	.word	0x0800c524
 80027bc:	2000001b 	.word	0x2000001b
 80027c0:	0800c570 	.word	0x0800c570
 80027c4:	0800c5b8 	.word	0x0800c5b8
 80027c8:	0800c600 	.word	0x0800c600

080027cc <SystemSettingPrint_Routine>:


//Function to print the sensor information retrieved from the EEPROM IC
void SystemSettingPrint_Routine(void){
 80027cc:	b580      	push	{r7, lr}
 80027ce:	af00      	add	r7, sp, #0

	//Print retrieved information
	memset(PrintBuffer, '\0', COMM_SIZE);  snprintf(PrintBuffer, COMM_SIZE-1, "\n\n\rSystem Information Retrieved:");
 80027d0:	2280      	movs	r2, #128	; 0x80
 80027d2:	2100      	movs	r1, #0
 80027d4:	482e      	ldr	r0, [pc, #184]	; (8002890 <SystemSettingPrint_Routine+0xc4>)
 80027d6:	f006 f84e 	bl	8008876 <memset>
 80027da:	4a2e      	ldr	r2, [pc, #184]	; (8002894 <SystemSettingPrint_Routine+0xc8>)
 80027dc:	217f      	movs	r1, #127	; 0x7f
 80027de:	482c      	ldr	r0, [pc, #176]	; (8002890 <SystemSettingPrint_Routine+0xc4>)
 80027e0:	f005 ffb2 	bl	8008748 <sniprintf>
	DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE);
 80027e4:	4b2c      	ldr	r3, [pc, #176]	; (8002898 <SystemSettingPrint_Routine+0xcc>)
 80027e6:	781b      	ldrb	r3, [r3, #0]
 80027e8:	2280      	movs	r2, #128	; 0x80
 80027ea:	4929      	ldr	r1, [pc, #164]	; (8002890 <SystemSettingPrint_Routine+0xc4>)
 80027ec:	4618      	mov	r0, r3
 80027ee:	f7fe fb8b 	bl	8000f08 <DebugPrint>
	memset(PrintBuffer, '\0', COMM_SIZE);  snprintf(PrintBuffer, COMM_SIZE-1, "\n\r    - Serial Number:\t0x%04X", SysInfo.SerialNumber );
 80027f2:	2280      	movs	r2, #128	; 0x80
 80027f4:	2100      	movs	r1, #0
 80027f6:	4826      	ldr	r0, [pc, #152]	; (8002890 <SystemSettingPrint_Routine+0xc4>)
 80027f8:	f006 f83d 	bl	8008876 <memset>
 80027fc:	4b27      	ldr	r3, [pc, #156]	; (800289c <SystemSettingPrint_Routine+0xd0>)
 80027fe:	889b      	ldrh	r3, [r3, #4]
 8002800:	4a27      	ldr	r2, [pc, #156]	; (80028a0 <SystemSettingPrint_Routine+0xd4>)
 8002802:	217f      	movs	r1, #127	; 0x7f
 8002804:	4822      	ldr	r0, [pc, #136]	; (8002890 <SystemSettingPrint_Routine+0xc4>)
 8002806:	f005 ff9f 	bl	8008748 <sniprintf>
	DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE);
 800280a:	4b23      	ldr	r3, [pc, #140]	; (8002898 <SystemSettingPrint_Routine+0xcc>)
 800280c:	781b      	ldrb	r3, [r3, #0]
 800280e:	2280      	movs	r2, #128	; 0x80
 8002810:	491f      	ldr	r1, [pc, #124]	; (8002890 <SystemSettingPrint_Routine+0xc4>)
 8002812:	4618      	mov	r0, r3
 8002814:	f7fe fb78 	bl	8000f08 <DebugPrint>
	memset(PrintBuffer, '\0', COMM_SIZE);  snprintf(PrintBuffer, COMM_SIZE-1, "\n\r    - CAN Address:\t0x%04X", SysInfo.CAN_Address );
 8002818:	2280      	movs	r2, #128	; 0x80
 800281a:	2100      	movs	r1, #0
 800281c:	481c      	ldr	r0, [pc, #112]	; (8002890 <SystemSettingPrint_Routine+0xc4>)
 800281e:	f006 f82a 	bl	8008876 <memset>
 8002822:	4b1e      	ldr	r3, [pc, #120]	; (800289c <SystemSettingPrint_Routine+0xd0>)
 8002824:	891b      	ldrh	r3, [r3, #8]
 8002826:	4a1f      	ldr	r2, [pc, #124]	; (80028a4 <SystemSettingPrint_Routine+0xd8>)
 8002828:	217f      	movs	r1, #127	; 0x7f
 800282a:	4819      	ldr	r0, [pc, #100]	; (8002890 <SystemSettingPrint_Routine+0xc4>)
 800282c:	f005 ff8c 	bl	8008748 <sniprintf>
	DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE);
 8002830:	4b19      	ldr	r3, [pc, #100]	; (8002898 <SystemSettingPrint_Routine+0xcc>)
 8002832:	781b      	ldrb	r3, [r3, #0]
 8002834:	2280      	movs	r2, #128	; 0x80
 8002836:	4916      	ldr	r1, [pc, #88]	; (8002890 <SystemSettingPrint_Routine+0xc4>)
 8002838:	4618      	mov	r0, r3
 800283a:	f7fe fb65 	bl	8000f08 <DebugPrint>
	memset(PrintBuffer, '\0', COMM_SIZE);  snprintf(PrintBuffer, COMM_SIZE-1, "\n\r    - Sensor Type:\t%u", SysInfo.SensorType);
 800283e:	2280      	movs	r2, #128	; 0x80
 8002840:	2100      	movs	r1, #0
 8002842:	4813      	ldr	r0, [pc, #76]	; (8002890 <SystemSettingPrint_Routine+0xc4>)
 8002844:	f006 f817 	bl	8008876 <memset>
 8002848:	4b14      	ldr	r3, [pc, #80]	; (800289c <SystemSettingPrint_Routine+0xd0>)
 800284a:	799b      	ldrb	r3, [r3, #6]
 800284c:	4a16      	ldr	r2, [pc, #88]	; (80028a8 <SystemSettingPrint_Routine+0xdc>)
 800284e:	217f      	movs	r1, #127	; 0x7f
 8002850:	480f      	ldr	r0, [pc, #60]	; (8002890 <SystemSettingPrint_Routine+0xc4>)
 8002852:	f005 ff79 	bl	8008748 <sniprintf>
	DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE);
 8002856:	4b10      	ldr	r3, [pc, #64]	; (8002898 <SystemSettingPrint_Routine+0xcc>)
 8002858:	781b      	ldrb	r3, [r3, #0]
 800285a:	2280      	movs	r2, #128	; 0x80
 800285c:	490c      	ldr	r1, [pc, #48]	; (8002890 <SystemSettingPrint_Routine+0xc4>)
 800285e:	4618      	mov	r0, r3
 8002860:	f7fe fb52 	bl	8000f08 <DebugPrint>
	memset(PrintBuffer, '\0', COMM_SIZE);  snprintf(PrintBuffer, COMM_SIZE-1, "\n\r    - EEPROM Address:\t0x%04X", SysInfo.EEPROM_Address );
 8002864:	2280      	movs	r2, #128	; 0x80
 8002866:	2100      	movs	r1, #0
 8002868:	4809      	ldr	r0, [pc, #36]	; (8002890 <SystemSettingPrint_Routine+0xc4>)
 800286a:	f006 f804 	bl	8008876 <memset>
 800286e:	4b0b      	ldr	r3, [pc, #44]	; (800289c <SystemSettingPrint_Routine+0xd0>)
 8002870:	895b      	ldrh	r3, [r3, #10]
 8002872:	4a0e      	ldr	r2, [pc, #56]	; (80028ac <SystemSettingPrint_Routine+0xe0>)
 8002874:	217f      	movs	r1, #127	; 0x7f
 8002876:	4806      	ldr	r0, [pc, #24]	; (8002890 <SystemSettingPrint_Routine+0xc4>)
 8002878:	f005 ff66 	bl	8008748 <sniprintf>
	DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE);
 800287c:	4b06      	ldr	r3, [pc, #24]	; (8002898 <SystemSettingPrint_Routine+0xcc>)
 800287e:	781b      	ldrb	r3, [r3, #0]
 8002880:	2280      	movs	r2, #128	; 0x80
 8002882:	4903      	ldr	r1, [pc, #12]	; (8002890 <SystemSettingPrint_Routine+0xc4>)
 8002884:	4618      	mov	r0, r3
 8002886:	f7fe fb3f 	bl	8000f08 <DebugPrint>

}
 800288a:	bf00      	nop
 800288c:	bd80      	pop	{r7, pc}
 800288e:	bf00      	nop
 8002890:	20000468 	.word	0x20000468
 8002894:	0800c648 	.word	0x0800c648
 8002898:	2000001b 	.word	0x2000001b
 800289c:	2000045c 	.word	0x2000045c
 80028a0:	0800c66c 	.word	0x0800c66c
 80028a4:	0800c68c 	.word	0x0800c68c
 80028a8:	0800c6a8 	.word	0x0800c6a8
 80028ac:	0800c6c0 	.word	0x0800c6c0

080028b0 <ControllerPairRoutine>:
////////////////////////////////////// CANBus Pairing System Routines /////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


//Routine to pair a sensor to a controller board when requested by the controller
void ControllerPairRoutine(void){
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b084      	sub	sp, #16
 80028b4:	af00      	add	r7, sp, #0

	memset(PrintBuffer, '\0', COMM_SIZE);  snprintf(PrintBuffer, COMM_SIZE-1, "\n\n\rDevice Pairing Routine Entered"  );
 80028b6:	2280      	movs	r2, #128	; 0x80
 80028b8:	2100      	movs	r1, #0
 80028ba:	4874      	ldr	r0, [pc, #464]	; (8002a8c <ControllerPairRoutine+0x1dc>)
 80028bc:	f005 ffdb 	bl	8008876 <memset>
 80028c0:	4a73      	ldr	r2, [pc, #460]	; (8002a90 <ControllerPairRoutine+0x1e0>)
 80028c2:	217f      	movs	r1, #127	; 0x7f
 80028c4:	4871      	ldr	r0, [pc, #452]	; (8002a8c <ControllerPairRoutine+0x1dc>)
 80028c6:	f005 ff3f 	bl	8008748 <sniprintf>
	DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE);
 80028ca:	4b72      	ldr	r3, [pc, #456]	; (8002a94 <ControllerPairRoutine+0x1e4>)
 80028cc:	781b      	ldrb	r3, [r3, #0]
 80028ce:	2280      	movs	r2, #128	; 0x80
 80028d0:	496e      	ldr	r1, [pc, #440]	; (8002a8c <ControllerPairRoutine+0x1dc>)
 80028d2:	4618      	mov	r0, r3
 80028d4:	f7fe fb18 	bl	8000f08 <DebugPrint>

	//Flag to indicate success of the operation
	_Bool SuccessFlag=true;
 80028d8:	2301      	movs	r3, #1
 80028da:	73fb      	strb	r3, [r7, #15]
	_Bool TimeoutFlag=false;
 80028dc:	2300      	movs	r3, #0
 80028de:	73bb      	strb	r3, [r7, #14]

	//Create CAN message with all sensor ID information
	uint8_t MessageBuffer[8] = {0x00};								//Create data buffer
 80028e0:	2300      	movs	r3, #0
 80028e2:	607b      	str	r3, [r7, #4]
 80028e4:	2300      	movs	r3, #0
 80028e6:	60bb      	str	r3, [r7, #8]
	MessageBuffer[0]=0xA0;											//Store instruction code
 80028e8:	23a0      	movs	r3, #160	; 0xa0
 80028ea:	713b      	strb	r3, [r7, #4]
	uint16_to_bytes(SysInfo.CAN_Address,  &MessageBuffer[1]);		//Store device CANBus address
 80028ec:	4b6a      	ldr	r3, [pc, #424]	; (8002a98 <ControllerPairRoutine+0x1e8>)
 80028ee:	891a      	ldrh	r2, [r3, #8]
 80028f0:	1d3b      	adds	r3, r7, #4
 80028f2:	3301      	adds	r3, #1
 80028f4:	4619      	mov	r1, r3
 80028f6:	4610      	mov	r0, r2
 80028f8:	f7fe f9fc 	bl	8000cf4 <uint16_to_bytes>
	uint16_to_bytes(SysInfo.SerialNumber, &MessageBuffer[3]);		//Store device serial number
 80028fc:	4b66      	ldr	r3, [pc, #408]	; (8002a98 <ControllerPairRoutine+0x1e8>)
 80028fe:	889a      	ldrh	r2, [r3, #4]
 8002900:	1d3b      	adds	r3, r7, #4
 8002902:	3303      	adds	r3, #3
 8002904:	4619      	mov	r1, r3
 8002906:	4610      	mov	r0, r2
 8002908:	f7fe f9f4 	bl	8000cf4 <uint16_to_bytes>
	MessageBuffer[5] = SysInfo.SensorType;							//Store device sensor type
 800290c:	4b62      	ldr	r3, [pc, #392]	; (8002a98 <ControllerPairRoutine+0x1e8>)
 800290e:	799b      	ldrb	r3, [r3, #6]
 8002910:	727b      	strb	r3, [r7, #9]

	//Send device pair message to controller's FIFO1
	pTxHeader.StdId = 0x0600 | SysInfo.CAN_Address;
 8002912:	4b61      	ldr	r3, [pc, #388]	; (8002a98 <ControllerPairRoutine+0x1e8>)
 8002914:	891b      	ldrh	r3, [r3, #8]
 8002916:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800291a:	b29b      	uxth	r3, r3
 800291c:	461a      	mov	r2, r3
 800291e:	4b5f      	ldr	r3, [pc, #380]	; (8002a9c <ControllerPairRoutine+0x1ec>)
 8002920:	601a      	str	r2, [r3, #0]
	ret=HAL_CAN_AddTxMessage(&CANBUS_EXT, &pTxHeader, MessageBuffer, &TxMailbox);
 8002922:	1d3a      	adds	r2, r7, #4
 8002924:	4b5e      	ldr	r3, [pc, #376]	; (8002aa0 <ControllerPairRoutine+0x1f0>)
 8002926:	495d      	ldr	r1, [pc, #372]	; (8002a9c <ControllerPairRoutine+0x1ec>)
 8002928:	485e      	ldr	r0, [pc, #376]	; (8002aa4 <ControllerPairRoutine+0x1f4>)
 800292a:	f000 fff6 	bl	800391a <HAL_CAN_AddTxMessage>
 800292e:	4603      	mov	r3, r0
 8002930:	461a      	mov	r2, r3
 8002932:	4b5d      	ldr	r3, [pc, #372]	; (8002aa8 <ControllerPairRoutine+0x1f8>)
 8002934:	701a      	strb	r2, [r3, #0]
	if(ret!=HAL_OK){
 8002936:	4b5c      	ldr	r3, [pc, #368]	; (8002aa8 <ControllerPairRoutine+0x1f8>)
 8002938:	781b      	ldrb	r3, [r3, #0]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d013      	beq.n	8002966 <ControllerPairRoutine+0xb6>
		SuccessFlag = false;
 800293e:	2300      	movs	r3, #0
 8002940:	73fb      	strb	r3, [r7, #15]
		memset(PrintBuffer, '\0', COMM_SIZE);  snprintf(PrintBuffer, COMM_SIZE-1, "\n\r\t- Pairing Failed - Message failed to Send"  );
 8002942:	2280      	movs	r2, #128	; 0x80
 8002944:	2100      	movs	r1, #0
 8002946:	4851      	ldr	r0, [pc, #324]	; (8002a8c <ControllerPairRoutine+0x1dc>)
 8002948:	f005 ff95 	bl	8008876 <memset>
 800294c:	4a57      	ldr	r2, [pc, #348]	; (8002aac <ControllerPairRoutine+0x1fc>)
 800294e:	217f      	movs	r1, #127	; 0x7f
 8002950:	484e      	ldr	r0, [pc, #312]	; (8002a8c <ControllerPairRoutine+0x1dc>)
 8002952:	f005 fef9 	bl	8008748 <sniprintf>
		DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE);
 8002956:	4b4f      	ldr	r3, [pc, #316]	; (8002a94 <ControllerPairRoutine+0x1e4>)
 8002958:	781b      	ldrb	r3, [r3, #0]
 800295a:	2280      	movs	r2, #128	; 0x80
 800295c:	494b      	ldr	r1, [pc, #300]	; (8002a8c <ControllerPairRoutine+0x1dc>)
 800295e:	4618      	mov	r0, r3
 8002960:	f7fe fad2 	bl	8000f08 <DebugPrint>
 8002964:	e010      	b.n	8002988 <ControllerPairRoutine+0xd8>
	}else{
		memset(PrintBuffer, '\0', COMM_SIZE);  snprintf(PrintBuffer, COMM_SIZE-1, "\n\r\t- Pairing Data Sent"  );
 8002966:	2280      	movs	r2, #128	; 0x80
 8002968:	2100      	movs	r1, #0
 800296a:	4848      	ldr	r0, [pc, #288]	; (8002a8c <ControllerPairRoutine+0x1dc>)
 800296c:	f005 ff83 	bl	8008876 <memset>
 8002970:	4a4f      	ldr	r2, [pc, #316]	; (8002ab0 <ControllerPairRoutine+0x200>)
 8002972:	217f      	movs	r1, #127	; 0x7f
 8002974:	4845      	ldr	r0, [pc, #276]	; (8002a8c <ControllerPairRoutine+0x1dc>)
 8002976:	f005 fee7 	bl	8008748 <sniprintf>
		DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE);
 800297a:	4b46      	ldr	r3, [pc, #280]	; (8002a94 <ControllerPairRoutine+0x1e4>)
 800297c:	781b      	ldrb	r3, [r3, #0]
 800297e:	2280      	movs	r2, #128	; 0x80
 8002980:	4942      	ldr	r1, [pc, #264]	; (8002a8c <ControllerPairRoutine+0x1dc>)
 8002982:	4618      	mov	r0, r3
 8002984:	f7fe fac0 	bl	8000f08 <DebugPrint>
	}

	//Setup parameters for the following routine to receive a validation message from the controller
	memset(MessageBuffer,0,8);				//Reset MessageBuffer
 8002988:	1d3b      	adds	r3, r7, #4
 800298a:	2208      	movs	r2, #8
 800298c:	2100      	movs	r1, #0
 800298e:	4618      	mov	r0, r3
 8002990:	f005 ff71 	bl	8008876 <memset>
	TIMER_TIMEOUT.Instance->CNT = 0;		//Set timeout timer to 0
 8002994:	4b47      	ldr	r3, [pc, #284]	; (8002ab4 <ControllerPairRoutine+0x204>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	2200      	movs	r2, #0
 800299a:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_TIM_Base_Start(&TIMER_TIMEOUT);		//Start timeout timer
 800299c:	4845      	ldr	r0, [pc, #276]	; (8002ab4 <ControllerPairRoutine+0x204>)
 800299e:	f003 ffa1 	bl	80068e4 <HAL_TIM_Base_Start>

	//Wait for pair complete message from the controller over FIFO1 to validate operation
	while( SuccessFlag==true && TimeoutFlag==false ){
 80029a2:	e022      	b.n	80029ea <ControllerPairRoutine+0x13a>

		//Check to see if a message has arrived over FIFO1
		if( HAL_CAN_GetRxFifoFillLevel(&CANBUS_EXT, CAN_RX_FIFO1) != 0 ){
 80029a4:	2101      	movs	r1, #1
 80029a6:	483f      	ldr	r0, [pc, #252]	; (8002aa4 <ControllerPairRoutine+0x1f4>)
 80029a8:	f001 f9a9 	bl	8003cfe <HAL_CAN_GetRxFifoFillLevel>
 80029ac:	4603      	mov	r3, r0
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d010      	beq.n	80029d4 <ControllerPairRoutine+0x124>
			ret = HAL_CAN_GetRxMessage(&CANBUS_EXT, CAN_RX_FIFO1, &pRxHeader, MessageBuffer);
 80029b2:	1d3b      	adds	r3, r7, #4
 80029b4:	4a40      	ldr	r2, [pc, #256]	; (8002ab8 <ControllerPairRoutine+0x208>)
 80029b6:	2101      	movs	r1, #1
 80029b8:	483a      	ldr	r0, [pc, #232]	; (8002aa4 <ControllerPairRoutine+0x1f4>)
 80029ba:	f001 f87e 	bl	8003aba <HAL_CAN_GetRxMessage>
 80029be:	4603      	mov	r3, r0
 80029c0:	461a      	mov	r2, r3
 80029c2:	4b39      	ldr	r3, [pc, #228]	; (8002aa8 <ControllerPairRoutine+0x1f8>)
 80029c4:	701a      	strb	r2, [r3, #0]
			if(ret!=HAL_OK){ SuccessFlag = false; }
 80029c6:	4b38      	ldr	r3, [pc, #224]	; (8002aa8 <ControllerPairRoutine+0x1f8>)
 80029c8:	781b      	ldrb	r3, [r3, #0]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d017      	beq.n	80029fe <ControllerPairRoutine+0x14e>
 80029ce:	2300      	movs	r3, #0
 80029d0:	73fb      	strb	r3, [r7, #15]
			break;
 80029d2:	e014      	b.n	80029fe <ControllerPairRoutine+0x14e>
		}

		//Check to see if the timeout period has elapsed
		if( __HAL_TIM_GET_COUNTER(&TIMER_TIMEOUT) > TimeoutPeriod  ){
 80029d4:	4b37      	ldr	r3, [pc, #220]	; (8002ab4 <ControllerPairRoutine+0x204>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029da:	f241 3288 	movw	r2, #5000	; 0x1388
 80029de:	4293      	cmp	r3, r2
 80029e0:	d903      	bls.n	80029ea <ControllerPairRoutine+0x13a>
			TimeoutFlag=true;
 80029e2:	2301      	movs	r3, #1
 80029e4:	73bb      	strb	r3, [r7, #14]
			SuccessFlag=false;
 80029e6:	2300      	movs	r3, #0
 80029e8:	73fb      	strb	r3, [r7, #15]
	while( SuccessFlag==true && TimeoutFlag==false ){
 80029ea:	7bfb      	ldrb	r3, [r7, #15]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d007      	beq.n	8002a00 <ControllerPairRoutine+0x150>
 80029f0:	7bbb      	ldrb	r3, [r7, #14]
 80029f2:	f083 0301 	eor.w	r3, r3, #1
 80029f6:	b2db      	uxtb	r3, r3
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d1d3      	bne.n	80029a4 <ControllerPairRoutine+0xf4>
 80029fc:	e000      	b.n	8002a00 <ControllerPairRoutine+0x150>
			break;
 80029fe:	bf00      	nop
		}

	}

	//Stop timer before routine completion
	HAL_TIM_Base_Stop(&TIMER_TIMEOUT);
 8002a00:	482c      	ldr	r0, [pc, #176]	; (8002ab4 <ControllerPairRoutine+0x204>)
 8002a02:	f003 ffc9 	bl	8006998 <HAL_TIM_Base_Stop>
	memset(PrintBuffer, '\0', COMM_SIZE);  snprintf(PrintBuffer, COMM_SIZE-1, "\n\r\t- Waited %lums for controller confirmation", __HAL_TIM_GET_COUNTER(&TIMER_TIMEOUT)  );
 8002a06:	2280      	movs	r2, #128	; 0x80
 8002a08:	2100      	movs	r1, #0
 8002a0a:	4820      	ldr	r0, [pc, #128]	; (8002a8c <ControllerPairRoutine+0x1dc>)
 8002a0c:	f005 ff33 	bl	8008876 <memset>
 8002a10:	4b28      	ldr	r3, [pc, #160]	; (8002ab4 <ControllerPairRoutine+0x204>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a16:	4a29      	ldr	r2, [pc, #164]	; (8002abc <ControllerPairRoutine+0x20c>)
 8002a18:	217f      	movs	r1, #127	; 0x7f
 8002a1a:	481c      	ldr	r0, [pc, #112]	; (8002a8c <ControllerPairRoutine+0x1dc>)
 8002a1c:	f005 fe94 	bl	8008748 <sniprintf>
	DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE);
 8002a20:	4b1c      	ldr	r3, [pc, #112]	; (8002a94 <ControllerPairRoutine+0x1e4>)
 8002a22:	781b      	ldrb	r3, [r3, #0]
 8002a24:	2280      	movs	r2, #128	; 0x80
 8002a26:	4919      	ldr	r1, [pc, #100]	; (8002a8c <ControllerPairRoutine+0x1dc>)
 8002a28:	4618      	mov	r0, r3
 8002a2a:	f7fe fa6d 	bl	8000f08 <DebugPrint>
	TIMER_TIMEOUT.Instance->CNT = 0;
 8002a2e:	4b21      	ldr	r3, [pc, #132]	; (8002ab4 <ControllerPairRoutine+0x204>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	2200      	movs	r2, #0
 8002a34:	625a      	str	r2, [r3, #36]	; 0x24

	//Print routine exit message
	if( SuccessFlag==true ){
 8002a36:	7bfb      	ldrb	r3, [r7, #15]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d011      	beq.n	8002a60 <ControllerPairRoutine+0x1b0>
  		  memset(PrintBuffer, '\0', COMM_SIZE);  snprintf(PrintBuffer, COMM_SIZE-1, "\n\rSensor pair SUCCESSFUL - Exiting Routine"  );
 8002a3c:	2280      	movs	r2, #128	; 0x80
 8002a3e:	2100      	movs	r1, #0
 8002a40:	4812      	ldr	r0, [pc, #72]	; (8002a8c <ControllerPairRoutine+0x1dc>)
 8002a42:	f005 ff18 	bl	8008876 <memset>
 8002a46:	4a1e      	ldr	r2, [pc, #120]	; (8002ac0 <ControllerPairRoutine+0x210>)
 8002a48:	217f      	movs	r1, #127	; 0x7f
 8002a4a:	4810      	ldr	r0, [pc, #64]	; (8002a8c <ControllerPairRoutine+0x1dc>)
 8002a4c:	f005 fe7c 	bl	8008748 <sniprintf>
  		  DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE);
 8002a50:	4b10      	ldr	r3, [pc, #64]	; (8002a94 <ControllerPairRoutine+0x1e4>)
 8002a52:	781b      	ldrb	r3, [r3, #0]
 8002a54:	2280      	movs	r2, #128	; 0x80
 8002a56:	490d      	ldr	r1, [pc, #52]	; (8002a8c <ControllerPairRoutine+0x1dc>)
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f7fe fa55 	bl	8000f08 <DebugPrint>
	}else{
		  memset(PrintBuffer, '\0', COMM_SIZE);  snprintf(PrintBuffer, COMM_SIZE-1, "\n\rSensor pair FAILED - Exiting Routine"  );
		  DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE);
	}

}
 8002a5e:	e010      	b.n	8002a82 <ControllerPairRoutine+0x1d2>
		  memset(PrintBuffer, '\0', COMM_SIZE);  snprintf(PrintBuffer, COMM_SIZE-1, "\n\rSensor pair FAILED - Exiting Routine"  );
 8002a60:	2280      	movs	r2, #128	; 0x80
 8002a62:	2100      	movs	r1, #0
 8002a64:	4809      	ldr	r0, [pc, #36]	; (8002a8c <ControllerPairRoutine+0x1dc>)
 8002a66:	f005 ff06 	bl	8008876 <memset>
 8002a6a:	4a16      	ldr	r2, [pc, #88]	; (8002ac4 <ControllerPairRoutine+0x214>)
 8002a6c:	217f      	movs	r1, #127	; 0x7f
 8002a6e:	4807      	ldr	r0, [pc, #28]	; (8002a8c <ControllerPairRoutine+0x1dc>)
 8002a70:	f005 fe6a 	bl	8008748 <sniprintf>
		  DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE);
 8002a74:	4b07      	ldr	r3, [pc, #28]	; (8002a94 <ControllerPairRoutine+0x1e4>)
 8002a76:	781b      	ldrb	r3, [r3, #0]
 8002a78:	2280      	movs	r2, #128	; 0x80
 8002a7a:	4904      	ldr	r1, [pc, #16]	; (8002a8c <ControllerPairRoutine+0x1dc>)
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	f7fe fa43 	bl	8000f08 <DebugPrint>
}
 8002a82:	bf00      	nop
 8002a84:	3710      	adds	r7, #16
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}
 8002a8a:	bf00      	nop
 8002a8c:	20000468 	.word	0x20000468
 8002a90:	0800c6e0 	.word	0x0800c6e0
 8002a94:	2000001b 	.word	0x2000001b
 8002a98:	2000045c 	.word	0x2000045c
 8002a9c:	200004ec 	.word	0x200004ec
 8002aa0:	200004e8 	.word	0x200004e8
 8002aa4:	20000210 	.word	0x20000210
 8002aa8:	20000528 	.word	0x20000528
 8002aac:	0800c704 	.word	0x0800c704
 8002ab0:	0800c734 	.word	0x0800c734
 8002ab4:	20000388 	.word	0x20000388
 8002ab8:	20000504 	.word	0x20000504
 8002abc:	0800c74c 	.word	0x0800c74c
 8002ac0:	0800c77c 	.word	0x0800c77c
 8002ac4:	0800c7a8 	.word	0x0800c7a8

08002ac8 <ControllerPingRoutine>:




//Routine to ping the controller back when requested
void ControllerPingRoutine(void){
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b084      	sub	sp, #16
 8002acc:	af00      	add	r7, sp, #0

    //Print routine enter message
	memset(PrintBuffer, '\0', COMM_SIZE);  snprintf(PrintBuffer, COMM_SIZE-1, "\n\n\rSensor Ping Routine Entered"  );
 8002ace:	2280      	movs	r2, #128	; 0x80
 8002ad0:	2100      	movs	r1, #0
 8002ad2:	482c      	ldr	r0, [pc, #176]	; (8002b84 <ControllerPingRoutine+0xbc>)
 8002ad4:	f005 fecf 	bl	8008876 <memset>
 8002ad8:	4a2b      	ldr	r2, [pc, #172]	; (8002b88 <ControllerPingRoutine+0xc0>)
 8002ada:	217f      	movs	r1, #127	; 0x7f
 8002adc:	4829      	ldr	r0, [pc, #164]	; (8002b84 <ControllerPingRoutine+0xbc>)
 8002ade:	f005 fe33 	bl	8008748 <sniprintf>
	DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE);
 8002ae2:	4b2a      	ldr	r3, [pc, #168]	; (8002b8c <ControllerPingRoutine+0xc4>)
 8002ae4:	781b      	ldrb	r3, [r3, #0]
 8002ae6:	2280      	movs	r2, #128	; 0x80
 8002ae8:	4926      	ldr	r1, [pc, #152]	; (8002b84 <ControllerPingRoutine+0xbc>)
 8002aea:	4618      	mov	r0, r3
 8002aec:	f7fe fa0c 	bl	8000f08 <DebugPrint>

	//Flag to indicate success of the operation
	_Bool SuccessFlag=true;
 8002af0:	2301      	movs	r3, #1
 8002af2:	73fb      	strb	r3, [r7, #15]

	//Create CAN message with ping return information
	uint8_t MessageBuffer[8] = {0xA2, 0xCD, 0x34, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8002af4:	4a26      	ldr	r2, [pc, #152]	; (8002b90 <ControllerPingRoutine+0xc8>)
 8002af6:	1d3b      	adds	r3, r7, #4
 8002af8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002afc:	e883 0003 	stmia.w	r3, {r0, r1}

	//Transmit ping message
	pTxHeader.StdId = 0x0600 | SysInfo.CAN_Address;
 8002b00:	4b24      	ldr	r3, [pc, #144]	; (8002b94 <ControllerPingRoutine+0xcc>)
 8002b02:	891b      	ldrh	r3, [r3, #8]
 8002b04:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8002b08:	b29b      	uxth	r3, r3
 8002b0a:	461a      	mov	r2, r3
 8002b0c:	4b22      	ldr	r3, [pc, #136]	; (8002b98 <ControllerPingRoutine+0xd0>)
 8002b0e:	601a      	str	r2, [r3, #0]
	ret=HAL_CAN_AddTxMessage(&CANBUS_EXT, &pTxHeader, MessageBuffer, &TxMailbox);
 8002b10:	1d3a      	adds	r2, r7, #4
 8002b12:	4b22      	ldr	r3, [pc, #136]	; (8002b9c <ControllerPingRoutine+0xd4>)
 8002b14:	4920      	ldr	r1, [pc, #128]	; (8002b98 <ControllerPingRoutine+0xd0>)
 8002b16:	4822      	ldr	r0, [pc, #136]	; (8002ba0 <ControllerPingRoutine+0xd8>)
 8002b18:	f000 feff 	bl	800391a <HAL_CAN_AddTxMessage>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	461a      	mov	r2, r3
 8002b20:	4b20      	ldr	r3, [pc, #128]	; (8002ba4 <ControllerPingRoutine+0xdc>)
 8002b22:	701a      	strb	r2, [r3, #0]
	if(ret!=HAL_OK){ SuccessFlag = false; }
 8002b24:	4b1f      	ldr	r3, [pc, #124]	; (8002ba4 <ControllerPingRoutine+0xdc>)
 8002b26:	781b      	ldrb	r3, [r3, #0]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d001      	beq.n	8002b30 <ControllerPingRoutine+0x68>
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	73fb      	strb	r3, [r7, #15]

	//Print routine exit message
	if(SuccessFlag==true){
 8002b30:	7bfb      	ldrb	r3, [r7, #15]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d011      	beq.n	8002b5a <ControllerPingRoutine+0x92>
  	    memset(PrintBuffer, '\0', COMM_SIZE);  snprintf(PrintBuffer, COMM_SIZE-1, "\n\rSensor Ping SUCCESS - Exiting Routine"  );
 8002b36:	2280      	movs	r2, #128	; 0x80
 8002b38:	2100      	movs	r1, #0
 8002b3a:	4812      	ldr	r0, [pc, #72]	; (8002b84 <ControllerPingRoutine+0xbc>)
 8002b3c:	f005 fe9b 	bl	8008876 <memset>
 8002b40:	4a19      	ldr	r2, [pc, #100]	; (8002ba8 <ControllerPingRoutine+0xe0>)
 8002b42:	217f      	movs	r1, #127	; 0x7f
 8002b44:	480f      	ldr	r0, [pc, #60]	; (8002b84 <ControllerPingRoutine+0xbc>)
 8002b46:	f005 fdff 	bl	8008748 <sniprintf>
  		DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE);
 8002b4a:	4b10      	ldr	r3, [pc, #64]	; (8002b8c <ControllerPingRoutine+0xc4>)
 8002b4c:	781b      	ldrb	r3, [r3, #0]
 8002b4e:	2280      	movs	r2, #128	; 0x80
 8002b50:	490c      	ldr	r1, [pc, #48]	; (8002b84 <ControllerPingRoutine+0xbc>)
 8002b52:	4618      	mov	r0, r3
 8002b54:	f7fe f9d8 	bl	8000f08 <DebugPrint>
	}else{
	    memset(PrintBuffer, '\0', COMM_SIZE);  snprintf(PrintBuffer, COMM_SIZE-1, "\n\rSensor Ping FAILED - Exiting Routine"  );
		DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE);
	}

}
 8002b58:	e010      	b.n	8002b7c <ControllerPingRoutine+0xb4>
	    memset(PrintBuffer, '\0', COMM_SIZE);  snprintf(PrintBuffer, COMM_SIZE-1, "\n\rSensor Ping FAILED - Exiting Routine"  );
 8002b5a:	2280      	movs	r2, #128	; 0x80
 8002b5c:	2100      	movs	r1, #0
 8002b5e:	4809      	ldr	r0, [pc, #36]	; (8002b84 <ControllerPingRoutine+0xbc>)
 8002b60:	f005 fe89 	bl	8008876 <memset>
 8002b64:	4a11      	ldr	r2, [pc, #68]	; (8002bac <ControllerPingRoutine+0xe4>)
 8002b66:	217f      	movs	r1, #127	; 0x7f
 8002b68:	4806      	ldr	r0, [pc, #24]	; (8002b84 <ControllerPingRoutine+0xbc>)
 8002b6a:	f005 fded 	bl	8008748 <sniprintf>
		DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE);
 8002b6e:	4b07      	ldr	r3, [pc, #28]	; (8002b8c <ControllerPingRoutine+0xc4>)
 8002b70:	781b      	ldrb	r3, [r3, #0]
 8002b72:	2280      	movs	r2, #128	; 0x80
 8002b74:	4903      	ldr	r1, [pc, #12]	; (8002b84 <ControllerPingRoutine+0xbc>)
 8002b76:	4618      	mov	r0, r3
 8002b78:	f7fe f9c6 	bl	8000f08 <DebugPrint>
}
 8002b7c:	bf00      	nop
 8002b7e:	3710      	adds	r7, #16
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bd80      	pop	{r7, pc}
 8002b84:	20000468 	.word	0x20000468
 8002b88:	0800c7d0 	.word	0x0800c7d0
 8002b8c:	2000001b 	.word	0x2000001b
 8002b90:	0800c840 	.word	0x0800c840
 8002b94:	2000045c 	.word	0x2000045c
 8002b98:	200004ec 	.word	0x200004ec
 8002b9c:	200004e8 	.word	0x200004e8
 8002ba0:	20000210 	.word	0x20000210
 8002ba4:	20000528 	.word	0x20000528
 8002ba8:	0800c7f0 	.word	0x0800c7f0
 8002bac:	0800c818 	.word	0x0800c818

08002bb0 <SensorMeasurementRoutine>:
////////////////////////////////////// Ion Measurement and Transmit Routines //////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


//Routine to measure data from the two sensors and send it to the controller
void SensorMeasurementRoutine(void){
 8002bb0:	b480      	push	{r7}
 8002bb2:	af00      	add	r7, sp, #0
		memset(PrintBuffer, '\0', COMM_SIZE);  snprintf(PrintBuffer, COMM_SIZE-1, "\n\rSensor Measurement Routine FAILED - Exiting Routine" );
		DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE);
	}
*/

}
 8002bb4:	bf00      	nop
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbc:	4770      	bx	lr
	...

08002bc0 <SystemActivation>:
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////// System Initialization and Activation Routine ///////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


_Bool SystemActivation(void){
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b086      	sub	sp, #24
 8002bc4:	af00      	add	r7, sp, #0

	_Bool SystemActivationFlag = true;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	75fb      	strb	r3, [r7, #23]

	//////////////////////////////////////////////////////////
	//////////// INITIAL PRINT MESSAGE ///////////////////////
	//////////////////////////////////////////////////////////

	memset(PrintBuffer, '\0', COMM_SIZE); snprintf(PrintBuffer, COMM_SIZE-1,"\n\n\rStarting subsystem activation sequence:"  );
 8002bca:	2280      	movs	r2, #128	; 0x80
 8002bcc:	2100      	movs	r1, #0
 8002bce:	48a6      	ldr	r0, [pc, #664]	; (8002e68 <SystemActivation+0x2a8>)
 8002bd0:	f005 fe51 	bl	8008876 <memset>
 8002bd4:	4aa5      	ldr	r2, [pc, #660]	; (8002e6c <SystemActivation+0x2ac>)
 8002bd6:	217f      	movs	r1, #127	; 0x7f
 8002bd8:	48a3      	ldr	r0, [pc, #652]	; (8002e68 <SystemActivation+0x2a8>)
 8002bda:	f005 fdb5 	bl	8008748 <sniprintf>
	DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE);
 8002bde:	4ba4      	ldr	r3, [pc, #656]	; (8002e70 <SystemActivation+0x2b0>)
 8002be0:	781b      	ldrb	r3, [r3, #0]
 8002be2:	2280      	movs	r2, #128	; 0x80
 8002be4:	49a0      	ldr	r1, [pc, #640]	; (8002e68 <SystemActivation+0x2a8>)
 8002be6:	4618      	mov	r0, r3
 8002be8:	f7fe f98e 	bl	8000f08 <DebugPrint>
	////////////////////////////////////////////////////////////////
	/////////// Activate all system timers ///////////////////////
	////////////////////////////////////////////////////////////////

	//Start heartbeat timer
	ret = HAL_TIM_Base_Start_IT(&TIMER_HRT);
 8002bec:	48a1      	ldr	r0, [pc, #644]	; (8002e74 <SystemActivation+0x2b4>)
 8002bee:	f003 fefb 	bl	80069e8 <HAL_TIM_Base_Start_IT>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	461a      	mov	r2, r3
 8002bf6:	4ba0      	ldr	r3, [pc, #640]	; (8002e78 <SystemActivation+0x2b8>)
 8002bf8:	701a      	strb	r2, [r3, #0]
	if(ret == HAL_OK){
 8002bfa:	4b9f      	ldr	r3, [pc, #636]	; (8002e78 <SystemActivation+0x2b8>)
 8002bfc:	781b      	ldrb	r3, [r3, #0]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d111      	bne.n	8002c26 <SystemActivation+0x66>
		memset(PrintBuffer, '\0', COMM_SIZE); snprintf(PrintBuffer, COMM_SIZE-1,"\n\r\t- Heartbeat timer started"  );
 8002c02:	2280      	movs	r2, #128	; 0x80
 8002c04:	2100      	movs	r1, #0
 8002c06:	4898      	ldr	r0, [pc, #608]	; (8002e68 <SystemActivation+0x2a8>)
 8002c08:	f005 fe35 	bl	8008876 <memset>
 8002c0c:	4a9b      	ldr	r2, [pc, #620]	; (8002e7c <SystemActivation+0x2bc>)
 8002c0e:	217f      	movs	r1, #127	; 0x7f
 8002c10:	4895      	ldr	r0, [pc, #596]	; (8002e68 <SystemActivation+0x2a8>)
 8002c12:	f005 fd99 	bl	8008748 <sniprintf>
		DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE);
 8002c16:	4b96      	ldr	r3, [pc, #600]	; (8002e70 <SystemActivation+0x2b0>)
 8002c18:	781b      	ldrb	r3, [r3, #0]
 8002c1a:	2280      	movs	r2, #128	; 0x80
 8002c1c:	4992      	ldr	r1, [pc, #584]	; (8002e68 <SystemActivation+0x2a8>)
 8002c1e:	4618      	mov	r0, r3
 8002c20:	f7fe f972 	bl	8000f08 <DebugPrint>
 8002c24:	e012      	b.n	8002c4c <SystemActivation+0x8c>
	}else{
		memset(PrintBuffer, '\0', COMM_SIZE); snprintf(PrintBuffer, COMM_SIZE-1,"\n\r\t- Heartbeat timer failed to start"  );
 8002c26:	2280      	movs	r2, #128	; 0x80
 8002c28:	2100      	movs	r1, #0
 8002c2a:	488f      	ldr	r0, [pc, #572]	; (8002e68 <SystemActivation+0x2a8>)
 8002c2c:	f005 fe23 	bl	8008876 <memset>
 8002c30:	4a93      	ldr	r2, [pc, #588]	; (8002e80 <SystemActivation+0x2c0>)
 8002c32:	217f      	movs	r1, #127	; 0x7f
 8002c34:	488c      	ldr	r0, [pc, #560]	; (8002e68 <SystemActivation+0x2a8>)
 8002c36:	f005 fd87 	bl	8008748 <sniprintf>
		DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE);
 8002c3a:	4b8d      	ldr	r3, [pc, #564]	; (8002e70 <SystemActivation+0x2b0>)
 8002c3c:	781b      	ldrb	r3, [r3, #0]
 8002c3e:	2280      	movs	r2, #128	; 0x80
 8002c40:	4989      	ldr	r1, [pc, #548]	; (8002e68 <SystemActivation+0x2a8>)
 8002c42:	4618      	mov	r0, r3
 8002c44:	f7fe f960 	bl	8000f08 <DebugPrint>
		SystemActivationFlag = false;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	75fb      	strb	r3, [r7, #23]
	//////////////////////////////////////////////////////////////////////////////
	/////////////// Initialize all outputs to a known state //////////////////////
	//////////////////////////////////////////////////////////////////////////////

	//Set all output pins to the correct state
	Set_LED_HeartBeat(0);
 8002c4c:	2000      	movs	r0, #0
 8002c4e:	f7fe f89b 	bl	8000d88 <Set_LED_HeartBeat>
	Set_LED_Indication1(0);
 8002c52:	2000      	movs	r0, #0
 8002c54:	f7fe f8aa 	bl	8000dac <Set_LED_Indication1>
	Set_LED_Indication2(0);
 8002c58:	2000      	movs	r0, #0
 8002c5a:	f7fe f8b9 	bl	8000dd0 <Set_LED_Indication2>
	Set_LED_Indication3(0);
 8002c5e:	2000      	movs	r0, #0
 8002c60:	f7fe f8c8 	bl	8000df4 <Set_LED_Indication3>
	Set_LED_Indication4(0);
 8002c64:	2000      	movs	r0, #0
 8002c66:	f7fe f8d7 	bl	8000e18 <Set_LED_Indication4>
	Set_LED_Indication5(0);
 8002c6a:	2000      	movs	r0, #0
 8002c6c:	f7fe f8e6 	bl	8000e3c <Set_LED_Indication5>
	Set_LED_Metal(0);
 8002c70:	2000      	movs	r0, #0
 8002c72:	f7fe f8f5 	bl	8000e60 <Set_LED_Metal>
	Set_LED_Turbidity(0);
 8002c76:	2000      	movs	r0, #0
 8002c78:	f7fe f904 	bl	8000e84 <Set_LED_Turbidity>
	Set_Flash_CS(1);
 8002c7c:	2001      	movs	r0, #1
 8002c7e:	f7fe f913 	bl	8000ea8 <Set_Flash_CS>
	Set_Flash_WP(1);
 8002c82:	2001      	movs	r0, #1
 8002c84:	f7fe f922 	bl	8000ecc <Set_Flash_WP>

	//Print sequence load message
	memset(PrintBuffer, '\0', COMM_SIZE); snprintf(PrintBuffer, COMM_SIZE-1,"\n\r\t- All output pins set"  );
 8002c88:	2280      	movs	r2, #128	; 0x80
 8002c8a:	2100      	movs	r1, #0
 8002c8c:	4876      	ldr	r0, [pc, #472]	; (8002e68 <SystemActivation+0x2a8>)
 8002c8e:	f005 fdf2 	bl	8008876 <memset>
 8002c92:	4a7c      	ldr	r2, [pc, #496]	; (8002e84 <SystemActivation+0x2c4>)
 8002c94:	217f      	movs	r1, #127	; 0x7f
 8002c96:	4874      	ldr	r0, [pc, #464]	; (8002e68 <SystemActivation+0x2a8>)
 8002c98:	f005 fd56 	bl	8008748 <sniprintf>
	DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE);
 8002c9c:	4b74      	ldr	r3, [pc, #464]	; (8002e70 <SystemActivation+0x2b0>)
 8002c9e:	781b      	ldrb	r3, [r3, #0]
 8002ca0:	2280      	movs	r2, #128	; 0x80
 8002ca2:	4971      	ldr	r1, [pc, #452]	; (8002e68 <SystemActivation+0x2a8>)
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	f7fe f92f 	bl	8000f08 <DebugPrint>
	//////////////////////////////////////////////////////////////////////////////
	/////////////// Initialize MCP3421 ADC IC  ///////////////////////////////////
	//////////////////////////////////////////////////////////////////////////////

	//Print sequence load message
	memset(PrintBuffer, '\0', COMM_SIZE); snprintf(PrintBuffer,COMM_SIZE-1, "\n\rInitializing MCP3421 ADC: "  );
 8002caa:	2280      	movs	r2, #128	; 0x80
 8002cac:	2100      	movs	r1, #0
 8002cae:	486e      	ldr	r0, [pc, #440]	; (8002e68 <SystemActivation+0x2a8>)
 8002cb0:	f005 fde1 	bl	8008876 <memset>
 8002cb4:	4a74      	ldr	r2, [pc, #464]	; (8002e88 <SystemActivation+0x2c8>)
 8002cb6:	217f      	movs	r1, #127	; 0x7f
 8002cb8:	486b      	ldr	r0, [pc, #428]	; (8002e68 <SystemActivation+0x2a8>)
 8002cba:	f005 fd45 	bl	8008748 <sniprintf>
	DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE);
 8002cbe:	4b6c      	ldr	r3, [pc, #432]	; (8002e70 <SystemActivation+0x2b0>)
 8002cc0:	781b      	ldrb	r3, [r3, #0]
 8002cc2:	2280      	movs	r2, #128	; 0x80
 8002cc4:	4968      	ldr	r1, [pc, #416]	; (8002e68 <SystemActivation+0x2a8>)
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f7fe f91e 	bl	8000f08 <DebugPrint>

	//Reset MCP3421 ADC to a known state
	if( MCP3421_ADC_Reset() == ADC_STATUS_OK ){
 8002ccc:	f7ff f940 	bl	8001f50 <MCP3421_ADC_Reset>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d111      	bne.n	8002cfa <SystemActivation+0x13a>
		memset(PrintBuffer, '\0', COMM_SIZE); snprintf(PrintBuffer, COMM_SIZE-1, "\n\r\t- ACD Reset Passed");
 8002cd6:	2280      	movs	r2, #128	; 0x80
 8002cd8:	2100      	movs	r1, #0
 8002cda:	4863      	ldr	r0, [pc, #396]	; (8002e68 <SystemActivation+0x2a8>)
 8002cdc:	f005 fdcb 	bl	8008876 <memset>
 8002ce0:	4a6a      	ldr	r2, [pc, #424]	; (8002e8c <SystemActivation+0x2cc>)
 8002ce2:	217f      	movs	r1, #127	; 0x7f
 8002ce4:	4860      	ldr	r0, [pc, #384]	; (8002e68 <SystemActivation+0x2a8>)
 8002ce6:	f005 fd2f 	bl	8008748 <sniprintf>
		DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE );
 8002cea:	4b61      	ldr	r3, [pc, #388]	; (8002e70 <SystemActivation+0x2b0>)
 8002cec:	781b      	ldrb	r3, [r3, #0]
 8002cee:	2280      	movs	r2, #128	; 0x80
 8002cf0:	495d      	ldr	r1, [pc, #372]	; (8002e68 <SystemActivation+0x2a8>)
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f7fe f908 	bl	8000f08 <DebugPrint>
 8002cf8:	e012      	b.n	8002d20 <SystemActivation+0x160>
	}else{
		memset(PrintBuffer, '\0', COMM_SIZE); snprintf(PrintBuffer, COMM_SIZE-1, "\n\r\t- ACD Reset Failed");
 8002cfa:	2280      	movs	r2, #128	; 0x80
 8002cfc:	2100      	movs	r1, #0
 8002cfe:	485a      	ldr	r0, [pc, #360]	; (8002e68 <SystemActivation+0x2a8>)
 8002d00:	f005 fdb9 	bl	8008876 <memset>
 8002d04:	4a62      	ldr	r2, [pc, #392]	; (8002e90 <SystemActivation+0x2d0>)
 8002d06:	217f      	movs	r1, #127	; 0x7f
 8002d08:	4857      	ldr	r0, [pc, #348]	; (8002e68 <SystemActivation+0x2a8>)
 8002d0a:	f005 fd1d 	bl	8008748 <sniprintf>
		DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE );
 8002d0e:	4b58      	ldr	r3, [pc, #352]	; (8002e70 <SystemActivation+0x2b0>)
 8002d10:	781b      	ldrb	r3, [r3, #0]
 8002d12:	2280      	movs	r2, #128	; 0x80
 8002d14:	4954      	ldr	r1, [pc, #336]	; (8002e68 <SystemActivation+0x2a8>)
 8002d16:	4618      	mov	r0, r3
 8002d18:	f7fe f8f6 	bl	8000f08 <DebugPrint>
		SystemActivationFlag = false;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	75fb      	strb	r3, [r7, #23]
	}

	//Configure the MCP3421 ADC's settings
	uint8_t ADC_Config = CONV_ONESHOT | SAMPLE_16BIT | PGA_X1;
 8002d20:	2308      	movs	r3, #8
 8002d22:	757b      	strb	r3, [r7, #21]
	if( MCP3421_ADC_Init(ADC_Config) == ADC_STATUS_OK ){
 8002d24:	7d7b      	ldrb	r3, [r7, #21]
 8002d26:	4618      	mov	r0, r3
 8002d28:	f7ff f937 	bl	8001f9a <MCP3421_ADC_Init>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d111      	bne.n	8002d56 <SystemActivation+0x196>
		memset(PrintBuffer, '\0', COMM_SIZE); snprintf(PrintBuffer, COMM_SIZE-1, "\n\r\t- ADC Config Passed");
 8002d32:	2280      	movs	r2, #128	; 0x80
 8002d34:	2100      	movs	r1, #0
 8002d36:	484c      	ldr	r0, [pc, #304]	; (8002e68 <SystemActivation+0x2a8>)
 8002d38:	f005 fd9d 	bl	8008876 <memset>
 8002d3c:	4a55      	ldr	r2, [pc, #340]	; (8002e94 <SystemActivation+0x2d4>)
 8002d3e:	217f      	movs	r1, #127	; 0x7f
 8002d40:	4849      	ldr	r0, [pc, #292]	; (8002e68 <SystemActivation+0x2a8>)
 8002d42:	f005 fd01 	bl	8008748 <sniprintf>
		DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE );
 8002d46:	4b4a      	ldr	r3, [pc, #296]	; (8002e70 <SystemActivation+0x2b0>)
 8002d48:	781b      	ldrb	r3, [r3, #0]
 8002d4a:	2280      	movs	r2, #128	; 0x80
 8002d4c:	4946      	ldr	r1, [pc, #280]	; (8002e68 <SystemActivation+0x2a8>)
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f7fe f8da 	bl	8000f08 <DebugPrint>
 8002d54:	e012      	b.n	8002d7c <SystemActivation+0x1bc>
	}else{
		memset(PrintBuffer, '\0', COMM_SIZE); snprintf(PrintBuffer, COMM_SIZE-1, "\n\r\t- ADC Config Failed");
 8002d56:	2280      	movs	r2, #128	; 0x80
 8002d58:	2100      	movs	r1, #0
 8002d5a:	4843      	ldr	r0, [pc, #268]	; (8002e68 <SystemActivation+0x2a8>)
 8002d5c:	f005 fd8b 	bl	8008876 <memset>
 8002d60:	4a4d      	ldr	r2, [pc, #308]	; (8002e98 <SystemActivation+0x2d8>)
 8002d62:	217f      	movs	r1, #127	; 0x7f
 8002d64:	4840      	ldr	r0, [pc, #256]	; (8002e68 <SystemActivation+0x2a8>)
 8002d66:	f005 fcef 	bl	8008748 <sniprintf>
		DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE );
 8002d6a:	4b41      	ldr	r3, [pc, #260]	; (8002e70 <SystemActivation+0x2b0>)
 8002d6c:	781b      	ldrb	r3, [r3, #0]
 8002d6e:	2280      	movs	r2, #128	; 0x80
 8002d70:	493d      	ldr	r1, [pc, #244]	; (8002e68 <SystemActivation+0x2a8>)
 8002d72:	4618      	mov	r0, r3
 8002d74:	f7fe f8c8 	bl	8000f08 <DebugPrint>
		SystemActivationFlag = false;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	75fb      	strb	r3, [r7, #23]
	//////////////////////////////////////////////////////////////////////////////
	/////////////// Initialize MCP4726A1T_E DAC IC  //////////////////////////////
	//////////////////////////////////////////////////////////////////////////////

	//Print sequence load message
	memset(PrintBuffer, '\0', COMM_SIZE); snprintf(PrintBuffer,COMM_SIZE-1, "\n\rInitializing MCP4726A1T_E DAC: "  );
 8002d7c:	2280      	movs	r2, #128	; 0x80
 8002d7e:	2100      	movs	r1, #0
 8002d80:	4839      	ldr	r0, [pc, #228]	; (8002e68 <SystemActivation+0x2a8>)
 8002d82:	f005 fd78 	bl	8008876 <memset>
 8002d86:	4a45      	ldr	r2, [pc, #276]	; (8002e9c <SystemActivation+0x2dc>)
 8002d88:	217f      	movs	r1, #127	; 0x7f
 8002d8a:	4837      	ldr	r0, [pc, #220]	; (8002e68 <SystemActivation+0x2a8>)
 8002d8c:	f005 fcdc 	bl	8008748 <sniprintf>
	DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE);
 8002d90:	4b37      	ldr	r3, [pc, #220]	; (8002e70 <SystemActivation+0x2b0>)
 8002d92:	781b      	ldrb	r3, [r3, #0]
 8002d94:	2280      	movs	r2, #128	; 0x80
 8002d96:	4934      	ldr	r1, [pc, #208]	; (8002e68 <SystemActivation+0x2a8>)
 8002d98:	4618      	mov	r0, r3
 8002d9a:	f7fe f8b5 	bl	8000f08 <DebugPrint>

	//DAC initialization variables
	_Bool EEPROM_ProgramFlag = false;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	75bb      	strb	r3, [r7, #22]
	uint8_t DAC_ReadBuffer[6] = {0xFF};
 8002da2:	23ff      	movs	r3, #255	; 0xff
 8002da4:	60fb      	str	r3, [r7, #12]
 8002da6:	2300      	movs	r3, #0
 8002da8:	823b      	strh	r3, [r7, #16]

	//Read DAC memory to check expected configuration settings
	if( MCP4726A1T_ReadAllMemory(DAC_ReadBuffer) == DAC_STATUS_OK ){
 8002daa:	f107 030c 	add.w	r3, r7, #12
 8002dae:	4618      	mov	r0, r3
 8002db0:	f7ff fb0c 	bl	80023cc <MCP4726A1T_ReadAllMemory>
 8002db4:	4603      	mov	r3, r0
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d17a      	bne.n	8002eb0 <SystemActivation+0x2f0>

		//Check eeprom config data
		if( (DAC_ReadBuffer[3]&0xDE) == 0xDC ){
 8002dba:	7bfb      	ldrb	r3, [r7, #15]
 8002dbc:	f003 03de 	and.w	r3, r3, #222	; 0xde
 8002dc0:	2bdc      	cmp	r3, #220	; 0xdc
 8002dc2:	d111      	bne.n	8002de8 <SystemActivation+0x228>
			memset(PrintBuffer, '\0', COMM_SIZE); snprintf(PrintBuffer, COMM_SIZE-1, "\n\r\t- EEPROM config verified");
 8002dc4:	2280      	movs	r2, #128	; 0x80
 8002dc6:	2100      	movs	r1, #0
 8002dc8:	4827      	ldr	r0, [pc, #156]	; (8002e68 <SystemActivation+0x2a8>)
 8002dca:	f005 fd54 	bl	8008876 <memset>
 8002dce:	4a34      	ldr	r2, [pc, #208]	; (8002ea0 <SystemActivation+0x2e0>)
 8002dd0:	217f      	movs	r1, #127	; 0x7f
 8002dd2:	4825      	ldr	r0, [pc, #148]	; (8002e68 <SystemActivation+0x2a8>)
 8002dd4:	f005 fcb8 	bl	8008748 <sniprintf>
			DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE );
 8002dd8:	4b25      	ldr	r3, [pc, #148]	; (8002e70 <SystemActivation+0x2b0>)
 8002dda:	781b      	ldrb	r3, [r3, #0]
 8002ddc:	2280      	movs	r2, #128	; 0x80
 8002dde:	4922      	ldr	r1, [pc, #136]	; (8002e68 <SystemActivation+0x2a8>)
 8002de0:	4618      	mov	r0, r3
 8002de2:	f7fe f891 	bl	8000f08 <DebugPrint>
 8002de6:	e013      	b.n	8002e10 <SystemActivation+0x250>
		}else{
			memset(PrintBuffer, '\0', COMM_SIZE); snprintf(PrintBuffer, COMM_SIZE-1, "\n\r\t- EEPROM config INVALID -> 0x%02X", DAC_ReadBuffer[3] );
 8002de8:	2280      	movs	r2, #128	; 0x80
 8002dea:	2100      	movs	r1, #0
 8002dec:	481e      	ldr	r0, [pc, #120]	; (8002e68 <SystemActivation+0x2a8>)
 8002dee:	f005 fd42 	bl	8008876 <memset>
 8002df2:	7bfb      	ldrb	r3, [r7, #15]
 8002df4:	4a2b      	ldr	r2, [pc, #172]	; (8002ea4 <SystemActivation+0x2e4>)
 8002df6:	217f      	movs	r1, #127	; 0x7f
 8002df8:	481b      	ldr	r0, [pc, #108]	; (8002e68 <SystemActivation+0x2a8>)
 8002dfa:	f005 fca5 	bl	8008748 <sniprintf>
			DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE );
 8002dfe:	4b1c      	ldr	r3, [pc, #112]	; (8002e70 <SystemActivation+0x2b0>)
 8002e00:	781b      	ldrb	r3, [r3, #0]
 8002e02:	2280      	movs	r2, #128	; 0x80
 8002e04:	4918      	ldr	r1, [pc, #96]	; (8002e68 <SystemActivation+0x2a8>)
 8002e06:	4618      	mov	r0, r3
 8002e08:	f7fe f87e 	bl	8000f08 <DebugPrint>
			EEPROM_ProgramFlag = true;
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	75bb      	strb	r3, [r7, #22]
		}

		//Check volatile config data
		if( (DAC_ReadBuffer[0]&0xDE) == 0xD8 ){
 8002e10:	7b3b      	ldrb	r3, [r7, #12]
 8002e12:	f003 03de 	and.w	r3, r3, #222	; 0xde
 8002e16:	2bd8      	cmp	r3, #216	; 0xd8
 8002e18:	d111      	bne.n	8002e3e <SystemActivation+0x27e>
			memset(PrintBuffer, '\0', COMM_SIZE); snprintf(PrintBuffer, COMM_SIZE-1, "\n\r\t- Volatile memory config verified");
 8002e1a:	2280      	movs	r2, #128	; 0x80
 8002e1c:	2100      	movs	r1, #0
 8002e1e:	4812      	ldr	r0, [pc, #72]	; (8002e68 <SystemActivation+0x2a8>)
 8002e20:	f005 fd29 	bl	8008876 <memset>
 8002e24:	4a20      	ldr	r2, [pc, #128]	; (8002ea8 <SystemActivation+0x2e8>)
 8002e26:	217f      	movs	r1, #127	; 0x7f
 8002e28:	480f      	ldr	r0, [pc, #60]	; (8002e68 <SystemActivation+0x2a8>)
 8002e2a:	f005 fc8d 	bl	8008748 <sniprintf>
			DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE );
 8002e2e:	4b10      	ldr	r3, [pc, #64]	; (8002e70 <SystemActivation+0x2b0>)
 8002e30:	781b      	ldrb	r3, [r3, #0]
 8002e32:	2280      	movs	r2, #128	; 0x80
 8002e34:	490c      	ldr	r1, [pc, #48]	; (8002e68 <SystemActivation+0x2a8>)
 8002e36:	4618      	mov	r0, r3
 8002e38:	f7fe f866 	bl	8000f08 <DebugPrint>
 8002e3c:	e04b      	b.n	8002ed6 <SystemActivation+0x316>
		}else{
			memset(PrintBuffer, '\0', COMM_SIZE); snprintf(PrintBuffer, COMM_SIZE-1, "\n\r\t- Volatile memory config INVALID -> 0x%02X", DAC_ReadBuffer[0] );
 8002e3e:	2280      	movs	r2, #128	; 0x80
 8002e40:	2100      	movs	r1, #0
 8002e42:	4809      	ldr	r0, [pc, #36]	; (8002e68 <SystemActivation+0x2a8>)
 8002e44:	f005 fd17 	bl	8008876 <memset>
 8002e48:	7b3b      	ldrb	r3, [r7, #12]
 8002e4a:	4a18      	ldr	r2, [pc, #96]	; (8002eac <SystemActivation+0x2ec>)
 8002e4c:	217f      	movs	r1, #127	; 0x7f
 8002e4e:	4806      	ldr	r0, [pc, #24]	; (8002e68 <SystemActivation+0x2a8>)
 8002e50:	f005 fc7a 	bl	8008748 <sniprintf>
			DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE );
 8002e54:	4b06      	ldr	r3, [pc, #24]	; (8002e70 <SystemActivation+0x2b0>)
 8002e56:	781b      	ldrb	r3, [r3, #0]
 8002e58:	2280      	movs	r2, #128	; 0x80
 8002e5a:	4903      	ldr	r1, [pc, #12]	; (8002e68 <SystemActivation+0x2a8>)
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	f7fe f853 	bl	8000f08 <DebugPrint>
			EEPROM_ProgramFlag = true;
 8002e62:	2301      	movs	r3, #1
 8002e64:	75bb      	strb	r3, [r7, #22]
 8002e66:	e036      	b.n	8002ed6 <SystemActivation+0x316>
 8002e68:	20000468 	.word	0x20000468
 8002e6c:	0800c848 	.word	0x0800c848
 8002e70:	2000001b 	.word	0x2000001b
 8002e74:	200002f0 	.word	0x200002f0
 8002e78:	20000528 	.word	0x20000528
 8002e7c:	0800c874 	.word	0x0800c874
 8002e80:	0800c894 	.word	0x0800c894
 8002e84:	0800c8bc 	.word	0x0800c8bc
 8002e88:	0800c8d8 	.word	0x0800c8d8
 8002e8c:	0800c8f8 	.word	0x0800c8f8
 8002e90:	0800c910 	.word	0x0800c910
 8002e94:	0800c928 	.word	0x0800c928
 8002e98:	0800c940 	.word	0x0800c940
 8002e9c:	0800c958 	.word	0x0800c958
 8002ea0:	0800c97c 	.word	0x0800c97c
 8002ea4:	0800c998 	.word	0x0800c998
 8002ea8:	0800c9c0 	.word	0x0800c9c0
 8002eac:	0800c9e8 	.word	0x0800c9e8
		}

	}else{
		memset(PrintBuffer, '\0', COMM_SIZE); snprintf(PrintBuffer, COMM_SIZE-1, "\n\r\t- System Read Error during memory verification");
 8002eb0:	2280      	movs	r2, #128	; 0x80
 8002eb2:	2100      	movs	r1, #0
 8002eb4:	489a      	ldr	r0, [pc, #616]	; (8003120 <SystemActivation+0x560>)
 8002eb6:	f005 fcde 	bl	8008876 <memset>
 8002eba:	4a9a      	ldr	r2, [pc, #616]	; (8003124 <SystemActivation+0x564>)
 8002ebc:	217f      	movs	r1, #127	; 0x7f
 8002ebe:	4898      	ldr	r0, [pc, #608]	; (8003120 <SystemActivation+0x560>)
 8002ec0:	f005 fc42 	bl	8008748 <sniprintf>
		DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE );
 8002ec4:	4b98      	ldr	r3, [pc, #608]	; (8003128 <SystemActivation+0x568>)
 8002ec6:	781b      	ldrb	r3, [r3, #0]
 8002ec8:	2280      	movs	r2, #128	; 0x80
 8002eca:	4995      	ldr	r1, [pc, #596]	; (8003120 <SystemActivation+0x560>)
 8002ecc:	4618      	mov	r0, r3
 8002ece:	f7fe f81b 	bl	8000f08 <DebugPrint>
		SystemActivationFlag = false;
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	75fb      	strb	r3, [r7, #23]
	}


	//If DAC config settings are invalid, program all memory
	if( EEPROM_ProgramFlag == true ){
 8002ed6:	7dbb      	ldrb	r3, [r7, #22]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d01b      	beq.n	8002f14 <SystemActivation+0x354>
		if(	MCP4726A1T_WriteAllMemory(VREF_BUFF, PD_100K, G_1X, 0 ) != DAC_STATUS_OK ){
 8002edc:	2300      	movs	r3, #0
 8002ede:	2200      	movs	r2, #0
 8002ee0:	2102      	movs	r1, #2
 8002ee2:	2003      	movs	r0, #3
 8002ee4:	f7ff f9f0 	bl	80022c8 <MCP4726A1T_WriteAllMemory>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d012      	beq.n	8002f14 <SystemActivation+0x354>
			memset(PrintBuffer, '\0', COMM_SIZE); snprintf(PrintBuffer, COMM_SIZE-1, "\n\r\t- Memory cofig program Failed");
 8002eee:	2280      	movs	r2, #128	; 0x80
 8002ef0:	2100      	movs	r1, #0
 8002ef2:	488b      	ldr	r0, [pc, #556]	; (8003120 <SystemActivation+0x560>)
 8002ef4:	f005 fcbf 	bl	8008876 <memset>
 8002ef8:	4a8c      	ldr	r2, [pc, #560]	; (800312c <SystemActivation+0x56c>)
 8002efa:	217f      	movs	r1, #127	; 0x7f
 8002efc:	4888      	ldr	r0, [pc, #544]	; (8003120 <SystemActivation+0x560>)
 8002efe:	f005 fc23 	bl	8008748 <sniprintf>
			DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE );
 8002f02:	4b89      	ldr	r3, [pc, #548]	; (8003128 <SystemActivation+0x568>)
 8002f04:	781b      	ldrb	r3, [r3, #0]
 8002f06:	2280      	movs	r2, #128	; 0x80
 8002f08:	4985      	ldr	r1, [pc, #532]	; (8003120 <SystemActivation+0x560>)
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f7fd fffc 	bl	8000f08 <DebugPrint>
			SystemActivationFlag = false;
 8002f10:	2300      	movs	r3, #0
 8002f12:	75fb      	strb	r3, [r7, #23]
		}
	}


	//If DAC config has been reprogrammed, re-check the config data
	if( EEPROM_ProgramFlag == true ){
 8002f14:	7dbb      	ldrb	r3, [r7, #22]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d078      	beq.n	800300c <SystemActivation+0x44c>

		//Read newly programmed memory from DAC
		memset(DAC_ReadBuffer, 0xFF, 8);
 8002f1a:	f107 030c 	add.w	r3, r7, #12
 8002f1e:	2208      	movs	r2, #8
 8002f20:	21ff      	movs	r1, #255	; 0xff
 8002f22:	4618      	mov	r0, r3
 8002f24:	f005 fca7 	bl	8008876 <memset>
		if( MCP4726A1T_ReadAllMemory(DAC_ReadBuffer) == DAC_STATUS_OK ){
 8002f28:	f107 030c 	add.w	r3, r7, #12
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	f7ff fa4d 	bl	80023cc <MCP4726A1T_ReadAllMemory>
 8002f32:	4603      	mov	r3, r0
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d156      	bne.n	8002fe6 <SystemActivation+0x426>

			//Check eeprom config data
			if( (DAC_ReadBuffer[3]&0xDE) == 0xDC ){
 8002f38:	7bfb      	ldrb	r3, [r7, #15]
 8002f3a:	f003 03de 	and.w	r3, r3, #222	; 0xde
 8002f3e:	2bdc      	cmp	r3, #220	; 0xdc
 8002f40:	d111      	bne.n	8002f66 <SystemActivation+0x3a6>
				memset(PrintBuffer, '\0', COMM_SIZE); snprintf(PrintBuffer, COMM_SIZE-1, "\n\r\t- EEPROM config re-check verified");
 8002f42:	2280      	movs	r2, #128	; 0x80
 8002f44:	2100      	movs	r1, #0
 8002f46:	4876      	ldr	r0, [pc, #472]	; (8003120 <SystemActivation+0x560>)
 8002f48:	f005 fc95 	bl	8008876 <memset>
 8002f4c:	4a78      	ldr	r2, [pc, #480]	; (8003130 <SystemActivation+0x570>)
 8002f4e:	217f      	movs	r1, #127	; 0x7f
 8002f50:	4873      	ldr	r0, [pc, #460]	; (8003120 <SystemActivation+0x560>)
 8002f52:	f005 fbf9 	bl	8008748 <sniprintf>
				DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE );
 8002f56:	4b74      	ldr	r3, [pc, #464]	; (8003128 <SystemActivation+0x568>)
 8002f58:	781b      	ldrb	r3, [r3, #0]
 8002f5a:	2280      	movs	r2, #128	; 0x80
 8002f5c:	4970      	ldr	r1, [pc, #448]	; (8003120 <SystemActivation+0x560>)
 8002f5e:	4618      	mov	r0, r3
 8002f60:	f7fd ffd2 	bl	8000f08 <DebugPrint>
 8002f64:	e013      	b.n	8002f8e <SystemActivation+0x3ce>
			}else{
				memset(PrintBuffer, '\0', COMM_SIZE); snprintf(PrintBuffer, COMM_SIZE-1, "\n\r\t- EEPROM config re-check failed -> 0x%02X", DAC_ReadBuffer[3] );
 8002f66:	2280      	movs	r2, #128	; 0x80
 8002f68:	2100      	movs	r1, #0
 8002f6a:	486d      	ldr	r0, [pc, #436]	; (8003120 <SystemActivation+0x560>)
 8002f6c:	f005 fc83 	bl	8008876 <memset>
 8002f70:	7bfb      	ldrb	r3, [r7, #15]
 8002f72:	4a70      	ldr	r2, [pc, #448]	; (8003134 <SystemActivation+0x574>)
 8002f74:	217f      	movs	r1, #127	; 0x7f
 8002f76:	486a      	ldr	r0, [pc, #424]	; (8003120 <SystemActivation+0x560>)
 8002f78:	f005 fbe6 	bl	8008748 <sniprintf>
				DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE );
 8002f7c:	4b6a      	ldr	r3, [pc, #424]	; (8003128 <SystemActivation+0x568>)
 8002f7e:	781b      	ldrb	r3, [r3, #0]
 8002f80:	2280      	movs	r2, #128	; 0x80
 8002f82:	4967      	ldr	r1, [pc, #412]	; (8003120 <SystemActivation+0x560>)
 8002f84:	4618      	mov	r0, r3
 8002f86:	f7fd ffbf 	bl	8000f08 <DebugPrint>
				SystemActivationFlag = false;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	75fb      	strb	r3, [r7, #23]
			}

			//Check volatile config data
			if( (DAC_ReadBuffer[0]&0xDE) == 0xD8 ){
 8002f8e:	7b3b      	ldrb	r3, [r7, #12]
 8002f90:	f003 03de 	and.w	r3, r3, #222	; 0xde
 8002f94:	2bd8      	cmp	r3, #216	; 0xd8
 8002f96:	d111      	bne.n	8002fbc <SystemActivation+0x3fc>
				memset(PrintBuffer, '\0', COMM_SIZE); snprintf(PrintBuffer, COMM_SIZE-1, "\n\r\t- Volatile memory config re-check verified");
 8002f98:	2280      	movs	r2, #128	; 0x80
 8002f9a:	2100      	movs	r1, #0
 8002f9c:	4860      	ldr	r0, [pc, #384]	; (8003120 <SystemActivation+0x560>)
 8002f9e:	f005 fc6a 	bl	8008876 <memset>
 8002fa2:	4a65      	ldr	r2, [pc, #404]	; (8003138 <SystemActivation+0x578>)
 8002fa4:	217f      	movs	r1, #127	; 0x7f
 8002fa6:	485e      	ldr	r0, [pc, #376]	; (8003120 <SystemActivation+0x560>)
 8002fa8:	f005 fbce 	bl	8008748 <sniprintf>
				DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE );
 8002fac:	4b5e      	ldr	r3, [pc, #376]	; (8003128 <SystemActivation+0x568>)
 8002fae:	781b      	ldrb	r3, [r3, #0]
 8002fb0:	2280      	movs	r2, #128	; 0x80
 8002fb2:	495b      	ldr	r1, [pc, #364]	; (8003120 <SystemActivation+0x560>)
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	f7fd ffa7 	bl	8000f08 <DebugPrint>
 8002fba:	e027      	b.n	800300c <SystemActivation+0x44c>
			}else{
				memset(PrintBuffer, '\0', COMM_SIZE); snprintf(PrintBuffer, COMM_SIZE-1, "\n\r\t- Volatile memory config re-check INVALID -> 0x%02X", DAC_ReadBuffer[0] );
 8002fbc:	2280      	movs	r2, #128	; 0x80
 8002fbe:	2100      	movs	r1, #0
 8002fc0:	4857      	ldr	r0, [pc, #348]	; (8003120 <SystemActivation+0x560>)
 8002fc2:	f005 fc58 	bl	8008876 <memset>
 8002fc6:	7b3b      	ldrb	r3, [r7, #12]
 8002fc8:	4a5c      	ldr	r2, [pc, #368]	; (800313c <SystemActivation+0x57c>)
 8002fca:	217f      	movs	r1, #127	; 0x7f
 8002fcc:	4854      	ldr	r0, [pc, #336]	; (8003120 <SystemActivation+0x560>)
 8002fce:	f005 fbbb 	bl	8008748 <sniprintf>
				DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE );
 8002fd2:	4b55      	ldr	r3, [pc, #340]	; (8003128 <SystemActivation+0x568>)
 8002fd4:	781b      	ldrb	r3, [r3, #0]
 8002fd6:	2280      	movs	r2, #128	; 0x80
 8002fd8:	4951      	ldr	r1, [pc, #324]	; (8003120 <SystemActivation+0x560>)
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f7fd ff94 	bl	8000f08 <DebugPrint>
				SystemActivationFlag = false;
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	75fb      	strb	r3, [r7, #23]
 8002fe4:	e012      	b.n	800300c <SystemActivation+0x44c>
			}

		}else{
			memset(PrintBuffer, '\0', COMM_SIZE); snprintf(PrintBuffer, COMM_SIZE-1, "\n\r\t- DAC System Read Error during memory re-check verification");
 8002fe6:	2280      	movs	r2, #128	; 0x80
 8002fe8:	2100      	movs	r1, #0
 8002fea:	484d      	ldr	r0, [pc, #308]	; (8003120 <SystemActivation+0x560>)
 8002fec:	f005 fc43 	bl	8008876 <memset>
 8002ff0:	4a53      	ldr	r2, [pc, #332]	; (8003140 <SystemActivation+0x580>)
 8002ff2:	217f      	movs	r1, #127	; 0x7f
 8002ff4:	484a      	ldr	r0, [pc, #296]	; (8003120 <SystemActivation+0x560>)
 8002ff6:	f005 fba7 	bl	8008748 <sniprintf>
			DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE );
 8002ffa:	4b4b      	ldr	r3, [pc, #300]	; (8003128 <SystemActivation+0x568>)
 8002ffc:	781b      	ldrb	r3, [r3, #0]
 8002ffe:	2280      	movs	r2, #128	; 0x80
 8003000:	4947      	ldr	r1, [pc, #284]	; (8003120 <SystemActivation+0x560>)
 8003002:	4618      	mov	r0, r3
 8003004:	f7fd ff80 	bl	8000f08 <DebugPrint>
			SystemActivationFlag = false;
 8003008:	2300      	movs	r3, #0
 800300a:	75fb      	strb	r3, [r7, #23]
		}
	}


	//Check POR bit to ensure that the DAC is awake
	if( (DAC_ReadBuffer[0]&0x80) == 0x80 ){
 800300c:	7b3b      	ldrb	r3, [r7, #12]
 800300e:	b25b      	sxtb	r3, r3
 8003010:	2b00      	cmp	r3, #0
 8003012:	da11      	bge.n	8003038 <SystemActivation+0x478>
		memset(PrintBuffer, '\0', COMM_SIZE); snprintf(PrintBuffer, COMM_SIZE-1, "\n\r\t- DAC successfully powered on");
 8003014:	2280      	movs	r2, #128	; 0x80
 8003016:	2100      	movs	r1, #0
 8003018:	4841      	ldr	r0, [pc, #260]	; (8003120 <SystemActivation+0x560>)
 800301a:	f005 fc2c 	bl	8008876 <memset>
 800301e:	4a49      	ldr	r2, [pc, #292]	; (8003144 <SystemActivation+0x584>)
 8003020:	217f      	movs	r1, #127	; 0x7f
 8003022:	483f      	ldr	r0, [pc, #252]	; (8003120 <SystemActivation+0x560>)
 8003024:	f005 fb90 	bl	8008748 <sniprintf>
		DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE );
 8003028:	4b3f      	ldr	r3, [pc, #252]	; (8003128 <SystemActivation+0x568>)
 800302a:	781b      	ldrb	r3, [r3, #0]
 800302c:	2280      	movs	r2, #128	; 0x80
 800302e:	493c      	ldr	r1, [pc, #240]	; (8003120 <SystemActivation+0x560>)
 8003030:	4618      	mov	r0, r3
 8003032:	f7fd ff69 	bl	8000f08 <DebugPrint>
 8003036:	e012      	b.n	800305e <SystemActivation+0x49e>
	}else{
		memset(PrintBuffer, '\0', COMM_SIZE); snprintf(PrintBuffer, COMM_SIZE-1, "\n\r\t- DAC failed to powered on");
 8003038:	2280      	movs	r2, #128	; 0x80
 800303a:	2100      	movs	r1, #0
 800303c:	4838      	ldr	r0, [pc, #224]	; (8003120 <SystemActivation+0x560>)
 800303e:	f005 fc1a 	bl	8008876 <memset>
 8003042:	4a41      	ldr	r2, [pc, #260]	; (8003148 <SystemActivation+0x588>)
 8003044:	217f      	movs	r1, #127	; 0x7f
 8003046:	4836      	ldr	r0, [pc, #216]	; (8003120 <SystemActivation+0x560>)
 8003048:	f005 fb7e 	bl	8008748 <sniprintf>
		DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE );
 800304c:	4b36      	ldr	r3, [pc, #216]	; (8003128 <SystemActivation+0x568>)
 800304e:	781b      	ldrb	r3, [r3, #0]
 8003050:	2280      	movs	r2, #128	; 0x80
 8003052:	4933      	ldr	r1, [pc, #204]	; (8003120 <SystemActivation+0x560>)
 8003054:	4618      	mov	r0, r3
 8003056:	f7fd ff57 	bl	8000f08 <DebugPrint>
		SystemActivationFlag = false;
 800305a:	2300      	movs	r3, #0
 800305c:	75fb      	strb	r3, [r7, #23]
	}


	//Set the DAC output voltage to 0V so it is in a known state
	if( MCP4726A1T_VoltageOut(0) == DAC_STATUS_OK ){
 800305e:	ed9f 0a3b 	vldr	s0, [pc, #236]	; 800314c <SystemActivation+0x58c>
 8003062:	f7ff f83d 	bl	80020e0 <MCP4726A1T_VoltageOut>
 8003066:	4603      	mov	r3, r0
 8003068:	2b00      	cmp	r3, #0
 800306a:	d111      	bne.n	8003090 <SystemActivation+0x4d0>
		memset(PrintBuffer, '\0', COMM_SIZE); snprintf(PrintBuffer, COMM_SIZE-1, "\n\r\t- DAC output voltage reset to know state");
 800306c:	2280      	movs	r2, #128	; 0x80
 800306e:	2100      	movs	r1, #0
 8003070:	482b      	ldr	r0, [pc, #172]	; (8003120 <SystemActivation+0x560>)
 8003072:	f005 fc00 	bl	8008876 <memset>
 8003076:	4a36      	ldr	r2, [pc, #216]	; (8003150 <SystemActivation+0x590>)
 8003078:	217f      	movs	r1, #127	; 0x7f
 800307a:	4829      	ldr	r0, [pc, #164]	; (8003120 <SystemActivation+0x560>)
 800307c:	f005 fb64 	bl	8008748 <sniprintf>
		DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE );
 8003080:	4b29      	ldr	r3, [pc, #164]	; (8003128 <SystemActivation+0x568>)
 8003082:	781b      	ldrb	r3, [r3, #0]
 8003084:	2280      	movs	r2, #128	; 0x80
 8003086:	4926      	ldr	r1, [pc, #152]	; (8003120 <SystemActivation+0x560>)
 8003088:	4618      	mov	r0, r3
 800308a:	f7fd ff3d 	bl	8000f08 <DebugPrint>
 800308e:	e012      	b.n	80030b6 <SystemActivation+0x4f6>
	}else{
		memset(PrintBuffer, '\0', COMM_SIZE); snprintf(PrintBuffer, COMM_SIZE-1, "\n\r\t- DAC output voltage failed to reset");
 8003090:	2280      	movs	r2, #128	; 0x80
 8003092:	2100      	movs	r1, #0
 8003094:	4822      	ldr	r0, [pc, #136]	; (8003120 <SystemActivation+0x560>)
 8003096:	f005 fbee 	bl	8008876 <memset>
 800309a:	4a2e      	ldr	r2, [pc, #184]	; (8003154 <SystemActivation+0x594>)
 800309c:	217f      	movs	r1, #127	; 0x7f
 800309e:	4820      	ldr	r0, [pc, #128]	; (8003120 <SystemActivation+0x560>)
 80030a0:	f005 fb52 	bl	8008748 <sniprintf>
		DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE );
 80030a4:	4b20      	ldr	r3, [pc, #128]	; (8003128 <SystemActivation+0x568>)
 80030a6:	781b      	ldrb	r3, [r3, #0]
 80030a8:	2280      	movs	r2, #128	; 0x80
 80030aa:	491d      	ldr	r1, [pc, #116]	; (8003120 <SystemActivation+0x560>)
 80030ac:	4618      	mov	r0, r3
 80030ae:	f7fd ff2b 	bl	8000f08 <DebugPrint>
		SystemActivationFlag = false;
 80030b2:	2300      	movs	r3, #0
 80030b4:	75fb      	strb	r3, [r7, #23]
	//////////////////////////////////////////////////////////////////////////////
	/////////////// Load System Information from EEPROM  /////////////////////////
	//////////////////////////////////////////////////////////////////////////////

	//Print sequence load message
	memset(PrintBuffer, '\0', COMM_SIZE); snprintf(PrintBuffer,COMM_SIZE-1, "\n\rInitializing system information from memory: "  );
 80030b6:	2280      	movs	r2, #128	; 0x80
 80030b8:	2100      	movs	r1, #0
 80030ba:	4819      	ldr	r0, [pc, #100]	; (8003120 <SystemActivation+0x560>)
 80030bc:	f005 fbdb 	bl	8008876 <memset>
 80030c0:	4a25      	ldr	r2, [pc, #148]	; (8003158 <SystemActivation+0x598>)
 80030c2:	217f      	movs	r1, #127	; 0x7f
 80030c4:	4816      	ldr	r0, [pc, #88]	; (8003120 <SystemActivation+0x560>)
 80030c6:	f005 fb3f 	bl	8008748 <sniprintf>
	DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE);
 80030ca:	4b17      	ldr	r3, [pc, #92]	; (8003128 <SystemActivation+0x568>)
 80030cc:	781b      	ldrb	r3, [r3, #0]
 80030ce:	2280      	movs	r2, #128	; 0x80
 80030d0:	4913      	ldr	r1, [pc, #76]	; (8003120 <SystemActivation+0x560>)
 80030d2:	4618      	mov	r0, r3
 80030d4:	f7fd ff18 	bl	8000f08 <DebugPrint>


	//Read data from the EEPROM IC
	uint8_t EEPROM_ReadArray[7] = {0};
 80030d8:	2300      	movs	r3, #0
 80030da:	607b      	str	r3, [r7, #4]
 80030dc:	f107 0308 	add.w	r3, r7, #8
 80030e0:	2100      	movs	r1, #0
 80030e2:	460a      	mov	r2, r1
 80030e4:	801a      	strh	r2, [r3, #0]
 80030e6:	460a      	mov	r2, r1
 80030e8:	709a      	strb	r2, [r3, #2]
	if( eeprom_Read(0x0000, EEPROM_ReadArray, sizeof(EEPROM_ReadArray) ) == EEPROM_STATUS_OK ){
 80030ea:	1d3b      	adds	r3, r7, #4
 80030ec:	2207      	movs	r2, #7
 80030ee:	4619      	mov	r1, r3
 80030f0:	2000      	movs	r0, #0
 80030f2:	f7fe fedd 	bl	8001eb0 <eeprom_Read>
 80030f6:	4603      	mov	r3, r0
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d131      	bne.n	8003160 <SystemActivation+0x5a0>
		memset(PrintBuffer, '\0', COMM_SIZE); snprintf(PrintBuffer,COMM_SIZE-1, "\n\r\t- Information successfully retrieved from EEPROM"  );
 80030fc:	2280      	movs	r2, #128	; 0x80
 80030fe:	2100      	movs	r1, #0
 8003100:	4807      	ldr	r0, [pc, #28]	; (8003120 <SystemActivation+0x560>)
 8003102:	f005 fbb8 	bl	8008876 <memset>
 8003106:	4a15      	ldr	r2, [pc, #84]	; (800315c <SystemActivation+0x59c>)
 8003108:	217f      	movs	r1, #127	; 0x7f
 800310a:	4805      	ldr	r0, [pc, #20]	; (8003120 <SystemActivation+0x560>)
 800310c:	f005 fb1c 	bl	8008748 <sniprintf>
		DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE);
 8003110:	4b05      	ldr	r3, [pc, #20]	; (8003128 <SystemActivation+0x568>)
 8003112:	781b      	ldrb	r3, [r3, #0]
 8003114:	2280      	movs	r2, #128	; 0x80
 8003116:	4902      	ldr	r1, [pc, #8]	; (8003120 <SystemActivation+0x560>)
 8003118:	4618      	mov	r0, r3
 800311a:	f7fd fef5 	bl	8000f08 <DebugPrint>
 800311e:	e032      	b.n	8003186 <SystemActivation+0x5c6>
 8003120:	20000468 	.word	0x20000468
 8003124:	0800ca18 	.word	0x0800ca18
 8003128:	2000001b 	.word	0x2000001b
 800312c:	0800ca4c 	.word	0x0800ca4c
 8003130:	0800ca70 	.word	0x0800ca70
 8003134:	0800ca98 	.word	0x0800ca98
 8003138:	0800cac8 	.word	0x0800cac8
 800313c:	0800caf8 	.word	0x0800caf8
 8003140:	0800cb30 	.word	0x0800cb30
 8003144:	0800cb70 	.word	0x0800cb70
 8003148:	0800cb94 	.word	0x0800cb94
 800314c:	00000000 	.word	0x00000000
 8003150:	0800cbb4 	.word	0x0800cbb4
 8003154:	0800cbe0 	.word	0x0800cbe0
 8003158:	0800cc08 	.word	0x0800cc08
 800315c:	0800cc38 	.word	0x0800cc38
	}else{
		memset(PrintBuffer, '\0', COMM_SIZE); snprintf(PrintBuffer,COMM_SIZE-1, "\n\r\t- Information failed to be retrieved from EEPROM"  );
 8003160:	2280      	movs	r2, #128	; 0x80
 8003162:	2100      	movs	r1, #0
 8003164:	4884      	ldr	r0, [pc, #528]	; (8003378 <SystemActivation+0x7b8>)
 8003166:	f005 fb86 	bl	8008876 <memset>
 800316a:	4a84      	ldr	r2, [pc, #528]	; (800337c <SystemActivation+0x7bc>)
 800316c:	217f      	movs	r1, #127	; 0x7f
 800316e:	4882      	ldr	r0, [pc, #520]	; (8003378 <SystemActivation+0x7b8>)
 8003170:	f005 faea 	bl	8008748 <sniprintf>
		DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE);
 8003174:	4b82      	ldr	r3, [pc, #520]	; (8003380 <SystemActivation+0x7c0>)
 8003176:	781b      	ldrb	r3, [r3, #0]
 8003178:	2280      	movs	r2, #128	; 0x80
 800317a:	497f      	ldr	r1, [pc, #508]	; (8003378 <SystemActivation+0x7b8>)
 800317c:	4618      	mov	r0, r3
 800317e:	f7fd fec3 	bl	8000f08 <DebugPrint>
		SystemActivationFlag = false;
 8003182:	2300      	movs	r3, #0
 8003184:	75fb      	strb	r3, [r7, #23]
	}

	//Set system info
	SysInfo.Button1     = false;
 8003186:	4b7f      	ldr	r3, [pc, #508]	; (8003384 <SystemActivation+0x7c4>)
 8003188:	2200      	movs	r2, #0
 800318a:	701a      	strb	r2, [r3, #0]
	SysInfo.Button2     = false;
 800318c:	4b7d      	ldr	r3, [pc, #500]	; (8003384 <SystemActivation+0x7c4>)
 800318e:	2200      	movs	r2, #0
 8003190:	705a      	strb	r2, [r3, #1]
	SysInfo.Button3     = false;
 8003192:	4b7c      	ldr	r3, [pc, #496]	; (8003384 <SystemActivation+0x7c4>)
 8003194:	2200      	movs	r2, #0
 8003196:	709a      	strb	r2, [r3, #2]
	SysInfo.SerialNumber   = bytes_to_uint16(&EEPROM_ReadArray[0]);
 8003198:	1d3b      	adds	r3, r7, #4
 800319a:	4618      	mov	r0, r3
 800319c:	f7fd fdc1 	bl	8000d22 <bytes_to_uint16>
 80031a0:	4603      	mov	r3, r0
 80031a2:	461a      	mov	r2, r3
 80031a4:	4b77      	ldr	r3, [pc, #476]	; (8003384 <SystemActivation+0x7c4>)
 80031a6:	809a      	strh	r2, [r3, #4]
	SysInfo.SensorType     = EEPROM_ReadArray[2];
 80031a8:	79ba      	ldrb	r2, [r7, #6]
 80031aa:	4b76      	ldr	r3, [pc, #472]	; (8003384 <SystemActivation+0x7c4>)
 80031ac:	719a      	strb	r2, [r3, #6]
	SysInfo.CAN_Address    = bytes_to_uint16(&EEPROM_ReadArray[3]);
 80031ae:	1d3b      	adds	r3, r7, #4
 80031b0:	3303      	adds	r3, #3
 80031b2:	4618      	mov	r0, r3
 80031b4:	f7fd fdb5 	bl	8000d22 <bytes_to_uint16>
 80031b8:	4603      	mov	r3, r0
 80031ba:	461a      	mov	r2, r3
 80031bc:	4b71      	ldr	r3, [pc, #452]	; (8003384 <SystemActivation+0x7c4>)
 80031be:	811a      	strh	r2, [r3, #8]
	SysInfo.EEPROM_Address = bytes_to_uint16(&EEPROM_ReadArray[5]);
 80031c0:	1d3b      	adds	r3, r7, #4
 80031c2:	3305      	adds	r3, #5
 80031c4:	4618      	mov	r0, r3
 80031c6:	f7fd fdac 	bl	8000d22 <bytes_to_uint16>
 80031ca:	4603      	mov	r3, r0
 80031cc:	461a      	mov	r2, r3
 80031ce:	4b6d      	ldr	r3, [pc, #436]	; (8003384 <SystemActivation+0x7c4>)
 80031d0:	815a      	strh	r2, [r3, #10]

	//Verify that data read from EEPROM is valid
	if(SysInfo.SerialNumber==0xFFFF || SysInfo.SensorType==0xFF || SysInfo.CAN_Address==0xFFFF || SysInfo.EEPROM_Address==0xFFFF ){
 80031d2:	4b6c      	ldr	r3, [pc, #432]	; (8003384 <SystemActivation+0x7c4>)
 80031d4:	889b      	ldrh	r3, [r3, #4]
 80031d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80031da:	4293      	cmp	r3, r2
 80031dc:	d00f      	beq.n	80031fe <SystemActivation+0x63e>
 80031de:	4b69      	ldr	r3, [pc, #420]	; (8003384 <SystemActivation+0x7c4>)
 80031e0:	799b      	ldrb	r3, [r3, #6]
 80031e2:	2bff      	cmp	r3, #255	; 0xff
 80031e4:	d00b      	beq.n	80031fe <SystemActivation+0x63e>
 80031e6:	4b67      	ldr	r3, [pc, #412]	; (8003384 <SystemActivation+0x7c4>)
 80031e8:	891b      	ldrh	r3, [r3, #8]
 80031ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d005      	beq.n	80031fe <SystemActivation+0x63e>
 80031f2:	4b64      	ldr	r3, [pc, #400]	; (8003384 <SystemActivation+0x7c4>)
 80031f4:	895b      	ldrh	r3, [r3, #10]
 80031f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d15f      	bne.n	80032be <SystemActivation+0x6fe>
		memset(PrintBuffer, '\0', COMM_SIZE); snprintf(PrintBuffer, COMM_SIZE-1, "\n\r\t- EEPROM data is invalid -> Memory Must be Programmed"  );
 80031fe:	2280      	movs	r2, #128	; 0x80
 8003200:	2100      	movs	r1, #0
 8003202:	485d      	ldr	r0, [pc, #372]	; (8003378 <SystemActivation+0x7b8>)
 8003204:	f005 fb37 	bl	8008876 <memset>
 8003208:	4a5f      	ldr	r2, [pc, #380]	; (8003388 <SystemActivation+0x7c8>)
 800320a:	217f      	movs	r1, #127	; 0x7f
 800320c:	485a      	ldr	r0, [pc, #360]	; (8003378 <SystemActivation+0x7b8>)
 800320e:	f005 fa9b 	bl	8008748 <sniprintf>
		DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE);
 8003212:	4b5b      	ldr	r3, [pc, #364]	; (8003380 <SystemActivation+0x7c0>)
 8003214:	781b      	ldrb	r3, [r3, #0]
 8003216:	2280      	movs	r2, #128	; 0x80
 8003218:	4957      	ldr	r1, [pc, #348]	; (8003378 <SystemActivation+0x7b8>)
 800321a:	4618      	mov	r0, r3
 800321c:	f7fd fe74 	bl	8000f08 <DebugPrint>
		memset(PrintBuffer, '\0', COMM_SIZE); snprintf(PrintBuffer, COMM_SIZE-1, "\n\r\t- Serial Number:\t0x%04X", SysInfo.SerialNumber );
 8003220:	2280      	movs	r2, #128	; 0x80
 8003222:	2100      	movs	r1, #0
 8003224:	4854      	ldr	r0, [pc, #336]	; (8003378 <SystemActivation+0x7b8>)
 8003226:	f005 fb26 	bl	8008876 <memset>
 800322a:	4b56      	ldr	r3, [pc, #344]	; (8003384 <SystemActivation+0x7c4>)
 800322c:	889b      	ldrh	r3, [r3, #4]
 800322e:	4a57      	ldr	r2, [pc, #348]	; (800338c <SystemActivation+0x7cc>)
 8003230:	217f      	movs	r1, #127	; 0x7f
 8003232:	4851      	ldr	r0, [pc, #324]	; (8003378 <SystemActivation+0x7b8>)
 8003234:	f005 fa88 	bl	8008748 <sniprintf>
		DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE);
 8003238:	4b51      	ldr	r3, [pc, #324]	; (8003380 <SystemActivation+0x7c0>)
 800323a:	781b      	ldrb	r3, [r3, #0]
 800323c:	2280      	movs	r2, #128	; 0x80
 800323e:	494e      	ldr	r1, [pc, #312]	; (8003378 <SystemActivation+0x7b8>)
 8003240:	4618      	mov	r0, r3
 8003242:	f7fd fe61 	bl	8000f08 <DebugPrint>
		memset(PrintBuffer, '\0', COMM_SIZE); snprintf(PrintBuffer, COMM_SIZE-1, "\n\r\t- CAN Address:\t0x%04X", SysInfo.CAN_Address );
 8003246:	2280      	movs	r2, #128	; 0x80
 8003248:	2100      	movs	r1, #0
 800324a:	484b      	ldr	r0, [pc, #300]	; (8003378 <SystemActivation+0x7b8>)
 800324c:	f005 fb13 	bl	8008876 <memset>
 8003250:	4b4c      	ldr	r3, [pc, #304]	; (8003384 <SystemActivation+0x7c4>)
 8003252:	891b      	ldrh	r3, [r3, #8]
 8003254:	4a4e      	ldr	r2, [pc, #312]	; (8003390 <SystemActivation+0x7d0>)
 8003256:	217f      	movs	r1, #127	; 0x7f
 8003258:	4847      	ldr	r0, [pc, #284]	; (8003378 <SystemActivation+0x7b8>)
 800325a:	f005 fa75 	bl	8008748 <sniprintf>
		DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE);
 800325e:	4b48      	ldr	r3, [pc, #288]	; (8003380 <SystemActivation+0x7c0>)
 8003260:	781b      	ldrb	r3, [r3, #0]
 8003262:	2280      	movs	r2, #128	; 0x80
 8003264:	4944      	ldr	r1, [pc, #272]	; (8003378 <SystemActivation+0x7b8>)
 8003266:	4618      	mov	r0, r3
 8003268:	f7fd fe4e 	bl	8000f08 <DebugPrint>
		memset(PrintBuffer, '\0', COMM_SIZE); snprintf(PrintBuffer, COMM_SIZE-1, "\n\r\t- Sensor Type:\t%u", SysInfo.SensorType);
 800326c:	2280      	movs	r2, #128	; 0x80
 800326e:	2100      	movs	r1, #0
 8003270:	4841      	ldr	r0, [pc, #260]	; (8003378 <SystemActivation+0x7b8>)
 8003272:	f005 fb00 	bl	8008876 <memset>
 8003276:	4b43      	ldr	r3, [pc, #268]	; (8003384 <SystemActivation+0x7c4>)
 8003278:	799b      	ldrb	r3, [r3, #6]
 800327a:	4a46      	ldr	r2, [pc, #280]	; (8003394 <SystemActivation+0x7d4>)
 800327c:	217f      	movs	r1, #127	; 0x7f
 800327e:	483e      	ldr	r0, [pc, #248]	; (8003378 <SystemActivation+0x7b8>)
 8003280:	f005 fa62 	bl	8008748 <sniprintf>
		DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE);
 8003284:	4b3e      	ldr	r3, [pc, #248]	; (8003380 <SystemActivation+0x7c0>)
 8003286:	781b      	ldrb	r3, [r3, #0]
 8003288:	2280      	movs	r2, #128	; 0x80
 800328a:	493b      	ldr	r1, [pc, #236]	; (8003378 <SystemActivation+0x7b8>)
 800328c:	4618      	mov	r0, r3
 800328e:	f7fd fe3b 	bl	8000f08 <DebugPrint>
		memset(PrintBuffer, '\0', COMM_SIZE); snprintf(PrintBuffer, COMM_SIZE-1, "\n\r\t- EEPROM Address:\t0x%04X", SysInfo.EEPROM_Address );
 8003292:	2280      	movs	r2, #128	; 0x80
 8003294:	2100      	movs	r1, #0
 8003296:	4838      	ldr	r0, [pc, #224]	; (8003378 <SystemActivation+0x7b8>)
 8003298:	f005 faed 	bl	8008876 <memset>
 800329c:	4b39      	ldr	r3, [pc, #228]	; (8003384 <SystemActivation+0x7c4>)
 800329e:	895b      	ldrh	r3, [r3, #10]
 80032a0:	4a3d      	ldr	r2, [pc, #244]	; (8003398 <SystemActivation+0x7d8>)
 80032a2:	217f      	movs	r1, #127	; 0x7f
 80032a4:	4834      	ldr	r0, [pc, #208]	; (8003378 <SystemActivation+0x7b8>)
 80032a6:	f005 fa4f 	bl	8008748 <sniprintf>
		DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE);
 80032aa:	4b35      	ldr	r3, [pc, #212]	; (8003380 <SystemActivation+0x7c0>)
 80032ac:	781b      	ldrb	r3, [r3, #0]
 80032ae:	2280      	movs	r2, #128	; 0x80
 80032b0:	4931      	ldr	r1, [pc, #196]	; (8003378 <SystemActivation+0x7b8>)
 80032b2:	4618      	mov	r0, r3
 80032b4:	f7fd fe28 	bl	8000f08 <DebugPrint>
		SystemActivationFlag = false;
 80032b8:	2300      	movs	r3, #0
 80032ba:	75fb      	strb	r3, [r7, #23]
 80032bc:	e010      	b.n	80032e0 <SystemActivation+0x720>
	}else{
		memset(PrintBuffer, '\0', COMM_SIZE); snprintf(PrintBuffer, COMM_SIZE-1, "\n\r\t- EEPROM data is valid");
 80032be:	2280      	movs	r2, #128	; 0x80
 80032c0:	2100      	movs	r1, #0
 80032c2:	482d      	ldr	r0, [pc, #180]	; (8003378 <SystemActivation+0x7b8>)
 80032c4:	f005 fad7 	bl	8008876 <memset>
 80032c8:	4a34      	ldr	r2, [pc, #208]	; (800339c <SystemActivation+0x7dc>)
 80032ca:	217f      	movs	r1, #127	; 0x7f
 80032cc:	482a      	ldr	r0, [pc, #168]	; (8003378 <SystemActivation+0x7b8>)
 80032ce:	f005 fa3b 	bl	8008748 <sniprintf>
		DebugPrint(VerboseMode, PrintBuffer, COMM_SIZE);
 80032d2:	4b2b      	ldr	r3, [pc, #172]	; (8003380 <SystemActivation+0x7c0>)
 80032d4:	781b      	ldrb	r3, [r3, #0]
 80032d6:	2280      	movs	r2, #128	; 0x80
 80032d8:	4927      	ldr	r1, [pc, #156]	; (8003378 <SystemActivation+0x7b8>)
 80032da:	4618      	mov	r0, r3
 80032dc:	f7fd fe14 	bl	8000f08 <DebugPrint>
	//////////////////////////////////////////////////////////////////////////////
	/////////////// Display Sensor Configuration on Indication LEDs //////////////
	//////////////////////////////////////////////////////////////////////////////

	//Set indication lights to show sensor type
	if(SysInfo.SensorType>15){
 80032e0:	4b28      	ldr	r3, [pc, #160]	; (8003384 <SystemActivation+0x7c4>)
 80032e2:	799b      	ldrb	r3, [r3, #6]
 80032e4:	2b0f      	cmp	r3, #15
 80032e6:	d90c      	bls.n	8003302 <SystemActivation+0x742>
		Set_LED_Indication5(1);
 80032e8:	2001      	movs	r0, #1
 80032ea:	f7fd fda7 	bl	8000e3c <Set_LED_Indication5>
		Set_LED_Indication4(1);
 80032ee:	2001      	movs	r0, #1
 80032f0:	f7fd fd92 	bl	8000e18 <Set_LED_Indication4>
		Set_LED_Indication3(1);
 80032f4:	2001      	movs	r0, #1
 80032f6:	f7fd fd7d 	bl	8000df4 <Set_LED_Indication3>
		Set_LED_Indication2(1);
 80032fa:	2001      	movs	r0, #1
 80032fc:	f7fd fd68 	bl	8000dd0 <Set_LED_Indication2>
 8003300:	e035      	b.n	800336e <SystemActivation+0x7ae>
	}else{
		Set_LED_Indication5( (SysInfo.SensorType>>3)&0x01 );
 8003302:	4b20      	ldr	r3, [pc, #128]	; (8003384 <SystemActivation+0x7c4>)
 8003304:	799b      	ldrb	r3, [r3, #6]
 8003306:	08db      	lsrs	r3, r3, #3
 8003308:	b2db      	uxtb	r3, r3
 800330a:	f003 0301 	and.w	r3, r3, #1
 800330e:	2b00      	cmp	r3, #0
 8003310:	bf14      	ite	ne
 8003312:	2301      	movne	r3, #1
 8003314:	2300      	moveq	r3, #0
 8003316:	b2db      	uxtb	r3, r3
 8003318:	4618      	mov	r0, r3
 800331a:	f7fd fd8f 	bl	8000e3c <Set_LED_Indication5>
		Set_LED_Indication4( (SysInfo.SensorType>>2)&0x01 );
 800331e:	4b19      	ldr	r3, [pc, #100]	; (8003384 <SystemActivation+0x7c4>)
 8003320:	799b      	ldrb	r3, [r3, #6]
 8003322:	089b      	lsrs	r3, r3, #2
 8003324:	b2db      	uxtb	r3, r3
 8003326:	f003 0301 	and.w	r3, r3, #1
 800332a:	2b00      	cmp	r3, #0
 800332c:	bf14      	ite	ne
 800332e:	2301      	movne	r3, #1
 8003330:	2300      	moveq	r3, #0
 8003332:	b2db      	uxtb	r3, r3
 8003334:	4618      	mov	r0, r3
 8003336:	f7fd fd6f 	bl	8000e18 <Set_LED_Indication4>
		Set_LED_Indication3( (SysInfo.SensorType>>1)&0x01 );
 800333a:	4b12      	ldr	r3, [pc, #72]	; (8003384 <SystemActivation+0x7c4>)
 800333c:	799b      	ldrb	r3, [r3, #6]
 800333e:	085b      	lsrs	r3, r3, #1
 8003340:	b2db      	uxtb	r3, r3
 8003342:	f003 0301 	and.w	r3, r3, #1
 8003346:	2b00      	cmp	r3, #0
 8003348:	bf14      	ite	ne
 800334a:	2301      	movne	r3, #1
 800334c:	2300      	moveq	r3, #0
 800334e:	b2db      	uxtb	r3, r3
 8003350:	4618      	mov	r0, r3
 8003352:	f7fd fd4f 	bl	8000df4 <Set_LED_Indication3>
		Set_LED_Indication2( (SysInfo.SensorType>>0)&0x01 );
 8003356:	4b0b      	ldr	r3, [pc, #44]	; (8003384 <SystemActivation+0x7c4>)
 8003358:	799b      	ldrb	r3, [r3, #6]
 800335a:	f003 0301 	and.w	r3, r3, #1
 800335e:	2b00      	cmp	r3, #0
 8003360:	bf14      	ite	ne
 8003362:	2301      	movne	r3, #1
 8003364:	2300      	moveq	r3, #0
 8003366:	b2db      	uxtb	r3, r3
 8003368:	4618      	mov	r0, r3
 800336a:	f7fd fd31 	bl	8000dd0 <Set_LED_Indication2>
	}




	return SystemActivationFlag;
 800336e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003370:	4618      	mov	r0, r3
 8003372:	3718      	adds	r7, #24
 8003374:	46bd      	mov	sp, r7
 8003376:	bd80      	pop	{r7, pc}
 8003378:	20000468 	.word	0x20000468
 800337c:	0800cc6c 	.word	0x0800cc6c
 8003380:	2000001b 	.word	0x2000001b
 8003384:	2000045c 	.word	0x2000045c
 8003388:	0800cca0 	.word	0x0800cca0
 800338c:	0800ccdc 	.word	0x0800ccdc
 8003390:	0800ccf8 	.word	0x0800ccf8
 8003394:	0800cd14 	.word	0x0800cd14
 8003398:	0800cd2c 	.word	0x0800cd2c
 800339c:	0800cd48 	.word	0x0800cd48

080033a0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80033a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80033d8 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80033a4:	f7fe fd48 	bl	8001e38 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80033a8:	480c      	ldr	r0, [pc, #48]	; (80033dc <LoopForever+0x6>)
  ldr r1, =_edata
 80033aa:	490d      	ldr	r1, [pc, #52]	; (80033e0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80033ac:	4a0d      	ldr	r2, [pc, #52]	; (80033e4 <LoopForever+0xe>)
  movs r3, #0
 80033ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80033b0:	e002      	b.n	80033b8 <LoopCopyDataInit>

080033b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80033b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80033b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80033b6:	3304      	adds	r3, #4

080033b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80033b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80033ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80033bc:	d3f9      	bcc.n	80033b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80033be:	4a0a      	ldr	r2, [pc, #40]	; (80033e8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80033c0:	4c0a      	ldr	r4, [pc, #40]	; (80033ec <LoopForever+0x16>)
  movs r3, #0
 80033c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80033c4:	e001      	b.n	80033ca <LoopFillZerobss>

080033c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80033c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80033c8:	3204      	adds	r2, #4

080033ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80033ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80033cc:	d3fb      	bcc.n	80033c6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80033ce:	f005 faab 	bl	8008928 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80033d2:	f7fd fdf5 	bl	8000fc0 <main>

080033d6 <LoopForever>:

LoopForever:
    b LoopForever
 80033d6:	e7fe      	b.n	80033d6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80033d8:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80033dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80033e0:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 80033e4:	0800d1d0 	.word	0x0800d1d0
  ldr r2, =_sbss
 80033e8:	200001f4 	.word	0x200001f4
  ldr r4, =_ebss
 80033ec:	200006d4 	.word	0x200006d4

080033f0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80033f0:	e7fe      	b.n	80033f0 <ADC1_2_IRQHandler>
	...

080033f4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80033f8:	4b08      	ldr	r3, [pc, #32]	; (800341c <HAL_Init+0x28>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a07      	ldr	r2, [pc, #28]	; (800341c <HAL_Init+0x28>)
 80033fe:	f043 0310 	orr.w	r3, r3, #16
 8003402:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003404:	2003      	movs	r0, #3
 8003406:	f000 fd99 	bl	8003f3c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800340a:	200f      	movs	r0, #15
 800340c:	f000 f808 	bl	8003420 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003410:	f7fe fa58 	bl	80018c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003414:	2300      	movs	r3, #0
}
 8003416:	4618      	mov	r0, r3
 8003418:	bd80      	pop	{r7, pc}
 800341a:	bf00      	nop
 800341c:	40022000 	.word	0x40022000

08003420 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b082      	sub	sp, #8
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003428:	4b12      	ldr	r3, [pc, #72]	; (8003474 <HAL_InitTick+0x54>)
 800342a:	681a      	ldr	r2, [r3, #0]
 800342c:	4b12      	ldr	r3, [pc, #72]	; (8003478 <HAL_InitTick+0x58>)
 800342e:	781b      	ldrb	r3, [r3, #0]
 8003430:	4619      	mov	r1, r3
 8003432:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003436:	fbb3 f3f1 	udiv	r3, r3, r1
 800343a:	fbb2 f3f3 	udiv	r3, r2, r3
 800343e:	4618      	mov	r0, r3
 8003440:	f000 fdb1 	bl	8003fa6 <HAL_SYSTICK_Config>
 8003444:	4603      	mov	r3, r0
 8003446:	2b00      	cmp	r3, #0
 8003448:	d001      	beq.n	800344e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800344a:	2301      	movs	r3, #1
 800344c:	e00e      	b.n	800346c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2b0f      	cmp	r3, #15
 8003452:	d80a      	bhi.n	800346a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003454:	2200      	movs	r2, #0
 8003456:	6879      	ldr	r1, [r7, #4]
 8003458:	f04f 30ff 	mov.w	r0, #4294967295
 800345c:	f000 fd79 	bl	8003f52 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003460:	4a06      	ldr	r2, [pc, #24]	; (800347c <HAL_InitTick+0x5c>)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8003466:	2300      	movs	r3, #0
 8003468:	e000      	b.n	800346c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800346a:	2301      	movs	r3, #1
}
 800346c:	4618      	mov	r0, r3
 800346e:	3708      	adds	r7, #8
 8003470:	46bd      	mov	sp, r7
 8003472:	bd80      	pop	{r7, pc}
 8003474:	20000020 	.word	0x20000020
 8003478:	20000028 	.word	0x20000028
 800347c:	20000024 	.word	0x20000024

08003480 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003480:	b480      	push	{r7}
 8003482:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003484:	4b06      	ldr	r3, [pc, #24]	; (80034a0 <HAL_IncTick+0x20>)
 8003486:	781b      	ldrb	r3, [r3, #0]
 8003488:	461a      	mov	r2, r3
 800348a:	4b06      	ldr	r3, [pc, #24]	; (80034a4 <HAL_IncTick+0x24>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4413      	add	r3, r2
 8003490:	4a04      	ldr	r2, [pc, #16]	; (80034a4 <HAL_IncTick+0x24>)
 8003492:	6013      	str	r3, [r2, #0]
}
 8003494:	bf00      	nop
 8003496:	46bd      	mov	sp, r7
 8003498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349c:	4770      	bx	lr
 800349e:	bf00      	nop
 80034a0:	20000028 	.word	0x20000028
 80034a4:	20000584 	.word	0x20000584

080034a8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80034a8:	b480      	push	{r7}
 80034aa:	af00      	add	r7, sp, #0
  return uwTick;  
 80034ac:	4b03      	ldr	r3, [pc, #12]	; (80034bc <HAL_GetTick+0x14>)
 80034ae:	681b      	ldr	r3, [r3, #0]
}
 80034b0:	4618      	mov	r0, r3
 80034b2:	46bd      	mov	sp, r7
 80034b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b8:	4770      	bx	lr
 80034ba:	bf00      	nop
 80034bc:	20000584 	.word	0x20000584

080034c0 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b084      	sub	sp, #16
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80034c8:	f7ff ffee 	bl	80034a8 <HAL_GetTick>
 80034cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034d8:	d005      	beq.n	80034e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80034da:	4b0a      	ldr	r3, [pc, #40]	; (8003504 <HAL_Delay+0x44>)
 80034dc:	781b      	ldrb	r3, [r3, #0]
 80034de:	461a      	mov	r2, r3
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	4413      	add	r3, r2
 80034e4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80034e6:	bf00      	nop
 80034e8:	f7ff ffde 	bl	80034a8 <HAL_GetTick>
 80034ec:	4602      	mov	r2, r0
 80034ee:	68bb      	ldr	r3, [r7, #8]
 80034f0:	1ad3      	subs	r3, r2, r3
 80034f2:	68fa      	ldr	r2, [r7, #12]
 80034f4:	429a      	cmp	r2, r3
 80034f6:	d8f7      	bhi.n	80034e8 <HAL_Delay+0x28>
  {
  }
}
 80034f8:	bf00      	nop
 80034fa:	bf00      	nop
 80034fc:	3710      	adds	r7, #16
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}
 8003502:	bf00      	nop
 8003504:	20000028 	.word	0x20000028

08003508 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b084      	sub	sp, #16
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d101      	bne.n	800351a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003516:	2301      	movs	r3, #1
 8003518:	e0ed      	b.n	80036f6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003520:	b2db      	uxtb	r3, r3
 8003522:	2b00      	cmp	r3, #0
 8003524:	d102      	bne.n	800352c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8003526:	6878      	ldr	r0, [r7, #4]
 8003528:	f7fe f9f0 	bl	800190c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	681a      	ldr	r2, [r3, #0]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f042 0201 	orr.w	r2, r2, #1
 800353a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800353c:	f7ff ffb4 	bl	80034a8 <HAL_GetTick>
 8003540:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003542:	e012      	b.n	800356a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003544:	f7ff ffb0 	bl	80034a8 <HAL_GetTick>
 8003548:	4602      	mov	r2, r0
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	1ad3      	subs	r3, r2, r3
 800354e:	2b0a      	cmp	r3, #10
 8003550:	d90b      	bls.n	800356a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003556:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2205      	movs	r2, #5
 8003562:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003566:	2301      	movs	r3, #1
 8003568:	e0c5      	b.n	80036f6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	f003 0301 	and.w	r3, r3, #1
 8003574:	2b00      	cmp	r3, #0
 8003576:	d0e5      	beq.n	8003544 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	681a      	ldr	r2, [r3, #0]
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f022 0202 	bic.w	r2, r2, #2
 8003586:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003588:	f7ff ff8e 	bl	80034a8 <HAL_GetTick>
 800358c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800358e:	e012      	b.n	80035b6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003590:	f7ff ff8a 	bl	80034a8 <HAL_GetTick>
 8003594:	4602      	mov	r2, r0
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	1ad3      	subs	r3, r2, r3
 800359a:	2b0a      	cmp	r3, #10
 800359c:	d90b      	bls.n	80035b6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035a2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2205      	movs	r2, #5
 80035ae:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80035b2:	2301      	movs	r3, #1
 80035b4:	e09f      	b.n	80036f6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	f003 0302 	and.w	r3, r3, #2
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d1e5      	bne.n	8003590 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	7e1b      	ldrb	r3, [r3, #24]
 80035c8:	2b01      	cmp	r3, #1
 80035ca:	d108      	bne.n	80035de <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	681a      	ldr	r2, [r3, #0]
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80035da:	601a      	str	r2, [r3, #0]
 80035dc:	e007      	b.n	80035ee <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	681a      	ldr	r2, [r3, #0]
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80035ec:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	7e5b      	ldrb	r3, [r3, #25]
 80035f2:	2b01      	cmp	r3, #1
 80035f4:	d108      	bne.n	8003608 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	681a      	ldr	r2, [r3, #0]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003604:	601a      	str	r2, [r3, #0]
 8003606:	e007      	b.n	8003618 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	681a      	ldr	r2, [r3, #0]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003616:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	7e9b      	ldrb	r3, [r3, #26]
 800361c:	2b01      	cmp	r3, #1
 800361e:	d108      	bne.n	8003632 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	681a      	ldr	r2, [r3, #0]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f042 0220 	orr.w	r2, r2, #32
 800362e:	601a      	str	r2, [r3, #0]
 8003630:	e007      	b.n	8003642 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	681a      	ldr	r2, [r3, #0]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f022 0220 	bic.w	r2, r2, #32
 8003640:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	7edb      	ldrb	r3, [r3, #27]
 8003646:	2b01      	cmp	r3, #1
 8003648:	d108      	bne.n	800365c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	681a      	ldr	r2, [r3, #0]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f022 0210 	bic.w	r2, r2, #16
 8003658:	601a      	str	r2, [r3, #0]
 800365a:	e007      	b.n	800366c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	681a      	ldr	r2, [r3, #0]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f042 0210 	orr.w	r2, r2, #16
 800366a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	7f1b      	ldrb	r3, [r3, #28]
 8003670:	2b01      	cmp	r3, #1
 8003672:	d108      	bne.n	8003686 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	681a      	ldr	r2, [r3, #0]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f042 0208 	orr.w	r2, r2, #8
 8003682:	601a      	str	r2, [r3, #0]
 8003684:	e007      	b.n	8003696 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	681a      	ldr	r2, [r3, #0]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f022 0208 	bic.w	r2, r2, #8
 8003694:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	7f5b      	ldrb	r3, [r3, #29]
 800369a:	2b01      	cmp	r3, #1
 800369c:	d108      	bne.n	80036b0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	681a      	ldr	r2, [r3, #0]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f042 0204 	orr.w	r2, r2, #4
 80036ac:	601a      	str	r2, [r3, #0]
 80036ae:	e007      	b.n	80036c0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	681a      	ldr	r2, [r3, #0]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f022 0204 	bic.w	r2, r2, #4
 80036be:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	689a      	ldr	r2, [r3, #8]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	68db      	ldr	r3, [r3, #12]
 80036c8:	431a      	orrs	r2, r3
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	691b      	ldr	r3, [r3, #16]
 80036ce:	431a      	orrs	r2, r3
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	695b      	ldr	r3, [r3, #20]
 80036d4:	ea42 0103 	orr.w	r1, r2, r3
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	1e5a      	subs	r2, r3, #1
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	430a      	orrs	r2, r1
 80036e4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2200      	movs	r2, #0
 80036ea:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2201      	movs	r2, #1
 80036f0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80036f4:	2300      	movs	r3, #0
}
 80036f6:	4618      	mov	r0, r3
 80036f8:	3710      	adds	r7, #16
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bd80      	pop	{r7, pc}

080036fe <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80036fe:	b480      	push	{r7}
 8003700:	b087      	sub	sp, #28
 8003702:	af00      	add	r7, sp, #0
 8003704:	6078      	str	r0, [r7, #4]
 8003706:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003714:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8003716:	7cfb      	ldrb	r3, [r7, #19]
 8003718:	2b01      	cmp	r3, #1
 800371a:	d003      	beq.n	8003724 <HAL_CAN_ConfigFilter+0x26>
 800371c:	7cfb      	ldrb	r3, [r7, #19]
 800371e:	2b02      	cmp	r3, #2
 8003720:	f040 80aa 	bne.w	8003878 <HAL_CAN_ConfigFilter+0x17a>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003724:	697b      	ldr	r3, [r7, #20]
 8003726:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800372a:	f043 0201 	orr.w	r2, r3, #1
 800372e:	697b      	ldr	r3, [r7, #20]
 8003730:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	695b      	ldr	r3, [r3, #20]
 8003738:	f003 031f 	and.w	r3, r3, #31
 800373c:	2201      	movs	r2, #1
 800373e:	fa02 f303 	lsl.w	r3, r2, r3
 8003742:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8003744:	697b      	ldr	r3, [r7, #20]
 8003746:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	43db      	mvns	r3, r3
 800374e:	401a      	ands	r2, r3
 8003750:	697b      	ldr	r3, [r7, #20]
 8003752:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	69db      	ldr	r3, [r3, #28]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d123      	bne.n	80037a6 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800375e:	697b      	ldr	r3, [r7, #20]
 8003760:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	43db      	mvns	r3, r3
 8003768:	401a      	ands	r2, r3
 800376a:	697b      	ldr	r3, [r7, #20]
 800376c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	68db      	ldr	r3, [r3, #12]
 8003774:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800377c:	683a      	ldr	r2, [r7, #0]
 800377e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003780:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003782:	697b      	ldr	r3, [r7, #20]
 8003784:	3248      	adds	r2, #72	; 0x48
 8003786:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	689b      	ldr	r3, [r3, #8]
 800378e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800379a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800379c:	6979      	ldr	r1, [r7, #20]
 800379e:	3348      	adds	r3, #72	; 0x48
 80037a0:	00db      	lsls	r3, r3, #3
 80037a2:	440b      	add	r3, r1
 80037a4:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	69db      	ldr	r3, [r3, #28]
 80037aa:	2b01      	cmp	r3, #1
 80037ac:	d122      	bne.n	80037f4 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80037ae:	697b      	ldr	r3, [r7, #20]
 80037b0:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	431a      	orrs	r2, r3
 80037b8:	697b      	ldr	r3, [r7, #20]
 80037ba:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80037ca:	683a      	ldr	r2, [r7, #0]
 80037cc:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80037ce:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80037d0:	697b      	ldr	r3, [r7, #20]
 80037d2:	3248      	adds	r2, #72	; 0x48
 80037d4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	689b      	ldr	r3, [r3, #8]
 80037dc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	68db      	ldr	r3, [r3, #12]
 80037e2:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80037e8:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80037ea:	6979      	ldr	r1, [r7, #20]
 80037ec:	3348      	adds	r3, #72	; 0x48
 80037ee:	00db      	lsls	r3, r3, #3
 80037f0:	440b      	add	r3, r1
 80037f2:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	699b      	ldr	r3, [r3, #24]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d109      	bne.n	8003810 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80037fc:	697b      	ldr	r3, [r7, #20]
 80037fe:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	43db      	mvns	r3, r3
 8003806:	401a      	ands	r2, r3
 8003808:	697b      	ldr	r3, [r7, #20]
 800380a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800380e:	e007      	b.n	8003820 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8003810:	697b      	ldr	r3, [r7, #20]
 8003812:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	431a      	orrs	r2, r3
 800381a:	697b      	ldr	r3, [r7, #20]
 800381c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	691b      	ldr	r3, [r3, #16]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d109      	bne.n	800383c <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8003828:	697b      	ldr	r3, [r7, #20]
 800382a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	43db      	mvns	r3, r3
 8003832:	401a      	ands	r2, r3
 8003834:	697b      	ldr	r3, [r7, #20]
 8003836:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800383a:	e007      	b.n	800384c <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800383c:	697b      	ldr	r3, [r7, #20]
 800383e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	431a      	orrs	r2, r3
 8003846:	697b      	ldr	r3, [r7, #20]
 8003848:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	6a1b      	ldr	r3, [r3, #32]
 8003850:	2b01      	cmp	r3, #1
 8003852:	d107      	bne.n	8003864 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8003854:	697b      	ldr	r3, [r7, #20]
 8003856:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	431a      	orrs	r2, r3
 800385e:	697b      	ldr	r3, [r7, #20]
 8003860:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003864:	697b      	ldr	r3, [r7, #20]
 8003866:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800386a:	f023 0201 	bic.w	r2, r3, #1
 800386e:	697b      	ldr	r3, [r7, #20]
 8003870:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8003874:	2300      	movs	r3, #0
 8003876:	e006      	b.n	8003886 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800387c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003884:	2301      	movs	r3, #1
  }
}
 8003886:	4618      	mov	r0, r3
 8003888:	371c      	adds	r7, #28
 800388a:	46bd      	mov	sp, r7
 800388c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003890:	4770      	bx	lr

08003892 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8003892:	b580      	push	{r7, lr}
 8003894:	b084      	sub	sp, #16
 8003896:	af00      	add	r7, sp, #0
 8003898:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	f893 3020 	ldrb.w	r3, [r3, #32]
 80038a0:	b2db      	uxtb	r3, r3
 80038a2:	2b01      	cmp	r3, #1
 80038a4:	d12e      	bne.n	8003904 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2202      	movs	r2, #2
 80038aa:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	681a      	ldr	r2, [r3, #0]
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f022 0201 	bic.w	r2, r2, #1
 80038bc:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80038be:	f7ff fdf3 	bl	80034a8 <HAL_GetTick>
 80038c2:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80038c4:	e012      	b.n	80038ec <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80038c6:	f7ff fdef 	bl	80034a8 <HAL_GetTick>
 80038ca:	4602      	mov	r2, r0
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	1ad3      	subs	r3, r2, r3
 80038d0:	2b0a      	cmp	r3, #10
 80038d2:	d90b      	bls.n	80038ec <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038d8:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2205      	movs	r2, #5
 80038e4:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80038e8:	2301      	movs	r3, #1
 80038ea:	e012      	b.n	8003912 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	f003 0301 	and.w	r3, r3, #1
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d1e5      	bne.n	80038c6 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2200      	movs	r2, #0
 80038fe:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8003900:	2300      	movs	r3, #0
 8003902:	e006      	b.n	8003912 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003908:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003910:	2301      	movs	r3, #1
  }
}
 8003912:	4618      	mov	r0, r3
 8003914:	3710      	adds	r7, #16
 8003916:	46bd      	mov	sp, r7
 8003918:	bd80      	pop	{r7, pc}

0800391a <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 800391a:	b480      	push	{r7}
 800391c:	b089      	sub	sp, #36	; 0x24
 800391e:	af00      	add	r7, sp, #0
 8003920:	60f8      	str	r0, [r7, #12]
 8003922:	60b9      	str	r1, [r7, #8]
 8003924:	607a      	str	r2, [r7, #4]
 8003926:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800392e:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	689b      	ldr	r3, [r3, #8]
 8003936:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8003938:	7ffb      	ldrb	r3, [r7, #31]
 800393a:	2b01      	cmp	r3, #1
 800393c:	d003      	beq.n	8003946 <HAL_CAN_AddTxMessage+0x2c>
 800393e:	7ffb      	ldrb	r3, [r7, #31]
 8003940:	2b02      	cmp	r3, #2
 8003942:	f040 80ad 	bne.w	8003aa0 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003946:	69bb      	ldr	r3, [r7, #24]
 8003948:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800394c:	2b00      	cmp	r3, #0
 800394e:	d10a      	bne.n	8003966 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003950:	69bb      	ldr	r3, [r7, #24]
 8003952:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003956:	2b00      	cmp	r3, #0
 8003958:	d105      	bne.n	8003966 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800395a:	69bb      	ldr	r3, [r7, #24]
 800395c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003960:	2b00      	cmp	r3, #0
 8003962:	f000 8095 	beq.w	8003a90 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8003966:	69bb      	ldr	r3, [r7, #24]
 8003968:	0e1b      	lsrs	r3, r3, #24
 800396a:	f003 0303 	and.w	r3, r3, #3
 800396e:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8003970:	2201      	movs	r2, #1
 8003972:	697b      	ldr	r3, [r7, #20]
 8003974:	409a      	lsls	r2, r3
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800397a:	68bb      	ldr	r3, [r7, #8]
 800397c:	689b      	ldr	r3, [r3, #8]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d10d      	bne.n	800399e <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003982:	68bb      	ldr	r3, [r7, #8]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8003988:	68bb      	ldr	r3, [r7, #8]
 800398a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800398c:	68f9      	ldr	r1, [r7, #12]
 800398e:	6809      	ldr	r1, [r1, #0]
 8003990:	431a      	orrs	r2, r3
 8003992:	697b      	ldr	r3, [r7, #20]
 8003994:	3318      	adds	r3, #24
 8003996:	011b      	lsls	r3, r3, #4
 8003998:	440b      	add	r3, r1
 800399a:	601a      	str	r2, [r3, #0]
 800399c:	e00f      	b.n	80039be <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800399e:	68bb      	ldr	r3, [r7, #8]
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80039a4:	68bb      	ldr	r3, [r7, #8]
 80039a6:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80039a8:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80039aa:	68bb      	ldr	r3, [r7, #8]
 80039ac:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80039ae:	68f9      	ldr	r1, [r7, #12]
 80039b0:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80039b2:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80039b4:	697b      	ldr	r3, [r7, #20]
 80039b6:	3318      	adds	r3, #24
 80039b8:	011b      	lsls	r3, r3, #4
 80039ba:	440b      	add	r3, r1
 80039bc:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	6819      	ldr	r1, [r3, #0]
 80039c2:	68bb      	ldr	r3, [r7, #8]
 80039c4:	691a      	ldr	r2, [r3, #16]
 80039c6:	697b      	ldr	r3, [r7, #20]
 80039c8:	3318      	adds	r3, #24
 80039ca:	011b      	lsls	r3, r3, #4
 80039cc:	440b      	add	r3, r1
 80039ce:	3304      	adds	r3, #4
 80039d0:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80039d2:	68bb      	ldr	r3, [r7, #8]
 80039d4:	7d1b      	ldrb	r3, [r3, #20]
 80039d6:	2b01      	cmp	r3, #1
 80039d8:	d111      	bne.n	80039fe <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681a      	ldr	r2, [r3, #0]
 80039de:	697b      	ldr	r3, [r7, #20]
 80039e0:	3318      	adds	r3, #24
 80039e2:	011b      	lsls	r3, r3, #4
 80039e4:	4413      	add	r3, r2
 80039e6:	3304      	adds	r3, #4
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	68fa      	ldr	r2, [r7, #12]
 80039ec:	6811      	ldr	r1, [r2, #0]
 80039ee:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80039f2:	697b      	ldr	r3, [r7, #20]
 80039f4:	3318      	adds	r3, #24
 80039f6:	011b      	lsls	r3, r3, #4
 80039f8:	440b      	add	r3, r1
 80039fa:	3304      	adds	r3, #4
 80039fc:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	3307      	adds	r3, #7
 8003a02:	781b      	ldrb	r3, [r3, #0]
 8003a04:	061a      	lsls	r2, r3, #24
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	3306      	adds	r3, #6
 8003a0a:	781b      	ldrb	r3, [r3, #0]
 8003a0c:	041b      	lsls	r3, r3, #16
 8003a0e:	431a      	orrs	r2, r3
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	3305      	adds	r3, #5
 8003a14:	781b      	ldrb	r3, [r3, #0]
 8003a16:	021b      	lsls	r3, r3, #8
 8003a18:	4313      	orrs	r3, r2
 8003a1a:	687a      	ldr	r2, [r7, #4]
 8003a1c:	3204      	adds	r2, #4
 8003a1e:	7812      	ldrb	r2, [r2, #0]
 8003a20:	4610      	mov	r0, r2
 8003a22:	68fa      	ldr	r2, [r7, #12]
 8003a24:	6811      	ldr	r1, [r2, #0]
 8003a26:	ea43 0200 	orr.w	r2, r3, r0
 8003a2a:	697b      	ldr	r3, [r7, #20]
 8003a2c:	011b      	lsls	r3, r3, #4
 8003a2e:	440b      	add	r3, r1
 8003a30:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8003a34:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	3303      	adds	r3, #3
 8003a3a:	781b      	ldrb	r3, [r3, #0]
 8003a3c:	061a      	lsls	r2, r3, #24
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	3302      	adds	r3, #2
 8003a42:	781b      	ldrb	r3, [r3, #0]
 8003a44:	041b      	lsls	r3, r3, #16
 8003a46:	431a      	orrs	r2, r3
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	3301      	adds	r3, #1
 8003a4c:	781b      	ldrb	r3, [r3, #0]
 8003a4e:	021b      	lsls	r3, r3, #8
 8003a50:	4313      	orrs	r3, r2
 8003a52:	687a      	ldr	r2, [r7, #4]
 8003a54:	7812      	ldrb	r2, [r2, #0]
 8003a56:	4610      	mov	r0, r2
 8003a58:	68fa      	ldr	r2, [r7, #12]
 8003a5a:	6811      	ldr	r1, [r2, #0]
 8003a5c:	ea43 0200 	orr.w	r2, r3, r0
 8003a60:	697b      	ldr	r3, [r7, #20]
 8003a62:	011b      	lsls	r3, r3, #4
 8003a64:	440b      	add	r3, r1
 8003a66:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8003a6a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681a      	ldr	r2, [r3, #0]
 8003a70:	697b      	ldr	r3, [r7, #20]
 8003a72:	3318      	adds	r3, #24
 8003a74:	011b      	lsls	r3, r3, #4
 8003a76:	4413      	add	r3, r2
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	68fa      	ldr	r2, [r7, #12]
 8003a7c:	6811      	ldr	r1, [r2, #0]
 8003a7e:	f043 0201 	orr.w	r2, r3, #1
 8003a82:	697b      	ldr	r3, [r7, #20]
 8003a84:	3318      	adds	r3, #24
 8003a86:	011b      	lsls	r3, r3, #4
 8003a88:	440b      	add	r3, r1
 8003a8a:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	e00e      	b.n	8003aae <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a94:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	e006      	b.n	8003aae <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aa4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003aac:	2301      	movs	r3, #1
  }
}
 8003aae:	4618      	mov	r0, r3
 8003ab0:	3724      	adds	r7, #36	; 0x24
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab8:	4770      	bx	lr

08003aba <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8003aba:	b480      	push	{r7}
 8003abc:	b087      	sub	sp, #28
 8003abe:	af00      	add	r7, sp, #0
 8003ac0:	60f8      	str	r0, [r7, #12]
 8003ac2:	60b9      	str	r1, [r7, #8]
 8003ac4:	607a      	str	r2, [r7, #4]
 8003ac6:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003ace:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8003ad0:	7dfb      	ldrb	r3, [r7, #23]
 8003ad2:	2b01      	cmp	r3, #1
 8003ad4:	d003      	beq.n	8003ade <HAL_CAN_GetRxMessage+0x24>
 8003ad6:	7dfb      	ldrb	r3, [r7, #23]
 8003ad8:	2b02      	cmp	r3, #2
 8003ada:	f040 8103 	bne.w	8003ce4 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003ade:	68bb      	ldr	r3, [r7, #8]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d10e      	bne.n	8003b02 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	68db      	ldr	r3, [r3, #12]
 8003aea:	f003 0303 	and.w	r3, r3, #3
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d116      	bne.n	8003b20 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003afe:	2301      	movs	r3, #1
 8003b00:	e0f7      	b.n	8003cf2 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	691b      	ldr	r3, [r3, #16]
 8003b08:	f003 0303 	and.w	r3, r3, #3
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d107      	bne.n	8003b20 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b14:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	e0e8      	b.n	8003cf2 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681a      	ldr	r2, [r3, #0]
 8003b24:	68bb      	ldr	r3, [r7, #8]
 8003b26:	331b      	adds	r3, #27
 8003b28:	011b      	lsls	r3, r3, #4
 8003b2a:	4413      	add	r3, r2
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f003 0204 	and.w	r2, r3, #4
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	689b      	ldr	r3, [r3, #8]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d10c      	bne.n	8003b58 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681a      	ldr	r2, [r3, #0]
 8003b42:	68bb      	ldr	r3, [r7, #8]
 8003b44:	331b      	adds	r3, #27
 8003b46:	011b      	lsls	r3, r3, #4
 8003b48:	4413      	add	r3, r2
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	0d5b      	lsrs	r3, r3, #21
 8003b4e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	601a      	str	r2, [r3, #0]
 8003b56:	e00b      	b.n	8003b70 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681a      	ldr	r2, [r3, #0]
 8003b5c:	68bb      	ldr	r3, [r7, #8]
 8003b5e:	331b      	adds	r3, #27
 8003b60:	011b      	lsls	r3, r3, #4
 8003b62:	4413      	add	r3, r2
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	08db      	lsrs	r3, r3, #3
 8003b68:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681a      	ldr	r2, [r3, #0]
 8003b74:	68bb      	ldr	r3, [r7, #8]
 8003b76:	331b      	adds	r3, #27
 8003b78:	011b      	lsls	r3, r3, #4
 8003b7a:	4413      	add	r3, r2
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f003 0202 	and.w	r2, r3, #2
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681a      	ldr	r2, [r3, #0]
 8003b8a:	68bb      	ldr	r3, [r7, #8]
 8003b8c:	331b      	adds	r3, #27
 8003b8e:	011b      	lsls	r3, r3, #4
 8003b90:	4413      	add	r3, r2
 8003b92:	3304      	adds	r3, #4
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f003 0308 	and.w	r3, r3, #8
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d003      	beq.n	8003ba6 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2208      	movs	r2, #8
 8003ba2:	611a      	str	r2, [r3, #16]
 8003ba4:	e00b      	b.n	8003bbe <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681a      	ldr	r2, [r3, #0]
 8003baa:	68bb      	ldr	r3, [r7, #8]
 8003bac:	331b      	adds	r3, #27
 8003bae:	011b      	lsls	r3, r3, #4
 8003bb0:	4413      	add	r3, r2
 8003bb2:	3304      	adds	r3, #4
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f003 020f 	and.w	r2, r3, #15
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681a      	ldr	r2, [r3, #0]
 8003bc2:	68bb      	ldr	r3, [r7, #8]
 8003bc4:	331b      	adds	r3, #27
 8003bc6:	011b      	lsls	r3, r3, #4
 8003bc8:	4413      	add	r3, r2
 8003bca:	3304      	adds	r3, #4
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	0a1b      	lsrs	r3, r3, #8
 8003bd0:	b2da      	uxtb	r2, r3
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681a      	ldr	r2, [r3, #0]
 8003bda:	68bb      	ldr	r3, [r7, #8]
 8003bdc:	331b      	adds	r3, #27
 8003bde:	011b      	lsls	r3, r3, #4
 8003be0:	4413      	add	r3, r2
 8003be2:	3304      	adds	r3, #4
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	0c1b      	lsrs	r3, r3, #16
 8003be8:	b29a      	uxth	r2, r3
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681a      	ldr	r2, [r3, #0]
 8003bf2:	68bb      	ldr	r3, [r7, #8]
 8003bf4:	011b      	lsls	r3, r3, #4
 8003bf6:	4413      	add	r3, r2
 8003bf8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	b2da      	uxtb	r2, r3
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681a      	ldr	r2, [r3, #0]
 8003c08:	68bb      	ldr	r3, [r7, #8]
 8003c0a:	011b      	lsls	r3, r3, #4
 8003c0c:	4413      	add	r3, r2
 8003c0e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	0a1a      	lsrs	r2, r3, #8
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	3301      	adds	r3, #1
 8003c1a:	b2d2      	uxtb	r2, r2
 8003c1c:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681a      	ldr	r2, [r3, #0]
 8003c22:	68bb      	ldr	r3, [r7, #8]
 8003c24:	011b      	lsls	r3, r3, #4
 8003c26:	4413      	add	r3, r2
 8003c28:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	0c1a      	lsrs	r2, r3, #16
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	3302      	adds	r3, #2
 8003c34:	b2d2      	uxtb	r2, r2
 8003c36:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681a      	ldr	r2, [r3, #0]
 8003c3c:	68bb      	ldr	r3, [r7, #8]
 8003c3e:	011b      	lsls	r3, r3, #4
 8003c40:	4413      	add	r3, r2
 8003c42:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	0e1a      	lsrs	r2, r3, #24
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	3303      	adds	r3, #3
 8003c4e:	b2d2      	uxtb	r2, r2
 8003c50:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681a      	ldr	r2, [r3, #0]
 8003c56:	68bb      	ldr	r3, [r7, #8]
 8003c58:	011b      	lsls	r3, r3, #4
 8003c5a:	4413      	add	r3, r2
 8003c5c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003c60:	681a      	ldr	r2, [r3, #0]
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	3304      	adds	r3, #4
 8003c66:	b2d2      	uxtb	r2, r2
 8003c68:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681a      	ldr	r2, [r3, #0]
 8003c6e:	68bb      	ldr	r3, [r7, #8]
 8003c70:	011b      	lsls	r3, r3, #4
 8003c72:	4413      	add	r3, r2
 8003c74:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	0a1a      	lsrs	r2, r3, #8
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	3305      	adds	r3, #5
 8003c80:	b2d2      	uxtb	r2, r2
 8003c82:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681a      	ldr	r2, [r3, #0]
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	011b      	lsls	r3, r3, #4
 8003c8c:	4413      	add	r3, r2
 8003c8e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	0c1a      	lsrs	r2, r3, #16
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	3306      	adds	r3, #6
 8003c9a:	b2d2      	uxtb	r2, r2
 8003c9c:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681a      	ldr	r2, [r3, #0]
 8003ca2:	68bb      	ldr	r3, [r7, #8]
 8003ca4:	011b      	lsls	r3, r3, #4
 8003ca6:	4413      	add	r3, r2
 8003ca8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	0e1a      	lsrs	r2, r3, #24
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	3307      	adds	r3, #7
 8003cb4:	b2d2      	uxtb	r2, r2
 8003cb6:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003cb8:	68bb      	ldr	r3, [r7, #8]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d108      	bne.n	8003cd0 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	68da      	ldr	r2, [r3, #12]
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f042 0220 	orr.w	r2, r2, #32
 8003ccc:	60da      	str	r2, [r3, #12]
 8003cce:	e007      	b.n	8003ce0 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	691a      	ldr	r2, [r3, #16]
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f042 0220 	orr.w	r2, r2, #32
 8003cde:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	e006      	b.n	8003cf2 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ce8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003cf0:	2301      	movs	r3, #1
  }
}
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	371c      	adds	r7, #28
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfc:	4770      	bx	lr

08003cfe <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(const CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 8003cfe:	b480      	push	{r7}
 8003d00:	b085      	sub	sp, #20
 8003d02:	af00      	add	r7, sp, #0
 8003d04:	6078      	str	r0, [r7, #4]
 8003d06:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 8003d08:	2300      	movs	r3, #0
 8003d0a:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003d12:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8003d14:	7afb      	ldrb	r3, [r7, #11]
 8003d16:	2b01      	cmp	r3, #1
 8003d18:	d002      	beq.n	8003d20 <HAL_CAN_GetRxFifoFillLevel+0x22>
 8003d1a:	7afb      	ldrb	r3, [r7, #11]
 8003d1c:	2b02      	cmp	r3, #2
 8003d1e:	d10f      	bne.n	8003d40 <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d106      	bne.n	8003d34 <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	68db      	ldr	r3, [r3, #12]
 8003d2c:	f003 0303 	and.w	r3, r3, #3
 8003d30:	60fb      	str	r3, [r7, #12]
 8003d32:	e005      	b.n	8003d40 <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	691b      	ldr	r3, [r3, #16]
 8003d3a:	f003 0303 	and.w	r3, r3, #3
 8003d3e:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 8003d40:	68fb      	ldr	r3, [r7, #12]
}
 8003d42:	4618      	mov	r0, r3
 8003d44:	3714      	adds	r7, #20
 8003d46:	46bd      	mov	sp, r7
 8003d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4c:	4770      	bx	lr

08003d4e <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8003d4e:	b480      	push	{r7}
 8003d50:	b085      	sub	sp, #20
 8003d52:	af00      	add	r7, sp, #0
 8003d54:	6078      	str	r0, [r7, #4]
 8003d56:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003d5e:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8003d60:	7bfb      	ldrb	r3, [r7, #15]
 8003d62:	2b01      	cmp	r3, #1
 8003d64:	d002      	beq.n	8003d6c <HAL_CAN_ActivateNotification+0x1e>
 8003d66:	7bfb      	ldrb	r3, [r7, #15]
 8003d68:	2b02      	cmp	r3, #2
 8003d6a:	d109      	bne.n	8003d80 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	6959      	ldr	r1, [r3, #20]
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	683a      	ldr	r2, [r7, #0]
 8003d78:	430a      	orrs	r2, r1
 8003d7a:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	e006      	b.n	8003d8e <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d84:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003d8c:	2301      	movs	r3, #1
  }
}
 8003d8e:	4618      	mov	r0, r3
 8003d90:	3714      	adds	r7, #20
 8003d92:	46bd      	mov	sp, r7
 8003d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d98:	4770      	bx	lr
	...

08003d9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	b085      	sub	sp, #20
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	f003 0307 	and.w	r3, r3, #7
 8003daa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003dac:	4b0c      	ldr	r3, [pc, #48]	; (8003de0 <__NVIC_SetPriorityGrouping+0x44>)
 8003dae:	68db      	ldr	r3, [r3, #12]
 8003db0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003db2:	68ba      	ldr	r2, [r7, #8]
 8003db4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003db8:	4013      	ands	r3, r2
 8003dba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003dc0:	68bb      	ldr	r3, [r7, #8]
 8003dc2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003dc4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003dc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003dcc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003dce:	4a04      	ldr	r2, [pc, #16]	; (8003de0 <__NVIC_SetPriorityGrouping+0x44>)
 8003dd0:	68bb      	ldr	r3, [r7, #8]
 8003dd2:	60d3      	str	r3, [r2, #12]
}
 8003dd4:	bf00      	nop
 8003dd6:	3714      	adds	r7, #20
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dde:	4770      	bx	lr
 8003de0:	e000ed00 	.word	0xe000ed00

08003de4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003de4:	b480      	push	{r7}
 8003de6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003de8:	4b04      	ldr	r3, [pc, #16]	; (8003dfc <__NVIC_GetPriorityGrouping+0x18>)
 8003dea:	68db      	ldr	r3, [r3, #12]
 8003dec:	0a1b      	lsrs	r3, r3, #8
 8003dee:	f003 0307 	and.w	r3, r3, #7
}
 8003df2:	4618      	mov	r0, r3
 8003df4:	46bd      	mov	sp, r7
 8003df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfa:	4770      	bx	lr
 8003dfc:	e000ed00 	.word	0xe000ed00

08003e00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e00:	b480      	push	{r7}
 8003e02:	b083      	sub	sp, #12
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	4603      	mov	r3, r0
 8003e08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	db0b      	blt.n	8003e2a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003e12:	79fb      	ldrb	r3, [r7, #7]
 8003e14:	f003 021f 	and.w	r2, r3, #31
 8003e18:	4907      	ldr	r1, [pc, #28]	; (8003e38 <__NVIC_EnableIRQ+0x38>)
 8003e1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e1e:	095b      	lsrs	r3, r3, #5
 8003e20:	2001      	movs	r0, #1
 8003e22:	fa00 f202 	lsl.w	r2, r0, r2
 8003e26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003e2a:	bf00      	nop
 8003e2c:	370c      	adds	r7, #12
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e34:	4770      	bx	lr
 8003e36:	bf00      	nop
 8003e38:	e000e100 	.word	0xe000e100

08003e3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	b083      	sub	sp, #12
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	4603      	mov	r3, r0
 8003e44:	6039      	str	r1, [r7, #0]
 8003e46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	db0a      	blt.n	8003e66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	b2da      	uxtb	r2, r3
 8003e54:	490c      	ldr	r1, [pc, #48]	; (8003e88 <__NVIC_SetPriority+0x4c>)
 8003e56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e5a:	0112      	lsls	r2, r2, #4
 8003e5c:	b2d2      	uxtb	r2, r2
 8003e5e:	440b      	add	r3, r1
 8003e60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003e64:	e00a      	b.n	8003e7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	b2da      	uxtb	r2, r3
 8003e6a:	4908      	ldr	r1, [pc, #32]	; (8003e8c <__NVIC_SetPriority+0x50>)
 8003e6c:	79fb      	ldrb	r3, [r7, #7]
 8003e6e:	f003 030f 	and.w	r3, r3, #15
 8003e72:	3b04      	subs	r3, #4
 8003e74:	0112      	lsls	r2, r2, #4
 8003e76:	b2d2      	uxtb	r2, r2
 8003e78:	440b      	add	r3, r1
 8003e7a:	761a      	strb	r2, [r3, #24]
}
 8003e7c:	bf00      	nop
 8003e7e:	370c      	adds	r7, #12
 8003e80:	46bd      	mov	sp, r7
 8003e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e86:	4770      	bx	lr
 8003e88:	e000e100 	.word	0xe000e100
 8003e8c:	e000ed00 	.word	0xe000ed00

08003e90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e90:	b480      	push	{r7}
 8003e92:	b089      	sub	sp, #36	; 0x24
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	60f8      	str	r0, [r7, #12]
 8003e98:	60b9      	str	r1, [r7, #8]
 8003e9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	f003 0307 	and.w	r3, r3, #7
 8003ea2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003ea4:	69fb      	ldr	r3, [r7, #28]
 8003ea6:	f1c3 0307 	rsb	r3, r3, #7
 8003eaa:	2b04      	cmp	r3, #4
 8003eac:	bf28      	it	cs
 8003eae:	2304      	movcs	r3, #4
 8003eb0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003eb2:	69fb      	ldr	r3, [r7, #28]
 8003eb4:	3304      	adds	r3, #4
 8003eb6:	2b06      	cmp	r3, #6
 8003eb8:	d902      	bls.n	8003ec0 <NVIC_EncodePriority+0x30>
 8003eba:	69fb      	ldr	r3, [r7, #28]
 8003ebc:	3b03      	subs	r3, #3
 8003ebe:	e000      	b.n	8003ec2 <NVIC_EncodePriority+0x32>
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ec4:	f04f 32ff 	mov.w	r2, #4294967295
 8003ec8:	69bb      	ldr	r3, [r7, #24]
 8003eca:	fa02 f303 	lsl.w	r3, r2, r3
 8003ece:	43da      	mvns	r2, r3
 8003ed0:	68bb      	ldr	r3, [r7, #8]
 8003ed2:	401a      	ands	r2, r3
 8003ed4:	697b      	ldr	r3, [r7, #20]
 8003ed6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003ed8:	f04f 31ff 	mov.w	r1, #4294967295
 8003edc:	697b      	ldr	r3, [r7, #20]
 8003ede:	fa01 f303 	lsl.w	r3, r1, r3
 8003ee2:	43d9      	mvns	r1, r3
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ee8:	4313      	orrs	r3, r2
         );
}
 8003eea:	4618      	mov	r0, r3
 8003eec:	3724      	adds	r7, #36	; 0x24
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef4:	4770      	bx	lr
	...

08003ef8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b082      	sub	sp, #8
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	3b01      	subs	r3, #1
 8003f04:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003f08:	d301      	bcc.n	8003f0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	e00f      	b.n	8003f2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003f0e:	4a0a      	ldr	r2, [pc, #40]	; (8003f38 <SysTick_Config+0x40>)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	3b01      	subs	r3, #1
 8003f14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003f16:	210f      	movs	r1, #15
 8003f18:	f04f 30ff 	mov.w	r0, #4294967295
 8003f1c:	f7ff ff8e 	bl	8003e3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003f20:	4b05      	ldr	r3, [pc, #20]	; (8003f38 <SysTick_Config+0x40>)
 8003f22:	2200      	movs	r2, #0
 8003f24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003f26:	4b04      	ldr	r3, [pc, #16]	; (8003f38 <SysTick_Config+0x40>)
 8003f28:	2207      	movs	r2, #7
 8003f2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003f2c:	2300      	movs	r3, #0
}
 8003f2e:	4618      	mov	r0, r3
 8003f30:	3708      	adds	r7, #8
 8003f32:	46bd      	mov	sp, r7
 8003f34:	bd80      	pop	{r7, pc}
 8003f36:	bf00      	nop
 8003f38:	e000e010 	.word	0xe000e010

08003f3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b082      	sub	sp, #8
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003f44:	6878      	ldr	r0, [r7, #4]
 8003f46:	f7ff ff29 	bl	8003d9c <__NVIC_SetPriorityGrouping>
}
 8003f4a:	bf00      	nop
 8003f4c:	3708      	adds	r7, #8
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bd80      	pop	{r7, pc}

08003f52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f52:	b580      	push	{r7, lr}
 8003f54:	b086      	sub	sp, #24
 8003f56:	af00      	add	r7, sp, #0
 8003f58:	4603      	mov	r3, r0
 8003f5a:	60b9      	str	r1, [r7, #8]
 8003f5c:	607a      	str	r2, [r7, #4]
 8003f5e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003f60:	2300      	movs	r3, #0
 8003f62:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003f64:	f7ff ff3e 	bl	8003de4 <__NVIC_GetPriorityGrouping>
 8003f68:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003f6a:	687a      	ldr	r2, [r7, #4]
 8003f6c:	68b9      	ldr	r1, [r7, #8]
 8003f6e:	6978      	ldr	r0, [r7, #20]
 8003f70:	f7ff ff8e 	bl	8003e90 <NVIC_EncodePriority>
 8003f74:	4602      	mov	r2, r0
 8003f76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f7a:	4611      	mov	r1, r2
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	f7ff ff5d 	bl	8003e3c <__NVIC_SetPriority>
}
 8003f82:	bf00      	nop
 8003f84:	3718      	adds	r7, #24
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bd80      	pop	{r7, pc}

08003f8a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f8a:	b580      	push	{r7, lr}
 8003f8c:	b082      	sub	sp, #8
 8003f8e:	af00      	add	r7, sp, #0
 8003f90:	4603      	mov	r3, r0
 8003f92:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003f94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f98:	4618      	mov	r0, r3
 8003f9a:	f7ff ff31 	bl	8003e00 <__NVIC_EnableIRQ>
}
 8003f9e:	bf00      	nop
 8003fa0:	3708      	adds	r7, #8
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	bd80      	pop	{r7, pc}

08003fa6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003fa6:	b580      	push	{r7, lr}
 8003fa8:	b082      	sub	sp, #8
 8003faa:	af00      	add	r7, sp, #0
 8003fac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003fae:	6878      	ldr	r0, [r7, #4]
 8003fb0:	f7ff ffa2 	bl	8003ef8 <SysTick_Config>
 8003fb4:	4603      	mov	r3, r0
}
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	3708      	adds	r7, #8
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bd80      	pop	{r7, pc}
	...

08003fc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003fc0:	b480      	push	{r7}
 8003fc2:	b087      	sub	sp, #28
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
 8003fc8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003fca:	2300      	movs	r3, #0
 8003fcc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003fce:	e154      	b.n	800427a <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	681a      	ldr	r2, [r3, #0]
 8003fd4:	2101      	movs	r1, #1
 8003fd6:	697b      	ldr	r3, [r7, #20]
 8003fd8:	fa01 f303 	lsl.w	r3, r1, r3
 8003fdc:	4013      	ands	r3, r2
 8003fde:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	f000 8146 	beq.w	8004274 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	685b      	ldr	r3, [r3, #4]
 8003fec:	f003 0303 	and.w	r3, r3, #3
 8003ff0:	2b01      	cmp	r3, #1
 8003ff2:	d005      	beq.n	8004000 <HAL_GPIO_Init+0x40>
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	f003 0303 	and.w	r3, r3, #3
 8003ffc:	2b02      	cmp	r3, #2
 8003ffe:	d130      	bne.n	8004062 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	689b      	ldr	r3, [r3, #8]
 8004004:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8004006:	697b      	ldr	r3, [r7, #20]
 8004008:	005b      	lsls	r3, r3, #1
 800400a:	2203      	movs	r2, #3
 800400c:	fa02 f303 	lsl.w	r3, r2, r3
 8004010:	43db      	mvns	r3, r3
 8004012:	693a      	ldr	r2, [r7, #16]
 8004014:	4013      	ands	r3, r2
 8004016:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	68da      	ldr	r2, [r3, #12]
 800401c:	697b      	ldr	r3, [r7, #20]
 800401e:	005b      	lsls	r3, r3, #1
 8004020:	fa02 f303 	lsl.w	r3, r2, r3
 8004024:	693a      	ldr	r2, [r7, #16]
 8004026:	4313      	orrs	r3, r2
 8004028:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	693a      	ldr	r2, [r7, #16]
 800402e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	685b      	ldr	r3, [r3, #4]
 8004034:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004036:	2201      	movs	r2, #1
 8004038:	697b      	ldr	r3, [r7, #20]
 800403a:	fa02 f303 	lsl.w	r3, r2, r3
 800403e:	43db      	mvns	r3, r3
 8004040:	693a      	ldr	r2, [r7, #16]
 8004042:	4013      	ands	r3, r2
 8004044:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	091b      	lsrs	r3, r3, #4
 800404c:	f003 0201 	and.w	r2, r3, #1
 8004050:	697b      	ldr	r3, [r7, #20]
 8004052:	fa02 f303 	lsl.w	r3, r2, r3
 8004056:	693a      	ldr	r2, [r7, #16]
 8004058:	4313      	orrs	r3, r2
 800405a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	693a      	ldr	r2, [r7, #16]
 8004060:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	f003 0303 	and.w	r3, r3, #3
 800406a:	2b03      	cmp	r3, #3
 800406c:	d017      	beq.n	800409e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	68db      	ldr	r3, [r3, #12]
 8004072:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8004074:	697b      	ldr	r3, [r7, #20]
 8004076:	005b      	lsls	r3, r3, #1
 8004078:	2203      	movs	r2, #3
 800407a:	fa02 f303 	lsl.w	r3, r2, r3
 800407e:	43db      	mvns	r3, r3
 8004080:	693a      	ldr	r2, [r7, #16]
 8004082:	4013      	ands	r3, r2
 8004084:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	689a      	ldr	r2, [r3, #8]
 800408a:	697b      	ldr	r3, [r7, #20]
 800408c:	005b      	lsls	r3, r3, #1
 800408e:	fa02 f303 	lsl.w	r3, r2, r3
 8004092:	693a      	ldr	r2, [r7, #16]
 8004094:	4313      	orrs	r3, r2
 8004096:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	693a      	ldr	r2, [r7, #16]
 800409c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	f003 0303 	and.w	r3, r3, #3
 80040a6:	2b02      	cmp	r3, #2
 80040a8:	d123      	bne.n	80040f2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80040aa:	697b      	ldr	r3, [r7, #20]
 80040ac:	08da      	lsrs	r2, r3, #3
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	3208      	adds	r2, #8
 80040b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80040b6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80040b8:	697b      	ldr	r3, [r7, #20]
 80040ba:	f003 0307 	and.w	r3, r3, #7
 80040be:	009b      	lsls	r3, r3, #2
 80040c0:	220f      	movs	r2, #15
 80040c2:	fa02 f303 	lsl.w	r3, r2, r3
 80040c6:	43db      	mvns	r3, r3
 80040c8:	693a      	ldr	r2, [r7, #16]
 80040ca:	4013      	ands	r3, r2
 80040cc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	691a      	ldr	r2, [r3, #16]
 80040d2:	697b      	ldr	r3, [r7, #20]
 80040d4:	f003 0307 	and.w	r3, r3, #7
 80040d8:	009b      	lsls	r3, r3, #2
 80040da:	fa02 f303 	lsl.w	r3, r2, r3
 80040de:	693a      	ldr	r2, [r7, #16]
 80040e0:	4313      	orrs	r3, r2
 80040e2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80040e4:	697b      	ldr	r3, [r7, #20]
 80040e6:	08da      	lsrs	r2, r3, #3
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	3208      	adds	r2, #8
 80040ec:	6939      	ldr	r1, [r7, #16]
 80040ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80040f8:	697b      	ldr	r3, [r7, #20]
 80040fa:	005b      	lsls	r3, r3, #1
 80040fc:	2203      	movs	r2, #3
 80040fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004102:	43db      	mvns	r3, r3
 8004104:	693a      	ldr	r2, [r7, #16]
 8004106:	4013      	ands	r3, r2
 8004108:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	f003 0203 	and.w	r2, r3, #3
 8004112:	697b      	ldr	r3, [r7, #20]
 8004114:	005b      	lsls	r3, r3, #1
 8004116:	fa02 f303 	lsl.w	r3, r2, r3
 800411a:	693a      	ldr	r2, [r7, #16]
 800411c:	4313      	orrs	r3, r2
 800411e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	693a      	ldr	r2, [r7, #16]
 8004124:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	685b      	ldr	r3, [r3, #4]
 800412a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800412e:	2b00      	cmp	r3, #0
 8004130:	f000 80a0 	beq.w	8004274 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004134:	4b58      	ldr	r3, [pc, #352]	; (8004298 <HAL_GPIO_Init+0x2d8>)
 8004136:	699b      	ldr	r3, [r3, #24]
 8004138:	4a57      	ldr	r2, [pc, #348]	; (8004298 <HAL_GPIO_Init+0x2d8>)
 800413a:	f043 0301 	orr.w	r3, r3, #1
 800413e:	6193      	str	r3, [r2, #24]
 8004140:	4b55      	ldr	r3, [pc, #340]	; (8004298 <HAL_GPIO_Init+0x2d8>)
 8004142:	699b      	ldr	r3, [r3, #24]
 8004144:	f003 0301 	and.w	r3, r3, #1
 8004148:	60bb      	str	r3, [r7, #8]
 800414a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800414c:	4a53      	ldr	r2, [pc, #332]	; (800429c <HAL_GPIO_Init+0x2dc>)
 800414e:	697b      	ldr	r3, [r7, #20]
 8004150:	089b      	lsrs	r3, r3, #2
 8004152:	3302      	adds	r3, #2
 8004154:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004158:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800415a:	697b      	ldr	r3, [r7, #20]
 800415c:	f003 0303 	and.w	r3, r3, #3
 8004160:	009b      	lsls	r3, r3, #2
 8004162:	220f      	movs	r2, #15
 8004164:	fa02 f303 	lsl.w	r3, r2, r3
 8004168:	43db      	mvns	r3, r3
 800416a:	693a      	ldr	r2, [r7, #16]
 800416c:	4013      	ands	r3, r2
 800416e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004176:	d019      	beq.n	80041ac <HAL_GPIO_Init+0x1ec>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	4a49      	ldr	r2, [pc, #292]	; (80042a0 <HAL_GPIO_Init+0x2e0>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d013      	beq.n	80041a8 <HAL_GPIO_Init+0x1e8>
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	4a48      	ldr	r2, [pc, #288]	; (80042a4 <HAL_GPIO_Init+0x2e4>)
 8004184:	4293      	cmp	r3, r2
 8004186:	d00d      	beq.n	80041a4 <HAL_GPIO_Init+0x1e4>
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	4a47      	ldr	r2, [pc, #284]	; (80042a8 <HAL_GPIO_Init+0x2e8>)
 800418c:	4293      	cmp	r3, r2
 800418e:	d007      	beq.n	80041a0 <HAL_GPIO_Init+0x1e0>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	4a46      	ldr	r2, [pc, #280]	; (80042ac <HAL_GPIO_Init+0x2ec>)
 8004194:	4293      	cmp	r3, r2
 8004196:	d101      	bne.n	800419c <HAL_GPIO_Init+0x1dc>
 8004198:	2304      	movs	r3, #4
 800419a:	e008      	b.n	80041ae <HAL_GPIO_Init+0x1ee>
 800419c:	2305      	movs	r3, #5
 800419e:	e006      	b.n	80041ae <HAL_GPIO_Init+0x1ee>
 80041a0:	2303      	movs	r3, #3
 80041a2:	e004      	b.n	80041ae <HAL_GPIO_Init+0x1ee>
 80041a4:	2302      	movs	r3, #2
 80041a6:	e002      	b.n	80041ae <HAL_GPIO_Init+0x1ee>
 80041a8:	2301      	movs	r3, #1
 80041aa:	e000      	b.n	80041ae <HAL_GPIO_Init+0x1ee>
 80041ac:	2300      	movs	r3, #0
 80041ae:	697a      	ldr	r2, [r7, #20]
 80041b0:	f002 0203 	and.w	r2, r2, #3
 80041b4:	0092      	lsls	r2, r2, #2
 80041b6:	4093      	lsls	r3, r2
 80041b8:	693a      	ldr	r2, [r7, #16]
 80041ba:	4313      	orrs	r3, r2
 80041bc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80041be:	4937      	ldr	r1, [pc, #220]	; (800429c <HAL_GPIO_Init+0x2dc>)
 80041c0:	697b      	ldr	r3, [r7, #20]
 80041c2:	089b      	lsrs	r3, r3, #2
 80041c4:	3302      	adds	r3, #2
 80041c6:	693a      	ldr	r2, [r7, #16]
 80041c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80041cc:	4b38      	ldr	r3, [pc, #224]	; (80042b0 <HAL_GPIO_Init+0x2f0>)
 80041ce:	689b      	ldr	r3, [r3, #8]
 80041d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	43db      	mvns	r3, r3
 80041d6:	693a      	ldr	r2, [r7, #16]
 80041d8:	4013      	ands	r3, r2
 80041da:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d003      	beq.n	80041f0 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80041e8:	693a      	ldr	r2, [r7, #16]
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	4313      	orrs	r3, r2
 80041ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80041f0:	4a2f      	ldr	r2, [pc, #188]	; (80042b0 <HAL_GPIO_Init+0x2f0>)
 80041f2:	693b      	ldr	r3, [r7, #16]
 80041f4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80041f6:	4b2e      	ldr	r3, [pc, #184]	; (80042b0 <HAL_GPIO_Init+0x2f0>)
 80041f8:	68db      	ldr	r3, [r3, #12]
 80041fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	43db      	mvns	r3, r3
 8004200:	693a      	ldr	r2, [r7, #16]
 8004202:	4013      	ands	r3, r2
 8004204:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800420e:	2b00      	cmp	r3, #0
 8004210:	d003      	beq.n	800421a <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8004212:	693a      	ldr	r2, [r7, #16]
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	4313      	orrs	r3, r2
 8004218:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800421a:	4a25      	ldr	r2, [pc, #148]	; (80042b0 <HAL_GPIO_Init+0x2f0>)
 800421c:	693b      	ldr	r3, [r7, #16]
 800421e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004220:	4b23      	ldr	r3, [pc, #140]	; (80042b0 <HAL_GPIO_Init+0x2f0>)
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	43db      	mvns	r3, r3
 800422a:	693a      	ldr	r2, [r7, #16]
 800422c:	4013      	ands	r3, r2
 800422e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004238:	2b00      	cmp	r3, #0
 800423a:	d003      	beq.n	8004244 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 800423c:	693a      	ldr	r2, [r7, #16]
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	4313      	orrs	r3, r2
 8004242:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8004244:	4a1a      	ldr	r2, [pc, #104]	; (80042b0 <HAL_GPIO_Init+0x2f0>)
 8004246:	693b      	ldr	r3, [r7, #16]
 8004248:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800424a:	4b19      	ldr	r3, [pc, #100]	; (80042b0 <HAL_GPIO_Init+0x2f0>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	43db      	mvns	r3, r3
 8004254:	693a      	ldr	r2, [r7, #16]
 8004256:	4013      	ands	r3, r2
 8004258:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004262:	2b00      	cmp	r3, #0
 8004264:	d003      	beq.n	800426e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8004266:	693a      	ldr	r2, [r7, #16]
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	4313      	orrs	r3, r2
 800426c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800426e:	4a10      	ldr	r2, [pc, #64]	; (80042b0 <HAL_GPIO_Init+0x2f0>)
 8004270:	693b      	ldr	r3, [r7, #16]
 8004272:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004274:	697b      	ldr	r3, [r7, #20]
 8004276:	3301      	adds	r3, #1
 8004278:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	681a      	ldr	r2, [r3, #0]
 800427e:	697b      	ldr	r3, [r7, #20]
 8004280:	fa22 f303 	lsr.w	r3, r2, r3
 8004284:	2b00      	cmp	r3, #0
 8004286:	f47f aea3 	bne.w	8003fd0 <HAL_GPIO_Init+0x10>
  }
}
 800428a:	bf00      	nop
 800428c:	bf00      	nop
 800428e:	371c      	adds	r7, #28
 8004290:	46bd      	mov	sp, r7
 8004292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004296:	4770      	bx	lr
 8004298:	40021000 	.word	0x40021000
 800429c:	40010000 	.word	0x40010000
 80042a0:	48000400 	.word	0x48000400
 80042a4:	48000800 	.word	0x48000800
 80042a8:	48000c00 	.word	0x48000c00
 80042ac:	48001000 	.word	0x48001000
 80042b0:	40010400 	.word	0x40010400

080042b4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80042b4:	b480      	push	{r7}
 80042b6:	b085      	sub	sp, #20
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
 80042bc:	460b      	mov	r3, r1
 80042be:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	691a      	ldr	r2, [r3, #16]
 80042c4:	887b      	ldrh	r3, [r7, #2]
 80042c6:	4013      	ands	r3, r2
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d002      	beq.n	80042d2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80042cc:	2301      	movs	r3, #1
 80042ce:	73fb      	strb	r3, [r7, #15]
 80042d0:	e001      	b.n	80042d6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80042d2:	2300      	movs	r3, #0
 80042d4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80042d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80042d8:	4618      	mov	r0, r3
 80042da:	3714      	adds	r7, #20
 80042dc:	46bd      	mov	sp, r7
 80042de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e2:	4770      	bx	lr

080042e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80042e4:	b480      	push	{r7}
 80042e6:	b083      	sub	sp, #12
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
 80042ec:	460b      	mov	r3, r1
 80042ee:	807b      	strh	r3, [r7, #2]
 80042f0:	4613      	mov	r3, r2
 80042f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80042f4:	787b      	ldrb	r3, [r7, #1]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d003      	beq.n	8004302 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80042fa:	887a      	ldrh	r2, [r7, #2]
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004300:	e002      	b.n	8004308 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004302:	887a      	ldrh	r2, [r7, #2]
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004308:	bf00      	nop
 800430a:	370c      	adds	r7, #12
 800430c:	46bd      	mov	sp, r7
 800430e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004312:	4770      	bx	lr

08004314 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004314:	b480      	push	{r7}
 8004316:	b085      	sub	sp, #20
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
 800431c:	460b      	mov	r3, r1
 800431e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	695b      	ldr	r3, [r3, #20]
 8004324:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004326:	887a      	ldrh	r2, [r7, #2]
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	4013      	ands	r3, r2
 800432c:	041a      	lsls	r2, r3, #16
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	43d9      	mvns	r1, r3
 8004332:	887b      	ldrh	r3, [r7, #2]
 8004334:	400b      	ands	r3, r1
 8004336:	431a      	orrs	r2, r3
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	619a      	str	r2, [r3, #24]
}
 800433c:	bf00      	nop
 800433e:	3714      	adds	r7, #20
 8004340:	46bd      	mov	sp, r7
 8004342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004346:	4770      	bx	lr

08004348 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b082      	sub	sp, #8
 800434c:	af00      	add	r7, sp, #0
 800434e:	4603      	mov	r3, r0
 8004350:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004352:	4b08      	ldr	r3, [pc, #32]	; (8004374 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004354:	695a      	ldr	r2, [r3, #20]
 8004356:	88fb      	ldrh	r3, [r7, #6]
 8004358:	4013      	ands	r3, r2
 800435a:	2b00      	cmp	r3, #0
 800435c:	d006      	beq.n	800436c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800435e:	4a05      	ldr	r2, [pc, #20]	; (8004374 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004360:	88fb      	ldrh	r3, [r7, #6]
 8004362:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004364:	88fb      	ldrh	r3, [r7, #6]
 8004366:	4618      	mov	r0, r3
 8004368:	f000 f806 	bl	8004378 <HAL_GPIO_EXTI_Callback>
  }
}
 800436c:	bf00      	nop
 800436e:	3708      	adds	r7, #8
 8004370:	46bd      	mov	sp, r7
 8004372:	bd80      	pop	{r7, pc}
 8004374:	40010400 	.word	0x40010400

08004378 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004378:	b480      	push	{r7}
 800437a:	b083      	sub	sp, #12
 800437c:	af00      	add	r7, sp, #0
 800437e:	4603      	mov	r3, r0
 8004380:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004382:	bf00      	nop
 8004384:	370c      	adds	r7, #12
 8004386:	46bd      	mov	sp, r7
 8004388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438c:	4770      	bx	lr

0800438e <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800438e:	b580      	push	{r7, lr}
 8004390:	b082      	sub	sp, #8
 8004392:	af00      	add	r7, sp, #0
 8004394:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d101      	bne.n	80043a0 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800439c:	2301      	movs	r3, #1
 800439e:	e081      	b.n	80044a4 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80043a6:	b2db      	uxtb	r3, r3
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d106      	bne.n	80043ba <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2200      	movs	r2, #0
 80043b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80043b4:	6878      	ldr	r0, [r7, #4]
 80043b6:	f7fd faed 	bl	8001994 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2224      	movs	r2, #36	; 0x24
 80043be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	681a      	ldr	r2, [r3, #0]
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f022 0201 	bic.w	r2, r2, #1
 80043d0:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	685a      	ldr	r2, [r3, #4]
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80043de:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	689a      	ldr	r2, [r3, #8]
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80043ee:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	68db      	ldr	r3, [r3, #12]
 80043f4:	2b01      	cmp	r3, #1
 80043f6:	d107      	bne.n	8004408 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	689a      	ldr	r2, [r3, #8]
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004404:	609a      	str	r2, [r3, #8]
 8004406:	e006      	b.n	8004416 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	689a      	ldr	r2, [r3, #8]
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004414:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	68db      	ldr	r3, [r3, #12]
 800441a:	2b02      	cmp	r3, #2
 800441c:	d104      	bne.n	8004428 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004426:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	685b      	ldr	r3, [r3, #4]
 800442e:	687a      	ldr	r2, [r7, #4]
 8004430:	6812      	ldr	r2, [r2, #0]
 8004432:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004436:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800443a:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	68da      	ldr	r2, [r3, #12]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800444a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	691a      	ldr	r2, [r3, #16]
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	695b      	ldr	r3, [r3, #20]
 8004454:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	699b      	ldr	r3, [r3, #24]
 800445c:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	430a      	orrs	r2, r1
 8004464:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	69d9      	ldr	r1, [r3, #28]
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6a1a      	ldr	r2, [r3, #32]
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	430a      	orrs	r2, r1
 8004474:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	681a      	ldr	r2, [r3, #0]
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f042 0201 	orr.w	r2, r2, #1
 8004484:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2200      	movs	r2, #0
 800448a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2220      	movs	r2, #32
 8004490:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2200      	movs	r2, #0
 8004498:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2200      	movs	r2, #0
 800449e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80044a2:	2300      	movs	r3, #0
}
 80044a4:	4618      	mov	r0, r3
 80044a6:	3708      	adds	r7, #8
 80044a8:	46bd      	mov	sp, r7
 80044aa:	bd80      	pop	{r7, pc}

080044ac <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b088      	sub	sp, #32
 80044b0:	af02      	add	r7, sp, #8
 80044b2:	60f8      	str	r0, [r7, #12]
 80044b4:	607a      	str	r2, [r7, #4]
 80044b6:	461a      	mov	r2, r3
 80044b8:	460b      	mov	r3, r1
 80044ba:	817b      	strh	r3, [r7, #10]
 80044bc:	4613      	mov	r3, r2
 80044be:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80044c6:	b2db      	uxtb	r3, r3
 80044c8:	2b20      	cmp	r3, #32
 80044ca:	f040 80da 	bne.w	8004682 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80044d4:	2b01      	cmp	r3, #1
 80044d6:	d101      	bne.n	80044dc <HAL_I2C_Master_Transmit+0x30>
 80044d8:	2302      	movs	r3, #2
 80044da:	e0d3      	b.n	8004684 <HAL_I2C_Master_Transmit+0x1d8>
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	2201      	movs	r2, #1
 80044e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80044e4:	f7fe ffe0 	bl	80034a8 <HAL_GetTick>
 80044e8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80044ea:	697b      	ldr	r3, [r7, #20]
 80044ec:	9300      	str	r3, [sp, #0]
 80044ee:	2319      	movs	r3, #25
 80044f0:	2201      	movs	r2, #1
 80044f2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80044f6:	68f8      	ldr	r0, [r7, #12]
 80044f8:	f000 f9e6 	bl	80048c8 <I2C_WaitOnFlagUntilTimeout>
 80044fc:	4603      	mov	r3, r0
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d001      	beq.n	8004506 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8004502:	2301      	movs	r3, #1
 8004504:	e0be      	b.n	8004684 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	2221      	movs	r2, #33	; 0x21
 800450a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	2210      	movs	r2, #16
 8004512:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	2200      	movs	r2, #0
 800451a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	687a      	ldr	r2, [r7, #4]
 8004520:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	893a      	ldrh	r2, [r7, #8]
 8004526:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	2200      	movs	r2, #0
 800452c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004532:	b29b      	uxth	r3, r3
 8004534:	2bff      	cmp	r3, #255	; 0xff
 8004536:	d90e      	bls.n	8004556 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	22ff      	movs	r2, #255	; 0xff
 800453c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004542:	b2da      	uxtb	r2, r3
 8004544:	8979      	ldrh	r1, [r7, #10]
 8004546:	4b51      	ldr	r3, [pc, #324]	; (800468c <HAL_I2C_Master_Transmit+0x1e0>)
 8004548:	9300      	str	r3, [sp, #0]
 800454a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800454e:	68f8      	ldr	r0, [r7, #12]
 8004550:	f000 fbf6 	bl	8004d40 <I2C_TransferConfig>
 8004554:	e06c      	b.n	8004630 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800455a:	b29a      	uxth	r2, r3
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004564:	b2da      	uxtb	r2, r3
 8004566:	8979      	ldrh	r1, [r7, #10]
 8004568:	4b48      	ldr	r3, [pc, #288]	; (800468c <HAL_I2C_Master_Transmit+0x1e0>)
 800456a:	9300      	str	r3, [sp, #0]
 800456c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004570:	68f8      	ldr	r0, [r7, #12]
 8004572:	f000 fbe5 	bl	8004d40 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8004576:	e05b      	b.n	8004630 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004578:	697a      	ldr	r2, [r7, #20]
 800457a:	6a39      	ldr	r1, [r7, #32]
 800457c:	68f8      	ldr	r0, [r7, #12]
 800457e:	f000 f9f2 	bl	8004966 <I2C_WaitOnTXISFlagUntilTimeout>
 8004582:	4603      	mov	r3, r0
 8004584:	2b00      	cmp	r3, #0
 8004586:	d001      	beq.n	800458c <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8004588:	2301      	movs	r3, #1
 800458a:	e07b      	b.n	8004684 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004590:	781a      	ldrb	r2, [r3, #0]
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800459c:	1c5a      	adds	r2, r3, #1
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045a6:	b29b      	uxth	r3, r3
 80045a8:	3b01      	subs	r3, #1
 80045aa:	b29a      	uxth	r2, r3
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045b4:	3b01      	subs	r3, #1
 80045b6:	b29a      	uxth	r2, r3
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045c0:	b29b      	uxth	r3, r3
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d034      	beq.n	8004630 <HAL_I2C_Master_Transmit+0x184>
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d130      	bne.n	8004630 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80045ce:	697b      	ldr	r3, [r7, #20]
 80045d0:	9300      	str	r3, [sp, #0]
 80045d2:	6a3b      	ldr	r3, [r7, #32]
 80045d4:	2200      	movs	r2, #0
 80045d6:	2180      	movs	r1, #128	; 0x80
 80045d8:	68f8      	ldr	r0, [r7, #12]
 80045da:	f000 f975 	bl	80048c8 <I2C_WaitOnFlagUntilTimeout>
 80045de:	4603      	mov	r3, r0
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d001      	beq.n	80045e8 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80045e4:	2301      	movs	r3, #1
 80045e6:	e04d      	b.n	8004684 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045ec:	b29b      	uxth	r3, r3
 80045ee:	2bff      	cmp	r3, #255	; 0xff
 80045f0:	d90e      	bls.n	8004610 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	22ff      	movs	r2, #255	; 0xff
 80045f6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045fc:	b2da      	uxtb	r2, r3
 80045fe:	8979      	ldrh	r1, [r7, #10]
 8004600:	2300      	movs	r3, #0
 8004602:	9300      	str	r3, [sp, #0]
 8004604:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004608:	68f8      	ldr	r0, [r7, #12]
 800460a:	f000 fb99 	bl	8004d40 <I2C_TransferConfig>
 800460e:	e00f      	b.n	8004630 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004614:	b29a      	uxth	r2, r3
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800461e:	b2da      	uxtb	r2, r3
 8004620:	8979      	ldrh	r1, [r7, #10]
 8004622:	2300      	movs	r3, #0
 8004624:	9300      	str	r3, [sp, #0]
 8004626:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800462a:	68f8      	ldr	r0, [r7, #12]
 800462c:	f000 fb88 	bl	8004d40 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004634:	b29b      	uxth	r3, r3
 8004636:	2b00      	cmp	r3, #0
 8004638:	d19e      	bne.n	8004578 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800463a:	697a      	ldr	r2, [r7, #20]
 800463c:	6a39      	ldr	r1, [r7, #32]
 800463e:	68f8      	ldr	r0, [r7, #12]
 8004640:	f000 f9d8 	bl	80049f4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004644:	4603      	mov	r3, r0
 8004646:	2b00      	cmp	r3, #0
 8004648:	d001      	beq.n	800464e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800464a:	2301      	movs	r3, #1
 800464c:	e01a      	b.n	8004684 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	2220      	movs	r2, #32
 8004654:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	6859      	ldr	r1, [r3, #4]
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681a      	ldr	r2, [r3, #0]
 8004660:	4b0b      	ldr	r3, [pc, #44]	; (8004690 <HAL_I2C_Master_Transmit+0x1e4>)
 8004662:	400b      	ands	r3, r1
 8004664:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	2220      	movs	r2, #32
 800466a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	2200      	movs	r2, #0
 8004672:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	2200      	movs	r2, #0
 800467a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800467e:	2300      	movs	r3, #0
 8004680:	e000      	b.n	8004684 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8004682:	2302      	movs	r3, #2
  }
}
 8004684:	4618      	mov	r0, r3
 8004686:	3718      	adds	r7, #24
 8004688:	46bd      	mov	sp, r7
 800468a:	bd80      	pop	{r7, pc}
 800468c:	80002000 	.word	0x80002000
 8004690:	fe00e800 	.word	0xfe00e800

08004694 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b088      	sub	sp, #32
 8004698:	af02      	add	r7, sp, #8
 800469a:	60f8      	str	r0, [r7, #12]
 800469c:	607a      	str	r2, [r7, #4]
 800469e:	461a      	mov	r2, r3
 80046a0:	460b      	mov	r3, r1
 80046a2:	817b      	strh	r3, [r7, #10]
 80046a4:	4613      	mov	r3, r2
 80046a6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80046ae:	b2db      	uxtb	r3, r3
 80046b0:	2b20      	cmp	r3, #32
 80046b2:	f040 80db 	bne.w	800486c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80046bc:	2b01      	cmp	r3, #1
 80046be:	d101      	bne.n	80046c4 <HAL_I2C_Master_Receive+0x30>
 80046c0:	2302      	movs	r3, #2
 80046c2:	e0d4      	b.n	800486e <HAL_I2C_Master_Receive+0x1da>
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	2201      	movs	r2, #1
 80046c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80046cc:	f7fe feec 	bl	80034a8 <HAL_GetTick>
 80046d0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80046d2:	697b      	ldr	r3, [r7, #20]
 80046d4:	9300      	str	r3, [sp, #0]
 80046d6:	2319      	movs	r3, #25
 80046d8:	2201      	movs	r2, #1
 80046da:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80046de:	68f8      	ldr	r0, [r7, #12]
 80046e0:	f000 f8f2 	bl	80048c8 <I2C_WaitOnFlagUntilTimeout>
 80046e4:	4603      	mov	r3, r0
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d001      	beq.n	80046ee <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80046ea:	2301      	movs	r3, #1
 80046ec:	e0bf      	b.n	800486e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	2222      	movs	r2, #34	; 0x22
 80046f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	2210      	movs	r2, #16
 80046fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	2200      	movs	r2, #0
 8004702:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	687a      	ldr	r2, [r7, #4]
 8004708:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	893a      	ldrh	r2, [r7, #8]
 800470e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	2200      	movs	r2, #0
 8004714:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800471a:	b29b      	uxth	r3, r3
 800471c:	2bff      	cmp	r3, #255	; 0xff
 800471e:	d90e      	bls.n	800473e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	22ff      	movs	r2, #255	; 0xff
 8004724:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800472a:	b2da      	uxtb	r2, r3
 800472c:	8979      	ldrh	r1, [r7, #10]
 800472e:	4b52      	ldr	r3, [pc, #328]	; (8004878 <HAL_I2C_Master_Receive+0x1e4>)
 8004730:	9300      	str	r3, [sp, #0]
 8004732:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004736:	68f8      	ldr	r0, [r7, #12]
 8004738:	f000 fb02 	bl	8004d40 <I2C_TransferConfig>
 800473c:	e06d      	b.n	800481a <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004742:	b29a      	uxth	r2, r3
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800474c:	b2da      	uxtb	r2, r3
 800474e:	8979      	ldrh	r1, [r7, #10]
 8004750:	4b49      	ldr	r3, [pc, #292]	; (8004878 <HAL_I2C_Master_Receive+0x1e4>)
 8004752:	9300      	str	r3, [sp, #0]
 8004754:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004758:	68f8      	ldr	r0, [r7, #12]
 800475a:	f000 faf1 	bl	8004d40 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800475e:	e05c      	b.n	800481a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004760:	697a      	ldr	r2, [r7, #20]
 8004762:	6a39      	ldr	r1, [r7, #32]
 8004764:	68f8      	ldr	r0, [r7, #12]
 8004766:	f000 f989 	bl	8004a7c <I2C_WaitOnRXNEFlagUntilTimeout>
 800476a:	4603      	mov	r3, r0
 800476c:	2b00      	cmp	r3, #0
 800476e:	d001      	beq.n	8004774 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8004770:	2301      	movs	r3, #1
 8004772:	e07c      	b.n	800486e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800477e:	b2d2      	uxtb	r2, r2
 8004780:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004786:	1c5a      	adds	r2, r3, #1
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004790:	3b01      	subs	r3, #1
 8004792:	b29a      	uxth	r2, r3
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800479c:	b29b      	uxth	r3, r3
 800479e:	3b01      	subs	r3, #1
 80047a0:	b29a      	uxth	r2, r3
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047aa:	b29b      	uxth	r3, r3
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d034      	beq.n	800481a <HAL_I2C_Master_Receive+0x186>
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d130      	bne.n	800481a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80047b8:	697b      	ldr	r3, [r7, #20]
 80047ba:	9300      	str	r3, [sp, #0]
 80047bc:	6a3b      	ldr	r3, [r7, #32]
 80047be:	2200      	movs	r2, #0
 80047c0:	2180      	movs	r1, #128	; 0x80
 80047c2:	68f8      	ldr	r0, [r7, #12]
 80047c4:	f000 f880 	bl	80048c8 <I2C_WaitOnFlagUntilTimeout>
 80047c8:	4603      	mov	r3, r0
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d001      	beq.n	80047d2 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80047ce:	2301      	movs	r3, #1
 80047d0:	e04d      	b.n	800486e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047d6:	b29b      	uxth	r3, r3
 80047d8:	2bff      	cmp	r3, #255	; 0xff
 80047da:	d90e      	bls.n	80047fa <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	22ff      	movs	r2, #255	; 0xff
 80047e0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047e6:	b2da      	uxtb	r2, r3
 80047e8:	8979      	ldrh	r1, [r7, #10]
 80047ea:	2300      	movs	r3, #0
 80047ec:	9300      	str	r3, [sp, #0]
 80047ee:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80047f2:	68f8      	ldr	r0, [r7, #12]
 80047f4:	f000 faa4 	bl	8004d40 <I2C_TransferConfig>
 80047f8:	e00f      	b.n	800481a <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047fe:	b29a      	uxth	r2, r3
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004808:	b2da      	uxtb	r2, r3
 800480a:	8979      	ldrh	r1, [r7, #10]
 800480c:	2300      	movs	r3, #0
 800480e:	9300      	str	r3, [sp, #0]
 8004810:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004814:	68f8      	ldr	r0, [r7, #12]
 8004816:	f000 fa93 	bl	8004d40 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800481e:	b29b      	uxth	r3, r3
 8004820:	2b00      	cmp	r3, #0
 8004822:	d19d      	bne.n	8004760 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004824:	697a      	ldr	r2, [r7, #20]
 8004826:	6a39      	ldr	r1, [r7, #32]
 8004828:	68f8      	ldr	r0, [r7, #12]
 800482a:	f000 f8e3 	bl	80049f4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800482e:	4603      	mov	r3, r0
 8004830:	2b00      	cmp	r3, #0
 8004832:	d001      	beq.n	8004838 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8004834:	2301      	movs	r3, #1
 8004836:	e01a      	b.n	800486e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	2220      	movs	r2, #32
 800483e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	6859      	ldr	r1, [r3, #4]
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681a      	ldr	r2, [r3, #0]
 800484a:	4b0c      	ldr	r3, [pc, #48]	; (800487c <HAL_I2C_Master_Receive+0x1e8>)
 800484c:	400b      	ands	r3, r1
 800484e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	2220      	movs	r2, #32
 8004854:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	2200      	movs	r2, #0
 800485c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	2200      	movs	r2, #0
 8004864:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004868:	2300      	movs	r3, #0
 800486a:	e000      	b.n	800486e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800486c:	2302      	movs	r3, #2
  }
}
 800486e:	4618      	mov	r0, r3
 8004870:	3718      	adds	r7, #24
 8004872:	46bd      	mov	sp, r7
 8004874:	bd80      	pop	{r7, pc}
 8004876:	bf00      	nop
 8004878:	80002400 	.word	0x80002400
 800487c:	fe00e800 	.word	0xfe00e800

08004880 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004880:	b480      	push	{r7}
 8004882:	b083      	sub	sp, #12
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	699b      	ldr	r3, [r3, #24]
 800488e:	f003 0302 	and.w	r3, r3, #2
 8004892:	2b02      	cmp	r3, #2
 8004894:	d103      	bne.n	800489e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	2200      	movs	r2, #0
 800489c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	699b      	ldr	r3, [r3, #24]
 80048a4:	f003 0301 	and.w	r3, r3, #1
 80048a8:	2b01      	cmp	r3, #1
 80048aa:	d007      	beq.n	80048bc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	699a      	ldr	r2, [r3, #24]
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f042 0201 	orr.w	r2, r2, #1
 80048ba:	619a      	str	r2, [r3, #24]
  }
}
 80048bc:	bf00      	nop
 80048be:	370c      	adds	r7, #12
 80048c0:	46bd      	mov	sp, r7
 80048c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c6:	4770      	bx	lr

080048c8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b084      	sub	sp, #16
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	60f8      	str	r0, [r7, #12]
 80048d0:	60b9      	str	r1, [r7, #8]
 80048d2:	603b      	str	r3, [r7, #0]
 80048d4:	4613      	mov	r3, r2
 80048d6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80048d8:	e031      	b.n	800493e <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048e0:	d02d      	beq.n	800493e <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048e2:	f7fe fde1 	bl	80034a8 <HAL_GetTick>
 80048e6:	4602      	mov	r2, r0
 80048e8:	69bb      	ldr	r3, [r7, #24]
 80048ea:	1ad3      	subs	r3, r2, r3
 80048ec:	683a      	ldr	r2, [r7, #0]
 80048ee:	429a      	cmp	r2, r3
 80048f0:	d302      	bcc.n	80048f8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d122      	bne.n	800493e <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	699a      	ldr	r2, [r3, #24]
 80048fe:	68bb      	ldr	r3, [r7, #8]
 8004900:	4013      	ands	r3, r2
 8004902:	68ba      	ldr	r2, [r7, #8]
 8004904:	429a      	cmp	r2, r3
 8004906:	bf0c      	ite	eq
 8004908:	2301      	moveq	r3, #1
 800490a:	2300      	movne	r3, #0
 800490c:	b2db      	uxtb	r3, r3
 800490e:	461a      	mov	r2, r3
 8004910:	79fb      	ldrb	r3, [r7, #7]
 8004912:	429a      	cmp	r2, r3
 8004914:	d113      	bne.n	800493e <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800491a:	f043 0220 	orr.w	r2, r3, #32
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	2220      	movs	r2, #32
 8004926:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	2200      	movs	r2, #0
 800492e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	2200      	movs	r2, #0
 8004936:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 800493a:	2301      	movs	r3, #1
 800493c:	e00f      	b.n	800495e <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	699a      	ldr	r2, [r3, #24]
 8004944:	68bb      	ldr	r3, [r7, #8]
 8004946:	4013      	ands	r3, r2
 8004948:	68ba      	ldr	r2, [r7, #8]
 800494a:	429a      	cmp	r2, r3
 800494c:	bf0c      	ite	eq
 800494e:	2301      	moveq	r3, #1
 8004950:	2300      	movne	r3, #0
 8004952:	b2db      	uxtb	r3, r3
 8004954:	461a      	mov	r2, r3
 8004956:	79fb      	ldrb	r3, [r7, #7]
 8004958:	429a      	cmp	r2, r3
 800495a:	d0be      	beq.n	80048da <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800495c:	2300      	movs	r3, #0
}
 800495e:	4618      	mov	r0, r3
 8004960:	3710      	adds	r7, #16
 8004962:	46bd      	mov	sp, r7
 8004964:	bd80      	pop	{r7, pc}

08004966 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004966:	b580      	push	{r7, lr}
 8004968:	b084      	sub	sp, #16
 800496a:	af00      	add	r7, sp, #0
 800496c:	60f8      	str	r0, [r7, #12]
 800496e:	60b9      	str	r1, [r7, #8]
 8004970:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004972:	e033      	b.n	80049dc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004974:	687a      	ldr	r2, [r7, #4]
 8004976:	68b9      	ldr	r1, [r7, #8]
 8004978:	68f8      	ldr	r0, [r7, #12]
 800497a:	f000 f901 	bl	8004b80 <I2C_IsErrorOccurred>
 800497e:	4603      	mov	r3, r0
 8004980:	2b00      	cmp	r3, #0
 8004982:	d001      	beq.n	8004988 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004984:	2301      	movs	r3, #1
 8004986:	e031      	b.n	80049ec <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004988:	68bb      	ldr	r3, [r7, #8]
 800498a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800498e:	d025      	beq.n	80049dc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004990:	f7fe fd8a 	bl	80034a8 <HAL_GetTick>
 8004994:	4602      	mov	r2, r0
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	1ad3      	subs	r3, r2, r3
 800499a:	68ba      	ldr	r2, [r7, #8]
 800499c:	429a      	cmp	r2, r3
 800499e:	d302      	bcc.n	80049a6 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80049a0:	68bb      	ldr	r3, [r7, #8]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d11a      	bne.n	80049dc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	699b      	ldr	r3, [r3, #24]
 80049ac:	f003 0302 	and.w	r3, r3, #2
 80049b0:	2b02      	cmp	r3, #2
 80049b2:	d013      	beq.n	80049dc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049b8:	f043 0220 	orr.w	r2, r3, #32
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	2220      	movs	r2, #32
 80049c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	2200      	movs	r2, #0
 80049cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	2200      	movs	r2, #0
 80049d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80049d8:	2301      	movs	r3, #1
 80049da:	e007      	b.n	80049ec <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	699b      	ldr	r3, [r3, #24]
 80049e2:	f003 0302 	and.w	r3, r3, #2
 80049e6:	2b02      	cmp	r3, #2
 80049e8:	d1c4      	bne.n	8004974 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80049ea:	2300      	movs	r3, #0
}
 80049ec:	4618      	mov	r0, r3
 80049ee:	3710      	adds	r7, #16
 80049f0:	46bd      	mov	sp, r7
 80049f2:	bd80      	pop	{r7, pc}

080049f4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b084      	sub	sp, #16
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	60f8      	str	r0, [r7, #12]
 80049fc:	60b9      	str	r1, [r7, #8]
 80049fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004a00:	e02f      	b.n	8004a62 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a02:	687a      	ldr	r2, [r7, #4]
 8004a04:	68b9      	ldr	r1, [r7, #8]
 8004a06:	68f8      	ldr	r0, [r7, #12]
 8004a08:	f000 f8ba 	bl	8004b80 <I2C_IsErrorOccurred>
 8004a0c:	4603      	mov	r3, r0
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d001      	beq.n	8004a16 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004a12:	2301      	movs	r3, #1
 8004a14:	e02d      	b.n	8004a72 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a16:	f7fe fd47 	bl	80034a8 <HAL_GetTick>
 8004a1a:	4602      	mov	r2, r0
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	1ad3      	subs	r3, r2, r3
 8004a20:	68ba      	ldr	r2, [r7, #8]
 8004a22:	429a      	cmp	r2, r3
 8004a24:	d302      	bcc.n	8004a2c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004a26:	68bb      	ldr	r3, [r7, #8]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d11a      	bne.n	8004a62 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	699b      	ldr	r3, [r3, #24]
 8004a32:	f003 0320 	and.w	r3, r3, #32
 8004a36:	2b20      	cmp	r3, #32
 8004a38:	d013      	beq.n	8004a62 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a3e:	f043 0220 	orr.w	r2, r3, #32
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	2220      	movs	r2, #32
 8004a4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	2200      	movs	r2, #0
 8004a52:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	2200      	movs	r2, #0
 8004a5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004a5e:	2301      	movs	r3, #1
 8004a60:	e007      	b.n	8004a72 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	699b      	ldr	r3, [r3, #24]
 8004a68:	f003 0320 	and.w	r3, r3, #32
 8004a6c:	2b20      	cmp	r3, #32
 8004a6e:	d1c8      	bne.n	8004a02 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004a70:	2300      	movs	r3, #0
}
 8004a72:	4618      	mov	r0, r3
 8004a74:	3710      	adds	r7, #16
 8004a76:	46bd      	mov	sp, r7
 8004a78:	bd80      	pop	{r7, pc}
	...

08004a7c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b084      	sub	sp, #16
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	60f8      	str	r0, [r7, #12]
 8004a84:	60b9      	str	r1, [r7, #8]
 8004a86:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004a88:	e06b      	b.n	8004b62 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a8a:	687a      	ldr	r2, [r7, #4]
 8004a8c:	68b9      	ldr	r1, [r7, #8]
 8004a8e:	68f8      	ldr	r0, [r7, #12]
 8004a90:	f000 f876 	bl	8004b80 <I2C_IsErrorOccurred>
 8004a94:	4603      	mov	r3, r0
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d001      	beq.n	8004a9e <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	e069      	b.n	8004b72 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	699b      	ldr	r3, [r3, #24]
 8004aa4:	f003 0320 	and.w	r3, r3, #32
 8004aa8:	2b20      	cmp	r3, #32
 8004aaa:	d138      	bne.n	8004b1e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	699b      	ldr	r3, [r3, #24]
 8004ab2:	f003 0304 	and.w	r3, r3, #4
 8004ab6:	2b04      	cmp	r3, #4
 8004ab8:	d105      	bne.n	8004ac6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d001      	beq.n	8004ac6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	e055      	b.n	8004b72 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	699b      	ldr	r3, [r3, #24]
 8004acc:	f003 0310 	and.w	r3, r3, #16
 8004ad0:	2b10      	cmp	r3, #16
 8004ad2:	d107      	bne.n	8004ae4 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	2210      	movs	r2, #16
 8004ada:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	2204      	movs	r2, #4
 8004ae0:	645a      	str	r2, [r3, #68]	; 0x44
 8004ae2:	e002      	b.n	8004aea <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	2220      	movs	r2, #32
 8004af0:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	6859      	ldr	r1, [r3, #4]
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681a      	ldr	r2, [r3, #0]
 8004afc:	4b1f      	ldr	r3, [pc, #124]	; (8004b7c <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 8004afe:	400b      	ands	r3, r1
 8004b00:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	2220      	movs	r2, #32
 8004b06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	2200      	movs	r2, #0
 8004b16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	e029      	b.n	8004b72 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b1e:	f7fe fcc3 	bl	80034a8 <HAL_GetTick>
 8004b22:	4602      	mov	r2, r0
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	1ad3      	subs	r3, r2, r3
 8004b28:	68ba      	ldr	r2, [r7, #8]
 8004b2a:	429a      	cmp	r2, r3
 8004b2c:	d302      	bcc.n	8004b34 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8004b2e:	68bb      	ldr	r3, [r7, #8]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d116      	bne.n	8004b62 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	699b      	ldr	r3, [r3, #24]
 8004b3a:	f003 0304 	and.w	r3, r3, #4
 8004b3e:	2b04      	cmp	r3, #4
 8004b40:	d00f      	beq.n	8004b62 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b46:	f043 0220 	orr.w	r2, r3, #32
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	2220      	movs	r2, #32
 8004b52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	2200      	movs	r2, #0
 8004b5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004b5e:	2301      	movs	r3, #1
 8004b60:	e007      	b.n	8004b72 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	699b      	ldr	r3, [r3, #24]
 8004b68:	f003 0304 	and.w	r3, r3, #4
 8004b6c:	2b04      	cmp	r3, #4
 8004b6e:	d18c      	bne.n	8004a8a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004b70:	2300      	movs	r3, #0
}
 8004b72:	4618      	mov	r0, r3
 8004b74:	3710      	adds	r7, #16
 8004b76:	46bd      	mov	sp, r7
 8004b78:	bd80      	pop	{r7, pc}
 8004b7a:	bf00      	nop
 8004b7c:	fe00e800 	.word	0xfe00e800

08004b80 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b08a      	sub	sp, #40	; 0x28
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	60f8      	str	r0, [r7, #12]
 8004b88:	60b9      	str	r1, [r7, #8]
 8004b8a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	699b      	ldr	r3, [r3, #24]
 8004b98:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004ba2:	69bb      	ldr	r3, [r7, #24]
 8004ba4:	f003 0310 	and.w	r3, r3, #16
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d068      	beq.n	8004c7e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	2210      	movs	r2, #16
 8004bb2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004bb4:	e049      	b.n	8004c4a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004bb6:	68bb      	ldr	r3, [r7, #8]
 8004bb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bbc:	d045      	beq.n	8004c4a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004bbe:	f7fe fc73 	bl	80034a8 <HAL_GetTick>
 8004bc2:	4602      	mov	r2, r0
 8004bc4:	69fb      	ldr	r3, [r7, #28]
 8004bc6:	1ad3      	subs	r3, r2, r3
 8004bc8:	68ba      	ldr	r2, [r7, #8]
 8004bca:	429a      	cmp	r2, r3
 8004bcc:	d302      	bcc.n	8004bd4 <I2C_IsErrorOccurred+0x54>
 8004bce:	68bb      	ldr	r3, [r7, #8]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d13a      	bne.n	8004c4a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	685b      	ldr	r3, [r3, #4]
 8004bda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004bde:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004be6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	699b      	ldr	r3, [r3, #24]
 8004bee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004bf2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004bf6:	d121      	bne.n	8004c3c <I2C_IsErrorOccurred+0xbc>
 8004bf8:	697b      	ldr	r3, [r7, #20]
 8004bfa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004bfe:	d01d      	beq.n	8004c3c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004c00:	7cfb      	ldrb	r3, [r7, #19]
 8004c02:	2b20      	cmp	r3, #32
 8004c04:	d01a      	beq.n	8004c3c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	685a      	ldr	r2, [r3, #4]
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004c14:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004c16:	f7fe fc47 	bl	80034a8 <HAL_GetTick>
 8004c1a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004c1c:	e00e      	b.n	8004c3c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004c1e:	f7fe fc43 	bl	80034a8 <HAL_GetTick>
 8004c22:	4602      	mov	r2, r0
 8004c24:	69fb      	ldr	r3, [r7, #28]
 8004c26:	1ad3      	subs	r3, r2, r3
 8004c28:	2b19      	cmp	r3, #25
 8004c2a:	d907      	bls.n	8004c3c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004c2c:	6a3b      	ldr	r3, [r7, #32]
 8004c2e:	f043 0320 	orr.w	r3, r3, #32
 8004c32:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004c34:	2301      	movs	r3, #1
 8004c36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8004c3a:	e006      	b.n	8004c4a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	699b      	ldr	r3, [r3, #24]
 8004c42:	f003 0320 	and.w	r3, r3, #32
 8004c46:	2b20      	cmp	r3, #32
 8004c48:	d1e9      	bne.n	8004c1e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	699b      	ldr	r3, [r3, #24]
 8004c50:	f003 0320 	and.w	r3, r3, #32
 8004c54:	2b20      	cmp	r3, #32
 8004c56:	d003      	beq.n	8004c60 <I2C_IsErrorOccurred+0xe0>
 8004c58:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d0aa      	beq.n	8004bb6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004c60:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d103      	bne.n	8004c70 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	2220      	movs	r2, #32
 8004c6e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004c70:	6a3b      	ldr	r3, [r7, #32]
 8004c72:	f043 0304 	orr.w	r3, r3, #4
 8004c76:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004c78:	2301      	movs	r3, #1
 8004c7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	699b      	ldr	r3, [r3, #24]
 8004c84:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004c86:	69bb      	ldr	r3, [r7, #24]
 8004c88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d00b      	beq.n	8004ca8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004c90:	6a3b      	ldr	r3, [r7, #32]
 8004c92:	f043 0301 	orr.w	r3, r3, #1
 8004c96:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004ca0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004ca8:	69bb      	ldr	r3, [r7, #24]
 8004caa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d00b      	beq.n	8004cca <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004cb2:	6a3b      	ldr	r3, [r7, #32]
 8004cb4:	f043 0308 	orr.w	r3, r3, #8
 8004cb8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004cc2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004cc4:	2301      	movs	r3, #1
 8004cc6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004cca:	69bb      	ldr	r3, [r7, #24]
 8004ccc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d00b      	beq.n	8004cec <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004cd4:	6a3b      	ldr	r3, [r7, #32]
 8004cd6:	f043 0302 	orr.w	r3, r3, #2
 8004cda:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004ce4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8004cec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d01c      	beq.n	8004d2e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004cf4:	68f8      	ldr	r0, [r7, #12]
 8004cf6:	f7ff fdc3 	bl	8004880 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	6859      	ldr	r1, [r3, #4]
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681a      	ldr	r2, [r3, #0]
 8004d04:	4b0d      	ldr	r3, [pc, #52]	; (8004d3c <I2C_IsErrorOccurred+0x1bc>)
 8004d06:	400b      	ands	r3, r1
 8004d08:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d0e:	6a3b      	ldr	r3, [r7, #32]
 8004d10:	431a      	orrs	r2, r3
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	2220      	movs	r2, #32
 8004d1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	2200      	movs	r2, #0
 8004d22:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	2200      	movs	r2, #0
 8004d2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8004d2e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004d32:	4618      	mov	r0, r3
 8004d34:	3728      	adds	r7, #40	; 0x28
 8004d36:	46bd      	mov	sp, r7
 8004d38:	bd80      	pop	{r7, pc}
 8004d3a:	bf00      	nop
 8004d3c:	fe00e800 	.word	0xfe00e800

08004d40 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004d40:	b480      	push	{r7}
 8004d42:	b087      	sub	sp, #28
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	60f8      	str	r0, [r7, #12]
 8004d48:	607b      	str	r3, [r7, #4]
 8004d4a:	460b      	mov	r3, r1
 8004d4c:	817b      	strh	r3, [r7, #10]
 8004d4e:	4613      	mov	r3, r2
 8004d50:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004d52:	897b      	ldrh	r3, [r7, #10]
 8004d54:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004d58:	7a7b      	ldrb	r3, [r7, #9]
 8004d5a:	041b      	lsls	r3, r3, #16
 8004d5c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004d60:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004d66:	6a3b      	ldr	r3, [r7, #32]
 8004d68:	4313      	orrs	r3, r2
 8004d6a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004d6e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	685a      	ldr	r2, [r3, #4]
 8004d76:	6a3b      	ldr	r3, [r7, #32]
 8004d78:	0d5b      	lsrs	r3, r3, #21
 8004d7a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004d7e:	4b08      	ldr	r3, [pc, #32]	; (8004da0 <I2C_TransferConfig+0x60>)
 8004d80:	430b      	orrs	r3, r1
 8004d82:	43db      	mvns	r3, r3
 8004d84:	ea02 0103 	and.w	r1, r2, r3
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	697a      	ldr	r2, [r7, #20]
 8004d8e:	430a      	orrs	r2, r1
 8004d90:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004d92:	bf00      	nop
 8004d94:	371c      	adds	r7, #28
 8004d96:	46bd      	mov	sp, r7
 8004d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9c:	4770      	bx	lr
 8004d9e:	bf00      	nop
 8004da0:	03ff63ff 	.word	0x03ff63ff

08004da4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004da4:	b480      	push	{r7}
 8004da6:	b083      	sub	sp, #12
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
 8004dac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004db4:	b2db      	uxtb	r3, r3
 8004db6:	2b20      	cmp	r3, #32
 8004db8:	d138      	bne.n	8004e2c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004dc0:	2b01      	cmp	r3, #1
 8004dc2:	d101      	bne.n	8004dc8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004dc4:	2302      	movs	r3, #2
 8004dc6:	e032      	b.n	8004e2e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2201      	movs	r2, #1
 8004dcc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2224      	movs	r2, #36	; 0x24
 8004dd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	681a      	ldr	r2, [r3, #0]
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f022 0201 	bic.w	r2, r2, #1
 8004de6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	681a      	ldr	r2, [r3, #0]
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004df6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	6819      	ldr	r1, [r3, #0]
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	683a      	ldr	r2, [r7, #0]
 8004e04:	430a      	orrs	r2, r1
 8004e06:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	681a      	ldr	r2, [r3, #0]
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f042 0201 	orr.w	r2, r2, #1
 8004e16:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2220      	movs	r2, #32
 8004e1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2200      	movs	r2, #0
 8004e24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004e28:	2300      	movs	r3, #0
 8004e2a:	e000      	b.n	8004e2e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004e2c:	2302      	movs	r3, #2
  }
}
 8004e2e:	4618      	mov	r0, r3
 8004e30:	370c      	adds	r7, #12
 8004e32:	46bd      	mov	sp, r7
 8004e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e38:	4770      	bx	lr

08004e3a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004e3a:	b480      	push	{r7}
 8004e3c:	b085      	sub	sp, #20
 8004e3e:	af00      	add	r7, sp, #0
 8004e40:	6078      	str	r0, [r7, #4]
 8004e42:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e4a:	b2db      	uxtb	r3, r3
 8004e4c:	2b20      	cmp	r3, #32
 8004e4e:	d139      	bne.n	8004ec4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004e56:	2b01      	cmp	r3, #1
 8004e58:	d101      	bne.n	8004e5e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004e5a:	2302      	movs	r3, #2
 8004e5c:	e033      	b.n	8004ec6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2201      	movs	r2, #1
 8004e62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	2224      	movs	r2, #36	; 0x24
 8004e6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	681a      	ldr	r2, [r3, #0]
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f022 0201 	bic.w	r2, r2, #1
 8004e7c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004e8c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	021b      	lsls	r3, r3, #8
 8004e92:	68fa      	ldr	r2, [r7, #12]
 8004e94:	4313      	orrs	r3, r2
 8004e96:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	68fa      	ldr	r2, [r7, #12]
 8004e9e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	681a      	ldr	r2, [r3, #0]
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f042 0201 	orr.w	r2, r2, #1
 8004eae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2220      	movs	r2, #32
 8004eb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2200      	movs	r2, #0
 8004ebc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	e000      	b.n	8004ec6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004ec4:	2302      	movs	r3, #2
  }
}
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	3714      	adds	r7, #20
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed0:	4770      	bx	lr
	...

08004ed4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8004eda:	af00      	add	r7, sp, #0
 8004edc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ee0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004ee4:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004ee6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004eea:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d102      	bne.n	8004efa <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8004ef4:	2301      	movs	r3, #1
 8004ef6:	f001 b823 	b.w	8005f40 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004efa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004efe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f003 0301 	and.w	r3, r3, #1
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	f000 817d 	beq.w	800520a <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004f10:	4bbc      	ldr	r3, [pc, #752]	; (8005204 <HAL_RCC_OscConfig+0x330>)
 8004f12:	685b      	ldr	r3, [r3, #4]
 8004f14:	f003 030c 	and.w	r3, r3, #12
 8004f18:	2b04      	cmp	r3, #4
 8004f1a:	d00c      	beq.n	8004f36 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004f1c:	4bb9      	ldr	r3, [pc, #740]	; (8005204 <HAL_RCC_OscConfig+0x330>)
 8004f1e:	685b      	ldr	r3, [r3, #4]
 8004f20:	f003 030c 	and.w	r3, r3, #12
 8004f24:	2b08      	cmp	r3, #8
 8004f26:	d15c      	bne.n	8004fe2 <HAL_RCC_OscConfig+0x10e>
 8004f28:	4bb6      	ldr	r3, [pc, #728]	; (8005204 <HAL_RCC_OscConfig+0x330>)
 8004f2a:	685b      	ldr	r3, [r3, #4]
 8004f2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f34:	d155      	bne.n	8004fe2 <HAL_RCC_OscConfig+0x10e>
 8004f36:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004f3a:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f3e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8004f42:	fa93 f3a3 	rbit	r3, r3
 8004f46:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004f4a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f4e:	fab3 f383 	clz	r3, r3
 8004f52:	b2db      	uxtb	r3, r3
 8004f54:	095b      	lsrs	r3, r3, #5
 8004f56:	b2db      	uxtb	r3, r3
 8004f58:	f043 0301 	orr.w	r3, r3, #1
 8004f5c:	b2db      	uxtb	r3, r3
 8004f5e:	2b01      	cmp	r3, #1
 8004f60:	d102      	bne.n	8004f68 <HAL_RCC_OscConfig+0x94>
 8004f62:	4ba8      	ldr	r3, [pc, #672]	; (8005204 <HAL_RCC_OscConfig+0x330>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	e015      	b.n	8004f94 <HAL_RCC_OscConfig+0xc0>
 8004f68:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004f6c:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f70:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8004f74:	fa93 f3a3 	rbit	r3, r3
 8004f78:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8004f7c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004f80:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8004f84:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8004f88:	fa93 f3a3 	rbit	r3, r3
 8004f8c:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8004f90:	4b9c      	ldr	r3, [pc, #624]	; (8005204 <HAL_RCC_OscConfig+0x330>)
 8004f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f94:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004f98:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8004f9c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8004fa0:	fa92 f2a2 	rbit	r2, r2
 8004fa4:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8004fa8:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8004fac:	fab2 f282 	clz	r2, r2
 8004fb0:	b2d2      	uxtb	r2, r2
 8004fb2:	f042 0220 	orr.w	r2, r2, #32
 8004fb6:	b2d2      	uxtb	r2, r2
 8004fb8:	f002 021f 	and.w	r2, r2, #31
 8004fbc:	2101      	movs	r1, #1
 8004fbe:	fa01 f202 	lsl.w	r2, r1, r2
 8004fc2:	4013      	ands	r3, r2
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	f000 811f 	beq.w	8005208 <HAL_RCC_OscConfig+0x334>
 8004fca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004fce:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	685b      	ldr	r3, [r3, #4]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	f040 8116 	bne.w	8005208 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8004fdc:	2301      	movs	r3, #1
 8004fde:	f000 bfaf 	b.w	8005f40 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004fe2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004fe6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	685b      	ldr	r3, [r3, #4]
 8004fee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ff2:	d106      	bne.n	8005002 <HAL_RCC_OscConfig+0x12e>
 8004ff4:	4b83      	ldr	r3, [pc, #524]	; (8005204 <HAL_RCC_OscConfig+0x330>)
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	4a82      	ldr	r2, [pc, #520]	; (8005204 <HAL_RCC_OscConfig+0x330>)
 8004ffa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ffe:	6013      	str	r3, [r2, #0]
 8005000:	e036      	b.n	8005070 <HAL_RCC_OscConfig+0x19c>
 8005002:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005006:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	685b      	ldr	r3, [r3, #4]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d10c      	bne.n	800502c <HAL_RCC_OscConfig+0x158>
 8005012:	4b7c      	ldr	r3, [pc, #496]	; (8005204 <HAL_RCC_OscConfig+0x330>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	4a7b      	ldr	r2, [pc, #492]	; (8005204 <HAL_RCC_OscConfig+0x330>)
 8005018:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800501c:	6013      	str	r3, [r2, #0]
 800501e:	4b79      	ldr	r3, [pc, #484]	; (8005204 <HAL_RCC_OscConfig+0x330>)
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	4a78      	ldr	r2, [pc, #480]	; (8005204 <HAL_RCC_OscConfig+0x330>)
 8005024:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005028:	6013      	str	r3, [r2, #0]
 800502a:	e021      	b.n	8005070 <HAL_RCC_OscConfig+0x19c>
 800502c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005030:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	685b      	ldr	r3, [r3, #4]
 8005038:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800503c:	d10c      	bne.n	8005058 <HAL_RCC_OscConfig+0x184>
 800503e:	4b71      	ldr	r3, [pc, #452]	; (8005204 <HAL_RCC_OscConfig+0x330>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	4a70      	ldr	r2, [pc, #448]	; (8005204 <HAL_RCC_OscConfig+0x330>)
 8005044:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005048:	6013      	str	r3, [r2, #0]
 800504a:	4b6e      	ldr	r3, [pc, #440]	; (8005204 <HAL_RCC_OscConfig+0x330>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	4a6d      	ldr	r2, [pc, #436]	; (8005204 <HAL_RCC_OscConfig+0x330>)
 8005050:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005054:	6013      	str	r3, [r2, #0]
 8005056:	e00b      	b.n	8005070 <HAL_RCC_OscConfig+0x19c>
 8005058:	4b6a      	ldr	r3, [pc, #424]	; (8005204 <HAL_RCC_OscConfig+0x330>)
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4a69      	ldr	r2, [pc, #420]	; (8005204 <HAL_RCC_OscConfig+0x330>)
 800505e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005062:	6013      	str	r3, [r2, #0]
 8005064:	4b67      	ldr	r3, [pc, #412]	; (8005204 <HAL_RCC_OscConfig+0x330>)
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	4a66      	ldr	r2, [pc, #408]	; (8005204 <HAL_RCC_OscConfig+0x330>)
 800506a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800506e:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005070:	4b64      	ldr	r3, [pc, #400]	; (8005204 <HAL_RCC_OscConfig+0x330>)
 8005072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005074:	f023 020f 	bic.w	r2, r3, #15
 8005078:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800507c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	689b      	ldr	r3, [r3, #8]
 8005084:	495f      	ldr	r1, [pc, #380]	; (8005204 <HAL_RCC_OscConfig+0x330>)
 8005086:	4313      	orrs	r3, r2
 8005088:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800508a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800508e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	685b      	ldr	r3, [r3, #4]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d059      	beq.n	800514e <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800509a:	f7fe fa05 	bl	80034a8 <HAL_GetTick>
 800509e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050a2:	e00a      	b.n	80050ba <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80050a4:	f7fe fa00 	bl	80034a8 <HAL_GetTick>
 80050a8:	4602      	mov	r2, r0
 80050aa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80050ae:	1ad3      	subs	r3, r2, r3
 80050b0:	2b64      	cmp	r3, #100	; 0x64
 80050b2:	d902      	bls.n	80050ba <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80050b4:	2303      	movs	r3, #3
 80050b6:	f000 bf43 	b.w	8005f40 <HAL_RCC_OscConfig+0x106c>
 80050ba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80050be:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050c2:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80050c6:	fa93 f3a3 	rbit	r3, r3
 80050ca:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80050ce:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050d2:	fab3 f383 	clz	r3, r3
 80050d6:	b2db      	uxtb	r3, r3
 80050d8:	095b      	lsrs	r3, r3, #5
 80050da:	b2db      	uxtb	r3, r3
 80050dc:	f043 0301 	orr.w	r3, r3, #1
 80050e0:	b2db      	uxtb	r3, r3
 80050e2:	2b01      	cmp	r3, #1
 80050e4:	d102      	bne.n	80050ec <HAL_RCC_OscConfig+0x218>
 80050e6:	4b47      	ldr	r3, [pc, #284]	; (8005204 <HAL_RCC_OscConfig+0x330>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	e015      	b.n	8005118 <HAL_RCC_OscConfig+0x244>
 80050ec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80050f0:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050f4:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80050f8:	fa93 f3a3 	rbit	r3, r3
 80050fc:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8005100:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005104:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8005108:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800510c:	fa93 f3a3 	rbit	r3, r3
 8005110:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8005114:	4b3b      	ldr	r3, [pc, #236]	; (8005204 <HAL_RCC_OscConfig+0x330>)
 8005116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005118:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800511c:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8005120:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8005124:	fa92 f2a2 	rbit	r2, r2
 8005128:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 800512c:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8005130:	fab2 f282 	clz	r2, r2
 8005134:	b2d2      	uxtb	r2, r2
 8005136:	f042 0220 	orr.w	r2, r2, #32
 800513a:	b2d2      	uxtb	r2, r2
 800513c:	f002 021f 	and.w	r2, r2, #31
 8005140:	2101      	movs	r1, #1
 8005142:	fa01 f202 	lsl.w	r2, r1, r2
 8005146:	4013      	ands	r3, r2
 8005148:	2b00      	cmp	r3, #0
 800514a:	d0ab      	beq.n	80050a4 <HAL_RCC_OscConfig+0x1d0>
 800514c:	e05d      	b.n	800520a <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800514e:	f7fe f9ab 	bl	80034a8 <HAL_GetTick>
 8005152:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005156:	e00a      	b.n	800516e <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005158:	f7fe f9a6 	bl	80034a8 <HAL_GetTick>
 800515c:	4602      	mov	r2, r0
 800515e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005162:	1ad3      	subs	r3, r2, r3
 8005164:	2b64      	cmp	r3, #100	; 0x64
 8005166:	d902      	bls.n	800516e <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8005168:	2303      	movs	r3, #3
 800516a:	f000 bee9 	b.w	8005f40 <HAL_RCC_OscConfig+0x106c>
 800516e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005172:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005176:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800517a:	fa93 f3a3 	rbit	r3, r3
 800517e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8005182:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005186:	fab3 f383 	clz	r3, r3
 800518a:	b2db      	uxtb	r3, r3
 800518c:	095b      	lsrs	r3, r3, #5
 800518e:	b2db      	uxtb	r3, r3
 8005190:	f043 0301 	orr.w	r3, r3, #1
 8005194:	b2db      	uxtb	r3, r3
 8005196:	2b01      	cmp	r3, #1
 8005198:	d102      	bne.n	80051a0 <HAL_RCC_OscConfig+0x2cc>
 800519a:	4b1a      	ldr	r3, [pc, #104]	; (8005204 <HAL_RCC_OscConfig+0x330>)
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	e015      	b.n	80051cc <HAL_RCC_OscConfig+0x2f8>
 80051a0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80051a4:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051a8:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80051ac:	fa93 f3a3 	rbit	r3, r3
 80051b0:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80051b4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80051b8:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80051bc:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80051c0:	fa93 f3a3 	rbit	r3, r3
 80051c4:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80051c8:	4b0e      	ldr	r3, [pc, #56]	; (8005204 <HAL_RCC_OscConfig+0x330>)
 80051ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051cc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80051d0:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80051d4:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80051d8:	fa92 f2a2 	rbit	r2, r2
 80051dc:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80051e0:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80051e4:	fab2 f282 	clz	r2, r2
 80051e8:	b2d2      	uxtb	r2, r2
 80051ea:	f042 0220 	orr.w	r2, r2, #32
 80051ee:	b2d2      	uxtb	r2, r2
 80051f0:	f002 021f 	and.w	r2, r2, #31
 80051f4:	2101      	movs	r1, #1
 80051f6:	fa01 f202 	lsl.w	r2, r1, r2
 80051fa:	4013      	ands	r3, r2
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d1ab      	bne.n	8005158 <HAL_RCC_OscConfig+0x284>
 8005200:	e003      	b.n	800520a <HAL_RCC_OscConfig+0x336>
 8005202:	bf00      	nop
 8005204:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005208:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800520a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800520e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f003 0302 	and.w	r3, r3, #2
 800521a:	2b00      	cmp	r3, #0
 800521c:	f000 817d 	beq.w	800551a <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8005220:	4ba6      	ldr	r3, [pc, #664]	; (80054bc <HAL_RCC_OscConfig+0x5e8>)
 8005222:	685b      	ldr	r3, [r3, #4]
 8005224:	f003 030c 	and.w	r3, r3, #12
 8005228:	2b00      	cmp	r3, #0
 800522a:	d00b      	beq.n	8005244 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800522c:	4ba3      	ldr	r3, [pc, #652]	; (80054bc <HAL_RCC_OscConfig+0x5e8>)
 800522e:	685b      	ldr	r3, [r3, #4]
 8005230:	f003 030c 	and.w	r3, r3, #12
 8005234:	2b08      	cmp	r3, #8
 8005236:	d172      	bne.n	800531e <HAL_RCC_OscConfig+0x44a>
 8005238:	4ba0      	ldr	r3, [pc, #640]	; (80054bc <HAL_RCC_OscConfig+0x5e8>)
 800523a:	685b      	ldr	r3, [r3, #4]
 800523c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005240:	2b00      	cmp	r3, #0
 8005242:	d16c      	bne.n	800531e <HAL_RCC_OscConfig+0x44a>
 8005244:	2302      	movs	r3, #2
 8005246:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800524a:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800524e:	fa93 f3a3 	rbit	r3, r3
 8005252:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8005256:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800525a:	fab3 f383 	clz	r3, r3
 800525e:	b2db      	uxtb	r3, r3
 8005260:	095b      	lsrs	r3, r3, #5
 8005262:	b2db      	uxtb	r3, r3
 8005264:	f043 0301 	orr.w	r3, r3, #1
 8005268:	b2db      	uxtb	r3, r3
 800526a:	2b01      	cmp	r3, #1
 800526c:	d102      	bne.n	8005274 <HAL_RCC_OscConfig+0x3a0>
 800526e:	4b93      	ldr	r3, [pc, #588]	; (80054bc <HAL_RCC_OscConfig+0x5e8>)
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	e013      	b.n	800529c <HAL_RCC_OscConfig+0x3c8>
 8005274:	2302      	movs	r3, #2
 8005276:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800527a:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800527e:	fa93 f3a3 	rbit	r3, r3
 8005282:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8005286:	2302      	movs	r3, #2
 8005288:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800528c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8005290:	fa93 f3a3 	rbit	r3, r3
 8005294:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8005298:	4b88      	ldr	r3, [pc, #544]	; (80054bc <HAL_RCC_OscConfig+0x5e8>)
 800529a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800529c:	2202      	movs	r2, #2
 800529e:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80052a2:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80052a6:	fa92 f2a2 	rbit	r2, r2
 80052aa:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80052ae:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80052b2:	fab2 f282 	clz	r2, r2
 80052b6:	b2d2      	uxtb	r2, r2
 80052b8:	f042 0220 	orr.w	r2, r2, #32
 80052bc:	b2d2      	uxtb	r2, r2
 80052be:	f002 021f 	and.w	r2, r2, #31
 80052c2:	2101      	movs	r1, #1
 80052c4:	fa01 f202 	lsl.w	r2, r1, r2
 80052c8:	4013      	ands	r3, r2
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d00a      	beq.n	80052e4 <HAL_RCC_OscConfig+0x410>
 80052ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80052d2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	691b      	ldr	r3, [r3, #16]
 80052da:	2b01      	cmp	r3, #1
 80052dc:	d002      	beq.n	80052e4 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80052de:	2301      	movs	r3, #1
 80052e0:	f000 be2e 	b.w	8005f40 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80052e4:	4b75      	ldr	r3, [pc, #468]	; (80054bc <HAL_RCC_OscConfig+0x5e8>)
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80052ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80052f0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	695b      	ldr	r3, [r3, #20]
 80052f8:	21f8      	movs	r1, #248	; 0xf8
 80052fa:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052fe:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8005302:	fa91 f1a1 	rbit	r1, r1
 8005306:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 800530a:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800530e:	fab1 f181 	clz	r1, r1
 8005312:	b2c9      	uxtb	r1, r1
 8005314:	408b      	lsls	r3, r1
 8005316:	4969      	ldr	r1, [pc, #420]	; (80054bc <HAL_RCC_OscConfig+0x5e8>)
 8005318:	4313      	orrs	r3, r2
 800531a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800531c:	e0fd      	b.n	800551a <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800531e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005322:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	691b      	ldr	r3, [r3, #16]
 800532a:	2b00      	cmp	r3, #0
 800532c:	f000 8088 	beq.w	8005440 <HAL_RCC_OscConfig+0x56c>
 8005330:	2301      	movs	r3, #1
 8005332:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005336:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800533a:	fa93 f3a3 	rbit	r3, r3
 800533e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8005342:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005346:	fab3 f383 	clz	r3, r3
 800534a:	b2db      	uxtb	r3, r3
 800534c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005350:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005354:	009b      	lsls	r3, r3, #2
 8005356:	461a      	mov	r2, r3
 8005358:	2301      	movs	r3, #1
 800535a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800535c:	f7fe f8a4 	bl	80034a8 <HAL_GetTick>
 8005360:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005364:	e00a      	b.n	800537c <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005366:	f7fe f89f 	bl	80034a8 <HAL_GetTick>
 800536a:	4602      	mov	r2, r0
 800536c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005370:	1ad3      	subs	r3, r2, r3
 8005372:	2b02      	cmp	r3, #2
 8005374:	d902      	bls.n	800537c <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8005376:	2303      	movs	r3, #3
 8005378:	f000 bde2 	b.w	8005f40 <HAL_RCC_OscConfig+0x106c>
 800537c:	2302      	movs	r3, #2
 800537e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005382:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8005386:	fa93 f3a3 	rbit	r3, r3
 800538a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800538e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005392:	fab3 f383 	clz	r3, r3
 8005396:	b2db      	uxtb	r3, r3
 8005398:	095b      	lsrs	r3, r3, #5
 800539a:	b2db      	uxtb	r3, r3
 800539c:	f043 0301 	orr.w	r3, r3, #1
 80053a0:	b2db      	uxtb	r3, r3
 80053a2:	2b01      	cmp	r3, #1
 80053a4:	d102      	bne.n	80053ac <HAL_RCC_OscConfig+0x4d8>
 80053a6:	4b45      	ldr	r3, [pc, #276]	; (80054bc <HAL_RCC_OscConfig+0x5e8>)
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	e013      	b.n	80053d4 <HAL_RCC_OscConfig+0x500>
 80053ac:	2302      	movs	r3, #2
 80053ae:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053b2:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80053b6:	fa93 f3a3 	rbit	r3, r3
 80053ba:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80053be:	2302      	movs	r3, #2
 80053c0:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80053c4:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80053c8:	fa93 f3a3 	rbit	r3, r3
 80053cc:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80053d0:	4b3a      	ldr	r3, [pc, #232]	; (80054bc <HAL_RCC_OscConfig+0x5e8>)
 80053d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053d4:	2202      	movs	r2, #2
 80053d6:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80053da:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80053de:	fa92 f2a2 	rbit	r2, r2
 80053e2:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80053e6:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80053ea:	fab2 f282 	clz	r2, r2
 80053ee:	b2d2      	uxtb	r2, r2
 80053f0:	f042 0220 	orr.w	r2, r2, #32
 80053f4:	b2d2      	uxtb	r2, r2
 80053f6:	f002 021f 	and.w	r2, r2, #31
 80053fa:	2101      	movs	r1, #1
 80053fc:	fa01 f202 	lsl.w	r2, r1, r2
 8005400:	4013      	ands	r3, r2
 8005402:	2b00      	cmp	r3, #0
 8005404:	d0af      	beq.n	8005366 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005406:	4b2d      	ldr	r3, [pc, #180]	; (80054bc <HAL_RCC_OscConfig+0x5e8>)
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800540e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005412:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	695b      	ldr	r3, [r3, #20]
 800541a:	21f8      	movs	r1, #248	; 0xf8
 800541c:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005420:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8005424:	fa91 f1a1 	rbit	r1, r1
 8005428:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 800542c:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8005430:	fab1 f181 	clz	r1, r1
 8005434:	b2c9      	uxtb	r1, r1
 8005436:	408b      	lsls	r3, r1
 8005438:	4920      	ldr	r1, [pc, #128]	; (80054bc <HAL_RCC_OscConfig+0x5e8>)
 800543a:	4313      	orrs	r3, r2
 800543c:	600b      	str	r3, [r1, #0]
 800543e:	e06c      	b.n	800551a <HAL_RCC_OscConfig+0x646>
 8005440:	2301      	movs	r3, #1
 8005442:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005446:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800544a:	fa93 f3a3 	rbit	r3, r3
 800544e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8005452:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005456:	fab3 f383 	clz	r3, r3
 800545a:	b2db      	uxtb	r3, r3
 800545c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005460:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005464:	009b      	lsls	r3, r3, #2
 8005466:	461a      	mov	r2, r3
 8005468:	2300      	movs	r3, #0
 800546a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800546c:	f7fe f81c 	bl	80034a8 <HAL_GetTick>
 8005470:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005474:	e00a      	b.n	800548c <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005476:	f7fe f817 	bl	80034a8 <HAL_GetTick>
 800547a:	4602      	mov	r2, r0
 800547c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005480:	1ad3      	subs	r3, r2, r3
 8005482:	2b02      	cmp	r3, #2
 8005484:	d902      	bls.n	800548c <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8005486:	2303      	movs	r3, #3
 8005488:	f000 bd5a 	b.w	8005f40 <HAL_RCC_OscConfig+0x106c>
 800548c:	2302      	movs	r3, #2
 800548e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005492:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005496:	fa93 f3a3 	rbit	r3, r3
 800549a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800549e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80054a2:	fab3 f383 	clz	r3, r3
 80054a6:	b2db      	uxtb	r3, r3
 80054a8:	095b      	lsrs	r3, r3, #5
 80054aa:	b2db      	uxtb	r3, r3
 80054ac:	f043 0301 	orr.w	r3, r3, #1
 80054b0:	b2db      	uxtb	r3, r3
 80054b2:	2b01      	cmp	r3, #1
 80054b4:	d104      	bne.n	80054c0 <HAL_RCC_OscConfig+0x5ec>
 80054b6:	4b01      	ldr	r3, [pc, #4]	; (80054bc <HAL_RCC_OscConfig+0x5e8>)
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	e015      	b.n	80054e8 <HAL_RCC_OscConfig+0x614>
 80054bc:	40021000 	.word	0x40021000
 80054c0:	2302      	movs	r3, #2
 80054c2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054c6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80054ca:	fa93 f3a3 	rbit	r3, r3
 80054ce:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80054d2:	2302      	movs	r3, #2
 80054d4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80054d8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80054dc:	fa93 f3a3 	rbit	r3, r3
 80054e0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80054e4:	4bc8      	ldr	r3, [pc, #800]	; (8005808 <HAL_RCC_OscConfig+0x934>)
 80054e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054e8:	2202      	movs	r2, #2
 80054ea:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80054ee:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80054f2:	fa92 f2a2 	rbit	r2, r2
 80054f6:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80054fa:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80054fe:	fab2 f282 	clz	r2, r2
 8005502:	b2d2      	uxtb	r2, r2
 8005504:	f042 0220 	orr.w	r2, r2, #32
 8005508:	b2d2      	uxtb	r2, r2
 800550a:	f002 021f 	and.w	r2, r2, #31
 800550e:	2101      	movs	r1, #1
 8005510:	fa01 f202 	lsl.w	r2, r1, r2
 8005514:	4013      	ands	r3, r2
 8005516:	2b00      	cmp	r3, #0
 8005518:	d1ad      	bne.n	8005476 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800551a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800551e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f003 0308 	and.w	r3, r3, #8
 800552a:	2b00      	cmp	r3, #0
 800552c:	f000 8110 	beq.w	8005750 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005530:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005534:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	699b      	ldr	r3, [r3, #24]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d079      	beq.n	8005634 <HAL_RCC_OscConfig+0x760>
 8005540:	2301      	movs	r3, #1
 8005542:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005546:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800554a:	fa93 f3a3 	rbit	r3, r3
 800554e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8005552:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005556:	fab3 f383 	clz	r3, r3
 800555a:	b2db      	uxtb	r3, r3
 800555c:	461a      	mov	r2, r3
 800555e:	4bab      	ldr	r3, [pc, #684]	; (800580c <HAL_RCC_OscConfig+0x938>)
 8005560:	4413      	add	r3, r2
 8005562:	009b      	lsls	r3, r3, #2
 8005564:	461a      	mov	r2, r3
 8005566:	2301      	movs	r3, #1
 8005568:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800556a:	f7fd ff9d 	bl	80034a8 <HAL_GetTick>
 800556e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005572:	e00a      	b.n	800558a <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005574:	f7fd ff98 	bl	80034a8 <HAL_GetTick>
 8005578:	4602      	mov	r2, r0
 800557a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800557e:	1ad3      	subs	r3, r2, r3
 8005580:	2b02      	cmp	r3, #2
 8005582:	d902      	bls.n	800558a <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8005584:	2303      	movs	r3, #3
 8005586:	f000 bcdb 	b.w	8005f40 <HAL_RCC_OscConfig+0x106c>
 800558a:	2302      	movs	r3, #2
 800558c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005590:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005594:	fa93 f3a3 	rbit	r3, r3
 8005598:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800559c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80055a0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80055a4:	2202      	movs	r2, #2
 80055a6:	601a      	str	r2, [r3, #0]
 80055a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80055ac:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	fa93 f2a3 	rbit	r2, r3
 80055b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80055ba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80055be:	601a      	str	r2, [r3, #0]
 80055c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80055c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80055c8:	2202      	movs	r2, #2
 80055ca:	601a      	str	r2, [r3, #0]
 80055cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80055d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	fa93 f2a3 	rbit	r2, r3
 80055da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80055de:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80055e2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80055e4:	4b88      	ldr	r3, [pc, #544]	; (8005808 <HAL_RCC_OscConfig+0x934>)
 80055e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80055e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80055ec:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80055f0:	2102      	movs	r1, #2
 80055f2:	6019      	str	r1, [r3, #0]
 80055f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80055f8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	fa93 f1a3 	rbit	r1, r3
 8005602:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005606:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800560a:	6019      	str	r1, [r3, #0]
  return result;
 800560c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005610:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	fab3 f383 	clz	r3, r3
 800561a:	b2db      	uxtb	r3, r3
 800561c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005620:	b2db      	uxtb	r3, r3
 8005622:	f003 031f 	and.w	r3, r3, #31
 8005626:	2101      	movs	r1, #1
 8005628:	fa01 f303 	lsl.w	r3, r1, r3
 800562c:	4013      	ands	r3, r2
 800562e:	2b00      	cmp	r3, #0
 8005630:	d0a0      	beq.n	8005574 <HAL_RCC_OscConfig+0x6a0>
 8005632:	e08d      	b.n	8005750 <HAL_RCC_OscConfig+0x87c>
 8005634:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005638:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800563c:	2201      	movs	r2, #1
 800563e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005640:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005644:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	fa93 f2a3 	rbit	r2, r3
 800564e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005652:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005656:	601a      	str	r2, [r3, #0]
  return result;
 8005658:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800565c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005660:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005662:	fab3 f383 	clz	r3, r3
 8005666:	b2db      	uxtb	r3, r3
 8005668:	461a      	mov	r2, r3
 800566a:	4b68      	ldr	r3, [pc, #416]	; (800580c <HAL_RCC_OscConfig+0x938>)
 800566c:	4413      	add	r3, r2
 800566e:	009b      	lsls	r3, r3, #2
 8005670:	461a      	mov	r2, r3
 8005672:	2300      	movs	r3, #0
 8005674:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005676:	f7fd ff17 	bl	80034a8 <HAL_GetTick>
 800567a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800567e:	e00a      	b.n	8005696 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005680:	f7fd ff12 	bl	80034a8 <HAL_GetTick>
 8005684:	4602      	mov	r2, r0
 8005686:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800568a:	1ad3      	subs	r3, r2, r3
 800568c:	2b02      	cmp	r3, #2
 800568e:	d902      	bls.n	8005696 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8005690:	2303      	movs	r3, #3
 8005692:	f000 bc55 	b.w	8005f40 <HAL_RCC_OscConfig+0x106c>
 8005696:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800569a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800569e:	2202      	movs	r2, #2
 80056a0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80056a6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	fa93 f2a3 	rbit	r2, r3
 80056b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80056b4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80056b8:	601a      	str	r2, [r3, #0]
 80056ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80056be:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80056c2:	2202      	movs	r2, #2
 80056c4:	601a      	str	r2, [r3, #0]
 80056c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80056ca:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	fa93 f2a3 	rbit	r2, r3
 80056d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80056d8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80056dc:	601a      	str	r2, [r3, #0]
 80056de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80056e2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80056e6:	2202      	movs	r2, #2
 80056e8:	601a      	str	r2, [r3, #0]
 80056ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80056ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	fa93 f2a3 	rbit	r2, r3
 80056f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80056fc:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8005700:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005702:	4b41      	ldr	r3, [pc, #260]	; (8005808 <HAL_RCC_OscConfig+0x934>)
 8005704:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005706:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800570a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800570e:	2102      	movs	r1, #2
 8005710:	6019      	str	r1, [r3, #0]
 8005712:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005716:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	fa93 f1a3 	rbit	r1, r3
 8005720:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005724:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8005728:	6019      	str	r1, [r3, #0]
  return result;
 800572a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800572e:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	fab3 f383 	clz	r3, r3
 8005738:	b2db      	uxtb	r3, r3
 800573a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800573e:	b2db      	uxtb	r3, r3
 8005740:	f003 031f 	and.w	r3, r3, #31
 8005744:	2101      	movs	r1, #1
 8005746:	fa01 f303 	lsl.w	r3, r1, r3
 800574a:	4013      	ands	r3, r2
 800574c:	2b00      	cmp	r3, #0
 800574e:	d197      	bne.n	8005680 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005750:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005754:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f003 0304 	and.w	r3, r3, #4
 8005760:	2b00      	cmp	r3, #0
 8005762:	f000 81a1 	beq.w	8005aa8 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005766:	2300      	movs	r3, #0
 8005768:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800576c:	4b26      	ldr	r3, [pc, #152]	; (8005808 <HAL_RCC_OscConfig+0x934>)
 800576e:	69db      	ldr	r3, [r3, #28]
 8005770:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005774:	2b00      	cmp	r3, #0
 8005776:	d116      	bne.n	80057a6 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005778:	4b23      	ldr	r3, [pc, #140]	; (8005808 <HAL_RCC_OscConfig+0x934>)
 800577a:	69db      	ldr	r3, [r3, #28]
 800577c:	4a22      	ldr	r2, [pc, #136]	; (8005808 <HAL_RCC_OscConfig+0x934>)
 800577e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005782:	61d3      	str	r3, [r2, #28]
 8005784:	4b20      	ldr	r3, [pc, #128]	; (8005808 <HAL_RCC_OscConfig+0x934>)
 8005786:	69db      	ldr	r3, [r3, #28]
 8005788:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800578c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005790:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8005794:	601a      	str	r2, [r3, #0]
 8005796:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800579a:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800579e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80057a0:	2301      	movs	r3, #1
 80057a2:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057a6:	4b1a      	ldr	r3, [pc, #104]	; (8005810 <HAL_RCC_OscConfig+0x93c>)
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d11a      	bne.n	80057e8 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80057b2:	4b17      	ldr	r3, [pc, #92]	; (8005810 <HAL_RCC_OscConfig+0x93c>)
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	4a16      	ldr	r2, [pc, #88]	; (8005810 <HAL_RCC_OscConfig+0x93c>)
 80057b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80057bc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80057be:	f7fd fe73 	bl	80034a8 <HAL_GetTick>
 80057c2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057c6:	e009      	b.n	80057dc <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80057c8:	f7fd fe6e 	bl	80034a8 <HAL_GetTick>
 80057cc:	4602      	mov	r2, r0
 80057ce:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80057d2:	1ad3      	subs	r3, r2, r3
 80057d4:	2b64      	cmp	r3, #100	; 0x64
 80057d6:	d901      	bls.n	80057dc <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80057d8:	2303      	movs	r3, #3
 80057da:	e3b1      	b.n	8005f40 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057dc:	4b0c      	ldr	r3, [pc, #48]	; (8005810 <HAL_RCC_OscConfig+0x93c>)
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d0ef      	beq.n	80057c8 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80057e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80057ec:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	68db      	ldr	r3, [r3, #12]
 80057f4:	2b01      	cmp	r3, #1
 80057f6:	d10d      	bne.n	8005814 <HAL_RCC_OscConfig+0x940>
 80057f8:	4b03      	ldr	r3, [pc, #12]	; (8005808 <HAL_RCC_OscConfig+0x934>)
 80057fa:	6a1b      	ldr	r3, [r3, #32]
 80057fc:	4a02      	ldr	r2, [pc, #8]	; (8005808 <HAL_RCC_OscConfig+0x934>)
 80057fe:	f043 0301 	orr.w	r3, r3, #1
 8005802:	6213      	str	r3, [r2, #32]
 8005804:	e03c      	b.n	8005880 <HAL_RCC_OscConfig+0x9ac>
 8005806:	bf00      	nop
 8005808:	40021000 	.word	0x40021000
 800580c:	10908120 	.word	0x10908120
 8005810:	40007000 	.word	0x40007000
 8005814:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005818:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	68db      	ldr	r3, [r3, #12]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d10c      	bne.n	800583e <HAL_RCC_OscConfig+0x96a>
 8005824:	4bc1      	ldr	r3, [pc, #772]	; (8005b2c <HAL_RCC_OscConfig+0xc58>)
 8005826:	6a1b      	ldr	r3, [r3, #32]
 8005828:	4ac0      	ldr	r2, [pc, #768]	; (8005b2c <HAL_RCC_OscConfig+0xc58>)
 800582a:	f023 0301 	bic.w	r3, r3, #1
 800582e:	6213      	str	r3, [r2, #32]
 8005830:	4bbe      	ldr	r3, [pc, #760]	; (8005b2c <HAL_RCC_OscConfig+0xc58>)
 8005832:	6a1b      	ldr	r3, [r3, #32]
 8005834:	4abd      	ldr	r2, [pc, #756]	; (8005b2c <HAL_RCC_OscConfig+0xc58>)
 8005836:	f023 0304 	bic.w	r3, r3, #4
 800583a:	6213      	str	r3, [r2, #32]
 800583c:	e020      	b.n	8005880 <HAL_RCC_OscConfig+0x9ac>
 800583e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005842:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	68db      	ldr	r3, [r3, #12]
 800584a:	2b05      	cmp	r3, #5
 800584c:	d10c      	bne.n	8005868 <HAL_RCC_OscConfig+0x994>
 800584e:	4bb7      	ldr	r3, [pc, #732]	; (8005b2c <HAL_RCC_OscConfig+0xc58>)
 8005850:	6a1b      	ldr	r3, [r3, #32]
 8005852:	4ab6      	ldr	r2, [pc, #728]	; (8005b2c <HAL_RCC_OscConfig+0xc58>)
 8005854:	f043 0304 	orr.w	r3, r3, #4
 8005858:	6213      	str	r3, [r2, #32]
 800585a:	4bb4      	ldr	r3, [pc, #720]	; (8005b2c <HAL_RCC_OscConfig+0xc58>)
 800585c:	6a1b      	ldr	r3, [r3, #32]
 800585e:	4ab3      	ldr	r2, [pc, #716]	; (8005b2c <HAL_RCC_OscConfig+0xc58>)
 8005860:	f043 0301 	orr.w	r3, r3, #1
 8005864:	6213      	str	r3, [r2, #32]
 8005866:	e00b      	b.n	8005880 <HAL_RCC_OscConfig+0x9ac>
 8005868:	4bb0      	ldr	r3, [pc, #704]	; (8005b2c <HAL_RCC_OscConfig+0xc58>)
 800586a:	6a1b      	ldr	r3, [r3, #32]
 800586c:	4aaf      	ldr	r2, [pc, #700]	; (8005b2c <HAL_RCC_OscConfig+0xc58>)
 800586e:	f023 0301 	bic.w	r3, r3, #1
 8005872:	6213      	str	r3, [r2, #32]
 8005874:	4bad      	ldr	r3, [pc, #692]	; (8005b2c <HAL_RCC_OscConfig+0xc58>)
 8005876:	6a1b      	ldr	r3, [r3, #32]
 8005878:	4aac      	ldr	r2, [pc, #688]	; (8005b2c <HAL_RCC_OscConfig+0xc58>)
 800587a:	f023 0304 	bic.w	r3, r3, #4
 800587e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005880:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005884:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	68db      	ldr	r3, [r3, #12]
 800588c:	2b00      	cmp	r3, #0
 800588e:	f000 8081 	beq.w	8005994 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005892:	f7fd fe09 	bl	80034a8 <HAL_GetTick>
 8005896:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800589a:	e00b      	b.n	80058b4 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800589c:	f7fd fe04 	bl	80034a8 <HAL_GetTick>
 80058a0:	4602      	mov	r2, r0
 80058a2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80058a6:	1ad3      	subs	r3, r2, r3
 80058a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80058ac:	4293      	cmp	r3, r2
 80058ae:	d901      	bls.n	80058b4 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80058b0:	2303      	movs	r3, #3
 80058b2:	e345      	b.n	8005f40 <HAL_RCC_OscConfig+0x106c>
 80058b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80058b8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80058bc:	2202      	movs	r2, #2
 80058be:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80058c4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	fa93 f2a3 	rbit	r2, r3
 80058ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80058d2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80058d6:	601a      	str	r2, [r3, #0]
 80058d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80058dc:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80058e0:	2202      	movs	r2, #2
 80058e2:	601a      	str	r2, [r3, #0]
 80058e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80058e8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	fa93 f2a3 	rbit	r2, r3
 80058f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80058f6:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80058fa:	601a      	str	r2, [r3, #0]
  return result;
 80058fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005900:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8005904:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005906:	fab3 f383 	clz	r3, r3
 800590a:	b2db      	uxtb	r3, r3
 800590c:	095b      	lsrs	r3, r3, #5
 800590e:	b2db      	uxtb	r3, r3
 8005910:	f043 0302 	orr.w	r3, r3, #2
 8005914:	b2db      	uxtb	r3, r3
 8005916:	2b02      	cmp	r3, #2
 8005918:	d102      	bne.n	8005920 <HAL_RCC_OscConfig+0xa4c>
 800591a:	4b84      	ldr	r3, [pc, #528]	; (8005b2c <HAL_RCC_OscConfig+0xc58>)
 800591c:	6a1b      	ldr	r3, [r3, #32]
 800591e:	e013      	b.n	8005948 <HAL_RCC_OscConfig+0xa74>
 8005920:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005924:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8005928:	2202      	movs	r2, #2
 800592a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800592c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005930:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	fa93 f2a3 	rbit	r2, r3
 800593a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800593e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8005942:	601a      	str	r2, [r3, #0]
 8005944:	4b79      	ldr	r3, [pc, #484]	; (8005b2c <HAL_RCC_OscConfig+0xc58>)
 8005946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005948:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800594c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8005950:	2102      	movs	r1, #2
 8005952:	6011      	str	r1, [r2, #0]
 8005954:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005958:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 800595c:	6812      	ldr	r2, [r2, #0]
 800595e:	fa92 f1a2 	rbit	r1, r2
 8005962:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005966:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800596a:	6011      	str	r1, [r2, #0]
  return result;
 800596c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005970:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8005974:	6812      	ldr	r2, [r2, #0]
 8005976:	fab2 f282 	clz	r2, r2
 800597a:	b2d2      	uxtb	r2, r2
 800597c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005980:	b2d2      	uxtb	r2, r2
 8005982:	f002 021f 	and.w	r2, r2, #31
 8005986:	2101      	movs	r1, #1
 8005988:	fa01 f202 	lsl.w	r2, r1, r2
 800598c:	4013      	ands	r3, r2
 800598e:	2b00      	cmp	r3, #0
 8005990:	d084      	beq.n	800589c <HAL_RCC_OscConfig+0x9c8>
 8005992:	e07f      	b.n	8005a94 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005994:	f7fd fd88 	bl	80034a8 <HAL_GetTick>
 8005998:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800599c:	e00b      	b.n	80059b6 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800599e:	f7fd fd83 	bl	80034a8 <HAL_GetTick>
 80059a2:	4602      	mov	r2, r0
 80059a4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80059a8:	1ad3      	subs	r3, r2, r3
 80059aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d901      	bls.n	80059b6 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80059b2:	2303      	movs	r3, #3
 80059b4:	e2c4      	b.n	8005f40 <HAL_RCC_OscConfig+0x106c>
 80059b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80059ba:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80059be:	2202      	movs	r2, #2
 80059c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80059c6:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	fa93 f2a3 	rbit	r2, r3
 80059d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80059d4:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80059d8:	601a      	str	r2, [r3, #0]
 80059da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80059de:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80059e2:	2202      	movs	r2, #2
 80059e4:	601a      	str	r2, [r3, #0]
 80059e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80059ea:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	fa93 f2a3 	rbit	r2, r3
 80059f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80059f8:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80059fc:	601a      	str	r2, [r3, #0]
  return result;
 80059fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005a02:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8005a06:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005a08:	fab3 f383 	clz	r3, r3
 8005a0c:	b2db      	uxtb	r3, r3
 8005a0e:	095b      	lsrs	r3, r3, #5
 8005a10:	b2db      	uxtb	r3, r3
 8005a12:	f043 0302 	orr.w	r3, r3, #2
 8005a16:	b2db      	uxtb	r3, r3
 8005a18:	2b02      	cmp	r3, #2
 8005a1a:	d102      	bne.n	8005a22 <HAL_RCC_OscConfig+0xb4e>
 8005a1c:	4b43      	ldr	r3, [pc, #268]	; (8005b2c <HAL_RCC_OscConfig+0xc58>)
 8005a1e:	6a1b      	ldr	r3, [r3, #32]
 8005a20:	e013      	b.n	8005a4a <HAL_RCC_OscConfig+0xb76>
 8005a22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005a26:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8005a2a:	2202      	movs	r2, #2
 8005a2c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005a32:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	fa93 f2a3 	rbit	r2, r3
 8005a3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005a40:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8005a44:	601a      	str	r2, [r3, #0]
 8005a46:	4b39      	ldr	r3, [pc, #228]	; (8005b2c <HAL_RCC_OscConfig+0xc58>)
 8005a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a4a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005a4e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8005a52:	2102      	movs	r1, #2
 8005a54:	6011      	str	r1, [r2, #0]
 8005a56:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005a5a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8005a5e:	6812      	ldr	r2, [r2, #0]
 8005a60:	fa92 f1a2 	rbit	r1, r2
 8005a64:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005a68:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8005a6c:	6011      	str	r1, [r2, #0]
  return result;
 8005a6e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005a72:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8005a76:	6812      	ldr	r2, [r2, #0]
 8005a78:	fab2 f282 	clz	r2, r2
 8005a7c:	b2d2      	uxtb	r2, r2
 8005a7e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005a82:	b2d2      	uxtb	r2, r2
 8005a84:	f002 021f 	and.w	r2, r2, #31
 8005a88:	2101      	movs	r1, #1
 8005a8a:	fa01 f202 	lsl.w	r2, r1, r2
 8005a8e:	4013      	ands	r3, r2
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d184      	bne.n	800599e <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005a94:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8005a98:	2b01      	cmp	r3, #1
 8005a9a:	d105      	bne.n	8005aa8 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005a9c:	4b23      	ldr	r3, [pc, #140]	; (8005b2c <HAL_RCC_OscConfig+0xc58>)
 8005a9e:	69db      	ldr	r3, [r3, #28]
 8005aa0:	4a22      	ldr	r2, [pc, #136]	; (8005b2c <HAL_RCC_OscConfig+0xc58>)
 8005aa2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005aa6:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005aa8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005aac:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	69db      	ldr	r3, [r3, #28]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	f000 8242 	beq.w	8005f3e <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005aba:	4b1c      	ldr	r3, [pc, #112]	; (8005b2c <HAL_RCC_OscConfig+0xc58>)
 8005abc:	685b      	ldr	r3, [r3, #4]
 8005abe:	f003 030c 	and.w	r3, r3, #12
 8005ac2:	2b08      	cmp	r3, #8
 8005ac4:	f000 8213 	beq.w	8005eee <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005ac8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005acc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	69db      	ldr	r3, [r3, #28]
 8005ad4:	2b02      	cmp	r3, #2
 8005ad6:	f040 8162 	bne.w	8005d9e <HAL_RCC_OscConfig+0xeca>
 8005ada:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005ade:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8005ae2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005ae6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ae8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005aec:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	fa93 f2a3 	rbit	r2, r3
 8005af6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005afa:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8005afe:	601a      	str	r2, [r3, #0]
  return result;
 8005b00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005b04:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8005b08:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b0a:	fab3 f383 	clz	r3, r3
 8005b0e:	b2db      	uxtb	r3, r3
 8005b10:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005b14:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005b18:	009b      	lsls	r3, r3, #2
 8005b1a:	461a      	mov	r2, r3
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b20:	f7fd fcc2 	bl	80034a8 <HAL_GetTick>
 8005b24:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005b28:	e00c      	b.n	8005b44 <HAL_RCC_OscConfig+0xc70>
 8005b2a:	bf00      	nop
 8005b2c:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005b30:	f7fd fcba 	bl	80034a8 <HAL_GetTick>
 8005b34:	4602      	mov	r2, r0
 8005b36:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005b3a:	1ad3      	subs	r3, r2, r3
 8005b3c:	2b02      	cmp	r3, #2
 8005b3e:	d901      	bls.n	8005b44 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8005b40:	2303      	movs	r3, #3
 8005b42:	e1fd      	b.n	8005f40 <HAL_RCC_OscConfig+0x106c>
 8005b44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005b48:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8005b4c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005b50:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005b56:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	fa93 f2a3 	rbit	r2, r3
 8005b60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005b64:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8005b68:	601a      	str	r2, [r3, #0]
  return result;
 8005b6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005b6e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8005b72:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005b74:	fab3 f383 	clz	r3, r3
 8005b78:	b2db      	uxtb	r3, r3
 8005b7a:	095b      	lsrs	r3, r3, #5
 8005b7c:	b2db      	uxtb	r3, r3
 8005b7e:	f043 0301 	orr.w	r3, r3, #1
 8005b82:	b2db      	uxtb	r3, r3
 8005b84:	2b01      	cmp	r3, #1
 8005b86:	d102      	bne.n	8005b8e <HAL_RCC_OscConfig+0xcba>
 8005b88:	4bb0      	ldr	r3, [pc, #704]	; (8005e4c <HAL_RCC_OscConfig+0xf78>)
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	e027      	b.n	8005bde <HAL_RCC_OscConfig+0xd0a>
 8005b8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005b92:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8005b96:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005b9a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005ba0:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	fa93 f2a3 	rbit	r2, r3
 8005baa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005bae:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8005bb2:	601a      	str	r2, [r3, #0]
 8005bb4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005bb8:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8005bbc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005bc0:	601a      	str	r2, [r3, #0]
 8005bc2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005bc6:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	fa93 f2a3 	rbit	r2, r3
 8005bd0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005bd4:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8005bd8:	601a      	str	r2, [r3, #0]
 8005bda:	4b9c      	ldr	r3, [pc, #624]	; (8005e4c <HAL_RCC_OscConfig+0xf78>)
 8005bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bde:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005be2:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8005be6:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005bea:	6011      	str	r1, [r2, #0]
 8005bec:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005bf0:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8005bf4:	6812      	ldr	r2, [r2, #0]
 8005bf6:	fa92 f1a2 	rbit	r1, r2
 8005bfa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005bfe:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8005c02:	6011      	str	r1, [r2, #0]
  return result;
 8005c04:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005c08:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8005c0c:	6812      	ldr	r2, [r2, #0]
 8005c0e:	fab2 f282 	clz	r2, r2
 8005c12:	b2d2      	uxtb	r2, r2
 8005c14:	f042 0220 	orr.w	r2, r2, #32
 8005c18:	b2d2      	uxtb	r2, r2
 8005c1a:	f002 021f 	and.w	r2, r2, #31
 8005c1e:	2101      	movs	r1, #1
 8005c20:	fa01 f202 	lsl.w	r2, r1, r2
 8005c24:	4013      	ands	r3, r2
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d182      	bne.n	8005b30 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005c2a:	4b88      	ldr	r3, [pc, #544]	; (8005e4c <HAL_RCC_OscConfig+0xf78>)
 8005c2c:	685b      	ldr	r3, [r3, #4]
 8005c2e:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005c32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005c36:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005c3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005c42:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	6a1b      	ldr	r3, [r3, #32]
 8005c4a:	430b      	orrs	r3, r1
 8005c4c:	497f      	ldr	r1, [pc, #508]	; (8005e4c <HAL_RCC_OscConfig+0xf78>)
 8005c4e:	4313      	orrs	r3, r2
 8005c50:	604b      	str	r3, [r1, #4]
 8005c52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005c56:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8005c5a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005c5e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005c64:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	fa93 f2a3 	rbit	r2, r3
 8005c6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005c72:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8005c76:	601a      	str	r2, [r3, #0]
  return result;
 8005c78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005c7c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8005c80:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005c82:	fab3 f383 	clz	r3, r3
 8005c86:	b2db      	uxtb	r3, r3
 8005c88:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005c8c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005c90:	009b      	lsls	r3, r3, #2
 8005c92:	461a      	mov	r2, r3
 8005c94:	2301      	movs	r3, #1
 8005c96:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c98:	f7fd fc06 	bl	80034a8 <HAL_GetTick>
 8005c9c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005ca0:	e009      	b.n	8005cb6 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005ca2:	f7fd fc01 	bl	80034a8 <HAL_GetTick>
 8005ca6:	4602      	mov	r2, r0
 8005ca8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005cac:	1ad3      	subs	r3, r2, r3
 8005cae:	2b02      	cmp	r3, #2
 8005cb0:	d901      	bls.n	8005cb6 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8005cb2:	2303      	movs	r3, #3
 8005cb4:	e144      	b.n	8005f40 <HAL_RCC_OscConfig+0x106c>
 8005cb6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005cba:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8005cbe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005cc2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005cc4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005cc8:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	fa93 f2a3 	rbit	r2, r3
 8005cd2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005cd6:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8005cda:	601a      	str	r2, [r3, #0]
  return result;
 8005cdc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005ce0:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8005ce4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005ce6:	fab3 f383 	clz	r3, r3
 8005cea:	b2db      	uxtb	r3, r3
 8005cec:	095b      	lsrs	r3, r3, #5
 8005cee:	b2db      	uxtb	r3, r3
 8005cf0:	f043 0301 	orr.w	r3, r3, #1
 8005cf4:	b2db      	uxtb	r3, r3
 8005cf6:	2b01      	cmp	r3, #1
 8005cf8:	d102      	bne.n	8005d00 <HAL_RCC_OscConfig+0xe2c>
 8005cfa:	4b54      	ldr	r3, [pc, #336]	; (8005e4c <HAL_RCC_OscConfig+0xf78>)
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	e027      	b.n	8005d50 <HAL_RCC_OscConfig+0xe7c>
 8005d00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005d04:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8005d08:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005d0c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005d12:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	fa93 f2a3 	rbit	r2, r3
 8005d1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005d20:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8005d24:	601a      	str	r2, [r3, #0]
 8005d26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005d2a:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8005d2e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005d32:	601a      	str	r2, [r3, #0]
 8005d34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005d38:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	fa93 f2a3 	rbit	r2, r3
 8005d42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005d46:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8005d4a:	601a      	str	r2, [r3, #0]
 8005d4c:	4b3f      	ldr	r3, [pc, #252]	; (8005e4c <HAL_RCC_OscConfig+0xf78>)
 8005d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d50:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005d54:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8005d58:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005d5c:	6011      	str	r1, [r2, #0]
 8005d5e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005d62:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8005d66:	6812      	ldr	r2, [r2, #0]
 8005d68:	fa92 f1a2 	rbit	r1, r2
 8005d6c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005d70:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8005d74:	6011      	str	r1, [r2, #0]
  return result;
 8005d76:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005d7a:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8005d7e:	6812      	ldr	r2, [r2, #0]
 8005d80:	fab2 f282 	clz	r2, r2
 8005d84:	b2d2      	uxtb	r2, r2
 8005d86:	f042 0220 	orr.w	r2, r2, #32
 8005d8a:	b2d2      	uxtb	r2, r2
 8005d8c:	f002 021f 	and.w	r2, r2, #31
 8005d90:	2101      	movs	r1, #1
 8005d92:	fa01 f202 	lsl.w	r2, r1, r2
 8005d96:	4013      	ands	r3, r2
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d082      	beq.n	8005ca2 <HAL_RCC_OscConfig+0xdce>
 8005d9c:	e0cf      	b.n	8005f3e <HAL_RCC_OscConfig+0x106a>
 8005d9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005da2:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8005da6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005daa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005dac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005db0:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	fa93 f2a3 	rbit	r2, r3
 8005dba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005dbe:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8005dc2:	601a      	str	r2, [r3, #0]
  return result;
 8005dc4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005dc8:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8005dcc:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005dce:	fab3 f383 	clz	r3, r3
 8005dd2:	b2db      	uxtb	r3, r3
 8005dd4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005dd8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005ddc:	009b      	lsls	r3, r3, #2
 8005dde:	461a      	mov	r2, r3
 8005de0:	2300      	movs	r3, #0
 8005de2:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005de4:	f7fd fb60 	bl	80034a8 <HAL_GetTick>
 8005de8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005dec:	e009      	b.n	8005e02 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005dee:	f7fd fb5b 	bl	80034a8 <HAL_GetTick>
 8005df2:	4602      	mov	r2, r0
 8005df4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005df8:	1ad3      	subs	r3, r2, r3
 8005dfa:	2b02      	cmp	r3, #2
 8005dfc:	d901      	bls.n	8005e02 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8005dfe:	2303      	movs	r3, #3
 8005e00:	e09e      	b.n	8005f40 <HAL_RCC_OscConfig+0x106c>
 8005e02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005e06:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8005e0a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005e0e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005e14:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	fa93 f2a3 	rbit	r2, r3
 8005e1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005e22:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8005e26:	601a      	str	r2, [r3, #0]
  return result;
 8005e28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005e2c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8005e30:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005e32:	fab3 f383 	clz	r3, r3
 8005e36:	b2db      	uxtb	r3, r3
 8005e38:	095b      	lsrs	r3, r3, #5
 8005e3a:	b2db      	uxtb	r3, r3
 8005e3c:	f043 0301 	orr.w	r3, r3, #1
 8005e40:	b2db      	uxtb	r3, r3
 8005e42:	2b01      	cmp	r3, #1
 8005e44:	d104      	bne.n	8005e50 <HAL_RCC_OscConfig+0xf7c>
 8005e46:	4b01      	ldr	r3, [pc, #4]	; (8005e4c <HAL_RCC_OscConfig+0xf78>)
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	e029      	b.n	8005ea0 <HAL_RCC_OscConfig+0xfcc>
 8005e4c:	40021000 	.word	0x40021000
 8005e50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005e54:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8005e58:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005e5c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005e62:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	fa93 f2a3 	rbit	r2, r3
 8005e6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005e70:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8005e74:	601a      	str	r2, [r3, #0]
 8005e76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005e7a:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8005e7e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005e82:	601a      	str	r2, [r3, #0]
 8005e84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005e88:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	fa93 f2a3 	rbit	r2, r3
 8005e92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005e96:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8005e9a:	601a      	str	r2, [r3, #0]
 8005e9c:	4b2b      	ldr	r3, [pc, #172]	; (8005f4c <HAL_RCC_OscConfig+0x1078>)
 8005e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ea0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005ea4:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8005ea8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005eac:	6011      	str	r1, [r2, #0]
 8005eae:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005eb2:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8005eb6:	6812      	ldr	r2, [r2, #0]
 8005eb8:	fa92 f1a2 	rbit	r1, r2
 8005ebc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005ec0:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8005ec4:	6011      	str	r1, [r2, #0]
  return result;
 8005ec6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005eca:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8005ece:	6812      	ldr	r2, [r2, #0]
 8005ed0:	fab2 f282 	clz	r2, r2
 8005ed4:	b2d2      	uxtb	r2, r2
 8005ed6:	f042 0220 	orr.w	r2, r2, #32
 8005eda:	b2d2      	uxtb	r2, r2
 8005edc:	f002 021f 	and.w	r2, r2, #31
 8005ee0:	2101      	movs	r1, #1
 8005ee2:	fa01 f202 	lsl.w	r2, r1, r2
 8005ee6:	4013      	ands	r3, r2
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d180      	bne.n	8005dee <HAL_RCC_OscConfig+0xf1a>
 8005eec:	e027      	b.n	8005f3e <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005eee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005ef2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	69db      	ldr	r3, [r3, #28]
 8005efa:	2b01      	cmp	r3, #1
 8005efc:	d101      	bne.n	8005f02 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8005efe:	2301      	movs	r3, #1
 8005f00:	e01e      	b.n	8005f40 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005f02:	4b12      	ldr	r3, [pc, #72]	; (8005f4c <HAL_RCC_OscConfig+0x1078>)
 8005f04:	685b      	ldr	r3, [r3, #4]
 8005f06:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005f0a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8005f0e:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005f12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005f16:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	6a1b      	ldr	r3, [r3, #32]
 8005f1e:	429a      	cmp	r2, r3
 8005f20:	d10b      	bne.n	8005f3a <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8005f22:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8005f26:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005f2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005f2e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005f36:	429a      	cmp	r2, r3
 8005f38:	d001      	beq.n	8005f3e <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8005f3a:	2301      	movs	r3, #1
 8005f3c:	e000      	b.n	8005f40 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8005f3e:	2300      	movs	r3, #0
}
 8005f40:	4618      	mov	r0, r3
 8005f42:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8005f46:	46bd      	mov	sp, r7
 8005f48:	bd80      	pop	{r7, pc}
 8005f4a:	bf00      	nop
 8005f4c:	40021000 	.word	0x40021000

08005f50 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005f50:	b580      	push	{r7, lr}
 8005f52:	b09e      	sub	sp, #120	; 0x78
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
 8005f58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d101      	bne.n	8005f68 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005f64:	2301      	movs	r3, #1
 8005f66:	e162      	b.n	800622e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005f68:	4b90      	ldr	r3, [pc, #576]	; (80061ac <HAL_RCC_ClockConfig+0x25c>)
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f003 0307 	and.w	r3, r3, #7
 8005f70:	683a      	ldr	r2, [r7, #0]
 8005f72:	429a      	cmp	r2, r3
 8005f74:	d910      	bls.n	8005f98 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f76:	4b8d      	ldr	r3, [pc, #564]	; (80061ac <HAL_RCC_ClockConfig+0x25c>)
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f023 0207 	bic.w	r2, r3, #7
 8005f7e:	498b      	ldr	r1, [pc, #556]	; (80061ac <HAL_RCC_ClockConfig+0x25c>)
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	4313      	orrs	r3, r2
 8005f84:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f86:	4b89      	ldr	r3, [pc, #548]	; (80061ac <HAL_RCC_ClockConfig+0x25c>)
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f003 0307 	and.w	r3, r3, #7
 8005f8e:	683a      	ldr	r2, [r7, #0]
 8005f90:	429a      	cmp	r2, r3
 8005f92:	d001      	beq.n	8005f98 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005f94:	2301      	movs	r3, #1
 8005f96:	e14a      	b.n	800622e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f003 0302 	and.w	r3, r3, #2
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d008      	beq.n	8005fb6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005fa4:	4b82      	ldr	r3, [pc, #520]	; (80061b0 <HAL_RCC_ClockConfig+0x260>)
 8005fa6:	685b      	ldr	r3, [r3, #4]
 8005fa8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	689b      	ldr	r3, [r3, #8]
 8005fb0:	497f      	ldr	r1, [pc, #508]	; (80061b0 <HAL_RCC_ClockConfig+0x260>)
 8005fb2:	4313      	orrs	r3, r2
 8005fb4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f003 0301 	and.w	r3, r3, #1
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	f000 80dc 	beq.w	800617c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	685b      	ldr	r3, [r3, #4]
 8005fc8:	2b01      	cmp	r3, #1
 8005fca:	d13c      	bne.n	8006046 <HAL_RCC_ClockConfig+0xf6>
 8005fcc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005fd0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005fd2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005fd4:	fa93 f3a3 	rbit	r3, r3
 8005fd8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8005fda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005fdc:	fab3 f383 	clz	r3, r3
 8005fe0:	b2db      	uxtb	r3, r3
 8005fe2:	095b      	lsrs	r3, r3, #5
 8005fe4:	b2db      	uxtb	r3, r3
 8005fe6:	f043 0301 	orr.w	r3, r3, #1
 8005fea:	b2db      	uxtb	r3, r3
 8005fec:	2b01      	cmp	r3, #1
 8005fee:	d102      	bne.n	8005ff6 <HAL_RCC_ClockConfig+0xa6>
 8005ff0:	4b6f      	ldr	r3, [pc, #444]	; (80061b0 <HAL_RCC_ClockConfig+0x260>)
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	e00f      	b.n	8006016 <HAL_RCC_ClockConfig+0xc6>
 8005ff6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005ffa:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ffc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005ffe:	fa93 f3a3 	rbit	r3, r3
 8006002:	667b      	str	r3, [r7, #100]	; 0x64
 8006004:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006008:	663b      	str	r3, [r7, #96]	; 0x60
 800600a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800600c:	fa93 f3a3 	rbit	r3, r3
 8006010:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006012:	4b67      	ldr	r3, [pc, #412]	; (80061b0 <HAL_RCC_ClockConfig+0x260>)
 8006014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006016:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800601a:	65ba      	str	r2, [r7, #88]	; 0x58
 800601c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800601e:	fa92 f2a2 	rbit	r2, r2
 8006022:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8006024:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006026:	fab2 f282 	clz	r2, r2
 800602a:	b2d2      	uxtb	r2, r2
 800602c:	f042 0220 	orr.w	r2, r2, #32
 8006030:	b2d2      	uxtb	r2, r2
 8006032:	f002 021f 	and.w	r2, r2, #31
 8006036:	2101      	movs	r1, #1
 8006038:	fa01 f202 	lsl.w	r2, r1, r2
 800603c:	4013      	ands	r3, r2
 800603e:	2b00      	cmp	r3, #0
 8006040:	d17b      	bne.n	800613a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8006042:	2301      	movs	r3, #1
 8006044:	e0f3      	b.n	800622e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	685b      	ldr	r3, [r3, #4]
 800604a:	2b02      	cmp	r3, #2
 800604c:	d13c      	bne.n	80060c8 <HAL_RCC_ClockConfig+0x178>
 800604e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006052:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006054:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006056:	fa93 f3a3 	rbit	r3, r3
 800605a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800605c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800605e:	fab3 f383 	clz	r3, r3
 8006062:	b2db      	uxtb	r3, r3
 8006064:	095b      	lsrs	r3, r3, #5
 8006066:	b2db      	uxtb	r3, r3
 8006068:	f043 0301 	orr.w	r3, r3, #1
 800606c:	b2db      	uxtb	r3, r3
 800606e:	2b01      	cmp	r3, #1
 8006070:	d102      	bne.n	8006078 <HAL_RCC_ClockConfig+0x128>
 8006072:	4b4f      	ldr	r3, [pc, #316]	; (80061b0 <HAL_RCC_ClockConfig+0x260>)
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	e00f      	b.n	8006098 <HAL_RCC_ClockConfig+0x148>
 8006078:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800607c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800607e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006080:	fa93 f3a3 	rbit	r3, r3
 8006084:	647b      	str	r3, [r7, #68]	; 0x44
 8006086:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800608a:	643b      	str	r3, [r7, #64]	; 0x40
 800608c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800608e:	fa93 f3a3 	rbit	r3, r3
 8006092:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006094:	4b46      	ldr	r3, [pc, #280]	; (80061b0 <HAL_RCC_ClockConfig+0x260>)
 8006096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006098:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800609c:	63ba      	str	r2, [r7, #56]	; 0x38
 800609e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80060a0:	fa92 f2a2 	rbit	r2, r2
 80060a4:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80060a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80060a8:	fab2 f282 	clz	r2, r2
 80060ac:	b2d2      	uxtb	r2, r2
 80060ae:	f042 0220 	orr.w	r2, r2, #32
 80060b2:	b2d2      	uxtb	r2, r2
 80060b4:	f002 021f 	and.w	r2, r2, #31
 80060b8:	2101      	movs	r1, #1
 80060ba:	fa01 f202 	lsl.w	r2, r1, r2
 80060be:	4013      	ands	r3, r2
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d13a      	bne.n	800613a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80060c4:	2301      	movs	r3, #1
 80060c6:	e0b2      	b.n	800622e <HAL_RCC_ClockConfig+0x2de>
 80060c8:	2302      	movs	r3, #2
 80060ca:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060ce:	fa93 f3a3 	rbit	r3, r3
 80060d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80060d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80060d6:	fab3 f383 	clz	r3, r3
 80060da:	b2db      	uxtb	r3, r3
 80060dc:	095b      	lsrs	r3, r3, #5
 80060de:	b2db      	uxtb	r3, r3
 80060e0:	f043 0301 	orr.w	r3, r3, #1
 80060e4:	b2db      	uxtb	r3, r3
 80060e6:	2b01      	cmp	r3, #1
 80060e8:	d102      	bne.n	80060f0 <HAL_RCC_ClockConfig+0x1a0>
 80060ea:	4b31      	ldr	r3, [pc, #196]	; (80061b0 <HAL_RCC_ClockConfig+0x260>)
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	e00d      	b.n	800610c <HAL_RCC_ClockConfig+0x1bc>
 80060f0:	2302      	movs	r3, #2
 80060f2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060f6:	fa93 f3a3 	rbit	r3, r3
 80060fa:	627b      	str	r3, [r7, #36]	; 0x24
 80060fc:	2302      	movs	r3, #2
 80060fe:	623b      	str	r3, [r7, #32]
 8006100:	6a3b      	ldr	r3, [r7, #32]
 8006102:	fa93 f3a3 	rbit	r3, r3
 8006106:	61fb      	str	r3, [r7, #28]
 8006108:	4b29      	ldr	r3, [pc, #164]	; (80061b0 <HAL_RCC_ClockConfig+0x260>)
 800610a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800610c:	2202      	movs	r2, #2
 800610e:	61ba      	str	r2, [r7, #24]
 8006110:	69ba      	ldr	r2, [r7, #24]
 8006112:	fa92 f2a2 	rbit	r2, r2
 8006116:	617a      	str	r2, [r7, #20]
  return result;
 8006118:	697a      	ldr	r2, [r7, #20]
 800611a:	fab2 f282 	clz	r2, r2
 800611e:	b2d2      	uxtb	r2, r2
 8006120:	f042 0220 	orr.w	r2, r2, #32
 8006124:	b2d2      	uxtb	r2, r2
 8006126:	f002 021f 	and.w	r2, r2, #31
 800612a:	2101      	movs	r1, #1
 800612c:	fa01 f202 	lsl.w	r2, r1, r2
 8006130:	4013      	ands	r3, r2
 8006132:	2b00      	cmp	r3, #0
 8006134:	d101      	bne.n	800613a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8006136:	2301      	movs	r3, #1
 8006138:	e079      	b.n	800622e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800613a:	4b1d      	ldr	r3, [pc, #116]	; (80061b0 <HAL_RCC_ClockConfig+0x260>)
 800613c:	685b      	ldr	r3, [r3, #4]
 800613e:	f023 0203 	bic.w	r2, r3, #3
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	685b      	ldr	r3, [r3, #4]
 8006146:	491a      	ldr	r1, [pc, #104]	; (80061b0 <HAL_RCC_ClockConfig+0x260>)
 8006148:	4313      	orrs	r3, r2
 800614a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800614c:	f7fd f9ac 	bl	80034a8 <HAL_GetTick>
 8006150:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006152:	e00a      	b.n	800616a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006154:	f7fd f9a8 	bl	80034a8 <HAL_GetTick>
 8006158:	4602      	mov	r2, r0
 800615a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800615c:	1ad3      	subs	r3, r2, r3
 800615e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006162:	4293      	cmp	r3, r2
 8006164:	d901      	bls.n	800616a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8006166:	2303      	movs	r3, #3
 8006168:	e061      	b.n	800622e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800616a:	4b11      	ldr	r3, [pc, #68]	; (80061b0 <HAL_RCC_ClockConfig+0x260>)
 800616c:	685b      	ldr	r3, [r3, #4]
 800616e:	f003 020c 	and.w	r2, r3, #12
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	685b      	ldr	r3, [r3, #4]
 8006176:	009b      	lsls	r3, r3, #2
 8006178:	429a      	cmp	r2, r3
 800617a:	d1eb      	bne.n	8006154 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800617c:	4b0b      	ldr	r3, [pc, #44]	; (80061ac <HAL_RCC_ClockConfig+0x25c>)
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f003 0307 	and.w	r3, r3, #7
 8006184:	683a      	ldr	r2, [r7, #0]
 8006186:	429a      	cmp	r2, r3
 8006188:	d214      	bcs.n	80061b4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800618a:	4b08      	ldr	r3, [pc, #32]	; (80061ac <HAL_RCC_ClockConfig+0x25c>)
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f023 0207 	bic.w	r2, r3, #7
 8006192:	4906      	ldr	r1, [pc, #24]	; (80061ac <HAL_RCC_ClockConfig+0x25c>)
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	4313      	orrs	r3, r2
 8006198:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800619a:	4b04      	ldr	r3, [pc, #16]	; (80061ac <HAL_RCC_ClockConfig+0x25c>)
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	f003 0307 	and.w	r3, r3, #7
 80061a2:	683a      	ldr	r2, [r7, #0]
 80061a4:	429a      	cmp	r2, r3
 80061a6:	d005      	beq.n	80061b4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80061a8:	2301      	movs	r3, #1
 80061aa:	e040      	b.n	800622e <HAL_RCC_ClockConfig+0x2de>
 80061ac:	40022000 	.word	0x40022000
 80061b0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f003 0304 	and.w	r3, r3, #4
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d008      	beq.n	80061d2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80061c0:	4b1d      	ldr	r3, [pc, #116]	; (8006238 <HAL_RCC_ClockConfig+0x2e8>)
 80061c2:	685b      	ldr	r3, [r3, #4]
 80061c4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	68db      	ldr	r3, [r3, #12]
 80061cc:	491a      	ldr	r1, [pc, #104]	; (8006238 <HAL_RCC_ClockConfig+0x2e8>)
 80061ce:	4313      	orrs	r3, r2
 80061d0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f003 0308 	and.w	r3, r3, #8
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d009      	beq.n	80061f2 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80061de:	4b16      	ldr	r3, [pc, #88]	; (8006238 <HAL_RCC_ClockConfig+0x2e8>)
 80061e0:	685b      	ldr	r3, [r3, #4]
 80061e2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	691b      	ldr	r3, [r3, #16]
 80061ea:	00db      	lsls	r3, r3, #3
 80061ec:	4912      	ldr	r1, [pc, #72]	; (8006238 <HAL_RCC_ClockConfig+0x2e8>)
 80061ee:	4313      	orrs	r3, r2
 80061f0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80061f2:	f000 f829 	bl	8006248 <HAL_RCC_GetSysClockFreq>
 80061f6:	4601      	mov	r1, r0
 80061f8:	4b0f      	ldr	r3, [pc, #60]	; (8006238 <HAL_RCC_ClockConfig+0x2e8>)
 80061fa:	685b      	ldr	r3, [r3, #4]
 80061fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006200:	22f0      	movs	r2, #240	; 0xf0
 8006202:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006204:	693a      	ldr	r2, [r7, #16]
 8006206:	fa92 f2a2 	rbit	r2, r2
 800620a:	60fa      	str	r2, [r7, #12]
  return result;
 800620c:	68fa      	ldr	r2, [r7, #12]
 800620e:	fab2 f282 	clz	r2, r2
 8006212:	b2d2      	uxtb	r2, r2
 8006214:	40d3      	lsrs	r3, r2
 8006216:	4a09      	ldr	r2, [pc, #36]	; (800623c <HAL_RCC_ClockConfig+0x2ec>)
 8006218:	5cd3      	ldrb	r3, [r2, r3]
 800621a:	fa21 f303 	lsr.w	r3, r1, r3
 800621e:	4a08      	ldr	r2, [pc, #32]	; (8006240 <HAL_RCC_ClockConfig+0x2f0>)
 8006220:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8006222:	4b08      	ldr	r3, [pc, #32]	; (8006244 <HAL_RCC_ClockConfig+0x2f4>)
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	4618      	mov	r0, r3
 8006228:	f7fd f8fa 	bl	8003420 <HAL_InitTick>
  
  return HAL_OK;
 800622c:	2300      	movs	r3, #0
}
 800622e:	4618      	mov	r0, r3
 8006230:	3778      	adds	r7, #120	; 0x78
 8006232:	46bd      	mov	sp, r7
 8006234:	bd80      	pop	{r7, pc}
 8006236:	bf00      	nop
 8006238:	40021000 	.word	0x40021000
 800623c:	0800cd64 	.word	0x0800cd64
 8006240:	20000020 	.word	0x20000020
 8006244:	20000024 	.word	0x20000024

08006248 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006248:	b480      	push	{r7}
 800624a:	b08b      	sub	sp, #44	; 0x2c
 800624c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800624e:	2300      	movs	r3, #0
 8006250:	61fb      	str	r3, [r7, #28]
 8006252:	2300      	movs	r3, #0
 8006254:	61bb      	str	r3, [r7, #24]
 8006256:	2300      	movs	r3, #0
 8006258:	627b      	str	r3, [r7, #36]	; 0x24
 800625a:	2300      	movs	r3, #0
 800625c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800625e:	2300      	movs	r3, #0
 8006260:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8006262:	4b29      	ldr	r3, [pc, #164]	; (8006308 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006264:	685b      	ldr	r3, [r3, #4]
 8006266:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006268:	69fb      	ldr	r3, [r7, #28]
 800626a:	f003 030c 	and.w	r3, r3, #12
 800626e:	2b04      	cmp	r3, #4
 8006270:	d002      	beq.n	8006278 <HAL_RCC_GetSysClockFreq+0x30>
 8006272:	2b08      	cmp	r3, #8
 8006274:	d003      	beq.n	800627e <HAL_RCC_GetSysClockFreq+0x36>
 8006276:	e03c      	b.n	80062f2 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006278:	4b24      	ldr	r3, [pc, #144]	; (800630c <HAL_RCC_GetSysClockFreq+0xc4>)
 800627a:	623b      	str	r3, [r7, #32]
      break;
 800627c:	e03c      	b.n	80062f8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800627e:	69fb      	ldr	r3, [r7, #28]
 8006280:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8006284:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8006288:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800628a:	68ba      	ldr	r2, [r7, #8]
 800628c:	fa92 f2a2 	rbit	r2, r2
 8006290:	607a      	str	r2, [r7, #4]
  return result;
 8006292:	687a      	ldr	r2, [r7, #4]
 8006294:	fab2 f282 	clz	r2, r2
 8006298:	b2d2      	uxtb	r2, r2
 800629a:	40d3      	lsrs	r3, r2
 800629c:	4a1c      	ldr	r2, [pc, #112]	; (8006310 <HAL_RCC_GetSysClockFreq+0xc8>)
 800629e:	5cd3      	ldrb	r3, [r2, r3]
 80062a0:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80062a2:	4b19      	ldr	r3, [pc, #100]	; (8006308 <HAL_RCC_GetSysClockFreq+0xc0>)
 80062a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062a6:	f003 030f 	and.w	r3, r3, #15
 80062aa:	220f      	movs	r2, #15
 80062ac:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062ae:	693a      	ldr	r2, [r7, #16]
 80062b0:	fa92 f2a2 	rbit	r2, r2
 80062b4:	60fa      	str	r2, [r7, #12]
  return result;
 80062b6:	68fa      	ldr	r2, [r7, #12]
 80062b8:	fab2 f282 	clz	r2, r2
 80062bc:	b2d2      	uxtb	r2, r2
 80062be:	40d3      	lsrs	r3, r2
 80062c0:	4a14      	ldr	r2, [pc, #80]	; (8006314 <HAL_RCC_GetSysClockFreq+0xcc>)
 80062c2:	5cd3      	ldrb	r3, [r2, r3]
 80062c4:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80062c6:	69fb      	ldr	r3, [r7, #28]
 80062c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d008      	beq.n	80062e2 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80062d0:	4a0e      	ldr	r2, [pc, #56]	; (800630c <HAL_RCC_GetSysClockFreq+0xc4>)
 80062d2:	69bb      	ldr	r3, [r7, #24]
 80062d4:	fbb2 f2f3 	udiv	r2, r2, r3
 80062d8:	697b      	ldr	r3, [r7, #20]
 80062da:	fb02 f303 	mul.w	r3, r2, r3
 80062de:	627b      	str	r3, [r7, #36]	; 0x24
 80062e0:	e004      	b.n	80062ec <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80062e2:	697b      	ldr	r3, [r7, #20]
 80062e4:	4a0c      	ldr	r2, [pc, #48]	; (8006318 <HAL_RCC_GetSysClockFreq+0xd0>)
 80062e6:	fb02 f303 	mul.w	r3, r2, r3
 80062ea:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80062ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ee:	623b      	str	r3, [r7, #32]
      break;
 80062f0:	e002      	b.n	80062f8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80062f2:	4b06      	ldr	r3, [pc, #24]	; (800630c <HAL_RCC_GetSysClockFreq+0xc4>)
 80062f4:	623b      	str	r3, [r7, #32]
      break;
 80062f6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80062f8:	6a3b      	ldr	r3, [r7, #32]
}
 80062fa:	4618      	mov	r0, r3
 80062fc:	372c      	adds	r7, #44	; 0x2c
 80062fe:	46bd      	mov	sp, r7
 8006300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006304:	4770      	bx	lr
 8006306:	bf00      	nop
 8006308:	40021000 	.word	0x40021000
 800630c:	007a1200 	.word	0x007a1200
 8006310:	0800cd7c 	.word	0x0800cd7c
 8006314:	0800cd8c 	.word	0x0800cd8c
 8006318:	003d0900 	.word	0x003d0900

0800631c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800631c:	b480      	push	{r7}
 800631e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006320:	4b03      	ldr	r3, [pc, #12]	; (8006330 <HAL_RCC_GetHCLKFreq+0x14>)
 8006322:	681b      	ldr	r3, [r3, #0]
}
 8006324:	4618      	mov	r0, r3
 8006326:	46bd      	mov	sp, r7
 8006328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632c:	4770      	bx	lr
 800632e:	bf00      	nop
 8006330:	20000020 	.word	0x20000020

08006334 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006334:	b580      	push	{r7, lr}
 8006336:	b082      	sub	sp, #8
 8006338:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800633a:	f7ff ffef 	bl	800631c <HAL_RCC_GetHCLKFreq>
 800633e:	4601      	mov	r1, r0
 8006340:	4b0b      	ldr	r3, [pc, #44]	; (8006370 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8006342:	685b      	ldr	r3, [r3, #4]
 8006344:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006348:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800634c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800634e:	687a      	ldr	r2, [r7, #4]
 8006350:	fa92 f2a2 	rbit	r2, r2
 8006354:	603a      	str	r2, [r7, #0]
  return result;
 8006356:	683a      	ldr	r2, [r7, #0]
 8006358:	fab2 f282 	clz	r2, r2
 800635c:	b2d2      	uxtb	r2, r2
 800635e:	40d3      	lsrs	r3, r2
 8006360:	4a04      	ldr	r2, [pc, #16]	; (8006374 <HAL_RCC_GetPCLK1Freq+0x40>)
 8006362:	5cd3      	ldrb	r3, [r2, r3]
 8006364:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8006368:	4618      	mov	r0, r3
 800636a:	3708      	adds	r7, #8
 800636c:	46bd      	mov	sp, r7
 800636e:	bd80      	pop	{r7, pc}
 8006370:	40021000 	.word	0x40021000
 8006374:	0800cd74 	.word	0x0800cd74

08006378 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006378:	b580      	push	{r7, lr}
 800637a:	b082      	sub	sp, #8
 800637c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800637e:	f7ff ffcd 	bl	800631c <HAL_RCC_GetHCLKFreq>
 8006382:	4601      	mov	r1, r0
 8006384:	4b0b      	ldr	r3, [pc, #44]	; (80063b4 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8006386:	685b      	ldr	r3, [r3, #4]
 8006388:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 800638c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8006390:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006392:	687a      	ldr	r2, [r7, #4]
 8006394:	fa92 f2a2 	rbit	r2, r2
 8006398:	603a      	str	r2, [r7, #0]
  return result;
 800639a:	683a      	ldr	r2, [r7, #0]
 800639c:	fab2 f282 	clz	r2, r2
 80063a0:	b2d2      	uxtb	r2, r2
 80063a2:	40d3      	lsrs	r3, r2
 80063a4:	4a04      	ldr	r2, [pc, #16]	; (80063b8 <HAL_RCC_GetPCLK2Freq+0x40>)
 80063a6:	5cd3      	ldrb	r3, [r2, r3]
 80063a8:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80063ac:	4618      	mov	r0, r3
 80063ae:	3708      	adds	r7, #8
 80063b0:	46bd      	mov	sp, r7
 80063b2:	bd80      	pop	{r7, pc}
 80063b4:	40021000 	.word	0x40021000
 80063b8:	0800cd74 	.word	0x0800cd74

080063bc <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80063bc:	b580      	push	{r7, lr}
 80063be:	b092      	sub	sp, #72	; 0x48
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80063c4:	2300      	movs	r3, #0
 80063c6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80063c8:	2300      	movs	r3, #0
 80063ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80063cc:	2300      	movs	r3, #0
 80063ce:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80063da:	2b00      	cmp	r3, #0
 80063dc:	f000 80d4 	beq.w	8006588 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80063e0:	4b4e      	ldr	r3, [pc, #312]	; (800651c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80063e2:	69db      	ldr	r3, [r3, #28]
 80063e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d10e      	bne.n	800640a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80063ec:	4b4b      	ldr	r3, [pc, #300]	; (800651c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80063ee:	69db      	ldr	r3, [r3, #28]
 80063f0:	4a4a      	ldr	r2, [pc, #296]	; (800651c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80063f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80063f6:	61d3      	str	r3, [r2, #28]
 80063f8:	4b48      	ldr	r3, [pc, #288]	; (800651c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80063fa:	69db      	ldr	r3, [r3, #28]
 80063fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006400:	60bb      	str	r3, [r7, #8]
 8006402:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006404:	2301      	movs	r3, #1
 8006406:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800640a:	4b45      	ldr	r3, [pc, #276]	; (8006520 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006412:	2b00      	cmp	r3, #0
 8006414:	d118      	bne.n	8006448 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006416:	4b42      	ldr	r3, [pc, #264]	; (8006520 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	4a41      	ldr	r2, [pc, #260]	; (8006520 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800641c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006420:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006422:	f7fd f841 	bl	80034a8 <HAL_GetTick>
 8006426:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006428:	e008      	b.n	800643c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800642a:	f7fd f83d 	bl	80034a8 <HAL_GetTick>
 800642e:	4602      	mov	r2, r0
 8006430:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006432:	1ad3      	subs	r3, r2, r3
 8006434:	2b64      	cmp	r3, #100	; 0x64
 8006436:	d901      	bls.n	800643c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8006438:	2303      	movs	r3, #3
 800643a:	e14b      	b.n	80066d4 <HAL_RCCEx_PeriphCLKConfig+0x318>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800643c:	4b38      	ldr	r3, [pc, #224]	; (8006520 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006444:	2b00      	cmp	r3, #0
 8006446:	d0f0      	beq.n	800642a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006448:	4b34      	ldr	r3, [pc, #208]	; (800651c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800644a:	6a1b      	ldr	r3, [r3, #32]
 800644c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006450:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006452:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006454:	2b00      	cmp	r3, #0
 8006456:	f000 8084 	beq.w	8006562 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	685b      	ldr	r3, [r3, #4]
 800645e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006462:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006464:	429a      	cmp	r2, r3
 8006466:	d07c      	beq.n	8006562 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006468:	4b2c      	ldr	r3, [pc, #176]	; (800651c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800646a:	6a1b      	ldr	r3, [r3, #32]
 800646c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006470:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006472:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006476:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006478:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800647a:	fa93 f3a3 	rbit	r3, r3
 800647e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8006480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006482:	fab3 f383 	clz	r3, r3
 8006486:	b2db      	uxtb	r3, r3
 8006488:	461a      	mov	r2, r3
 800648a:	4b26      	ldr	r3, [pc, #152]	; (8006524 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800648c:	4413      	add	r3, r2
 800648e:	009b      	lsls	r3, r3, #2
 8006490:	461a      	mov	r2, r3
 8006492:	2301      	movs	r3, #1
 8006494:	6013      	str	r3, [r2, #0]
 8006496:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800649a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800649c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800649e:	fa93 f3a3 	rbit	r3, r3
 80064a2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80064a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80064a6:	fab3 f383 	clz	r3, r3
 80064aa:	b2db      	uxtb	r3, r3
 80064ac:	461a      	mov	r2, r3
 80064ae:	4b1d      	ldr	r3, [pc, #116]	; (8006524 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80064b0:	4413      	add	r3, r2
 80064b2:	009b      	lsls	r3, r3, #2
 80064b4:	461a      	mov	r2, r3
 80064b6:	2300      	movs	r3, #0
 80064b8:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80064ba:	4a18      	ldr	r2, [pc, #96]	; (800651c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80064bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064be:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80064c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064c2:	f003 0301 	and.w	r3, r3, #1
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d04b      	beq.n	8006562 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80064ca:	f7fc ffed 	bl	80034a8 <HAL_GetTick>
 80064ce:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80064d0:	e00a      	b.n	80064e8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80064d2:	f7fc ffe9 	bl	80034a8 <HAL_GetTick>
 80064d6:	4602      	mov	r2, r0
 80064d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80064da:	1ad3      	subs	r3, r2, r3
 80064dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80064e0:	4293      	cmp	r3, r2
 80064e2:	d901      	bls.n	80064e8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80064e4:	2303      	movs	r3, #3
 80064e6:	e0f5      	b.n	80066d4 <HAL_RCCEx_PeriphCLKConfig+0x318>
 80064e8:	2302      	movs	r3, #2
 80064ea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80064ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064ee:	fa93 f3a3 	rbit	r3, r3
 80064f2:	627b      	str	r3, [r7, #36]	; 0x24
 80064f4:	2302      	movs	r3, #2
 80064f6:	623b      	str	r3, [r7, #32]
 80064f8:	6a3b      	ldr	r3, [r7, #32]
 80064fa:	fa93 f3a3 	rbit	r3, r3
 80064fe:	61fb      	str	r3, [r7, #28]
  return result;
 8006500:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006502:	fab3 f383 	clz	r3, r3
 8006506:	b2db      	uxtb	r3, r3
 8006508:	095b      	lsrs	r3, r3, #5
 800650a:	b2db      	uxtb	r3, r3
 800650c:	f043 0302 	orr.w	r3, r3, #2
 8006510:	b2db      	uxtb	r3, r3
 8006512:	2b02      	cmp	r3, #2
 8006514:	d108      	bne.n	8006528 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8006516:	4b01      	ldr	r3, [pc, #4]	; (800651c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006518:	6a1b      	ldr	r3, [r3, #32]
 800651a:	e00d      	b.n	8006538 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 800651c:	40021000 	.word	0x40021000
 8006520:	40007000 	.word	0x40007000
 8006524:	10908100 	.word	0x10908100
 8006528:	2302      	movs	r3, #2
 800652a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800652c:	69bb      	ldr	r3, [r7, #24]
 800652e:	fa93 f3a3 	rbit	r3, r3
 8006532:	617b      	str	r3, [r7, #20]
 8006534:	4b69      	ldr	r3, [pc, #420]	; (80066dc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8006536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006538:	2202      	movs	r2, #2
 800653a:	613a      	str	r2, [r7, #16]
 800653c:	693a      	ldr	r2, [r7, #16]
 800653e:	fa92 f2a2 	rbit	r2, r2
 8006542:	60fa      	str	r2, [r7, #12]
  return result;
 8006544:	68fa      	ldr	r2, [r7, #12]
 8006546:	fab2 f282 	clz	r2, r2
 800654a:	b2d2      	uxtb	r2, r2
 800654c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006550:	b2d2      	uxtb	r2, r2
 8006552:	f002 021f 	and.w	r2, r2, #31
 8006556:	2101      	movs	r1, #1
 8006558:	fa01 f202 	lsl.w	r2, r1, r2
 800655c:	4013      	ands	r3, r2
 800655e:	2b00      	cmp	r3, #0
 8006560:	d0b7      	beq.n	80064d2 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8006562:	4b5e      	ldr	r3, [pc, #376]	; (80066dc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8006564:	6a1b      	ldr	r3, [r3, #32]
 8006566:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	685b      	ldr	r3, [r3, #4]
 800656e:	495b      	ldr	r1, [pc, #364]	; (80066dc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8006570:	4313      	orrs	r3, r2
 8006572:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006574:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006578:	2b01      	cmp	r3, #1
 800657a:	d105      	bne.n	8006588 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800657c:	4b57      	ldr	r3, [pc, #348]	; (80066dc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800657e:	69db      	ldr	r3, [r3, #28]
 8006580:	4a56      	ldr	r2, [pc, #344]	; (80066dc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8006582:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006586:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f003 0301 	and.w	r3, r3, #1
 8006590:	2b00      	cmp	r3, #0
 8006592:	d008      	beq.n	80065a6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006594:	4b51      	ldr	r3, [pc, #324]	; (80066dc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8006596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006598:	f023 0203 	bic.w	r2, r3, #3
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	689b      	ldr	r3, [r3, #8]
 80065a0:	494e      	ldr	r1, [pc, #312]	; (80066dc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80065a2:	4313      	orrs	r3, r2
 80065a4:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f003 0302 	and.w	r3, r3, #2
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d008      	beq.n	80065c4 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80065b2:	4b4a      	ldr	r3, [pc, #296]	; (80066dc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80065b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065b6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	68db      	ldr	r3, [r3, #12]
 80065be:	4947      	ldr	r1, [pc, #284]	; (80066dc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80065c0:	4313      	orrs	r3, r2
 80065c2:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f003 0304 	and.w	r3, r3, #4
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d008      	beq.n	80065e2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80065d0:	4b42      	ldr	r3, [pc, #264]	; (80066dc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80065d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065d4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	691b      	ldr	r3, [r3, #16]
 80065dc:	493f      	ldr	r1, [pc, #252]	; (80066dc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80065de:	4313      	orrs	r3, r2
 80065e0:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f003 0320 	and.w	r3, r3, #32
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d008      	beq.n	8006600 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80065ee:	4b3b      	ldr	r3, [pc, #236]	; (80066dc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80065f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065f2:	f023 0210 	bic.w	r2, r3, #16
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	69db      	ldr	r3, [r3, #28]
 80065fa:	4938      	ldr	r1, [pc, #224]	; (80066dc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80065fc:	4313      	orrs	r3, r2
 80065fe:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006608:	2b00      	cmp	r3, #0
 800660a:	d008      	beq.n	800661e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 800660c:	4b33      	ldr	r3, [pc, #204]	; (80066dc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800660e:	685b      	ldr	r3, [r3, #4]
 8006610:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006618:	4930      	ldr	r1, [pc, #192]	; (80066dc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800661a:	4313      	orrs	r3, r2
 800661c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006626:	2b00      	cmp	r3, #0
 8006628:	d008      	beq.n	800663c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800662a:	4b2c      	ldr	r3, [pc, #176]	; (80066dc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800662c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800662e:	f023 0220 	bic.w	r2, r3, #32
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	6a1b      	ldr	r3, [r3, #32]
 8006636:	4929      	ldr	r1, [pc, #164]	; (80066dc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8006638:	4313      	orrs	r3, r2
 800663a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	f003 0308 	and.w	r3, r3, #8
 8006644:	2b00      	cmp	r3, #0
 8006646:	d008      	beq.n	800665a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006648:	4b24      	ldr	r3, [pc, #144]	; (80066dc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800664a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800664c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	695b      	ldr	r3, [r3, #20]
 8006654:	4921      	ldr	r1, [pc, #132]	; (80066dc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8006656:	4313      	orrs	r3, r2
 8006658:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	f003 0310 	and.w	r3, r3, #16
 8006662:	2b00      	cmp	r3, #0
 8006664:	d008      	beq.n	8006678 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006666:	4b1d      	ldr	r3, [pc, #116]	; (80066dc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8006668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800666a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	699b      	ldr	r3, [r3, #24]
 8006672:	491a      	ldr	r1, [pc, #104]	; (80066dc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8006674:	4313      	orrs	r3, r2
 8006676:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006680:	2b00      	cmp	r3, #0
 8006682:	d008      	beq.n	8006696 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006684:	4b15      	ldr	r3, [pc, #84]	; (80066dc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8006686:	685b      	ldr	r3, [r3, #4]
 8006688:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006690:	4912      	ldr	r1, [pc, #72]	; (80066dc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8006692:	4313      	orrs	r3, r2
 8006694:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d008      	beq.n	80066b4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80066a2:	4b0e      	ldr	r3, [pc, #56]	; (80066dc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80066a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066a6:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066ae:	490b      	ldr	r1, [pc, #44]	; (80066dc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80066b0:	4313      	orrs	r3, r2
 80066b2:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d008      	beq.n	80066d2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80066c0:	4b06      	ldr	r3, [pc, #24]	; (80066dc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80066c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066c4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066cc:	4903      	ldr	r1, [pc, #12]	; (80066dc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80066ce:	4313      	orrs	r3, r2
 80066d0:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80066d2:	2300      	movs	r3, #0
}
 80066d4:	4618      	mov	r0, r3
 80066d6:	3748      	adds	r7, #72	; 0x48
 80066d8:	46bd      	mov	sp, r7
 80066da:	bd80      	pop	{r7, pc}
 80066dc:	40021000 	.word	0x40021000

080066e0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80066e0:	b580      	push	{r7, lr}
 80066e2:	b084      	sub	sp, #16
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d101      	bne.n	80066f2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80066ee:	2301      	movs	r3, #1
 80066f0:	e09d      	b.n	800682e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d108      	bne.n	800670c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	685b      	ldr	r3, [r3, #4]
 80066fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006702:	d009      	beq.n	8006718 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2200      	movs	r2, #0
 8006708:	61da      	str	r2, [r3, #28]
 800670a:	e005      	b.n	8006718 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2200      	movs	r2, #0
 8006710:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	2200      	movs	r2, #0
 8006716:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2200      	movs	r2, #0
 800671c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006724:	b2db      	uxtb	r3, r3
 8006726:	2b00      	cmp	r3, #0
 8006728:	d106      	bne.n	8006738 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	2200      	movs	r2, #0
 800672e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006732:	6878      	ldr	r0, [r7, #4]
 8006734:	f7fb f972 	bl	8001a1c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2202      	movs	r2, #2
 800673c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	681a      	ldr	r2, [r3, #0]
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800674e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	68db      	ldr	r3, [r3, #12]
 8006754:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006758:	d902      	bls.n	8006760 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800675a:	2300      	movs	r3, #0
 800675c:	60fb      	str	r3, [r7, #12]
 800675e:	e002      	b.n	8006766 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006760:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006764:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	68db      	ldr	r3, [r3, #12]
 800676a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800676e:	d007      	beq.n	8006780 <HAL_SPI_Init+0xa0>
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	68db      	ldr	r3, [r3, #12]
 8006774:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006778:	d002      	beq.n	8006780 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	2200      	movs	r2, #0
 800677e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	685b      	ldr	r3, [r3, #4]
 8006784:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	689b      	ldr	r3, [r3, #8]
 800678c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006790:	431a      	orrs	r2, r3
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	691b      	ldr	r3, [r3, #16]
 8006796:	f003 0302 	and.w	r3, r3, #2
 800679a:	431a      	orrs	r2, r3
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	695b      	ldr	r3, [r3, #20]
 80067a0:	f003 0301 	and.w	r3, r3, #1
 80067a4:	431a      	orrs	r2, r3
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	699b      	ldr	r3, [r3, #24]
 80067aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80067ae:	431a      	orrs	r2, r3
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	69db      	ldr	r3, [r3, #28]
 80067b4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80067b8:	431a      	orrs	r2, r3
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6a1b      	ldr	r3, [r3, #32]
 80067be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067c2:	ea42 0103 	orr.w	r1, r2, r3
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067ca:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	430a      	orrs	r2, r1
 80067d4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	699b      	ldr	r3, [r3, #24]
 80067da:	0c1b      	lsrs	r3, r3, #16
 80067dc:	f003 0204 	and.w	r2, r3, #4
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067e4:	f003 0310 	and.w	r3, r3, #16
 80067e8:	431a      	orrs	r2, r3
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067ee:	f003 0308 	and.w	r3, r3, #8
 80067f2:	431a      	orrs	r2, r3
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	68db      	ldr	r3, [r3, #12]
 80067f8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80067fc:	ea42 0103 	orr.w	r1, r2, r3
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	430a      	orrs	r2, r1
 800680c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	69da      	ldr	r2, [r3, #28]
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800681c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	2200      	movs	r2, #0
 8006822:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2201      	movs	r2, #1
 8006828:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800682c:	2300      	movs	r3, #0
}
 800682e:	4618      	mov	r0, r3
 8006830:	3710      	adds	r7, #16
 8006832:	46bd      	mov	sp, r7
 8006834:	bd80      	pop	{r7, pc}

08006836 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006836:	b580      	push	{r7, lr}
 8006838:	b082      	sub	sp, #8
 800683a:	af00      	add	r7, sp, #0
 800683c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	2b00      	cmp	r3, #0
 8006842:	d101      	bne.n	8006848 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006844:	2301      	movs	r3, #1
 8006846:	e049      	b.n	80068dc <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800684e:	b2db      	uxtb	r3, r3
 8006850:	2b00      	cmp	r3, #0
 8006852:	d106      	bne.n	8006862 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2200      	movs	r2, #0
 8006858:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800685c:	6878      	ldr	r0, [r7, #4]
 800685e:	f7fb f921 	bl	8001aa4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	2202      	movs	r2, #2
 8006866:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681a      	ldr	r2, [r3, #0]
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	3304      	adds	r3, #4
 8006872:	4619      	mov	r1, r3
 8006874:	4610      	mov	r0, r2
 8006876:	f000 fa6b 	bl	8006d50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	2201      	movs	r2, #1
 800687e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	2201      	movs	r2, #1
 8006886:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	2201      	movs	r2, #1
 800688e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	2201      	movs	r2, #1
 8006896:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	2201      	movs	r2, #1
 800689e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	2201      	movs	r2, #1
 80068a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	2201      	movs	r2, #1
 80068ae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	2201      	movs	r2, #1
 80068b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	2201      	movs	r2, #1
 80068be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	2201      	movs	r2, #1
 80068c6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	2201      	movs	r2, #1
 80068ce:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	2201      	movs	r2, #1
 80068d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80068da:	2300      	movs	r3, #0
}
 80068dc:	4618      	mov	r0, r3
 80068de:	3708      	adds	r7, #8
 80068e0:	46bd      	mov	sp, r7
 80068e2:	bd80      	pop	{r7, pc}

080068e4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80068e4:	b480      	push	{r7}
 80068e6:	b085      	sub	sp, #20
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068f2:	b2db      	uxtb	r3, r3
 80068f4:	2b01      	cmp	r3, #1
 80068f6:	d001      	beq.n	80068fc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80068f8:	2301      	movs	r3, #1
 80068fa:	e03d      	b.n	8006978 <HAL_TIM_Base_Start+0x94>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2202      	movs	r2, #2
 8006900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	4a1e      	ldr	r2, [pc, #120]	; (8006984 <HAL_TIM_Base_Start+0xa0>)
 800690a:	4293      	cmp	r3, r2
 800690c:	d013      	beq.n	8006936 <HAL_TIM_Base_Start+0x52>
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006916:	d00e      	beq.n	8006936 <HAL_TIM_Base_Start+0x52>
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	4a1a      	ldr	r2, [pc, #104]	; (8006988 <HAL_TIM_Base_Start+0xa4>)
 800691e:	4293      	cmp	r3, r2
 8006920:	d009      	beq.n	8006936 <HAL_TIM_Base_Start+0x52>
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	4a19      	ldr	r2, [pc, #100]	; (800698c <HAL_TIM_Base_Start+0xa8>)
 8006928:	4293      	cmp	r3, r2
 800692a:	d004      	beq.n	8006936 <HAL_TIM_Base_Start+0x52>
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	4a17      	ldr	r2, [pc, #92]	; (8006990 <HAL_TIM_Base_Start+0xac>)
 8006932:	4293      	cmp	r3, r2
 8006934:	d115      	bne.n	8006962 <HAL_TIM_Base_Start+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	689a      	ldr	r2, [r3, #8]
 800693c:	4b15      	ldr	r3, [pc, #84]	; (8006994 <HAL_TIM_Base_Start+0xb0>)
 800693e:	4013      	ands	r3, r2
 8006940:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	2b06      	cmp	r3, #6
 8006946:	d015      	beq.n	8006974 <HAL_TIM_Base_Start+0x90>
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800694e:	d011      	beq.n	8006974 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	681a      	ldr	r2, [r3, #0]
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	f042 0201 	orr.w	r2, r2, #1
 800695e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006960:	e008      	b.n	8006974 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	681a      	ldr	r2, [r3, #0]
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	f042 0201 	orr.w	r2, r2, #1
 8006970:	601a      	str	r2, [r3, #0]
 8006972:	e000      	b.n	8006976 <HAL_TIM_Base_Start+0x92>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006974:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006976:	2300      	movs	r3, #0
}
 8006978:	4618      	mov	r0, r3
 800697a:	3714      	adds	r7, #20
 800697c:	46bd      	mov	sp, r7
 800697e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006982:	4770      	bx	lr
 8006984:	40012c00 	.word	0x40012c00
 8006988:	40000400 	.word	0x40000400
 800698c:	40000800 	.word	0x40000800
 8006990:	40014000 	.word	0x40014000
 8006994:	00010007 	.word	0x00010007

08006998 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8006998:	b480      	push	{r7}
 800699a:	b083      	sub	sp, #12
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	6a1a      	ldr	r2, [r3, #32]
 80069a6:	f241 1311 	movw	r3, #4369	; 0x1111
 80069aa:	4013      	ands	r3, r2
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d10f      	bne.n	80069d0 <HAL_TIM_Base_Stop+0x38>
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	6a1a      	ldr	r2, [r3, #32]
 80069b6:	f240 4344 	movw	r3, #1092	; 0x444
 80069ba:	4013      	ands	r3, r2
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d107      	bne.n	80069d0 <HAL_TIM_Base_Stop+0x38>
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	681a      	ldr	r2, [r3, #0]
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	f022 0201 	bic.w	r2, r2, #1
 80069ce:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2201      	movs	r2, #1
 80069d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80069d8:	2300      	movs	r3, #0
}
 80069da:	4618      	mov	r0, r3
 80069dc:	370c      	adds	r7, #12
 80069de:	46bd      	mov	sp, r7
 80069e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e4:	4770      	bx	lr
	...

080069e8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80069e8:	b480      	push	{r7}
 80069ea:	b085      	sub	sp, #20
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069f6:	b2db      	uxtb	r3, r3
 80069f8:	2b01      	cmp	r3, #1
 80069fa:	d001      	beq.n	8006a00 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80069fc:	2301      	movs	r3, #1
 80069fe:	e045      	b.n	8006a8c <HAL_TIM_Base_Start_IT+0xa4>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2202      	movs	r2, #2
 8006a04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	68da      	ldr	r2, [r3, #12]
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	f042 0201 	orr.w	r2, r2, #1
 8006a16:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	4a1e      	ldr	r2, [pc, #120]	; (8006a98 <HAL_TIM_Base_Start_IT+0xb0>)
 8006a1e:	4293      	cmp	r3, r2
 8006a20:	d013      	beq.n	8006a4a <HAL_TIM_Base_Start_IT+0x62>
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a2a:	d00e      	beq.n	8006a4a <HAL_TIM_Base_Start_IT+0x62>
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	4a1a      	ldr	r2, [pc, #104]	; (8006a9c <HAL_TIM_Base_Start_IT+0xb4>)
 8006a32:	4293      	cmp	r3, r2
 8006a34:	d009      	beq.n	8006a4a <HAL_TIM_Base_Start_IT+0x62>
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	4a19      	ldr	r2, [pc, #100]	; (8006aa0 <HAL_TIM_Base_Start_IT+0xb8>)
 8006a3c:	4293      	cmp	r3, r2
 8006a3e:	d004      	beq.n	8006a4a <HAL_TIM_Base_Start_IT+0x62>
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	4a17      	ldr	r2, [pc, #92]	; (8006aa4 <HAL_TIM_Base_Start_IT+0xbc>)
 8006a46:	4293      	cmp	r3, r2
 8006a48:	d115      	bne.n	8006a76 <HAL_TIM_Base_Start_IT+0x8e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	689a      	ldr	r2, [r3, #8]
 8006a50:	4b15      	ldr	r3, [pc, #84]	; (8006aa8 <HAL_TIM_Base_Start_IT+0xc0>)
 8006a52:	4013      	ands	r3, r2
 8006a54:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	2b06      	cmp	r3, #6
 8006a5a:	d015      	beq.n	8006a88 <HAL_TIM_Base_Start_IT+0xa0>
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a62:	d011      	beq.n	8006a88 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	681a      	ldr	r2, [r3, #0]
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f042 0201 	orr.w	r2, r2, #1
 8006a72:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a74:	e008      	b.n	8006a88 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	681a      	ldr	r2, [r3, #0]
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	f042 0201 	orr.w	r2, r2, #1
 8006a84:	601a      	str	r2, [r3, #0]
 8006a86:	e000      	b.n	8006a8a <HAL_TIM_Base_Start_IT+0xa2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a88:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006a8a:	2300      	movs	r3, #0
}
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	3714      	adds	r7, #20
 8006a90:	46bd      	mov	sp, r7
 8006a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a96:	4770      	bx	lr
 8006a98:	40012c00 	.word	0x40012c00
 8006a9c:	40000400 	.word	0x40000400
 8006aa0:	40000800 	.word	0x40000800
 8006aa4:	40014000 	.word	0x40014000
 8006aa8:	00010007 	.word	0x00010007

08006aac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006aac:	b580      	push	{r7, lr}
 8006aae:	b082      	sub	sp, #8
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	691b      	ldr	r3, [r3, #16]
 8006aba:	f003 0302 	and.w	r3, r3, #2
 8006abe:	2b02      	cmp	r3, #2
 8006ac0:	d122      	bne.n	8006b08 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	68db      	ldr	r3, [r3, #12]
 8006ac8:	f003 0302 	and.w	r3, r3, #2
 8006acc:	2b02      	cmp	r3, #2
 8006ace:	d11b      	bne.n	8006b08 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f06f 0202 	mvn.w	r2, #2
 8006ad8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	2201      	movs	r2, #1
 8006ade:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	699b      	ldr	r3, [r3, #24]
 8006ae6:	f003 0303 	and.w	r3, r3, #3
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d003      	beq.n	8006af6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006aee:	6878      	ldr	r0, [r7, #4]
 8006af0:	f000 f90f 	bl	8006d12 <HAL_TIM_IC_CaptureCallback>
 8006af4:	e005      	b.n	8006b02 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006af6:	6878      	ldr	r0, [r7, #4]
 8006af8:	f000 f901 	bl	8006cfe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006afc:	6878      	ldr	r0, [r7, #4]
 8006afe:	f000 f912 	bl	8006d26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	2200      	movs	r2, #0
 8006b06:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	691b      	ldr	r3, [r3, #16]
 8006b0e:	f003 0304 	and.w	r3, r3, #4
 8006b12:	2b04      	cmp	r3, #4
 8006b14:	d122      	bne.n	8006b5c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	68db      	ldr	r3, [r3, #12]
 8006b1c:	f003 0304 	and.w	r3, r3, #4
 8006b20:	2b04      	cmp	r3, #4
 8006b22:	d11b      	bne.n	8006b5c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	f06f 0204 	mvn.w	r2, #4
 8006b2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	2202      	movs	r2, #2
 8006b32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	699b      	ldr	r3, [r3, #24]
 8006b3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d003      	beq.n	8006b4a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006b42:	6878      	ldr	r0, [r7, #4]
 8006b44:	f000 f8e5 	bl	8006d12 <HAL_TIM_IC_CaptureCallback>
 8006b48:	e005      	b.n	8006b56 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b4a:	6878      	ldr	r0, [r7, #4]
 8006b4c:	f000 f8d7 	bl	8006cfe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b50:	6878      	ldr	r0, [r7, #4]
 8006b52:	f000 f8e8 	bl	8006d26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	2200      	movs	r2, #0
 8006b5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	691b      	ldr	r3, [r3, #16]
 8006b62:	f003 0308 	and.w	r3, r3, #8
 8006b66:	2b08      	cmp	r3, #8
 8006b68:	d122      	bne.n	8006bb0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	68db      	ldr	r3, [r3, #12]
 8006b70:	f003 0308 	and.w	r3, r3, #8
 8006b74:	2b08      	cmp	r3, #8
 8006b76:	d11b      	bne.n	8006bb0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	f06f 0208 	mvn.w	r2, #8
 8006b80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	2204      	movs	r2, #4
 8006b86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	69db      	ldr	r3, [r3, #28]
 8006b8e:	f003 0303 	and.w	r3, r3, #3
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d003      	beq.n	8006b9e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006b96:	6878      	ldr	r0, [r7, #4]
 8006b98:	f000 f8bb 	bl	8006d12 <HAL_TIM_IC_CaptureCallback>
 8006b9c:	e005      	b.n	8006baa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b9e:	6878      	ldr	r0, [r7, #4]
 8006ba0:	f000 f8ad 	bl	8006cfe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ba4:	6878      	ldr	r0, [r7, #4]
 8006ba6:	f000 f8be 	bl	8006d26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	2200      	movs	r2, #0
 8006bae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	691b      	ldr	r3, [r3, #16]
 8006bb6:	f003 0310 	and.w	r3, r3, #16
 8006bba:	2b10      	cmp	r3, #16
 8006bbc:	d122      	bne.n	8006c04 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	68db      	ldr	r3, [r3, #12]
 8006bc4:	f003 0310 	and.w	r3, r3, #16
 8006bc8:	2b10      	cmp	r3, #16
 8006bca:	d11b      	bne.n	8006c04 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	f06f 0210 	mvn.w	r2, #16
 8006bd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	2208      	movs	r2, #8
 8006bda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	69db      	ldr	r3, [r3, #28]
 8006be2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d003      	beq.n	8006bf2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006bea:	6878      	ldr	r0, [r7, #4]
 8006bec:	f000 f891 	bl	8006d12 <HAL_TIM_IC_CaptureCallback>
 8006bf0:	e005      	b.n	8006bfe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006bf2:	6878      	ldr	r0, [r7, #4]
 8006bf4:	f000 f883 	bl	8006cfe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006bf8:	6878      	ldr	r0, [r7, #4]
 8006bfa:	f000 f894 	bl	8006d26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	2200      	movs	r2, #0
 8006c02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	691b      	ldr	r3, [r3, #16]
 8006c0a:	f003 0301 	and.w	r3, r3, #1
 8006c0e:	2b01      	cmp	r3, #1
 8006c10:	d10e      	bne.n	8006c30 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	68db      	ldr	r3, [r3, #12]
 8006c18:	f003 0301 	and.w	r3, r3, #1
 8006c1c:	2b01      	cmp	r3, #1
 8006c1e:	d107      	bne.n	8006c30 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	f06f 0201 	mvn.w	r2, #1
 8006c28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006c2a:	6878      	ldr	r0, [r7, #4]
 8006c2c:	f000 f85d 	bl	8006cea <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	691b      	ldr	r3, [r3, #16]
 8006c36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c3a:	2b80      	cmp	r3, #128	; 0x80
 8006c3c:	d10e      	bne.n	8006c5c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	68db      	ldr	r3, [r3, #12]
 8006c44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c48:	2b80      	cmp	r3, #128	; 0x80
 8006c4a:	d107      	bne.n	8006c5c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006c54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006c56:	6878      	ldr	r0, [r7, #4]
 8006c58:	f000 f97a 	bl	8006f50 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	691b      	ldr	r3, [r3, #16]
 8006c62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c6a:	d10e      	bne.n	8006c8a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	68db      	ldr	r3, [r3, #12]
 8006c72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c76:	2b80      	cmp	r3, #128	; 0x80
 8006c78:	d107      	bne.n	8006c8a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006c82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006c84:	6878      	ldr	r0, [r7, #4]
 8006c86:	f000 f96d 	bl	8006f64 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	691b      	ldr	r3, [r3, #16]
 8006c90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c94:	2b40      	cmp	r3, #64	; 0x40
 8006c96:	d10e      	bne.n	8006cb6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	68db      	ldr	r3, [r3, #12]
 8006c9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ca2:	2b40      	cmp	r3, #64	; 0x40
 8006ca4:	d107      	bne.n	8006cb6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006cae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006cb0:	6878      	ldr	r0, [r7, #4]
 8006cb2:	f000 f842 	bl	8006d3a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	691b      	ldr	r3, [r3, #16]
 8006cbc:	f003 0320 	and.w	r3, r3, #32
 8006cc0:	2b20      	cmp	r3, #32
 8006cc2:	d10e      	bne.n	8006ce2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	68db      	ldr	r3, [r3, #12]
 8006cca:	f003 0320 	and.w	r3, r3, #32
 8006cce:	2b20      	cmp	r3, #32
 8006cd0:	d107      	bne.n	8006ce2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	f06f 0220 	mvn.w	r2, #32
 8006cda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006cdc:	6878      	ldr	r0, [r7, #4]
 8006cde:	f000 f92d 	bl	8006f3c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006ce2:	bf00      	nop
 8006ce4:	3708      	adds	r7, #8
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	bd80      	pop	{r7, pc}

08006cea <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006cea:	b480      	push	{r7}
 8006cec:	b083      	sub	sp, #12
 8006cee:	af00      	add	r7, sp, #0
 8006cf0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006cf2:	bf00      	nop
 8006cf4:	370c      	adds	r7, #12
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfc:	4770      	bx	lr

08006cfe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006cfe:	b480      	push	{r7}
 8006d00:	b083      	sub	sp, #12
 8006d02:	af00      	add	r7, sp, #0
 8006d04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006d06:	bf00      	nop
 8006d08:	370c      	adds	r7, #12
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d10:	4770      	bx	lr

08006d12 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006d12:	b480      	push	{r7}
 8006d14:	b083      	sub	sp, #12
 8006d16:	af00      	add	r7, sp, #0
 8006d18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006d1a:	bf00      	nop
 8006d1c:	370c      	adds	r7, #12
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d24:	4770      	bx	lr

08006d26 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006d26:	b480      	push	{r7}
 8006d28:	b083      	sub	sp, #12
 8006d2a:	af00      	add	r7, sp, #0
 8006d2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006d2e:	bf00      	nop
 8006d30:	370c      	adds	r7, #12
 8006d32:	46bd      	mov	sp, r7
 8006d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d38:	4770      	bx	lr

08006d3a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006d3a:	b480      	push	{r7}
 8006d3c:	b083      	sub	sp, #12
 8006d3e:	af00      	add	r7, sp, #0
 8006d40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006d42:	bf00      	nop
 8006d44:	370c      	adds	r7, #12
 8006d46:	46bd      	mov	sp, r7
 8006d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4c:	4770      	bx	lr
	...

08006d50 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006d50:	b480      	push	{r7}
 8006d52:	b085      	sub	sp, #20
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	6078      	str	r0, [r7, #4]
 8006d58:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	4a36      	ldr	r2, [pc, #216]	; (8006e3c <TIM_Base_SetConfig+0xec>)
 8006d64:	4293      	cmp	r3, r2
 8006d66:	d00b      	beq.n	8006d80 <TIM_Base_SetConfig+0x30>
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d6e:	d007      	beq.n	8006d80 <TIM_Base_SetConfig+0x30>
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	4a33      	ldr	r2, [pc, #204]	; (8006e40 <TIM_Base_SetConfig+0xf0>)
 8006d74:	4293      	cmp	r3, r2
 8006d76:	d003      	beq.n	8006d80 <TIM_Base_SetConfig+0x30>
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	4a32      	ldr	r2, [pc, #200]	; (8006e44 <TIM_Base_SetConfig+0xf4>)
 8006d7c:	4293      	cmp	r3, r2
 8006d7e:	d108      	bne.n	8006d92 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d86:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006d88:	683b      	ldr	r3, [r7, #0]
 8006d8a:	685b      	ldr	r3, [r3, #4]
 8006d8c:	68fa      	ldr	r2, [r7, #12]
 8006d8e:	4313      	orrs	r3, r2
 8006d90:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	4a29      	ldr	r2, [pc, #164]	; (8006e3c <TIM_Base_SetConfig+0xec>)
 8006d96:	4293      	cmp	r3, r2
 8006d98:	d017      	beq.n	8006dca <TIM_Base_SetConfig+0x7a>
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006da0:	d013      	beq.n	8006dca <TIM_Base_SetConfig+0x7a>
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	4a26      	ldr	r2, [pc, #152]	; (8006e40 <TIM_Base_SetConfig+0xf0>)
 8006da6:	4293      	cmp	r3, r2
 8006da8:	d00f      	beq.n	8006dca <TIM_Base_SetConfig+0x7a>
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	4a25      	ldr	r2, [pc, #148]	; (8006e44 <TIM_Base_SetConfig+0xf4>)
 8006dae:	4293      	cmp	r3, r2
 8006db0:	d00b      	beq.n	8006dca <TIM_Base_SetConfig+0x7a>
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	4a24      	ldr	r2, [pc, #144]	; (8006e48 <TIM_Base_SetConfig+0xf8>)
 8006db6:	4293      	cmp	r3, r2
 8006db8:	d007      	beq.n	8006dca <TIM_Base_SetConfig+0x7a>
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	4a23      	ldr	r2, [pc, #140]	; (8006e4c <TIM_Base_SetConfig+0xfc>)
 8006dbe:	4293      	cmp	r3, r2
 8006dc0:	d003      	beq.n	8006dca <TIM_Base_SetConfig+0x7a>
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	4a22      	ldr	r2, [pc, #136]	; (8006e50 <TIM_Base_SetConfig+0x100>)
 8006dc6:	4293      	cmp	r3, r2
 8006dc8:	d108      	bne.n	8006ddc <TIM_Base_SetConfig+0x8c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006dd0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006dd2:	683b      	ldr	r3, [r7, #0]
 8006dd4:	68db      	ldr	r3, [r3, #12]
 8006dd6:	68fa      	ldr	r2, [r7, #12]
 8006dd8:	4313      	orrs	r3, r2
 8006dda:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006de2:	683b      	ldr	r3, [r7, #0]
 8006de4:	695b      	ldr	r3, [r3, #20]
 8006de6:	4313      	orrs	r3, r2
 8006de8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	68fa      	ldr	r2, [r7, #12]
 8006dee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006df0:	683b      	ldr	r3, [r7, #0]
 8006df2:	689a      	ldr	r2, [r3, #8]
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006df8:	683b      	ldr	r3, [r7, #0]
 8006dfa:	681a      	ldr	r2, [r3, #0]
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	4a0e      	ldr	r2, [pc, #56]	; (8006e3c <TIM_Base_SetConfig+0xec>)
 8006e04:	4293      	cmp	r3, r2
 8006e06:	d00b      	beq.n	8006e20 <TIM_Base_SetConfig+0xd0>
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	4a0f      	ldr	r2, [pc, #60]	; (8006e48 <TIM_Base_SetConfig+0xf8>)
 8006e0c:	4293      	cmp	r3, r2
 8006e0e:	d007      	beq.n	8006e20 <TIM_Base_SetConfig+0xd0>
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	4a0e      	ldr	r2, [pc, #56]	; (8006e4c <TIM_Base_SetConfig+0xfc>)
 8006e14:	4293      	cmp	r3, r2
 8006e16:	d003      	beq.n	8006e20 <TIM_Base_SetConfig+0xd0>
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	4a0d      	ldr	r2, [pc, #52]	; (8006e50 <TIM_Base_SetConfig+0x100>)
 8006e1c:	4293      	cmp	r3, r2
 8006e1e:	d103      	bne.n	8006e28 <TIM_Base_SetConfig+0xd8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006e20:	683b      	ldr	r3, [r7, #0]
 8006e22:	691a      	ldr	r2, [r3, #16]
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	2201      	movs	r2, #1
 8006e2c:	615a      	str	r2, [r3, #20]
}
 8006e2e:	bf00      	nop
 8006e30:	3714      	adds	r7, #20
 8006e32:	46bd      	mov	sp, r7
 8006e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e38:	4770      	bx	lr
 8006e3a:	bf00      	nop
 8006e3c:	40012c00 	.word	0x40012c00
 8006e40:	40000400 	.word	0x40000400
 8006e44:	40000800 	.word	0x40000800
 8006e48:	40014000 	.word	0x40014000
 8006e4c:	40014400 	.word	0x40014400
 8006e50:	40014800 	.word	0x40014800

08006e54 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006e54:	b480      	push	{r7}
 8006e56:	b085      	sub	sp, #20
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
 8006e5c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e64:	2b01      	cmp	r3, #1
 8006e66:	d101      	bne.n	8006e6c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006e68:	2302      	movs	r3, #2
 8006e6a:	e059      	b.n	8006f20 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2201      	movs	r2, #1
 8006e70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2202      	movs	r2, #2
 8006e78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	685b      	ldr	r3, [r3, #4]
 8006e82:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	689b      	ldr	r3, [r3, #8]
 8006e8a:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	4a26      	ldr	r2, [pc, #152]	; (8006f2c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006e92:	4293      	cmp	r3, r2
 8006e94:	d108      	bne.n	8006ea8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006e9c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006e9e:	683b      	ldr	r3, [r7, #0]
 8006ea0:	685b      	ldr	r3, [r3, #4]
 8006ea2:	68fa      	ldr	r2, [r7, #12]
 8006ea4:	4313      	orrs	r3, r2
 8006ea6:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006eae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006eb0:	683b      	ldr	r3, [r7, #0]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	68fa      	ldr	r2, [r7, #12]
 8006eb6:	4313      	orrs	r3, r2
 8006eb8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	68fa      	ldr	r2, [r7, #12]
 8006ec0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	4a19      	ldr	r2, [pc, #100]	; (8006f2c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006ec8:	4293      	cmp	r3, r2
 8006eca:	d013      	beq.n	8006ef4 <HAL_TIMEx_MasterConfigSynchronization+0xa0>
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ed4:	d00e      	beq.n	8006ef4 <HAL_TIMEx_MasterConfigSynchronization+0xa0>
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	4a15      	ldr	r2, [pc, #84]	; (8006f30 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006edc:	4293      	cmp	r3, r2
 8006ede:	d009      	beq.n	8006ef4 <HAL_TIMEx_MasterConfigSynchronization+0xa0>
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	4a13      	ldr	r2, [pc, #76]	; (8006f34 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006ee6:	4293      	cmp	r3, r2
 8006ee8:	d004      	beq.n	8006ef4 <HAL_TIMEx_MasterConfigSynchronization+0xa0>
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	4a12      	ldr	r2, [pc, #72]	; (8006f38 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006ef0:	4293      	cmp	r3, r2
 8006ef2:	d10c      	bne.n	8006f0e <HAL_TIMEx_MasterConfigSynchronization+0xba>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006ef4:	68bb      	ldr	r3, [r7, #8]
 8006ef6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006efa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006efc:	683b      	ldr	r3, [r7, #0]
 8006efe:	689b      	ldr	r3, [r3, #8]
 8006f00:	68ba      	ldr	r2, [r7, #8]
 8006f02:	4313      	orrs	r3, r2
 8006f04:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	68ba      	ldr	r2, [r7, #8]
 8006f0c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	2201      	movs	r2, #1
 8006f12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	2200      	movs	r2, #0
 8006f1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006f1e:	2300      	movs	r3, #0
}
 8006f20:	4618      	mov	r0, r3
 8006f22:	3714      	adds	r7, #20
 8006f24:	46bd      	mov	sp, r7
 8006f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2a:	4770      	bx	lr
 8006f2c:	40012c00 	.word	0x40012c00
 8006f30:	40000400 	.word	0x40000400
 8006f34:	40000800 	.word	0x40000800
 8006f38:	40014000 	.word	0x40014000

08006f3c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006f3c:	b480      	push	{r7}
 8006f3e:	b083      	sub	sp, #12
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006f44:	bf00      	nop
 8006f46:	370c      	adds	r7, #12
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4e:	4770      	bx	lr

08006f50 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006f50:	b480      	push	{r7}
 8006f52:	b083      	sub	sp, #12
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006f58:	bf00      	nop
 8006f5a:	370c      	adds	r7, #12
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f62:	4770      	bx	lr

08006f64 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006f64:	b480      	push	{r7}
 8006f66:	b083      	sub	sp, #12
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006f6c:	bf00      	nop
 8006f6e:	370c      	adds	r7, #12
 8006f70:	46bd      	mov	sp, r7
 8006f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f76:	4770      	bx	lr

08006f78 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006f78:	b580      	push	{r7, lr}
 8006f7a:	b082      	sub	sp, #8
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d101      	bne.n	8006f8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006f86:	2301      	movs	r3, #1
 8006f88:	e040      	b.n	800700c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d106      	bne.n	8006fa0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	2200      	movs	r2, #0
 8006f96:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006f9a:	6878      	ldr	r0, [r7, #4]
 8006f9c:	f7fa fdd0 	bl	8001b40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2224      	movs	r2, #36	; 0x24
 8006fa4:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	681a      	ldr	r2, [r3, #0]
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	f022 0201 	bic.w	r2, r2, #1
 8006fb4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006fb6:	6878      	ldr	r0, [r7, #4]
 8006fb8:	f000 f8b6 	bl	8007128 <UART_SetConfig>
 8006fbc:	4603      	mov	r3, r0
 8006fbe:	2b01      	cmp	r3, #1
 8006fc0:	d101      	bne.n	8006fc6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006fc2:	2301      	movs	r3, #1
 8006fc4:	e022      	b.n	800700c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d002      	beq.n	8006fd4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006fce:	6878      	ldr	r0, [r7, #4]
 8006fd0:	f000 fa7e 	bl	80074d0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	685a      	ldr	r2, [r3, #4]
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006fe2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	689a      	ldr	r2, [r3, #8]
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006ff2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	681a      	ldr	r2, [r3, #0]
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	f042 0201 	orr.w	r2, r2, #1
 8007002:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007004:	6878      	ldr	r0, [r7, #4]
 8007006:	f000 fb05 	bl	8007614 <UART_CheckIdleState>
 800700a:	4603      	mov	r3, r0
}
 800700c:	4618      	mov	r0, r3
 800700e:	3708      	adds	r7, #8
 8007010:	46bd      	mov	sp, r7
 8007012:	bd80      	pop	{r7, pc}

08007014 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007014:	b580      	push	{r7, lr}
 8007016:	b08a      	sub	sp, #40	; 0x28
 8007018:	af02      	add	r7, sp, #8
 800701a:	60f8      	str	r0, [r7, #12]
 800701c:	60b9      	str	r1, [r7, #8]
 800701e:	603b      	str	r3, [r7, #0]
 8007020:	4613      	mov	r3, r2
 8007022:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007028:	2b20      	cmp	r3, #32
 800702a:	d178      	bne.n	800711e <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 800702c:	68bb      	ldr	r3, [r7, #8]
 800702e:	2b00      	cmp	r3, #0
 8007030:	d002      	beq.n	8007038 <HAL_UART_Transmit+0x24>
 8007032:	88fb      	ldrh	r3, [r7, #6]
 8007034:	2b00      	cmp	r3, #0
 8007036:	d101      	bne.n	800703c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8007038:	2301      	movs	r3, #1
 800703a:	e071      	b.n	8007120 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	2200      	movs	r2, #0
 8007040:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	2221      	movs	r2, #33	; 0x21
 8007048:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800704a:	f7fc fa2d 	bl	80034a8 <HAL_GetTick>
 800704e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	88fa      	ldrh	r2, [r7, #6]
 8007054:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	88fa      	ldrh	r2, [r7, #6]
 800705c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	689b      	ldr	r3, [r3, #8]
 8007064:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007068:	d108      	bne.n	800707c <HAL_UART_Transmit+0x68>
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	691b      	ldr	r3, [r3, #16]
 800706e:	2b00      	cmp	r3, #0
 8007070:	d104      	bne.n	800707c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8007072:	2300      	movs	r3, #0
 8007074:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007076:	68bb      	ldr	r3, [r7, #8]
 8007078:	61bb      	str	r3, [r7, #24]
 800707a:	e003      	b.n	8007084 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800707c:	68bb      	ldr	r3, [r7, #8]
 800707e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007080:	2300      	movs	r3, #0
 8007082:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007084:	e030      	b.n	80070e8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007086:	683b      	ldr	r3, [r7, #0]
 8007088:	9300      	str	r3, [sp, #0]
 800708a:	697b      	ldr	r3, [r7, #20]
 800708c:	2200      	movs	r2, #0
 800708e:	2180      	movs	r1, #128	; 0x80
 8007090:	68f8      	ldr	r0, [r7, #12]
 8007092:	f000 fb67 	bl	8007764 <UART_WaitOnFlagUntilTimeout>
 8007096:	4603      	mov	r3, r0
 8007098:	2b00      	cmp	r3, #0
 800709a:	d004      	beq.n	80070a6 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	2220      	movs	r2, #32
 80070a0:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80070a2:	2303      	movs	r3, #3
 80070a4:	e03c      	b.n	8007120 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 80070a6:	69fb      	ldr	r3, [r7, #28]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d10b      	bne.n	80070c4 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80070ac:	69bb      	ldr	r3, [r7, #24]
 80070ae:	881a      	ldrh	r2, [r3, #0]
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80070b8:	b292      	uxth	r2, r2
 80070ba:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80070bc:	69bb      	ldr	r3, [r7, #24]
 80070be:	3302      	adds	r3, #2
 80070c0:	61bb      	str	r3, [r7, #24]
 80070c2:	e008      	b.n	80070d6 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80070c4:	69fb      	ldr	r3, [r7, #28]
 80070c6:	781a      	ldrb	r2, [r3, #0]
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	b292      	uxth	r2, r2
 80070ce:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80070d0:	69fb      	ldr	r3, [r7, #28]
 80070d2:	3301      	adds	r3, #1
 80070d4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80070dc:	b29b      	uxth	r3, r3
 80070de:	3b01      	subs	r3, #1
 80070e0:	b29a      	uxth	r2, r3
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80070ee:	b29b      	uxth	r3, r3
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d1c8      	bne.n	8007086 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80070f4:	683b      	ldr	r3, [r7, #0]
 80070f6:	9300      	str	r3, [sp, #0]
 80070f8:	697b      	ldr	r3, [r7, #20]
 80070fa:	2200      	movs	r2, #0
 80070fc:	2140      	movs	r1, #64	; 0x40
 80070fe:	68f8      	ldr	r0, [r7, #12]
 8007100:	f000 fb30 	bl	8007764 <UART_WaitOnFlagUntilTimeout>
 8007104:	4603      	mov	r3, r0
 8007106:	2b00      	cmp	r3, #0
 8007108:	d004      	beq.n	8007114 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	2220      	movs	r2, #32
 800710e:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8007110:	2303      	movs	r3, #3
 8007112:	e005      	b.n	8007120 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	2220      	movs	r2, #32
 8007118:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800711a:	2300      	movs	r3, #0
 800711c:	e000      	b.n	8007120 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800711e:	2302      	movs	r3, #2
  }
}
 8007120:	4618      	mov	r0, r3
 8007122:	3720      	adds	r7, #32
 8007124:	46bd      	mov	sp, r7
 8007126:	bd80      	pop	{r7, pc}

08007128 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007128:	b580      	push	{r7, lr}
 800712a:	b088      	sub	sp, #32
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007130:	2300      	movs	r3, #0
 8007132:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	689a      	ldr	r2, [r3, #8]
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	691b      	ldr	r3, [r3, #16]
 800713c:	431a      	orrs	r2, r3
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	695b      	ldr	r3, [r3, #20]
 8007142:	431a      	orrs	r2, r3
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	69db      	ldr	r3, [r3, #28]
 8007148:	4313      	orrs	r3, r2
 800714a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8007156:	f023 030c 	bic.w	r3, r3, #12
 800715a:	687a      	ldr	r2, [r7, #4]
 800715c:	6812      	ldr	r2, [r2, #0]
 800715e:	6979      	ldr	r1, [r7, #20]
 8007160:	430b      	orrs	r3, r1
 8007162:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	685b      	ldr	r3, [r3, #4]
 800716a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	68da      	ldr	r2, [r3, #12]
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	430a      	orrs	r2, r1
 8007178:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	699b      	ldr	r3, [r3, #24]
 800717e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	6a1b      	ldr	r3, [r3, #32]
 8007184:	697a      	ldr	r2, [r7, #20]
 8007186:	4313      	orrs	r3, r2
 8007188:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	689b      	ldr	r3, [r3, #8]
 8007190:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	697a      	ldr	r2, [r7, #20]
 800719a:	430a      	orrs	r2, r1
 800719c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	4aa7      	ldr	r2, [pc, #668]	; (8007440 <UART_SetConfig+0x318>)
 80071a4:	4293      	cmp	r3, r2
 80071a6:	d120      	bne.n	80071ea <UART_SetConfig+0xc2>
 80071a8:	4ba6      	ldr	r3, [pc, #664]	; (8007444 <UART_SetConfig+0x31c>)
 80071aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071ac:	f003 0303 	and.w	r3, r3, #3
 80071b0:	2b03      	cmp	r3, #3
 80071b2:	d817      	bhi.n	80071e4 <UART_SetConfig+0xbc>
 80071b4:	a201      	add	r2, pc, #4	; (adr r2, 80071bc <UART_SetConfig+0x94>)
 80071b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071ba:	bf00      	nop
 80071bc:	080071cd 	.word	0x080071cd
 80071c0:	080071d9 	.word	0x080071d9
 80071c4:	080071df 	.word	0x080071df
 80071c8:	080071d3 	.word	0x080071d3
 80071cc:	2301      	movs	r3, #1
 80071ce:	77fb      	strb	r3, [r7, #31]
 80071d0:	e0b5      	b.n	800733e <UART_SetConfig+0x216>
 80071d2:	2302      	movs	r3, #2
 80071d4:	77fb      	strb	r3, [r7, #31]
 80071d6:	e0b2      	b.n	800733e <UART_SetConfig+0x216>
 80071d8:	2304      	movs	r3, #4
 80071da:	77fb      	strb	r3, [r7, #31]
 80071dc:	e0af      	b.n	800733e <UART_SetConfig+0x216>
 80071de:	2308      	movs	r3, #8
 80071e0:	77fb      	strb	r3, [r7, #31]
 80071e2:	e0ac      	b.n	800733e <UART_SetConfig+0x216>
 80071e4:	2310      	movs	r3, #16
 80071e6:	77fb      	strb	r3, [r7, #31]
 80071e8:	e0a9      	b.n	800733e <UART_SetConfig+0x216>
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	4a96      	ldr	r2, [pc, #600]	; (8007448 <UART_SetConfig+0x320>)
 80071f0:	4293      	cmp	r3, r2
 80071f2:	d124      	bne.n	800723e <UART_SetConfig+0x116>
 80071f4:	4b93      	ldr	r3, [pc, #588]	; (8007444 <UART_SetConfig+0x31c>)
 80071f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071f8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80071fc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007200:	d011      	beq.n	8007226 <UART_SetConfig+0xfe>
 8007202:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007206:	d817      	bhi.n	8007238 <UART_SetConfig+0x110>
 8007208:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800720c:	d011      	beq.n	8007232 <UART_SetConfig+0x10a>
 800720e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007212:	d811      	bhi.n	8007238 <UART_SetConfig+0x110>
 8007214:	2b00      	cmp	r3, #0
 8007216:	d003      	beq.n	8007220 <UART_SetConfig+0xf8>
 8007218:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800721c:	d006      	beq.n	800722c <UART_SetConfig+0x104>
 800721e:	e00b      	b.n	8007238 <UART_SetConfig+0x110>
 8007220:	2300      	movs	r3, #0
 8007222:	77fb      	strb	r3, [r7, #31]
 8007224:	e08b      	b.n	800733e <UART_SetConfig+0x216>
 8007226:	2302      	movs	r3, #2
 8007228:	77fb      	strb	r3, [r7, #31]
 800722a:	e088      	b.n	800733e <UART_SetConfig+0x216>
 800722c:	2304      	movs	r3, #4
 800722e:	77fb      	strb	r3, [r7, #31]
 8007230:	e085      	b.n	800733e <UART_SetConfig+0x216>
 8007232:	2308      	movs	r3, #8
 8007234:	77fb      	strb	r3, [r7, #31]
 8007236:	e082      	b.n	800733e <UART_SetConfig+0x216>
 8007238:	2310      	movs	r3, #16
 800723a:	77fb      	strb	r3, [r7, #31]
 800723c:	e07f      	b.n	800733e <UART_SetConfig+0x216>
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	4a82      	ldr	r2, [pc, #520]	; (800744c <UART_SetConfig+0x324>)
 8007244:	4293      	cmp	r3, r2
 8007246:	d124      	bne.n	8007292 <UART_SetConfig+0x16a>
 8007248:	4b7e      	ldr	r3, [pc, #504]	; (8007444 <UART_SetConfig+0x31c>)
 800724a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800724c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8007250:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8007254:	d011      	beq.n	800727a <UART_SetConfig+0x152>
 8007256:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800725a:	d817      	bhi.n	800728c <UART_SetConfig+0x164>
 800725c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007260:	d011      	beq.n	8007286 <UART_SetConfig+0x15e>
 8007262:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007266:	d811      	bhi.n	800728c <UART_SetConfig+0x164>
 8007268:	2b00      	cmp	r3, #0
 800726a:	d003      	beq.n	8007274 <UART_SetConfig+0x14c>
 800726c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007270:	d006      	beq.n	8007280 <UART_SetConfig+0x158>
 8007272:	e00b      	b.n	800728c <UART_SetConfig+0x164>
 8007274:	2300      	movs	r3, #0
 8007276:	77fb      	strb	r3, [r7, #31]
 8007278:	e061      	b.n	800733e <UART_SetConfig+0x216>
 800727a:	2302      	movs	r3, #2
 800727c:	77fb      	strb	r3, [r7, #31]
 800727e:	e05e      	b.n	800733e <UART_SetConfig+0x216>
 8007280:	2304      	movs	r3, #4
 8007282:	77fb      	strb	r3, [r7, #31]
 8007284:	e05b      	b.n	800733e <UART_SetConfig+0x216>
 8007286:	2308      	movs	r3, #8
 8007288:	77fb      	strb	r3, [r7, #31]
 800728a:	e058      	b.n	800733e <UART_SetConfig+0x216>
 800728c:	2310      	movs	r3, #16
 800728e:	77fb      	strb	r3, [r7, #31]
 8007290:	e055      	b.n	800733e <UART_SetConfig+0x216>
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	4a6e      	ldr	r2, [pc, #440]	; (8007450 <UART_SetConfig+0x328>)
 8007298:	4293      	cmp	r3, r2
 800729a:	d124      	bne.n	80072e6 <UART_SetConfig+0x1be>
 800729c:	4b69      	ldr	r3, [pc, #420]	; (8007444 <UART_SetConfig+0x31c>)
 800729e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072a0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80072a4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80072a8:	d011      	beq.n	80072ce <UART_SetConfig+0x1a6>
 80072aa:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80072ae:	d817      	bhi.n	80072e0 <UART_SetConfig+0x1b8>
 80072b0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80072b4:	d011      	beq.n	80072da <UART_SetConfig+0x1b2>
 80072b6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80072ba:	d811      	bhi.n	80072e0 <UART_SetConfig+0x1b8>
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d003      	beq.n	80072c8 <UART_SetConfig+0x1a0>
 80072c0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80072c4:	d006      	beq.n	80072d4 <UART_SetConfig+0x1ac>
 80072c6:	e00b      	b.n	80072e0 <UART_SetConfig+0x1b8>
 80072c8:	2300      	movs	r3, #0
 80072ca:	77fb      	strb	r3, [r7, #31]
 80072cc:	e037      	b.n	800733e <UART_SetConfig+0x216>
 80072ce:	2302      	movs	r3, #2
 80072d0:	77fb      	strb	r3, [r7, #31]
 80072d2:	e034      	b.n	800733e <UART_SetConfig+0x216>
 80072d4:	2304      	movs	r3, #4
 80072d6:	77fb      	strb	r3, [r7, #31]
 80072d8:	e031      	b.n	800733e <UART_SetConfig+0x216>
 80072da:	2308      	movs	r3, #8
 80072dc:	77fb      	strb	r3, [r7, #31]
 80072de:	e02e      	b.n	800733e <UART_SetConfig+0x216>
 80072e0:	2310      	movs	r3, #16
 80072e2:	77fb      	strb	r3, [r7, #31]
 80072e4:	e02b      	b.n	800733e <UART_SetConfig+0x216>
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	4a5a      	ldr	r2, [pc, #360]	; (8007454 <UART_SetConfig+0x32c>)
 80072ec:	4293      	cmp	r3, r2
 80072ee:	d124      	bne.n	800733a <UART_SetConfig+0x212>
 80072f0:	4b54      	ldr	r3, [pc, #336]	; (8007444 <UART_SetConfig+0x31c>)
 80072f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072f4:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80072f8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80072fc:	d011      	beq.n	8007322 <UART_SetConfig+0x1fa>
 80072fe:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007302:	d817      	bhi.n	8007334 <UART_SetConfig+0x20c>
 8007304:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007308:	d011      	beq.n	800732e <UART_SetConfig+0x206>
 800730a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800730e:	d811      	bhi.n	8007334 <UART_SetConfig+0x20c>
 8007310:	2b00      	cmp	r3, #0
 8007312:	d003      	beq.n	800731c <UART_SetConfig+0x1f4>
 8007314:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007318:	d006      	beq.n	8007328 <UART_SetConfig+0x200>
 800731a:	e00b      	b.n	8007334 <UART_SetConfig+0x20c>
 800731c:	2300      	movs	r3, #0
 800731e:	77fb      	strb	r3, [r7, #31]
 8007320:	e00d      	b.n	800733e <UART_SetConfig+0x216>
 8007322:	2302      	movs	r3, #2
 8007324:	77fb      	strb	r3, [r7, #31]
 8007326:	e00a      	b.n	800733e <UART_SetConfig+0x216>
 8007328:	2304      	movs	r3, #4
 800732a:	77fb      	strb	r3, [r7, #31]
 800732c:	e007      	b.n	800733e <UART_SetConfig+0x216>
 800732e:	2308      	movs	r3, #8
 8007330:	77fb      	strb	r3, [r7, #31]
 8007332:	e004      	b.n	800733e <UART_SetConfig+0x216>
 8007334:	2310      	movs	r3, #16
 8007336:	77fb      	strb	r3, [r7, #31]
 8007338:	e001      	b.n	800733e <UART_SetConfig+0x216>
 800733a:	2310      	movs	r3, #16
 800733c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	69db      	ldr	r3, [r3, #28]
 8007342:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007346:	d15b      	bne.n	8007400 <UART_SetConfig+0x2d8>
  {
    switch (clocksource)
 8007348:	7ffb      	ldrb	r3, [r7, #31]
 800734a:	2b08      	cmp	r3, #8
 800734c:	d827      	bhi.n	800739e <UART_SetConfig+0x276>
 800734e:	a201      	add	r2, pc, #4	; (adr r2, 8007354 <UART_SetConfig+0x22c>)
 8007350:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007354:	08007379 	.word	0x08007379
 8007358:	08007381 	.word	0x08007381
 800735c:	08007389 	.word	0x08007389
 8007360:	0800739f 	.word	0x0800739f
 8007364:	0800738f 	.word	0x0800738f
 8007368:	0800739f 	.word	0x0800739f
 800736c:	0800739f 	.word	0x0800739f
 8007370:	0800739f 	.word	0x0800739f
 8007374:	08007397 	.word	0x08007397
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007378:	f7fe ffdc 	bl	8006334 <HAL_RCC_GetPCLK1Freq>
 800737c:	61b8      	str	r0, [r7, #24]
        break;
 800737e:	e013      	b.n	80073a8 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007380:	f7fe fffa 	bl	8006378 <HAL_RCC_GetPCLK2Freq>
 8007384:	61b8      	str	r0, [r7, #24]
        break;
 8007386:	e00f      	b.n	80073a8 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007388:	4b33      	ldr	r3, [pc, #204]	; (8007458 <UART_SetConfig+0x330>)
 800738a:	61bb      	str	r3, [r7, #24]
        break;
 800738c:	e00c      	b.n	80073a8 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800738e:	f7fe ff5b 	bl	8006248 <HAL_RCC_GetSysClockFreq>
 8007392:	61b8      	str	r0, [r7, #24]
        break;
 8007394:	e008      	b.n	80073a8 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007396:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800739a:	61bb      	str	r3, [r7, #24]
        break;
 800739c:	e004      	b.n	80073a8 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 800739e:	2300      	movs	r3, #0
 80073a0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80073a2:	2301      	movs	r3, #1
 80073a4:	77bb      	strb	r3, [r7, #30]
        break;
 80073a6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80073a8:	69bb      	ldr	r3, [r7, #24]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	f000 8082 	beq.w	80074b4 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80073b0:	69bb      	ldr	r3, [r7, #24]
 80073b2:	005a      	lsls	r2, r3, #1
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	685b      	ldr	r3, [r3, #4]
 80073b8:	085b      	lsrs	r3, r3, #1
 80073ba:	441a      	add	r2, r3
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	685b      	ldr	r3, [r3, #4]
 80073c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80073c4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80073c6:	693b      	ldr	r3, [r7, #16]
 80073c8:	2b0f      	cmp	r3, #15
 80073ca:	d916      	bls.n	80073fa <UART_SetConfig+0x2d2>
 80073cc:	693b      	ldr	r3, [r7, #16]
 80073ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80073d2:	d212      	bcs.n	80073fa <UART_SetConfig+0x2d2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80073d4:	693b      	ldr	r3, [r7, #16]
 80073d6:	b29b      	uxth	r3, r3
 80073d8:	f023 030f 	bic.w	r3, r3, #15
 80073dc:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80073de:	693b      	ldr	r3, [r7, #16]
 80073e0:	085b      	lsrs	r3, r3, #1
 80073e2:	b29b      	uxth	r3, r3
 80073e4:	f003 0307 	and.w	r3, r3, #7
 80073e8:	b29a      	uxth	r2, r3
 80073ea:	89fb      	ldrh	r3, [r7, #14]
 80073ec:	4313      	orrs	r3, r2
 80073ee:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	89fa      	ldrh	r2, [r7, #14]
 80073f6:	60da      	str	r2, [r3, #12]
 80073f8:	e05c      	b.n	80074b4 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80073fa:	2301      	movs	r3, #1
 80073fc:	77bb      	strb	r3, [r7, #30]
 80073fe:	e059      	b.n	80074b4 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007400:	7ffb      	ldrb	r3, [r7, #31]
 8007402:	2b08      	cmp	r3, #8
 8007404:	d835      	bhi.n	8007472 <UART_SetConfig+0x34a>
 8007406:	a201      	add	r2, pc, #4	; (adr r2, 800740c <UART_SetConfig+0x2e4>)
 8007408:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800740c:	08007431 	.word	0x08007431
 8007410:	08007439 	.word	0x08007439
 8007414:	0800745d 	.word	0x0800745d
 8007418:	08007473 	.word	0x08007473
 800741c:	08007463 	.word	0x08007463
 8007420:	08007473 	.word	0x08007473
 8007424:	08007473 	.word	0x08007473
 8007428:	08007473 	.word	0x08007473
 800742c:	0800746b 	.word	0x0800746b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007430:	f7fe ff80 	bl	8006334 <HAL_RCC_GetPCLK1Freq>
 8007434:	61b8      	str	r0, [r7, #24]
        break;
 8007436:	e021      	b.n	800747c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007438:	f7fe ff9e 	bl	8006378 <HAL_RCC_GetPCLK2Freq>
 800743c:	61b8      	str	r0, [r7, #24]
        break;
 800743e:	e01d      	b.n	800747c <UART_SetConfig+0x354>
 8007440:	40013800 	.word	0x40013800
 8007444:	40021000 	.word	0x40021000
 8007448:	40004400 	.word	0x40004400
 800744c:	40004800 	.word	0x40004800
 8007450:	40004c00 	.word	0x40004c00
 8007454:	40005000 	.word	0x40005000
 8007458:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800745c:	4b1b      	ldr	r3, [pc, #108]	; (80074cc <UART_SetConfig+0x3a4>)
 800745e:	61bb      	str	r3, [r7, #24]
        break;
 8007460:	e00c      	b.n	800747c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007462:	f7fe fef1 	bl	8006248 <HAL_RCC_GetSysClockFreq>
 8007466:	61b8      	str	r0, [r7, #24]
        break;
 8007468:	e008      	b.n	800747c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800746a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800746e:	61bb      	str	r3, [r7, #24]
        break;
 8007470:	e004      	b.n	800747c <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8007472:	2300      	movs	r3, #0
 8007474:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007476:	2301      	movs	r3, #1
 8007478:	77bb      	strb	r3, [r7, #30]
        break;
 800747a:	bf00      	nop
    }

    if (pclk != 0U)
 800747c:	69bb      	ldr	r3, [r7, #24]
 800747e:	2b00      	cmp	r3, #0
 8007480:	d018      	beq.n	80074b4 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	685b      	ldr	r3, [r3, #4]
 8007486:	085a      	lsrs	r2, r3, #1
 8007488:	69bb      	ldr	r3, [r7, #24]
 800748a:	441a      	add	r2, r3
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	685b      	ldr	r3, [r3, #4]
 8007490:	fbb2 f3f3 	udiv	r3, r2, r3
 8007494:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007496:	693b      	ldr	r3, [r7, #16]
 8007498:	2b0f      	cmp	r3, #15
 800749a:	d909      	bls.n	80074b0 <UART_SetConfig+0x388>
 800749c:	693b      	ldr	r3, [r7, #16]
 800749e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80074a2:	d205      	bcs.n	80074b0 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80074a4:	693b      	ldr	r3, [r7, #16]
 80074a6:	b29a      	uxth	r2, r3
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	60da      	str	r2, [r3, #12]
 80074ae:	e001      	b.n	80074b4 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80074b0:	2301      	movs	r3, #1
 80074b2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	2200      	movs	r2, #0
 80074b8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	2200      	movs	r2, #0
 80074be:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80074c0:	7fbb      	ldrb	r3, [r7, #30]
}
 80074c2:	4618      	mov	r0, r3
 80074c4:	3720      	adds	r7, #32
 80074c6:	46bd      	mov	sp, r7
 80074c8:	bd80      	pop	{r7, pc}
 80074ca:	bf00      	nop
 80074cc:	007a1200 	.word	0x007a1200

080074d0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80074d0:	b480      	push	{r7}
 80074d2:	b083      	sub	sp, #12
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074dc:	f003 0301 	and.w	r3, r3, #1
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d00a      	beq.n	80074fa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	685b      	ldr	r3, [r3, #4]
 80074ea:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	430a      	orrs	r2, r1
 80074f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074fe:	f003 0302 	and.w	r3, r3, #2
 8007502:	2b00      	cmp	r3, #0
 8007504:	d00a      	beq.n	800751c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	685b      	ldr	r3, [r3, #4]
 800750c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	430a      	orrs	r2, r1
 800751a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007520:	f003 0304 	and.w	r3, r3, #4
 8007524:	2b00      	cmp	r3, #0
 8007526:	d00a      	beq.n	800753e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	685b      	ldr	r3, [r3, #4]
 800752e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	430a      	orrs	r2, r1
 800753c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007542:	f003 0308 	and.w	r3, r3, #8
 8007546:	2b00      	cmp	r3, #0
 8007548:	d00a      	beq.n	8007560 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	685b      	ldr	r3, [r3, #4]
 8007550:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	430a      	orrs	r2, r1
 800755e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007564:	f003 0310 	and.w	r3, r3, #16
 8007568:	2b00      	cmp	r3, #0
 800756a:	d00a      	beq.n	8007582 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	689b      	ldr	r3, [r3, #8]
 8007572:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	430a      	orrs	r2, r1
 8007580:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007586:	f003 0320 	and.w	r3, r3, #32
 800758a:	2b00      	cmp	r3, #0
 800758c:	d00a      	beq.n	80075a4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	689b      	ldr	r3, [r3, #8]
 8007594:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	430a      	orrs	r2, r1
 80075a2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d01a      	beq.n	80075e6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	685b      	ldr	r3, [r3, #4]
 80075b6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	430a      	orrs	r2, r1
 80075c4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80075ce:	d10a      	bne.n	80075e6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	685b      	ldr	r3, [r3, #4]
 80075d6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	430a      	orrs	r2, r1
 80075e4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d00a      	beq.n	8007608 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	685b      	ldr	r3, [r3, #4]
 80075f8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	430a      	orrs	r2, r1
 8007606:	605a      	str	r2, [r3, #4]
  }
}
 8007608:	bf00      	nop
 800760a:	370c      	adds	r7, #12
 800760c:	46bd      	mov	sp, r7
 800760e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007612:	4770      	bx	lr

08007614 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007614:	b580      	push	{r7, lr}
 8007616:	b098      	sub	sp, #96	; 0x60
 8007618:	af02      	add	r7, sp, #8
 800761a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	2200      	movs	r2, #0
 8007620:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007624:	f7fb ff40 	bl	80034a8 <HAL_GetTick>
 8007628:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	f003 0308 	and.w	r3, r3, #8
 8007634:	2b08      	cmp	r3, #8
 8007636:	d12e      	bne.n	8007696 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007638:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800763c:	9300      	str	r3, [sp, #0]
 800763e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007640:	2200      	movs	r2, #0
 8007642:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007646:	6878      	ldr	r0, [r7, #4]
 8007648:	f000 f88c 	bl	8007764 <UART_WaitOnFlagUntilTimeout>
 800764c:	4603      	mov	r3, r0
 800764e:	2b00      	cmp	r3, #0
 8007650:	d021      	beq.n	8007696 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007658:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800765a:	e853 3f00 	ldrex	r3, [r3]
 800765e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007660:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007662:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007666:	653b      	str	r3, [r7, #80]	; 0x50
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	461a      	mov	r2, r3
 800766e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007670:	647b      	str	r3, [r7, #68]	; 0x44
 8007672:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007674:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007676:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007678:	e841 2300 	strex	r3, r2, [r1]
 800767c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800767e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007680:	2b00      	cmp	r3, #0
 8007682:	d1e6      	bne.n	8007652 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	2220      	movs	r2, #32
 8007688:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	2200      	movs	r2, #0
 800768e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007692:	2303      	movs	r3, #3
 8007694:	e062      	b.n	800775c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	f003 0304 	and.w	r3, r3, #4
 80076a0:	2b04      	cmp	r3, #4
 80076a2:	d149      	bne.n	8007738 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80076a4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80076a8:	9300      	str	r3, [sp, #0]
 80076aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80076ac:	2200      	movs	r2, #0
 80076ae:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80076b2:	6878      	ldr	r0, [r7, #4]
 80076b4:	f000 f856 	bl	8007764 <UART_WaitOnFlagUntilTimeout>
 80076b8:	4603      	mov	r3, r0
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d03c      	beq.n	8007738 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076c6:	e853 3f00 	ldrex	r3, [r3]
 80076ca:	623b      	str	r3, [r7, #32]
   return(result);
 80076cc:	6a3b      	ldr	r3, [r7, #32]
 80076ce:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80076d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	461a      	mov	r2, r3
 80076da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80076dc:	633b      	str	r3, [r7, #48]	; 0x30
 80076de:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076e0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80076e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80076e4:	e841 2300 	strex	r3, r2, [r1]
 80076e8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80076ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d1e6      	bne.n	80076be <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	3308      	adds	r3, #8
 80076f6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076f8:	693b      	ldr	r3, [r7, #16]
 80076fa:	e853 3f00 	ldrex	r3, [r3]
 80076fe:	60fb      	str	r3, [r7, #12]
   return(result);
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	f023 0301 	bic.w	r3, r3, #1
 8007706:	64bb      	str	r3, [r7, #72]	; 0x48
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	3308      	adds	r3, #8
 800770e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007710:	61fa      	str	r2, [r7, #28]
 8007712:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007714:	69b9      	ldr	r1, [r7, #24]
 8007716:	69fa      	ldr	r2, [r7, #28]
 8007718:	e841 2300 	strex	r3, r2, [r1]
 800771c:	617b      	str	r3, [r7, #20]
   return(result);
 800771e:	697b      	ldr	r3, [r7, #20]
 8007720:	2b00      	cmp	r3, #0
 8007722:	d1e5      	bne.n	80076f0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	2220      	movs	r2, #32
 8007728:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	2200      	movs	r2, #0
 8007730:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007734:	2303      	movs	r3, #3
 8007736:	e011      	b.n	800775c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	2220      	movs	r2, #32
 800773c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	2220      	movs	r2, #32
 8007742:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	2200      	movs	r2, #0
 800774a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	2200      	movs	r2, #0
 8007750:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	2200      	movs	r2, #0
 8007756:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800775a:	2300      	movs	r3, #0
}
 800775c:	4618      	mov	r0, r3
 800775e:	3758      	adds	r7, #88	; 0x58
 8007760:	46bd      	mov	sp, r7
 8007762:	bd80      	pop	{r7, pc}

08007764 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007764:	b580      	push	{r7, lr}
 8007766:	b084      	sub	sp, #16
 8007768:	af00      	add	r7, sp, #0
 800776a:	60f8      	str	r0, [r7, #12]
 800776c:	60b9      	str	r1, [r7, #8]
 800776e:	603b      	str	r3, [r7, #0]
 8007770:	4613      	mov	r3, r2
 8007772:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007774:	e049      	b.n	800780a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007776:	69bb      	ldr	r3, [r7, #24]
 8007778:	f1b3 3fff 	cmp.w	r3, #4294967295
 800777c:	d045      	beq.n	800780a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800777e:	f7fb fe93 	bl	80034a8 <HAL_GetTick>
 8007782:	4602      	mov	r2, r0
 8007784:	683b      	ldr	r3, [r7, #0]
 8007786:	1ad3      	subs	r3, r2, r3
 8007788:	69ba      	ldr	r2, [r7, #24]
 800778a:	429a      	cmp	r2, r3
 800778c:	d302      	bcc.n	8007794 <UART_WaitOnFlagUntilTimeout+0x30>
 800778e:	69bb      	ldr	r3, [r7, #24]
 8007790:	2b00      	cmp	r3, #0
 8007792:	d101      	bne.n	8007798 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007794:	2303      	movs	r3, #3
 8007796:	e048      	b.n	800782a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	f003 0304 	and.w	r3, r3, #4
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d031      	beq.n	800780a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	69db      	ldr	r3, [r3, #28]
 80077ac:	f003 0308 	and.w	r3, r3, #8
 80077b0:	2b08      	cmp	r3, #8
 80077b2:	d110      	bne.n	80077d6 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	2208      	movs	r2, #8
 80077ba:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80077bc:	68f8      	ldr	r0, [r7, #12]
 80077be:	f000 f838 	bl	8007832 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	2208      	movs	r2, #8
 80077c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	2200      	movs	r2, #0
 80077ce:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 80077d2:	2301      	movs	r3, #1
 80077d4:	e029      	b.n	800782a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	69db      	ldr	r3, [r3, #28]
 80077dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80077e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80077e4:	d111      	bne.n	800780a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80077ee:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80077f0:	68f8      	ldr	r0, [r7, #12]
 80077f2:	f000 f81e 	bl	8007832 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	2220      	movs	r2, #32
 80077fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	2200      	movs	r2, #0
 8007802:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8007806:	2303      	movs	r3, #3
 8007808:	e00f      	b.n	800782a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	69da      	ldr	r2, [r3, #28]
 8007810:	68bb      	ldr	r3, [r7, #8]
 8007812:	4013      	ands	r3, r2
 8007814:	68ba      	ldr	r2, [r7, #8]
 8007816:	429a      	cmp	r2, r3
 8007818:	bf0c      	ite	eq
 800781a:	2301      	moveq	r3, #1
 800781c:	2300      	movne	r3, #0
 800781e:	b2db      	uxtb	r3, r3
 8007820:	461a      	mov	r2, r3
 8007822:	79fb      	ldrb	r3, [r7, #7]
 8007824:	429a      	cmp	r2, r3
 8007826:	d0a6      	beq.n	8007776 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007828:	2300      	movs	r3, #0
}
 800782a:	4618      	mov	r0, r3
 800782c:	3710      	adds	r7, #16
 800782e:	46bd      	mov	sp, r7
 8007830:	bd80      	pop	{r7, pc}

08007832 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007832:	b480      	push	{r7}
 8007834:	b095      	sub	sp, #84	; 0x54
 8007836:	af00      	add	r7, sp, #0
 8007838:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007840:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007842:	e853 3f00 	ldrex	r3, [r3]
 8007846:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007848:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800784a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800784e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	461a      	mov	r2, r3
 8007856:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007858:	643b      	str	r3, [r7, #64]	; 0x40
 800785a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800785c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800785e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007860:	e841 2300 	strex	r3, r2, [r1]
 8007864:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007866:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007868:	2b00      	cmp	r3, #0
 800786a:	d1e6      	bne.n	800783a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	3308      	adds	r3, #8
 8007872:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007874:	6a3b      	ldr	r3, [r7, #32]
 8007876:	e853 3f00 	ldrex	r3, [r3]
 800787a:	61fb      	str	r3, [r7, #28]
   return(result);
 800787c:	69fb      	ldr	r3, [r7, #28]
 800787e:	f023 0301 	bic.w	r3, r3, #1
 8007882:	64bb      	str	r3, [r7, #72]	; 0x48
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	3308      	adds	r3, #8
 800788a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800788c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800788e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007890:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007892:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007894:	e841 2300 	strex	r3, r2, [r1]
 8007898:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800789a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800789c:	2b00      	cmp	r3, #0
 800789e:	d1e5      	bne.n	800786c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80078a4:	2b01      	cmp	r3, #1
 80078a6:	d118      	bne.n	80078da <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	e853 3f00 	ldrex	r3, [r3]
 80078b4:	60bb      	str	r3, [r7, #8]
   return(result);
 80078b6:	68bb      	ldr	r3, [r7, #8]
 80078b8:	f023 0310 	bic.w	r3, r3, #16
 80078bc:	647b      	str	r3, [r7, #68]	; 0x44
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	461a      	mov	r2, r3
 80078c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80078c6:	61bb      	str	r3, [r7, #24]
 80078c8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078ca:	6979      	ldr	r1, [r7, #20]
 80078cc:	69ba      	ldr	r2, [r7, #24]
 80078ce:	e841 2300 	strex	r3, r2, [r1]
 80078d2:	613b      	str	r3, [r7, #16]
   return(result);
 80078d4:	693b      	ldr	r3, [r7, #16]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d1e6      	bne.n	80078a8 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	2220      	movs	r2, #32
 80078de:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	2200      	movs	r2, #0
 80078e6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	2200      	movs	r2, #0
 80078ec:	669a      	str	r2, [r3, #104]	; 0x68
}
 80078ee:	bf00      	nop
 80078f0:	3754      	adds	r7, #84	; 0x54
 80078f2:	46bd      	mov	sp, r7
 80078f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f8:	4770      	bx	lr

080078fa <__cvt>:
 80078fa:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80078fe:	ec55 4b10 	vmov	r4, r5, d0
 8007902:	2d00      	cmp	r5, #0
 8007904:	460e      	mov	r6, r1
 8007906:	4619      	mov	r1, r3
 8007908:	462b      	mov	r3, r5
 800790a:	bfbb      	ittet	lt
 800790c:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007910:	461d      	movlt	r5, r3
 8007912:	2300      	movge	r3, #0
 8007914:	232d      	movlt	r3, #45	; 0x2d
 8007916:	700b      	strb	r3, [r1, #0]
 8007918:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800791a:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800791e:	4691      	mov	r9, r2
 8007920:	f023 0820 	bic.w	r8, r3, #32
 8007924:	bfbc      	itt	lt
 8007926:	4622      	movlt	r2, r4
 8007928:	4614      	movlt	r4, r2
 800792a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800792e:	d005      	beq.n	800793c <__cvt+0x42>
 8007930:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007934:	d100      	bne.n	8007938 <__cvt+0x3e>
 8007936:	3601      	adds	r6, #1
 8007938:	2102      	movs	r1, #2
 800793a:	e000      	b.n	800793e <__cvt+0x44>
 800793c:	2103      	movs	r1, #3
 800793e:	ab03      	add	r3, sp, #12
 8007940:	9301      	str	r3, [sp, #4]
 8007942:	ab02      	add	r3, sp, #8
 8007944:	9300      	str	r3, [sp, #0]
 8007946:	ec45 4b10 	vmov	d0, r4, r5
 800794a:	4653      	mov	r3, sl
 800794c:	4632      	mov	r2, r6
 800794e:	f001 f89f 	bl	8008a90 <_dtoa_r>
 8007952:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007956:	4607      	mov	r7, r0
 8007958:	d102      	bne.n	8007960 <__cvt+0x66>
 800795a:	f019 0f01 	tst.w	r9, #1
 800795e:	d022      	beq.n	80079a6 <__cvt+0xac>
 8007960:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007964:	eb07 0906 	add.w	r9, r7, r6
 8007968:	d110      	bne.n	800798c <__cvt+0x92>
 800796a:	783b      	ldrb	r3, [r7, #0]
 800796c:	2b30      	cmp	r3, #48	; 0x30
 800796e:	d10a      	bne.n	8007986 <__cvt+0x8c>
 8007970:	2200      	movs	r2, #0
 8007972:	2300      	movs	r3, #0
 8007974:	4620      	mov	r0, r4
 8007976:	4629      	mov	r1, r5
 8007978:	f7f9 f8a6 	bl	8000ac8 <__aeabi_dcmpeq>
 800797c:	b918      	cbnz	r0, 8007986 <__cvt+0x8c>
 800797e:	f1c6 0601 	rsb	r6, r6, #1
 8007982:	f8ca 6000 	str.w	r6, [sl]
 8007986:	f8da 3000 	ldr.w	r3, [sl]
 800798a:	4499      	add	r9, r3
 800798c:	2200      	movs	r2, #0
 800798e:	2300      	movs	r3, #0
 8007990:	4620      	mov	r0, r4
 8007992:	4629      	mov	r1, r5
 8007994:	f7f9 f898 	bl	8000ac8 <__aeabi_dcmpeq>
 8007998:	b108      	cbz	r0, 800799e <__cvt+0xa4>
 800799a:	f8cd 900c 	str.w	r9, [sp, #12]
 800799e:	2230      	movs	r2, #48	; 0x30
 80079a0:	9b03      	ldr	r3, [sp, #12]
 80079a2:	454b      	cmp	r3, r9
 80079a4:	d307      	bcc.n	80079b6 <__cvt+0xbc>
 80079a6:	9b03      	ldr	r3, [sp, #12]
 80079a8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80079aa:	1bdb      	subs	r3, r3, r7
 80079ac:	4638      	mov	r0, r7
 80079ae:	6013      	str	r3, [r2, #0]
 80079b0:	b004      	add	sp, #16
 80079b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80079b6:	1c59      	adds	r1, r3, #1
 80079b8:	9103      	str	r1, [sp, #12]
 80079ba:	701a      	strb	r2, [r3, #0]
 80079bc:	e7f0      	b.n	80079a0 <__cvt+0xa6>

080079be <__exponent>:
 80079be:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80079c0:	4603      	mov	r3, r0
 80079c2:	2900      	cmp	r1, #0
 80079c4:	bfb8      	it	lt
 80079c6:	4249      	neglt	r1, r1
 80079c8:	f803 2b02 	strb.w	r2, [r3], #2
 80079cc:	bfb4      	ite	lt
 80079ce:	222d      	movlt	r2, #45	; 0x2d
 80079d0:	222b      	movge	r2, #43	; 0x2b
 80079d2:	2909      	cmp	r1, #9
 80079d4:	7042      	strb	r2, [r0, #1]
 80079d6:	dd2a      	ble.n	8007a2e <__exponent+0x70>
 80079d8:	f10d 0207 	add.w	r2, sp, #7
 80079dc:	4617      	mov	r7, r2
 80079de:	260a      	movs	r6, #10
 80079e0:	4694      	mov	ip, r2
 80079e2:	fb91 f5f6 	sdiv	r5, r1, r6
 80079e6:	fb06 1415 	mls	r4, r6, r5, r1
 80079ea:	3430      	adds	r4, #48	; 0x30
 80079ec:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80079f0:	460c      	mov	r4, r1
 80079f2:	2c63      	cmp	r4, #99	; 0x63
 80079f4:	f102 32ff 	add.w	r2, r2, #4294967295
 80079f8:	4629      	mov	r1, r5
 80079fa:	dcf1      	bgt.n	80079e0 <__exponent+0x22>
 80079fc:	3130      	adds	r1, #48	; 0x30
 80079fe:	f1ac 0402 	sub.w	r4, ip, #2
 8007a02:	f802 1c01 	strb.w	r1, [r2, #-1]
 8007a06:	1c41      	adds	r1, r0, #1
 8007a08:	4622      	mov	r2, r4
 8007a0a:	42ba      	cmp	r2, r7
 8007a0c:	d30a      	bcc.n	8007a24 <__exponent+0x66>
 8007a0e:	f10d 0209 	add.w	r2, sp, #9
 8007a12:	eba2 020c 	sub.w	r2, r2, ip
 8007a16:	42bc      	cmp	r4, r7
 8007a18:	bf88      	it	hi
 8007a1a:	2200      	movhi	r2, #0
 8007a1c:	4413      	add	r3, r2
 8007a1e:	1a18      	subs	r0, r3, r0
 8007a20:	b003      	add	sp, #12
 8007a22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007a24:	f812 5b01 	ldrb.w	r5, [r2], #1
 8007a28:	f801 5f01 	strb.w	r5, [r1, #1]!
 8007a2c:	e7ed      	b.n	8007a0a <__exponent+0x4c>
 8007a2e:	2330      	movs	r3, #48	; 0x30
 8007a30:	3130      	adds	r1, #48	; 0x30
 8007a32:	7083      	strb	r3, [r0, #2]
 8007a34:	70c1      	strb	r1, [r0, #3]
 8007a36:	1d03      	adds	r3, r0, #4
 8007a38:	e7f1      	b.n	8007a1e <__exponent+0x60>
	...

08007a3c <_printf_float>:
 8007a3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a40:	ed2d 8b02 	vpush	{d8}
 8007a44:	b08d      	sub	sp, #52	; 0x34
 8007a46:	460c      	mov	r4, r1
 8007a48:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007a4c:	4616      	mov	r6, r2
 8007a4e:	461f      	mov	r7, r3
 8007a50:	4605      	mov	r5, r0
 8007a52:	f000 ff19 	bl	8008888 <_localeconv_r>
 8007a56:	f8d0 a000 	ldr.w	sl, [r0]
 8007a5a:	4650      	mov	r0, sl
 8007a5c:	f7f8 fc08 	bl	8000270 <strlen>
 8007a60:	2300      	movs	r3, #0
 8007a62:	930a      	str	r3, [sp, #40]	; 0x28
 8007a64:	6823      	ldr	r3, [r4, #0]
 8007a66:	9305      	str	r3, [sp, #20]
 8007a68:	f8d8 3000 	ldr.w	r3, [r8]
 8007a6c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007a70:	3307      	adds	r3, #7
 8007a72:	f023 0307 	bic.w	r3, r3, #7
 8007a76:	f103 0208 	add.w	r2, r3, #8
 8007a7a:	f8c8 2000 	str.w	r2, [r8]
 8007a7e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007a82:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007a86:	9307      	str	r3, [sp, #28]
 8007a88:	f8cd 8018 	str.w	r8, [sp, #24]
 8007a8c:	ee08 0a10 	vmov	s16, r0
 8007a90:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8007a94:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007a98:	4b9e      	ldr	r3, [pc, #632]	; (8007d14 <_printf_float+0x2d8>)
 8007a9a:	f04f 32ff 	mov.w	r2, #4294967295
 8007a9e:	f7f9 f845 	bl	8000b2c <__aeabi_dcmpun>
 8007aa2:	bb88      	cbnz	r0, 8007b08 <_printf_float+0xcc>
 8007aa4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007aa8:	4b9a      	ldr	r3, [pc, #616]	; (8007d14 <_printf_float+0x2d8>)
 8007aaa:	f04f 32ff 	mov.w	r2, #4294967295
 8007aae:	f7f9 f81f 	bl	8000af0 <__aeabi_dcmple>
 8007ab2:	bb48      	cbnz	r0, 8007b08 <_printf_float+0xcc>
 8007ab4:	2200      	movs	r2, #0
 8007ab6:	2300      	movs	r3, #0
 8007ab8:	4640      	mov	r0, r8
 8007aba:	4649      	mov	r1, r9
 8007abc:	f7f9 f80e 	bl	8000adc <__aeabi_dcmplt>
 8007ac0:	b110      	cbz	r0, 8007ac8 <_printf_float+0x8c>
 8007ac2:	232d      	movs	r3, #45	; 0x2d
 8007ac4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007ac8:	4a93      	ldr	r2, [pc, #588]	; (8007d18 <_printf_float+0x2dc>)
 8007aca:	4b94      	ldr	r3, [pc, #592]	; (8007d1c <_printf_float+0x2e0>)
 8007acc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007ad0:	bf94      	ite	ls
 8007ad2:	4690      	movls	r8, r2
 8007ad4:	4698      	movhi	r8, r3
 8007ad6:	2303      	movs	r3, #3
 8007ad8:	6123      	str	r3, [r4, #16]
 8007ada:	9b05      	ldr	r3, [sp, #20]
 8007adc:	f023 0304 	bic.w	r3, r3, #4
 8007ae0:	6023      	str	r3, [r4, #0]
 8007ae2:	f04f 0900 	mov.w	r9, #0
 8007ae6:	9700      	str	r7, [sp, #0]
 8007ae8:	4633      	mov	r3, r6
 8007aea:	aa0b      	add	r2, sp, #44	; 0x2c
 8007aec:	4621      	mov	r1, r4
 8007aee:	4628      	mov	r0, r5
 8007af0:	f000 f9da 	bl	8007ea8 <_printf_common>
 8007af4:	3001      	adds	r0, #1
 8007af6:	f040 8090 	bne.w	8007c1a <_printf_float+0x1de>
 8007afa:	f04f 30ff 	mov.w	r0, #4294967295
 8007afe:	b00d      	add	sp, #52	; 0x34
 8007b00:	ecbd 8b02 	vpop	{d8}
 8007b04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b08:	4642      	mov	r2, r8
 8007b0a:	464b      	mov	r3, r9
 8007b0c:	4640      	mov	r0, r8
 8007b0e:	4649      	mov	r1, r9
 8007b10:	f7f9 f80c 	bl	8000b2c <__aeabi_dcmpun>
 8007b14:	b140      	cbz	r0, 8007b28 <_printf_float+0xec>
 8007b16:	464b      	mov	r3, r9
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	bfbc      	itt	lt
 8007b1c:	232d      	movlt	r3, #45	; 0x2d
 8007b1e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007b22:	4a7f      	ldr	r2, [pc, #508]	; (8007d20 <_printf_float+0x2e4>)
 8007b24:	4b7f      	ldr	r3, [pc, #508]	; (8007d24 <_printf_float+0x2e8>)
 8007b26:	e7d1      	b.n	8007acc <_printf_float+0x90>
 8007b28:	6863      	ldr	r3, [r4, #4]
 8007b2a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007b2e:	9206      	str	r2, [sp, #24]
 8007b30:	1c5a      	adds	r2, r3, #1
 8007b32:	d13f      	bne.n	8007bb4 <_printf_float+0x178>
 8007b34:	2306      	movs	r3, #6
 8007b36:	6063      	str	r3, [r4, #4]
 8007b38:	9b05      	ldr	r3, [sp, #20]
 8007b3a:	6861      	ldr	r1, [r4, #4]
 8007b3c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007b40:	2300      	movs	r3, #0
 8007b42:	9303      	str	r3, [sp, #12]
 8007b44:	ab0a      	add	r3, sp, #40	; 0x28
 8007b46:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007b4a:	ab09      	add	r3, sp, #36	; 0x24
 8007b4c:	ec49 8b10 	vmov	d0, r8, r9
 8007b50:	9300      	str	r3, [sp, #0]
 8007b52:	6022      	str	r2, [r4, #0]
 8007b54:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007b58:	4628      	mov	r0, r5
 8007b5a:	f7ff fece 	bl	80078fa <__cvt>
 8007b5e:	9b06      	ldr	r3, [sp, #24]
 8007b60:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007b62:	2b47      	cmp	r3, #71	; 0x47
 8007b64:	4680      	mov	r8, r0
 8007b66:	d108      	bne.n	8007b7a <_printf_float+0x13e>
 8007b68:	1cc8      	adds	r0, r1, #3
 8007b6a:	db02      	blt.n	8007b72 <_printf_float+0x136>
 8007b6c:	6863      	ldr	r3, [r4, #4]
 8007b6e:	4299      	cmp	r1, r3
 8007b70:	dd41      	ble.n	8007bf6 <_printf_float+0x1ba>
 8007b72:	f1ab 0302 	sub.w	r3, fp, #2
 8007b76:	fa5f fb83 	uxtb.w	fp, r3
 8007b7a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007b7e:	d820      	bhi.n	8007bc2 <_printf_float+0x186>
 8007b80:	3901      	subs	r1, #1
 8007b82:	465a      	mov	r2, fp
 8007b84:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007b88:	9109      	str	r1, [sp, #36]	; 0x24
 8007b8a:	f7ff ff18 	bl	80079be <__exponent>
 8007b8e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007b90:	1813      	adds	r3, r2, r0
 8007b92:	2a01      	cmp	r2, #1
 8007b94:	4681      	mov	r9, r0
 8007b96:	6123      	str	r3, [r4, #16]
 8007b98:	dc02      	bgt.n	8007ba0 <_printf_float+0x164>
 8007b9a:	6822      	ldr	r2, [r4, #0]
 8007b9c:	07d2      	lsls	r2, r2, #31
 8007b9e:	d501      	bpl.n	8007ba4 <_printf_float+0x168>
 8007ba0:	3301      	adds	r3, #1
 8007ba2:	6123      	str	r3, [r4, #16]
 8007ba4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d09c      	beq.n	8007ae6 <_printf_float+0xaa>
 8007bac:	232d      	movs	r3, #45	; 0x2d
 8007bae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007bb2:	e798      	b.n	8007ae6 <_printf_float+0xaa>
 8007bb4:	9a06      	ldr	r2, [sp, #24]
 8007bb6:	2a47      	cmp	r2, #71	; 0x47
 8007bb8:	d1be      	bne.n	8007b38 <_printf_float+0xfc>
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d1bc      	bne.n	8007b38 <_printf_float+0xfc>
 8007bbe:	2301      	movs	r3, #1
 8007bc0:	e7b9      	b.n	8007b36 <_printf_float+0xfa>
 8007bc2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007bc6:	d118      	bne.n	8007bfa <_printf_float+0x1be>
 8007bc8:	2900      	cmp	r1, #0
 8007bca:	6863      	ldr	r3, [r4, #4]
 8007bcc:	dd0b      	ble.n	8007be6 <_printf_float+0x1aa>
 8007bce:	6121      	str	r1, [r4, #16]
 8007bd0:	b913      	cbnz	r3, 8007bd8 <_printf_float+0x19c>
 8007bd2:	6822      	ldr	r2, [r4, #0]
 8007bd4:	07d0      	lsls	r0, r2, #31
 8007bd6:	d502      	bpl.n	8007bde <_printf_float+0x1a2>
 8007bd8:	3301      	adds	r3, #1
 8007bda:	440b      	add	r3, r1
 8007bdc:	6123      	str	r3, [r4, #16]
 8007bde:	65a1      	str	r1, [r4, #88]	; 0x58
 8007be0:	f04f 0900 	mov.w	r9, #0
 8007be4:	e7de      	b.n	8007ba4 <_printf_float+0x168>
 8007be6:	b913      	cbnz	r3, 8007bee <_printf_float+0x1b2>
 8007be8:	6822      	ldr	r2, [r4, #0]
 8007bea:	07d2      	lsls	r2, r2, #31
 8007bec:	d501      	bpl.n	8007bf2 <_printf_float+0x1b6>
 8007bee:	3302      	adds	r3, #2
 8007bf0:	e7f4      	b.n	8007bdc <_printf_float+0x1a0>
 8007bf2:	2301      	movs	r3, #1
 8007bf4:	e7f2      	b.n	8007bdc <_printf_float+0x1a0>
 8007bf6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007bfa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007bfc:	4299      	cmp	r1, r3
 8007bfe:	db05      	blt.n	8007c0c <_printf_float+0x1d0>
 8007c00:	6823      	ldr	r3, [r4, #0]
 8007c02:	6121      	str	r1, [r4, #16]
 8007c04:	07d8      	lsls	r0, r3, #31
 8007c06:	d5ea      	bpl.n	8007bde <_printf_float+0x1a2>
 8007c08:	1c4b      	adds	r3, r1, #1
 8007c0a:	e7e7      	b.n	8007bdc <_printf_float+0x1a0>
 8007c0c:	2900      	cmp	r1, #0
 8007c0e:	bfd4      	ite	le
 8007c10:	f1c1 0202 	rsble	r2, r1, #2
 8007c14:	2201      	movgt	r2, #1
 8007c16:	4413      	add	r3, r2
 8007c18:	e7e0      	b.n	8007bdc <_printf_float+0x1a0>
 8007c1a:	6823      	ldr	r3, [r4, #0]
 8007c1c:	055a      	lsls	r2, r3, #21
 8007c1e:	d407      	bmi.n	8007c30 <_printf_float+0x1f4>
 8007c20:	6923      	ldr	r3, [r4, #16]
 8007c22:	4642      	mov	r2, r8
 8007c24:	4631      	mov	r1, r6
 8007c26:	4628      	mov	r0, r5
 8007c28:	47b8      	blx	r7
 8007c2a:	3001      	adds	r0, #1
 8007c2c:	d12c      	bne.n	8007c88 <_printf_float+0x24c>
 8007c2e:	e764      	b.n	8007afa <_printf_float+0xbe>
 8007c30:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007c34:	f240 80e0 	bls.w	8007df8 <_printf_float+0x3bc>
 8007c38:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007c3c:	2200      	movs	r2, #0
 8007c3e:	2300      	movs	r3, #0
 8007c40:	f7f8 ff42 	bl	8000ac8 <__aeabi_dcmpeq>
 8007c44:	2800      	cmp	r0, #0
 8007c46:	d034      	beq.n	8007cb2 <_printf_float+0x276>
 8007c48:	4a37      	ldr	r2, [pc, #220]	; (8007d28 <_printf_float+0x2ec>)
 8007c4a:	2301      	movs	r3, #1
 8007c4c:	4631      	mov	r1, r6
 8007c4e:	4628      	mov	r0, r5
 8007c50:	47b8      	blx	r7
 8007c52:	3001      	adds	r0, #1
 8007c54:	f43f af51 	beq.w	8007afa <_printf_float+0xbe>
 8007c58:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007c5c:	429a      	cmp	r2, r3
 8007c5e:	db02      	blt.n	8007c66 <_printf_float+0x22a>
 8007c60:	6823      	ldr	r3, [r4, #0]
 8007c62:	07d8      	lsls	r0, r3, #31
 8007c64:	d510      	bpl.n	8007c88 <_printf_float+0x24c>
 8007c66:	ee18 3a10 	vmov	r3, s16
 8007c6a:	4652      	mov	r2, sl
 8007c6c:	4631      	mov	r1, r6
 8007c6e:	4628      	mov	r0, r5
 8007c70:	47b8      	blx	r7
 8007c72:	3001      	adds	r0, #1
 8007c74:	f43f af41 	beq.w	8007afa <_printf_float+0xbe>
 8007c78:	f04f 0800 	mov.w	r8, #0
 8007c7c:	f104 091a 	add.w	r9, r4, #26
 8007c80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c82:	3b01      	subs	r3, #1
 8007c84:	4543      	cmp	r3, r8
 8007c86:	dc09      	bgt.n	8007c9c <_printf_float+0x260>
 8007c88:	6823      	ldr	r3, [r4, #0]
 8007c8a:	079b      	lsls	r3, r3, #30
 8007c8c:	f100 8107 	bmi.w	8007e9e <_printf_float+0x462>
 8007c90:	68e0      	ldr	r0, [r4, #12]
 8007c92:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007c94:	4298      	cmp	r0, r3
 8007c96:	bfb8      	it	lt
 8007c98:	4618      	movlt	r0, r3
 8007c9a:	e730      	b.n	8007afe <_printf_float+0xc2>
 8007c9c:	2301      	movs	r3, #1
 8007c9e:	464a      	mov	r2, r9
 8007ca0:	4631      	mov	r1, r6
 8007ca2:	4628      	mov	r0, r5
 8007ca4:	47b8      	blx	r7
 8007ca6:	3001      	adds	r0, #1
 8007ca8:	f43f af27 	beq.w	8007afa <_printf_float+0xbe>
 8007cac:	f108 0801 	add.w	r8, r8, #1
 8007cb0:	e7e6      	b.n	8007c80 <_printf_float+0x244>
 8007cb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	dc39      	bgt.n	8007d2c <_printf_float+0x2f0>
 8007cb8:	4a1b      	ldr	r2, [pc, #108]	; (8007d28 <_printf_float+0x2ec>)
 8007cba:	2301      	movs	r3, #1
 8007cbc:	4631      	mov	r1, r6
 8007cbe:	4628      	mov	r0, r5
 8007cc0:	47b8      	blx	r7
 8007cc2:	3001      	adds	r0, #1
 8007cc4:	f43f af19 	beq.w	8007afa <_printf_float+0xbe>
 8007cc8:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8007ccc:	4313      	orrs	r3, r2
 8007cce:	d102      	bne.n	8007cd6 <_printf_float+0x29a>
 8007cd0:	6823      	ldr	r3, [r4, #0]
 8007cd2:	07d9      	lsls	r1, r3, #31
 8007cd4:	d5d8      	bpl.n	8007c88 <_printf_float+0x24c>
 8007cd6:	ee18 3a10 	vmov	r3, s16
 8007cda:	4652      	mov	r2, sl
 8007cdc:	4631      	mov	r1, r6
 8007cde:	4628      	mov	r0, r5
 8007ce0:	47b8      	blx	r7
 8007ce2:	3001      	adds	r0, #1
 8007ce4:	f43f af09 	beq.w	8007afa <_printf_float+0xbe>
 8007ce8:	f04f 0900 	mov.w	r9, #0
 8007cec:	f104 0a1a 	add.w	sl, r4, #26
 8007cf0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007cf2:	425b      	negs	r3, r3
 8007cf4:	454b      	cmp	r3, r9
 8007cf6:	dc01      	bgt.n	8007cfc <_printf_float+0x2c0>
 8007cf8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007cfa:	e792      	b.n	8007c22 <_printf_float+0x1e6>
 8007cfc:	2301      	movs	r3, #1
 8007cfe:	4652      	mov	r2, sl
 8007d00:	4631      	mov	r1, r6
 8007d02:	4628      	mov	r0, r5
 8007d04:	47b8      	blx	r7
 8007d06:	3001      	adds	r0, #1
 8007d08:	f43f aef7 	beq.w	8007afa <_printf_float+0xbe>
 8007d0c:	f109 0901 	add.w	r9, r9, #1
 8007d10:	e7ee      	b.n	8007cf0 <_printf_float+0x2b4>
 8007d12:	bf00      	nop
 8007d14:	7fefffff 	.word	0x7fefffff
 8007d18:	0800cd9c 	.word	0x0800cd9c
 8007d1c:	0800cda0 	.word	0x0800cda0
 8007d20:	0800cda4 	.word	0x0800cda4
 8007d24:	0800cda8 	.word	0x0800cda8
 8007d28:	0800cdac 	.word	0x0800cdac
 8007d2c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007d2e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007d30:	429a      	cmp	r2, r3
 8007d32:	bfa8      	it	ge
 8007d34:	461a      	movge	r2, r3
 8007d36:	2a00      	cmp	r2, #0
 8007d38:	4691      	mov	r9, r2
 8007d3a:	dc37      	bgt.n	8007dac <_printf_float+0x370>
 8007d3c:	f04f 0b00 	mov.w	fp, #0
 8007d40:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007d44:	f104 021a 	add.w	r2, r4, #26
 8007d48:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007d4a:	9305      	str	r3, [sp, #20]
 8007d4c:	eba3 0309 	sub.w	r3, r3, r9
 8007d50:	455b      	cmp	r3, fp
 8007d52:	dc33      	bgt.n	8007dbc <_printf_float+0x380>
 8007d54:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007d58:	429a      	cmp	r2, r3
 8007d5a:	db3b      	blt.n	8007dd4 <_printf_float+0x398>
 8007d5c:	6823      	ldr	r3, [r4, #0]
 8007d5e:	07da      	lsls	r2, r3, #31
 8007d60:	d438      	bmi.n	8007dd4 <_printf_float+0x398>
 8007d62:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8007d66:	eba2 0903 	sub.w	r9, r2, r3
 8007d6a:	9b05      	ldr	r3, [sp, #20]
 8007d6c:	1ad2      	subs	r2, r2, r3
 8007d6e:	4591      	cmp	r9, r2
 8007d70:	bfa8      	it	ge
 8007d72:	4691      	movge	r9, r2
 8007d74:	f1b9 0f00 	cmp.w	r9, #0
 8007d78:	dc35      	bgt.n	8007de6 <_printf_float+0x3aa>
 8007d7a:	f04f 0800 	mov.w	r8, #0
 8007d7e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007d82:	f104 0a1a 	add.w	sl, r4, #26
 8007d86:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007d8a:	1a9b      	subs	r3, r3, r2
 8007d8c:	eba3 0309 	sub.w	r3, r3, r9
 8007d90:	4543      	cmp	r3, r8
 8007d92:	f77f af79 	ble.w	8007c88 <_printf_float+0x24c>
 8007d96:	2301      	movs	r3, #1
 8007d98:	4652      	mov	r2, sl
 8007d9a:	4631      	mov	r1, r6
 8007d9c:	4628      	mov	r0, r5
 8007d9e:	47b8      	blx	r7
 8007da0:	3001      	adds	r0, #1
 8007da2:	f43f aeaa 	beq.w	8007afa <_printf_float+0xbe>
 8007da6:	f108 0801 	add.w	r8, r8, #1
 8007daa:	e7ec      	b.n	8007d86 <_printf_float+0x34a>
 8007dac:	4613      	mov	r3, r2
 8007dae:	4631      	mov	r1, r6
 8007db0:	4642      	mov	r2, r8
 8007db2:	4628      	mov	r0, r5
 8007db4:	47b8      	blx	r7
 8007db6:	3001      	adds	r0, #1
 8007db8:	d1c0      	bne.n	8007d3c <_printf_float+0x300>
 8007dba:	e69e      	b.n	8007afa <_printf_float+0xbe>
 8007dbc:	2301      	movs	r3, #1
 8007dbe:	4631      	mov	r1, r6
 8007dc0:	4628      	mov	r0, r5
 8007dc2:	9205      	str	r2, [sp, #20]
 8007dc4:	47b8      	blx	r7
 8007dc6:	3001      	adds	r0, #1
 8007dc8:	f43f ae97 	beq.w	8007afa <_printf_float+0xbe>
 8007dcc:	9a05      	ldr	r2, [sp, #20]
 8007dce:	f10b 0b01 	add.w	fp, fp, #1
 8007dd2:	e7b9      	b.n	8007d48 <_printf_float+0x30c>
 8007dd4:	ee18 3a10 	vmov	r3, s16
 8007dd8:	4652      	mov	r2, sl
 8007dda:	4631      	mov	r1, r6
 8007ddc:	4628      	mov	r0, r5
 8007dde:	47b8      	blx	r7
 8007de0:	3001      	adds	r0, #1
 8007de2:	d1be      	bne.n	8007d62 <_printf_float+0x326>
 8007de4:	e689      	b.n	8007afa <_printf_float+0xbe>
 8007de6:	9a05      	ldr	r2, [sp, #20]
 8007de8:	464b      	mov	r3, r9
 8007dea:	4442      	add	r2, r8
 8007dec:	4631      	mov	r1, r6
 8007dee:	4628      	mov	r0, r5
 8007df0:	47b8      	blx	r7
 8007df2:	3001      	adds	r0, #1
 8007df4:	d1c1      	bne.n	8007d7a <_printf_float+0x33e>
 8007df6:	e680      	b.n	8007afa <_printf_float+0xbe>
 8007df8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007dfa:	2a01      	cmp	r2, #1
 8007dfc:	dc01      	bgt.n	8007e02 <_printf_float+0x3c6>
 8007dfe:	07db      	lsls	r3, r3, #31
 8007e00:	d53a      	bpl.n	8007e78 <_printf_float+0x43c>
 8007e02:	2301      	movs	r3, #1
 8007e04:	4642      	mov	r2, r8
 8007e06:	4631      	mov	r1, r6
 8007e08:	4628      	mov	r0, r5
 8007e0a:	47b8      	blx	r7
 8007e0c:	3001      	adds	r0, #1
 8007e0e:	f43f ae74 	beq.w	8007afa <_printf_float+0xbe>
 8007e12:	ee18 3a10 	vmov	r3, s16
 8007e16:	4652      	mov	r2, sl
 8007e18:	4631      	mov	r1, r6
 8007e1a:	4628      	mov	r0, r5
 8007e1c:	47b8      	blx	r7
 8007e1e:	3001      	adds	r0, #1
 8007e20:	f43f ae6b 	beq.w	8007afa <_printf_float+0xbe>
 8007e24:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007e28:	2200      	movs	r2, #0
 8007e2a:	2300      	movs	r3, #0
 8007e2c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8007e30:	f7f8 fe4a 	bl	8000ac8 <__aeabi_dcmpeq>
 8007e34:	b9d8      	cbnz	r0, 8007e6e <_printf_float+0x432>
 8007e36:	f10a 33ff 	add.w	r3, sl, #4294967295
 8007e3a:	f108 0201 	add.w	r2, r8, #1
 8007e3e:	4631      	mov	r1, r6
 8007e40:	4628      	mov	r0, r5
 8007e42:	47b8      	blx	r7
 8007e44:	3001      	adds	r0, #1
 8007e46:	d10e      	bne.n	8007e66 <_printf_float+0x42a>
 8007e48:	e657      	b.n	8007afa <_printf_float+0xbe>
 8007e4a:	2301      	movs	r3, #1
 8007e4c:	4652      	mov	r2, sl
 8007e4e:	4631      	mov	r1, r6
 8007e50:	4628      	mov	r0, r5
 8007e52:	47b8      	blx	r7
 8007e54:	3001      	adds	r0, #1
 8007e56:	f43f ae50 	beq.w	8007afa <_printf_float+0xbe>
 8007e5a:	f108 0801 	add.w	r8, r8, #1
 8007e5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e60:	3b01      	subs	r3, #1
 8007e62:	4543      	cmp	r3, r8
 8007e64:	dcf1      	bgt.n	8007e4a <_printf_float+0x40e>
 8007e66:	464b      	mov	r3, r9
 8007e68:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007e6c:	e6da      	b.n	8007c24 <_printf_float+0x1e8>
 8007e6e:	f04f 0800 	mov.w	r8, #0
 8007e72:	f104 0a1a 	add.w	sl, r4, #26
 8007e76:	e7f2      	b.n	8007e5e <_printf_float+0x422>
 8007e78:	2301      	movs	r3, #1
 8007e7a:	4642      	mov	r2, r8
 8007e7c:	e7df      	b.n	8007e3e <_printf_float+0x402>
 8007e7e:	2301      	movs	r3, #1
 8007e80:	464a      	mov	r2, r9
 8007e82:	4631      	mov	r1, r6
 8007e84:	4628      	mov	r0, r5
 8007e86:	47b8      	blx	r7
 8007e88:	3001      	adds	r0, #1
 8007e8a:	f43f ae36 	beq.w	8007afa <_printf_float+0xbe>
 8007e8e:	f108 0801 	add.w	r8, r8, #1
 8007e92:	68e3      	ldr	r3, [r4, #12]
 8007e94:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007e96:	1a5b      	subs	r3, r3, r1
 8007e98:	4543      	cmp	r3, r8
 8007e9a:	dcf0      	bgt.n	8007e7e <_printf_float+0x442>
 8007e9c:	e6f8      	b.n	8007c90 <_printf_float+0x254>
 8007e9e:	f04f 0800 	mov.w	r8, #0
 8007ea2:	f104 0919 	add.w	r9, r4, #25
 8007ea6:	e7f4      	b.n	8007e92 <_printf_float+0x456>

08007ea8 <_printf_common>:
 8007ea8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007eac:	4616      	mov	r6, r2
 8007eae:	4699      	mov	r9, r3
 8007eb0:	688a      	ldr	r2, [r1, #8]
 8007eb2:	690b      	ldr	r3, [r1, #16]
 8007eb4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007eb8:	4293      	cmp	r3, r2
 8007eba:	bfb8      	it	lt
 8007ebc:	4613      	movlt	r3, r2
 8007ebe:	6033      	str	r3, [r6, #0]
 8007ec0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007ec4:	4607      	mov	r7, r0
 8007ec6:	460c      	mov	r4, r1
 8007ec8:	b10a      	cbz	r2, 8007ece <_printf_common+0x26>
 8007eca:	3301      	adds	r3, #1
 8007ecc:	6033      	str	r3, [r6, #0]
 8007ece:	6823      	ldr	r3, [r4, #0]
 8007ed0:	0699      	lsls	r1, r3, #26
 8007ed2:	bf42      	ittt	mi
 8007ed4:	6833      	ldrmi	r3, [r6, #0]
 8007ed6:	3302      	addmi	r3, #2
 8007ed8:	6033      	strmi	r3, [r6, #0]
 8007eda:	6825      	ldr	r5, [r4, #0]
 8007edc:	f015 0506 	ands.w	r5, r5, #6
 8007ee0:	d106      	bne.n	8007ef0 <_printf_common+0x48>
 8007ee2:	f104 0a19 	add.w	sl, r4, #25
 8007ee6:	68e3      	ldr	r3, [r4, #12]
 8007ee8:	6832      	ldr	r2, [r6, #0]
 8007eea:	1a9b      	subs	r3, r3, r2
 8007eec:	42ab      	cmp	r3, r5
 8007eee:	dc26      	bgt.n	8007f3e <_printf_common+0x96>
 8007ef0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007ef4:	1e13      	subs	r3, r2, #0
 8007ef6:	6822      	ldr	r2, [r4, #0]
 8007ef8:	bf18      	it	ne
 8007efa:	2301      	movne	r3, #1
 8007efc:	0692      	lsls	r2, r2, #26
 8007efe:	d42b      	bmi.n	8007f58 <_printf_common+0xb0>
 8007f00:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007f04:	4649      	mov	r1, r9
 8007f06:	4638      	mov	r0, r7
 8007f08:	47c0      	blx	r8
 8007f0a:	3001      	adds	r0, #1
 8007f0c:	d01e      	beq.n	8007f4c <_printf_common+0xa4>
 8007f0e:	6823      	ldr	r3, [r4, #0]
 8007f10:	6922      	ldr	r2, [r4, #16]
 8007f12:	f003 0306 	and.w	r3, r3, #6
 8007f16:	2b04      	cmp	r3, #4
 8007f18:	bf02      	ittt	eq
 8007f1a:	68e5      	ldreq	r5, [r4, #12]
 8007f1c:	6833      	ldreq	r3, [r6, #0]
 8007f1e:	1aed      	subeq	r5, r5, r3
 8007f20:	68a3      	ldr	r3, [r4, #8]
 8007f22:	bf0c      	ite	eq
 8007f24:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007f28:	2500      	movne	r5, #0
 8007f2a:	4293      	cmp	r3, r2
 8007f2c:	bfc4      	itt	gt
 8007f2e:	1a9b      	subgt	r3, r3, r2
 8007f30:	18ed      	addgt	r5, r5, r3
 8007f32:	2600      	movs	r6, #0
 8007f34:	341a      	adds	r4, #26
 8007f36:	42b5      	cmp	r5, r6
 8007f38:	d11a      	bne.n	8007f70 <_printf_common+0xc8>
 8007f3a:	2000      	movs	r0, #0
 8007f3c:	e008      	b.n	8007f50 <_printf_common+0xa8>
 8007f3e:	2301      	movs	r3, #1
 8007f40:	4652      	mov	r2, sl
 8007f42:	4649      	mov	r1, r9
 8007f44:	4638      	mov	r0, r7
 8007f46:	47c0      	blx	r8
 8007f48:	3001      	adds	r0, #1
 8007f4a:	d103      	bne.n	8007f54 <_printf_common+0xac>
 8007f4c:	f04f 30ff 	mov.w	r0, #4294967295
 8007f50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f54:	3501      	adds	r5, #1
 8007f56:	e7c6      	b.n	8007ee6 <_printf_common+0x3e>
 8007f58:	18e1      	adds	r1, r4, r3
 8007f5a:	1c5a      	adds	r2, r3, #1
 8007f5c:	2030      	movs	r0, #48	; 0x30
 8007f5e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007f62:	4422      	add	r2, r4
 8007f64:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007f68:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007f6c:	3302      	adds	r3, #2
 8007f6e:	e7c7      	b.n	8007f00 <_printf_common+0x58>
 8007f70:	2301      	movs	r3, #1
 8007f72:	4622      	mov	r2, r4
 8007f74:	4649      	mov	r1, r9
 8007f76:	4638      	mov	r0, r7
 8007f78:	47c0      	blx	r8
 8007f7a:	3001      	adds	r0, #1
 8007f7c:	d0e6      	beq.n	8007f4c <_printf_common+0xa4>
 8007f7e:	3601      	adds	r6, #1
 8007f80:	e7d9      	b.n	8007f36 <_printf_common+0x8e>
	...

08007f84 <_printf_i>:
 8007f84:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007f88:	7e0f      	ldrb	r7, [r1, #24]
 8007f8a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007f8c:	2f78      	cmp	r7, #120	; 0x78
 8007f8e:	4691      	mov	r9, r2
 8007f90:	4680      	mov	r8, r0
 8007f92:	460c      	mov	r4, r1
 8007f94:	469a      	mov	sl, r3
 8007f96:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007f9a:	d807      	bhi.n	8007fac <_printf_i+0x28>
 8007f9c:	2f62      	cmp	r7, #98	; 0x62
 8007f9e:	d80a      	bhi.n	8007fb6 <_printf_i+0x32>
 8007fa0:	2f00      	cmp	r7, #0
 8007fa2:	f000 80d4 	beq.w	800814e <_printf_i+0x1ca>
 8007fa6:	2f58      	cmp	r7, #88	; 0x58
 8007fa8:	f000 80c0 	beq.w	800812c <_printf_i+0x1a8>
 8007fac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007fb0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007fb4:	e03a      	b.n	800802c <_printf_i+0xa8>
 8007fb6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007fba:	2b15      	cmp	r3, #21
 8007fbc:	d8f6      	bhi.n	8007fac <_printf_i+0x28>
 8007fbe:	a101      	add	r1, pc, #4	; (adr r1, 8007fc4 <_printf_i+0x40>)
 8007fc0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007fc4:	0800801d 	.word	0x0800801d
 8007fc8:	08008031 	.word	0x08008031
 8007fcc:	08007fad 	.word	0x08007fad
 8007fd0:	08007fad 	.word	0x08007fad
 8007fd4:	08007fad 	.word	0x08007fad
 8007fd8:	08007fad 	.word	0x08007fad
 8007fdc:	08008031 	.word	0x08008031
 8007fe0:	08007fad 	.word	0x08007fad
 8007fe4:	08007fad 	.word	0x08007fad
 8007fe8:	08007fad 	.word	0x08007fad
 8007fec:	08007fad 	.word	0x08007fad
 8007ff0:	08008135 	.word	0x08008135
 8007ff4:	0800805d 	.word	0x0800805d
 8007ff8:	080080ef 	.word	0x080080ef
 8007ffc:	08007fad 	.word	0x08007fad
 8008000:	08007fad 	.word	0x08007fad
 8008004:	08008157 	.word	0x08008157
 8008008:	08007fad 	.word	0x08007fad
 800800c:	0800805d 	.word	0x0800805d
 8008010:	08007fad 	.word	0x08007fad
 8008014:	08007fad 	.word	0x08007fad
 8008018:	080080f7 	.word	0x080080f7
 800801c:	682b      	ldr	r3, [r5, #0]
 800801e:	1d1a      	adds	r2, r3, #4
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	602a      	str	r2, [r5, #0]
 8008024:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008028:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800802c:	2301      	movs	r3, #1
 800802e:	e09f      	b.n	8008170 <_printf_i+0x1ec>
 8008030:	6820      	ldr	r0, [r4, #0]
 8008032:	682b      	ldr	r3, [r5, #0]
 8008034:	0607      	lsls	r7, r0, #24
 8008036:	f103 0104 	add.w	r1, r3, #4
 800803a:	6029      	str	r1, [r5, #0]
 800803c:	d501      	bpl.n	8008042 <_printf_i+0xbe>
 800803e:	681e      	ldr	r6, [r3, #0]
 8008040:	e003      	b.n	800804a <_printf_i+0xc6>
 8008042:	0646      	lsls	r6, r0, #25
 8008044:	d5fb      	bpl.n	800803e <_printf_i+0xba>
 8008046:	f9b3 6000 	ldrsh.w	r6, [r3]
 800804a:	2e00      	cmp	r6, #0
 800804c:	da03      	bge.n	8008056 <_printf_i+0xd2>
 800804e:	232d      	movs	r3, #45	; 0x2d
 8008050:	4276      	negs	r6, r6
 8008052:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008056:	485a      	ldr	r0, [pc, #360]	; (80081c0 <_printf_i+0x23c>)
 8008058:	230a      	movs	r3, #10
 800805a:	e012      	b.n	8008082 <_printf_i+0xfe>
 800805c:	682b      	ldr	r3, [r5, #0]
 800805e:	6820      	ldr	r0, [r4, #0]
 8008060:	1d19      	adds	r1, r3, #4
 8008062:	6029      	str	r1, [r5, #0]
 8008064:	0605      	lsls	r5, r0, #24
 8008066:	d501      	bpl.n	800806c <_printf_i+0xe8>
 8008068:	681e      	ldr	r6, [r3, #0]
 800806a:	e002      	b.n	8008072 <_printf_i+0xee>
 800806c:	0641      	lsls	r1, r0, #25
 800806e:	d5fb      	bpl.n	8008068 <_printf_i+0xe4>
 8008070:	881e      	ldrh	r6, [r3, #0]
 8008072:	4853      	ldr	r0, [pc, #332]	; (80081c0 <_printf_i+0x23c>)
 8008074:	2f6f      	cmp	r7, #111	; 0x6f
 8008076:	bf0c      	ite	eq
 8008078:	2308      	moveq	r3, #8
 800807a:	230a      	movne	r3, #10
 800807c:	2100      	movs	r1, #0
 800807e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008082:	6865      	ldr	r5, [r4, #4]
 8008084:	60a5      	str	r5, [r4, #8]
 8008086:	2d00      	cmp	r5, #0
 8008088:	bfa2      	ittt	ge
 800808a:	6821      	ldrge	r1, [r4, #0]
 800808c:	f021 0104 	bicge.w	r1, r1, #4
 8008090:	6021      	strge	r1, [r4, #0]
 8008092:	b90e      	cbnz	r6, 8008098 <_printf_i+0x114>
 8008094:	2d00      	cmp	r5, #0
 8008096:	d04b      	beq.n	8008130 <_printf_i+0x1ac>
 8008098:	4615      	mov	r5, r2
 800809a:	fbb6 f1f3 	udiv	r1, r6, r3
 800809e:	fb03 6711 	mls	r7, r3, r1, r6
 80080a2:	5dc7      	ldrb	r7, [r0, r7]
 80080a4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80080a8:	4637      	mov	r7, r6
 80080aa:	42bb      	cmp	r3, r7
 80080ac:	460e      	mov	r6, r1
 80080ae:	d9f4      	bls.n	800809a <_printf_i+0x116>
 80080b0:	2b08      	cmp	r3, #8
 80080b2:	d10b      	bne.n	80080cc <_printf_i+0x148>
 80080b4:	6823      	ldr	r3, [r4, #0]
 80080b6:	07de      	lsls	r6, r3, #31
 80080b8:	d508      	bpl.n	80080cc <_printf_i+0x148>
 80080ba:	6923      	ldr	r3, [r4, #16]
 80080bc:	6861      	ldr	r1, [r4, #4]
 80080be:	4299      	cmp	r1, r3
 80080c0:	bfde      	ittt	le
 80080c2:	2330      	movle	r3, #48	; 0x30
 80080c4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80080c8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80080cc:	1b52      	subs	r2, r2, r5
 80080ce:	6122      	str	r2, [r4, #16]
 80080d0:	f8cd a000 	str.w	sl, [sp]
 80080d4:	464b      	mov	r3, r9
 80080d6:	aa03      	add	r2, sp, #12
 80080d8:	4621      	mov	r1, r4
 80080da:	4640      	mov	r0, r8
 80080dc:	f7ff fee4 	bl	8007ea8 <_printf_common>
 80080e0:	3001      	adds	r0, #1
 80080e2:	d14a      	bne.n	800817a <_printf_i+0x1f6>
 80080e4:	f04f 30ff 	mov.w	r0, #4294967295
 80080e8:	b004      	add	sp, #16
 80080ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080ee:	6823      	ldr	r3, [r4, #0]
 80080f0:	f043 0320 	orr.w	r3, r3, #32
 80080f4:	6023      	str	r3, [r4, #0]
 80080f6:	4833      	ldr	r0, [pc, #204]	; (80081c4 <_printf_i+0x240>)
 80080f8:	2778      	movs	r7, #120	; 0x78
 80080fa:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80080fe:	6823      	ldr	r3, [r4, #0]
 8008100:	6829      	ldr	r1, [r5, #0]
 8008102:	061f      	lsls	r7, r3, #24
 8008104:	f851 6b04 	ldr.w	r6, [r1], #4
 8008108:	d402      	bmi.n	8008110 <_printf_i+0x18c>
 800810a:	065f      	lsls	r7, r3, #25
 800810c:	bf48      	it	mi
 800810e:	b2b6      	uxthmi	r6, r6
 8008110:	07df      	lsls	r7, r3, #31
 8008112:	bf48      	it	mi
 8008114:	f043 0320 	orrmi.w	r3, r3, #32
 8008118:	6029      	str	r1, [r5, #0]
 800811a:	bf48      	it	mi
 800811c:	6023      	strmi	r3, [r4, #0]
 800811e:	b91e      	cbnz	r6, 8008128 <_printf_i+0x1a4>
 8008120:	6823      	ldr	r3, [r4, #0]
 8008122:	f023 0320 	bic.w	r3, r3, #32
 8008126:	6023      	str	r3, [r4, #0]
 8008128:	2310      	movs	r3, #16
 800812a:	e7a7      	b.n	800807c <_printf_i+0xf8>
 800812c:	4824      	ldr	r0, [pc, #144]	; (80081c0 <_printf_i+0x23c>)
 800812e:	e7e4      	b.n	80080fa <_printf_i+0x176>
 8008130:	4615      	mov	r5, r2
 8008132:	e7bd      	b.n	80080b0 <_printf_i+0x12c>
 8008134:	682b      	ldr	r3, [r5, #0]
 8008136:	6826      	ldr	r6, [r4, #0]
 8008138:	6961      	ldr	r1, [r4, #20]
 800813a:	1d18      	adds	r0, r3, #4
 800813c:	6028      	str	r0, [r5, #0]
 800813e:	0635      	lsls	r5, r6, #24
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	d501      	bpl.n	8008148 <_printf_i+0x1c4>
 8008144:	6019      	str	r1, [r3, #0]
 8008146:	e002      	b.n	800814e <_printf_i+0x1ca>
 8008148:	0670      	lsls	r0, r6, #25
 800814a:	d5fb      	bpl.n	8008144 <_printf_i+0x1c0>
 800814c:	8019      	strh	r1, [r3, #0]
 800814e:	2300      	movs	r3, #0
 8008150:	6123      	str	r3, [r4, #16]
 8008152:	4615      	mov	r5, r2
 8008154:	e7bc      	b.n	80080d0 <_printf_i+0x14c>
 8008156:	682b      	ldr	r3, [r5, #0]
 8008158:	1d1a      	adds	r2, r3, #4
 800815a:	602a      	str	r2, [r5, #0]
 800815c:	681d      	ldr	r5, [r3, #0]
 800815e:	6862      	ldr	r2, [r4, #4]
 8008160:	2100      	movs	r1, #0
 8008162:	4628      	mov	r0, r5
 8008164:	f7f8 f834 	bl	80001d0 <memchr>
 8008168:	b108      	cbz	r0, 800816e <_printf_i+0x1ea>
 800816a:	1b40      	subs	r0, r0, r5
 800816c:	6060      	str	r0, [r4, #4]
 800816e:	6863      	ldr	r3, [r4, #4]
 8008170:	6123      	str	r3, [r4, #16]
 8008172:	2300      	movs	r3, #0
 8008174:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008178:	e7aa      	b.n	80080d0 <_printf_i+0x14c>
 800817a:	6923      	ldr	r3, [r4, #16]
 800817c:	462a      	mov	r2, r5
 800817e:	4649      	mov	r1, r9
 8008180:	4640      	mov	r0, r8
 8008182:	47d0      	blx	sl
 8008184:	3001      	adds	r0, #1
 8008186:	d0ad      	beq.n	80080e4 <_printf_i+0x160>
 8008188:	6823      	ldr	r3, [r4, #0]
 800818a:	079b      	lsls	r3, r3, #30
 800818c:	d413      	bmi.n	80081b6 <_printf_i+0x232>
 800818e:	68e0      	ldr	r0, [r4, #12]
 8008190:	9b03      	ldr	r3, [sp, #12]
 8008192:	4298      	cmp	r0, r3
 8008194:	bfb8      	it	lt
 8008196:	4618      	movlt	r0, r3
 8008198:	e7a6      	b.n	80080e8 <_printf_i+0x164>
 800819a:	2301      	movs	r3, #1
 800819c:	4632      	mov	r2, r6
 800819e:	4649      	mov	r1, r9
 80081a0:	4640      	mov	r0, r8
 80081a2:	47d0      	blx	sl
 80081a4:	3001      	adds	r0, #1
 80081a6:	d09d      	beq.n	80080e4 <_printf_i+0x160>
 80081a8:	3501      	adds	r5, #1
 80081aa:	68e3      	ldr	r3, [r4, #12]
 80081ac:	9903      	ldr	r1, [sp, #12]
 80081ae:	1a5b      	subs	r3, r3, r1
 80081b0:	42ab      	cmp	r3, r5
 80081b2:	dcf2      	bgt.n	800819a <_printf_i+0x216>
 80081b4:	e7eb      	b.n	800818e <_printf_i+0x20a>
 80081b6:	2500      	movs	r5, #0
 80081b8:	f104 0619 	add.w	r6, r4, #25
 80081bc:	e7f5      	b.n	80081aa <_printf_i+0x226>
 80081be:	bf00      	nop
 80081c0:	0800cdae 	.word	0x0800cdae
 80081c4:	0800cdbf 	.word	0x0800cdbf

080081c8 <_scanf_float>:
 80081c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081cc:	b087      	sub	sp, #28
 80081ce:	4617      	mov	r7, r2
 80081d0:	9303      	str	r3, [sp, #12]
 80081d2:	688b      	ldr	r3, [r1, #8]
 80081d4:	1e5a      	subs	r2, r3, #1
 80081d6:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80081da:	bf83      	ittte	hi
 80081dc:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80081e0:	195b      	addhi	r3, r3, r5
 80081e2:	9302      	strhi	r3, [sp, #8]
 80081e4:	2300      	movls	r3, #0
 80081e6:	bf86      	itte	hi
 80081e8:	f240 135d 	movwhi	r3, #349	; 0x15d
 80081ec:	608b      	strhi	r3, [r1, #8]
 80081ee:	9302      	strls	r3, [sp, #8]
 80081f0:	680b      	ldr	r3, [r1, #0]
 80081f2:	468b      	mov	fp, r1
 80081f4:	2500      	movs	r5, #0
 80081f6:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80081fa:	f84b 3b1c 	str.w	r3, [fp], #28
 80081fe:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8008202:	4680      	mov	r8, r0
 8008204:	460c      	mov	r4, r1
 8008206:	465e      	mov	r6, fp
 8008208:	46aa      	mov	sl, r5
 800820a:	46a9      	mov	r9, r5
 800820c:	9501      	str	r5, [sp, #4]
 800820e:	68a2      	ldr	r2, [r4, #8]
 8008210:	b152      	cbz	r2, 8008228 <_scanf_float+0x60>
 8008212:	683b      	ldr	r3, [r7, #0]
 8008214:	781b      	ldrb	r3, [r3, #0]
 8008216:	2b4e      	cmp	r3, #78	; 0x4e
 8008218:	d864      	bhi.n	80082e4 <_scanf_float+0x11c>
 800821a:	2b40      	cmp	r3, #64	; 0x40
 800821c:	d83c      	bhi.n	8008298 <_scanf_float+0xd0>
 800821e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8008222:	b2c8      	uxtb	r0, r1
 8008224:	280e      	cmp	r0, #14
 8008226:	d93a      	bls.n	800829e <_scanf_float+0xd6>
 8008228:	f1b9 0f00 	cmp.w	r9, #0
 800822c:	d003      	beq.n	8008236 <_scanf_float+0x6e>
 800822e:	6823      	ldr	r3, [r4, #0]
 8008230:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008234:	6023      	str	r3, [r4, #0]
 8008236:	f10a 3aff 	add.w	sl, sl, #4294967295
 800823a:	f1ba 0f01 	cmp.w	sl, #1
 800823e:	f200 8113 	bhi.w	8008468 <_scanf_float+0x2a0>
 8008242:	455e      	cmp	r6, fp
 8008244:	f200 8105 	bhi.w	8008452 <_scanf_float+0x28a>
 8008248:	2501      	movs	r5, #1
 800824a:	4628      	mov	r0, r5
 800824c:	b007      	add	sp, #28
 800824e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008252:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8008256:	2a0d      	cmp	r2, #13
 8008258:	d8e6      	bhi.n	8008228 <_scanf_float+0x60>
 800825a:	a101      	add	r1, pc, #4	; (adr r1, 8008260 <_scanf_float+0x98>)
 800825c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008260:	0800839f 	.word	0x0800839f
 8008264:	08008229 	.word	0x08008229
 8008268:	08008229 	.word	0x08008229
 800826c:	08008229 	.word	0x08008229
 8008270:	080083ff 	.word	0x080083ff
 8008274:	080083d7 	.word	0x080083d7
 8008278:	08008229 	.word	0x08008229
 800827c:	08008229 	.word	0x08008229
 8008280:	080083ad 	.word	0x080083ad
 8008284:	08008229 	.word	0x08008229
 8008288:	08008229 	.word	0x08008229
 800828c:	08008229 	.word	0x08008229
 8008290:	08008229 	.word	0x08008229
 8008294:	08008365 	.word	0x08008365
 8008298:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800829c:	e7db      	b.n	8008256 <_scanf_float+0x8e>
 800829e:	290e      	cmp	r1, #14
 80082a0:	d8c2      	bhi.n	8008228 <_scanf_float+0x60>
 80082a2:	a001      	add	r0, pc, #4	; (adr r0, 80082a8 <_scanf_float+0xe0>)
 80082a4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80082a8:	08008357 	.word	0x08008357
 80082ac:	08008229 	.word	0x08008229
 80082b0:	08008357 	.word	0x08008357
 80082b4:	080083eb 	.word	0x080083eb
 80082b8:	08008229 	.word	0x08008229
 80082bc:	08008305 	.word	0x08008305
 80082c0:	08008341 	.word	0x08008341
 80082c4:	08008341 	.word	0x08008341
 80082c8:	08008341 	.word	0x08008341
 80082cc:	08008341 	.word	0x08008341
 80082d0:	08008341 	.word	0x08008341
 80082d4:	08008341 	.word	0x08008341
 80082d8:	08008341 	.word	0x08008341
 80082dc:	08008341 	.word	0x08008341
 80082e0:	08008341 	.word	0x08008341
 80082e4:	2b6e      	cmp	r3, #110	; 0x6e
 80082e6:	d809      	bhi.n	80082fc <_scanf_float+0x134>
 80082e8:	2b60      	cmp	r3, #96	; 0x60
 80082ea:	d8b2      	bhi.n	8008252 <_scanf_float+0x8a>
 80082ec:	2b54      	cmp	r3, #84	; 0x54
 80082ee:	d077      	beq.n	80083e0 <_scanf_float+0x218>
 80082f0:	2b59      	cmp	r3, #89	; 0x59
 80082f2:	d199      	bne.n	8008228 <_scanf_float+0x60>
 80082f4:	2d07      	cmp	r5, #7
 80082f6:	d197      	bne.n	8008228 <_scanf_float+0x60>
 80082f8:	2508      	movs	r5, #8
 80082fa:	e029      	b.n	8008350 <_scanf_float+0x188>
 80082fc:	2b74      	cmp	r3, #116	; 0x74
 80082fe:	d06f      	beq.n	80083e0 <_scanf_float+0x218>
 8008300:	2b79      	cmp	r3, #121	; 0x79
 8008302:	e7f6      	b.n	80082f2 <_scanf_float+0x12a>
 8008304:	6821      	ldr	r1, [r4, #0]
 8008306:	05c8      	lsls	r0, r1, #23
 8008308:	d51a      	bpl.n	8008340 <_scanf_float+0x178>
 800830a:	9b02      	ldr	r3, [sp, #8]
 800830c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8008310:	6021      	str	r1, [r4, #0]
 8008312:	f109 0901 	add.w	r9, r9, #1
 8008316:	b11b      	cbz	r3, 8008320 <_scanf_float+0x158>
 8008318:	3b01      	subs	r3, #1
 800831a:	3201      	adds	r2, #1
 800831c:	9302      	str	r3, [sp, #8]
 800831e:	60a2      	str	r2, [r4, #8]
 8008320:	68a3      	ldr	r3, [r4, #8]
 8008322:	3b01      	subs	r3, #1
 8008324:	60a3      	str	r3, [r4, #8]
 8008326:	6923      	ldr	r3, [r4, #16]
 8008328:	3301      	adds	r3, #1
 800832a:	6123      	str	r3, [r4, #16]
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	3b01      	subs	r3, #1
 8008330:	2b00      	cmp	r3, #0
 8008332:	607b      	str	r3, [r7, #4]
 8008334:	f340 8084 	ble.w	8008440 <_scanf_float+0x278>
 8008338:	683b      	ldr	r3, [r7, #0]
 800833a:	3301      	adds	r3, #1
 800833c:	603b      	str	r3, [r7, #0]
 800833e:	e766      	b.n	800820e <_scanf_float+0x46>
 8008340:	eb1a 0f05 	cmn.w	sl, r5
 8008344:	f47f af70 	bne.w	8008228 <_scanf_float+0x60>
 8008348:	6822      	ldr	r2, [r4, #0]
 800834a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800834e:	6022      	str	r2, [r4, #0]
 8008350:	f806 3b01 	strb.w	r3, [r6], #1
 8008354:	e7e4      	b.n	8008320 <_scanf_float+0x158>
 8008356:	6822      	ldr	r2, [r4, #0]
 8008358:	0610      	lsls	r0, r2, #24
 800835a:	f57f af65 	bpl.w	8008228 <_scanf_float+0x60>
 800835e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008362:	e7f4      	b.n	800834e <_scanf_float+0x186>
 8008364:	f1ba 0f00 	cmp.w	sl, #0
 8008368:	d10e      	bne.n	8008388 <_scanf_float+0x1c0>
 800836a:	f1b9 0f00 	cmp.w	r9, #0
 800836e:	d10e      	bne.n	800838e <_scanf_float+0x1c6>
 8008370:	6822      	ldr	r2, [r4, #0]
 8008372:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008376:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800837a:	d108      	bne.n	800838e <_scanf_float+0x1c6>
 800837c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008380:	6022      	str	r2, [r4, #0]
 8008382:	f04f 0a01 	mov.w	sl, #1
 8008386:	e7e3      	b.n	8008350 <_scanf_float+0x188>
 8008388:	f1ba 0f02 	cmp.w	sl, #2
 800838c:	d055      	beq.n	800843a <_scanf_float+0x272>
 800838e:	2d01      	cmp	r5, #1
 8008390:	d002      	beq.n	8008398 <_scanf_float+0x1d0>
 8008392:	2d04      	cmp	r5, #4
 8008394:	f47f af48 	bne.w	8008228 <_scanf_float+0x60>
 8008398:	3501      	adds	r5, #1
 800839a:	b2ed      	uxtb	r5, r5
 800839c:	e7d8      	b.n	8008350 <_scanf_float+0x188>
 800839e:	f1ba 0f01 	cmp.w	sl, #1
 80083a2:	f47f af41 	bne.w	8008228 <_scanf_float+0x60>
 80083a6:	f04f 0a02 	mov.w	sl, #2
 80083aa:	e7d1      	b.n	8008350 <_scanf_float+0x188>
 80083ac:	b97d      	cbnz	r5, 80083ce <_scanf_float+0x206>
 80083ae:	f1b9 0f00 	cmp.w	r9, #0
 80083b2:	f47f af3c 	bne.w	800822e <_scanf_float+0x66>
 80083b6:	6822      	ldr	r2, [r4, #0]
 80083b8:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80083bc:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80083c0:	f47f af39 	bne.w	8008236 <_scanf_float+0x6e>
 80083c4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80083c8:	6022      	str	r2, [r4, #0]
 80083ca:	2501      	movs	r5, #1
 80083cc:	e7c0      	b.n	8008350 <_scanf_float+0x188>
 80083ce:	2d03      	cmp	r5, #3
 80083d0:	d0e2      	beq.n	8008398 <_scanf_float+0x1d0>
 80083d2:	2d05      	cmp	r5, #5
 80083d4:	e7de      	b.n	8008394 <_scanf_float+0x1cc>
 80083d6:	2d02      	cmp	r5, #2
 80083d8:	f47f af26 	bne.w	8008228 <_scanf_float+0x60>
 80083dc:	2503      	movs	r5, #3
 80083de:	e7b7      	b.n	8008350 <_scanf_float+0x188>
 80083e0:	2d06      	cmp	r5, #6
 80083e2:	f47f af21 	bne.w	8008228 <_scanf_float+0x60>
 80083e6:	2507      	movs	r5, #7
 80083e8:	e7b2      	b.n	8008350 <_scanf_float+0x188>
 80083ea:	6822      	ldr	r2, [r4, #0]
 80083ec:	0591      	lsls	r1, r2, #22
 80083ee:	f57f af1b 	bpl.w	8008228 <_scanf_float+0x60>
 80083f2:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80083f6:	6022      	str	r2, [r4, #0]
 80083f8:	f8cd 9004 	str.w	r9, [sp, #4]
 80083fc:	e7a8      	b.n	8008350 <_scanf_float+0x188>
 80083fe:	6822      	ldr	r2, [r4, #0]
 8008400:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8008404:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8008408:	d006      	beq.n	8008418 <_scanf_float+0x250>
 800840a:	0550      	lsls	r0, r2, #21
 800840c:	f57f af0c 	bpl.w	8008228 <_scanf_float+0x60>
 8008410:	f1b9 0f00 	cmp.w	r9, #0
 8008414:	f43f af0f 	beq.w	8008236 <_scanf_float+0x6e>
 8008418:	0591      	lsls	r1, r2, #22
 800841a:	bf58      	it	pl
 800841c:	9901      	ldrpl	r1, [sp, #4]
 800841e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008422:	bf58      	it	pl
 8008424:	eba9 0101 	subpl.w	r1, r9, r1
 8008428:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800842c:	bf58      	it	pl
 800842e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8008432:	6022      	str	r2, [r4, #0]
 8008434:	f04f 0900 	mov.w	r9, #0
 8008438:	e78a      	b.n	8008350 <_scanf_float+0x188>
 800843a:	f04f 0a03 	mov.w	sl, #3
 800843e:	e787      	b.n	8008350 <_scanf_float+0x188>
 8008440:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008444:	4639      	mov	r1, r7
 8008446:	4640      	mov	r0, r8
 8008448:	4798      	blx	r3
 800844a:	2800      	cmp	r0, #0
 800844c:	f43f aedf 	beq.w	800820e <_scanf_float+0x46>
 8008450:	e6ea      	b.n	8008228 <_scanf_float+0x60>
 8008452:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008456:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800845a:	463a      	mov	r2, r7
 800845c:	4640      	mov	r0, r8
 800845e:	4798      	blx	r3
 8008460:	6923      	ldr	r3, [r4, #16]
 8008462:	3b01      	subs	r3, #1
 8008464:	6123      	str	r3, [r4, #16]
 8008466:	e6ec      	b.n	8008242 <_scanf_float+0x7a>
 8008468:	1e6b      	subs	r3, r5, #1
 800846a:	2b06      	cmp	r3, #6
 800846c:	d825      	bhi.n	80084ba <_scanf_float+0x2f2>
 800846e:	2d02      	cmp	r5, #2
 8008470:	d836      	bhi.n	80084e0 <_scanf_float+0x318>
 8008472:	455e      	cmp	r6, fp
 8008474:	f67f aee8 	bls.w	8008248 <_scanf_float+0x80>
 8008478:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800847c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008480:	463a      	mov	r2, r7
 8008482:	4640      	mov	r0, r8
 8008484:	4798      	blx	r3
 8008486:	6923      	ldr	r3, [r4, #16]
 8008488:	3b01      	subs	r3, #1
 800848a:	6123      	str	r3, [r4, #16]
 800848c:	e7f1      	b.n	8008472 <_scanf_float+0x2aa>
 800848e:	9802      	ldr	r0, [sp, #8]
 8008490:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008494:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8008498:	9002      	str	r0, [sp, #8]
 800849a:	463a      	mov	r2, r7
 800849c:	4640      	mov	r0, r8
 800849e:	4798      	blx	r3
 80084a0:	6923      	ldr	r3, [r4, #16]
 80084a2:	3b01      	subs	r3, #1
 80084a4:	6123      	str	r3, [r4, #16]
 80084a6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80084aa:	fa5f fa8a 	uxtb.w	sl, sl
 80084ae:	f1ba 0f02 	cmp.w	sl, #2
 80084b2:	d1ec      	bne.n	800848e <_scanf_float+0x2c6>
 80084b4:	3d03      	subs	r5, #3
 80084b6:	b2ed      	uxtb	r5, r5
 80084b8:	1b76      	subs	r6, r6, r5
 80084ba:	6823      	ldr	r3, [r4, #0]
 80084bc:	05da      	lsls	r2, r3, #23
 80084be:	d52f      	bpl.n	8008520 <_scanf_float+0x358>
 80084c0:	055b      	lsls	r3, r3, #21
 80084c2:	d510      	bpl.n	80084e6 <_scanf_float+0x31e>
 80084c4:	455e      	cmp	r6, fp
 80084c6:	f67f aebf 	bls.w	8008248 <_scanf_float+0x80>
 80084ca:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80084ce:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80084d2:	463a      	mov	r2, r7
 80084d4:	4640      	mov	r0, r8
 80084d6:	4798      	blx	r3
 80084d8:	6923      	ldr	r3, [r4, #16]
 80084da:	3b01      	subs	r3, #1
 80084dc:	6123      	str	r3, [r4, #16]
 80084de:	e7f1      	b.n	80084c4 <_scanf_float+0x2fc>
 80084e0:	46aa      	mov	sl, r5
 80084e2:	9602      	str	r6, [sp, #8]
 80084e4:	e7df      	b.n	80084a6 <_scanf_float+0x2de>
 80084e6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80084ea:	6923      	ldr	r3, [r4, #16]
 80084ec:	2965      	cmp	r1, #101	; 0x65
 80084ee:	f103 33ff 	add.w	r3, r3, #4294967295
 80084f2:	f106 35ff 	add.w	r5, r6, #4294967295
 80084f6:	6123      	str	r3, [r4, #16]
 80084f8:	d00c      	beq.n	8008514 <_scanf_float+0x34c>
 80084fa:	2945      	cmp	r1, #69	; 0x45
 80084fc:	d00a      	beq.n	8008514 <_scanf_float+0x34c>
 80084fe:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008502:	463a      	mov	r2, r7
 8008504:	4640      	mov	r0, r8
 8008506:	4798      	blx	r3
 8008508:	6923      	ldr	r3, [r4, #16]
 800850a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800850e:	3b01      	subs	r3, #1
 8008510:	1eb5      	subs	r5, r6, #2
 8008512:	6123      	str	r3, [r4, #16]
 8008514:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008518:	463a      	mov	r2, r7
 800851a:	4640      	mov	r0, r8
 800851c:	4798      	blx	r3
 800851e:	462e      	mov	r6, r5
 8008520:	6825      	ldr	r5, [r4, #0]
 8008522:	f015 0510 	ands.w	r5, r5, #16
 8008526:	d158      	bne.n	80085da <_scanf_float+0x412>
 8008528:	7035      	strb	r5, [r6, #0]
 800852a:	6823      	ldr	r3, [r4, #0]
 800852c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008530:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008534:	d11c      	bne.n	8008570 <_scanf_float+0x3a8>
 8008536:	9b01      	ldr	r3, [sp, #4]
 8008538:	454b      	cmp	r3, r9
 800853a:	eba3 0209 	sub.w	r2, r3, r9
 800853e:	d124      	bne.n	800858a <_scanf_float+0x3c2>
 8008540:	2200      	movs	r2, #0
 8008542:	4659      	mov	r1, fp
 8008544:	4640      	mov	r0, r8
 8008546:	f002 fc4f 	bl	800ade8 <_strtod_r>
 800854a:	9b03      	ldr	r3, [sp, #12]
 800854c:	6821      	ldr	r1, [r4, #0]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	f011 0f02 	tst.w	r1, #2
 8008554:	ec57 6b10 	vmov	r6, r7, d0
 8008558:	f103 0204 	add.w	r2, r3, #4
 800855c:	d020      	beq.n	80085a0 <_scanf_float+0x3d8>
 800855e:	9903      	ldr	r1, [sp, #12]
 8008560:	600a      	str	r2, [r1, #0]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	e9c3 6700 	strd	r6, r7, [r3]
 8008568:	68e3      	ldr	r3, [r4, #12]
 800856a:	3301      	adds	r3, #1
 800856c:	60e3      	str	r3, [r4, #12]
 800856e:	e66c      	b.n	800824a <_scanf_float+0x82>
 8008570:	9b04      	ldr	r3, [sp, #16]
 8008572:	2b00      	cmp	r3, #0
 8008574:	d0e4      	beq.n	8008540 <_scanf_float+0x378>
 8008576:	9905      	ldr	r1, [sp, #20]
 8008578:	230a      	movs	r3, #10
 800857a:	462a      	mov	r2, r5
 800857c:	3101      	adds	r1, #1
 800857e:	4640      	mov	r0, r8
 8008580:	f002 fcba 	bl	800aef8 <_strtol_r>
 8008584:	9b04      	ldr	r3, [sp, #16]
 8008586:	9e05      	ldr	r6, [sp, #20]
 8008588:	1ac2      	subs	r2, r0, r3
 800858a:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800858e:	429e      	cmp	r6, r3
 8008590:	bf28      	it	cs
 8008592:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8008596:	4912      	ldr	r1, [pc, #72]	; (80085e0 <_scanf_float+0x418>)
 8008598:	4630      	mov	r0, r6
 800859a:	f000 f909 	bl	80087b0 <siprintf>
 800859e:	e7cf      	b.n	8008540 <_scanf_float+0x378>
 80085a0:	f011 0f04 	tst.w	r1, #4
 80085a4:	9903      	ldr	r1, [sp, #12]
 80085a6:	600a      	str	r2, [r1, #0]
 80085a8:	d1db      	bne.n	8008562 <_scanf_float+0x39a>
 80085aa:	f8d3 8000 	ldr.w	r8, [r3]
 80085ae:	ee10 2a10 	vmov	r2, s0
 80085b2:	ee10 0a10 	vmov	r0, s0
 80085b6:	463b      	mov	r3, r7
 80085b8:	4639      	mov	r1, r7
 80085ba:	f7f8 fab7 	bl	8000b2c <__aeabi_dcmpun>
 80085be:	b128      	cbz	r0, 80085cc <_scanf_float+0x404>
 80085c0:	4808      	ldr	r0, [pc, #32]	; (80085e4 <_scanf_float+0x41c>)
 80085c2:	f000 f9d7 	bl	8008974 <nanf>
 80085c6:	ed88 0a00 	vstr	s0, [r8]
 80085ca:	e7cd      	b.n	8008568 <_scanf_float+0x3a0>
 80085cc:	4630      	mov	r0, r6
 80085ce:	4639      	mov	r1, r7
 80085d0:	f7f8 fb0a 	bl	8000be8 <__aeabi_d2f>
 80085d4:	f8c8 0000 	str.w	r0, [r8]
 80085d8:	e7c6      	b.n	8008568 <_scanf_float+0x3a0>
 80085da:	2500      	movs	r5, #0
 80085dc:	e635      	b.n	800824a <_scanf_float+0x82>
 80085de:	bf00      	nop
 80085e0:	0800cdd0 	.word	0x0800cdd0
 80085e4:	0800d165 	.word	0x0800d165

080085e8 <std>:
 80085e8:	2300      	movs	r3, #0
 80085ea:	b510      	push	{r4, lr}
 80085ec:	4604      	mov	r4, r0
 80085ee:	e9c0 3300 	strd	r3, r3, [r0]
 80085f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80085f6:	6083      	str	r3, [r0, #8]
 80085f8:	8181      	strh	r1, [r0, #12]
 80085fa:	6643      	str	r3, [r0, #100]	; 0x64
 80085fc:	81c2      	strh	r2, [r0, #14]
 80085fe:	6183      	str	r3, [r0, #24]
 8008600:	4619      	mov	r1, r3
 8008602:	2208      	movs	r2, #8
 8008604:	305c      	adds	r0, #92	; 0x5c
 8008606:	f000 f936 	bl	8008876 <memset>
 800860a:	4b05      	ldr	r3, [pc, #20]	; (8008620 <std+0x38>)
 800860c:	6263      	str	r3, [r4, #36]	; 0x24
 800860e:	4b05      	ldr	r3, [pc, #20]	; (8008624 <std+0x3c>)
 8008610:	62a3      	str	r3, [r4, #40]	; 0x28
 8008612:	4b05      	ldr	r3, [pc, #20]	; (8008628 <std+0x40>)
 8008614:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008616:	4b05      	ldr	r3, [pc, #20]	; (800862c <std+0x44>)
 8008618:	6224      	str	r4, [r4, #32]
 800861a:	6323      	str	r3, [r4, #48]	; 0x30
 800861c:	bd10      	pop	{r4, pc}
 800861e:	bf00      	nop
 8008620:	080087f1 	.word	0x080087f1
 8008624:	08008813 	.word	0x08008813
 8008628:	0800884b 	.word	0x0800884b
 800862c:	0800886f 	.word	0x0800886f

08008630 <stdio_exit_handler>:
 8008630:	4a02      	ldr	r2, [pc, #8]	; (800863c <stdio_exit_handler+0xc>)
 8008632:	4903      	ldr	r1, [pc, #12]	; (8008640 <stdio_exit_handler+0x10>)
 8008634:	4803      	ldr	r0, [pc, #12]	; (8008644 <stdio_exit_handler+0x14>)
 8008636:	f000 b869 	b.w	800870c <_fwalk_sglue>
 800863a:	bf00      	nop
 800863c:	2000002c 	.word	0x2000002c
 8008640:	0800b2b9 	.word	0x0800b2b9
 8008644:	20000038 	.word	0x20000038

08008648 <cleanup_stdio>:
 8008648:	6841      	ldr	r1, [r0, #4]
 800864a:	4b0c      	ldr	r3, [pc, #48]	; (800867c <cleanup_stdio+0x34>)
 800864c:	4299      	cmp	r1, r3
 800864e:	b510      	push	{r4, lr}
 8008650:	4604      	mov	r4, r0
 8008652:	d001      	beq.n	8008658 <cleanup_stdio+0x10>
 8008654:	f002 fe30 	bl	800b2b8 <_fflush_r>
 8008658:	68a1      	ldr	r1, [r4, #8]
 800865a:	4b09      	ldr	r3, [pc, #36]	; (8008680 <cleanup_stdio+0x38>)
 800865c:	4299      	cmp	r1, r3
 800865e:	d002      	beq.n	8008666 <cleanup_stdio+0x1e>
 8008660:	4620      	mov	r0, r4
 8008662:	f002 fe29 	bl	800b2b8 <_fflush_r>
 8008666:	68e1      	ldr	r1, [r4, #12]
 8008668:	4b06      	ldr	r3, [pc, #24]	; (8008684 <cleanup_stdio+0x3c>)
 800866a:	4299      	cmp	r1, r3
 800866c:	d004      	beq.n	8008678 <cleanup_stdio+0x30>
 800866e:	4620      	mov	r0, r4
 8008670:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008674:	f002 be20 	b.w	800b2b8 <_fflush_r>
 8008678:	bd10      	pop	{r4, pc}
 800867a:	bf00      	nop
 800867c:	20000588 	.word	0x20000588
 8008680:	200005f0 	.word	0x200005f0
 8008684:	20000658 	.word	0x20000658

08008688 <global_stdio_init.part.0>:
 8008688:	b510      	push	{r4, lr}
 800868a:	4b0b      	ldr	r3, [pc, #44]	; (80086b8 <global_stdio_init.part.0+0x30>)
 800868c:	4c0b      	ldr	r4, [pc, #44]	; (80086bc <global_stdio_init.part.0+0x34>)
 800868e:	4a0c      	ldr	r2, [pc, #48]	; (80086c0 <global_stdio_init.part.0+0x38>)
 8008690:	601a      	str	r2, [r3, #0]
 8008692:	4620      	mov	r0, r4
 8008694:	2200      	movs	r2, #0
 8008696:	2104      	movs	r1, #4
 8008698:	f7ff ffa6 	bl	80085e8 <std>
 800869c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80086a0:	2201      	movs	r2, #1
 80086a2:	2109      	movs	r1, #9
 80086a4:	f7ff ffa0 	bl	80085e8 <std>
 80086a8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80086ac:	2202      	movs	r2, #2
 80086ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80086b2:	2112      	movs	r1, #18
 80086b4:	f7ff bf98 	b.w	80085e8 <std>
 80086b8:	200006c0 	.word	0x200006c0
 80086bc:	20000588 	.word	0x20000588
 80086c0:	08008631 	.word	0x08008631

080086c4 <__sfp_lock_acquire>:
 80086c4:	4801      	ldr	r0, [pc, #4]	; (80086cc <__sfp_lock_acquire+0x8>)
 80086c6:	f000 b953 	b.w	8008970 <__retarget_lock_acquire_recursive>
 80086ca:	bf00      	nop
 80086cc:	200006c9 	.word	0x200006c9

080086d0 <__sfp_lock_release>:
 80086d0:	4801      	ldr	r0, [pc, #4]	; (80086d8 <__sfp_lock_release+0x8>)
 80086d2:	f000 b94e 	b.w	8008972 <__retarget_lock_release_recursive>
 80086d6:	bf00      	nop
 80086d8:	200006c9 	.word	0x200006c9

080086dc <__sinit>:
 80086dc:	b510      	push	{r4, lr}
 80086de:	4604      	mov	r4, r0
 80086e0:	f7ff fff0 	bl	80086c4 <__sfp_lock_acquire>
 80086e4:	6a23      	ldr	r3, [r4, #32]
 80086e6:	b11b      	cbz	r3, 80086f0 <__sinit+0x14>
 80086e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80086ec:	f7ff bff0 	b.w	80086d0 <__sfp_lock_release>
 80086f0:	4b04      	ldr	r3, [pc, #16]	; (8008704 <__sinit+0x28>)
 80086f2:	6223      	str	r3, [r4, #32]
 80086f4:	4b04      	ldr	r3, [pc, #16]	; (8008708 <__sinit+0x2c>)
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d1f5      	bne.n	80086e8 <__sinit+0xc>
 80086fc:	f7ff ffc4 	bl	8008688 <global_stdio_init.part.0>
 8008700:	e7f2      	b.n	80086e8 <__sinit+0xc>
 8008702:	bf00      	nop
 8008704:	08008649 	.word	0x08008649
 8008708:	200006c0 	.word	0x200006c0

0800870c <_fwalk_sglue>:
 800870c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008710:	4607      	mov	r7, r0
 8008712:	4688      	mov	r8, r1
 8008714:	4614      	mov	r4, r2
 8008716:	2600      	movs	r6, #0
 8008718:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800871c:	f1b9 0901 	subs.w	r9, r9, #1
 8008720:	d505      	bpl.n	800872e <_fwalk_sglue+0x22>
 8008722:	6824      	ldr	r4, [r4, #0]
 8008724:	2c00      	cmp	r4, #0
 8008726:	d1f7      	bne.n	8008718 <_fwalk_sglue+0xc>
 8008728:	4630      	mov	r0, r6
 800872a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800872e:	89ab      	ldrh	r3, [r5, #12]
 8008730:	2b01      	cmp	r3, #1
 8008732:	d907      	bls.n	8008744 <_fwalk_sglue+0x38>
 8008734:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008738:	3301      	adds	r3, #1
 800873a:	d003      	beq.n	8008744 <_fwalk_sglue+0x38>
 800873c:	4629      	mov	r1, r5
 800873e:	4638      	mov	r0, r7
 8008740:	47c0      	blx	r8
 8008742:	4306      	orrs	r6, r0
 8008744:	3568      	adds	r5, #104	; 0x68
 8008746:	e7e9      	b.n	800871c <_fwalk_sglue+0x10>

08008748 <sniprintf>:
 8008748:	b40c      	push	{r2, r3}
 800874a:	b530      	push	{r4, r5, lr}
 800874c:	4b17      	ldr	r3, [pc, #92]	; (80087ac <sniprintf+0x64>)
 800874e:	1e0c      	subs	r4, r1, #0
 8008750:	681d      	ldr	r5, [r3, #0]
 8008752:	b09d      	sub	sp, #116	; 0x74
 8008754:	da08      	bge.n	8008768 <sniprintf+0x20>
 8008756:	238b      	movs	r3, #139	; 0x8b
 8008758:	602b      	str	r3, [r5, #0]
 800875a:	f04f 30ff 	mov.w	r0, #4294967295
 800875e:	b01d      	add	sp, #116	; 0x74
 8008760:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008764:	b002      	add	sp, #8
 8008766:	4770      	bx	lr
 8008768:	f44f 7302 	mov.w	r3, #520	; 0x208
 800876c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008770:	bf14      	ite	ne
 8008772:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008776:	4623      	moveq	r3, r4
 8008778:	9304      	str	r3, [sp, #16]
 800877a:	9307      	str	r3, [sp, #28]
 800877c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008780:	9002      	str	r0, [sp, #8]
 8008782:	9006      	str	r0, [sp, #24]
 8008784:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008788:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800878a:	ab21      	add	r3, sp, #132	; 0x84
 800878c:	a902      	add	r1, sp, #8
 800878e:	4628      	mov	r0, r5
 8008790:	9301      	str	r3, [sp, #4]
 8008792:	f002 fc0d 	bl	800afb0 <_svfiprintf_r>
 8008796:	1c43      	adds	r3, r0, #1
 8008798:	bfbc      	itt	lt
 800879a:	238b      	movlt	r3, #139	; 0x8b
 800879c:	602b      	strlt	r3, [r5, #0]
 800879e:	2c00      	cmp	r4, #0
 80087a0:	d0dd      	beq.n	800875e <sniprintf+0x16>
 80087a2:	9b02      	ldr	r3, [sp, #8]
 80087a4:	2200      	movs	r2, #0
 80087a6:	701a      	strb	r2, [r3, #0]
 80087a8:	e7d9      	b.n	800875e <sniprintf+0x16>
 80087aa:	bf00      	nop
 80087ac:	20000084 	.word	0x20000084

080087b0 <siprintf>:
 80087b0:	b40e      	push	{r1, r2, r3}
 80087b2:	b500      	push	{lr}
 80087b4:	b09c      	sub	sp, #112	; 0x70
 80087b6:	ab1d      	add	r3, sp, #116	; 0x74
 80087b8:	9002      	str	r0, [sp, #8]
 80087ba:	9006      	str	r0, [sp, #24]
 80087bc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80087c0:	4809      	ldr	r0, [pc, #36]	; (80087e8 <siprintf+0x38>)
 80087c2:	9107      	str	r1, [sp, #28]
 80087c4:	9104      	str	r1, [sp, #16]
 80087c6:	4909      	ldr	r1, [pc, #36]	; (80087ec <siprintf+0x3c>)
 80087c8:	f853 2b04 	ldr.w	r2, [r3], #4
 80087cc:	9105      	str	r1, [sp, #20]
 80087ce:	6800      	ldr	r0, [r0, #0]
 80087d0:	9301      	str	r3, [sp, #4]
 80087d2:	a902      	add	r1, sp, #8
 80087d4:	f002 fbec 	bl	800afb0 <_svfiprintf_r>
 80087d8:	9b02      	ldr	r3, [sp, #8]
 80087da:	2200      	movs	r2, #0
 80087dc:	701a      	strb	r2, [r3, #0]
 80087de:	b01c      	add	sp, #112	; 0x70
 80087e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80087e4:	b003      	add	sp, #12
 80087e6:	4770      	bx	lr
 80087e8:	20000084 	.word	0x20000084
 80087ec:	ffff0208 	.word	0xffff0208

080087f0 <__sread>:
 80087f0:	b510      	push	{r4, lr}
 80087f2:	460c      	mov	r4, r1
 80087f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80087f8:	f000 f86c 	bl	80088d4 <_read_r>
 80087fc:	2800      	cmp	r0, #0
 80087fe:	bfab      	itete	ge
 8008800:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008802:	89a3      	ldrhlt	r3, [r4, #12]
 8008804:	181b      	addge	r3, r3, r0
 8008806:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800880a:	bfac      	ite	ge
 800880c:	6563      	strge	r3, [r4, #84]	; 0x54
 800880e:	81a3      	strhlt	r3, [r4, #12]
 8008810:	bd10      	pop	{r4, pc}

08008812 <__swrite>:
 8008812:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008816:	461f      	mov	r7, r3
 8008818:	898b      	ldrh	r3, [r1, #12]
 800881a:	05db      	lsls	r3, r3, #23
 800881c:	4605      	mov	r5, r0
 800881e:	460c      	mov	r4, r1
 8008820:	4616      	mov	r6, r2
 8008822:	d505      	bpl.n	8008830 <__swrite+0x1e>
 8008824:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008828:	2302      	movs	r3, #2
 800882a:	2200      	movs	r2, #0
 800882c:	f000 f840 	bl	80088b0 <_lseek_r>
 8008830:	89a3      	ldrh	r3, [r4, #12]
 8008832:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008836:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800883a:	81a3      	strh	r3, [r4, #12]
 800883c:	4632      	mov	r2, r6
 800883e:	463b      	mov	r3, r7
 8008840:	4628      	mov	r0, r5
 8008842:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008846:	f000 b857 	b.w	80088f8 <_write_r>

0800884a <__sseek>:
 800884a:	b510      	push	{r4, lr}
 800884c:	460c      	mov	r4, r1
 800884e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008852:	f000 f82d 	bl	80088b0 <_lseek_r>
 8008856:	1c43      	adds	r3, r0, #1
 8008858:	89a3      	ldrh	r3, [r4, #12]
 800885a:	bf15      	itete	ne
 800885c:	6560      	strne	r0, [r4, #84]	; 0x54
 800885e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008862:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008866:	81a3      	strheq	r3, [r4, #12]
 8008868:	bf18      	it	ne
 800886a:	81a3      	strhne	r3, [r4, #12]
 800886c:	bd10      	pop	{r4, pc}

0800886e <__sclose>:
 800886e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008872:	f000 b80d 	b.w	8008890 <_close_r>

08008876 <memset>:
 8008876:	4402      	add	r2, r0
 8008878:	4603      	mov	r3, r0
 800887a:	4293      	cmp	r3, r2
 800887c:	d100      	bne.n	8008880 <memset+0xa>
 800887e:	4770      	bx	lr
 8008880:	f803 1b01 	strb.w	r1, [r3], #1
 8008884:	e7f9      	b.n	800887a <memset+0x4>
	...

08008888 <_localeconv_r>:
 8008888:	4800      	ldr	r0, [pc, #0]	; (800888c <_localeconv_r+0x4>)
 800888a:	4770      	bx	lr
 800888c:	20000178 	.word	0x20000178

08008890 <_close_r>:
 8008890:	b538      	push	{r3, r4, r5, lr}
 8008892:	4d06      	ldr	r5, [pc, #24]	; (80088ac <_close_r+0x1c>)
 8008894:	2300      	movs	r3, #0
 8008896:	4604      	mov	r4, r0
 8008898:	4608      	mov	r0, r1
 800889a:	602b      	str	r3, [r5, #0]
 800889c:	f7f9 fa61 	bl	8001d62 <_close>
 80088a0:	1c43      	adds	r3, r0, #1
 80088a2:	d102      	bne.n	80088aa <_close_r+0x1a>
 80088a4:	682b      	ldr	r3, [r5, #0]
 80088a6:	b103      	cbz	r3, 80088aa <_close_r+0x1a>
 80088a8:	6023      	str	r3, [r4, #0]
 80088aa:	bd38      	pop	{r3, r4, r5, pc}
 80088ac:	200006c4 	.word	0x200006c4

080088b0 <_lseek_r>:
 80088b0:	b538      	push	{r3, r4, r5, lr}
 80088b2:	4d07      	ldr	r5, [pc, #28]	; (80088d0 <_lseek_r+0x20>)
 80088b4:	4604      	mov	r4, r0
 80088b6:	4608      	mov	r0, r1
 80088b8:	4611      	mov	r1, r2
 80088ba:	2200      	movs	r2, #0
 80088bc:	602a      	str	r2, [r5, #0]
 80088be:	461a      	mov	r2, r3
 80088c0:	f7f9 fa76 	bl	8001db0 <_lseek>
 80088c4:	1c43      	adds	r3, r0, #1
 80088c6:	d102      	bne.n	80088ce <_lseek_r+0x1e>
 80088c8:	682b      	ldr	r3, [r5, #0]
 80088ca:	b103      	cbz	r3, 80088ce <_lseek_r+0x1e>
 80088cc:	6023      	str	r3, [r4, #0]
 80088ce:	bd38      	pop	{r3, r4, r5, pc}
 80088d0:	200006c4 	.word	0x200006c4

080088d4 <_read_r>:
 80088d4:	b538      	push	{r3, r4, r5, lr}
 80088d6:	4d07      	ldr	r5, [pc, #28]	; (80088f4 <_read_r+0x20>)
 80088d8:	4604      	mov	r4, r0
 80088da:	4608      	mov	r0, r1
 80088dc:	4611      	mov	r1, r2
 80088de:	2200      	movs	r2, #0
 80088e0:	602a      	str	r2, [r5, #0]
 80088e2:	461a      	mov	r2, r3
 80088e4:	f7f9 fa04 	bl	8001cf0 <_read>
 80088e8:	1c43      	adds	r3, r0, #1
 80088ea:	d102      	bne.n	80088f2 <_read_r+0x1e>
 80088ec:	682b      	ldr	r3, [r5, #0]
 80088ee:	b103      	cbz	r3, 80088f2 <_read_r+0x1e>
 80088f0:	6023      	str	r3, [r4, #0]
 80088f2:	bd38      	pop	{r3, r4, r5, pc}
 80088f4:	200006c4 	.word	0x200006c4

080088f8 <_write_r>:
 80088f8:	b538      	push	{r3, r4, r5, lr}
 80088fa:	4d07      	ldr	r5, [pc, #28]	; (8008918 <_write_r+0x20>)
 80088fc:	4604      	mov	r4, r0
 80088fe:	4608      	mov	r0, r1
 8008900:	4611      	mov	r1, r2
 8008902:	2200      	movs	r2, #0
 8008904:	602a      	str	r2, [r5, #0]
 8008906:	461a      	mov	r2, r3
 8008908:	f7f9 fa0f 	bl	8001d2a <_write>
 800890c:	1c43      	adds	r3, r0, #1
 800890e:	d102      	bne.n	8008916 <_write_r+0x1e>
 8008910:	682b      	ldr	r3, [r5, #0]
 8008912:	b103      	cbz	r3, 8008916 <_write_r+0x1e>
 8008914:	6023      	str	r3, [r4, #0]
 8008916:	bd38      	pop	{r3, r4, r5, pc}
 8008918:	200006c4 	.word	0x200006c4

0800891c <__errno>:
 800891c:	4b01      	ldr	r3, [pc, #4]	; (8008924 <__errno+0x8>)
 800891e:	6818      	ldr	r0, [r3, #0]
 8008920:	4770      	bx	lr
 8008922:	bf00      	nop
 8008924:	20000084 	.word	0x20000084

08008928 <__libc_init_array>:
 8008928:	b570      	push	{r4, r5, r6, lr}
 800892a:	4d0d      	ldr	r5, [pc, #52]	; (8008960 <__libc_init_array+0x38>)
 800892c:	4c0d      	ldr	r4, [pc, #52]	; (8008964 <__libc_init_array+0x3c>)
 800892e:	1b64      	subs	r4, r4, r5
 8008930:	10a4      	asrs	r4, r4, #2
 8008932:	2600      	movs	r6, #0
 8008934:	42a6      	cmp	r6, r4
 8008936:	d109      	bne.n	800894c <__libc_init_array+0x24>
 8008938:	4d0b      	ldr	r5, [pc, #44]	; (8008968 <__libc_init_array+0x40>)
 800893a:	4c0c      	ldr	r4, [pc, #48]	; (800896c <__libc_init_array+0x44>)
 800893c:	f003 fbd4 	bl	800c0e8 <_init>
 8008940:	1b64      	subs	r4, r4, r5
 8008942:	10a4      	asrs	r4, r4, #2
 8008944:	2600      	movs	r6, #0
 8008946:	42a6      	cmp	r6, r4
 8008948:	d105      	bne.n	8008956 <__libc_init_array+0x2e>
 800894a:	bd70      	pop	{r4, r5, r6, pc}
 800894c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008950:	4798      	blx	r3
 8008952:	3601      	adds	r6, #1
 8008954:	e7ee      	b.n	8008934 <__libc_init_array+0xc>
 8008956:	f855 3b04 	ldr.w	r3, [r5], #4
 800895a:	4798      	blx	r3
 800895c:	3601      	adds	r6, #1
 800895e:	e7f2      	b.n	8008946 <__libc_init_array+0x1e>
 8008960:	0800d1c8 	.word	0x0800d1c8
 8008964:	0800d1c8 	.word	0x0800d1c8
 8008968:	0800d1c8 	.word	0x0800d1c8
 800896c:	0800d1cc 	.word	0x0800d1cc

08008970 <__retarget_lock_acquire_recursive>:
 8008970:	4770      	bx	lr

08008972 <__retarget_lock_release_recursive>:
 8008972:	4770      	bx	lr

08008974 <nanf>:
 8008974:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800897c <nanf+0x8>
 8008978:	4770      	bx	lr
 800897a:	bf00      	nop
 800897c:	7fc00000 	.word	0x7fc00000

08008980 <quorem>:
 8008980:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008984:	6903      	ldr	r3, [r0, #16]
 8008986:	690c      	ldr	r4, [r1, #16]
 8008988:	42a3      	cmp	r3, r4
 800898a:	4607      	mov	r7, r0
 800898c:	db7e      	blt.n	8008a8c <quorem+0x10c>
 800898e:	3c01      	subs	r4, #1
 8008990:	f101 0814 	add.w	r8, r1, #20
 8008994:	f100 0514 	add.w	r5, r0, #20
 8008998:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800899c:	9301      	str	r3, [sp, #4]
 800899e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80089a2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80089a6:	3301      	adds	r3, #1
 80089a8:	429a      	cmp	r2, r3
 80089aa:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80089ae:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80089b2:	fbb2 f6f3 	udiv	r6, r2, r3
 80089b6:	d331      	bcc.n	8008a1c <quorem+0x9c>
 80089b8:	f04f 0e00 	mov.w	lr, #0
 80089bc:	4640      	mov	r0, r8
 80089be:	46ac      	mov	ip, r5
 80089c0:	46f2      	mov	sl, lr
 80089c2:	f850 2b04 	ldr.w	r2, [r0], #4
 80089c6:	b293      	uxth	r3, r2
 80089c8:	fb06 e303 	mla	r3, r6, r3, lr
 80089cc:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80089d0:	0c1a      	lsrs	r2, r3, #16
 80089d2:	b29b      	uxth	r3, r3
 80089d4:	ebaa 0303 	sub.w	r3, sl, r3
 80089d8:	f8dc a000 	ldr.w	sl, [ip]
 80089dc:	fa13 f38a 	uxtah	r3, r3, sl
 80089e0:	fb06 220e 	mla	r2, r6, lr, r2
 80089e4:	9300      	str	r3, [sp, #0]
 80089e6:	9b00      	ldr	r3, [sp, #0]
 80089e8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80089ec:	b292      	uxth	r2, r2
 80089ee:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80089f2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80089f6:	f8bd 3000 	ldrh.w	r3, [sp]
 80089fa:	4581      	cmp	r9, r0
 80089fc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008a00:	f84c 3b04 	str.w	r3, [ip], #4
 8008a04:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008a08:	d2db      	bcs.n	80089c2 <quorem+0x42>
 8008a0a:	f855 300b 	ldr.w	r3, [r5, fp]
 8008a0e:	b92b      	cbnz	r3, 8008a1c <quorem+0x9c>
 8008a10:	9b01      	ldr	r3, [sp, #4]
 8008a12:	3b04      	subs	r3, #4
 8008a14:	429d      	cmp	r5, r3
 8008a16:	461a      	mov	r2, r3
 8008a18:	d32c      	bcc.n	8008a74 <quorem+0xf4>
 8008a1a:	613c      	str	r4, [r7, #16]
 8008a1c:	4638      	mov	r0, r7
 8008a1e:	f001 f9ef 	bl	8009e00 <__mcmp>
 8008a22:	2800      	cmp	r0, #0
 8008a24:	db22      	blt.n	8008a6c <quorem+0xec>
 8008a26:	3601      	adds	r6, #1
 8008a28:	4629      	mov	r1, r5
 8008a2a:	2000      	movs	r0, #0
 8008a2c:	f858 2b04 	ldr.w	r2, [r8], #4
 8008a30:	f8d1 c000 	ldr.w	ip, [r1]
 8008a34:	b293      	uxth	r3, r2
 8008a36:	1ac3      	subs	r3, r0, r3
 8008a38:	0c12      	lsrs	r2, r2, #16
 8008a3a:	fa13 f38c 	uxtah	r3, r3, ip
 8008a3e:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8008a42:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008a46:	b29b      	uxth	r3, r3
 8008a48:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008a4c:	45c1      	cmp	r9, r8
 8008a4e:	f841 3b04 	str.w	r3, [r1], #4
 8008a52:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008a56:	d2e9      	bcs.n	8008a2c <quorem+0xac>
 8008a58:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008a5c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008a60:	b922      	cbnz	r2, 8008a6c <quorem+0xec>
 8008a62:	3b04      	subs	r3, #4
 8008a64:	429d      	cmp	r5, r3
 8008a66:	461a      	mov	r2, r3
 8008a68:	d30a      	bcc.n	8008a80 <quorem+0x100>
 8008a6a:	613c      	str	r4, [r7, #16]
 8008a6c:	4630      	mov	r0, r6
 8008a6e:	b003      	add	sp, #12
 8008a70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a74:	6812      	ldr	r2, [r2, #0]
 8008a76:	3b04      	subs	r3, #4
 8008a78:	2a00      	cmp	r2, #0
 8008a7a:	d1ce      	bne.n	8008a1a <quorem+0x9a>
 8008a7c:	3c01      	subs	r4, #1
 8008a7e:	e7c9      	b.n	8008a14 <quorem+0x94>
 8008a80:	6812      	ldr	r2, [r2, #0]
 8008a82:	3b04      	subs	r3, #4
 8008a84:	2a00      	cmp	r2, #0
 8008a86:	d1f0      	bne.n	8008a6a <quorem+0xea>
 8008a88:	3c01      	subs	r4, #1
 8008a8a:	e7eb      	b.n	8008a64 <quorem+0xe4>
 8008a8c:	2000      	movs	r0, #0
 8008a8e:	e7ee      	b.n	8008a6e <quorem+0xee>

08008a90 <_dtoa_r>:
 8008a90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a94:	ed2d 8b04 	vpush	{d8-d9}
 8008a98:	69c5      	ldr	r5, [r0, #28]
 8008a9a:	b093      	sub	sp, #76	; 0x4c
 8008a9c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8008aa0:	ec57 6b10 	vmov	r6, r7, d0
 8008aa4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008aa8:	9107      	str	r1, [sp, #28]
 8008aaa:	4604      	mov	r4, r0
 8008aac:	920a      	str	r2, [sp, #40]	; 0x28
 8008aae:	930d      	str	r3, [sp, #52]	; 0x34
 8008ab0:	b975      	cbnz	r5, 8008ad0 <_dtoa_r+0x40>
 8008ab2:	2010      	movs	r0, #16
 8008ab4:	f000 fe2a 	bl	800970c <malloc>
 8008ab8:	4602      	mov	r2, r0
 8008aba:	61e0      	str	r0, [r4, #28]
 8008abc:	b920      	cbnz	r0, 8008ac8 <_dtoa_r+0x38>
 8008abe:	4bae      	ldr	r3, [pc, #696]	; (8008d78 <_dtoa_r+0x2e8>)
 8008ac0:	21ef      	movs	r1, #239	; 0xef
 8008ac2:	48ae      	ldr	r0, [pc, #696]	; (8008d7c <_dtoa_r+0x2ec>)
 8008ac4:	f002 fc74 	bl	800b3b0 <__assert_func>
 8008ac8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008acc:	6005      	str	r5, [r0, #0]
 8008ace:	60c5      	str	r5, [r0, #12]
 8008ad0:	69e3      	ldr	r3, [r4, #28]
 8008ad2:	6819      	ldr	r1, [r3, #0]
 8008ad4:	b151      	cbz	r1, 8008aec <_dtoa_r+0x5c>
 8008ad6:	685a      	ldr	r2, [r3, #4]
 8008ad8:	604a      	str	r2, [r1, #4]
 8008ada:	2301      	movs	r3, #1
 8008adc:	4093      	lsls	r3, r2
 8008ade:	608b      	str	r3, [r1, #8]
 8008ae0:	4620      	mov	r0, r4
 8008ae2:	f000 ff07 	bl	80098f4 <_Bfree>
 8008ae6:	69e3      	ldr	r3, [r4, #28]
 8008ae8:	2200      	movs	r2, #0
 8008aea:	601a      	str	r2, [r3, #0]
 8008aec:	1e3b      	subs	r3, r7, #0
 8008aee:	bfbb      	ittet	lt
 8008af0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008af4:	9303      	strlt	r3, [sp, #12]
 8008af6:	2300      	movge	r3, #0
 8008af8:	2201      	movlt	r2, #1
 8008afa:	bfac      	ite	ge
 8008afc:	f8c8 3000 	strge.w	r3, [r8]
 8008b00:	f8c8 2000 	strlt.w	r2, [r8]
 8008b04:	4b9e      	ldr	r3, [pc, #632]	; (8008d80 <_dtoa_r+0x2f0>)
 8008b06:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8008b0a:	ea33 0308 	bics.w	r3, r3, r8
 8008b0e:	d11b      	bne.n	8008b48 <_dtoa_r+0xb8>
 8008b10:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008b12:	f242 730f 	movw	r3, #9999	; 0x270f
 8008b16:	6013      	str	r3, [r2, #0]
 8008b18:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8008b1c:	4333      	orrs	r3, r6
 8008b1e:	f000 8593 	beq.w	8009648 <_dtoa_r+0xbb8>
 8008b22:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008b24:	b963      	cbnz	r3, 8008b40 <_dtoa_r+0xb0>
 8008b26:	4b97      	ldr	r3, [pc, #604]	; (8008d84 <_dtoa_r+0x2f4>)
 8008b28:	e027      	b.n	8008b7a <_dtoa_r+0xea>
 8008b2a:	4b97      	ldr	r3, [pc, #604]	; (8008d88 <_dtoa_r+0x2f8>)
 8008b2c:	9300      	str	r3, [sp, #0]
 8008b2e:	3308      	adds	r3, #8
 8008b30:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008b32:	6013      	str	r3, [r2, #0]
 8008b34:	9800      	ldr	r0, [sp, #0]
 8008b36:	b013      	add	sp, #76	; 0x4c
 8008b38:	ecbd 8b04 	vpop	{d8-d9}
 8008b3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b40:	4b90      	ldr	r3, [pc, #576]	; (8008d84 <_dtoa_r+0x2f4>)
 8008b42:	9300      	str	r3, [sp, #0]
 8008b44:	3303      	adds	r3, #3
 8008b46:	e7f3      	b.n	8008b30 <_dtoa_r+0xa0>
 8008b48:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008b4c:	2200      	movs	r2, #0
 8008b4e:	ec51 0b17 	vmov	r0, r1, d7
 8008b52:	eeb0 8a47 	vmov.f32	s16, s14
 8008b56:	eef0 8a67 	vmov.f32	s17, s15
 8008b5a:	2300      	movs	r3, #0
 8008b5c:	f7f7 ffb4 	bl	8000ac8 <__aeabi_dcmpeq>
 8008b60:	4681      	mov	r9, r0
 8008b62:	b160      	cbz	r0, 8008b7e <_dtoa_r+0xee>
 8008b64:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008b66:	2301      	movs	r3, #1
 8008b68:	6013      	str	r3, [r2, #0]
 8008b6a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	f000 8568 	beq.w	8009642 <_dtoa_r+0xbb2>
 8008b72:	4b86      	ldr	r3, [pc, #536]	; (8008d8c <_dtoa_r+0x2fc>)
 8008b74:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008b76:	6013      	str	r3, [r2, #0]
 8008b78:	3b01      	subs	r3, #1
 8008b7a:	9300      	str	r3, [sp, #0]
 8008b7c:	e7da      	b.n	8008b34 <_dtoa_r+0xa4>
 8008b7e:	aa10      	add	r2, sp, #64	; 0x40
 8008b80:	a911      	add	r1, sp, #68	; 0x44
 8008b82:	4620      	mov	r0, r4
 8008b84:	eeb0 0a48 	vmov.f32	s0, s16
 8008b88:	eef0 0a68 	vmov.f32	s1, s17
 8008b8c:	f001 fa4e 	bl	800a02c <__d2b>
 8008b90:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8008b94:	4682      	mov	sl, r0
 8008b96:	2d00      	cmp	r5, #0
 8008b98:	d07f      	beq.n	8008c9a <_dtoa_r+0x20a>
 8008b9a:	ee18 3a90 	vmov	r3, s17
 8008b9e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008ba2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8008ba6:	ec51 0b18 	vmov	r0, r1, d8
 8008baa:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8008bae:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008bb2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8008bb6:	4619      	mov	r1, r3
 8008bb8:	2200      	movs	r2, #0
 8008bba:	4b75      	ldr	r3, [pc, #468]	; (8008d90 <_dtoa_r+0x300>)
 8008bbc:	f7f7 fb64 	bl	8000288 <__aeabi_dsub>
 8008bc0:	a367      	add	r3, pc, #412	; (adr r3, 8008d60 <_dtoa_r+0x2d0>)
 8008bc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bc6:	f7f7 fd17 	bl	80005f8 <__aeabi_dmul>
 8008bca:	a367      	add	r3, pc, #412	; (adr r3, 8008d68 <_dtoa_r+0x2d8>)
 8008bcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bd0:	f7f7 fb5c 	bl	800028c <__adddf3>
 8008bd4:	4606      	mov	r6, r0
 8008bd6:	4628      	mov	r0, r5
 8008bd8:	460f      	mov	r7, r1
 8008bda:	f7f7 fca3 	bl	8000524 <__aeabi_i2d>
 8008bde:	a364      	add	r3, pc, #400	; (adr r3, 8008d70 <_dtoa_r+0x2e0>)
 8008be0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008be4:	f7f7 fd08 	bl	80005f8 <__aeabi_dmul>
 8008be8:	4602      	mov	r2, r0
 8008bea:	460b      	mov	r3, r1
 8008bec:	4630      	mov	r0, r6
 8008bee:	4639      	mov	r1, r7
 8008bf0:	f7f7 fb4c 	bl	800028c <__adddf3>
 8008bf4:	4606      	mov	r6, r0
 8008bf6:	460f      	mov	r7, r1
 8008bf8:	f7f7 ffae 	bl	8000b58 <__aeabi_d2iz>
 8008bfc:	2200      	movs	r2, #0
 8008bfe:	4683      	mov	fp, r0
 8008c00:	2300      	movs	r3, #0
 8008c02:	4630      	mov	r0, r6
 8008c04:	4639      	mov	r1, r7
 8008c06:	f7f7 ff69 	bl	8000adc <__aeabi_dcmplt>
 8008c0a:	b148      	cbz	r0, 8008c20 <_dtoa_r+0x190>
 8008c0c:	4658      	mov	r0, fp
 8008c0e:	f7f7 fc89 	bl	8000524 <__aeabi_i2d>
 8008c12:	4632      	mov	r2, r6
 8008c14:	463b      	mov	r3, r7
 8008c16:	f7f7 ff57 	bl	8000ac8 <__aeabi_dcmpeq>
 8008c1a:	b908      	cbnz	r0, 8008c20 <_dtoa_r+0x190>
 8008c1c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008c20:	f1bb 0f16 	cmp.w	fp, #22
 8008c24:	d857      	bhi.n	8008cd6 <_dtoa_r+0x246>
 8008c26:	4b5b      	ldr	r3, [pc, #364]	; (8008d94 <_dtoa_r+0x304>)
 8008c28:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008c2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c30:	ec51 0b18 	vmov	r0, r1, d8
 8008c34:	f7f7 ff52 	bl	8000adc <__aeabi_dcmplt>
 8008c38:	2800      	cmp	r0, #0
 8008c3a:	d04e      	beq.n	8008cda <_dtoa_r+0x24a>
 8008c3c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008c40:	2300      	movs	r3, #0
 8008c42:	930c      	str	r3, [sp, #48]	; 0x30
 8008c44:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008c46:	1b5b      	subs	r3, r3, r5
 8008c48:	1e5a      	subs	r2, r3, #1
 8008c4a:	bf45      	ittet	mi
 8008c4c:	f1c3 0301 	rsbmi	r3, r3, #1
 8008c50:	9305      	strmi	r3, [sp, #20]
 8008c52:	2300      	movpl	r3, #0
 8008c54:	2300      	movmi	r3, #0
 8008c56:	9206      	str	r2, [sp, #24]
 8008c58:	bf54      	ite	pl
 8008c5a:	9305      	strpl	r3, [sp, #20]
 8008c5c:	9306      	strmi	r3, [sp, #24]
 8008c5e:	f1bb 0f00 	cmp.w	fp, #0
 8008c62:	db3c      	blt.n	8008cde <_dtoa_r+0x24e>
 8008c64:	9b06      	ldr	r3, [sp, #24]
 8008c66:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8008c6a:	445b      	add	r3, fp
 8008c6c:	9306      	str	r3, [sp, #24]
 8008c6e:	2300      	movs	r3, #0
 8008c70:	9308      	str	r3, [sp, #32]
 8008c72:	9b07      	ldr	r3, [sp, #28]
 8008c74:	2b09      	cmp	r3, #9
 8008c76:	d868      	bhi.n	8008d4a <_dtoa_r+0x2ba>
 8008c78:	2b05      	cmp	r3, #5
 8008c7a:	bfc4      	itt	gt
 8008c7c:	3b04      	subgt	r3, #4
 8008c7e:	9307      	strgt	r3, [sp, #28]
 8008c80:	9b07      	ldr	r3, [sp, #28]
 8008c82:	f1a3 0302 	sub.w	r3, r3, #2
 8008c86:	bfcc      	ite	gt
 8008c88:	2500      	movgt	r5, #0
 8008c8a:	2501      	movle	r5, #1
 8008c8c:	2b03      	cmp	r3, #3
 8008c8e:	f200 8085 	bhi.w	8008d9c <_dtoa_r+0x30c>
 8008c92:	e8df f003 	tbb	[pc, r3]
 8008c96:	3b2e      	.short	0x3b2e
 8008c98:	5839      	.short	0x5839
 8008c9a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008c9e:	441d      	add	r5, r3
 8008ca0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008ca4:	2b20      	cmp	r3, #32
 8008ca6:	bfc1      	itttt	gt
 8008ca8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008cac:	fa08 f803 	lslgt.w	r8, r8, r3
 8008cb0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8008cb4:	fa26 f303 	lsrgt.w	r3, r6, r3
 8008cb8:	bfd6      	itet	le
 8008cba:	f1c3 0320 	rsble	r3, r3, #32
 8008cbe:	ea48 0003 	orrgt.w	r0, r8, r3
 8008cc2:	fa06 f003 	lslle.w	r0, r6, r3
 8008cc6:	f7f7 fc1d 	bl	8000504 <__aeabi_ui2d>
 8008cca:	2201      	movs	r2, #1
 8008ccc:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8008cd0:	3d01      	subs	r5, #1
 8008cd2:	920e      	str	r2, [sp, #56]	; 0x38
 8008cd4:	e76f      	b.n	8008bb6 <_dtoa_r+0x126>
 8008cd6:	2301      	movs	r3, #1
 8008cd8:	e7b3      	b.n	8008c42 <_dtoa_r+0x1b2>
 8008cda:	900c      	str	r0, [sp, #48]	; 0x30
 8008cdc:	e7b2      	b.n	8008c44 <_dtoa_r+0x1b4>
 8008cde:	9b05      	ldr	r3, [sp, #20]
 8008ce0:	eba3 030b 	sub.w	r3, r3, fp
 8008ce4:	9305      	str	r3, [sp, #20]
 8008ce6:	f1cb 0300 	rsb	r3, fp, #0
 8008cea:	9308      	str	r3, [sp, #32]
 8008cec:	2300      	movs	r3, #0
 8008cee:	930b      	str	r3, [sp, #44]	; 0x2c
 8008cf0:	e7bf      	b.n	8008c72 <_dtoa_r+0x1e2>
 8008cf2:	2300      	movs	r3, #0
 8008cf4:	9309      	str	r3, [sp, #36]	; 0x24
 8008cf6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	dc52      	bgt.n	8008da2 <_dtoa_r+0x312>
 8008cfc:	2301      	movs	r3, #1
 8008cfe:	9301      	str	r3, [sp, #4]
 8008d00:	9304      	str	r3, [sp, #16]
 8008d02:	461a      	mov	r2, r3
 8008d04:	920a      	str	r2, [sp, #40]	; 0x28
 8008d06:	e00b      	b.n	8008d20 <_dtoa_r+0x290>
 8008d08:	2301      	movs	r3, #1
 8008d0a:	e7f3      	b.n	8008cf4 <_dtoa_r+0x264>
 8008d0c:	2300      	movs	r3, #0
 8008d0e:	9309      	str	r3, [sp, #36]	; 0x24
 8008d10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d12:	445b      	add	r3, fp
 8008d14:	9301      	str	r3, [sp, #4]
 8008d16:	3301      	adds	r3, #1
 8008d18:	2b01      	cmp	r3, #1
 8008d1a:	9304      	str	r3, [sp, #16]
 8008d1c:	bfb8      	it	lt
 8008d1e:	2301      	movlt	r3, #1
 8008d20:	69e0      	ldr	r0, [r4, #28]
 8008d22:	2100      	movs	r1, #0
 8008d24:	2204      	movs	r2, #4
 8008d26:	f102 0614 	add.w	r6, r2, #20
 8008d2a:	429e      	cmp	r6, r3
 8008d2c:	d93d      	bls.n	8008daa <_dtoa_r+0x31a>
 8008d2e:	6041      	str	r1, [r0, #4]
 8008d30:	4620      	mov	r0, r4
 8008d32:	f000 fd9f 	bl	8009874 <_Balloc>
 8008d36:	9000      	str	r0, [sp, #0]
 8008d38:	2800      	cmp	r0, #0
 8008d3a:	d139      	bne.n	8008db0 <_dtoa_r+0x320>
 8008d3c:	4b16      	ldr	r3, [pc, #88]	; (8008d98 <_dtoa_r+0x308>)
 8008d3e:	4602      	mov	r2, r0
 8008d40:	f240 11af 	movw	r1, #431	; 0x1af
 8008d44:	e6bd      	b.n	8008ac2 <_dtoa_r+0x32>
 8008d46:	2301      	movs	r3, #1
 8008d48:	e7e1      	b.n	8008d0e <_dtoa_r+0x27e>
 8008d4a:	2501      	movs	r5, #1
 8008d4c:	2300      	movs	r3, #0
 8008d4e:	9307      	str	r3, [sp, #28]
 8008d50:	9509      	str	r5, [sp, #36]	; 0x24
 8008d52:	f04f 33ff 	mov.w	r3, #4294967295
 8008d56:	9301      	str	r3, [sp, #4]
 8008d58:	9304      	str	r3, [sp, #16]
 8008d5a:	2200      	movs	r2, #0
 8008d5c:	2312      	movs	r3, #18
 8008d5e:	e7d1      	b.n	8008d04 <_dtoa_r+0x274>
 8008d60:	636f4361 	.word	0x636f4361
 8008d64:	3fd287a7 	.word	0x3fd287a7
 8008d68:	8b60c8b3 	.word	0x8b60c8b3
 8008d6c:	3fc68a28 	.word	0x3fc68a28
 8008d70:	509f79fb 	.word	0x509f79fb
 8008d74:	3fd34413 	.word	0x3fd34413
 8008d78:	0800cde2 	.word	0x0800cde2
 8008d7c:	0800cdf9 	.word	0x0800cdf9
 8008d80:	7ff00000 	.word	0x7ff00000
 8008d84:	0800cdde 	.word	0x0800cdde
 8008d88:	0800cdd5 	.word	0x0800cdd5
 8008d8c:	0800cdad 	.word	0x0800cdad
 8008d90:	3ff80000 	.word	0x3ff80000
 8008d94:	0800cee8 	.word	0x0800cee8
 8008d98:	0800ce51 	.word	0x0800ce51
 8008d9c:	2301      	movs	r3, #1
 8008d9e:	9309      	str	r3, [sp, #36]	; 0x24
 8008da0:	e7d7      	b.n	8008d52 <_dtoa_r+0x2c2>
 8008da2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008da4:	9301      	str	r3, [sp, #4]
 8008da6:	9304      	str	r3, [sp, #16]
 8008da8:	e7ba      	b.n	8008d20 <_dtoa_r+0x290>
 8008daa:	3101      	adds	r1, #1
 8008dac:	0052      	lsls	r2, r2, #1
 8008dae:	e7ba      	b.n	8008d26 <_dtoa_r+0x296>
 8008db0:	69e3      	ldr	r3, [r4, #28]
 8008db2:	9a00      	ldr	r2, [sp, #0]
 8008db4:	601a      	str	r2, [r3, #0]
 8008db6:	9b04      	ldr	r3, [sp, #16]
 8008db8:	2b0e      	cmp	r3, #14
 8008dba:	f200 80a8 	bhi.w	8008f0e <_dtoa_r+0x47e>
 8008dbe:	2d00      	cmp	r5, #0
 8008dc0:	f000 80a5 	beq.w	8008f0e <_dtoa_r+0x47e>
 8008dc4:	f1bb 0f00 	cmp.w	fp, #0
 8008dc8:	dd38      	ble.n	8008e3c <_dtoa_r+0x3ac>
 8008dca:	4bc0      	ldr	r3, [pc, #768]	; (80090cc <_dtoa_r+0x63c>)
 8008dcc:	f00b 020f 	and.w	r2, fp, #15
 8008dd0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008dd4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8008dd8:	e9d3 6700 	ldrd	r6, r7, [r3]
 8008ddc:	ea4f 182b 	mov.w	r8, fp, asr #4
 8008de0:	d019      	beq.n	8008e16 <_dtoa_r+0x386>
 8008de2:	4bbb      	ldr	r3, [pc, #748]	; (80090d0 <_dtoa_r+0x640>)
 8008de4:	ec51 0b18 	vmov	r0, r1, d8
 8008de8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008dec:	f7f7 fd2e 	bl	800084c <__aeabi_ddiv>
 8008df0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008df4:	f008 080f 	and.w	r8, r8, #15
 8008df8:	2503      	movs	r5, #3
 8008dfa:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 80090d0 <_dtoa_r+0x640>
 8008dfe:	f1b8 0f00 	cmp.w	r8, #0
 8008e02:	d10a      	bne.n	8008e1a <_dtoa_r+0x38a>
 8008e04:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008e08:	4632      	mov	r2, r6
 8008e0a:	463b      	mov	r3, r7
 8008e0c:	f7f7 fd1e 	bl	800084c <__aeabi_ddiv>
 8008e10:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008e14:	e02b      	b.n	8008e6e <_dtoa_r+0x3de>
 8008e16:	2502      	movs	r5, #2
 8008e18:	e7ef      	b.n	8008dfa <_dtoa_r+0x36a>
 8008e1a:	f018 0f01 	tst.w	r8, #1
 8008e1e:	d008      	beq.n	8008e32 <_dtoa_r+0x3a2>
 8008e20:	4630      	mov	r0, r6
 8008e22:	4639      	mov	r1, r7
 8008e24:	e9d9 2300 	ldrd	r2, r3, [r9]
 8008e28:	f7f7 fbe6 	bl	80005f8 <__aeabi_dmul>
 8008e2c:	3501      	adds	r5, #1
 8008e2e:	4606      	mov	r6, r0
 8008e30:	460f      	mov	r7, r1
 8008e32:	ea4f 0868 	mov.w	r8, r8, asr #1
 8008e36:	f109 0908 	add.w	r9, r9, #8
 8008e3a:	e7e0      	b.n	8008dfe <_dtoa_r+0x36e>
 8008e3c:	f000 809f 	beq.w	8008f7e <_dtoa_r+0x4ee>
 8008e40:	f1cb 0600 	rsb	r6, fp, #0
 8008e44:	4ba1      	ldr	r3, [pc, #644]	; (80090cc <_dtoa_r+0x63c>)
 8008e46:	4fa2      	ldr	r7, [pc, #648]	; (80090d0 <_dtoa_r+0x640>)
 8008e48:	f006 020f 	and.w	r2, r6, #15
 8008e4c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008e50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e54:	ec51 0b18 	vmov	r0, r1, d8
 8008e58:	f7f7 fbce 	bl	80005f8 <__aeabi_dmul>
 8008e5c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008e60:	1136      	asrs	r6, r6, #4
 8008e62:	2300      	movs	r3, #0
 8008e64:	2502      	movs	r5, #2
 8008e66:	2e00      	cmp	r6, #0
 8008e68:	d17e      	bne.n	8008f68 <_dtoa_r+0x4d8>
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d1d0      	bne.n	8008e10 <_dtoa_r+0x380>
 8008e6e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008e70:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	f000 8084 	beq.w	8008f82 <_dtoa_r+0x4f2>
 8008e7a:	4b96      	ldr	r3, [pc, #600]	; (80090d4 <_dtoa_r+0x644>)
 8008e7c:	2200      	movs	r2, #0
 8008e7e:	4640      	mov	r0, r8
 8008e80:	4649      	mov	r1, r9
 8008e82:	f7f7 fe2b 	bl	8000adc <__aeabi_dcmplt>
 8008e86:	2800      	cmp	r0, #0
 8008e88:	d07b      	beq.n	8008f82 <_dtoa_r+0x4f2>
 8008e8a:	9b04      	ldr	r3, [sp, #16]
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d078      	beq.n	8008f82 <_dtoa_r+0x4f2>
 8008e90:	9b01      	ldr	r3, [sp, #4]
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	dd39      	ble.n	8008f0a <_dtoa_r+0x47a>
 8008e96:	4b90      	ldr	r3, [pc, #576]	; (80090d8 <_dtoa_r+0x648>)
 8008e98:	2200      	movs	r2, #0
 8008e9a:	4640      	mov	r0, r8
 8008e9c:	4649      	mov	r1, r9
 8008e9e:	f7f7 fbab 	bl	80005f8 <__aeabi_dmul>
 8008ea2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008ea6:	9e01      	ldr	r6, [sp, #4]
 8008ea8:	f10b 37ff 	add.w	r7, fp, #4294967295
 8008eac:	3501      	adds	r5, #1
 8008eae:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8008eb2:	4628      	mov	r0, r5
 8008eb4:	f7f7 fb36 	bl	8000524 <__aeabi_i2d>
 8008eb8:	4642      	mov	r2, r8
 8008eba:	464b      	mov	r3, r9
 8008ebc:	f7f7 fb9c 	bl	80005f8 <__aeabi_dmul>
 8008ec0:	4b86      	ldr	r3, [pc, #536]	; (80090dc <_dtoa_r+0x64c>)
 8008ec2:	2200      	movs	r2, #0
 8008ec4:	f7f7 f9e2 	bl	800028c <__adddf3>
 8008ec8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8008ecc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008ed0:	9303      	str	r3, [sp, #12]
 8008ed2:	2e00      	cmp	r6, #0
 8008ed4:	d158      	bne.n	8008f88 <_dtoa_r+0x4f8>
 8008ed6:	4b82      	ldr	r3, [pc, #520]	; (80090e0 <_dtoa_r+0x650>)
 8008ed8:	2200      	movs	r2, #0
 8008eda:	4640      	mov	r0, r8
 8008edc:	4649      	mov	r1, r9
 8008ede:	f7f7 f9d3 	bl	8000288 <__aeabi_dsub>
 8008ee2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008ee6:	4680      	mov	r8, r0
 8008ee8:	4689      	mov	r9, r1
 8008eea:	f7f7 fe15 	bl	8000b18 <__aeabi_dcmpgt>
 8008eee:	2800      	cmp	r0, #0
 8008ef0:	f040 8296 	bne.w	8009420 <_dtoa_r+0x990>
 8008ef4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8008ef8:	4640      	mov	r0, r8
 8008efa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008efe:	4649      	mov	r1, r9
 8008f00:	f7f7 fdec 	bl	8000adc <__aeabi_dcmplt>
 8008f04:	2800      	cmp	r0, #0
 8008f06:	f040 8289 	bne.w	800941c <_dtoa_r+0x98c>
 8008f0a:	ed8d 8b02 	vstr	d8, [sp, #8]
 8008f0e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	f2c0 814e 	blt.w	80091b2 <_dtoa_r+0x722>
 8008f16:	f1bb 0f0e 	cmp.w	fp, #14
 8008f1a:	f300 814a 	bgt.w	80091b2 <_dtoa_r+0x722>
 8008f1e:	4b6b      	ldr	r3, [pc, #428]	; (80090cc <_dtoa_r+0x63c>)
 8008f20:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008f24:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008f28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	f280 80dc 	bge.w	80090e8 <_dtoa_r+0x658>
 8008f30:	9b04      	ldr	r3, [sp, #16]
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	f300 80d8 	bgt.w	80090e8 <_dtoa_r+0x658>
 8008f38:	f040 826f 	bne.w	800941a <_dtoa_r+0x98a>
 8008f3c:	4b68      	ldr	r3, [pc, #416]	; (80090e0 <_dtoa_r+0x650>)
 8008f3e:	2200      	movs	r2, #0
 8008f40:	4640      	mov	r0, r8
 8008f42:	4649      	mov	r1, r9
 8008f44:	f7f7 fb58 	bl	80005f8 <__aeabi_dmul>
 8008f48:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008f4c:	f7f7 fdda 	bl	8000b04 <__aeabi_dcmpge>
 8008f50:	9e04      	ldr	r6, [sp, #16]
 8008f52:	4637      	mov	r7, r6
 8008f54:	2800      	cmp	r0, #0
 8008f56:	f040 8245 	bne.w	80093e4 <_dtoa_r+0x954>
 8008f5a:	9d00      	ldr	r5, [sp, #0]
 8008f5c:	2331      	movs	r3, #49	; 0x31
 8008f5e:	f805 3b01 	strb.w	r3, [r5], #1
 8008f62:	f10b 0b01 	add.w	fp, fp, #1
 8008f66:	e241      	b.n	80093ec <_dtoa_r+0x95c>
 8008f68:	07f2      	lsls	r2, r6, #31
 8008f6a:	d505      	bpl.n	8008f78 <_dtoa_r+0x4e8>
 8008f6c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008f70:	f7f7 fb42 	bl	80005f8 <__aeabi_dmul>
 8008f74:	3501      	adds	r5, #1
 8008f76:	2301      	movs	r3, #1
 8008f78:	1076      	asrs	r6, r6, #1
 8008f7a:	3708      	adds	r7, #8
 8008f7c:	e773      	b.n	8008e66 <_dtoa_r+0x3d6>
 8008f7e:	2502      	movs	r5, #2
 8008f80:	e775      	b.n	8008e6e <_dtoa_r+0x3de>
 8008f82:	9e04      	ldr	r6, [sp, #16]
 8008f84:	465f      	mov	r7, fp
 8008f86:	e792      	b.n	8008eae <_dtoa_r+0x41e>
 8008f88:	9900      	ldr	r1, [sp, #0]
 8008f8a:	4b50      	ldr	r3, [pc, #320]	; (80090cc <_dtoa_r+0x63c>)
 8008f8c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008f90:	4431      	add	r1, r6
 8008f92:	9102      	str	r1, [sp, #8]
 8008f94:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008f96:	eeb0 9a47 	vmov.f32	s18, s14
 8008f9a:	eef0 9a67 	vmov.f32	s19, s15
 8008f9e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008fa2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008fa6:	2900      	cmp	r1, #0
 8008fa8:	d044      	beq.n	8009034 <_dtoa_r+0x5a4>
 8008faa:	494e      	ldr	r1, [pc, #312]	; (80090e4 <_dtoa_r+0x654>)
 8008fac:	2000      	movs	r0, #0
 8008fae:	f7f7 fc4d 	bl	800084c <__aeabi_ddiv>
 8008fb2:	ec53 2b19 	vmov	r2, r3, d9
 8008fb6:	f7f7 f967 	bl	8000288 <__aeabi_dsub>
 8008fba:	9d00      	ldr	r5, [sp, #0]
 8008fbc:	ec41 0b19 	vmov	d9, r0, r1
 8008fc0:	4649      	mov	r1, r9
 8008fc2:	4640      	mov	r0, r8
 8008fc4:	f7f7 fdc8 	bl	8000b58 <__aeabi_d2iz>
 8008fc8:	4606      	mov	r6, r0
 8008fca:	f7f7 faab 	bl	8000524 <__aeabi_i2d>
 8008fce:	4602      	mov	r2, r0
 8008fd0:	460b      	mov	r3, r1
 8008fd2:	4640      	mov	r0, r8
 8008fd4:	4649      	mov	r1, r9
 8008fd6:	f7f7 f957 	bl	8000288 <__aeabi_dsub>
 8008fda:	3630      	adds	r6, #48	; 0x30
 8008fdc:	f805 6b01 	strb.w	r6, [r5], #1
 8008fe0:	ec53 2b19 	vmov	r2, r3, d9
 8008fe4:	4680      	mov	r8, r0
 8008fe6:	4689      	mov	r9, r1
 8008fe8:	f7f7 fd78 	bl	8000adc <__aeabi_dcmplt>
 8008fec:	2800      	cmp	r0, #0
 8008fee:	d164      	bne.n	80090ba <_dtoa_r+0x62a>
 8008ff0:	4642      	mov	r2, r8
 8008ff2:	464b      	mov	r3, r9
 8008ff4:	4937      	ldr	r1, [pc, #220]	; (80090d4 <_dtoa_r+0x644>)
 8008ff6:	2000      	movs	r0, #0
 8008ff8:	f7f7 f946 	bl	8000288 <__aeabi_dsub>
 8008ffc:	ec53 2b19 	vmov	r2, r3, d9
 8009000:	f7f7 fd6c 	bl	8000adc <__aeabi_dcmplt>
 8009004:	2800      	cmp	r0, #0
 8009006:	f040 80b6 	bne.w	8009176 <_dtoa_r+0x6e6>
 800900a:	9b02      	ldr	r3, [sp, #8]
 800900c:	429d      	cmp	r5, r3
 800900e:	f43f af7c 	beq.w	8008f0a <_dtoa_r+0x47a>
 8009012:	4b31      	ldr	r3, [pc, #196]	; (80090d8 <_dtoa_r+0x648>)
 8009014:	ec51 0b19 	vmov	r0, r1, d9
 8009018:	2200      	movs	r2, #0
 800901a:	f7f7 faed 	bl	80005f8 <__aeabi_dmul>
 800901e:	4b2e      	ldr	r3, [pc, #184]	; (80090d8 <_dtoa_r+0x648>)
 8009020:	ec41 0b19 	vmov	d9, r0, r1
 8009024:	2200      	movs	r2, #0
 8009026:	4640      	mov	r0, r8
 8009028:	4649      	mov	r1, r9
 800902a:	f7f7 fae5 	bl	80005f8 <__aeabi_dmul>
 800902e:	4680      	mov	r8, r0
 8009030:	4689      	mov	r9, r1
 8009032:	e7c5      	b.n	8008fc0 <_dtoa_r+0x530>
 8009034:	ec51 0b17 	vmov	r0, r1, d7
 8009038:	f7f7 fade 	bl	80005f8 <__aeabi_dmul>
 800903c:	9b02      	ldr	r3, [sp, #8]
 800903e:	9d00      	ldr	r5, [sp, #0]
 8009040:	930f      	str	r3, [sp, #60]	; 0x3c
 8009042:	ec41 0b19 	vmov	d9, r0, r1
 8009046:	4649      	mov	r1, r9
 8009048:	4640      	mov	r0, r8
 800904a:	f7f7 fd85 	bl	8000b58 <__aeabi_d2iz>
 800904e:	4606      	mov	r6, r0
 8009050:	f7f7 fa68 	bl	8000524 <__aeabi_i2d>
 8009054:	3630      	adds	r6, #48	; 0x30
 8009056:	4602      	mov	r2, r0
 8009058:	460b      	mov	r3, r1
 800905a:	4640      	mov	r0, r8
 800905c:	4649      	mov	r1, r9
 800905e:	f7f7 f913 	bl	8000288 <__aeabi_dsub>
 8009062:	f805 6b01 	strb.w	r6, [r5], #1
 8009066:	9b02      	ldr	r3, [sp, #8]
 8009068:	429d      	cmp	r5, r3
 800906a:	4680      	mov	r8, r0
 800906c:	4689      	mov	r9, r1
 800906e:	f04f 0200 	mov.w	r2, #0
 8009072:	d124      	bne.n	80090be <_dtoa_r+0x62e>
 8009074:	4b1b      	ldr	r3, [pc, #108]	; (80090e4 <_dtoa_r+0x654>)
 8009076:	ec51 0b19 	vmov	r0, r1, d9
 800907a:	f7f7 f907 	bl	800028c <__adddf3>
 800907e:	4602      	mov	r2, r0
 8009080:	460b      	mov	r3, r1
 8009082:	4640      	mov	r0, r8
 8009084:	4649      	mov	r1, r9
 8009086:	f7f7 fd47 	bl	8000b18 <__aeabi_dcmpgt>
 800908a:	2800      	cmp	r0, #0
 800908c:	d173      	bne.n	8009176 <_dtoa_r+0x6e6>
 800908e:	ec53 2b19 	vmov	r2, r3, d9
 8009092:	4914      	ldr	r1, [pc, #80]	; (80090e4 <_dtoa_r+0x654>)
 8009094:	2000      	movs	r0, #0
 8009096:	f7f7 f8f7 	bl	8000288 <__aeabi_dsub>
 800909a:	4602      	mov	r2, r0
 800909c:	460b      	mov	r3, r1
 800909e:	4640      	mov	r0, r8
 80090a0:	4649      	mov	r1, r9
 80090a2:	f7f7 fd1b 	bl	8000adc <__aeabi_dcmplt>
 80090a6:	2800      	cmp	r0, #0
 80090a8:	f43f af2f 	beq.w	8008f0a <_dtoa_r+0x47a>
 80090ac:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80090ae:	1e6b      	subs	r3, r5, #1
 80090b0:	930f      	str	r3, [sp, #60]	; 0x3c
 80090b2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80090b6:	2b30      	cmp	r3, #48	; 0x30
 80090b8:	d0f8      	beq.n	80090ac <_dtoa_r+0x61c>
 80090ba:	46bb      	mov	fp, r7
 80090bc:	e04a      	b.n	8009154 <_dtoa_r+0x6c4>
 80090be:	4b06      	ldr	r3, [pc, #24]	; (80090d8 <_dtoa_r+0x648>)
 80090c0:	f7f7 fa9a 	bl	80005f8 <__aeabi_dmul>
 80090c4:	4680      	mov	r8, r0
 80090c6:	4689      	mov	r9, r1
 80090c8:	e7bd      	b.n	8009046 <_dtoa_r+0x5b6>
 80090ca:	bf00      	nop
 80090cc:	0800cee8 	.word	0x0800cee8
 80090d0:	0800cec0 	.word	0x0800cec0
 80090d4:	3ff00000 	.word	0x3ff00000
 80090d8:	40240000 	.word	0x40240000
 80090dc:	401c0000 	.word	0x401c0000
 80090e0:	40140000 	.word	0x40140000
 80090e4:	3fe00000 	.word	0x3fe00000
 80090e8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80090ec:	9d00      	ldr	r5, [sp, #0]
 80090ee:	4642      	mov	r2, r8
 80090f0:	464b      	mov	r3, r9
 80090f2:	4630      	mov	r0, r6
 80090f4:	4639      	mov	r1, r7
 80090f6:	f7f7 fba9 	bl	800084c <__aeabi_ddiv>
 80090fa:	f7f7 fd2d 	bl	8000b58 <__aeabi_d2iz>
 80090fe:	9001      	str	r0, [sp, #4]
 8009100:	f7f7 fa10 	bl	8000524 <__aeabi_i2d>
 8009104:	4642      	mov	r2, r8
 8009106:	464b      	mov	r3, r9
 8009108:	f7f7 fa76 	bl	80005f8 <__aeabi_dmul>
 800910c:	4602      	mov	r2, r0
 800910e:	460b      	mov	r3, r1
 8009110:	4630      	mov	r0, r6
 8009112:	4639      	mov	r1, r7
 8009114:	f7f7 f8b8 	bl	8000288 <__aeabi_dsub>
 8009118:	9e01      	ldr	r6, [sp, #4]
 800911a:	9f04      	ldr	r7, [sp, #16]
 800911c:	3630      	adds	r6, #48	; 0x30
 800911e:	f805 6b01 	strb.w	r6, [r5], #1
 8009122:	9e00      	ldr	r6, [sp, #0]
 8009124:	1bae      	subs	r6, r5, r6
 8009126:	42b7      	cmp	r7, r6
 8009128:	4602      	mov	r2, r0
 800912a:	460b      	mov	r3, r1
 800912c:	d134      	bne.n	8009198 <_dtoa_r+0x708>
 800912e:	f7f7 f8ad 	bl	800028c <__adddf3>
 8009132:	4642      	mov	r2, r8
 8009134:	464b      	mov	r3, r9
 8009136:	4606      	mov	r6, r0
 8009138:	460f      	mov	r7, r1
 800913a:	f7f7 fced 	bl	8000b18 <__aeabi_dcmpgt>
 800913e:	b9c8      	cbnz	r0, 8009174 <_dtoa_r+0x6e4>
 8009140:	4642      	mov	r2, r8
 8009142:	464b      	mov	r3, r9
 8009144:	4630      	mov	r0, r6
 8009146:	4639      	mov	r1, r7
 8009148:	f7f7 fcbe 	bl	8000ac8 <__aeabi_dcmpeq>
 800914c:	b110      	cbz	r0, 8009154 <_dtoa_r+0x6c4>
 800914e:	9b01      	ldr	r3, [sp, #4]
 8009150:	07db      	lsls	r3, r3, #31
 8009152:	d40f      	bmi.n	8009174 <_dtoa_r+0x6e4>
 8009154:	4651      	mov	r1, sl
 8009156:	4620      	mov	r0, r4
 8009158:	f000 fbcc 	bl	80098f4 <_Bfree>
 800915c:	2300      	movs	r3, #0
 800915e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009160:	702b      	strb	r3, [r5, #0]
 8009162:	f10b 0301 	add.w	r3, fp, #1
 8009166:	6013      	str	r3, [r2, #0]
 8009168:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800916a:	2b00      	cmp	r3, #0
 800916c:	f43f ace2 	beq.w	8008b34 <_dtoa_r+0xa4>
 8009170:	601d      	str	r5, [r3, #0]
 8009172:	e4df      	b.n	8008b34 <_dtoa_r+0xa4>
 8009174:	465f      	mov	r7, fp
 8009176:	462b      	mov	r3, r5
 8009178:	461d      	mov	r5, r3
 800917a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800917e:	2a39      	cmp	r2, #57	; 0x39
 8009180:	d106      	bne.n	8009190 <_dtoa_r+0x700>
 8009182:	9a00      	ldr	r2, [sp, #0]
 8009184:	429a      	cmp	r2, r3
 8009186:	d1f7      	bne.n	8009178 <_dtoa_r+0x6e8>
 8009188:	9900      	ldr	r1, [sp, #0]
 800918a:	2230      	movs	r2, #48	; 0x30
 800918c:	3701      	adds	r7, #1
 800918e:	700a      	strb	r2, [r1, #0]
 8009190:	781a      	ldrb	r2, [r3, #0]
 8009192:	3201      	adds	r2, #1
 8009194:	701a      	strb	r2, [r3, #0]
 8009196:	e790      	b.n	80090ba <_dtoa_r+0x62a>
 8009198:	4ba3      	ldr	r3, [pc, #652]	; (8009428 <_dtoa_r+0x998>)
 800919a:	2200      	movs	r2, #0
 800919c:	f7f7 fa2c 	bl	80005f8 <__aeabi_dmul>
 80091a0:	2200      	movs	r2, #0
 80091a2:	2300      	movs	r3, #0
 80091a4:	4606      	mov	r6, r0
 80091a6:	460f      	mov	r7, r1
 80091a8:	f7f7 fc8e 	bl	8000ac8 <__aeabi_dcmpeq>
 80091ac:	2800      	cmp	r0, #0
 80091ae:	d09e      	beq.n	80090ee <_dtoa_r+0x65e>
 80091b0:	e7d0      	b.n	8009154 <_dtoa_r+0x6c4>
 80091b2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80091b4:	2a00      	cmp	r2, #0
 80091b6:	f000 80ca 	beq.w	800934e <_dtoa_r+0x8be>
 80091ba:	9a07      	ldr	r2, [sp, #28]
 80091bc:	2a01      	cmp	r2, #1
 80091be:	f300 80ad 	bgt.w	800931c <_dtoa_r+0x88c>
 80091c2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80091c4:	2a00      	cmp	r2, #0
 80091c6:	f000 80a5 	beq.w	8009314 <_dtoa_r+0x884>
 80091ca:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80091ce:	9e08      	ldr	r6, [sp, #32]
 80091d0:	9d05      	ldr	r5, [sp, #20]
 80091d2:	9a05      	ldr	r2, [sp, #20]
 80091d4:	441a      	add	r2, r3
 80091d6:	9205      	str	r2, [sp, #20]
 80091d8:	9a06      	ldr	r2, [sp, #24]
 80091da:	2101      	movs	r1, #1
 80091dc:	441a      	add	r2, r3
 80091de:	4620      	mov	r0, r4
 80091e0:	9206      	str	r2, [sp, #24]
 80091e2:	f000 fc87 	bl	8009af4 <__i2b>
 80091e6:	4607      	mov	r7, r0
 80091e8:	b165      	cbz	r5, 8009204 <_dtoa_r+0x774>
 80091ea:	9b06      	ldr	r3, [sp, #24]
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	dd09      	ble.n	8009204 <_dtoa_r+0x774>
 80091f0:	42ab      	cmp	r3, r5
 80091f2:	9a05      	ldr	r2, [sp, #20]
 80091f4:	bfa8      	it	ge
 80091f6:	462b      	movge	r3, r5
 80091f8:	1ad2      	subs	r2, r2, r3
 80091fa:	9205      	str	r2, [sp, #20]
 80091fc:	9a06      	ldr	r2, [sp, #24]
 80091fe:	1aed      	subs	r5, r5, r3
 8009200:	1ad3      	subs	r3, r2, r3
 8009202:	9306      	str	r3, [sp, #24]
 8009204:	9b08      	ldr	r3, [sp, #32]
 8009206:	b1f3      	cbz	r3, 8009246 <_dtoa_r+0x7b6>
 8009208:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800920a:	2b00      	cmp	r3, #0
 800920c:	f000 80a3 	beq.w	8009356 <_dtoa_r+0x8c6>
 8009210:	2e00      	cmp	r6, #0
 8009212:	dd10      	ble.n	8009236 <_dtoa_r+0x7a6>
 8009214:	4639      	mov	r1, r7
 8009216:	4632      	mov	r2, r6
 8009218:	4620      	mov	r0, r4
 800921a:	f000 fd2b 	bl	8009c74 <__pow5mult>
 800921e:	4652      	mov	r2, sl
 8009220:	4601      	mov	r1, r0
 8009222:	4607      	mov	r7, r0
 8009224:	4620      	mov	r0, r4
 8009226:	f000 fc7b 	bl	8009b20 <__multiply>
 800922a:	4651      	mov	r1, sl
 800922c:	4680      	mov	r8, r0
 800922e:	4620      	mov	r0, r4
 8009230:	f000 fb60 	bl	80098f4 <_Bfree>
 8009234:	46c2      	mov	sl, r8
 8009236:	9b08      	ldr	r3, [sp, #32]
 8009238:	1b9a      	subs	r2, r3, r6
 800923a:	d004      	beq.n	8009246 <_dtoa_r+0x7b6>
 800923c:	4651      	mov	r1, sl
 800923e:	4620      	mov	r0, r4
 8009240:	f000 fd18 	bl	8009c74 <__pow5mult>
 8009244:	4682      	mov	sl, r0
 8009246:	2101      	movs	r1, #1
 8009248:	4620      	mov	r0, r4
 800924a:	f000 fc53 	bl	8009af4 <__i2b>
 800924e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009250:	2b00      	cmp	r3, #0
 8009252:	4606      	mov	r6, r0
 8009254:	f340 8081 	ble.w	800935a <_dtoa_r+0x8ca>
 8009258:	461a      	mov	r2, r3
 800925a:	4601      	mov	r1, r0
 800925c:	4620      	mov	r0, r4
 800925e:	f000 fd09 	bl	8009c74 <__pow5mult>
 8009262:	9b07      	ldr	r3, [sp, #28]
 8009264:	2b01      	cmp	r3, #1
 8009266:	4606      	mov	r6, r0
 8009268:	dd7a      	ble.n	8009360 <_dtoa_r+0x8d0>
 800926a:	f04f 0800 	mov.w	r8, #0
 800926e:	6933      	ldr	r3, [r6, #16]
 8009270:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009274:	6918      	ldr	r0, [r3, #16]
 8009276:	f000 fbef 	bl	8009a58 <__hi0bits>
 800927a:	f1c0 0020 	rsb	r0, r0, #32
 800927e:	9b06      	ldr	r3, [sp, #24]
 8009280:	4418      	add	r0, r3
 8009282:	f010 001f 	ands.w	r0, r0, #31
 8009286:	f000 8094 	beq.w	80093b2 <_dtoa_r+0x922>
 800928a:	f1c0 0320 	rsb	r3, r0, #32
 800928e:	2b04      	cmp	r3, #4
 8009290:	f340 8085 	ble.w	800939e <_dtoa_r+0x90e>
 8009294:	9b05      	ldr	r3, [sp, #20]
 8009296:	f1c0 001c 	rsb	r0, r0, #28
 800929a:	4403      	add	r3, r0
 800929c:	9305      	str	r3, [sp, #20]
 800929e:	9b06      	ldr	r3, [sp, #24]
 80092a0:	4403      	add	r3, r0
 80092a2:	4405      	add	r5, r0
 80092a4:	9306      	str	r3, [sp, #24]
 80092a6:	9b05      	ldr	r3, [sp, #20]
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	dd05      	ble.n	80092b8 <_dtoa_r+0x828>
 80092ac:	4651      	mov	r1, sl
 80092ae:	461a      	mov	r2, r3
 80092b0:	4620      	mov	r0, r4
 80092b2:	f000 fd39 	bl	8009d28 <__lshift>
 80092b6:	4682      	mov	sl, r0
 80092b8:	9b06      	ldr	r3, [sp, #24]
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	dd05      	ble.n	80092ca <_dtoa_r+0x83a>
 80092be:	4631      	mov	r1, r6
 80092c0:	461a      	mov	r2, r3
 80092c2:	4620      	mov	r0, r4
 80092c4:	f000 fd30 	bl	8009d28 <__lshift>
 80092c8:	4606      	mov	r6, r0
 80092ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d072      	beq.n	80093b6 <_dtoa_r+0x926>
 80092d0:	4631      	mov	r1, r6
 80092d2:	4650      	mov	r0, sl
 80092d4:	f000 fd94 	bl	8009e00 <__mcmp>
 80092d8:	2800      	cmp	r0, #0
 80092da:	da6c      	bge.n	80093b6 <_dtoa_r+0x926>
 80092dc:	2300      	movs	r3, #0
 80092de:	4651      	mov	r1, sl
 80092e0:	220a      	movs	r2, #10
 80092e2:	4620      	mov	r0, r4
 80092e4:	f000 fb28 	bl	8009938 <__multadd>
 80092e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80092ea:	f10b 3bff 	add.w	fp, fp, #4294967295
 80092ee:	4682      	mov	sl, r0
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	f000 81b0 	beq.w	8009656 <_dtoa_r+0xbc6>
 80092f6:	2300      	movs	r3, #0
 80092f8:	4639      	mov	r1, r7
 80092fa:	220a      	movs	r2, #10
 80092fc:	4620      	mov	r0, r4
 80092fe:	f000 fb1b 	bl	8009938 <__multadd>
 8009302:	9b01      	ldr	r3, [sp, #4]
 8009304:	2b00      	cmp	r3, #0
 8009306:	4607      	mov	r7, r0
 8009308:	f300 8096 	bgt.w	8009438 <_dtoa_r+0x9a8>
 800930c:	9b07      	ldr	r3, [sp, #28]
 800930e:	2b02      	cmp	r3, #2
 8009310:	dc59      	bgt.n	80093c6 <_dtoa_r+0x936>
 8009312:	e091      	b.n	8009438 <_dtoa_r+0x9a8>
 8009314:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009316:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800931a:	e758      	b.n	80091ce <_dtoa_r+0x73e>
 800931c:	9b04      	ldr	r3, [sp, #16]
 800931e:	1e5e      	subs	r6, r3, #1
 8009320:	9b08      	ldr	r3, [sp, #32]
 8009322:	42b3      	cmp	r3, r6
 8009324:	bfbf      	itttt	lt
 8009326:	9b08      	ldrlt	r3, [sp, #32]
 8009328:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800932a:	9608      	strlt	r6, [sp, #32]
 800932c:	1af3      	sublt	r3, r6, r3
 800932e:	bfb4      	ite	lt
 8009330:	18d2      	addlt	r2, r2, r3
 8009332:	1b9e      	subge	r6, r3, r6
 8009334:	9b04      	ldr	r3, [sp, #16]
 8009336:	bfbc      	itt	lt
 8009338:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800933a:	2600      	movlt	r6, #0
 800933c:	2b00      	cmp	r3, #0
 800933e:	bfb7      	itett	lt
 8009340:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8009344:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8009348:	1a9d      	sublt	r5, r3, r2
 800934a:	2300      	movlt	r3, #0
 800934c:	e741      	b.n	80091d2 <_dtoa_r+0x742>
 800934e:	9e08      	ldr	r6, [sp, #32]
 8009350:	9d05      	ldr	r5, [sp, #20]
 8009352:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8009354:	e748      	b.n	80091e8 <_dtoa_r+0x758>
 8009356:	9a08      	ldr	r2, [sp, #32]
 8009358:	e770      	b.n	800923c <_dtoa_r+0x7ac>
 800935a:	9b07      	ldr	r3, [sp, #28]
 800935c:	2b01      	cmp	r3, #1
 800935e:	dc19      	bgt.n	8009394 <_dtoa_r+0x904>
 8009360:	9b02      	ldr	r3, [sp, #8]
 8009362:	b9bb      	cbnz	r3, 8009394 <_dtoa_r+0x904>
 8009364:	9b03      	ldr	r3, [sp, #12]
 8009366:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800936a:	b99b      	cbnz	r3, 8009394 <_dtoa_r+0x904>
 800936c:	9b03      	ldr	r3, [sp, #12]
 800936e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009372:	0d1b      	lsrs	r3, r3, #20
 8009374:	051b      	lsls	r3, r3, #20
 8009376:	b183      	cbz	r3, 800939a <_dtoa_r+0x90a>
 8009378:	9b05      	ldr	r3, [sp, #20]
 800937a:	3301      	adds	r3, #1
 800937c:	9305      	str	r3, [sp, #20]
 800937e:	9b06      	ldr	r3, [sp, #24]
 8009380:	3301      	adds	r3, #1
 8009382:	9306      	str	r3, [sp, #24]
 8009384:	f04f 0801 	mov.w	r8, #1
 8009388:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800938a:	2b00      	cmp	r3, #0
 800938c:	f47f af6f 	bne.w	800926e <_dtoa_r+0x7de>
 8009390:	2001      	movs	r0, #1
 8009392:	e774      	b.n	800927e <_dtoa_r+0x7ee>
 8009394:	f04f 0800 	mov.w	r8, #0
 8009398:	e7f6      	b.n	8009388 <_dtoa_r+0x8f8>
 800939a:	4698      	mov	r8, r3
 800939c:	e7f4      	b.n	8009388 <_dtoa_r+0x8f8>
 800939e:	d082      	beq.n	80092a6 <_dtoa_r+0x816>
 80093a0:	9a05      	ldr	r2, [sp, #20]
 80093a2:	331c      	adds	r3, #28
 80093a4:	441a      	add	r2, r3
 80093a6:	9205      	str	r2, [sp, #20]
 80093a8:	9a06      	ldr	r2, [sp, #24]
 80093aa:	441a      	add	r2, r3
 80093ac:	441d      	add	r5, r3
 80093ae:	9206      	str	r2, [sp, #24]
 80093b0:	e779      	b.n	80092a6 <_dtoa_r+0x816>
 80093b2:	4603      	mov	r3, r0
 80093b4:	e7f4      	b.n	80093a0 <_dtoa_r+0x910>
 80093b6:	9b04      	ldr	r3, [sp, #16]
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	dc37      	bgt.n	800942c <_dtoa_r+0x99c>
 80093bc:	9b07      	ldr	r3, [sp, #28]
 80093be:	2b02      	cmp	r3, #2
 80093c0:	dd34      	ble.n	800942c <_dtoa_r+0x99c>
 80093c2:	9b04      	ldr	r3, [sp, #16]
 80093c4:	9301      	str	r3, [sp, #4]
 80093c6:	9b01      	ldr	r3, [sp, #4]
 80093c8:	b963      	cbnz	r3, 80093e4 <_dtoa_r+0x954>
 80093ca:	4631      	mov	r1, r6
 80093cc:	2205      	movs	r2, #5
 80093ce:	4620      	mov	r0, r4
 80093d0:	f000 fab2 	bl	8009938 <__multadd>
 80093d4:	4601      	mov	r1, r0
 80093d6:	4606      	mov	r6, r0
 80093d8:	4650      	mov	r0, sl
 80093da:	f000 fd11 	bl	8009e00 <__mcmp>
 80093de:	2800      	cmp	r0, #0
 80093e0:	f73f adbb 	bgt.w	8008f5a <_dtoa_r+0x4ca>
 80093e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80093e6:	9d00      	ldr	r5, [sp, #0]
 80093e8:	ea6f 0b03 	mvn.w	fp, r3
 80093ec:	f04f 0800 	mov.w	r8, #0
 80093f0:	4631      	mov	r1, r6
 80093f2:	4620      	mov	r0, r4
 80093f4:	f000 fa7e 	bl	80098f4 <_Bfree>
 80093f8:	2f00      	cmp	r7, #0
 80093fa:	f43f aeab 	beq.w	8009154 <_dtoa_r+0x6c4>
 80093fe:	f1b8 0f00 	cmp.w	r8, #0
 8009402:	d005      	beq.n	8009410 <_dtoa_r+0x980>
 8009404:	45b8      	cmp	r8, r7
 8009406:	d003      	beq.n	8009410 <_dtoa_r+0x980>
 8009408:	4641      	mov	r1, r8
 800940a:	4620      	mov	r0, r4
 800940c:	f000 fa72 	bl	80098f4 <_Bfree>
 8009410:	4639      	mov	r1, r7
 8009412:	4620      	mov	r0, r4
 8009414:	f000 fa6e 	bl	80098f4 <_Bfree>
 8009418:	e69c      	b.n	8009154 <_dtoa_r+0x6c4>
 800941a:	2600      	movs	r6, #0
 800941c:	4637      	mov	r7, r6
 800941e:	e7e1      	b.n	80093e4 <_dtoa_r+0x954>
 8009420:	46bb      	mov	fp, r7
 8009422:	4637      	mov	r7, r6
 8009424:	e599      	b.n	8008f5a <_dtoa_r+0x4ca>
 8009426:	bf00      	nop
 8009428:	40240000 	.word	0x40240000
 800942c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800942e:	2b00      	cmp	r3, #0
 8009430:	f000 80c8 	beq.w	80095c4 <_dtoa_r+0xb34>
 8009434:	9b04      	ldr	r3, [sp, #16]
 8009436:	9301      	str	r3, [sp, #4]
 8009438:	2d00      	cmp	r5, #0
 800943a:	dd05      	ble.n	8009448 <_dtoa_r+0x9b8>
 800943c:	4639      	mov	r1, r7
 800943e:	462a      	mov	r2, r5
 8009440:	4620      	mov	r0, r4
 8009442:	f000 fc71 	bl	8009d28 <__lshift>
 8009446:	4607      	mov	r7, r0
 8009448:	f1b8 0f00 	cmp.w	r8, #0
 800944c:	d05b      	beq.n	8009506 <_dtoa_r+0xa76>
 800944e:	6879      	ldr	r1, [r7, #4]
 8009450:	4620      	mov	r0, r4
 8009452:	f000 fa0f 	bl	8009874 <_Balloc>
 8009456:	4605      	mov	r5, r0
 8009458:	b928      	cbnz	r0, 8009466 <_dtoa_r+0x9d6>
 800945a:	4b83      	ldr	r3, [pc, #524]	; (8009668 <_dtoa_r+0xbd8>)
 800945c:	4602      	mov	r2, r0
 800945e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8009462:	f7ff bb2e 	b.w	8008ac2 <_dtoa_r+0x32>
 8009466:	693a      	ldr	r2, [r7, #16]
 8009468:	3202      	adds	r2, #2
 800946a:	0092      	lsls	r2, r2, #2
 800946c:	f107 010c 	add.w	r1, r7, #12
 8009470:	300c      	adds	r0, #12
 8009472:	f001 ff85 	bl	800b380 <memcpy>
 8009476:	2201      	movs	r2, #1
 8009478:	4629      	mov	r1, r5
 800947a:	4620      	mov	r0, r4
 800947c:	f000 fc54 	bl	8009d28 <__lshift>
 8009480:	9b00      	ldr	r3, [sp, #0]
 8009482:	3301      	adds	r3, #1
 8009484:	9304      	str	r3, [sp, #16]
 8009486:	e9dd 2300 	ldrd	r2, r3, [sp]
 800948a:	4413      	add	r3, r2
 800948c:	9308      	str	r3, [sp, #32]
 800948e:	9b02      	ldr	r3, [sp, #8]
 8009490:	f003 0301 	and.w	r3, r3, #1
 8009494:	46b8      	mov	r8, r7
 8009496:	9306      	str	r3, [sp, #24]
 8009498:	4607      	mov	r7, r0
 800949a:	9b04      	ldr	r3, [sp, #16]
 800949c:	4631      	mov	r1, r6
 800949e:	3b01      	subs	r3, #1
 80094a0:	4650      	mov	r0, sl
 80094a2:	9301      	str	r3, [sp, #4]
 80094a4:	f7ff fa6c 	bl	8008980 <quorem>
 80094a8:	4641      	mov	r1, r8
 80094aa:	9002      	str	r0, [sp, #8]
 80094ac:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80094b0:	4650      	mov	r0, sl
 80094b2:	f000 fca5 	bl	8009e00 <__mcmp>
 80094b6:	463a      	mov	r2, r7
 80094b8:	9005      	str	r0, [sp, #20]
 80094ba:	4631      	mov	r1, r6
 80094bc:	4620      	mov	r0, r4
 80094be:	f000 fcbb 	bl	8009e38 <__mdiff>
 80094c2:	68c2      	ldr	r2, [r0, #12]
 80094c4:	4605      	mov	r5, r0
 80094c6:	bb02      	cbnz	r2, 800950a <_dtoa_r+0xa7a>
 80094c8:	4601      	mov	r1, r0
 80094ca:	4650      	mov	r0, sl
 80094cc:	f000 fc98 	bl	8009e00 <__mcmp>
 80094d0:	4602      	mov	r2, r0
 80094d2:	4629      	mov	r1, r5
 80094d4:	4620      	mov	r0, r4
 80094d6:	9209      	str	r2, [sp, #36]	; 0x24
 80094d8:	f000 fa0c 	bl	80098f4 <_Bfree>
 80094dc:	9b07      	ldr	r3, [sp, #28]
 80094de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80094e0:	9d04      	ldr	r5, [sp, #16]
 80094e2:	ea43 0102 	orr.w	r1, r3, r2
 80094e6:	9b06      	ldr	r3, [sp, #24]
 80094e8:	4319      	orrs	r1, r3
 80094ea:	d110      	bne.n	800950e <_dtoa_r+0xa7e>
 80094ec:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80094f0:	d029      	beq.n	8009546 <_dtoa_r+0xab6>
 80094f2:	9b05      	ldr	r3, [sp, #20]
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	dd02      	ble.n	80094fe <_dtoa_r+0xa6e>
 80094f8:	9b02      	ldr	r3, [sp, #8]
 80094fa:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80094fe:	9b01      	ldr	r3, [sp, #4]
 8009500:	f883 9000 	strb.w	r9, [r3]
 8009504:	e774      	b.n	80093f0 <_dtoa_r+0x960>
 8009506:	4638      	mov	r0, r7
 8009508:	e7ba      	b.n	8009480 <_dtoa_r+0x9f0>
 800950a:	2201      	movs	r2, #1
 800950c:	e7e1      	b.n	80094d2 <_dtoa_r+0xa42>
 800950e:	9b05      	ldr	r3, [sp, #20]
 8009510:	2b00      	cmp	r3, #0
 8009512:	db04      	blt.n	800951e <_dtoa_r+0xa8e>
 8009514:	9907      	ldr	r1, [sp, #28]
 8009516:	430b      	orrs	r3, r1
 8009518:	9906      	ldr	r1, [sp, #24]
 800951a:	430b      	orrs	r3, r1
 800951c:	d120      	bne.n	8009560 <_dtoa_r+0xad0>
 800951e:	2a00      	cmp	r2, #0
 8009520:	dded      	ble.n	80094fe <_dtoa_r+0xa6e>
 8009522:	4651      	mov	r1, sl
 8009524:	2201      	movs	r2, #1
 8009526:	4620      	mov	r0, r4
 8009528:	f000 fbfe 	bl	8009d28 <__lshift>
 800952c:	4631      	mov	r1, r6
 800952e:	4682      	mov	sl, r0
 8009530:	f000 fc66 	bl	8009e00 <__mcmp>
 8009534:	2800      	cmp	r0, #0
 8009536:	dc03      	bgt.n	8009540 <_dtoa_r+0xab0>
 8009538:	d1e1      	bne.n	80094fe <_dtoa_r+0xa6e>
 800953a:	f019 0f01 	tst.w	r9, #1
 800953e:	d0de      	beq.n	80094fe <_dtoa_r+0xa6e>
 8009540:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009544:	d1d8      	bne.n	80094f8 <_dtoa_r+0xa68>
 8009546:	9a01      	ldr	r2, [sp, #4]
 8009548:	2339      	movs	r3, #57	; 0x39
 800954a:	7013      	strb	r3, [r2, #0]
 800954c:	462b      	mov	r3, r5
 800954e:	461d      	mov	r5, r3
 8009550:	3b01      	subs	r3, #1
 8009552:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009556:	2a39      	cmp	r2, #57	; 0x39
 8009558:	d06c      	beq.n	8009634 <_dtoa_r+0xba4>
 800955a:	3201      	adds	r2, #1
 800955c:	701a      	strb	r2, [r3, #0]
 800955e:	e747      	b.n	80093f0 <_dtoa_r+0x960>
 8009560:	2a00      	cmp	r2, #0
 8009562:	dd07      	ble.n	8009574 <_dtoa_r+0xae4>
 8009564:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009568:	d0ed      	beq.n	8009546 <_dtoa_r+0xab6>
 800956a:	9a01      	ldr	r2, [sp, #4]
 800956c:	f109 0301 	add.w	r3, r9, #1
 8009570:	7013      	strb	r3, [r2, #0]
 8009572:	e73d      	b.n	80093f0 <_dtoa_r+0x960>
 8009574:	9b04      	ldr	r3, [sp, #16]
 8009576:	9a08      	ldr	r2, [sp, #32]
 8009578:	f803 9c01 	strb.w	r9, [r3, #-1]
 800957c:	4293      	cmp	r3, r2
 800957e:	d043      	beq.n	8009608 <_dtoa_r+0xb78>
 8009580:	4651      	mov	r1, sl
 8009582:	2300      	movs	r3, #0
 8009584:	220a      	movs	r2, #10
 8009586:	4620      	mov	r0, r4
 8009588:	f000 f9d6 	bl	8009938 <__multadd>
 800958c:	45b8      	cmp	r8, r7
 800958e:	4682      	mov	sl, r0
 8009590:	f04f 0300 	mov.w	r3, #0
 8009594:	f04f 020a 	mov.w	r2, #10
 8009598:	4641      	mov	r1, r8
 800959a:	4620      	mov	r0, r4
 800959c:	d107      	bne.n	80095ae <_dtoa_r+0xb1e>
 800959e:	f000 f9cb 	bl	8009938 <__multadd>
 80095a2:	4680      	mov	r8, r0
 80095a4:	4607      	mov	r7, r0
 80095a6:	9b04      	ldr	r3, [sp, #16]
 80095a8:	3301      	adds	r3, #1
 80095aa:	9304      	str	r3, [sp, #16]
 80095ac:	e775      	b.n	800949a <_dtoa_r+0xa0a>
 80095ae:	f000 f9c3 	bl	8009938 <__multadd>
 80095b2:	4639      	mov	r1, r7
 80095b4:	4680      	mov	r8, r0
 80095b6:	2300      	movs	r3, #0
 80095b8:	220a      	movs	r2, #10
 80095ba:	4620      	mov	r0, r4
 80095bc:	f000 f9bc 	bl	8009938 <__multadd>
 80095c0:	4607      	mov	r7, r0
 80095c2:	e7f0      	b.n	80095a6 <_dtoa_r+0xb16>
 80095c4:	9b04      	ldr	r3, [sp, #16]
 80095c6:	9301      	str	r3, [sp, #4]
 80095c8:	9d00      	ldr	r5, [sp, #0]
 80095ca:	4631      	mov	r1, r6
 80095cc:	4650      	mov	r0, sl
 80095ce:	f7ff f9d7 	bl	8008980 <quorem>
 80095d2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80095d6:	9b00      	ldr	r3, [sp, #0]
 80095d8:	f805 9b01 	strb.w	r9, [r5], #1
 80095dc:	1aea      	subs	r2, r5, r3
 80095de:	9b01      	ldr	r3, [sp, #4]
 80095e0:	4293      	cmp	r3, r2
 80095e2:	dd07      	ble.n	80095f4 <_dtoa_r+0xb64>
 80095e4:	4651      	mov	r1, sl
 80095e6:	2300      	movs	r3, #0
 80095e8:	220a      	movs	r2, #10
 80095ea:	4620      	mov	r0, r4
 80095ec:	f000 f9a4 	bl	8009938 <__multadd>
 80095f0:	4682      	mov	sl, r0
 80095f2:	e7ea      	b.n	80095ca <_dtoa_r+0xb3a>
 80095f4:	9b01      	ldr	r3, [sp, #4]
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	bfc8      	it	gt
 80095fa:	461d      	movgt	r5, r3
 80095fc:	9b00      	ldr	r3, [sp, #0]
 80095fe:	bfd8      	it	le
 8009600:	2501      	movle	r5, #1
 8009602:	441d      	add	r5, r3
 8009604:	f04f 0800 	mov.w	r8, #0
 8009608:	4651      	mov	r1, sl
 800960a:	2201      	movs	r2, #1
 800960c:	4620      	mov	r0, r4
 800960e:	f000 fb8b 	bl	8009d28 <__lshift>
 8009612:	4631      	mov	r1, r6
 8009614:	4682      	mov	sl, r0
 8009616:	f000 fbf3 	bl	8009e00 <__mcmp>
 800961a:	2800      	cmp	r0, #0
 800961c:	dc96      	bgt.n	800954c <_dtoa_r+0xabc>
 800961e:	d102      	bne.n	8009626 <_dtoa_r+0xb96>
 8009620:	f019 0f01 	tst.w	r9, #1
 8009624:	d192      	bne.n	800954c <_dtoa_r+0xabc>
 8009626:	462b      	mov	r3, r5
 8009628:	461d      	mov	r5, r3
 800962a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800962e:	2a30      	cmp	r2, #48	; 0x30
 8009630:	d0fa      	beq.n	8009628 <_dtoa_r+0xb98>
 8009632:	e6dd      	b.n	80093f0 <_dtoa_r+0x960>
 8009634:	9a00      	ldr	r2, [sp, #0]
 8009636:	429a      	cmp	r2, r3
 8009638:	d189      	bne.n	800954e <_dtoa_r+0xabe>
 800963a:	f10b 0b01 	add.w	fp, fp, #1
 800963e:	2331      	movs	r3, #49	; 0x31
 8009640:	e796      	b.n	8009570 <_dtoa_r+0xae0>
 8009642:	4b0a      	ldr	r3, [pc, #40]	; (800966c <_dtoa_r+0xbdc>)
 8009644:	f7ff ba99 	b.w	8008b7a <_dtoa_r+0xea>
 8009648:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800964a:	2b00      	cmp	r3, #0
 800964c:	f47f aa6d 	bne.w	8008b2a <_dtoa_r+0x9a>
 8009650:	4b07      	ldr	r3, [pc, #28]	; (8009670 <_dtoa_r+0xbe0>)
 8009652:	f7ff ba92 	b.w	8008b7a <_dtoa_r+0xea>
 8009656:	9b01      	ldr	r3, [sp, #4]
 8009658:	2b00      	cmp	r3, #0
 800965a:	dcb5      	bgt.n	80095c8 <_dtoa_r+0xb38>
 800965c:	9b07      	ldr	r3, [sp, #28]
 800965e:	2b02      	cmp	r3, #2
 8009660:	f73f aeb1 	bgt.w	80093c6 <_dtoa_r+0x936>
 8009664:	e7b0      	b.n	80095c8 <_dtoa_r+0xb38>
 8009666:	bf00      	nop
 8009668:	0800ce51 	.word	0x0800ce51
 800966c:	0800cdac 	.word	0x0800cdac
 8009670:	0800cdd5 	.word	0x0800cdd5

08009674 <_free_r>:
 8009674:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009676:	2900      	cmp	r1, #0
 8009678:	d044      	beq.n	8009704 <_free_r+0x90>
 800967a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800967e:	9001      	str	r0, [sp, #4]
 8009680:	2b00      	cmp	r3, #0
 8009682:	f1a1 0404 	sub.w	r4, r1, #4
 8009686:	bfb8      	it	lt
 8009688:	18e4      	addlt	r4, r4, r3
 800968a:	f000 f8e7 	bl	800985c <__malloc_lock>
 800968e:	4a1e      	ldr	r2, [pc, #120]	; (8009708 <_free_r+0x94>)
 8009690:	9801      	ldr	r0, [sp, #4]
 8009692:	6813      	ldr	r3, [r2, #0]
 8009694:	b933      	cbnz	r3, 80096a4 <_free_r+0x30>
 8009696:	6063      	str	r3, [r4, #4]
 8009698:	6014      	str	r4, [r2, #0]
 800969a:	b003      	add	sp, #12
 800969c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80096a0:	f000 b8e2 	b.w	8009868 <__malloc_unlock>
 80096a4:	42a3      	cmp	r3, r4
 80096a6:	d908      	bls.n	80096ba <_free_r+0x46>
 80096a8:	6825      	ldr	r5, [r4, #0]
 80096aa:	1961      	adds	r1, r4, r5
 80096ac:	428b      	cmp	r3, r1
 80096ae:	bf01      	itttt	eq
 80096b0:	6819      	ldreq	r1, [r3, #0]
 80096b2:	685b      	ldreq	r3, [r3, #4]
 80096b4:	1949      	addeq	r1, r1, r5
 80096b6:	6021      	streq	r1, [r4, #0]
 80096b8:	e7ed      	b.n	8009696 <_free_r+0x22>
 80096ba:	461a      	mov	r2, r3
 80096bc:	685b      	ldr	r3, [r3, #4]
 80096be:	b10b      	cbz	r3, 80096c4 <_free_r+0x50>
 80096c0:	42a3      	cmp	r3, r4
 80096c2:	d9fa      	bls.n	80096ba <_free_r+0x46>
 80096c4:	6811      	ldr	r1, [r2, #0]
 80096c6:	1855      	adds	r5, r2, r1
 80096c8:	42a5      	cmp	r5, r4
 80096ca:	d10b      	bne.n	80096e4 <_free_r+0x70>
 80096cc:	6824      	ldr	r4, [r4, #0]
 80096ce:	4421      	add	r1, r4
 80096d0:	1854      	adds	r4, r2, r1
 80096d2:	42a3      	cmp	r3, r4
 80096d4:	6011      	str	r1, [r2, #0]
 80096d6:	d1e0      	bne.n	800969a <_free_r+0x26>
 80096d8:	681c      	ldr	r4, [r3, #0]
 80096da:	685b      	ldr	r3, [r3, #4]
 80096dc:	6053      	str	r3, [r2, #4]
 80096de:	440c      	add	r4, r1
 80096e0:	6014      	str	r4, [r2, #0]
 80096e2:	e7da      	b.n	800969a <_free_r+0x26>
 80096e4:	d902      	bls.n	80096ec <_free_r+0x78>
 80096e6:	230c      	movs	r3, #12
 80096e8:	6003      	str	r3, [r0, #0]
 80096ea:	e7d6      	b.n	800969a <_free_r+0x26>
 80096ec:	6825      	ldr	r5, [r4, #0]
 80096ee:	1961      	adds	r1, r4, r5
 80096f0:	428b      	cmp	r3, r1
 80096f2:	bf04      	itt	eq
 80096f4:	6819      	ldreq	r1, [r3, #0]
 80096f6:	685b      	ldreq	r3, [r3, #4]
 80096f8:	6063      	str	r3, [r4, #4]
 80096fa:	bf04      	itt	eq
 80096fc:	1949      	addeq	r1, r1, r5
 80096fe:	6021      	streq	r1, [r4, #0]
 8009700:	6054      	str	r4, [r2, #4]
 8009702:	e7ca      	b.n	800969a <_free_r+0x26>
 8009704:	b003      	add	sp, #12
 8009706:	bd30      	pop	{r4, r5, pc}
 8009708:	200006cc 	.word	0x200006cc

0800970c <malloc>:
 800970c:	4b02      	ldr	r3, [pc, #8]	; (8009718 <malloc+0xc>)
 800970e:	4601      	mov	r1, r0
 8009710:	6818      	ldr	r0, [r3, #0]
 8009712:	f000 b823 	b.w	800975c <_malloc_r>
 8009716:	bf00      	nop
 8009718:	20000084 	.word	0x20000084

0800971c <sbrk_aligned>:
 800971c:	b570      	push	{r4, r5, r6, lr}
 800971e:	4e0e      	ldr	r6, [pc, #56]	; (8009758 <sbrk_aligned+0x3c>)
 8009720:	460c      	mov	r4, r1
 8009722:	6831      	ldr	r1, [r6, #0]
 8009724:	4605      	mov	r5, r0
 8009726:	b911      	cbnz	r1, 800972e <sbrk_aligned+0x12>
 8009728:	f001 fe1a 	bl	800b360 <_sbrk_r>
 800972c:	6030      	str	r0, [r6, #0]
 800972e:	4621      	mov	r1, r4
 8009730:	4628      	mov	r0, r5
 8009732:	f001 fe15 	bl	800b360 <_sbrk_r>
 8009736:	1c43      	adds	r3, r0, #1
 8009738:	d00a      	beq.n	8009750 <sbrk_aligned+0x34>
 800973a:	1cc4      	adds	r4, r0, #3
 800973c:	f024 0403 	bic.w	r4, r4, #3
 8009740:	42a0      	cmp	r0, r4
 8009742:	d007      	beq.n	8009754 <sbrk_aligned+0x38>
 8009744:	1a21      	subs	r1, r4, r0
 8009746:	4628      	mov	r0, r5
 8009748:	f001 fe0a 	bl	800b360 <_sbrk_r>
 800974c:	3001      	adds	r0, #1
 800974e:	d101      	bne.n	8009754 <sbrk_aligned+0x38>
 8009750:	f04f 34ff 	mov.w	r4, #4294967295
 8009754:	4620      	mov	r0, r4
 8009756:	bd70      	pop	{r4, r5, r6, pc}
 8009758:	200006d0 	.word	0x200006d0

0800975c <_malloc_r>:
 800975c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009760:	1ccd      	adds	r5, r1, #3
 8009762:	f025 0503 	bic.w	r5, r5, #3
 8009766:	3508      	adds	r5, #8
 8009768:	2d0c      	cmp	r5, #12
 800976a:	bf38      	it	cc
 800976c:	250c      	movcc	r5, #12
 800976e:	2d00      	cmp	r5, #0
 8009770:	4607      	mov	r7, r0
 8009772:	db01      	blt.n	8009778 <_malloc_r+0x1c>
 8009774:	42a9      	cmp	r1, r5
 8009776:	d905      	bls.n	8009784 <_malloc_r+0x28>
 8009778:	230c      	movs	r3, #12
 800977a:	603b      	str	r3, [r7, #0]
 800977c:	2600      	movs	r6, #0
 800977e:	4630      	mov	r0, r6
 8009780:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009784:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009858 <_malloc_r+0xfc>
 8009788:	f000 f868 	bl	800985c <__malloc_lock>
 800978c:	f8d8 3000 	ldr.w	r3, [r8]
 8009790:	461c      	mov	r4, r3
 8009792:	bb5c      	cbnz	r4, 80097ec <_malloc_r+0x90>
 8009794:	4629      	mov	r1, r5
 8009796:	4638      	mov	r0, r7
 8009798:	f7ff ffc0 	bl	800971c <sbrk_aligned>
 800979c:	1c43      	adds	r3, r0, #1
 800979e:	4604      	mov	r4, r0
 80097a0:	d155      	bne.n	800984e <_malloc_r+0xf2>
 80097a2:	f8d8 4000 	ldr.w	r4, [r8]
 80097a6:	4626      	mov	r6, r4
 80097a8:	2e00      	cmp	r6, #0
 80097aa:	d145      	bne.n	8009838 <_malloc_r+0xdc>
 80097ac:	2c00      	cmp	r4, #0
 80097ae:	d048      	beq.n	8009842 <_malloc_r+0xe6>
 80097b0:	6823      	ldr	r3, [r4, #0]
 80097b2:	4631      	mov	r1, r6
 80097b4:	4638      	mov	r0, r7
 80097b6:	eb04 0903 	add.w	r9, r4, r3
 80097ba:	f001 fdd1 	bl	800b360 <_sbrk_r>
 80097be:	4581      	cmp	r9, r0
 80097c0:	d13f      	bne.n	8009842 <_malloc_r+0xe6>
 80097c2:	6821      	ldr	r1, [r4, #0]
 80097c4:	1a6d      	subs	r5, r5, r1
 80097c6:	4629      	mov	r1, r5
 80097c8:	4638      	mov	r0, r7
 80097ca:	f7ff ffa7 	bl	800971c <sbrk_aligned>
 80097ce:	3001      	adds	r0, #1
 80097d0:	d037      	beq.n	8009842 <_malloc_r+0xe6>
 80097d2:	6823      	ldr	r3, [r4, #0]
 80097d4:	442b      	add	r3, r5
 80097d6:	6023      	str	r3, [r4, #0]
 80097d8:	f8d8 3000 	ldr.w	r3, [r8]
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d038      	beq.n	8009852 <_malloc_r+0xf6>
 80097e0:	685a      	ldr	r2, [r3, #4]
 80097e2:	42a2      	cmp	r2, r4
 80097e4:	d12b      	bne.n	800983e <_malloc_r+0xe2>
 80097e6:	2200      	movs	r2, #0
 80097e8:	605a      	str	r2, [r3, #4]
 80097ea:	e00f      	b.n	800980c <_malloc_r+0xb0>
 80097ec:	6822      	ldr	r2, [r4, #0]
 80097ee:	1b52      	subs	r2, r2, r5
 80097f0:	d41f      	bmi.n	8009832 <_malloc_r+0xd6>
 80097f2:	2a0b      	cmp	r2, #11
 80097f4:	d917      	bls.n	8009826 <_malloc_r+0xca>
 80097f6:	1961      	adds	r1, r4, r5
 80097f8:	42a3      	cmp	r3, r4
 80097fa:	6025      	str	r5, [r4, #0]
 80097fc:	bf18      	it	ne
 80097fe:	6059      	strne	r1, [r3, #4]
 8009800:	6863      	ldr	r3, [r4, #4]
 8009802:	bf08      	it	eq
 8009804:	f8c8 1000 	streq.w	r1, [r8]
 8009808:	5162      	str	r2, [r4, r5]
 800980a:	604b      	str	r3, [r1, #4]
 800980c:	4638      	mov	r0, r7
 800980e:	f104 060b 	add.w	r6, r4, #11
 8009812:	f000 f829 	bl	8009868 <__malloc_unlock>
 8009816:	f026 0607 	bic.w	r6, r6, #7
 800981a:	1d23      	adds	r3, r4, #4
 800981c:	1af2      	subs	r2, r6, r3
 800981e:	d0ae      	beq.n	800977e <_malloc_r+0x22>
 8009820:	1b9b      	subs	r3, r3, r6
 8009822:	50a3      	str	r3, [r4, r2]
 8009824:	e7ab      	b.n	800977e <_malloc_r+0x22>
 8009826:	42a3      	cmp	r3, r4
 8009828:	6862      	ldr	r2, [r4, #4]
 800982a:	d1dd      	bne.n	80097e8 <_malloc_r+0x8c>
 800982c:	f8c8 2000 	str.w	r2, [r8]
 8009830:	e7ec      	b.n	800980c <_malloc_r+0xb0>
 8009832:	4623      	mov	r3, r4
 8009834:	6864      	ldr	r4, [r4, #4]
 8009836:	e7ac      	b.n	8009792 <_malloc_r+0x36>
 8009838:	4634      	mov	r4, r6
 800983a:	6876      	ldr	r6, [r6, #4]
 800983c:	e7b4      	b.n	80097a8 <_malloc_r+0x4c>
 800983e:	4613      	mov	r3, r2
 8009840:	e7cc      	b.n	80097dc <_malloc_r+0x80>
 8009842:	230c      	movs	r3, #12
 8009844:	603b      	str	r3, [r7, #0]
 8009846:	4638      	mov	r0, r7
 8009848:	f000 f80e 	bl	8009868 <__malloc_unlock>
 800984c:	e797      	b.n	800977e <_malloc_r+0x22>
 800984e:	6025      	str	r5, [r4, #0]
 8009850:	e7dc      	b.n	800980c <_malloc_r+0xb0>
 8009852:	605b      	str	r3, [r3, #4]
 8009854:	deff      	udf	#255	; 0xff
 8009856:	bf00      	nop
 8009858:	200006cc 	.word	0x200006cc

0800985c <__malloc_lock>:
 800985c:	4801      	ldr	r0, [pc, #4]	; (8009864 <__malloc_lock+0x8>)
 800985e:	f7ff b887 	b.w	8008970 <__retarget_lock_acquire_recursive>
 8009862:	bf00      	nop
 8009864:	200006c8 	.word	0x200006c8

08009868 <__malloc_unlock>:
 8009868:	4801      	ldr	r0, [pc, #4]	; (8009870 <__malloc_unlock+0x8>)
 800986a:	f7ff b882 	b.w	8008972 <__retarget_lock_release_recursive>
 800986e:	bf00      	nop
 8009870:	200006c8 	.word	0x200006c8

08009874 <_Balloc>:
 8009874:	b570      	push	{r4, r5, r6, lr}
 8009876:	69c6      	ldr	r6, [r0, #28]
 8009878:	4604      	mov	r4, r0
 800987a:	460d      	mov	r5, r1
 800987c:	b976      	cbnz	r6, 800989c <_Balloc+0x28>
 800987e:	2010      	movs	r0, #16
 8009880:	f7ff ff44 	bl	800970c <malloc>
 8009884:	4602      	mov	r2, r0
 8009886:	61e0      	str	r0, [r4, #28]
 8009888:	b920      	cbnz	r0, 8009894 <_Balloc+0x20>
 800988a:	4b18      	ldr	r3, [pc, #96]	; (80098ec <_Balloc+0x78>)
 800988c:	4818      	ldr	r0, [pc, #96]	; (80098f0 <_Balloc+0x7c>)
 800988e:	216b      	movs	r1, #107	; 0x6b
 8009890:	f001 fd8e 	bl	800b3b0 <__assert_func>
 8009894:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009898:	6006      	str	r6, [r0, #0]
 800989a:	60c6      	str	r6, [r0, #12]
 800989c:	69e6      	ldr	r6, [r4, #28]
 800989e:	68f3      	ldr	r3, [r6, #12]
 80098a0:	b183      	cbz	r3, 80098c4 <_Balloc+0x50>
 80098a2:	69e3      	ldr	r3, [r4, #28]
 80098a4:	68db      	ldr	r3, [r3, #12]
 80098a6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80098aa:	b9b8      	cbnz	r0, 80098dc <_Balloc+0x68>
 80098ac:	2101      	movs	r1, #1
 80098ae:	fa01 f605 	lsl.w	r6, r1, r5
 80098b2:	1d72      	adds	r2, r6, #5
 80098b4:	0092      	lsls	r2, r2, #2
 80098b6:	4620      	mov	r0, r4
 80098b8:	f001 fd98 	bl	800b3ec <_calloc_r>
 80098bc:	b160      	cbz	r0, 80098d8 <_Balloc+0x64>
 80098be:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80098c2:	e00e      	b.n	80098e2 <_Balloc+0x6e>
 80098c4:	2221      	movs	r2, #33	; 0x21
 80098c6:	2104      	movs	r1, #4
 80098c8:	4620      	mov	r0, r4
 80098ca:	f001 fd8f 	bl	800b3ec <_calloc_r>
 80098ce:	69e3      	ldr	r3, [r4, #28]
 80098d0:	60f0      	str	r0, [r6, #12]
 80098d2:	68db      	ldr	r3, [r3, #12]
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d1e4      	bne.n	80098a2 <_Balloc+0x2e>
 80098d8:	2000      	movs	r0, #0
 80098da:	bd70      	pop	{r4, r5, r6, pc}
 80098dc:	6802      	ldr	r2, [r0, #0]
 80098de:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80098e2:	2300      	movs	r3, #0
 80098e4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80098e8:	e7f7      	b.n	80098da <_Balloc+0x66>
 80098ea:	bf00      	nop
 80098ec:	0800cde2 	.word	0x0800cde2
 80098f0:	0800ce62 	.word	0x0800ce62

080098f4 <_Bfree>:
 80098f4:	b570      	push	{r4, r5, r6, lr}
 80098f6:	69c6      	ldr	r6, [r0, #28]
 80098f8:	4605      	mov	r5, r0
 80098fa:	460c      	mov	r4, r1
 80098fc:	b976      	cbnz	r6, 800991c <_Bfree+0x28>
 80098fe:	2010      	movs	r0, #16
 8009900:	f7ff ff04 	bl	800970c <malloc>
 8009904:	4602      	mov	r2, r0
 8009906:	61e8      	str	r0, [r5, #28]
 8009908:	b920      	cbnz	r0, 8009914 <_Bfree+0x20>
 800990a:	4b09      	ldr	r3, [pc, #36]	; (8009930 <_Bfree+0x3c>)
 800990c:	4809      	ldr	r0, [pc, #36]	; (8009934 <_Bfree+0x40>)
 800990e:	218f      	movs	r1, #143	; 0x8f
 8009910:	f001 fd4e 	bl	800b3b0 <__assert_func>
 8009914:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009918:	6006      	str	r6, [r0, #0]
 800991a:	60c6      	str	r6, [r0, #12]
 800991c:	b13c      	cbz	r4, 800992e <_Bfree+0x3a>
 800991e:	69eb      	ldr	r3, [r5, #28]
 8009920:	6862      	ldr	r2, [r4, #4]
 8009922:	68db      	ldr	r3, [r3, #12]
 8009924:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009928:	6021      	str	r1, [r4, #0]
 800992a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800992e:	bd70      	pop	{r4, r5, r6, pc}
 8009930:	0800cde2 	.word	0x0800cde2
 8009934:	0800ce62 	.word	0x0800ce62

08009938 <__multadd>:
 8009938:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800993c:	690d      	ldr	r5, [r1, #16]
 800993e:	4607      	mov	r7, r0
 8009940:	460c      	mov	r4, r1
 8009942:	461e      	mov	r6, r3
 8009944:	f101 0c14 	add.w	ip, r1, #20
 8009948:	2000      	movs	r0, #0
 800994a:	f8dc 3000 	ldr.w	r3, [ip]
 800994e:	b299      	uxth	r1, r3
 8009950:	fb02 6101 	mla	r1, r2, r1, r6
 8009954:	0c1e      	lsrs	r6, r3, #16
 8009956:	0c0b      	lsrs	r3, r1, #16
 8009958:	fb02 3306 	mla	r3, r2, r6, r3
 800995c:	b289      	uxth	r1, r1
 800995e:	3001      	adds	r0, #1
 8009960:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009964:	4285      	cmp	r5, r0
 8009966:	f84c 1b04 	str.w	r1, [ip], #4
 800996a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800996e:	dcec      	bgt.n	800994a <__multadd+0x12>
 8009970:	b30e      	cbz	r6, 80099b6 <__multadd+0x7e>
 8009972:	68a3      	ldr	r3, [r4, #8]
 8009974:	42ab      	cmp	r3, r5
 8009976:	dc19      	bgt.n	80099ac <__multadd+0x74>
 8009978:	6861      	ldr	r1, [r4, #4]
 800997a:	4638      	mov	r0, r7
 800997c:	3101      	adds	r1, #1
 800997e:	f7ff ff79 	bl	8009874 <_Balloc>
 8009982:	4680      	mov	r8, r0
 8009984:	b928      	cbnz	r0, 8009992 <__multadd+0x5a>
 8009986:	4602      	mov	r2, r0
 8009988:	4b0c      	ldr	r3, [pc, #48]	; (80099bc <__multadd+0x84>)
 800998a:	480d      	ldr	r0, [pc, #52]	; (80099c0 <__multadd+0x88>)
 800998c:	21ba      	movs	r1, #186	; 0xba
 800998e:	f001 fd0f 	bl	800b3b0 <__assert_func>
 8009992:	6922      	ldr	r2, [r4, #16]
 8009994:	3202      	adds	r2, #2
 8009996:	f104 010c 	add.w	r1, r4, #12
 800999a:	0092      	lsls	r2, r2, #2
 800999c:	300c      	adds	r0, #12
 800999e:	f001 fcef 	bl	800b380 <memcpy>
 80099a2:	4621      	mov	r1, r4
 80099a4:	4638      	mov	r0, r7
 80099a6:	f7ff ffa5 	bl	80098f4 <_Bfree>
 80099aa:	4644      	mov	r4, r8
 80099ac:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80099b0:	3501      	adds	r5, #1
 80099b2:	615e      	str	r6, [r3, #20]
 80099b4:	6125      	str	r5, [r4, #16]
 80099b6:	4620      	mov	r0, r4
 80099b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80099bc:	0800ce51 	.word	0x0800ce51
 80099c0:	0800ce62 	.word	0x0800ce62

080099c4 <__s2b>:
 80099c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80099c8:	460c      	mov	r4, r1
 80099ca:	4615      	mov	r5, r2
 80099cc:	461f      	mov	r7, r3
 80099ce:	2209      	movs	r2, #9
 80099d0:	3308      	adds	r3, #8
 80099d2:	4606      	mov	r6, r0
 80099d4:	fb93 f3f2 	sdiv	r3, r3, r2
 80099d8:	2100      	movs	r1, #0
 80099da:	2201      	movs	r2, #1
 80099dc:	429a      	cmp	r2, r3
 80099de:	db09      	blt.n	80099f4 <__s2b+0x30>
 80099e0:	4630      	mov	r0, r6
 80099e2:	f7ff ff47 	bl	8009874 <_Balloc>
 80099e6:	b940      	cbnz	r0, 80099fa <__s2b+0x36>
 80099e8:	4602      	mov	r2, r0
 80099ea:	4b19      	ldr	r3, [pc, #100]	; (8009a50 <__s2b+0x8c>)
 80099ec:	4819      	ldr	r0, [pc, #100]	; (8009a54 <__s2b+0x90>)
 80099ee:	21d3      	movs	r1, #211	; 0xd3
 80099f0:	f001 fcde 	bl	800b3b0 <__assert_func>
 80099f4:	0052      	lsls	r2, r2, #1
 80099f6:	3101      	adds	r1, #1
 80099f8:	e7f0      	b.n	80099dc <__s2b+0x18>
 80099fa:	9b08      	ldr	r3, [sp, #32]
 80099fc:	6143      	str	r3, [r0, #20]
 80099fe:	2d09      	cmp	r5, #9
 8009a00:	f04f 0301 	mov.w	r3, #1
 8009a04:	6103      	str	r3, [r0, #16]
 8009a06:	dd16      	ble.n	8009a36 <__s2b+0x72>
 8009a08:	f104 0909 	add.w	r9, r4, #9
 8009a0c:	46c8      	mov	r8, r9
 8009a0e:	442c      	add	r4, r5
 8009a10:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009a14:	4601      	mov	r1, r0
 8009a16:	3b30      	subs	r3, #48	; 0x30
 8009a18:	220a      	movs	r2, #10
 8009a1a:	4630      	mov	r0, r6
 8009a1c:	f7ff ff8c 	bl	8009938 <__multadd>
 8009a20:	45a0      	cmp	r8, r4
 8009a22:	d1f5      	bne.n	8009a10 <__s2b+0x4c>
 8009a24:	f1a5 0408 	sub.w	r4, r5, #8
 8009a28:	444c      	add	r4, r9
 8009a2a:	1b2d      	subs	r5, r5, r4
 8009a2c:	1963      	adds	r3, r4, r5
 8009a2e:	42bb      	cmp	r3, r7
 8009a30:	db04      	blt.n	8009a3c <__s2b+0x78>
 8009a32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009a36:	340a      	adds	r4, #10
 8009a38:	2509      	movs	r5, #9
 8009a3a:	e7f6      	b.n	8009a2a <__s2b+0x66>
 8009a3c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009a40:	4601      	mov	r1, r0
 8009a42:	3b30      	subs	r3, #48	; 0x30
 8009a44:	220a      	movs	r2, #10
 8009a46:	4630      	mov	r0, r6
 8009a48:	f7ff ff76 	bl	8009938 <__multadd>
 8009a4c:	e7ee      	b.n	8009a2c <__s2b+0x68>
 8009a4e:	bf00      	nop
 8009a50:	0800ce51 	.word	0x0800ce51
 8009a54:	0800ce62 	.word	0x0800ce62

08009a58 <__hi0bits>:
 8009a58:	0c03      	lsrs	r3, r0, #16
 8009a5a:	041b      	lsls	r3, r3, #16
 8009a5c:	b9d3      	cbnz	r3, 8009a94 <__hi0bits+0x3c>
 8009a5e:	0400      	lsls	r0, r0, #16
 8009a60:	2310      	movs	r3, #16
 8009a62:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009a66:	bf04      	itt	eq
 8009a68:	0200      	lsleq	r0, r0, #8
 8009a6a:	3308      	addeq	r3, #8
 8009a6c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009a70:	bf04      	itt	eq
 8009a72:	0100      	lsleq	r0, r0, #4
 8009a74:	3304      	addeq	r3, #4
 8009a76:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009a7a:	bf04      	itt	eq
 8009a7c:	0080      	lsleq	r0, r0, #2
 8009a7e:	3302      	addeq	r3, #2
 8009a80:	2800      	cmp	r0, #0
 8009a82:	db05      	blt.n	8009a90 <__hi0bits+0x38>
 8009a84:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009a88:	f103 0301 	add.w	r3, r3, #1
 8009a8c:	bf08      	it	eq
 8009a8e:	2320      	moveq	r3, #32
 8009a90:	4618      	mov	r0, r3
 8009a92:	4770      	bx	lr
 8009a94:	2300      	movs	r3, #0
 8009a96:	e7e4      	b.n	8009a62 <__hi0bits+0xa>

08009a98 <__lo0bits>:
 8009a98:	6803      	ldr	r3, [r0, #0]
 8009a9a:	f013 0207 	ands.w	r2, r3, #7
 8009a9e:	d00c      	beq.n	8009aba <__lo0bits+0x22>
 8009aa0:	07d9      	lsls	r1, r3, #31
 8009aa2:	d422      	bmi.n	8009aea <__lo0bits+0x52>
 8009aa4:	079a      	lsls	r2, r3, #30
 8009aa6:	bf49      	itett	mi
 8009aa8:	085b      	lsrmi	r3, r3, #1
 8009aaa:	089b      	lsrpl	r3, r3, #2
 8009aac:	6003      	strmi	r3, [r0, #0]
 8009aae:	2201      	movmi	r2, #1
 8009ab0:	bf5c      	itt	pl
 8009ab2:	6003      	strpl	r3, [r0, #0]
 8009ab4:	2202      	movpl	r2, #2
 8009ab6:	4610      	mov	r0, r2
 8009ab8:	4770      	bx	lr
 8009aba:	b299      	uxth	r1, r3
 8009abc:	b909      	cbnz	r1, 8009ac2 <__lo0bits+0x2a>
 8009abe:	0c1b      	lsrs	r3, r3, #16
 8009ac0:	2210      	movs	r2, #16
 8009ac2:	b2d9      	uxtb	r1, r3
 8009ac4:	b909      	cbnz	r1, 8009aca <__lo0bits+0x32>
 8009ac6:	3208      	adds	r2, #8
 8009ac8:	0a1b      	lsrs	r3, r3, #8
 8009aca:	0719      	lsls	r1, r3, #28
 8009acc:	bf04      	itt	eq
 8009ace:	091b      	lsreq	r3, r3, #4
 8009ad0:	3204      	addeq	r2, #4
 8009ad2:	0799      	lsls	r1, r3, #30
 8009ad4:	bf04      	itt	eq
 8009ad6:	089b      	lsreq	r3, r3, #2
 8009ad8:	3202      	addeq	r2, #2
 8009ada:	07d9      	lsls	r1, r3, #31
 8009adc:	d403      	bmi.n	8009ae6 <__lo0bits+0x4e>
 8009ade:	085b      	lsrs	r3, r3, #1
 8009ae0:	f102 0201 	add.w	r2, r2, #1
 8009ae4:	d003      	beq.n	8009aee <__lo0bits+0x56>
 8009ae6:	6003      	str	r3, [r0, #0]
 8009ae8:	e7e5      	b.n	8009ab6 <__lo0bits+0x1e>
 8009aea:	2200      	movs	r2, #0
 8009aec:	e7e3      	b.n	8009ab6 <__lo0bits+0x1e>
 8009aee:	2220      	movs	r2, #32
 8009af0:	e7e1      	b.n	8009ab6 <__lo0bits+0x1e>
	...

08009af4 <__i2b>:
 8009af4:	b510      	push	{r4, lr}
 8009af6:	460c      	mov	r4, r1
 8009af8:	2101      	movs	r1, #1
 8009afa:	f7ff febb 	bl	8009874 <_Balloc>
 8009afe:	4602      	mov	r2, r0
 8009b00:	b928      	cbnz	r0, 8009b0e <__i2b+0x1a>
 8009b02:	4b05      	ldr	r3, [pc, #20]	; (8009b18 <__i2b+0x24>)
 8009b04:	4805      	ldr	r0, [pc, #20]	; (8009b1c <__i2b+0x28>)
 8009b06:	f240 1145 	movw	r1, #325	; 0x145
 8009b0a:	f001 fc51 	bl	800b3b0 <__assert_func>
 8009b0e:	2301      	movs	r3, #1
 8009b10:	6144      	str	r4, [r0, #20]
 8009b12:	6103      	str	r3, [r0, #16]
 8009b14:	bd10      	pop	{r4, pc}
 8009b16:	bf00      	nop
 8009b18:	0800ce51 	.word	0x0800ce51
 8009b1c:	0800ce62 	.word	0x0800ce62

08009b20 <__multiply>:
 8009b20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b24:	4691      	mov	r9, r2
 8009b26:	690a      	ldr	r2, [r1, #16]
 8009b28:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009b2c:	429a      	cmp	r2, r3
 8009b2e:	bfb8      	it	lt
 8009b30:	460b      	movlt	r3, r1
 8009b32:	460c      	mov	r4, r1
 8009b34:	bfbc      	itt	lt
 8009b36:	464c      	movlt	r4, r9
 8009b38:	4699      	movlt	r9, r3
 8009b3a:	6927      	ldr	r7, [r4, #16]
 8009b3c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009b40:	68a3      	ldr	r3, [r4, #8]
 8009b42:	6861      	ldr	r1, [r4, #4]
 8009b44:	eb07 060a 	add.w	r6, r7, sl
 8009b48:	42b3      	cmp	r3, r6
 8009b4a:	b085      	sub	sp, #20
 8009b4c:	bfb8      	it	lt
 8009b4e:	3101      	addlt	r1, #1
 8009b50:	f7ff fe90 	bl	8009874 <_Balloc>
 8009b54:	b930      	cbnz	r0, 8009b64 <__multiply+0x44>
 8009b56:	4602      	mov	r2, r0
 8009b58:	4b44      	ldr	r3, [pc, #272]	; (8009c6c <__multiply+0x14c>)
 8009b5a:	4845      	ldr	r0, [pc, #276]	; (8009c70 <__multiply+0x150>)
 8009b5c:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8009b60:	f001 fc26 	bl	800b3b0 <__assert_func>
 8009b64:	f100 0514 	add.w	r5, r0, #20
 8009b68:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009b6c:	462b      	mov	r3, r5
 8009b6e:	2200      	movs	r2, #0
 8009b70:	4543      	cmp	r3, r8
 8009b72:	d321      	bcc.n	8009bb8 <__multiply+0x98>
 8009b74:	f104 0314 	add.w	r3, r4, #20
 8009b78:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009b7c:	f109 0314 	add.w	r3, r9, #20
 8009b80:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009b84:	9202      	str	r2, [sp, #8]
 8009b86:	1b3a      	subs	r2, r7, r4
 8009b88:	3a15      	subs	r2, #21
 8009b8a:	f022 0203 	bic.w	r2, r2, #3
 8009b8e:	3204      	adds	r2, #4
 8009b90:	f104 0115 	add.w	r1, r4, #21
 8009b94:	428f      	cmp	r7, r1
 8009b96:	bf38      	it	cc
 8009b98:	2204      	movcc	r2, #4
 8009b9a:	9201      	str	r2, [sp, #4]
 8009b9c:	9a02      	ldr	r2, [sp, #8]
 8009b9e:	9303      	str	r3, [sp, #12]
 8009ba0:	429a      	cmp	r2, r3
 8009ba2:	d80c      	bhi.n	8009bbe <__multiply+0x9e>
 8009ba4:	2e00      	cmp	r6, #0
 8009ba6:	dd03      	ble.n	8009bb0 <__multiply+0x90>
 8009ba8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d05b      	beq.n	8009c68 <__multiply+0x148>
 8009bb0:	6106      	str	r6, [r0, #16]
 8009bb2:	b005      	add	sp, #20
 8009bb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bb8:	f843 2b04 	str.w	r2, [r3], #4
 8009bbc:	e7d8      	b.n	8009b70 <__multiply+0x50>
 8009bbe:	f8b3 a000 	ldrh.w	sl, [r3]
 8009bc2:	f1ba 0f00 	cmp.w	sl, #0
 8009bc6:	d024      	beq.n	8009c12 <__multiply+0xf2>
 8009bc8:	f104 0e14 	add.w	lr, r4, #20
 8009bcc:	46a9      	mov	r9, r5
 8009bce:	f04f 0c00 	mov.w	ip, #0
 8009bd2:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009bd6:	f8d9 1000 	ldr.w	r1, [r9]
 8009bda:	fa1f fb82 	uxth.w	fp, r2
 8009bde:	b289      	uxth	r1, r1
 8009be0:	fb0a 110b 	mla	r1, sl, fp, r1
 8009be4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009be8:	f8d9 2000 	ldr.w	r2, [r9]
 8009bec:	4461      	add	r1, ip
 8009bee:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009bf2:	fb0a c20b 	mla	r2, sl, fp, ip
 8009bf6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009bfa:	b289      	uxth	r1, r1
 8009bfc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009c00:	4577      	cmp	r7, lr
 8009c02:	f849 1b04 	str.w	r1, [r9], #4
 8009c06:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009c0a:	d8e2      	bhi.n	8009bd2 <__multiply+0xb2>
 8009c0c:	9a01      	ldr	r2, [sp, #4]
 8009c0e:	f845 c002 	str.w	ip, [r5, r2]
 8009c12:	9a03      	ldr	r2, [sp, #12]
 8009c14:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009c18:	3304      	adds	r3, #4
 8009c1a:	f1b9 0f00 	cmp.w	r9, #0
 8009c1e:	d021      	beq.n	8009c64 <__multiply+0x144>
 8009c20:	6829      	ldr	r1, [r5, #0]
 8009c22:	f104 0c14 	add.w	ip, r4, #20
 8009c26:	46ae      	mov	lr, r5
 8009c28:	f04f 0a00 	mov.w	sl, #0
 8009c2c:	f8bc b000 	ldrh.w	fp, [ip]
 8009c30:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009c34:	fb09 220b 	mla	r2, r9, fp, r2
 8009c38:	4452      	add	r2, sl
 8009c3a:	b289      	uxth	r1, r1
 8009c3c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009c40:	f84e 1b04 	str.w	r1, [lr], #4
 8009c44:	f85c 1b04 	ldr.w	r1, [ip], #4
 8009c48:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009c4c:	f8be 1000 	ldrh.w	r1, [lr]
 8009c50:	fb09 110a 	mla	r1, r9, sl, r1
 8009c54:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8009c58:	4567      	cmp	r7, ip
 8009c5a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009c5e:	d8e5      	bhi.n	8009c2c <__multiply+0x10c>
 8009c60:	9a01      	ldr	r2, [sp, #4]
 8009c62:	50a9      	str	r1, [r5, r2]
 8009c64:	3504      	adds	r5, #4
 8009c66:	e799      	b.n	8009b9c <__multiply+0x7c>
 8009c68:	3e01      	subs	r6, #1
 8009c6a:	e79b      	b.n	8009ba4 <__multiply+0x84>
 8009c6c:	0800ce51 	.word	0x0800ce51
 8009c70:	0800ce62 	.word	0x0800ce62

08009c74 <__pow5mult>:
 8009c74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009c78:	4615      	mov	r5, r2
 8009c7a:	f012 0203 	ands.w	r2, r2, #3
 8009c7e:	4606      	mov	r6, r0
 8009c80:	460f      	mov	r7, r1
 8009c82:	d007      	beq.n	8009c94 <__pow5mult+0x20>
 8009c84:	4c25      	ldr	r4, [pc, #148]	; (8009d1c <__pow5mult+0xa8>)
 8009c86:	3a01      	subs	r2, #1
 8009c88:	2300      	movs	r3, #0
 8009c8a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009c8e:	f7ff fe53 	bl	8009938 <__multadd>
 8009c92:	4607      	mov	r7, r0
 8009c94:	10ad      	asrs	r5, r5, #2
 8009c96:	d03d      	beq.n	8009d14 <__pow5mult+0xa0>
 8009c98:	69f4      	ldr	r4, [r6, #28]
 8009c9a:	b97c      	cbnz	r4, 8009cbc <__pow5mult+0x48>
 8009c9c:	2010      	movs	r0, #16
 8009c9e:	f7ff fd35 	bl	800970c <malloc>
 8009ca2:	4602      	mov	r2, r0
 8009ca4:	61f0      	str	r0, [r6, #28]
 8009ca6:	b928      	cbnz	r0, 8009cb4 <__pow5mult+0x40>
 8009ca8:	4b1d      	ldr	r3, [pc, #116]	; (8009d20 <__pow5mult+0xac>)
 8009caa:	481e      	ldr	r0, [pc, #120]	; (8009d24 <__pow5mult+0xb0>)
 8009cac:	f240 11b3 	movw	r1, #435	; 0x1b3
 8009cb0:	f001 fb7e 	bl	800b3b0 <__assert_func>
 8009cb4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009cb8:	6004      	str	r4, [r0, #0]
 8009cba:	60c4      	str	r4, [r0, #12]
 8009cbc:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8009cc0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009cc4:	b94c      	cbnz	r4, 8009cda <__pow5mult+0x66>
 8009cc6:	f240 2171 	movw	r1, #625	; 0x271
 8009cca:	4630      	mov	r0, r6
 8009ccc:	f7ff ff12 	bl	8009af4 <__i2b>
 8009cd0:	2300      	movs	r3, #0
 8009cd2:	f8c8 0008 	str.w	r0, [r8, #8]
 8009cd6:	4604      	mov	r4, r0
 8009cd8:	6003      	str	r3, [r0, #0]
 8009cda:	f04f 0900 	mov.w	r9, #0
 8009cde:	07eb      	lsls	r3, r5, #31
 8009ce0:	d50a      	bpl.n	8009cf8 <__pow5mult+0x84>
 8009ce2:	4639      	mov	r1, r7
 8009ce4:	4622      	mov	r2, r4
 8009ce6:	4630      	mov	r0, r6
 8009ce8:	f7ff ff1a 	bl	8009b20 <__multiply>
 8009cec:	4639      	mov	r1, r7
 8009cee:	4680      	mov	r8, r0
 8009cf0:	4630      	mov	r0, r6
 8009cf2:	f7ff fdff 	bl	80098f4 <_Bfree>
 8009cf6:	4647      	mov	r7, r8
 8009cf8:	106d      	asrs	r5, r5, #1
 8009cfa:	d00b      	beq.n	8009d14 <__pow5mult+0xa0>
 8009cfc:	6820      	ldr	r0, [r4, #0]
 8009cfe:	b938      	cbnz	r0, 8009d10 <__pow5mult+0x9c>
 8009d00:	4622      	mov	r2, r4
 8009d02:	4621      	mov	r1, r4
 8009d04:	4630      	mov	r0, r6
 8009d06:	f7ff ff0b 	bl	8009b20 <__multiply>
 8009d0a:	6020      	str	r0, [r4, #0]
 8009d0c:	f8c0 9000 	str.w	r9, [r0]
 8009d10:	4604      	mov	r4, r0
 8009d12:	e7e4      	b.n	8009cde <__pow5mult+0x6a>
 8009d14:	4638      	mov	r0, r7
 8009d16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009d1a:	bf00      	nop
 8009d1c:	0800cfb0 	.word	0x0800cfb0
 8009d20:	0800cde2 	.word	0x0800cde2
 8009d24:	0800ce62 	.word	0x0800ce62

08009d28 <__lshift>:
 8009d28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d2c:	460c      	mov	r4, r1
 8009d2e:	6849      	ldr	r1, [r1, #4]
 8009d30:	6923      	ldr	r3, [r4, #16]
 8009d32:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009d36:	68a3      	ldr	r3, [r4, #8]
 8009d38:	4607      	mov	r7, r0
 8009d3a:	4691      	mov	r9, r2
 8009d3c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009d40:	f108 0601 	add.w	r6, r8, #1
 8009d44:	42b3      	cmp	r3, r6
 8009d46:	db0b      	blt.n	8009d60 <__lshift+0x38>
 8009d48:	4638      	mov	r0, r7
 8009d4a:	f7ff fd93 	bl	8009874 <_Balloc>
 8009d4e:	4605      	mov	r5, r0
 8009d50:	b948      	cbnz	r0, 8009d66 <__lshift+0x3e>
 8009d52:	4602      	mov	r2, r0
 8009d54:	4b28      	ldr	r3, [pc, #160]	; (8009df8 <__lshift+0xd0>)
 8009d56:	4829      	ldr	r0, [pc, #164]	; (8009dfc <__lshift+0xd4>)
 8009d58:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8009d5c:	f001 fb28 	bl	800b3b0 <__assert_func>
 8009d60:	3101      	adds	r1, #1
 8009d62:	005b      	lsls	r3, r3, #1
 8009d64:	e7ee      	b.n	8009d44 <__lshift+0x1c>
 8009d66:	2300      	movs	r3, #0
 8009d68:	f100 0114 	add.w	r1, r0, #20
 8009d6c:	f100 0210 	add.w	r2, r0, #16
 8009d70:	4618      	mov	r0, r3
 8009d72:	4553      	cmp	r3, sl
 8009d74:	db33      	blt.n	8009dde <__lshift+0xb6>
 8009d76:	6920      	ldr	r0, [r4, #16]
 8009d78:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009d7c:	f104 0314 	add.w	r3, r4, #20
 8009d80:	f019 091f 	ands.w	r9, r9, #31
 8009d84:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009d88:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009d8c:	d02b      	beq.n	8009de6 <__lshift+0xbe>
 8009d8e:	f1c9 0e20 	rsb	lr, r9, #32
 8009d92:	468a      	mov	sl, r1
 8009d94:	2200      	movs	r2, #0
 8009d96:	6818      	ldr	r0, [r3, #0]
 8009d98:	fa00 f009 	lsl.w	r0, r0, r9
 8009d9c:	4310      	orrs	r0, r2
 8009d9e:	f84a 0b04 	str.w	r0, [sl], #4
 8009da2:	f853 2b04 	ldr.w	r2, [r3], #4
 8009da6:	459c      	cmp	ip, r3
 8009da8:	fa22 f20e 	lsr.w	r2, r2, lr
 8009dac:	d8f3      	bhi.n	8009d96 <__lshift+0x6e>
 8009dae:	ebac 0304 	sub.w	r3, ip, r4
 8009db2:	3b15      	subs	r3, #21
 8009db4:	f023 0303 	bic.w	r3, r3, #3
 8009db8:	3304      	adds	r3, #4
 8009dba:	f104 0015 	add.w	r0, r4, #21
 8009dbe:	4584      	cmp	ip, r0
 8009dc0:	bf38      	it	cc
 8009dc2:	2304      	movcc	r3, #4
 8009dc4:	50ca      	str	r2, [r1, r3]
 8009dc6:	b10a      	cbz	r2, 8009dcc <__lshift+0xa4>
 8009dc8:	f108 0602 	add.w	r6, r8, #2
 8009dcc:	3e01      	subs	r6, #1
 8009dce:	4638      	mov	r0, r7
 8009dd0:	612e      	str	r6, [r5, #16]
 8009dd2:	4621      	mov	r1, r4
 8009dd4:	f7ff fd8e 	bl	80098f4 <_Bfree>
 8009dd8:	4628      	mov	r0, r5
 8009dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009dde:	f842 0f04 	str.w	r0, [r2, #4]!
 8009de2:	3301      	adds	r3, #1
 8009de4:	e7c5      	b.n	8009d72 <__lshift+0x4a>
 8009de6:	3904      	subs	r1, #4
 8009de8:	f853 2b04 	ldr.w	r2, [r3], #4
 8009dec:	f841 2f04 	str.w	r2, [r1, #4]!
 8009df0:	459c      	cmp	ip, r3
 8009df2:	d8f9      	bhi.n	8009de8 <__lshift+0xc0>
 8009df4:	e7ea      	b.n	8009dcc <__lshift+0xa4>
 8009df6:	bf00      	nop
 8009df8:	0800ce51 	.word	0x0800ce51
 8009dfc:	0800ce62 	.word	0x0800ce62

08009e00 <__mcmp>:
 8009e00:	b530      	push	{r4, r5, lr}
 8009e02:	6902      	ldr	r2, [r0, #16]
 8009e04:	690c      	ldr	r4, [r1, #16]
 8009e06:	1b12      	subs	r2, r2, r4
 8009e08:	d10e      	bne.n	8009e28 <__mcmp+0x28>
 8009e0a:	f100 0314 	add.w	r3, r0, #20
 8009e0e:	3114      	adds	r1, #20
 8009e10:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009e14:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009e18:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009e1c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009e20:	42a5      	cmp	r5, r4
 8009e22:	d003      	beq.n	8009e2c <__mcmp+0x2c>
 8009e24:	d305      	bcc.n	8009e32 <__mcmp+0x32>
 8009e26:	2201      	movs	r2, #1
 8009e28:	4610      	mov	r0, r2
 8009e2a:	bd30      	pop	{r4, r5, pc}
 8009e2c:	4283      	cmp	r3, r0
 8009e2e:	d3f3      	bcc.n	8009e18 <__mcmp+0x18>
 8009e30:	e7fa      	b.n	8009e28 <__mcmp+0x28>
 8009e32:	f04f 32ff 	mov.w	r2, #4294967295
 8009e36:	e7f7      	b.n	8009e28 <__mcmp+0x28>

08009e38 <__mdiff>:
 8009e38:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e3c:	460c      	mov	r4, r1
 8009e3e:	4606      	mov	r6, r0
 8009e40:	4611      	mov	r1, r2
 8009e42:	4620      	mov	r0, r4
 8009e44:	4690      	mov	r8, r2
 8009e46:	f7ff ffdb 	bl	8009e00 <__mcmp>
 8009e4a:	1e05      	subs	r5, r0, #0
 8009e4c:	d110      	bne.n	8009e70 <__mdiff+0x38>
 8009e4e:	4629      	mov	r1, r5
 8009e50:	4630      	mov	r0, r6
 8009e52:	f7ff fd0f 	bl	8009874 <_Balloc>
 8009e56:	b930      	cbnz	r0, 8009e66 <__mdiff+0x2e>
 8009e58:	4b3a      	ldr	r3, [pc, #232]	; (8009f44 <__mdiff+0x10c>)
 8009e5a:	4602      	mov	r2, r0
 8009e5c:	f240 2137 	movw	r1, #567	; 0x237
 8009e60:	4839      	ldr	r0, [pc, #228]	; (8009f48 <__mdiff+0x110>)
 8009e62:	f001 faa5 	bl	800b3b0 <__assert_func>
 8009e66:	2301      	movs	r3, #1
 8009e68:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009e6c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e70:	bfa4      	itt	ge
 8009e72:	4643      	movge	r3, r8
 8009e74:	46a0      	movge	r8, r4
 8009e76:	4630      	mov	r0, r6
 8009e78:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009e7c:	bfa6      	itte	ge
 8009e7e:	461c      	movge	r4, r3
 8009e80:	2500      	movge	r5, #0
 8009e82:	2501      	movlt	r5, #1
 8009e84:	f7ff fcf6 	bl	8009874 <_Balloc>
 8009e88:	b920      	cbnz	r0, 8009e94 <__mdiff+0x5c>
 8009e8a:	4b2e      	ldr	r3, [pc, #184]	; (8009f44 <__mdiff+0x10c>)
 8009e8c:	4602      	mov	r2, r0
 8009e8e:	f240 2145 	movw	r1, #581	; 0x245
 8009e92:	e7e5      	b.n	8009e60 <__mdiff+0x28>
 8009e94:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009e98:	6926      	ldr	r6, [r4, #16]
 8009e9a:	60c5      	str	r5, [r0, #12]
 8009e9c:	f104 0914 	add.w	r9, r4, #20
 8009ea0:	f108 0514 	add.w	r5, r8, #20
 8009ea4:	f100 0e14 	add.w	lr, r0, #20
 8009ea8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009eac:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009eb0:	f108 0210 	add.w	r2, r8, #16
 8009eb4:	46f2      	mov	sl, lr
 8009eb6:	2100      	movs	r1, #0
 8009eb8:	f859 3b04 	ldr.w	r3, [r9], #4
 8009ebc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009ec0:	fa11 f88b 	uxtah	r8, r1, fp
 8009ec4:	b299      	uxth	r1, r3
 8009ec6:	0c1b      	lsrs	r3, r3, #16
 8009ec8:	eba8 0801 	sub.w	r8, r8, r1
 8009ecc:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009ed0:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009ed4:	fa1f f888 	uxth.w	r8, r8
 8009ed8:	1419      	asrs	r1, r3, #16
 8009eda:	454e      	cmp	r6, r9
 8009edc:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009ee0:	f84a 3b04 	str.w	r3, [sl], #4
 8009ee4:	d8e8      	bhi.n	8009eb8 <__mdiff+0x80>
 8009ee6:	1b33      	subs	r3, r6, r4
 8009ee8:	3b15      	subs	r3, #21
 8009eea:	f023 0303 	bic.w	r3, r3, #3
 8009eee:	3304      	adds	r3, #4
 8009ef0:	3415      	adds	r4, #21
 8009ef2:	42a6      	cmp	r6, r4
 8009ef4:	bf38      	it	cc
 8009ef6:	2304      	movcc	r3, #4
 8009ef8:	441d      	add	r5, r3
 8009efa:	4473      	add	r3, lr
 8009efc:	469e      	mov	lr, r3
 8009efe:	462e      	mov	r6, r5
 8009f00:	4566      	cmp	r6, ip
 8009f02:	d30e      	bcc.n	8009f22 <__mdiff+0xea>
 8009f04:	f10c 0203 	add.w	r2, ip, #3
 8009f08:	1b52      	subs	r2, r2, r5
 8009f0a:	f022 0203 	bic.w	r2, r2, #3
 8009f0e:	3d03      	subs	r5, #3
 8009f10:	45ac      	cmp	ip, r5
 8009f12:	bf38      	it	cc
 8009f14:	2200      	movcc	r2, #0
 8009f16:	4413      	add	r3, r2
 8009f18:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8009f1c:	b17a      	cbz	r2, 8009f3e <__mdiff+0x106>
 8009f1e:	6107      	str	r7, [r0, #16]
 8009f20:	e7a4      	b.n	8009e6c <__mdiff+0x34>
 8009f22:	f856 8b04 	ldr.w	r8, [r6], #4
 8009f26:	fa11 f288 	uxtah	r2, r1, r8
 8009f2a:	1414      	asrs	r4, r2, #16
 8009f2c:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009f30:	b292      	uxth	r2, r2
 8009f32:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009f36:	f84e 2b04 	str.w	r2, [lr], #4
 8009f3a:	1421      	asrs	r1, r4, #16
 8009f3c:	e7e0      	b.n	8009f00 <__mdiff+0xc8>
 8009f3e:	3f01      	subs	r7, #1
 8009f40:	e7ea      	b.n	8009f18 <__mdiff+0xe0>
 8009f42:	bf00      	nop
 8009f44:	0800ce51 	.word	0x0800ce51
 8009f48:	0800ce62 	.word	0x0800ce62

08009f4c <__ulp>:
 8009f4c:	b082      	sub	sp, #8
 8009f4e:	ed8d 0b00 	vstr	d0, [sp]
 8009f52:	9a01      	ldr	r2, [sp, #4]
 8009f54:	4b0f      	ldr	r3, [pc, #60]	; (8009f94 <__ulp+0x48>)
 8009f56:	4013      	ands	r3, r2
 8009f58:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	dc08      	bgt.n	8009f72 <__ulp+0x26>
 8009f60:	425b      	negs	r3, r3
 8009f62:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8009f66:	ea4f 5223 	mov.w	r2, r3, asr #20
 8009f6a:	da04      	bge.n	8009f76 <__ulp+0x2a>
 8009f6c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009f70:	4113      	asrs	r3, r2
 8009f72:	2200      	movs	r2, #0
 8009f74:	e008      	b.n	8009f88 <__ulp+0x3c>
 8009f76:	f1a2 0314 	sub.w	r3, r2, #20
 8009f7a:	2b1e      	cmp	r3, #30
 8009f7c:	bfda      	itte	le
 8009f7e:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8009f82:	40da      	lsrle	r2, r3
 8009f84:	2201      	movgt	r2, #1
 8009f86:	2300      	movs	r3, #0
 8009f88:	4619      	mov	r1, r3
 8009f8a:	4610      	mov	r0, r2
 8009f8c:	ec41 0b10 	vmov	d0, r0, r1
 8009f90:	b002      	add	sp, #8
 8009f92:	4770      	bx	lr
 8009f94:	7ff00000 	.word	0x7ff00000

08009f98 <__b2d>:
 8009f98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f9c:	6906      	ldr	r6, [r0, #16]
 8009f9e:	f100 0814 	add.w	r8, r0, #20
 8009fa2:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8009fa6:	1f37      	subs	r7, r6, #4
 8009fa8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009fac:	4610      	mov	r0, r2
 8009fae:	f7ff fd53 	bl	8009a58 <__hi0bits>
 8009fb2:	f1c0 0320 	rsb	r3, r0, #32
 8009fb6:	280a      	cmp	r0, #10
 8009fb8:	600b      	str	r3, [r1, #0]
 8009fba:	491b      	ldr	r1, [pc, #108]	; (800a028 <__b2d+0x90>)
 8009fbc:	dc15      	bgt.n	8009fea <__b2d+0x52>
 8009fbe:	f1c0 0c0b 	rsb	ip, r0, #11
 8009fc2:	fa22 f30c 	lsr.w	r3, r2, ip
 8009fc6:	45b8      	cmp	r8, r7
 8009fc8:	ea43 0501 	orr.w	r5, r3, r1
 8009fcc:	bf34      	ite	cc
 8009fce:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8009fd2:	2300      	movcs	r3, #0
 8009fd4:	3015      	adds	r0, #21
 8009fd6:	fa02 f000 	lsl.w	r0, r2, r0
 8009fda:	fa23 f30c 	lsr.w	r3, r3, ip
 8009fde:	4303      	orrs	r3, r0
 8009fe0:	461c      	mov	r4, r3
 8009fe2:	ec45 4b10 	vmov	d0, r4, r5
 8009fe6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009fea:	45b8      	cmp	r8, r7
 8009fec:	bf3a      	itte	cc
 8009fee:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8009ff2:	f1a6 0708 	subcc.w	r7, r6, #8
 8009ff6:	2300      	movcs	r3, #0
 8009ff8:	380b      	subs	r0, #11
 8009ffa:	d012      	beq.n	800a022 <__b2d+0x8a>
 8009ffc:	f1c0 0120 	rsb	r1, r0, #32
 800a000:	fa23 f401 	lsr.w	r4, r3, r1
 800a004:	4082      	lsls	r2, r0
 800a006:	4322      	orrs	r2, r4
 800a008:	4547      	cmp	r7, r8
 800a00a:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800a00e:	bf8c      	ite	hi
 800a010:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800a014:	2200      	movls	r2, #0
 800a016:	4083      	lsls	r3, r0
 800a018:	40ca      	lsrs	r2, r1
 800a01a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800a01e:	4313      	orrs	r3, r2
 800a020:	e7de      	b.n	8009fe0 <__b2d+0x48>
 800a022:	ea42 0501 	orr.w	r5, r2, r1
 800a026:	e7db      	b.n	8009fe0 <__b2d+0x48>
 800a028:	3ff00000 	.word	0x3ff00000

0800a02c <__d2b>:
 800a02c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a030:	460f      	mov	r7, r1
 800a032:	2101      	movs	r1, #1
 800a034:	ec59 8b10 	vmov	r8, r9, d0
 800a038:	4616      	mov	r6, r2
 800a03a:	f7ff fc1b 	bl	8009874 <_Balloc>
 800a03e:	4604      	mov	r4, r0
 800a040:	b930      	cbnz	r0, 800a050 <__d2b+0x24>
 800a042:	4602      	mov	r2, r0
 800a044:	4b24      	ldr	r3, [pc, #144]	; (800a0d8 <__d2b+0xac>)
 800a046:	4825      	ldr	r0, [pc, #148]	; (800a0dc <__d2b+0xb0>)
 800a048:	f240 310f 	movw	r1, #783	; 0x30f
 800a04c:	f001 f9b0 	bl	800b3b0 <__assert_func>
 800a050:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a054:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a058:	bb2d      	cbnz	r5, 800a0a6 <__d2b+0x7a>
 800a05a:	9301      	str	r3, [sp, #4]
 800a05c:	f1b8 0300 	subs.w	r3, r8, #0
 800a060:	d026      	beq.n	800a0b0 <__d2b+0x84>
 800a062:	4668      	mov	r0, sp
 800a064:	9300      	str	r3, [sp, #0]
 800a066:	f7ff fd17 	bl	8009a98 <__lo0bits>
 800a06a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a06e:	b1e8      	cbz	r0, 800a0ac <__d2b+0x80>
 800a070:	f1c0 0320 	rsb	r3, r0, #32
 800a074:	fa02 f303 	lsl.w	r3, r2, r3
 800a078:	430b      	orrs	r3, r1
 800a07a:	40c2      	lsrs	r2, r0
 800a07c:	6163      	str	r3, [r4, #20]
 800a07e:	9201      	str	r2, [sp, #4]
 800a080:	9b01      	ldr	r3, [sp, #4]
 800a082:	61a3      	str	r3, [r4, #24]
 800a084:	2b00      	cmp	r3, #0
 800a086:	bf14      	ite	ne
 800a088:	2202      	movne	r2, #2
 800a08a:	2201      	moveq	r2, #1
 800a08c:	6122      	str	r2, [r4, #16]
 800a08e:	b1bd      	cbz	r5, 800a0c0 <__d2b+0x94>
 800a090:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a094:	4405      	add	r5, r0
 800a096:	603d      	str	r5, [r7, #0]
 800a098:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a09c:	6030      	str	r0, [r6, #0]
 800a09e:	4620      	mov	r0, r4
 800a0a0:	b003      	add	sp, #12
 800a0a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a0a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a0aa:	e7d6      	b.n	800a05a <__d2b+0x2e>
 800a0ac:	6161      	str	r1, [r4, #20]
 800a0ae:	e7e7      	b.n	800a080 <__d2b+0x54>
 800a0b0:	a801      	add	r0, sp, #4
 800a0b2:	f7ff fcf1 	bl	8009a98 <__lo0bits>
 800a0b6:	9b01      	ldr	r3, [sp, #4]
 800a0b8:	6163      	str	r3, [r4, #20]
 800a0ba:	3020      	adds	r0, #32
 800a0bc:	2201      	movs	r2, #1
 800a0be:	e7e5      	b.n	800a08c <__d2b+0x60>
 800a0c0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a0c4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a0c8:	6038      	str	r0, [r7, #0]
 800a0ca:	6918      	ldr	r0, [r3, #16]
 800a0cc:	f7ff fcc4 	bl	8009a58 <__hi0bits>
 800a0d0:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a0d4:	e7e2      	b.n	800a09c <__d2b+0x70>
 800a0d6:	bf00      	nop
 800a0d8:	0800ce51 	.word	0x0800ce51
 800a0dc:	0800ce62 	.word	0x0800ce62

0800a0e0 <__ratio>:
 800a0e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0e4:	4688      	mov	r8, r1
 800a0e6:	4669      	mov	r1, sp
 800a0e8:	4681      	mov	r9, r0
 800a0ea:	f7ff ff55 	bl	8009f98 <__b2d>
 800a0ee:	a901      	add	r1, sp, #4
 800a0f0:	4640      	mov	r0, r8
 800a0f2:	ec55 4b10 	vmov	r4, r5, d0
 800a0f6:	f7ff ff4f 	bl	8009f98 <__b2d>
 800a0fa:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a0fe:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800a102:	eba3 0c02 	sub.w	ip, r3, r2
 800a106:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a10a:	1a9b      	subs	r3, r3, r2
 800a10c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800a110:	ec51 0b10 	vmov	r0, r1, d0
 800a114:	2b00      	cmp	r3, #0
 800a116:	bfd6      	itet	le
 800a118:	460a      	movle	r2, r1
 800a11a:	462a      	movgt	r2, r5
 800a11c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a120:	468b      	mov	fp, r1
 800a122:	462f      	mov	r7, r5
 800a124:	bfd4      	ite	le
 800a126:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800a12a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800a12e:	4620      	mov	r0, r4
 800a130:	ee10 2a10 	vmov	r2, s0
 800a134:	465b      	mov	r3, fp
 800a136:	4639      	mov	r1, r7
 800a138:	f7f6 fb88 	bl	800084c <__aeabi_ddiv>
 800a13c:	ec41 0b10 	vmov	d0, r0, r1
 800a140:	b003      	add	sp, #12
 800a142:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a146 <__copybits>:
 800a146:	3901      	subs	r1, #1
 800a148:	b570      	push	{r4, r5, r6, lr}
 800a14a:	1149      	asrs	r1, r1, #5
 800a14c:	6914      	ldr	r4, [r2, #16]
 800a14e:	3101      	adds	r1, #1
 800a150:	f102 0314 	add.w	r3, r2, #20
 800a154:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a158:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a15c:	1f05      	subs	r5, r0, #4
 800a15e:	42a3      	cmp	r3, r4
 800a160:	d30c      	bcc.n	800a17c <__copybits+0x36>
 800a162:	1aa3      	subs	r3, r4, r2
 800a164:	3b11      	subs	r3, #17
 800a166:	f023 0303 	bic.w	r3, r3, #3
 800a16a:	3211      	adds	r2, #17
 800a16c:	42a2      	cmp	r2, r4
 800a16e:	bf88      	it	hi
 800a170:	2300      	movhi	r3, #0
 800a172:	4418      	add	r0, r3
 800a174:	2300      	movs	r3, #0
 800a176:	4288      	cmp	r0, r1
 800a178:	d305      	bcc.n	800a186 <__copybits+0x40>
 800a17a:	bd70      	pop	{r4, r5, r6, pc}
 800a17c:	f853 6b04 	ldr.w	r6, [r3], #4
 800a180:	f845 6f04 	str.w	r6, [r5, #4]!
 800a184:	e7eb      	b.n	800a15e <__copybits+0x18>
 800a186:	f840 3b04 	str.w	r3, [r0], #4
 800a18a:	e7f4      	b.n	800a176 <__copybits+0x30>

0800a18c <__any_on>:
 800a18c:	f100 0214 	add.w	r2, r0, #20
 800a190:	6900      	ldr	r0, [r0, #16]
 800a192:	114b      	asrs	r3, r1, #5
 800a194:	4298      	cmp	r0, r3
 800a196:	b510      	push	{r4, lr}
 800a198:	db11      	blt.n	800a1be <__any_on+0x32>
 800a19a:	dd0a      	ble.n	800a1b2 <__any_on+0x26>
 800a19c:	f011 011f 	ands.w	r1, r1, #31
 800a1a0:	d007      	beq.n	800a1b2 <__any_on+0x26>
 800a1a2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a1a6:	fa24 f001 	lsr.w	r0, r4, r1
 800a1aa:	fa00 f101 	lsl.w	r1, r0, r1
 800a1ae:	428c      	cmp	r4, r1
 800a1b0:	d10b      	bne.n	800a1ca <__any_on+0x3e>
 800a1b2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a1b6:	4293      	cmp	r3, r2
 800a1b8:	d803      	bhi.n	800a1c2 <__any_on+0x36>
 800a1ba:	2000      	movs	r0, #0
 800a1bc:	bd10      	pop	{r4, pc}
 800a1be:	4603      	mov	r3, r0
 800a1c0:	e7f7      	b.n	800a1b2 <__any_on+0x26>
 800a1c2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a1c6:	2900      	cmp	r1, #0
 800a1c8:	d0f5      	beq.n	800a1b6 <__any_on+0x2a>
 800a1ca:	2001      	movs	r0, #1
 800a1cc:	e7f6      	b.n	800a1bc <__any_on+0x30>

0800a1ce <sulp>:
 800a1ce:	b570      	push	{r4, r5, r6, lr}
 800a1d0:	4604      	mov	r4, r0
 800a1d2:	460d      	mov	r5, r1
 800a1d4:	ec45 4b10 	vmov	d0, r4, r5
 800a1d8:	4616      	mov	r6, r2
 800a1da:	f7ff feb7 	bl	8009f4c <__ulp>
 800a1de:	ec51 0b10 	vmov	r0, r1, d0
 800a1e2:	b17e      	cbz	r6, 800a204 <sulp+0x36>
 800a1e4:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800a1e8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	dd09      	ble.n	800a204 <sulp+0x36>
 800a1f0:	051b      	lsls	r3, r3, #20
 800a1f2:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800a1f6:	2400      	movs	r4, #0
 800a1f8:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800a1fc:	4622      	mov	r2, r4
 800a1fe:	462b      	mov	r3, r5
 800a200:	f7f6 f9fa 	bl	80005f8 <__aeabi_dmul>
 800a204:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a208 <_strtod_l>:
 800a208:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a20c:	ed2d 8b02 	vpush	{d8}
 800a210:	b09b      	sub	sp, #108	; 0x6c
 800a212:	4604      	mov	r4, r0
 800a214:	9213      	str	r2, [sp, #76]	; 0x4c
 800a216:	2200      	movs	r2, #0
 800a218:	9216      	str	r2, [sp, #88]	; 0x58
 800a21a:	460d      	mov	r5, r1
 800a21c:	f04f 0800 	mov.w	r8, #0
 800a220:	f04f 0900 	mov.w	r9, #0
 800a224:	460a      	mov	r2, r1
 800a226:	9215      	str	r2, [sp, #84]	; 0x54
 800a228:	7811      	ldrb	r1, [r2, #0]
 800a22a:	292b      	cmp	r1, #43	; 0x2b
 800a22c:	d04c      	beq.n	800a2c8 <_strtod_l+0xc0>
 800a22e:	d83a      	bhi.n	800a2a6 <_strtod_l+0x9e>
 800a230:	290d      	cmp	r1, #13
 800a232:	d834      	bhi.n	800a29e <_strtod_l+0x96>
 800a234:	2908      	cmp	r1, #8
 800a236:	d834      	bhi.n	800a2a2 <_strtod_l+0x9a>
 800a238:	2900      	cmp	r1, #0
 800a23a:	d03d      	beq.n	800a2b8 <_strtod_l+0xb0>
 800a23c:	2200      	movs	r2, #0
 800a23e:	920a      	str	r2, [sp, #40]	; 0x28
 800a240:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800a242:	7832      	ldrb	r2, [r6, #0]
 800a244:	2a30      	cmp	r2, #48	; 0x30
 800a246:	f040 80b4 	bne.w	800a3b2 <_strtod_l+0x1aa>
 800a24a:	7872      	ldrb	r2, [r6, #1]
 800a24c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800a250:	2a58      	cmp	r2, #88	; 0x58
 800a252:	d170      	bne.n	800a336 <_strtod_l+0x12e>
 800a254:	9302      	str	r3, [sp, #8]
 800a256:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a258:	9301      	str	r3, [sp, #4]
 800a25a:	ab16      	add	r3, sp, #88	; 0x58
 800a25c:	9300      	str	r3, [sp, #0]
 800a25e:	4a8e      	ldr	r2, [pc, #568]	; (800a498 <_strtod_l+0x290>)
 800a260:	ab17      	add	r3, sp, #92	; 0x5c
 800a262:	a915      	add	r1, sp, #84	; 0x54
 800a264:	4620      	mov	r0, r4
 800a266:	f001 f93f 	bl	800b4e8 <__gethex>
 800a26a:	f010 070f 	ands.w	r7, r0, #15
 800a26e:	4605      	mov	r5, r0
 800a270:	d005      	beq.n	800a27e <_strtod_l+0x76>
 800a272:	2f06      	cmp	r7, #6
 800a274:	d12a      	bne.n	800a2cc <_strtod_l+0xc4>
 800a276:	3601      	adds	r6, #1
 800a278:	2300      	movs	r3, #0
 800a27a:	9615      	str	r6, [sp, #84]	; 0x54
 800a27c:	930a      	str	r3, [sp, #40]	; 0x28
 800a27e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a280:	2b00      	cmp	r3, #0
 800a282:	f040 857f 	bne.w	800ad84 <_strtod_l+0xb7c>
 800a286:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a288:	b1db      	cbz	r3, 800a2c2 <_strtod_l+0xba>
 800a28a:	4642      	mov	r2, r8
 800a28c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800a290:	ec43 2b10 	vmov	d0, r2, r3
 800a294:	b01b      	add	sp, #108	; 0x6c
 800a296:	ecbd 8b02 	vpop	{d8}
 800a29a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a29e:	2920      	cmp	r1, #32
 800a2a0:	d1cc      	bne.n	800a23c <_strtod_l+0x34>
 800a2a2:	3201      	adds	r2, #1
 800a2a4:	e7bf      	b.n	800a226 <_strtod_l+0x1e>
 800a2a6:	292d      	cmp	r1, #45	; 0x2d
 800a2a8:	d1c8      	bne.n	800a23c <_strtod_l+0x34>
 800a2aa:	2101      	movs	r1, #1
 800a2ac:	910a      	str	r1, [sp, #40]	; 0x28
 800a2ae:	1c51      	adds	r1, r2, #1
 800a2b0:	9115      	str	r1, [sp, #84]	; 0x54
 800a2b2:	7852      	ldrb	r2, [r2, #1]
 800a2b4:	2a00      	cmp	r2, #0
 800a2b6:	d1c3      	bne.n	800a240 <_strtod_l+0x38>
 800a2b8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a2ba:	9515      	str	r5, [sp, #84]	; 0x54
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	f040 855f 	bne.w	800ad80 <_strtod_l+0xb78>
 800a2c2:	4642      	mov	r2, r8
 800a2c4:	464b      	mov	r3, r9
 800a2c6:	e7e3      	b.n	800a290 <_strtod_l+0x88>
 800a2c8:	2100      	movs	r1, #0
 800a2ca:	e7ef      	b.n	800a2ac <_strtod_l+0xa4>
 800a2cc:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800a2ce:	b13a      	cbz	r2, 800a2e0 <_strtod_l+0xd8>
 800a2d0:	2135      	movs	r1, #53	; 0x35
 800a2d2:	a818      	add	r0, sp, #96	; 0x60
 800a2d4:	f7ff ff37 	bl	800a146 <__copybits>
 800a2d8:	9916      	ldr	r1, [sp, #88]	; 0x58
 800a2da:	4620      	mov	r0, r4
 800a2dc:	f7ff fb0a 	bl	80098f4 <_Bfree>
 800a2e0:	3f01      	subs	r7, #1
 800a2e2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a2e4:	2f04      	cmp	r7, #4
 800a2e6:	d806      	bhi.n	800a2f6 <_strtod_l+0xee>
 800a2e8:	e8df f007 	tbb	[pc, r7]
 800a2ec:	201d0314 	.word	0x201d0314
 800a2f0:	14          	.byte	0x14
 800a2f1:	00          	.byte	0x00
 800a2f2:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 800a2f6:	05e9      	lsls	r1, r5, #23
 800a2f8:	bf48      	it	mi
 800a2fa:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800a2fe:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a302:	0d1b      	lsrs	r3, r3, #20
 800a304:	051b      	lsls	r3, r3, #20
 800a306:	2b00      	cmp	r3, #0
 800a308:	d1b9      	bne.n	800a27e <_strtod_l+0x76>
 800a30a:	f7fe fb07 	bl	800891c <__errno>
 800a30e:	2322      	movs	r3, #34	; 0x22
 800a310:	6003      	str	r3, [r0, #0]
 800a312:	e7b4      	b.n	800a27e <_strtod_l+0x76>
 800a314:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 800a318:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800a31c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800a320:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800a324:	e7e7      	b.n	800a2f6 <_strtod_l+0xee>
 800a326:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800a4a0 <_strtod_l+0x298>
 800a32a:	e7e4      	b.n	800a2f6 <_strtod_l+0xee>
 800a32c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800a330:	f04f 38ff 	mov.w	r8, #4294967295
 800a334:	e7df      	b.n	800a2f6 <_strtod_l+0xee>
 800a336:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a338:	1c5a      	adds	r2, r3, #1
 800a33a:	9215      	str	r2, [sp, #84]	; 0x54
 800a33c:	785b      	ldrb	r3, [r3, #1]
 800a33e:	2b30      	cmp	r3, #48	; 0x30
 800a340:	d0f9      	beq.n	800a336 <_strtod_l+0x12e>
 800a342:	2b00      	cmp	r3, #0
 800a344:	d09b      	beq.n	800a27e <_strtod_l+0x76>
 800a346:	2301      	movs	r3, #1
 800a348:	f04f 0a00 	mov.w	sl, #0
 800a34c:	9304      	str	r3, [sp, #16]
 800a34e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a350:	930b      	str	r3, [sp, #44]	; 0x2c
 800a352:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800a356:	46d3      	mov	fp, sl
 800a358:	220a      	movs	r2, #10
 800a35a:	9815      	ldr	r0, [sp, #84]	; 0x54
 800a35c:	7806      	ldrb	r6, [r0, #0]
 800a35e:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800a362:	b2d9      	uxtb	r1, r3
 800a364:	2909      	cmp	r1, #9
 800a366:	d926      	bls.n	800a3b6 <_strtod_l+0x1ae>
 800a368:	494c      	ldr	r1, [pc, #304]	; (800a49c <_strtod_l+0x294>)
 800a36a:	2201      	movs	r2, #1
 800a36c:	f000 ffe6 	bl	800b33c <strncmp>
 800a370:	2800      	cmp	r0, #0
 800a372:	d030      	beq.n	800a3d6 <_strtod_l+0x1ce>
 800a374:	2000      	movs	r0, #0
 800a376:	4632      	mov	r2, r6
 800a378:	9005      	str	r0, [sp, #20]
 800a37a:	465e      	mov	r6, fp
 800a37c:	4603      	mov	r3, r0
 800a37e:	2a65      	cmp	r2, #101	; 0x65
 800a380:	d001      	beq.n	800a386 <_strtod_l+0x17e>
 800a382:	2a45      	cmp	r2, #69	; 0x45
 800a384:	d113      	bne.n	800a3ae <_strtod_l+0x1a6>
 800a386:	b91e      	cbnz	r6, 800a390 <_strtod_l+0x188>
 800a388:	9a04      	ldr	r2, [sp, #16]
 800a38a:	4302      	orrs	r2, r0
 800a38c:	d094      	beq.n	800a2b8 <_strtod_l+0xb0>
 800a38e:	2600      	movs	r6, #0
 800a390:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800a392:	1c6a      	adds	r2, r5, #1
 800a394:	9215      	str	r2, [sp, #84]	; 0x54
 800a396:	786a      	ldrb	r2, [r5, #1]
 800a398:	2a2b      	cmp	r2, #43	; 0x2b
 800a39a:	d074      	beq.n	800a486 <_strtod_l+0x27e>
 800a39c:	2a2d      	cmp	r2, #45	; 0x2d
 800a39e:	d078      	beq.n	800a492 <_strtod_l+0x28a>
 800a3a0:	f04f 0c00 	mov.w	ip, #0
 800a3a4:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800a3a8:	2909      	cmp	r1, #9
 800a3aa:	d97f      	bls.n	800a4ac <_strtod_l+0x2a4>
 800a3ac:	9515      	str	r5, [sp, #84]	; 0x54
 800a3ae:	2700      	movs	r7, #0
 800a3b0:	e09e      	b.n	800a4f0 <_strtod_l+0x2e8>
 800a3b2:	2300      	movs	r3, #0
 800a3b4:	e7c8      	b.n	800a348 <_strtod_l+0x140>
 800a3b6:	f1bb 0f08 	cmp.w	fp, #8
 800a3ba:	bfd8      	it	le
 800a3bc:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800a3be:	f100 0001 	add.w	r0, r0, #1
 800a3c2:	bfda      	itte	le
 800a3c4:	fb02 3301 	mlale	r3, r2, r1, r3
 800a3c8:	9309      	strle	r3, [sp, #36]	; 0x24
 800a3ca:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800a3ce:	f10b 0b01 	add.w	fp, fp, #1
 800a3d2:	9015      	str	r0, [sp, #84]	; 0x54
 800a3d4:	e7c1      	b.n	800a35a <_strtod_l+0x152>
 800a3d6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a3d8:	1c5a      	adds	r2, r3, #1
 800a3da:	9215      	str	r2, [sp, #84]	; 0x54
 800a3dc:	785a      	ldrb	r2, [r3, #1]
 800a3de:	f1bb 0f00 	cmp.w	fp, #0
 800a3e2:	d037      	beq.n	800a454 <_strtod_l+0x24c>
 800a3e4:	9005      	str	r0, [sp, #20]
 800a3e6:	465e      	mov	r6, fp
 800a3e8:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800a3ec:	2b09      	cmp	r3, #9
 800a3ee:	d912      	bls.n	800a416 <_strtod_l+0x20e>
 800a3f0:	2301      	movs	r3, #1
 800a3f2:	e7c4      	b.n	800a37e <_strtod_l+0x176>
 800a3f4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a3f6:	1c5a      	adds	r2, r3, #1
 800a3f8:	9215      	str	r2, [sp, #84]	; 0x54
 800a3fa:	785a      	ldrb	r2, [r3, #1]
 800a3fc:	3001      	adds	r0, #1
 800a3fe:	2a30      	cmp	r2, #48	; 0x30
 800a400:	d0f8      	beq.n	800a3f4 <_strtod_l+0x1ec>
 800a402:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800a406:	2b08      	cmp	r3, #8
 800a408:	f200 84c1 	bhi.w	800ad8e <_strtod_l+0xb86>
 800a40c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a40e:	9005      	str	r0, [sp, #20]
 800a410:	2000      	movs	r0, #0
 800a412:	930b      	str	r3, [sp, #44]	; 0x2c
 800a414:	4606      	mov	r6, r0
 800a416:	3a30      	subs	r2, #48	; 0x30
 800a418:	f100 0301 	add.w	r3, r0, #1
 800a41c:	d014      	beq.n	800a448 <_strtod_l+0x240>
 800a41e:	9905      	ldr	r1, [sp, #20]
 800a420:	4419      	add	r1, r3
 800a422:	9105      	str	r1, [sp, #20]
 800a424:	4633      	mov	r3, r6
 800a426:	eb00 0c06 	add.w	ip, r0, r6
 800a42a:	210a      	movs	r1, #10
 800a42c:	4563      	cmp	r3, ip
 800a42e:	d113      	bne.n	800a458 <_strtod_l+0x250>
 800a430:	1833      	adds	r3, r6, r0
 800a432:	2b08      	cmp	r3, #8
 800a434:	f106 0601 	add.w	r6, r6, #1
 800a438:	4406      	add	r6, r0
 800a43a:	dc1a      	bgt.n	800a472 <_strtod_l+0x26a>
 800a43c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a43e:	230a      	movs	r3, #10
 800a440:	fb03 2301 	mla	r3, r3, r1, r2
 800a444:	9309      	str	r3, [sp, #36]	; 0x24
 800a446:	2300      	movs	r3, #0
 800a448:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a44a:	1c51      	adds	r1, r2, #1
 800a44c:	9115      	str	r1, [sp, #84]	; 0x54
 800a44e:	7852      	ldrb	r2, [r2, #1]
 800a450:	4618      	mov	r0, r3
 800a452:	e7c9      	b.n	800a3e8 <_strtod_l+0x1e0>
 800a454:	4658      	mov	r0, fp
 800a456:	e7d2      	b.n	800a3fe <_strtod_l+0x1f6>
 800a458:	2b08      	cmp	r3, #8
 800a45a:	f103 0301 	add.w	r3, r3, #1
 800a45e:	dc03      	bgt.n	800a468 <_strtod_l+0x260>
 800a460:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800a462:	434f      	muls	r7, r1
 800a464:	9709      	str	r7, [sp, #36]	; 0x24
 800a466:	e7e1      	b.n	800a42c <_strtod_l+0x224>
 800a468:	2b10      	cmp	r3, #16
 800a46a:	bfd8      	it	le
 800a46c:	fb01 fa0a 	mulle.w	sl, r1, sl
 800a470:	e7dc      	b.n	800a42c <_strtod_l+0x224>
 800a472:	2e10      	cmp	r6, #16
 800a474:	bfdc      	itt	le
 800a476:	230a      	movle	r3, #10
 800a478:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800a47c:	e7e3      	b.n	800a446 <_strtod_l+0x23e>
 800a47e:	2300      	movs	r3, #0
 800a480:	9305      	str	r3, [sp, #20]
 800a482:	2301      	movs	r3, #1
 800a484:	e780      	b.n	800a388 <_strtod_l+0x180>
 800a486:	f04f 0c00 	mov.w	ip, #0
 800a48a:	1caa      	adds	r2, r5, #2
 800a48c:	9215      	str	r2, [sp, #84]	; 0x54
 800a48e:	78aa      	ldrb	r2, [r5, #2]
 800a490:	e788      	b.n	800a3a4 <_strtod_l+0x19c>
 800a492:	f04f 0c01 	mov.w	ip, #1
 800a496:	e7f8      	b.n	800a48a <_strtod_l+0x282>
 800a498:	0800cfc0 	.word	0x0800cfc0
 800a49c:	0800cfbc 	.word	0x0800cfbc
 800a4a0:	7ff00000 	.word	0x7ff00000
 800a4a4:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a4a6:	1c51      	adds	r1, r2, #1
 800a4a8:	9115      	str	r1, [sp, #84]	; 0x54
 800a4aa:	7852      	ldrb	r2, [r2, #1]
 800a4ac:	2a30      	cmp	r2, #48	; 0x30
 800a4ae:	d0f9      	beq.n	800a4a4 <_strtod_l+0x29c>
 800a4b0:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800a4b4:	2908      	cmp	r1, #8
 800a4b6:	f63f af7a 	bhi.w	800a3ae <_strtod_l+0x1a6>
 800a4ba:	3a30      	subs	r2, #48	; 0x30
 800a4bc:	9208      	str	r2, [sp, #32]
 800a4be:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a4c0:	920c      	str	r2, [sp, #48]	; 0x30
 800a4c2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a4c4:	1c57      	adds	r7, r2, #1
 800a4c6:	9715      	str	r7, [sp, #84]	; 0x54
 800a4c8:	7852      	ldrb	r2, [r2, #1]
 800a4ca:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800a4ce:	f1be 0f09 	cmp.w	lr, #9
 800a4d2:	d938      	bls.n	800a546 <_strtod_l+0x33e>
 800a4d4:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a4d6:	1a7f      	subs	r7, r7, r1
 800a4d8:	2f08      	cmp	r7, #8
 800a4da:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800a4de:	dc03      	bgt.n	800a4e8 <_strtod_l+0x2e0>
 800a4e0:	9908      	ldr	r1, [sp, #32]
 800a4e2:	428f      	cmp	r7, r1
 800a4e4:	bfa8      	it	ge
 800a4e6:	460f      	movge	r7, r1
 800a4e8:	f1bc 0f00 	cmp.w	ip, #0
 800a4ec:	d000      	beq.n	800a4f0 <_strtod_l+0x2e8>
 800a4ee:	427f      	negs	r7, r7
 800a4f0:	2e00      	cmp	r6, #0
 800a4f2:	d14f      	bne.n	800a594 <_strtod_l+0x38c>
 800a4f4:	9904      	ldr	r1, [sp, #16]
 800a4f6:	4301      	orrs	r1, r0
 800a4f8:	f47f aec1 	bne.w	800a27e <_strtod_l+0x76>
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	f47f aedb 	bne.w	800a2b8 <_strtod_l+0xb0>
 800a502:	2a69      	cmp	r2, #105	; 0x69
 800a504:	d029      	beq.n	800a55a <_strtod_l+0x352>
 800a506:	dc26      	bgt.n	800a556 <_strtod_l+0x34e>
 800a508:	2a49      	cmp	r2, #73	; 0x49
 800a50a:	d026      	beq.n	800a55a <_strtod_l+0x352>
 800a50c:	2a4e      	cmp	r2, #78	; 0x4e
 800a50e:	f47f aed3 	bne.w	800a2b8 <_strtod_l+0xb0>
 800a512:	499b      	ldr	r1, [pc, #620]	; (800a780 <_strtod_l+0x578>)
 800a514:	a815      	add	r0, sp, #84	; 0x54
 800a516:	f001 fa27 	bl	800b968 <__match>
 800a51a:	2800      	cmp	r0, #0
 800a51c:	f43f aecc 	beq.w	800a2b8 <_strtod_l+0xb0>
 800a520:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a522:	781b      	ldrb	r3, [r3, #0]
 800a524:	2b28      	cmp	r3, #40	; 0x28
 800a526:	d12f      	bne.n	800a588 <_strtod_l+0x380>
 800a528:	4996      	ldr	r1, [pc, #600]	; (800a784 <_strtod_l+0x57c>)
 800a52a:	aa18      	add	r2, sp, #96	; 0x60
 800a52c:	a815      	add	r0, sp, #84	; 0x54
 800a52e:	f001 fa2f 	bl	800b990 <__hexnan>
 800a532:	2805      	cmp	r0, #5
 800a534:	d128      	bne.n	800a588 <_strtod_l+0x380>
 800a536:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a538:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a53c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800a540:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800a544:	e69b      	b.n	800a27e <_strtod_l+0x76>
 800a546:	9f08      	ldr	r7, [sp, #32]
 800a548:	210a      	movs	r1, #10
 800a54a:	fb01 2107 	mla	r1, r1, r7, r2
 800a54e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800a552:	9208      	str	r2, [sp, #32]
 800a554:	e7b5      	b.n	800a4c2 <_strtod_l+0x2ba>
 800a556:	2a6e      	cmp	r2, #110	; 0x6e
 800a558:	e7d9      	b.n	800a50e <_strtod_l+0x306>
 800a55a:	498b      	ldr	r1, [pc, #556]	; (800a788 <_strtod_l+0x580>)
 800a55c:	a815      	add	r0, sp, #84	; 0x54
 800a55e:	f001 fa03 	bl	800b968 <__match>
 800a562:	2800      	cmp	r0, #0
 800a564:	f43f aea8 	beq.w	800a2b8 <_strtod_l+0xb0>
 800a568:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a56a:	4988      	ldr	r1, [pc, #544]	; (800a78c <_strtod_l+0x584>)
 800a56c:	3b01      	subs	r3, #1
 800a56e:	a815      	add	r0, sp, #84	; 0x54
 800a570:	9315      	str	r3, [sp, #84]	; 0x54
 800a572:	f001 f9f9 	bl	800b968 <__match>
 800a576:	b910      	cbnz	r0, 800a57e <_strtod_l+0x376>
 800a578:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a57a:	3301      	adds	r3, #1
 800a57c:	9315      	str	r3, [sp, #84]	; 0x54
 800a57e:	f8df 921c 	ldr.w	r9, [pc, #540]	; 800a79c <_strtod_l+0x594>
 800a582:	f04f 0800 	mov.w	r8, #0
 800a586:	e67a      	b.n	800a27e <_strtod_l+0x76>
 800a588:	4881      	ldr	r0, [pc, #516]	; (800a790 <_strtod_l+0x588>)
 800a58a:	f000 ff09 	bl	800b3a0 <nan>
 800a58e:	ec59 8b10 	vmov	r8, r9, d0
 800a592:	e674      	b.n	800a27e <_strtod_l+0x76>
 800a594:	9b05      	ldr	r3, [sp, #20]
 800a596:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a598:	1afb      	subs	r3, r7, r3
 800a59a:	f1bb 0f00 	cmp.w	fp, #0
 800a59e:	bf08      	it	eq
 800a5a0:	46b3      	moveq	fp, r6
 800a5a2:	2e10      	cmp	r6, #16
 800a5a4:	9308      	str	r3, [sp, #32]
 800a5a6:	4635      	mov	r5, r6
 800a5a8:	bfa8      	it	ge
 800a5aa:	2510      	movge	r5, #16
 800a5ac:	f7f5 ffaa 	bl	8000504 <__aeabi_ui2d>
 800a5b0:	2e09      	cmp	r6, #9
 800a5b2:	4680      	mov	r8, r0
 800a5b4:	4689      	mov	r9, r1
 800a5b6:	dd13      	ble.n	800a5e0 <_strtod_l+0x3d8>
 800a5b8:	4b76      	ldr	r3, [pc, #472]	; (800a794 <_strtod_l+0x58c>)
 800a5ba:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800a5be:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800a5c2:	f7f6 f819 	bl	80005f8 <__aeabi_dmul>
 800a5c6:	4680      	mov	r8, r0
 800a5c8:	4650      	mov	r0, sl
 800a5ca:	4689      	mov	r9, r1
 800a5cc:	f7f5 ff9a 	bl	8000504 <__aeabi_ui2d>
 800a5d0:	4602      	mov	r2, r0
 800a5d2:	460b      	mov	r3, r1
 800a5d4:	4640      	mov	r0, r8
 800a5d6:	4649      	mov	r1, r9
 800a5d8:	f7f5 fe58 	bl	800028c <__adddf3>
 800a5dc:	4680      	mov	r8, r0
 800a5de:	4689      	mov	r9, r1
 800a5e0:	2e0f      	cmp	r6, #15
 800a5e2:	dc38      	bgt.n	800a656 <_strtod_l+0x44e>
 800a5e4:	9b08      	ldr	r3, [sp, #32]
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	f43f ae49 	beq.w	800a27e <_strtod_l+0x76>
 800a5ec:	dd24      	ble.n	800a638 <_strtod_l+0x430>
 800a5ee:	2b16      	cmp	r3, #22
 800a5f0:	dc0b      	bgt.n	800a60a <_strtod_l+0x402>
 800a5f2:	4968      	ldr	r1, [pc, #416]	; (800a794 <_strtod_l+0x58c>)
 800a5f4:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a5f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a5fc:	4642      	mov	r2, r8
 800a5fe:	464b      	mov	r3, r9
 800a600:	f7f5 fffa 	bl	80005f8 <__aeabi_dmul>
 800a604:	4680      	mov	r8, r0
 800a606:	4689      	mov	r9, r1
 800a608:	e639      	b.n	800a27e <_strtod_l+0x76>
 800a60a:	9a08      	ldr	r2, [sp, #32]
 800a60c:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 800a610:	4293      	cmp	r3, r2
 800a612:	db20      	blt.n	800a656 <_strtod_l+0x44e>
 800a614:	4c5f      	ldr	r4, [pc, #380]	; (800a794 <_strtod_l+0x58c>)
 800a616:	f1c6 060f 	rsb	r6, r6, #15
 800a61a:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800a61e:	4642      	mov	r2, r8
 800a620:	464b      	mov	r3, r9
 800a622:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a626:	f7f5 ffe7 	bl	80005f8 <__aeabi_dmul>
 800a62a:	9b08      	ldr	r3, [sp, #32]
 800a62c:	1b9e      	subs	r6, r3, r6
 800a62e:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800a632:	e9d4 2300 	ldrd	r2, r3, [r4]
 800a636:	e7e3      	b.n	800a600 <_strtod_l+0x3f8>
 800a638:	9b08      	ldr	r3, [sp, #32]
 800a63a:	3316      	adds	r3, #22
 800a63c:	db0b      	blt.n	800a656 <_strtod_l+0x44e>
 800a63e:	9b05      	ldr	r3, [sp, #20]
 800a640:	1bdf      	subs	r7, r3, r7
 800a642:	4b54      	ldr	r3, [pc, #336]	; (800a794 <_strtod_l+0x58c>)
 800a644:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800a648:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a64c:	4640      	mov	r0, r8
 800a64e:	4649      	mov	r1, r9
 800a650:	f7f6 f8fc 	bl	800084c <__aeabi_ddiv>
 800a654:	e7d6      	b.n	800a604 <_strtod_l+0x3fc>
 800a656:	9b08      	ldr	r3, [sp, #32]
 800a658:	1b75      	subs	r5, r6, r5
 800a65a:	441d      	add	r5, r3
 800a65c:	2d00      	cmp	r5, #0
 800a65e:	dd70      	ble.n	800a742 <_strtod_l+0x53a>
 800a660:	f015 030f 	ands.w	r3, r5, #15
 800a664:	d00a      	beq.n	800a67c <_strtod_l+0x474>
 800a666:	494b      	ldr	r1, [pc, #300]	; (800a794 <_strtod_l+0x58c>)
 800a668:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a66c:	4642      	mov	r2, r8
 800a66e:	464b      	mov	r3, r9
 800a670:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a674:	f7f5 ffc0 	bl	80005f8 <__aeabi_dmul>
 800a678:	4680      	mov	r8, r0
 800a67a:	4689      	mov	r9, r1
 800a67c:	f035 050f 	bics.w	r5, r5, #15
 800a680:	d04d      	beq.n	800a71e <_strtod_l+0x516>
 800a682:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800a686:	dd22      	ble.n	800a6ce <_strtod_l+0x4c6>
 800a688:	2500      	movs	r5, #0
 800a68a:	46ab      	mov	fp, r5
 800a68c:	9509      	str	r5, [sp, #36]	; 0x24
 800a68e:	9505      	str	r5, [sp, #20]
 800a690:	2322      	movs	r3, #34	; 0x22
 800a692:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800a79c <_strtod_l+0x594>
 800a696:	6023      	str	r3, [r4, #0]
 800a698:	f04f 0800 	mov.w	r8, #0
 800a69c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	f43f aded 	beq.w	800a27e <_strtod_l+0x76>
 800a6a4:	9916      	ldr	r1, [sp, #88]	; 0x58
 800a6a6:	4620      	mov	r0, r4
 800a6a8:	f7ff f924 	bl	80098f4 <_Bfree>
 800a6ac:	9905      	ldr	r1, [sp, #20]
 800a6ae:	4620      	mov	r0, r4
 800a6b0:	f7ff f920 	bl	80098f4 <_Bfree>
 800a6b4:	4659      	mov	r1, fp
 800a6b6:	4620      	mov	r0, r4
 800a6b8:	f7ff f91c 	bl	80098f4 <_Bfree>
 800a6bc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a6be:	4620      	mov	r0, r4
 800a6c0:	f7ff f918 	bl	80098f4 <_Bfree>
 800a6c4:	4629      	mov	r1, r5
 800a6c6:	4620      	mov	r0, r4
 800a6c8:	f7ff f914 	bl	80098f4 <_Bfree>
 800a6cc:	e5d7      	b.n	800a27e <_strtod_l+0x76>
 800a6ce:	4b32      	ldr	r3, [pc, #200]	; (800a798 <_strtod_l+0x590>)
 800a6d0:	9304      	str	r3, [sp, #16]
 800a6d2:	2300      	movs	r3, #0
 800a6d4:	112d      	asrs	r5, r5, #4
 800a6d6:	4640      	mov	r0, r8
 800a6d8:	4649      	mov	r1, r9
 800a6da:	469a      	mov	sl, r3
 800a6dc:	2d01      	cmp	r5, #1
 800a6de:	dc21      	bgt.n	800a724 <_strtod_l+0x51c>
 800a6e0:	b10b      	cbz	r3, 800a6e6 <_strtod_l+0x4de>
 800a6e2:	4680      	mov	r8, r0
 800a6e4:	4689      	mov	r9, r1
 800a6e6:	492c      	ldr	r1, [pc, #176]	; (800a798 <_strtod_l+0x590>)
 800a6e8:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800a6ec:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800a6f0:	4642      	mov	r2, r8
 800a6f2:	464b      	mov	r3, r9
 800a6f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a6f8:	f7f5 ff7e 	bl	80005f8 <__aeabi_dmul>
 800a6fc:	4b27      	ldr	r3, [pc, #156]	; (800a79c <_strtod_l+0x594>)
 800a6fe:	460a      	mov	r2, r1
 800a700:	400b      	ands	r3, r1
 800a702:	4927      	ldr	r1, [pc, #156]	; (800a7a0 <_strtod_l+0x598>)
 800a704:	428b      	cmp	r3, r1
 800a706:	4680      	mov	r8, r0
 800a708:	d8be      	bhi.n	800a688 <_strtod_l+0x480>
 800a70a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800a70e:	428b      	cmp	r3, r1
 800a710:	bf86      	itte	hi
 800a712:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 800a7a4 <_strtod_l+0x59c>
 800a716:	f04f 38ff 	movhi.w	r8, #4294967295
 800a71a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800a71e:	2300      	movs	r3, #0
 800a720:	9304      	str	r3, [sp, #16]
 800a722:	e07b      	b.n	800a81c <_strtod_l+0x614>
 800a724:	07ea      	lsls	r2, r5, #31
 800a726:	d505      	bpl.n	800a734 <_strtod_l+0x52c>
 800a728:	9b04      	ldr	r3, [sp, #16]
 800a72a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a72e:	f7f5 ff63 	bl	80005f8 <__aeabi_dmul>
 800a732:	2301      	movs	r3, #1
 800a734:	9a04      	ldr	r2, [sp, #16]
 800a736:	3208      	adds	r2, #8
 800a738:	f10a 0a01 	add.w	sl, sl, #1
 800a73c:	106d      	asrs	r5, r5, #1
 800a73e:	9204      	str	r2, [sp, #16]
 800a740:	e7cc      	b.n	800a6dc <_strtod_l+0x4d4>
 800a742:	d0ec      	beq.n	800a71e <_strtod_l+0x516>
 800a744:	426d      	negs	r5, r5
 800a746:	f015 020f 	ands.w	r2, r5, #15
 800a74a:	d00a      	beq.n	800a762 <_strtod_l+0x55a>
 800a74c:	4b11      	ldr	r3, [pc, #68]	; (800a794 <_strtod_l+0x58c>)
 800a74e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a752:	4640      	mov	r0, r8
 800a754:	4649      	mov	r1, r9
 800a756:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a75a:	f7f6 f877 	bl	800084c <__aeabi_ddiv>
 800a75e:	4680      	mov	r8, r0
 800a760:	4689      	mov	r9, r1
 800a762:	112d      	asrs	r5, r5, #4
 800a764:	d0db      	beq.n	800a71e <_strtod_l+0x516>
 800a766:	2d1f      	cmp	r5, #31
 800a768:	dd1e      	ble.n	800a7a8 <_strtod_l+0x5a0>
 800a76a:	2500      	movs	r5, #0
 800a76c:	46ab      	mov	fp, r5
 800a76e:	9509      	str	r5, [sp, #36]	; 0x24
 800a770:	9505      	str	r5, [sp, #20]
 800a772:	2322      	movs	r3, #34	; 0x22
 800a774:	f04f 0800 	mov.w	r8, #0
 800a778:	f04f 0900 	mov.w	r9, #0
 800a77c:	6023      	str	r3, [r4, #0]
 800a77e:	e78d      	b.n	800a69c <_strtod_l+0x494>
 800a780:	0800cda9 	.word	0x0800cda9
 800a784:	0800cfd4 	.word	0x0800cfd4
 800a788:	0800cda1 	.word	0x0800cda1
 800a78c:	0800cdd8 	.word	0x0800cdd8
 800a790:	0800d165 	.word	0x0800d165
 800a794:	0800cee8 	.word	0x0800cee8
 800a798:	0800cec0 	.word	0x0800cec0
 800a79c:	7ff00000 	.word	0x7ff00000
 800a7a0:	7ca00000 	.word	0x7ca00000
 800a7a4:	7fefffff 	.word	0x7fefffff
 800a7a8:	f015 0310 	ands.w	r3, r5, #16
 800a7ac:	bf18      	it	ne
 800a7ae:	236a      	movne	r3, #106	; 0x6a
 800a7b0:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 800ab54 <_strtod_l+0x94c>
 800a7b4:	9304      	str	r3, [sp, #16]
 800a7b6:	4640      	mov	r0, r8
 800a7b8:	4649      	mov	r1, r9
 800a7ba:	2300      	movs	r3, #0
 800a7bc:	07ea      	lsls	r2, r5, #31
 800a7be:	d504      	bpl.n	800a7ca <_strtod_l+0x5c2>
 800a7c0:	e9da 2300 	ldrd	r2, r3, [sl]
 800a7c4:	f7f5 ff18 	bl	80005f8 <__aeabi_dmul>
 800a7c8:	2301      	movs	r3, #1
 800a7ca:	106d      	asrs	r5, r5, #1
 800a7cc:	f10a 0a08 	add.w	sl, sl, #8
 800a7d0:	d1f4      	bne.n	800a7bc <_strtod_l+0x5b4>
 800a7d2:	b10b      	cbz	r3, 800a7d8 <_strtod_l+0x5d0>
 800a7d4:	4680      	mov	r8, r0
 800a7d6:	4689      	mov	r9, r1
 800a7d8:	9b04      	ldr	r3, [sp, #16]
 800a7da:	b1bb      	cbz	r3, 800a80c <_strtod_l+0x604>
 800a7dc:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800a7e0:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	4649      	mov	r1, r9
 800a7e8:	dd10      	ble.n	800a80c <_strtod_l+0x604>
 800a7ea:	2b1f      	cmp	r3, #31
 800a7ec:	f340 811e 	ble.w	800aa2c <_strtod_l+0x824>
 800a7f0:	2b34      	cmp	r3, #52	; 0x34
 800a7f2:	bfde      	ittt	le
 800a7f4:	f04f 33ff 	movle.w	r3, #4294967295
 800a7f8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800a7fc:	4093      	lslle	r3, r2
 800a7fe:	f04f 0800 	mov.w	r8, #0
 800a802:	bfcc      	ite	gt
 800a804:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800a808:	ea03 0901 	andle.w	r9, r3, r1
 800a80c:	2200      	movs	r2, #0
 800a80e:	2300      	movs	r3, #0
 800a810:	4640      	mov	r0, r8
 800a812:	4649      	mov	r1, r9
 800a814:	f7f6 f958 	bl	8000ac8 <__aeabi_dcmpeq>
 800a818:	2800      	cmp	r0, #0
 800a81a:	d1a6      	bne.n	800a76a <_strtod_l+0x562>
 800a81c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a81e:	9300      	str	r3, [sp, #0]
 800a820:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a822:	4633      	mov	r3, r6
 800a824:	465a      	mov	r2, fp
 800a826:	4620      	mov	r0, r4
 800a828:	f7ff f8cc 	bl	80099c4 <__s2b>
 800a82c:	9009      	str	r0, [sp, #36]	; 0x24
 800a82e:	2800      	cmp	r0, #0
 800a830:	f43f af2a 	beq.w	800a688 <_strtod_l+0x480>
 800a834:	9a08      	ldr	r2, [sp, #32]
 800a836:	9b05      	ldr	r3, [sp, #20]
 800a838:	2a00      	cmp	r2, #0
 800a83a:	eba3 0307 	sub.w	r3, r3, r7
 800a83e:	bfa8      	it	ge
 800a840:	2300      	movge	r3, #0
 800a842:	930c      	str	r3, [sp, #48]	; 0x30
 800a844:	2500      	movs	r5, #0
 800a846:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800a84a:	9312      	str	r3, [sp, #72]	; 0x48
 800a84c:	46ab      	mov	fp, r5
 800a84e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a850:	4620      	mov	r0, r4
 800a852:	6859      	ldr	r1, [r3, #4]
 800a854:	f7ff f80e 	bl	8009874 <_Balloc>
 800a858:	9005      	str	r0, [sp, #20]
 800a85a:	2800      	cmp	r0, #0
 800a85c:	f43f af18 	beq.w	800a690 <_strtod_l+0x488>
 800a860:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a862:	691a      	ldr	r2, [r3, #16]
 800a864:	3202      	adds	r2, #2
 800a866:	f103 010c 	add.w	r1, r3, #12
 800a86a:	0092      	lsls	r2, r2, #2
 800a86c:	300c      	adds	r0, #12
 800a86e:	f000 fd87 	bl	800b380 <memcpy>
 800a872:	ec49 8b10 	vmov	d0, r8, r9
 800a876:	aa18      	add	r2, sp, #96	; 0x60
 800a878:	a917      	add	r1, sp, #92	; 0x5c
 800a87a:	4620      	mov	r0, r4
 800a87c:	f7ff fbd6 	bl	800a02c <__d2b>
 800a880:	ec49 8b18 	vmov	d8, r8, r9
 800a884:	9016      	str	r0, [sp, #88]	; 0x58
 800a886:	2800      	cmp	r0, #0
 800a888:	f43f af02 	beq.w	800a690 <_strtod_l+0x488>
 800a88c:	2101      	movs	r1, #1
 800a88e:	4620      	mov	r0, r4
 800a890:	f7ff f930 	bl	8009af4 <__i2b>
 800a894:	4683      	mov	fp, r0
 800a896:	2800      	cmp	r0, #0
 800a898:	f43f aefa 	beq.w	800a690 <_strtod_l+0x488>
 800a89c:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800a89e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800a8a0:	2e00      	cmp	r6, #0
 800a8a2:	bfab      	itete	ge
 800a8a4:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 800a8a6:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 800a8a8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800a8aa:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 800a8ae:	bfac      	ite	ge
 800a8b0:	eb06 0a03 	addge.w	sl, r6, r3
 800a8b4:	1b9f      	sublt	r7, r3, r6
 800a8b6:	9b04      	ldr	r3, [sp, #16]
 800a8b8:	1af6      	subs	r6, r6, r3
 800a8ba:	4416      	add	r6, r2
 800a8bc:	4ba0      	ldr	r3, [pc, #640]	; (800ab40 <_strtod_l+0x938>)
 800a8be:	3e01      	subs	r6, #1
 800a8c0:	429e      	cmp	r6, r3
 800a8c2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800a8c6:	f280 80c4 	bge.w	800aa52 <_strtod_l+0x84a>
 800a8ca:	1b9b      	subs	r3, r3, r6
 800a8cc:	2b1f      	cmp	r3, #31
 800a8ce:	eba2 0203 	sub.w	r2, r2, r3
 800a8d2:	f04f 0101 	mov.w	r1, #1
 800a8d6:	f300 80b0 	bgt.w	800aa3a <_strtod_l+0x832>
 800a8da:	fa01 f303 	lsl.w	r3, r1, r3
 800a8de:	930e      	str	r3, [sp, #56]	; 0x38
 800a8e0:	2300      	movs	r3, #0
 800a8e2:	930d      	str	r3, [sp, #52]	; 0x34
 800a8e4:	eb0a 0602 	add.w	r6, sl, r2
 800a8e8:	9b04      	ldr	r3, [sp, #16]
 800a8ea:	45b2      	cmp	sl, r6
 800a8ec:	4417      	add	r7, r2
 800a8ee:	441f      	add	r7, r3
 800a8f0:	4653      	mov	r3, sl
 800a8f2:	bfa8      	it	ge
 800a8f4:	4633      	movge	r3, r6
 800a8f6:	42bb      	cmp	r3, r7
 800a8f8:	bfa8      	it	ge
 800a8fa:	463b      	movge	r3, r7
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	bfc2      	ittt	gt
 800a900:	1af6      	subgt	r6, r6, r3
 800a902:	1aff      	subgt	r7, r7, r3
 800a904:	ebaa 0a03 	subgt.w	sl, sl, r3
 800a908:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	dd17      	ble.n	800a93e <_strtod_l+0x736>
 800a90e:	4659      	mov	r1, fp
 800a910:	461a      	mov	r2, r3
 800a912:	4620      	mov	r0, r4
 800a914:	f7ff f9ae 	bl	8009c74 <__pow5mult>
 800a918:	4683      	mov	fp, r0
 800a91a:	2800      	cmp	r0, #0
 800a91c:	f43f aeb8 	beq.w	800a690 <_strtod_l+0x488>
 800a920:	4601      	mov	r1, r0
 800a922:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800a924:	4620      	mov	r0, r4
 800a926:	f7ff f8fb 	bl	8009b20 <__multiply>
 800a92a:	900b      	str	r0, [sp, #44]	; 0x2c
 800a92c:	2800      	cmp	r0, #0
 800a92e:	f43f aeaf 	beq.w	800a690 <_strtod_l+0x488>
 800a932:	9916      	ldr	r1, [sp, #88]	; 0x58
 800a934:	4620      	mov	r0, r4
 800a936:	f7fe ffdd 	bl	80098f4 <_Bfree>
 800a93a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a93c:	9316      	str	r3, [sp, #88]	; 0x58
 800a93e:	2e00      	cmp	r6, #0
 800a940:	f300 808c 	bgt.w	800aa5c <_strtod_l+0x854>
 800a944:	9b08      	ldr	r3, [sp, #32]
 800a946:	2b00      	cmp	r3, #0
 800a948:	dd08      	ble.n	800a95c <_strtod_l+0x754>
 800a94a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a94c:	9905      	ldr	r1, [sp, #20]
 800a94e:	4620      	mov	r0, r4
 800a950:	f7ff f990 	bl	8009c74 <__pow5mult>
 800a954:	9005      	str	r0, [sp, #20]
 800a956:	2800      	cmp	r0, #0
 800a958:	f43f ae9a 	beq.w	800a690 <_strtod_l+0x488>
 800a95c:	2f00      	cmp	r7, #0
 800a95e:	dd08      	ble.n	800a972 <_strtod_l+0x76a>
 800a960:	9905      	ldr	r1, [sp, #20]
 800a962:	463a      	mov	r2, r7
 800a964:	4620      	mov	r0, r4
 800a966:	f7ff f9df 	bl	8009d28 <__lshift>
 800a96a:	9005      	str	r0, [sp, #20]
 800a96c:	2800      	cmp	r0, #0
 800a96e:	f43f ae8f 	beq.w	800a690 <_strtod_l+0x488>
 800a972:	f1ba 0f00 	cmp.w	sl, #0
 800a976:	dd08      	ble.n	800a98a <_strtod_l+0x782>
 800a978:	4659      	mov	r1, fp
 800a97a:	4652      	mov	r2, sl
 800a97c:	4620      	mov	r0, r4
 800a97e:	f7ff f9d3 	bl	8009d28 <__lshift>
 800a982:	4683      	mov	fp, r0
 800a984:	2800      	cmp	r0, #0
 800a986:	f43f ae83 	beq.w	800a690 <_strtod_l+0x488>
 800a98a:	9a05      	ldr	r2, [sp, #20]
 800a98c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800a98e:	4620      	mov	r0, r4
 800a990:	f7ff fa52 	bl	8009e38 <__mdiff>
 800a994:	4605      	mov	r5, r0
 800a996:	2800      	cmp	r0, #0
 800a998:	f43f ae7a 	beq.w	800a690 <_strtod_l+0x488>
 800a99c:	68c3      	ldr	r3, [r0, #12]
 800a99e:	930b      	str	r3, [sp, #44]	; 0x2c
 800a9a0:	2300      	movs	r3, #0
 800a9a2:	60c3      	str	r3, [r0, #12]
 800a9a4:	4659      	mov	r1, fp
 800a9a6:	f7ff fa2b 	bl	8009e00 <__mcmp>
 800a9aa:	2800      	cmp	r0, #0
 800a9ac:	da60      	bge.n	800aa70 <_strtod_l+0x868>
 800a9ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a9b0:	ea53 0308 	orrs.w	r3, r3, r8
 800a9b4:	f040 8084 	bne.w	800aac0 <_strtod_l+0x8b8>
 800a9b8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d17f      	bne.n	800aac0 <_strtod_l+0x8b8>
 800a9c0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a9c4:	0d1b      	lsrs	r3, r3, #20
 800a9c6:	051b      	lsls	r3, r3, #20
 800a9c8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800a9cc:	d978      	bls.n	800aac0 <_strtod_l+0x8b8>
 800a9ce:	696b      	ldr	r3, [r5, #20]
 800a9d0:	b913      	cbnz	r3, 800a9d8 <_strtod_l+0x7d0>
 800a9d2:	692b      	ldr	r3, [r5, #16]
 800a9d4:	2b01      	cmp	r3, #1
 800a9d6:	dd73      	ble.n	800aac0 <_strtod_l+0x8b8>
 800a9d8:	4629      	mov	r1, r5
 800a9da:	2201      	movs	r2, #1
 800a9dc:	4620      	mov	r0, r4
 800a9de:	f7ff f9a3 	bl	8009d28 <__lshift>
 800a9e2:	4659      	mov	r1, fp
 800a9e4:	4605      	mov	r5, r0
 800a9e6:	f7ff fa0b 	bl	8009e00 <__mcmp>
 800a9ea:	2800      	cmp	r0, #0
 800a9ec:	dd68      	ble.n	800aac0 <_strtod_l+0x8b8>
 800a9ee:	9904      	ldr	r1, [sp, #16]
 800a9f0:	4a54      	ldr	r2, [pc, #336]	; (800ab44 <_strtod_l+0x93c>)
 800a9f2:	464b      	mov	r3, r9
 800a9f4:	2900      	cmp	r1, #0
 800a9f6:	f000 8084 	beq.w	800ab02 <_strtod_l+0x8fa>
 800a9fa:	ea02 0109 	and.w	r1, r2, r9
 800a9fe:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800aa02:	dc7e      	bgt.n	800ab02 <_strtod_l+0x8fa>
 800aa04:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800aa08:	f77f aeb3 	ble.w	800a772 <_strtod_l+0x56a>
 800aa0c:	4b4e      	ldr	r3, [pc, #312]	; (800ab48 <_strtod_l+0x940>)
 800aa0e:	4640      	mov	r0, r8
 800aa10:	4649      	mov	r1, r9
 800aa12:	2200      	movs	r2, #0
 800aa14:	f7f5 fdf0 	bl	80005f8 <__aeabi_dmul>
 800aa18:	4b4a      	ldr	r3, [pc, #296]	; (800ab44 <_strtod_l+0x93c>)
 800aa1a:	400b      	ands	r3, r1
 800aa1c:	4680      	mov	r8, r0
 800aa1e:	4689      	mov	r9, r1
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	f47f ae3f 	bne.w	800a6a4 <_strtod_l+0x49c>
 800aa26:	2322      	movs	r3, #34	; 0x22
 800aa28:	6023      	str	r3, [r4, #0]
 800aa2a:	e63b      	b.n	800a6a4 <_strtod_l+0x49c>
 800aa2c:	f04f 32ff 	mov.w	r2, #4294967295
 800aa30:	fa02 f303 	lsl.w	r3, r2, r3
 800aa34:	ea03 0808 	and.w	r8, r3, r8
 800aa38:	e6e8      	b.n	800a80c <_strtod_l+0x604>
 800aa3a:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800aa3e:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800aa42:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800aa46:	36e2      	adds	r6, #226	; 0xe2
 800aa48:	fa01 f306 	lsl.w	r3, r1, r6
 800aa4c:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 800aa50:	e748      	b.n	800a8e4 <_strtod_l+0x6dc>
 800aa52:	2100      	movs	r1, #0
 800aa54:	2301      	movs	r3, #1
 800aa56:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 800aa5a:	e743      	b.n	800a8e4 <_strtod_l+0x6dc>
 800aa5c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800aa5e:	4632      	mov	r2, r6
 800aa60:	4620      	mov	r0, r4
 800aa62:	f7ff f961 	bl	8009d28 <__lshift>
 800aa66:	9016      	str	r0, [sp, #88]	; 0x58
 800aa68:	2800      	cmp	r0, #0
 800aa6a:	f47f af6b 	bne.w	800a944 <_strtod_l+0x73c>
 800aa6e:	e60f      	b.n	800a690 <_strtod_l+0x488>
 800aa70:	46ca      	mov	sl, r9
 800aa72:	d171      	bne.n	800ab58 <_strtod_l+0x950>
 800aa74:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800aa76:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800aa7a:	b352      	cbz	r2, 800aad2 <_strtod_l+0x8ca>
 800aa7c:	4a33      	ldr	r2, [pc, #204]	; (800ab4c <_strtod_l+0x944>)
 800aa7e:	4293      	cmp	r3, r2
 800aa80:	d12a      	bne.n	800aad8 <_strtod_l+0x8d0>
 800aa82:	9b04      	ldr	r3, [sp, #16]
 800aa84:	4641      	mov	r1, r8
 800aa86:	b1fb      	cbz	r3, 800aac8 <_strtod_l+0x8c0>
 800aa88:	4b2e      	ldr	r3, [pc, #184]	; (800ab44 <_strtod_l+0x93c>)
 800aa8a:	ea09 0303 	and.w	r3, r9, r3
 800aa8e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800aa92:	f04f 32ff 	mov.w	r2, #4294967295
 800aa96:	d81a      	bhi.n	800aace <_strtod_l+0x8c6>
 800aa98:	0d1b      	lsrs	r3, r3, #20
 800aa9a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800aa9e:	fa02 f303 	lsl.w	r3, r2, r3
 800aaa2:	4299      	cmp	r1, r3
 800aaa4:	d118      	bne.n	800aad8 <_strtod_l+0x8d0>
 800aaa6:	4b2a      	ldr	r3, [pc, #168]	; (800ab50 <_strtod_l+0x948>)
 800aaa8:	459a      	cmp	sl, r3
 800aaaa:	d102      	bne.n	800aab2 <_strtod_l+0x8aa>
 800aaac:	3101      	adds	r1, #1
 800aaae:	f43f adef 	beq.w	800a690 <_strtod_l+0x488>
 800aab2:	4b24      	ldr	r3, [pc, #144]	; (800ab44 <_strtod_l+0x93c>)
 800aab4:	ea0a 0303 	and.w	r3, sl, r3
 800aab8:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800aabc:	f04f 0800 	mov.w	r8, #0
 800aac0:	9b04      	ldr	r3, [sp, #16]
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d1a2      	bne.n	800aa0c <_strtod_l+0x804>
 800aac6:	e5ed      	b.n	800a6a4 <_strtod_l+0x49c>
 800aac8:	f04f 33ff 	mov.w	r3, #4294967295
 800aacc:	e7e9      	b.n	800aaa2 <_strtod_l+0x89a>
 800aace:	4613      	mov	r3, r2
 800aad0:	e7e7      	b.n	800aaa2 <_strtod_l+0x89a>
 800aad2:	ea53 0308 	orrs.w	r3, r3, r8
 800aad6:	d08a      	beq.n	800a9ee <_strtod_l+0x7e6>
 800aad8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800aada:	b1e3      	cbz	r3, 800ab16 <_strtod_l+0x90e>
 800aadc:	ea13 0f0a 	tst.w	r3, sl
 800aae0:	d0ee      	beq.n	800aac0 <_strtod_l+0x8b8>
 800aae2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aae4:	9a04      	ldr	r2, [sp, #16]
 800aae6:	4640      	mov	r0, r8
 800aae8:	4649      	mov	r1, r9
 800aaea:	b1c3      	cbz	r3, 800ab1e <_strtod_l+0x916>
 800aaec:	f7ff fb6f 	bl	800a1ce <sulp>
 800aaf0:	4602      	mov	r2, r0
 800aaf2:	460b      	mov	r3, r1
 800aaf4:	ec51 0b18 	vmov	r0, r1, d8
 800aaf8:	f7f5 fbc8 	bl	800028c <__adddf3>
 800aafc:	4680      	mov	r8, r0
 800aafe:	4689      	mov	r9, r1
 800ab00:	e7de      	b.n	800aac0 <_strtod_l+0x8b8>
 800ab02:	4013      	ands	r3, r2
 800ab04:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800ab08:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800ab0c:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800ab10:	f04f 38ff 	mov.w	r8, #4294967295
 800ab14:	e7d4      	b.n	800aac0 <_strtod_l+0x8b8>
 800ab16:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ab18:	ea13 0f08 	tst.w	r3, r8
 800ab1c:	e7e0      	b.n	800aae0 <_strtod_l+0x8d8>
 800ab1e:	f7ff fb56 	bl	800a1ce <sulp>
 800ab22:	4602      	mov	r2, r0
 800ab24:	460b      	mov	r3, r1
 800ab26:	ec51 0b18 	vmov	r0, r1, d8
 800ab2a:	f7f5 fbad 	bl	8000288 <__aeabi_dsub>
 800ab2e:	2200      	movs	r2, #0
 800ab30:	2300      	movs	r3, #0
 800ab32:	4680      	mov	r8, r0
 800ab34:	4689      	mov	r9, r1
 800ab36:	f7f5 ffc7 	bl	8000ac8 <__aeabi_dcmpeq>
 800ab3a:	2800      	cmp	r0, #0
 800ab3c:	d0c0      	beq.n	800aac0 <_strtod_l+0x8b8>
 800ab3e:	e618      	b.n	800a772 <_strtod_l+0x56a>
 800ab40:	fffffc02 	.word	0xfffffc02
 800ab44:	7ff00000 	.word	0x7ff00000
 800ab48:	39500000 	.word	0x39500000
 800ab4c:	000fffff 	.word	0x000fffff
 800ab50:	7fefffff 	.word	0x7fefffff
 800ab54:	0800cfe8 	.word	0x0800cfe8
 800ab58:	4659      	mov	r1, fp
 800ab5a:	4628      	mov	r0, r5
 800ab5c:	f7ff fac0 	bl	800a0e0 <__ratio>
 800ab60:	ec57 6b10 	vmov	r6, r7, d0
 800ab64:	ee10 0a10 	vmov	r0, s0
 800ab68:	2200      	movs	r2, #0
 800ab6a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ab6e:	4639      	mov	r1, r7
 800ab70:	f7f5 ffbe 	bl	8000af0 <__aeabi_dcmple>
 800ab74:	2800      	cmp	r0, #0
 800ab76:	d071      	beq.n	800ac5c <_strtod_l+0xa54>
 800ab78:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d17c      	bne.n	800ac78 <_strtod_l+0xa70>
 800ab7e:	f1b8 0f00 	cmp.w	r8, #0
 800ab82:	d15a      	bne.n	800ac3a <_strtod_l+0xa32>
 800ab84:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d15d      	bne.n	800ac48 <_strtod_l+0xa40>
 800ab8c:	4b90      	ldr	r3, [pc, #576]	; (800add0 <_strtod_l+0xbc8>)
 800ab8e:	2200      	movs	r2, #0
 800ab90:	4630      	mov	r0, r6
 800ab92:	4639      	mov	r1, r7
 800ab94:	f7f5 ffa2 	bl	8000adc <__aeabi_dcmplt>
 800ab98:	2800      	cmp	r0, #0
 800ab9a:	d15c      	bne.n	800ac56 <_strtod_l+0xa4e>
 800ab9c:	4630      	mov	r0, r6
 800ab9e:	4639      	mov	r1, r7
 800aba0:	4b8c      	ldr	r3, [pc, #560]	; (800add4 <_strtod_l+0xbcc>)
 800aba2:	2200      	movs	r2, #0
 800aba4:	f7f5 fd28 	bl	80005f8 <__aeabi_dmul>
 800aba8:	4606      	mov	r6, r0
 800abaa:	460f      	mov	r7, r1
 800abac:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800abb0:	9606      	str	r6, [sp, #24]
 800abb2:	9307      	str	r3, [sp, #28]
 800abb4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800abb8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800abbc:	4b86      	ldr	r3, [pc, #536]	; (800add8 <_strtod_l+0xbd0>)
 800abbe:	ea0a 0303 	and.w	r3, sl, r3
 800abc2:	930d      	str	r3, [sp, #52]	; 0x34
 800abc4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800abc6:	4b85      	ldr	r3, [pc, #532]	; (800addc <_strtod_l+0xbd4>)
 800abc8:	429a      	cmp	r2, r3
 800abca:	f040 8090 	bne.w	800acee <_strtod_l+0xae6>
 800abce:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800abd2:	ec49 8b10 	vmov	d0, r8, r9
 800abd6:	f7ff f9b9 	bl	8009f4c <__ulp>
 800abda:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800abde:	ec51 0b10 	vmov	r0, r1, d0
 800abe2:	f7f5 fd09 	bl	80005f8 <__aeabi_dmul>
 800abe6:	4642      	mov	r2, r8
 800abe8:	464b      	mov	r3, r9
 800abea:	f7f5 fb4f 	bl	800028c <__adddf3>
 800abee:	460b      	mov	r3, r1
 800abf0:	4979      	ldr	r1, [pc, #484]	; (800add8 <_strtod_l+0xbd0>)
 800abf2:	4a7b      	ldr	r2, [pc, #492]	; (800ade0 <_strtod_l+0xbd8>)
 800abf4:	4019      	ands	r1, r3
 800abf6:	4291      	cmp	r1, r2
 800abf8:	4680      	mov	r8, r0
 800abfa:	d944      	bls.n	800ac86 <_strtod_l+0xa7e>
 800abfc:	ee18 2a90 	vmov	r2, s17
 800ac00:	4b78      	ldr	r3, [pc, #480]	; (800ade4 <_strtod_l+0xbdc>)
 800ac02:	429a      	cmp	r2, r3
 800ac04:	d104      	bne.n	800ac10 <_strtod_l+0xa08>
 800ac06:	ee18 3a10 	vmov	r3, s16
 800ac0a:	3301      	adds	r3, #1
 800ac0c:	f43f ad40 	beq.w	800a690 <_strtod_l+0x488>
 800ac10:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 800ade4 <_strtod_l+0xbdc>
 800ac14:	f04f 38ff 	mov.w	r8, #4294967295
 800ac18:	9916      	ldr	r1, [sp, #88]	; 0x58
 800ac1a:	4620      	mov	r0, r4
 800ac1c:	f7fe fe6a 	bl	80098f4 <_Bfree>
 800ac20:	9905      	ldr	r1, [sp, #20]
 800ac22:	4620      	mov	r0, r4
 800ac24:	f7fe fe66 	bl	80098f4 <_Bfree>
 800ac28:	4659      	mov	r1, fp
 800ac2a:	4620      	mov	r0, r4
 800ac2c:	f7fe fe62 	bl	80098f4 <_Bfree>
 800ac30:	4629      	mov	r1, r5
 800ac32:	4620      	mov	r0, r4
 800ac34:	f7fe fe5e 	bl	80098f4 <_Bfree>
 800ac38:	e609      	b.n	800a84e <_strtod_l+0x646>
 800ac3a:	f1b8 0f01 	cmp.w	r8, #1
 800ac3e:	d103      	bne.n	800ac48 <_strtod_l+0xa40>
 800ac40:	f1b9 0f00 	cmp.w	r9, #0
 800ac44:	f43f ad95 	beq.w	800a772 <_strtod_l+0x56a>
 800ac48:	ed9f 7b55 	vldr	d7, [pc, #340]	; 800ada0 <_strtod_l+0xb98>
 800ac4c:	4f60      	ldr	r7, [pc, #384]	; (800add0 <_strtod_l+0xbc8>)
 800ac4e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800ac52:	2600      	movs	r6, #0
 800ac54:	e7ae      	b.n	800abb4 <_strtod_l+0x9ac>
 800ac56:	4f5f      	ldr	r7, [pc, #380]	; (800add4 <_strtod_l+0xbcc>)
 800ac58:	2600      	movs	r6, #0
 800ac5a:	e7a7      	b.n	800abac <_strtod_l+0x9a4>
 800ac5c:	4b5d      	ldr	r3, [pc, #372]	; (800add4 <_strtod_l+0xbcc>)
 800ac5e:	4630      	mov	r0, r6
 800ac60:	4639      	mov	r1, r7
 800ac62:	2200      	movs	r2, #0
 800ac64:	f7f5 fcc8 	bl	80005f8 <__aeabi_dmul>
 800ac68:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ac6a:	4606      	mov	r6, r0
 800ac6c:	460f      	mov	r7, r1
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d09c      	beq.n	800abac <_strtod_l+0x9a4>
 800ac72:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800ac76:	e79d      	b.n	800abb4 <_strtod_l+0x9ac>
 800ac78:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 800ada8 <_strtod_l+0xba0>
 800ac7c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800ac80:	ec57 6b17 	vmov	r6, r7, d7
 800ac84:	e796      	b.n	800abb4 <_strtod_l+0x9ac>
 800ac86:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800ac8a:	9b04      	ldr	r3, [sp, #16]
 800ac8c:	46ca      	mov	sl, r9
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d1c2      	bne.n	800ac18 <_strtod_l+0xa10>
 800ac92:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ac96:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ac98:	0d1b      	lsrs	r3, r3, #20
 800ac9a:	051b      	lsls	r3, r3, #20
 800ac9c:	429a      	cmp	r2, r3
 800ac9e:	d1bb      	bne.n	800ac18 <_strtod_l+0xa10>
 800aca0:	4630      	mov	r0, r6
 800aca2:	4639      	mov	r1, r7
 800aca4:	f7f5 fff0 	bl	8000c88 <__aeabi_d2lz>
 800aca8:	f7f5 fc78 	bl	800059c <__aeabi_l2d>
 800acac:	4602      	mov	r2, r0
 800acae:	460b      	mov	r3, r1
 800acb0:	4630      	mov	r0, r6
 800acb2:	4639      	mov	r1, r7
 800acb4:	f7f5 fae8 	bl	8000288 <__aeabi_dsub>
 800acb8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800acba:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800acbe:	ea43 0308 	orr.w	r3, r3, r8
 800acc2:	4313      	orrs	r3, r2
 800acc4:	4606      	mov	r6, r0
 800acc6:	460f      	mov	r7, r1
 800acc8:	d054      	beq.n	800ad74 <_strtod_l+0xb6c>
 800acca:	a339      	add	r3, pc, #228	; (adr r3, 800adb0 <_strtod_l+0xba8>)
 800accc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acd0:	f7f5 ff04 	bl	8000adc <__aeabi_dcmplt>
 800acd4:	2800      	cmp	r0, #0
 800acd6:	f47f ace5 	bne.w	800a6a4 <_strtod_l+0x49c>
 800acda:	a337      	add	r3, pc, #220	; (adr r3, 800adb8 <_strtod_l+0xbb0>)
 800acdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ace0:	4630      	mov	r0, r6
 800ace2:	4639      	mov	r1, r7
 800ace4:	f7f5 ff18 	bl	8000b18 <__aeabi_dcmpgt>
 800ace8:	2800      	cmp	r0, #0
 800acea:	d095      	beq.n	800ac18 <_strtod_l+0xa10>
 800acec:	e4da      	b.n	800a6a4 <_strtod_l+0x49c>
 800acee:	9b04      	ldr	r3, [sp, #16]
 800acf0:	b333      	cbz	r3, 800ad40 <_strtod_l+0xb38>
 800acf2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800acf4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800acf8:	d822      	bhi.n	800ad40 <_strtod_l+0xb38>
 800acfa:	a331      	add	r3, pc, #196	; (adr r3, 800adc0 <_strtod_l+0xbb8>)
 800acfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad00:	4630      	mov	r0, r6
 800ad02:	4639      	mov	r1, r7
 800ad04:	f7f5 fef4 	bl	8000af0 <__aeabi_dcmple>
 800ad08:	b1a0      	cbz	r0, 800ad34 <_strtod_l+0xb2c>
 800ad0a:	4639      	mov	r1, r7
 800ad0c:	4630      	mov	r0, r6
 800ad0e:	f7f5 ff4b 	bl	8000ba8 <__aeabi_d2uiz>
 800ad12:	2801      	cmp	r0, #1
 800ad14:	bf38      	it	cc
 800ad16:	2001      	movcc	r0, #1
 800ad18:	f7f5 fbf4 	bl	8000504 <__aeabi_ui2d>
 800ad1c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ad1e:	4606      	mov	r6, r0
 800ad20:	460f      	mov	r7, r1
 800ad22:	bb23      	cbnz	r3, 800ad6e <_strtod_l+0xb66>
 800ad24:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ad28:	9010      	str	r0, [sp, #64]	; 0x40
 800ad2a:	9311      	str	r3, [sp, #68]	; 0x44
 800ad2c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800ad30:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800ad34:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ad36:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ad38:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800ad3c:	1a9b      	subs	r3, r3, r2
 800ad3e:	930f      	str	r3, [sp, #60]	; 0x3c
 800ad40:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800ad44:	eeb0 0a48 	vmov.f32	s0, s16
 800ad48:	eef0 0a68 	vmov.f32	s1, s17
 800ad4c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800ad50:	f7ff f8fc 	bl	8009f4c <__ulp>
 800ad54:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800ad58:	ec53 2b10 	vmov	r2, r3, d0
 800ad5c:	f7f5 fc4c 	bl	80005f8 <__aeabi_dmul>
 800ad60:	ec53 2b18 	vmov	r2, r3, d8
 800ad64:	f7f5 fa92 	bl	800028c <__adddf3>
 800ad68:	4680      	mov	r8, r0
 800ad6a:	4689      	mov	r9, r1
 800ad6c:	e78d      	b.n	800ac8a <_strtod_l+0xa82>
 800ad6e:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800ad72:	e7db      	b.n	800ad2c <_strtod_l+0xb24>
 800ad74:	a314      	add	r3, pc, #80	; (adr r3, 800adc8 <_strtod_l+0xbc0>)
 800ad76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad7a:	f7f5 feaf 	bl	8000adc <__aeabi_dcmplt>
 800ad7e:	e7b3      	b.n	800ace8 <_strtod_l+0xae0>
 800ad80:	2300      	movs	r3, #0
 800ad82:	930a      	str	r3, [sp, #40]	; 0x28
 800ad84:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800ad86:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ad88:	6013      	str	r3, [r2, #0]
 800ad8a:	f7ff ba7c 	b.w	800a286 <_strtod_l+0x7e>
 800ad8e:	2a65      	cmp	r2, #101	; 0x65
 800ad90:	f43f ab75 	beq.w	800a47e <_strtod_l+0x276>
 800ad94:	2a45      	cmp	r2, #69	; 0x45
 800ad96:	f43f ab72 	beq.w	800a47e <_strtod_l+0x276>
 800ad9a:	2301      	movs	r3, #1
 800ad9c:	f7ff bbaa 	b.w	800a4f4 <_strtod_l+0x2ec>
 800ada0:	00000000 	.word	0x00000000
 800ada4:	bff00000 	.word	0xbff00000
 800ada8:	00000000 	.word	0x00000000
 800adac:	3ff00000 	.word	0x3ff00000
 800adb0:	94a03595 	.word	0x94a03595
 800adb4:	3fdfffff 	.word	0x3fdfffff
 800adb8:	35afe535 	.word	0x35afe535
 800adbc:	3fe00000 	.word	0x3fe00000
 800adc0:	ffc00000 	.word	0xffc00000
 800adc4:	41dfffff 	.word	0x41dfffff
 800adc8:	94a03595 	.word	0x94a03595
 800adcc:	3fcfffff 	.word	0x3fcfffff
 800add0:	3ff00000 	.word	0x3ff00000
 800add4:	3fe00000 	.word	0x3fe00000
 800add8:	7ff00000 	.word	0x7ff00000
 800addc:	7fe00000 	.word	0x7fe00000
 800ade0:	7c9fffff 	.word	0x7c9fffff
 800ade4:	7fefffff 	.word	0x7fefffff

0800ade8 <_strtod_r>:
 800ade8:	4b01      	ldr	r3, [pc, #4]	; (800adf0 <_strtod_r+0x8>)
 800adea:	f7ff ba0d 	b.w	800a208 <_strtod_l>
 800adee:	bf00      	nop
 800adf0:	20000088 	.word	0x20000088

0800adf4 <_strtol_l.constprop.0>:
 800adf4:	2b01      	cmp	r3, #1
 800adf6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800adfa:	d001      	beq.n	800ae00 <_strtol_l.constprop.0+0xc>
 800adfc:	2b24      	cmp	r3, #36	; 0x24
 800adfe:	d906      	bls.n	800ae0e <_strtol_l.constprop.0+0x1a>
 800ae00:	f7fd fd8c 	bl	800891c <__errno>
 800ae04:	2316      	movs	r3, #22
 800ae06:	6003      	str	r3, [r0, #0]
 800ae08:	2000      	movs	r0, #0
 800ae0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae0e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800aef4 <_strtol_l.constprop.0+0x100>
 800ae12:	460d      	mov	r5, r1
 800ae14:	462e      	mov	r6, r5
 800ae16:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ae1a:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800ae1e:	f017 0708 	ands.w	r7, r7, #8
 800ae22:	d1f7      	bne.n	800ae14 <_strtol_l.constprop.0+0x20>
 800ae24:	2c2d      	cmp	r4, #45	; 0x2d
 800ae26:	d132      	bne.n	800ae8e <_strtol_l.constprop.0+0x9a>
 800ae28:	782c      	ldrb	r4, [r5, #0]
 800ae2a:	2701      	movs	r7, #1
 800ae2c:	1cb5      	adds	r5, r6, #2
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d05b      	beq.n	800aeea <_strtol_l.constprop.0+0xf6>
 800ae32:	2b10      	cmp	r3, #16
 800ae34:	d109      	bne.n	800ae4a <_strtol_l.constprop.0+0x56>
 800ae36:	2c30      	cmp	r4, #48	; 0x30
 800ae38:	d107      	bne.n	800ae4a <_strtol_l.constprop.0+0x56>
 800ae3a:	782c      	ldrb	r4, [r5, #0]
 800ae3c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800ae40:	2c58      	cmp	r4, #88	; 0x58
 800ae42:	d14d      	bne.n	800aee0 <_strtol_l.constprop.0+0xec>
 800ae44:	786c      	ldrb	r4, [r5, #1]
 800ae46:	2310      	movs	r3, #16
 800ae48:	3502      	adds	r5, #2
 800ae4a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800ae4e:	f108 38ff 	add.w	r8, r8, #4294967295
 800ae52:	f04f 0e00 	mov.w	lr, #0
 800ae56:	fbb8 f9f3 	udiv	r9, r8, r3
 800ae5a:	4676      	mov	r6, lr
 800ae5c:	fb03 8a19 	mls	sl, r3, r9, r8
 800ae60:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800ae64:	f1bc 0f09 	cmp.w	ip, #9
 800ae68:	d816      	bhi.n	800ae98 <_strtol_l.constprop.0+0xa4>
 800ae6a:	4664      	mov	r4, ip
 800ae6c:	42a3      	cmp	r3, r4
 800ae6e:	dd24      	ble.n	800aeba <_strtol_l.constprop.0+0xc6>
 800ae70:	f1be 3fff 	cmp.w	lr, #4294967295
 800ae74:	d008      	beq.n	800ae88 <_strtol_l.constprop.0+0x94>
 800ae76:	45b1      	cmp	r9, r6
 800ae78:	d31c      	bcc.n	800aeb4 <_strtol_l.constprop.0+0xc0>
 800ae7a:	d101      	bne.n	800ae80 <_strtol_l.constprop.0+0x8c>
 800ae7c:	45a2      	cmp	sl, r4
 800ae7e:	db19      	blt.n	800aeb4 <_strtol_l.constprop.0+0xc0>
 800ae80:	fb06 4603 	mla	r6, r6, r3, r4
 800ae84:	f04f 0e01 	mov.w	lr, #1
 800ae88:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ae8c:	e7e8      	b.n	800ae60 <_strtol_l.constprop.0+0x6c>
 800ae8e:	2c2b      	cmp	r4, #43	; 0x2b
 800ae90:	bf04      	itt	eq
 800ae92:	782c      	ldrbeq	r4, [r5, #0]
 800ae94:	1cb5      	addeq	r5, r6, #2
 800ae96:	e7ca      	b.n	800ae2e <_strtol_l.constprop.0+0x3a>
 800ae98:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800ae9c:	f1bc 0f19 	cmp.w	ip, #25
 800aea0:	d801      	bhi.n	800aea6 <_strtol_l.constprop.0+0xb2>
 800aea2:	3c37      	subs	r4, #55	; 0x37
 800aea4:	e7e2      	b.n	800ae6c <_strtol_l.constprop.0+0x78>
 800aea6:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800aeaa:	f1bc 0f19 	cmp.w	ip, #25
 800aeae:	d804      	bhi.n	800aeba <_strtol_l.constprop.0+0xc6>
 800aeb0:	3c57      	subs	r4, #87	; 0x57
 800aeb2:	e7db      	b.n	800ae6c <_strtol_l.constprop.0+0x78>
 800aeb4:	f04f 3eff 	mov.w	lr, #4294967295
 800aeb8:	e7e6      	b.n	800ae88 <_strtol_l.constprop.0+0x94>
 800aeba:	f1be 3fff 	cmp.w	lr, #4294967295
 800aebe:	d105      	bne.n	800aecc <_strtol_l.constprop.0+0xd8>
 800aec0:	2322      	movs	r3, #34	; 0x22
 800aec2:	6003      	str	r3, [r0, #0]
 800aec4:	4646      	mov	r6, r8
 800aec6:	b942      	cbnz	r2, 800aeda <_strtol_l.constprop.0+0xe6>
 800aec8:	4630      	mov	r0, r6
 800aeca:	e79e      	b.n	800ae0a <_strtol_l.constprop.0+0x16>
 800aecc:	b107      	cbz	r7, 800aed0 <_strtol_l.constprop.0+0xdc>
 800aece:	4276      	negs	r6, r6
 800aed0:	2a00      	cmp	r2, #0
 800aed2:	d0f9      	beq.n	800aec8 <_strtol_l.constprop.0+0xd4>
 800aed4:	f1be 0f00 	cmp.w	lr, #0
 800aed8:	d000      	beq.n	800aedc <_strtol_l.constprop.0+0xe8>
 800aeda:	1e69      	subs	r1, r5, #1
 800aedc:	6011      	str	r1, [r2, #0]
 800aede:	e7f3      	b.n	800aec8 <_strtol_l.constprop.0+0xd4>
 800aee0:	2430      	movs	r4, #48	; 0x30
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d1b1      	bne.n	800ae4a <_strtol_l.constprop.0+0x56>
 800aee6:	2308      	movs	r3, #8
 800aee8:	e7af      	b.n	800ae4a <_strtol_l.constprop.0+0x56>
 800aeea:	2c30      	cmp	r4, #48	; 0x30
 800aeec:	d0a5      	beq.n	800ae3a <_strtol_l.constprop.0+0x46>
 800aeee:	230a      	movs	r3, #10
 800aef0:	e7ab      	b.n	800ae4a <_strtol_l.constprop.0+0x56>
 800aef2:	bf00      	nop
 800aef4:	0800d011 	.word	0x0800d011

0800aef8 <_strtol_r>:
 800aef8:	f7ff bf7c 	b.w	800adf4 <_strtol_l.constprop.0>

0800aefc <__ssputs_r>:
 800aefc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af00:	688e      	ldr	r6, [r1, #8]
 800af02:	461f      	mov	r7, r3
 800af04:	42be      	cmp	r6, r7
 800af06:	680b      	ldr	r3, [r1, #0]
 800af08:	4682      	mov	sl, r0
 800af0a:	460c      	mov	r4, r1
 800af0c:	4690      	mov	r8, r2
 800af0e:	d82c      	bhi.n	800af6a <__ssputs_r+0x6e>
 800af10:	898a      	ldrh	r2, [r1, #12]
 800af12:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800af16:	d026      	beq.n	800af66 <__ssputs_r+0x6a>
 800af18:	6965      	ldr	r5, [r4, #20]
 800af1a:	6909      	ldr	r1, [r1, #16]
 800af1c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800af20:	eba3 0901 	sub.w	r9, r3, r1
 800af24:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800af28:	1c7b      	adds	r3, r7, #1
 800af2a:	444b      	add	r3, r9
 800af2c:	106d      	asrs	r5, r5, #1
 800af2e:	429d      	cmp	r5, r3
 800af30:	bf38      	it	cc
 800af32:	461d      	movcc	r5, r3
 800af34:	0553      	lsls	r3, r2, #21
 800af36:	d527      	bpl.n	800af88 <__ssputs_r+0x8c>
 800af38:	4629      	mov	r1, r5
 800af3a:	f7fe fc0f 	bl	800975c <_malloc_r>
 800af3e:	4606      	mov	r6, r0
 800af40:	b360      	cbz	r0, 800af9c <__ssputs_r+0xa0>
 800af42:	6921      	ldr	r1, [r4, #16]
 800af44:	464a      	mov	r2, r9
 800af46:	f000 fa1b 	bl	800b380 <memcpy>
 800af4a:	89a3      	ldrh	r3, [r4, #12]
 800af4c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800af50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800af54:	81a3      	strh	r3, [r4, #12]
 800af56:	6126      	str	r6, [r4, #16]
 800af58:	6165      	str	r5, [r4, #20]
 800af5a:	444e      	add	r6, r9
 800af5c:	eba5 0509 	sub.w	r5, r5, r9
 800af60:	6026      	str	r6, [r4, #0]
 800af62:	60a5      	str	r5, [r4, #8]
 800af64:	463e      	mov	r6, r7
 800af66:	42be      	cmp	r6, r7
 800af68:	d900      	bls.n	800af6c <__ssputs_r+0x70>
 800af6a:	463e      	mov	r6, r7
 800af6c:	6820      	ldr	r0, [r4, #0]
 800af6e:	4632      	mov	r2, r6
 800af70:	4641      	mov	r1, r8
 800af72:	f000 f9c9 	bl	800b308 <memmove>
 800af76:	68a3      	ldr	r3, [r4, #8]
 800af78:	1b9b      	subs	r3, r3, r6
 800af7a:	60a3      	str	r3, [r4, #8]
 800af7c:	6823      	ldr	r3, [r4, #0]
 800af7e:	4433      	add	r3, r6
 800af80:	6023      	str	r3, [r4, #0]
 800af82:	2000      	movs	r0, #0
 800af84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af88:	462a      	mov	r2, r5
 800af8a:	f000 fdae 	bl	800baea <_realloc_r>
 800af8e:	4606      	mov	r6, r0
 800af90:	2800      	cmp	r0, #0
 800af92:	d1e0      	bne.n	800af56 <__ssputs_r+0x5a>
 800af94:	6921      	ldr	r1, [r4, #16]
 800af96:	4650      	mov	r0, sl
 800af98:	f7fe fb6c 	bl	8009674 <_free_r>
 800af9c:	230c      	movs	r3, #12
 800af9e:	f8ca 3000 	str.w	r3, [sl]
 800afa2:	89a3      	ldrh	r3, [r4, #12]
 800afa4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800afa8:	81a3      	strh	r3, [r4, #12]
 800afaa:	f04f 30ff 	mov.w	r0, #4294967295
 800afae:	e7e9      	b.n	800af84 <__ssputs_r+0x88>

0800afb0 <_svfiprintf_r>:
 800afb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afb4:	4698      	mov	r8, r3
 800afb6:	898b      	ldrh	r3, [r1, #12]
 800afb8:	061b      	lsls	r3, r3, #24
 800afba:	b09d      	sub	sp, #116	; 0x74
 800afbc:	4607      	mov	r7, r0
 800afbe:	460d      	mov	r5, r1
 800afc0:	4614      	mov	r4, r2
 800afc2:	d50e      	bpl.n	800afe2 <_svfiprintf_r+0x32>
 800afc4:	690b      	ldr	r3, [r1, #16]
 800afc6:	b963      	cbnz	r3, 800afe2 <_svfiprintf_r+0x32>
 800afc8:	2140      	movs	r1, #64	; 0x40
 800afca:	f7fe fbc7 	bl	800975c <_malloc_r>
 800afce:	6028      	str	r0, [r5, #0]
 800afd0:	6128      	str	r0, [r5, #16]
 800afd2:	b920      	cbnz	r0, 800afde <_svfiprintf_r+0x2e>
 800afd4:	230c      	movs	r3, #12
 800afd6:	603b      	str	r3, [r7, #0]
 800afd8:	f04f 30ff 	mov.w	r0, #4294967295
 800afdc:	e0d0      	b.n	800b180 <_svfiprintf_r+0x1d0>
 800afde:	2340      	movs	r3, #64	; 0x40
 800afe0:	616b      	str	r3, [r5, #20]
 800afe2:	2300      	movs	r3, #0
 800afe4:	9309      	str	r3, [sp, #36]	; 0x24
 800afe6:	2320      	movs	r3, #32
 800afe8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800afec:	f8cd 800c 	str.w	r8, [sp, #12]
 800aff0:	2330      	movs	r3, #48	; 0x30
 800aff2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800b198 <_svfiprintf_r+0x1e8>
 800aff6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800affa:	f04f 0901 	mov.w	r9, #1
 800affe:	4623      	mov	r3, r4
 800b000:	469a      	mov	sl, r3
 800b002:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b006:	b10a      	cbz	r2, 800b00c <_svfiprintf_r+0x5c>
 800b008:	2a25      	cmp	r2, #37	; 0x25
 800b00a:	d1f9      	bne.n	800b000 <_svfiprintf_r+0x50>
 800b00c:	ebba 0b04 	subs.w	fp, sl, r4
 800b010:	d00b      	beq.n	800b02a <_svfiprintf_r+0x7a>
 800b012:	465b      	mov	r3, fp
 800b014:	4622      	mov	r2, r4
 800b016:	4629      	mov	r1, r5
 800b018:	4638      	mov	r0, r7
 800b01a:	f7ff ff6f 	bl	800aefc <__ssputs_r>
 800b01e:	3001      	adds	r0, #1
 800b020:	f000 80a9 	beq.w	800b176 <_svfiprintf_r+0x1c6>
 800b024:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b026:	445a      	add	r2, fp
 800b028:	9209      	str	r2, [sp, #36]	; 0x24
 800b02a:	f89a 3000 	ldrb.w	r3, [sl]
 800b02e:	2b00      	cmp	r3, #0
 800b030:	f000 80a1 	beq.w	800b176 <_svfiprintf_r+0x1c6>
 800b034:	2300      	movs	r3, #0
 800b036:	f04f 32ff 	mov.w	r2, #4294967295
 800b03a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b03e:	f10a 0a01 	add.w	sl, sl, #1
 800b042:	9304      	str	r3, [sp, #16]
 800b044:	9307      	str	r3, [sp, #28]
 800b046:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b04a:	931a      	str	r3, [sp, #104]	; 0x68
 800b04c:	4654      	mov	r4, sl
 800b04e:	2205      	movs	r2, #5
 800b050:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b054:	4850      	ldr	r0, [pc, #320]	; (800b198 <_svfiprintf_r+0x1e8>)
 800b056:	f7f5 f8bb 	bl	80001d0 <memchr>
 800b05a:	9a04      	ldr	r2, [sp, #16]
 800b05c:	b9d8      	cbnz	r0, 800b096 <_svfiprintf_r+0xe6>
 800b05e:	06d0      	lsls	r0, r2, #27
 800b060:	bf44      	itt	mi
 800b062:	2320      	movmi	r3, #32
 800b064:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b068:	0711      	lsls	r1, r2, #28
 800b06a:	bf44      	itt	mi
 800b06c:	232b      	movmi	r3, #43	; 0x2b
 800b06e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b072:	f89a 3000 	ldrb.w	r3, [sl]
 800b076:	2b2a      	cmp	r3, #42	; 0x2a
 800b078:	d015      	beq.n	800b0a6 <_svfiprintf_r+0xf6>
 800b07a:	9a07      	ldr	r2, [sp, #28]
 800b07c:	4654      	mov	r4, sl
 800b07e:	2000      	movs	r0, #0
 800b080:	f04f 0c0a 	mov.w	ip, #10
 800b084:	4621      	mov	r1, r4
 800b086:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b08a:	3b30      	subs	r3, #48	; 0x30
 800b08c:	2b09      	cmp	r3, #9
 800b08e:	d94d      	bls.n	800b12c <_svfiprintf_r+0x17c>
 800b090:	b1b0      	cbz	r0, 800b0c0 <_svfiprintf_r+0x110>
 800b092:	9207      	str	r2, [sp, #28]
 800b094:	e014      	b.n	800b0c0 <_svfiprintf_r+0x110>
 800b096:	eba0 0308 	sub.w	r3, r0, r8
 800b09a:	fa09 f303 	lsl.w	r3, r9, r3
 800b09e:	4313      	orrs	r3, r2
 800b0a0:	9304      	str	r3, [sp, #16]
 800b0a2:	46a2      	mov	sl, r4
 800b0a4:	e7d2      	b.n	800b04c <_svfiprintf_r+0x9c>
 800b0a6:	9b03      	ldr	r3, [sp, #12]
 800b0a8:	1d19      	adds	r1, r3, #4
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	9103      	str	r1, [sp, #12]
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	bfbb      	ittet	lt
 800b0b2:	425b      	neglt	r3, r3
 800b0b4:	f042 0202 	orrlt.w	r2, r2, #2
 800b0b8:	9307      	strge	r3, [sp, #28]
 800b0ba:	9307      	strlt	r3, [sp, #28]
 800b0bc:	bfb8      	it	lt
 800b0be:	9204      	strlt	r2, [sp, #16]
 800b0c0:	7823      	ldrb	r3, [r4, #0]
 800b0c2:	2b2e      	cmp	r3, #46	; 0x2e
 800b0c4:	d10c      	bne.n	800b0e0 <_svfiprintf_r+0x130>
 800b0c6:	7863      	ldrb	r3, [r4, #1]
 800b0c8:	2b2a      	cmp	r3, #42	; 0x2a
 800b0ca:	d134      	bne.n	800b136 <_svfiprintf_r+0x186>
 800b0cc:	9b03      	ldr	r3, [sp, #12]
 800b0ce:	1d1a      	adds	r2, r3, #4
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	9203      	str	r2, [sp, #12]
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	bfb8      	it	lt
 800b0d8:	f04f 33ff 	movlt.w	r3, #4294967295
 800b0dc:	3402      	adds	r4, #2
 800b0de:	9305      	str	r3, [sp, #20]
 800b0e0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800b1a8 <_svfiprintf_r+0x1f8>
 800b0e4:	7821      	ldrb	r1, [r4, #0]
 800b0e6:	2203      	movs	r2, #3
 800b0e8:	4650      	mov	r0, sl
 800b0ea:	f7f5 f871 	bl	80001d0 <memchr>
 800b0ee:	b138      	cbz	r0, 800b100 <_svfiprintf_r+0x150>
 800b0f0:	9b04      	ldr	r3, [sp, #16]
 800b0f2:	eba0 000a 	sub.w	r0, r0, sl
 800b0f6:	2240      	movs	r2, #64	; 0x40
 800b0f8:	4082      	lsls	r2, r0
 800b0fa:	4313      	orrs	r3, r2
 800b0fc:	3401      	adds	r4, #1
 800b0fe:	9304      	str	r3, [sp, #16]
 800b100:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b104:	4825      	ldr	r0, [pc, #148]	; (800b19c <_svfiprintf_r+0x1ec>)
 800b106:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b10a:	2206      	movs	r2, #6
 800b10c:	f7f5 f860 	bl	80001d0 <memchr>
 800b110:	2800      	cmp	r0, #0
 800b112:	d038      	beq.n	800b186 <_svfiprintf_r+0x1d6>
 800b114:	4b22      	ldr	r3, [pc, #136]	; (800b1a0 <_svfiprintf_r+0x1f0>)
 800b116:	bb1b      	cbnz	r3, 800b160 <_svfiprintf_r+0x1b0>
 800b118:	9b03      	ldr	r3, [sp, #12]
 800b11a:	3307      	adds	r3, #7
 800b11c:	f023 0307 	bic.w	r3, r3, #7
 800b120:	3308      	adds	r3, #8
 800b122:	9303      	str	r3, [sp, #12]
 800b124:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b126:	4433      	add	r3, r6
 800b128:	9309      	str	r3, [sp, #36]	; 0x24
 800b12a:	e768      	b.n	800affe <_svfiprintf_r+0x4e>
 800b12c:	fb0c 3202 	mla	r2, ip, r2, r3
 800b130:	460c      	mov	r4, r1
 800b132:	2001      	movs	r0, #1
 800b134:	e7a6      	b.n	800b084 <_svfiprintf_r+0xd4>
 800b136:	2300      	movs	r3, #0
 800b138:	3401      	adds	r4, #1
 800b13a:	9305      	str	r3, [sp, #20]
 800b13c:	4619      	mov	r1, r3
 800b13e:	f04f 0c0a 	mov.w	ip, #10
 800b142:	4620      	mov	r0, r4
 800b144:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b148:	3a30      	subs	r2, #48	; 0x30
 800b14a:	2a09      	cmp	r2, #9
 800b14c:	d903      	bls.n	800b156 <_svfiprintf_r+0x1a6>
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d0c6      	beq.n	800b0e0 <_svfiprintf_r+0x130>
 800b152:	9105      	str	r1, [sp, #20]
 800b154:	e7c4      	b.n	800b0e0 <_svfiprintf_r+0x130>
 800b156:	fb0c 2101 	mla	r1, ip, r1, r2
 800b15a:	4604      	mov	r4, r0
 800b15c:	2301      	movs	r3, #1
 800b15e:	e7f0      	b.n	800b142 <_svfiprintf_r+0x192>
 800b160:	ab03      	add	r3, sp, #12
 800b162:	9300      	str	r3, [sp, #0]
 800b164:	462a      	mov	r2, r5
 800b166:	4b0f      	ldr	r3, [pc, #60]	; (800b1a4 <_svfiprintf_r+0x1f4>)
 800b168:	a904      	add	r1, sp, #16
 800b16a:	4638      	mov	r0, r7
 800b16c:	f7fc fc66 	bl	8007a3c <_printf_float>
 800b170:	1c42      	adds	r2, r0, #1
 800b172:	4606      	mov	r6, r0
 800b174:	d1d6      	bne.n	800b124 <_svfiprintf_r+0x174>
 800b176:	89ab      	ldrh	r3, [r5, #12]
 800b178:	065b      	lsls	r3, r3, #25
 800b17a:	f53f af2d 	bmi.w	800afd8 <_svfiprintf_r+0x28>
 800b17e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b180:	b01d      	add	sp, #116	; 0x74
 800b182:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b186:	ab03      	add	r3, sp, #12
 800b188:	9300      	str	r3, [sp, #0]
 800b18a:	462a      	mov	r2, r5
 800b18c:	4b05      	ldr	r3, [pc, #20]	; (800b1a4 <_svfiprintf_r+0x1f4>)
 800b18e:	a904      	add	r1, sp, #16
 800b190:	4638      	mov	r0, r7
 800b192:	f7fc fef7 	bl	8007f84 <_printf_i>
 800b196:	e7eb      	b.n	800b170 <_svfiprintf_r+0x1c0>
 800b198:	0800d111 	.word	0x0800d111
 800b19c:	0800d11b 	.word	0x0800d11b
 800b1a0:	08007a3d 	.word	0x08007a3d
 800b1a4:	0800aefd 	.word	0x0800aefd
 800b1a8:	0800d117 	.word	0x0800d117

0800b1ac <__sflush_r>:
 800b1ac:	898a      	ldrh	r2, [r1, #12]
 800b1ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b1b2:	4605      	mov	r5, r0
 800b1b4:	0710      	lsls	r0, r2, #28
 800b1b6:	460c      	mov	r4, r1
 800b1b8:	d458      	bmi.n	800b26c <__sflush_r+0xc0>
 800b1ba:	684b      	ldr	r3, [r1, #4]
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	dc05      	bgt.n	800b1cc <__sflush_r+0x20>
 800b1c0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	dc02      	bgt.n	800b1cc <__sflush_r+0x20>
 800b1c6:	2000      	movs	r0, #0
 800b1c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b1cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b1ce:	2e00      	cmp	r6, #0
 800b1d0:	d0f9      	beq.n	800b1c6 <__sflush_r+0x1a>
 800b1d2:	2300      	movs	r3, #0
 800b1d4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b1d8:	682f      	ldr	r7, [r5, #0]
 800b1da:	6a21      	ldr	r1, [r4, #32]
 800b1dc:	602b      	str	r3, [r5, #0]
 800b1de:	d032      	beq.n	800b246 <__sflush_r+0x9a>
 800b1e0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b1e2:	89a3      	ldrh	r3, [r4, #12]
 800b1e4:	075a      	lsls	r2, r3, #29
 800b1e6:	d505      	bpl.n	800b1f4 <__sflush_r+0x48>
 800b1e8:	6863      	ldr	r3, [r4, #4]
 800b1ea:	1ac0      	subs	r0, r0, r3
 800b1ec:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b1ee:	b10b      	cbz	r3, 800b1f4 <__sflush_r+0x48>
 800b1f0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b1f2:	1ac0      	subs	r0, r0, r3
 800b1f4:	2300      	movs	r3, #0
 800b1f6:	4602      	mov	r2, r0
 800b1f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b1fa:	6a21      	ldr	r1, [r4, #32]
 800b1fc:	4628      	mov	r0, r5
 800b1fe:	47b0      	blx	r6
 800b200:	1c43      	adds	r3, r0, #1
 800b202:	89a3      	ldrh	r3, [r4, #12]
 800b204:	d106      	bne.n	800b214 <__sflush_r+0x68>
 800b206:	6829      	ldr	r1, [r5, #0]
 800b208:	291d      	cmp	r1, #29
 800b20a:	d82b      	bhi.n	800b264 <__sflush_r+0xb8>
 800b20c:	4a29      	ldr	r2, [pc, #164]	; (800b2b4 <__sflush_r+0x108>)
 800b20e:	410a      	asrs	r2, r1
 800b210:	07d6      	lsls	r6, r2, #31
 800b212:	d427      	bmi.n	800b264 <__sflush_r+0xb8>
 800b214:	2200      	movs	r2, #0
 800b216:	6062      	str	r2, [r4, #4]
 800b218:	04d9      	lsls	r1, r3, #19
 800b21a:	6922      	ldr	r2, [r4, #16]
 800b21c:	6022      	str	r2, [r4, #0]
 800b21e:	d504      	bpl.n	800b22a <__sflush_r+0x7e>
 800b220:	1c42      	adds	r2, r0, #1
 800b222:	d101      	bne.n	800b228 <__sflush_r+0x7c>
 800b224:	682b      	ldr	r3, [r5, #0]
 800b226:	b903      	cbnz	r3, 800b22a <__sflush_r+0x7e>
 800b228:	6560      	str	r0, [r4, #84]	; 0x54
 800b22a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b22c:	602f      	str	r7, [r5, #0]
 800b22e:	2900      	cmp	r1, #0
 800b230:	d0c9      	beq.n	800b1c6 <__sflush_r+0x1a>
 800b232:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b236:	4299      	cmp	r1, r3
 800b238:	d002      	beq.n	800b240 <__sflush_r+0x94>
 800b23a:	4628      	mov	r0, r5
 800b23c:	f7fe fa1a 	bl	8009674 <_free_r>
 800b240:	2000      	movs	r0, #0
 800b242:	6360      	str	r0, [r4, #52]	; 0x34
 800b244:	e7c0      	b.n	800b1c8 <__sflush_r+0x1c>
 800b246:	2301      	movs	r3, #1
 800b248:	4628      	mov	r0, r5
 800b24a:	47b0      	blx	r6
 800b24c:	1c41      	adds	r1, r0, #1
 800b24e:	d1c8      	bne.n	800b1e2 <__sflush_r+0x36>
 800b250:	682b      	ldr	r3, [r5, #0]
 800b252:	2b00      	cmp	r3, #0
 800b254:	d0c5      	beq.n	800b1e2 <__sflush_r+0x36>
 800b256:	2b1d      	cmp	r3, #29
 800b258:	d001      	beq.n	800b25e <__sflush_r+0xb2>
 800b25a:	2b16      	cmp	r3, #22
 800b25c:	d101      	bne.n	800b262 <__sflush_r+0xb6>
 800b25e:	602f      	str	r7, [r5, #0]
 800b260:	e7b1      	b.n	800b1c6 <__sflush_r+0x1a>
 800b262:	89a3      	ldrh	r3, [r4, #12]
 800b264:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b268:	81a3      	strh	r3, [r4, #12]
 800b26a:	e7ad      	b.n	800b1c8 <__sflush_r+0x1c>
 800b26c:	690f      	ldr	r7, [r1, #16]
 800b26e:	2f00      	cmp	r7, #0
 800b270:	d0a9      	beq.n	800b1c6 <__sflush_r+0x1a>
 800b272:	0793      	lsls	r3, r2, #30
 800b274:	680e      	ldr	r6, [r1, #0]
 800b276:	bf08      	it	eq
 800b278:	694b      	ldreq	r3, [r1, #20]
 800b27a:	600f      	str	r7, [r1, #0]
 800b27c:	bf18      	it	ne
 800b27e:	2300      	movne	r3, #0
 800b280:	eba6 0807 	sub.w	r8, r6, r7
 800b284:	608b      	str	r3, [r1, #8]
 800b286:	f1b8 0f00 	cmp.w	r8, #0
 800b28a:	dd9c      	ble.n	800b1c6 <__sflush_r+0x1a>
 800b28c:	6a21      	ldr	r1, [r4, #32]
 800b28e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b290:	4643      	mov	r3, r8
 800b292:	463a      	mov	r2, r7
 800b294:	4628      	mov	r0, r5
 800b296:	47b0      	blx	r6
 800b298:	2800      	cmp	r0, #0
 800b29a:	dc06      	bgt.n	800b2aa <__sflush_r+0xfe>
 800b29c:	89a3      	ldrh	r3, [r4, #12]
 800b29e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b2a2:	81a3      	strh	r3, [r4, #12]
 800b2a4:	f04f 30ff 	mov.w	r0, #4294967295
 800b2a8:	e78e      	b.n	800b1c8 <__sflush_r+0x1c>
 800b2aa:	4407      	add	r7, r0
 800b2ac:	eba8 0800 	sub.w	r8, r8, r0
 800b2b0:	e7e9      	b.n	800b286 <__sflush_r+0xda>
 800b2b2:	bf00      	nop
 800b2b4:	dfbffffe 	.word	0xdfbffffe

0800b2b8 <_fflush_r>:
 800b2b8:	b538      	push	{r3, r4, r5, lr}
 800b2ba:	690b      	ldr	r3, [r1, #16]
 800b2bc:	4605      	mov	r5, r0
 800b2be:	460c      	mov	r4, r1
 800b2c0:	b913      	cbnz	r3, 800b2c8 <_fflush_r+0x10>
 800b2c2:	2500      	movs	r5, #0
 800b2c4:	4628      	mov	r0, r5
 800b2c6:	bd38      	pop	{r3, r4, r5, pc}
 800b2c8:	b118      	cbz	r0, 800b2d2 <_fflush_r+0x1a>
 800b2ca:	6a03      	ldr	r3, [r0, #32]
 800b2cc:	b90b      	cbnz	r3, 800b2d2 <_fflush_r+0x1a>
 800b2ce:	f7fd fa05 	bl	80086dc <__sinit>
 800b2d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d0f3      	beq.n	800b2c2 <_fflush_r+0xa>
 800b2da:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b2dc:	07d0      	lsls	r0, r2, #31
 800b2de:	d404      	bmi.n	800b2ea <_fflush_r+0x32>
 800b2e0:	0599      	lsls	r1, r3, #22
 800b2e2:	d402      	bmi.n	800b2ea <_fflush_r+0x32>
 800b2e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b2e6:	f7fd fb43 	bl	8008970 <__retarget_lock_acquire_recursive>
 800b2ea:	4628      	mov	r0, r5
 800b2ec:	4621      	mov	r1, r4
 800b2ee:	f7ff ff5d 	bl	800b1ac <__sflush_r>
 800b2f2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b2f4:	07da      	lsls	r2, r3, #31
 800b2f6:	4605      	mov	r5, r0
 800b2f8:	d4e4      	bmi.n	800b2c4 <_fflush_r+0xc>
 800b2fa:	89a3      	ldrh	r3, [r4, #12]
 800b2fc:	059b      	lsls	r3, r3, #22
 800b2fe:	d4e1      	bmi.n	800b2c4 <_fflush_r+0xc>
 800b300:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b302:	f7fd fb36 	bl	8008972 <__retarget_lock_release_recursive>
 800b306:	e7dd      	b.n	800b2c4 <_fflush_r+0xc>

0800b308 <memmove>:
 800b308:	4288      	cmp	r0, r1
 800b30a:	b510      	push	{r4, lr}
 800b30c:	eb01 0402 	add.w	r4, r1, r2
 800b310:	d902      	bls.n	800b318 <memmove+0x10>
 800b312:	4284      	cmp	r4, r0
 800b314:	4623      	mov	r3, r4
 800b316:	d807      	bhi.n	800b328 <memmove+0x20>
 800b318:	1e43      	subs	r3, r0, #1
 800b31a:	42a1      	cmp	r1, r4
 800b31c:	d008      	beq.n	800b330 <memmove+0x28>
 800b31e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b322:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b326:	e7f8      	b.n	800b31a <memmove+0x12>
 800b328:	4402      	add	r2, r0
 800b32a:	4601      	mov	r1, r0
 800b32c:	428a      	cmp	r2, r1
 800b32e:	d100      	bne.n	800b332 <memmove+0x2a>
 800b330:	bd10      	pop	{r4, pc}
 800b332:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b336:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b33a:	e7f7      	b.n	800b32c <memmove+0x24>

0800b33c <strncmp>:
 800b33c:	b510      	push	{r4, lr}
 800b33e:	b16a      	cbz	r2, 800b35c <strncmp+0x20>
 800b340:	3901      	subs	r1, #1
 800b342:	1884      	adds	r4, r0, r2
 800b344:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b348:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800b34c:	429a      	cmp	r2, r3
 800b34e:	d103      	bne.n	800b358 <strncmp+0x1c>
 800b350:	42a0      	cmp	r0, r4
 800b352:	d001      	beq.n	800b358 <strncmp+0x1c>
 800b354:	2a00      	cmp	r2, #0
 800b356:	d1f5      	bne.n	800b344 <strncmp+0x8>
 800b358:	1ad0      	subs	r0, r2, r3
 800b35a:	bd10      	pop	{r4, pc}
 800b35c:	4610      	mov	r0, r2
 800b35e:	e7fc      	b.n	800b35a <strncmp+0x1e>

0800b360 <_sbrk_r>:
 800b360:	b538      	push	{r3, r4, r5, lr}
 800b362:	4d06      	ldr	r5, [pc, #24]	; (800b37c <_sbrk_r+0x1c>)
 800b364:	2300      	movs	r3, #0
 800b366:	4604      	mov	r4, r0
 800b368:	4608      	mov	r0, r1
 800b36a:	602b      	str	r3, [r5, #0]
 800b36c:	f7f6 fd2e 	bl	8001dcc <_sbrk>
 800b370:	1c43      	adds	r3, r0, #1
 800b372:	d102      	bne.n	800b37a <_sbrk_r+0x1a>
 800b374:	682b      	ldr	r3, [r5, #0]
 800b376:	b103      	cbz	r3, 800b37a <_sbrk_r+0x1a>
 800b378:	6023      	str	r3, [r4, #0]
 800b37a:	bd38      	pop	{r3, r4, r5, pc}
 800b37c:	200006c4 	.word	0x200006c4

0800b380 <memcpy>:
 800b380:	440a      	add	r2, r1
 800b382:	4291      	cmp	r1, r2
 800b384:	f100 33ff 	add.w	r3, r0, #4294967295
 800b388:	d100      	bne.n	800b38c <memcpy+0xc>
 800b38a:	4770      	bx	lr
 800b38c:	b510      	push	{r4, lr}
 800b38e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b392:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b396:	4291      	cmp	r1, r2
 800b398:	d1f9      	bne.n	800b38e <memcpy+0xe>
 800b39a:	bd10      	pop	{r4, pc}
 800b39c:	0000      	movs	r0, r0
	...

0800b3a0 <nan>:
 800b3a0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800b3a8 <nan+0x8>
 800b3a4:	4770      	bx	lr
 800b3a6:	bf00      	nop
 800b3a8:	00000000 	.word	0x00000000
 800b3ac:	7ff80000 	.word	0x7ff80000

0800b3b0 <__assert_func>:
 800b3b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b3b2:	4614      	mov	r4, r2
 800b3b4:	461a      	mov	r2, r3
 800b3b6:	4b09      	ldr	r3, [pc, #36]	; (800b3dc <__assert_func+0x2c>)
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	4605      	mov	r5, r0
 800b3bc:	68d8      	ldr	r0, [r3, #12]
 800b3be:	b14c      	cbz	r4, 800b3d4 <__assert_func+0x24>
 800b3c0:	4b07      	ldr	r3, [pc, #28]	; (800b3e0 <__assert_func+0x30>)
 800b3c2:	9100      	str	r1, [sp, #0]
 800b3c4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b3c8:	4906      	ldr	r1, [pc, #24]	; (800b3e4 <__assert_func+0x34>)
 800b3ca:	462b      	mov	r3, r5
 800b3cc:	f000 fbca 	bl	800bb64 <fiprintf>
 800b3d0:	f000 fbda 	bl	800bb88 <abort>
 800b3d4:	4b04      	ldr	r3, [pc, #16]	; (800b3e8 <__assert_func+0x38>)
 800b3d6:	461c      	mov	r4, r3
 800b3d8:	e7f3      	b.n	800b3c2 <__assert_func+0x12>
 800b3da:	bf00      	nop
 800b3dc:	20000084 	.word	0x20000084
 800b3e0:	0800d12a 	.word	0x0800d12a
 800b3e4:	0800d137 	.word	0x0800d137
 800b3e8:	0800d165 	.word	0x0800d165

0800b3ec <_calloc_r>:
 800b3ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b3ee:	fba1 2402 	umull	r2, r4, r1, r2
 800b3f2:	b94c      	cbnz	r4, 800b408 <_calloc_r+0x1c>
 800b3f4:	4611      	mov	r1, r2
 800b3f6:	9201      	str	r2, [sp, #4]
 800b3f8:	f7fe f9b0 	bl	800975c <_malloc_r>
 800b3fc:	9a01      	ldr	r2, [sp, #4]
 800b3fe:	4605      	mov	r5, r0
 800b400:	b930      	cbnz	r0, 800b410 <_calloc_r+0x24>
 800b402:	4628      	mov	r0, r5
 800b404:	b003      	add	sp, #12
 800b406:	bd30      	pop	{r4, r5, pc}
 800b408:	220c      	movs	r2, #12
 800b40a:	6002      	str	r2, [r0, #0]
 800b40c:	2500      	movs	r5, #0
 800b40e:	e7f8      	b.n	800b402 <_calloc_r+0x16>
 800b410:	4621      	mov	r1, r4
 800b412:	f7fd fa30 	bl	8008876 <memset>
 800b416:	e7f4      	b.n	800b402 <_calloc_r+0x16>

0800b418 <rshift>:
 800b418:	6903      	ldr	r3, [r0, #16]
 800b41a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b41e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b422:	ea4f 1261 	mov.w	r2, r1, asr #5
 800b426:	f100 0414 	add.w	r4, r0, #20
 800b42a:	dd45      	ble.n	800b4b8 <rshift+0xa0>
 800b42c:	f011 011f 	ands.w	r1, r1, #31
 800b430:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b434:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b438:	d10c      	bne.n	800b454 <rshift+0x3c>
 800b43a:	f100 0710 	add.w	r7, r0, #16
 800b43e:	4629      	mov	r1, r5
 800b440:	42b1      	cmp	r1, r6
 800b442:	d334      	bcc.n	800b4ae <rshift+0x96>
 800b444:	1a9b      	subs	r3, r3, r2
 800b446:	009b      	lsls	r3, r3, #2
 800b448:	1eea      	subs	r2, r5, #3
 800b44a:	4296      	cmp	r6, r2
 800b44c:	bf38      	it	cc
 800b44e:	2300      	movcc	r3, #0
 800b450:	4423      	add	r3, r4
 800b452:	e015      	b.n	800b480 <rshift+0x68>
 800b454:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b458:	f1c1 0820 	rsb	r8, r1, #32
 800b45c:	40cf      	lsrs	r7, r1
 800b45e:	f105 0e04 	add.w	lr, r5, #4
 800b462:	46a1      	mov	r9, r4
 800b464:	4576      	cmp	r6, lr
 800b466:	46f4      	mov	ip, lr
 800b468:	d815      	bhi.n	800b496 <rshift+0x7e>
 800b46a:	1a9a      	subs	r2, r3, r2
 800b46c:	0092      	lsls	r2, r2, #2
 800b46e:	3a04      	subs	r2, #4
 800b470:	3501      	adds	r5, #1
 800b472:	42ae      	cmp	r6, r5
 800b474:	bf38      	it	cc
 800b476:	2200      	movcc	r2, #0
 800b478:	18a3      	adds	r3, r4, r2
 800b47a:	50a7      	str	r7, [r4, r2]
 800b47c:	b107      	cbz	r7, 800b480 <rshift+0x68>
 800b47e:	3304      	adds	r3, #4
 800b480:	1b1a      	subs	r2, r3, r4
 800b482:	42a3      	cmp	r3, r4
 800b484:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b488:	bf08      	it	eq
 800b48a:	2300      	moveq	r3, #0
 800b48c:	6102      	str	r2, [r0, #16]
 800b48e:	bf08      	it	eq
 800b490:	6143      	streq	r3, [r0, #20]
 800b492:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b496:	f8dc c000 	ldr.w	ip, [ip]
 800b49a:	fa0c fc08 	lsl.w	ip, ip, r8
 800b49e:	ea4c 0707 	orr.w	r7, ip, r7
 800b4a2:	f849 7b04 	str.w	r7, [r9], #4
 800b4a6:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b4aa:	40cf      	lsrs	r7, r1
 800b4ac:	e7da      	b.n	800b464 <rshift+0x4c>
 800b4ae:	f851 cb04 	ldr.w	ip, [r1], #4
 800b4b2:	f847 cf04 	str.w	ip, [r7, #4]!
 800b4b6:	e7c3      	b.n	800b440 <rshift+0x28>
 800b4b8:	4623      	mov	r3, r4
 800b4ba:	e7e1      	b.n	800b480 <rshift+0x68>

0800b4bc <__hexdig_fun>:
 800b4bc:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800b4c0:	2b09      	cmp	r3, #9
 800b4c2:	d802      	bhi.n	800b4ca <__hexdig_fun+0xe>
 800b4c4:	3820      	subs	r0, #32
 800b4c6:	b2c0      	uxtb	r0, r0
 800b4c8:	4770      	bx	lr
 800b4ca:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800b4ce:	2b05      	cmp	r3, #5
 800b4d0:	d801      	bhi.n	800b4d6 <__hexdig_fun+0x1a>
 800b4d2:	3847      	subs	r0, #71	; 0x47
 800b4d4:	e7f7      	b.n	800b4c6 <__hexdig_fun+0xa>
 800b4d6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800b4da:	2b05      	cmp	r3, #5
 800b4dc:	d801      	bhi.n	800b4e2 <__hexdig_fun+0x26>
 800b4de:	3827      	subs	r0, #39	; 0x27
 800b4e0:	e7f1      	b.n	800b4c6 <__hexdig_fun+0xa>
 800b4e2:	2000      	movs	r0, #0
 800b4e4:	4770      	bx	lr
	...

0800b4e8 <__gethex>:
 800b4e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4ec:	4617      	mov	r7, r2
 800b4ee:	680a      	ldr	r2, [r1, #0]
 800b4f0:	b085      	sub	sp, #20
 800b4f2:	f102 0b02 	add.w	fp, r2, #2
 800b4f6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800b4fa:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800b4fe:	4681      	mov	r9, r0
 800b500:	468a      	mov	sl, r1
 800b502:	9302      	str	r3, [sp, #8]
 800b504:	32fe      	adds	r2, #254	; 0xfe
 800b506:	eb02 030b 	add.w	r3, r2, fp
 800b50a:	46d8      	mov	r8, fp
 800b50c:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800b510:	9301      	str	r3, [sp, #4]
 800b512:	2830      	cmp	r0, #48	; 0x30
 800b514:	d0f7      	beq.n	800b506 <__gethex+0x1e>
 800b516:	f7ff ffd1 	bl	800b4bc <__hexdig_fun>
 800b51a:	4604      	mov	r4, r0
 800b51c:	2800      	cmp	r0, #0
 800b51e:	d138      	bne.n	800b592 <__gethex+0xaa>
 800b520:	49a7      	ldr	r1, [pc, #668]	; (800b7c0 <__gethex+0x2d8>)
 800b522:	2201      	movs	r2, #1
 800b524:	4640      	mov	r0, r8
 800b526:	f7ff ff09 	bl	800b33c <strncmp>
 800b52a:	4606      	mov	r6, r0
 800b52c:	2800      	cmp	r0, #0
 800b52e:	d169      	bne.n	800b604 <__gethex+0x11c>
 800b530:	f898 0001 	ldrb.w	r0, [r8, #1]
 800b534:	465d      	mov	r5, fp
 800b536:	f7ff ffc1 	bl	800b4bc <__hexdig_fun>
 800b53a:	2800      	cmp	r0, #0
 800b53c:	d064      	beq.n	800b608 <__gethex+0x120>
 800b53e:	465a      	mov	r2, fp
 800b540:	7810      	ldrb	r0, [r2, #0]
 800b542:	2830      	cmp	r0, #48	; 0x30
 800b544:	4690      	mov	r8, r2
 800b546:	f102 0201 	add.w	r2, r2, #1
 800b54a:	d0f9      	beq.n	800b540 <__gethex+0x58>
 800b54c:	f7ff ffb6 	bl	800b4bc <__hexdig_fun>
 800b550:	2301      	movs	r3, #1
 800b552:	fab0 f480 	clz	r4, r0
 800b556:	0964      	lsrs	r4, r4, #5
 800b558:	465e      	mov	r6, fp
 800b55a:	9301      	str	r3, [sp, #4]
 800b55c:	4642      	mov	r2, r8
 800b55e:	4615      	mov	r5, r2
 800b560:	3201      	adds	r2, #1
 800b562:	7828      	ldrb	r0, [r5, #0]
 800b564:	f7ff ffaa 	bl	800b4bc <__hexdig_fun>
 800b568:	2800      	cmp	r0, #0
 800b56a:	d1f8      	bne.n	800b55e <__gethex+0x76>
 800b56c:	4994      	ldr	r1, [pc, #592]	; (800b7c0 <__gethex+0x2d8>)
 800b56e:	2201      	movs	r2, #1
 800b570:	4628      	mov	r0, r5
 800b572:	f7ff fee3 	bl	800b33c <strncmp>
 800b576:	b978      	cbnz	r0, 800b598 <__gethex+0xb0>
 800b578:	b946      	cbnz	r6, 800b58c <__gethex+0xa4>
 800b57a:	1c6e      	adds	r6, r5, #1
 800b57c:	4632      	mov	r2, r6
 800b57e:	4615      	mov	r5, r2
 800b580:	3201      	adds	r2, #1
 800b582:	7828      	ldrb	r0, [r5, #0]
 800b584:	f7ff ff9a 	bl	800b4bc <__hexdig_fun>
 800b588:	2800      	cmp	r0, #0
 800b58a:	d1f8      	bne.n	800b57e <__gethex+0x96>
 800b58c:	1b73      	subs	r3, r6, r5
 800b58e:	009e      	lsls	r6, r3, #2
 800b590:	e004      	b.n	800b59c <__gethex+0xb4>
 800b592:	2400      	movs	r4, #0
 800b594:	4626      	mov	r6, r4
 800b596:	e7e1      	b.n	800b55c <__gethex+0x74>
 800b598:	2e00      	cmp	r6, #0
 800b59a:	d1f7      	bne.n	800b58c <__gethex+0xa4>
 800b59c:	782b      	ldrb	r3, [r5, #0]
 800b59e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b5a2:	2b50      	cmp	r3, #80	; 0x50
 800b5a4:	d13d      	bne.n	800b622 <__gethex+0x13a>
 800b5a6:	786b      	ldrb	r3, [r5, #1]
 800b5a8:	2b2b      	cmp	r3, #43	; 0x2b
 800b5aa:	d02f      	beq.n	800b60c <__gethex+0x124>
 800b5ac:	2b2d      	cmp	r3, #45	; 0x2d
 800b5ae:	d031      	beq.n	800b614 <__gethex+0x12c>
 800b5b0:	1c69      	adds	r1, r5, #1
 800b5b2:	f04f 0b00 	mov.w	fp, #0
 800b5b6:	7808      	ldrb	r0, [r1, #0]
 800b5b8:	f7ff ff80 	bl	800b4bc <__hexdig_fun>
 800b5bc:	1e42      	subs	r2, r0, #1
 800b5be:	b2d2      	uxtb	r2, r2
 800b5c0:	2a18      	cmp	r2, #24
 800b5c2:	d82e      	bhi.n	800b622 <__gethex+0x13a>
 800b5c4:	f1a0 0210 	sub.w	r2, r0, #16
 800b5c8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b5cc:	f7ff ff76 	bl	800b4bc <__hexdig_fun>
 800b5d0:	f100 3cff 	add.w	ip, r0, #4294967295
 800b5d4:	fa5f fc8c 	uxtb.w	ip, ip
 800b5d8:	f1bc 0f18 	cmp.w	ip, #24
 800b5dc:	d91d      	bls.n	800b61a <__gethex+0x132>
 800b5de:	f1bb 0f00 	cmp.w	fp, #0
 800b5e2:	d000      	beq.n	800b5e6 <__gethex+0xfe>
 800b5e4:	4252      	negs	r2, r2
 800b5e6:	4416      	add	r6, r2
 800b5e8:	f8ca 1000 	str.w	r1, [sl]
 800b5ec:	b1dc      	cbz	r4, 800b626 <__gethex+0x13e>
 800b5ee:	9b01      	ldr	r3, [sp, #4]
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	bf14      	ite	ne
 800b5f4:	f04f 0800 	movne.w	r8, #0
 800b5f8:	f04f 0806 	moveq.w	r8, #6
 800b5fc:	4640      	mov	r0, r8
 800b5fe:	b005      	add	sp, #20
 800b600:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b604:	4645      	mov	r5, r8
 800b606:	4626      	mov	r6, r4
 800b608:	2401      	movs	r4, #1
 800b60a:	e7c7      	b.n	800b59c <__gethex+0xb4>
 800b60c:	f04f 0b00 	mov.w	fp, #0
 800b610:	1ca9      	adds	r1, r5, #2
 800b612:	e7d0      	b.n	800b5b6 <__gethex+0xce>
 800b614:	f04f 0b01 	mov.w	fp, #1
 800b618:	e7fa      	b.n	800b610 <__gethex+0x128>
 800b61a:	230a      	movs	r3, #10
 800b61c:	fb03 0002 	mla	r0, r3, r2, r0
 800b620:	e7d0      	b.n	800b5c4 <__gethex+0xdc>
 800b622:	4629      	mov	r1, r5
 800b624:	e7e0      	b.n	800b5e8 <__gethex+0x100>
 800b626:	eba5 0308 	sub.w	r3, r5, r8
 800b62a:	3b01      	subs	r3, #1
 800b62c:	4621      	mov	r1, r4
 800b62e:	2b07      	cmp	r3, #7
 800b630:	dc0a      	bgt.n	800b648 <__gethex+0x160>
 800b632:	4648      	mov	r0, r9
 800b634:	f7fe f91e 	bl	8009874 <_Balloc>
 800b638:	4604      	mov	r4, r0
 800b63a:	b940      	cbnz	r0, 800b64e <__gethex+0x166>
 800b63c:	4b61      	ldr	r3, [pc, #388]	; (800b7c4 <__gethex+0x2dc>)
 800b63e:	4602      	mov	r2, r0
 800b640:	21e4      	movs	r1, #228	; 0xe4
 800b642:	4861      	ldr	r0, [pc, #388]	; (800b7c8 <__gethex+0x2e0>)
 800b644:	f7ff feb4 	bl	800b3b0 <__assert_func>
 800b648:	3101      	adds	r1, #1
 800b64a:	105b      	asrs	r3, r3, #1
 800b64c:	e7ef      	b.n	800b62e <__gethex+0x146>
 800b64e:	f100 0a14 	add.w	sl, r0, #20
 800b652:	2300      	movs	r3, #0
 800b654:	495a      	ldr	r1, [pc, #360]	; (800b7c0 <__gethex+0x2d8>)
 800b656:	f8cd a004 	str.w	sl, [sp, #4]
 800b65a:	469b      	mov	fp, r3
 800b65c:	45a8      	cmp	r8, r5
 800b65e:	d342      	bcc.n	800b6e6 <__gethex+0x1fe>
 800b660:	9801      	ldr	r0, [sp, #4]
 800b662:	f840 bb04 	str.w	fp, [r0], #4
 800b666:	eba0 000a 	sub.w	r0, r0, sl
 800b66a:	1080      	asrs	r0, r0, #2
 800b66c:	6120      	str	r0, [r4, #16]
 800b66e:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800b672:	4658      	mov	r0, fp
 800b674:	f7fe f9f0 	bl	8009a58 <__hi0bits>
 800b678:	683d      	ldr	r5, [r7, #0]
 800b67a:	eba8 0000 	sub.w	r0, r8, r0
 800b67e:	42a8      	cmp	r0, r5
 800b680:	dd59      	ble.n	800b736 <__gethex+0x24e>
 800b682:	eba0 0805 	sub.w	r8, r0, r5
 800b686:	4641      	mov	r1, r8
 800b688:	4620      	mov	r0, r4
 800b68a:	f7fe fd7f 	bl	800a18c <__any_on>
 800b68e:	4683      	mov	fp, r0
 800b690:	b1b8      	cbz	r0, 800b6c2 <__gethex+0x1da>
 800b692:	f108 33ff 	add.w	r3, r8, #4294967295
 800b696:	1159      	asrs	r1, r3, #5
 800b698:	f003 021f 	and.w	r2, r3, #31
 800b69c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800b6a0:	f04f 0b01 	mov.w	fp, #1
 800b6a4:	fa0b f202 	lsl.w	r2, fp, r2
 800b6a8:	420a      	tst	r2, r1
 800b6aa:	d00a      	beq.n	800b6c2 <__gethex+0x1da>
 800b6ac:	455b      	cmp	r3, fp
 800b6ae:	dd06      	ble.n	800b6be <__gethex+0x1d6>
 800b6b0:	f1a8 0102 	sub.w	r1, r8, #2
 800b6b4:	4620      	mov	r0, r4
 800b6b6:	f7fe fd69 	bl	800a18c <__any_on>
 800b6ba:	2800      	cmp	r0, #0
 800b6bc:	d138      	bne.n	800b730 <__gethex+0x248>
 800b6be:	f04f 0b02 	mov.w	fp, #2
 800b6c2:	4641      	mov	r1, r8
 800b6c4:	4620      	mov	r0, r4
 800b6c6:	f7ff fea7 	bl	800b418 <rshift>
 800b6ca:	4446      	add	r6, r8
 800b6cc:	68bb      	ldr	r3, [r7, #8]
 800b6ce:	42b3      	cmp	r3, r6
 800b6d0:	da41      	bge.n	800b756 <__gethex+0x26e>
 800b6d2:	4621      	mov	r1, r4
 800b6d4:	4648      	mov	r0, r9
 800b6d6:	f7fe f90d 	bl	80098f4 <_Bfree>
 800b6da:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b6dc:	2300      	movs	r3, #0
 800b6de:	6013      	str	r3, [r2, #0]
 800b6e0:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800b6e4:	e78a      	b.n	800b5fc <__gethex+0x114>
 800b6e6:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800b6ea:	2a2e      	cmp	r2, #46	; 0x2e
 800b6ec:	d014      	beq.n	800b718 <__gethex+0x230>
 800b6ee:	2b20      	cmp	r3, #32
 800b6f0:	d106      	bne.n	800b700 <__gethex+0x218>
 800b6f2:	9b01      	ldr	r3, [sp, #4]
 800b6f4:	f843 bb04 	str.w	fp, [r3], #4
 800b6f8:	f04f 0b00 	mov.w	fp, #0
 800b6fc:	9301      	str	r3, [sp, #4]
 800b6fe:	465b      	mov	r3, fp
 800b700:	7828      	ldrb	r0, [r5, #0]
 800b702:	9303      	str	r3, [sp, #12]
 800b704:	f7ff feda 	bl	800b4bc <__hexdig_fun>
 800b708:	9b03      	ldr	r3, [sp, #12]
 800b70a:	f000 000f 	and.w	r0, r0, #15
 800b70e:	4098      	lsls	r0, r3
 800b710:	ea4b 0b00 	orr.w	fp, fp, r0
 800b714:	3304      	adds	r3, #4
 800b716:	e7a1      	b.n	800b65c <__gethex+0x174>
 800b718:	45a8      	cmp	r8, r5
 800b71a:	d8e8      	bhi.n	800b6ee <__gethex+0x206>
 800b71c:	2201      	movs	r2, #1
 800b71e:	4628      	mov	r0, r5
 800b720:	9303      	str	r3, [sp, #12]
 800b722:	f7ff fe0b 	bl	800b33c <strncmp>
 800b726:	4926      	ldr	r1, [pc, #152]	; (800b7c0 <__gethex+0x2d8>)
 800b728:	9b03      	ldr	r3, [sp, #12]
 800b72a:	2800      	cmp	r0, #0
 800b72c:	d1df      	bne.n	800b6ee <__gethex+0x206>
 800b72e:	e795      	b.n	800b65c <__gethex+0x174>
 800b730:	f04f 0b03 	mov.w	fp, #3
 800b734:	e7c5      	b.n	800b6c2 <__gethex+0x1da>
 800b736:	da0b      	bge.n	800b750 <__gethex+0x268>
 800b738:	eba5 0800 	sub.w	r8, r5, r0
 800b73c:	4621      	mov	r1, r4
 800b73e:	4642      	mov	r2, r8
 800b740:	4648      	mov	r0, r9
 800b742:	f7fe faf1 	bl	8009d28 <__lshift>
 800b746:	eba6 0608 	sub.w	r6, r6, r8
 800b74a:	4604      	mov	r4, r0
 800b74c:	f100 0a14 	add.w	sl, r0, #20
 800b750:	f04f 0b00 	mov.w	fp, #0
 800b754:	e7ba      	b.n	800b6cc <__gethex+0x1e4>
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	42b3      	cmp	r3, r6
 800b75a:	dd73      	ble.n	800b844 <__gethex+0x35c>
 800b75c:	1b9e      	subs	r6, r3, r6
 800b75e:	42b5      	cmp	r5, r6
 800b760:	dc34      	bgt.n	800b7cc <__gethex+0x2e4>
 800b762:	68fb      	ldr	r3, [r7, #12]
 800b764:	2b02      	cmp	r3, #2
 800b766:	d023      	beq.n	800b7b0 <__gethex+0x2c8>
 800b768:	2b03      	cmp	r3, #3
 800b76a:	d025      	beq.n	800b7b8 <__gethex+0x2d0>
 800b76c:	2b01      	cmp	r3, #1
 800b76e:	d115      	bne.n	800b79c <__gethex+0x2b4>
 800b770:	42b5      	cmp	r5, r6
 800b772:	d113      	bne.n	800b79c <__gethex+0x2b4>
 800b774:	2d01      	cmp	r5, #1
 800b776:	d10b      	bne.n	800b790 <__gethex+0x2a8>
 800b778:	9a02      	ldr	r2, [sp, #8]
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	6013      	str	r3, [r2, #0]
 800b77e:	2301      	movs	r3, #1
 800b780:	6123      	str	r3, [r4, #16]
 800b782:	f8ca 3000 	str.w	r3, [sl]
 800b786:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b788:	f04f 0862 	mov.w	r8, #98	; 0x62
 800b78c:	601c      	str	r4, [r3, #0]
 800b78e:	e735      	b.n	800b5fc <__gethex+0x114>
 800b790:	1e69      	subs	r1, r5, #1
 800b792:	4620      	mov	r0, r4
 800b794:	f7fe fcfa 	bl	800a18c <__any_on>
 800b798:	2800      	cmp	r0, #0
 800b79a:	d1ed      	bne.n	800b778 <__gethex+0x290>
 800b79c:	4621      	mov	r1, r4
 800b79e:	4648      	mov	r0, r9
 800b7a0:	f7fe f8a8 	bl	80098f4 <_Bfree>
 800b7a4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b7a6:	2300      	movs	r3, #0
 800b7a8:	6013      	str	r3, [r2, #0]
 800b7aa:	f04f 0850 	mov.w	r8, #80	; 0x50
 800b7ae:	e725      	b.n	800b5fc <__gethex+0x114>
 800b7b0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d1f2      	bne.n	800b79c <__gethex+0x2b4>
 800b7b6:	e7df      	b.n	800b778 <__gethex+0x290>
 800b7b8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d1dc      	bne.n	800b778 <__gethex+0x290>
 800b7be:	e7ed      	b.n	800b79c <__gethex+0x2b4>
 800b7c0:	0800cfbc 	.word	0x0800cfbc
 800b7c4:	0800ce51 	.word	0x0800ce51
 800b7c8:	0800d166 	.word	0x0800d166
 800b7cc:	f106 38ff 	add.w	r8, r6, #4294967295
 800b7d0:	f1bb 0f00 	cmp.w	fp, #0
 800b7d4:	d133      	bne.n	800b83e <__gethex+0x356>
 800b7d6:	f1b8 0f00 	cmp.w	r8, #0
 800b7da:	d004      	beq.n	800b7e6 <__gethex+0x2fe>
 800b7dc:	4641      	mov	r1, r8
 800b7de:	4620      	mov	r0, r4
 800b7e0:	f7fe fcd4 	bl	800a18c <__any_on>
 800b7e4:	4683      	mov	fp, r0
 800b7e6:	ea4f 1268 	mov.w	r2, r8, asr #5
 800b7ea:	2301      	movs	r3, #1
 800b7ec:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800b7f0:	f008 081f 	and.w	r8, r8, #31
 800b7f4:	fa03 f308 	lsl.w	r3, r3, r8
 800b7f8:	4213      	tst	r3, r2
 800b7fa:	4631      	mov	r1, r6
 800b7fc:	4620      	mov	r0, r4
 800b7fe:	bf18      	it	ne
 800b800:	f04b 0b02 	orrne.w	fp, fp, #2
 800b804:	1bad      	subs	r5, r5, r6
 800b806:	f7ff fe07 	bl	800b418 <rshift>
 800b80a:	687e      	ldr	r6, [r7, #4]
 800b80c:	f04f 0802 	mov.w	r8, #2
 800b810:	f1bb 0f00 	cmp.w	fp, #0
 800b814:	d04a      	beq.n	800b8ac <__gethex+0x3c4>
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	2b02      	cmp	r3, #2
 800b81a:	d016      	beq.n	800b84a <__gethex+0x362>
 800b81c:	2b03      	cmp	r3, #3
 800b81e:	d018      	beq.n	800b852 <__gethex+0x36a>
 800b820:	2b01      	cmp	r3, #1
 800b822:	d109      	bne.n	800b838 <__gethex+0x350>
 800b824:	f01b 0f02 	tst.w	fp, #2
 800b828:	d006      	beq.n	800b838 <__gethex+0x350>
 800b82a:	f8da 3000 	ldr.w	r3, [sl]
 800b82e:	ea4b 0b03 	orr.w	fp, fp, r3
 800b832:	f01b 0f01 	tst.w	fp, #1
 800b836:	d10f      	bne.n	800b858 <__gethex+0x370>
 800b838:	f048 0810 	orr.w	r8, r8, #16
 800b83c:	e036      	b.n	800b8ac <__gethex+0x3c4>
 800b83e:	f04f 0b01 	mov.w	fp, #1
 800b842:	e7d0      	b.n	800b7e6 <__gethex+0x2fe>
 800b844:	f04f 0801 	mov.w	r8, #1
 800b848:	e7e2      	b.n	800b810 <__gethex+0x328>
 800b84a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b84c:	f1c3 0301 	rsb	r3, r3, #1
 800b850:	930f      	str	r3, [sp, #60]	; 0x3c
 800b852:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b854:	2b00      	cmp	r3, #0
 800b856:	d0ef      	beq.n	800b838 <__gethex+0x350>
 800b858:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b85c:	f104 0214 	add.w	r2, r4, #20
 800b860:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800b864:	9301      	str	r3, [sp, #4]
 800b866:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800b86a:	2300      	movs	r3, #0
 800b86c:	4694      	mov	ip, r2
 800b86e:	f852 1b04 	ldr.w	r1, [r2], #4
 800b872:	f1b1 3fff 	cmp.w	r1, #4294967295
 800b876:	d01e      	beq.n	800b8b6 <__gethex+0x3ce>
 800b878:	3101      	adds	r1, #1
 800b87a:	f8cc 1000 	str.w	r1, [ip]
 800b87e:	f1b8 0f02 	cmp.w	r8, #2
 800b882:	f104 0214 	add.w	r2, r4, #20
 800b886:	d13d      	bne.n	800b904 <__gethex+0x41c>
 800b888:	683b      	ldr	r3, [r7, #0]
 800b88a:	3b01      	subs	r3, #1
 800b88c:	42ab      	cmp	r3, r5
 800b88e:	d10b      	bne.n	800b8a8 <__gethex+0x3c0>
 800b890:	1169      	asrs	r1, r5, #5
 800b892:	2301      	movs	r3, #1
 800b894:	f005 051f 	and.w	r5, r5, #31
 800b898:	fa03 f505 	lsl.w	r5, r3, r5
 800b89c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b8a0:	421d      	tst	r5, r3
 800b8a2:	bf18      	it	ne
 800b8a4:	f04f 0801 	movne.w	r8, #1
 800b8a8:	f048 0820 	orr.w	r8, r8, #32
 800b8ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b8ae:	601c      	str	r4, [r3, #0]
 800b8b0:	9b02      	ldr	r3, [sp, #8]
 800b8b2:	601e      	str	r6, [r3, #0]
 800b8b4:	e6a2      	b.n	800b5fc <__gethex+0x114>
 800b8b6:	4290      	cmp	r0, r2
 800b8b8:	f842 3c04 	str.w	r3, [r2, #-4]
 800b8bc:	d8d6      	bhi.n	800b86c <__gethex+0x384>
 800b8be:	68a2      	ldr	r2, [r4, #8]
 800b8c0:	4593      	cmp	fp, r2
 800b8c2:	db17      	blt.n	800b8f4 <__gethex+0x40c>
 800b8c4:	6861      	ldr	r1, [r4, #4]
 800b8c6:	4648      	mov	r0, r9
 800b8c8:	3101      	adds	r1, #1
 800b8ca:	f7fd ffd3 	bl	8009874 <_Balloc>
 800b8ce:	4682      	mov	sl, r0
 800b8d0:	b918      	cbnz	r0, 800b8da <__gethex+0x3f2>
 800b8d2:	4b1b      	ldr	r3, [pc, #108]	; (800b940 <__gethex+0x458>)
 800b8d4:	4602      	mov	r2, r0
 800b8d6:	2184      	movs	r1, #132	; 0x84
 800b8d8:	e6b3      	b.n	800b642 <__gethex+0x15a>
 800b8da:	6922      	ldr	r2, [r4, #16]
 800b8dc:	3202      	adds	r2, #2
 800b8de:	f104 010c 	add.w	r1, r4, #12
 800b8e2:	0092      	lsls	r2, r2, #2
 800b8e4:	300c      	adds	r0, #12
 800b8e6:	f7ff fd4b 	bl	800b380 <memcpy>
 800b8ea:	4621      	mov	r1, r4
 800b8ec:	4648      	mov	r0, r9
 800b8ee:	f7fe f801 	bl	80098f4 <_Bfree>
 800b8f2:	4654      	mov	r4, sl
 800b8f4:	6922      	ldr	r2, [r4, #16]
 800b8f6:	1c51      	adds	r1, r2, #1
 800b8f8:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800b8fc:	6121      	str	r1, [r4, #16]
 800b8fe:	2101      	movs	r1, #1
 800b900:	6151      	str	r1, [r2, #20]
 800b902:	e7bc      	b.n	800b87e <__gethex+0x396>
 800b904:	6921      	ldr	r1, [r4, #16]
 800b906:	4559      	cmp	r1, fp
 800b908:	dd0b      	ble.n	800b922 <__gethex+0x43a>
 800b90a:	2101      	movs	r1, #1
 800b90c:	4620      	mov	r0, r4
 800b90e:	f7ff fd83 	bl	800b418 <rshift>
 800b912:	68bb      	ldr	r3, [r7, #8]
 800b914:	3601      	adds	r6, #1
 800b916:	42b3      	cmp	r3, r6
 800b918:	f6ff aedb 	blt.w	800b6d2 <__gethex+0x1ea>
 800b91c:	f04f 0801 	mov.w	r8, #1
 800b920:	e7c2      	b.n	800b8a8 <__gethex+0x3c0>
 800b922:	f015 051f 	ands.w	r5, r5, #31
 800b926:	d0f9      	beq.n	800b91c <__gethex+0x434>
 800b928:	9b01      	ldr	r3, [sp, #4]
 800b92a:	441a      	add	r2, r3
 800b92c:	f1c5 0520 	rsb	r5, r5, #32
 800b930:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800b934:	f7fe f890 	bl	8009a58 <__hi0bits>
 800b938:	42a8      	cmp	r0, r5
 800b93a:	dbe6      	blt.n	800b90a <__gethex+0x422>
 800b93c:	e7ee      	b.n	800b91c <__gethex+0x434>
 800b93e:	bf00      	nop
 800b940:	0800ce51 	.word	0x0800ce51

0800b944 <L_shift>:
 800b944:	f1c2 0208 	rsb	r2, r2, #8
 800b948:	0092      	lsls	r2, r2, #2
 800b94a:	b570      	push	{r4, r5, r6, lr}
 800b94c:	f1c2 0620 	rsb	r6, r2, #32
 800b950:	6843      	ldr	r3, [r0, #4]
 800b952:	6804      	ldr	r4, [r0, #0]
 800b954:	fa03 f506 	lsl.w	r5, r3, r6
 800b958:	432c      	orrs	r4, r5
 800b95a:	40d3      	lsrs	r3, r2
 800b95c:	6004      	str	r4, [r0, #0]
 800b95e:	f840 3f04 	str.w	r3, [r0, #4]!
 800b962:	4288      	cmp	r0, r1
 800b964:	d3f4      	bcc.n	800b950 <L_shift+0xc>
 800b966:	bd70      	pop	{r4, r5, r6, pc}

0800b968 <__match>:
 800b968:	b530      	push	{r4, r5, lr}
 800b96a:	6803      	ldr	r3, [r0, #0]
 800b96c:	3301      	adds	r3, #1
 800b96e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b972:	b914      	cbnz	r4, 800b97a <__match+0x12>
 800b974:	6003      	str	r3, [r0, #0]
 800b976:	2001      	movs	r0, #1
 800b978:	bd30      	pop	{r4, r5, pc}
 800b97a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b97e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800b982:	2d19      	cmp	r5, #25
 800b984:	bf98      	it	ls
 800b986:	3220      	addls	r2, #32
 800b988:	42a2      	cmp	r2, r4
 800b98a:	d0f0      	beq.n	800b96e <__match+0x6>
 800b98c:	2000      	movs	r0, #0
 800b98e:	e7f3      	b.n	800b978 <__match+0x10>

0800b990 <__hexnan>:
 800b990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b994:	680b      	ldr	r3, [r1, #0]
 800b996:	6801      	ldr	r1, [r0, #0]
 800b998:	115e      	asrs	r6, r3, #5
 800b99a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b99e:	f013 031f 	ands.w	r3, r3, #31
 800b9a2:	b087      	sub	sp, #28
 800b9a4:	bf18      	it	ne
 800b9a6:	3604      	addne	r6, #4
 800b9a8:	2500      	movs	r5, #0
 800b9aa:	1f37      	subs	r7, r6, #4
 800b9ac:	4682      	mov	sl, r0
 800b9ae:	4690      	mov	r8, r2
 800b9b0:	9301      	str	r3, [sp, #4]
 800b9b2:	f846 5c04 	str.w	r5, [r6, #-4]
 800b9b6:	46b9      	mov	r9, r7
 800b9b8:	463c      	mov	r4, r7
 800b9ba:	9502      	str	r5, [sp, #8]
 800b9bc:	46ab      	mov	fp, r5
 800b9be:	784a      	ldrb	r2, [r1, #1]
 800b9c0:	1c4b      	adds	r3, r1, #1
 800b9c2:	9303      	str	r3, [sp, #12]
 800b9c4:	b342      	cbz	r2, 800ba18 <__hexnan+0x88>
 800b9c6:	4610      	mov	r0, r2
 800b9c8:	9105      	str	r1, [sp, #20]
 800b9ca:	9204      	str	r2, [sp, #16]
 800b9cc:	f7ff fd76 	bl	800b4bc <__hexdig_fun>
 800b9d0:	2800      	cmp	r0, #0
 800b9d2:	d14f      	bne.n	800ba74 <__hexnan+0xe4>
 800b9d4:	9a04      	ldr	r2, [sp, #16]
 800b9d6:	9905      	ldr	r1, [sp, #20]
 800b9d8:	2a20      	cmp	r2, #32
 800b9da:	d818      	bhi.n	800ba0e <__hexnan+0x7e>
 800b9dc:	9b02      	ldr	r3, [sp, #8]
 800b9de:	459b      	cmp	fp, r3
 800b9e0:	dd13      	ble.n	800ba0a <__hexnan+0x7a>
 800b9e2:	454c      	cmp	r4, r9
 800b9e4:	d206      	bcs.n	800b9f4 <__hexnan+0x64>
 800b9e6:	2d07      	cmp	r5, #7
 800b9e8:	dc04      	bgt.n	800b9f4 <__hexnan+0x64>
 800b9ea:	462a      	mov	r2, r5
 800b9ec:	4649      	mov	r1, r9
 800b9ee:	4620      	mov	r0, r4
 800b9f0:	f7ff ffa8 	bl	800b944 <L_shift>
 800b9f4:	4544      	cmp	r4, r8
 800b9f6:	d950      	bls.n	800ba9a <__hexnan+0x10a>
 800b9f8:	2300      	movs	r3, #0
 800b9fa:	f1a4 0904 	sub.w	r9, r4, #4
 800b9fe:	f844 3c04 	str.w	r3, [r4, #-4]
 800ba02:	f8cd b008 	str.w	fp, [sp, #8]
 800ba06:	464c      	mov	r4, r9
 800ba08:	461d      	mov	r5, r3
 800ba0a:	9903      	ldr	r1, [sp, #12]
 800ba0c:	e7d7      	b.n	800b9be <__hexnan+0x2e>
 800ba0e:	2a29      	cmp	r2, #41	; 0x29
 800ba10:	d155      	bne.n	800babe <__hexnan+0x12e>
 800ba12:	3102      	adds	r1, #2
 800ba14:	f8ca 1000 	str.w	r1, [sl]
 800ba18:	f1bb 0f00 	cmp.w	fp, #0
 800ba1c:	d04f      	beq.n	800babe <__hexnan+0x12e>
 800ba1e:	454c      	cmp	r4, r9
 800ba20:	d206      	bcs.n	800ba30 <__hexnan+0xa0>
 800ba22:	2d07      	cmp	r5, #7
 800ba24:	dc04      	bgt.n	800ba30 <__hexnan+0xa0>
 800ba26:	462a      	mov	r2, r5
 800ba28:	4649      	mov	r1, r9
 800ba2a:	4620      	mov	r0, r4
 800ba2c:	f7ff ff8a 	bl	800b944 <L_shift>
 800ba30:	4544      	cmp	r4, r8
 800ba32:	d934      	bls.n	800ba9e <__hexnan+0x10e>
 800ba34:	f1a8 0204 	sub.w	r2, r8, #4
 800ba38:	4623      	mov	r3, r4
 800ba3a:	f853 1b04 	ldr.w	r1, [r3], #4
 800ba3e:	f842 1f04 	str.w	r1, [r2, #4]!
 800ba42:	429f      	cmp	r7, r3
 800ba44:	d2f9      	bcs.n	800ba3a <__hexnan+0xaa>
 800ba46:	1b3b      	subs	r3, r7, r4
 800ba48:	f023 0303 	bic.w	r3, r3, #3
 800ba4c:	3304      	adds	r3, #4
 800ba4e:	3e03      	subs	r6, #3
 800ba50:	3401      	adds	r4, #1
 800ba52:	42a6      	cmp	r6, r4
 800ba54:	bf38      	it	cc
 800ba56:	2304      	movcc	r3, #4
 800ba58:	4443      	add	r3, r8
 800ba5a:	2200      	movs	r2, #0
 800ba5c:	f843 2b04 	str.w	r2, [r3], #4
 800ba60:	429f      	cmp	r7, r3
 800ba62:	d2fb      	bcs.n	800ba5c <__hexnan+0xcc>
 800ba64:	683b      	ldr	r3, [r7, #0]
 800ba66:	b91b      	cbnz	r3, 800ba70 <__hexnan+0xe0>
 800ba68:	4547      	cmp	r7, r8
 800ba6a:	d126      	bne.n	800baba <__hexnan+0x12a>
 800ba6c:	2301      	movs	r3, #1
 800ba6e:	603b      	str	r3, [r7, #0]
 800ba70:	2005      	movs	r0, #5
 800ba72:	e025      	b.n	800bac0 <__hexnan+0x130>
 800ba74:	3501      	adds	r5, #1
 800ba76:	2d08      	cmp	r5, #8
 800ba78:	f10b 0b01 	add.w	fp, fp, #1
 800ba7c:	dd06      	ble.n	800ba8c <__hexnan+0xfc>
 800ba7e:	4544      	cmp	r4, r8
 800ba80:	d9c3      	bls.n	800ba0a <__hexnan+0x7a>
 800ba82:	2300      	movs	r3, #0
 800ba84:	f844 3c04 	str.w	r3, [r4, #-4]
 800ba88:	2501      	movs	r5, #1
 800ba8a:	3c04      	subs	r4, #4
 800ba8c:	6822      	ldr	r2, [r4, #0]
 800ba8e:	f000 000f 	and.w	r0, r0, #15
 800ba92:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800ba96:	6020      	str	r0, [r4, #0]
 800ba98:	e7b7      	b.n	800ba0a <__hexnan+0x7a>
 800ba9a:	2508      	movs	r5, #8
 800ba9c:	e7b5      	b.n	800ba0a <__hexnan+0x7a>
 800ba9e:	9b01      	ldr	r3, [sp, #4]
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d0df      	beq.n	800ba64 <__hexnan+0xd4>
 800baa4:	f1c3 0320 	rsb	r3, r3, #32
 800baa8:	f04f 32ff 	mov.w	r2, #4294967295
 800baac:	40da      	lsrs	r2, r3
 800baae:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800bab2:	4013      	ands	r3, r2
 800bab4:	f846 3c04 	str.w	r3, [r6, #-4]
 800bab8:	e7d4      	b.n	800ba64 <__hexnan+0xd4>
 800baba:	3f04      	subs	r7, #4
 800babc:	e7d2      	b.n	800ba64 <__hexnan+0xd4>
 800babe:	2004      	movs	r0, #4
 800bac0:	b007      	add	sp, #28
 800bac2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800bac6 <__ascii_mbtowc>:
 800bac6:	b082      	sub	sp, #8
 800bac8:	b901      	cbnz	r1, 800bacc <__ascii_mbtowc+0x6>
 800baca:	a901      	add	r1, sp, #4
 800bacc:	b142      	cbz	r2, 800bae0 <__ascii_mbtowc+0x1a>
 800bace:	b14b      	cbz	r3, 800bae4 <__ascii_mbtowc+0x1e>
 800bad0:	7813      	ldrb	r3, [r2, #0]
 800bad2:	600b      	str	r3, [r1, #0]
 800bad4:	7812      	ldrb	r2, [r2, #0]
 800bad6:	1e10      	subs	r0, r2, #0
 800bad8:	bf18      	it	ne
 800bada:	2001      	movne	r0, #1
 800badc:	b002      	add	sp, #8
 800bade:	4770      	bx	lr
 800bae0:	4610      	mov	r0, r2
 800bae2:	e7fb      	b.n	800badc <__ascii_mbtowc+0x16>
 800bae4:	f06f 0001 	mvn.w	r0, #1
 800bae8:	e7f8      	b.n	800badc <__ascii_mbtowc+0x16>

0800baea <_realloc_r>:
 800baea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800baee:	4680      	mov	r8, r0
 800baf0:	4614      	mov	r4, r2
 800baf2:	460e      	mov	r6, r1
 800baf4:	b921      	cbnz	r1, 800bb00 <_realloc_r+0x16>
 800baf6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bafa:	4611      	mov	r1, r2
 800bafc:	f7fd be2e 	b.w	800975c <_malloc_r>
 800bb00:	b92a      	cbnz	r2, 800bb0e <_realloc_r+0x24>
 800bb02:	f7fd fdb7 	bl	8009674 <_free_r>
 800bb06:	4625      	mov	r5, r4
 800bb08:	4628      	mov	r0, r5
 800bb0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bb0e:	f000 f842 	bl	800bb96 <_malloc_usable_size_r>
 800bb12:	4284      	cmp	r4, r0
 800bb14:	4607      	mov	r7, r0
 800bb16:	d802      	bhi.n	800bb1e <_realloc_r+0x34>
 800bb18:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800bb1c:	d812      	bhi.n	800bb44 <_realloc_r+0x5a>
 800bb1e:	4621      	mov	r1, r4
 800bb20:	4640      	mov	r0, r8
 800bb22:	f7fd fe1b 	bl	800975c <_malloc_r>
 800bb26:	4605      	mov	r5, r0
 800bb28:	2800      	cmp	r0, #0
 800bb2a:	d0ed      	beq.n	800bb08 <_realloc_r+0x1e>
 800bb2c:	42bc      	cmp	r4, r7
 800bb2e:	4622      	mov	r2, r4
 800bb30:	4631      	mov	r1, r6
 800bb32:	bf28      	it	cs
 800bb34:	463a      	movcs	r2, r7
 800bb36:	f7ff fc23 	bl	800b380 <memcpy>
 800bb3a:	4631      	mov	r1, r6
 800bb3c:	4640      	mov	r0, r8
 800bb3e:	f7fd fd99 	bl	8009674 <_free_r>
 800bb42:	e7e1      	b.n	800bb08 <_realloc_r+0x1e>
 800bb44:	4635      	mov	r5, r6
 800bb46:	e7df      	b.n	800bb08 <_realloc_r+0x1e>

0800bb48 <__ascii_wctomb>:
 800bb48:	b149      	cbz	r1, 800bb5e <__ascii_wctomb+0x16>
 800bb4a:	2aff      	cmp	r2, #255	; 0xff
 800bb4c:	bf85      	ittet	hi
 800bb4e:	238a      	movhi	r3, #138	; 0x8a
 800bb50:	6003      	strhi	r3, [r0, #0]
 800bb52:	700a      	strbls	r2, [r1, #0]
 800bb54:	f04f 30ff 	movhi.w	r0, #4294967295
 800bb58:	bf98      	it	ls
 800bb5a:	2001      	movls	r0, #1
 800bb5c:	4770      	bx	lr
 800bb5e:	4608      	mov	r0, r1
 800bb60:	4770      	bx	lr
	...

0800bb64 <fiprintf>:
 800bb64:	b40e      	push	{r1, r2, r3}
 800bb66:	b503      	push	{r0, r1, lr}
 800bb68:	4601      	mov	r1, r0
 800bb6a:	ab03      	add	r3, sp, #12
 800bb6c:	4805      	ldr	r0, [pc, #20]	; (800bb84 <fiprintf+0x20>)
 800bb6e:	f853 2b04 	ldr.w	r2, [r3], #4
 800bb72:	6800      	ldr	r0, [r0, #0]
 800bb74:	9301      	str	r3, [sp, #4]
 800bb76:	f000 f83f 	bl	800bbf8 <_vfiprintf_r>
 800bb7a:	b002      	add	sp, #8
 800bb7c:	f85d eb04 	ldr.w	lr, [sp], #4
 800bb80:	b003      	add	sp, #12
 800bb82:	4770      	bx	lr
 800bb84:	20000084 	.word	0x20000084

0800bb88 <abort>:
 800bb88:	b508      	push	{r3, lr}
 800bb8a:	2006      	movs	r0, #6
 800bb8c:	f000 fa0c 	bl	800bfa8 <raise>
 800bb90:	2001      	movs	r0, #1
 800bb92:	f7f6 f8a3 	bl	8001cdc <_exit>

0800bb96 <_malloc_usable_size_r>:
 800bb96:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bb9a:	1f18      	subs	r0, r3, #4
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	bfbc      	itt	lt
 800bba0:	580b      	ldrlt	r3, [r1, r0]
 800bba2:	18c0      	addlt	r0, r0, r3
 800bba4:	4770      	bx	lr

0800bba6 <__sfputc_r>:
 800bba6:	6893      	ldr	r3, [r2, #8]
 800bba8:	3b01      	subs	r3, #1
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	b410      	push	{r4}
 800bbae:	6093      	str	r3, [r2, #8]
 800bbb0:	da08      	bge.n	800bbc4 <__sfputc_r+0x1e>
 800bbb2:	6994      	ldr	r4, [r2, #24]
 800bbb4:	42a3      	cmp	r3, r4
 800bbb6:	db01      	blt.n	800bbbc <__sfputc_r+0x16>
 800bbb8:	290a      	cmp	r1, #10
 800bbba:	d103      	bne.n	800bbc4 <__sfputc_r+0x1e>
 800bbbc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bbc0:	f000 b934 	b.w	800be2c <__swbuf_r>
 800bbc4:	6813      	ldr	r3, [r2, #0]
 800bbc6:	1c58      	adds	r0, r3, #1
 800bbc8:	6010      	str	r0, [r2, #0]
 800bbca:	7019      	strb	r1, [r3, #0]
 800bbcc:	4608      	mov	r0, r1
 800bbce:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bbd2:	4770      	bx	lr

0800bbd4 <__sfputs_r>:
 800bbd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bbd6:	4606      	mov	r6, r0
 800bbd8:	460f      	mov	r7, r1
 800bbda:	4614      	mov	r4, r2
 800bbdc:	18d5      	adds	r5, r2, r3
 800bbde:	42ac      	cmp	r4, r5
 800bbe0:	d101      	bne.n	800bbe6 <__sfputs_r+0x12>
 800bbe2:	2000      	movs	r0, #0
 800bbe4:	e007      	b.n	800bbf6 <__sfputs_r+0x22>
 800bbe6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bbea:	463a      	mov	r2, r7
 800bbec:	4630      	mov	r0, r6
 800bbee:	f7ff ffda 	bl	800bba6 <__sfputc_r>
 800bbf2:	1c43      	adds	r3, r0, #1
 800bbf4:	d1f3      	bne.n	800bbde <__sfputs_r+0xa>
 800bbf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800bbf8 <_vfiprintf_r>:
 800bbf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbfc:	460d      	mov	r5, r1
 800bbfe:	b09d      	sub	sp, #116	; 0x74
 800bc00:	4614      	mov	r4, r2
 800bc02:	4698      	mov	r8, r3
 800bc04:	4606      	mov	r6, r0
 800bc06:	b118      	cbz	r0, 800bc10 <_vfiprintf_r+0x18>
 800bc08:	6a03      	ldr	r3, [r0, #32]
 800bc0a:	b90b      	cbnz	r3, 800bc10 <_vfiprintf_r+0x18>
 800bc0c:	f7fc fd66 	bl	80086dc <__sinit>
 800bc10:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bc12:	07d9      	lsls	r1, r3, #31
 800bc14:	d405      	bmi.n	800bc22 <_vfiprintf_r+0x2a>
 800bc16:	89ab      	ldrh	r3, [r5, #12]
 800bc18:	059a      	lsls	r2, r3, #22
 800bc1a:	d402      	bmi.n	800bc22 <_vfiprintf_r+0x2a>
 800bc1c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bc1e:	f7fc fea7 	bl	8008970 <__retarget_lock_acquire_recursive>
 800bc22:	89ab      	ldrh	r3, [r5, #12]
 800bc24:	071b      	lsls	r3, r3, #28
 800bc26:	d501      	bpl.n	800bc2c <_vfiprintf_r+0x34>
 800bc28:	692b      	ldr	r3, [r5, #16]
 800bc2a:	b99b      	cbnz	r3, 800bc54 <_vfiprintf_r+0x5c>
 800bc2c:	4629      	mov	r1, r5
 800bc2e:	4630      	mov	r0, r6
 800bc30:	f000 f93a 	bl	800bea8 <__swsetup_r>
 800bc34:	b170      	cbz	r0, 800bc54 <_vfiprintf_r+0x5c>
 800bc36:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bc38:	07dc      	lsls	r4, r3, #31
 800bc3a:	d504      	bpl.n	800bc46 <_vfiprintf_r+0x4e>
 800bc3c:	f04f 30ff 	mov.w	r0, #4294967295
 800bc40:	b01d      	add	sp, #116	; 0x74
 800bc42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc46:	89ab      	ldrh	r3, [r5, #12]
 800bc48:	0598      	lsls	r0, r3, #22
 800bc4a:	d4f7      	bmi.n	800bc3c <_vfiprintf_r+0x44>
 800bc4c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bc4e:	f7fc fe90 	bl	8008972 <__retarget_lock_release_recursive>
 800bc52:	e7f3      	b.n	800bc3c <_vfiprintf_r+0x44>
 800bc54:	2300      	movs	r3, #0
 800bc56:	9309      	str	r3, [sp, #36]	; 0x24
 800bc58:	2320      	movs	r3, #32
 800bc5a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bc5e:	f8cd 800c 	str.w	r8, [sp, #12]
 800bc62:	2330      	movs	r3, #48	; 0x30
 800bc64:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800be18 <_vfiprintf_r+0x220>
 800bc68:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bc6c:	f04f 0901 	mov.w	r9, #1
 800bc70:	4623      	mov	r3, r4
 800bc72:	469a      	mov	sl, r3
 800bc74:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bc78:	b10a      	cbz	r2, 800bc7e <_vfiprintf_r+0x86>
 800bc7a:	2a25      	cmp	r2, #37	; 0x25
 800bc7c:	d1f9      	bne.n	800bc72 <_vfiprintf_r+0x7a>
 800bc7e:	ebba 0b04 	subs.w	fp, sl, r4
 800bc82:	d00b      	beq.n	800bc9c <_vfiprintf_r+0xa4>
 800bc84:	465b      	mov	r3, fp
 800bc86:	4622      	mov	r2, r4
 800bc88:	4629      	mov	r1, r5
 800bc8a:	4630      	mov	r0, r6
 800bc8c:	f7ff ffa2 	bl	800bbd4 <__sfputs_r>
 800bc90:	3001      	adds	r0, #1
 800bc92:	f000 80a9 	beq.w	800bde8 <_vfiprintf_r+0x1f0>
 800bc96:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bc98:	445a      	add	r2, fp
 800bc9a:	9209      	str	r2, [sp, #36]	; 0x24
 800bc9c:	f89a 3000 	ldrb.w	r3, [sl]
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	f000 80a1 	beq.w	800bde8 <_vfiprintf_r+0x1f0>
 800bca6:	2300      	movs	r3, #0
 800bca8:	f04f 32ff 	mov.w	r2, #4294967295
 800bcac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bcb0:	f10a 0a01 	add.w	sl, sl, #1
 800bcb4:	9304      	str	r3, [sp, #16]
 800bcb6:	9307      	str	r3, [sp, #28]
 800bcb8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bcbc:	931a      	str	r3, [sp, #104]	; 0x68
 800bcbe:	4654      	mov	r4, sl
 800bcc0:	2205      	movs	r2, #5
 800bcc2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bcc6:	4854      	ldr	r0, [pc, #336]	; (800be18 <_vfiprintf_r+0x220>)
 800bcc8:	f7f4 fa82 	bl	80001d0 <memchr>
 800bccc:	9a04      	ldr	r2, [sp, #16]
 800bcce:	b9d8      	cbnz	r0, 800bd08 <_vfiprintf_r+0x110>
 800bcd0:	06d1      	lsls	r1, r2, #27
 800bcd2:	bf44      	itt	mi
 800bcd4:	2320      	movmi	r3, #32
 800bcd6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bcda:	0713      	lsls	r3, r2, #28
 800bcdc:	bf44      	itt	mi
 800bcde:	232b      	movmi	r3, #43	; 0x2b
 800bce0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bce4:	f89a 3000 	ldrb.w	r3, [sl]
 800bce8:	2b2a      	cmp	r3, #42	; 0x2a
 800bcea:	d015      	beq.n	800bd18 <_vfiprintf_r+0x120>
 800bcec:	9a07      	ldr	r2, [sp, #28]
 800bcee:	4654      	mov	r4, sl
 800bcf0:	2000      	movs	r0, #0
 800bcf2:	f04f 0c0a 	mov.w	ip, #10
 800bcf6:	4621      	mov	r1, r4
 800bcf8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bcfc:	3b30      	subs	r3, #48	; 0x30
 800bcfe:	2b09      	cmp	r3, #9
 800bd00:	d94d      	bls.n	800bd9e <_vfiprintf_r+0x1a6>
 800bd02:	b1b0      	cbz	r0, 800bd32 <_vfiprintf_r+0x13a>
 800bd04:	9207      	str	r2, [sp, #28]
 800bd06:	e014      	b.n	800bd32 <_vfiprintf_r+0x13a>
 800bd08:	eba0 0308 	sub.w	r3, r0, r8
 800bd0c:	fa09 f303 	lsl.w	r3, r9, r3
 800bd10:	4313      	orrs	r3, r2
 800bd12:	9304      	str	r3, [sp, #16]
 800bd14:	46a2      	mov	sl, r4
 800bd16:	e7d2      	b.n	800bcbe <_vfiprintf_r+0xc6>
 800bd18:	9b03      	ldr	r3, [sp, #12]
 800bd1a:	1d19      	adds	r1, r3, #4
 800bd1c:	681b      	ldr	r3, [r3, #0]
 800bd1e:	9103      	str	r1, [sp, #12]
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	bfbb      	ittet	lt
 800bd24:	425b      	neglt	r3, r3
 800bd26:	f042 0202 	orrlt.w	r2, r2, #2
 800bd2a:	9307      	strge	r3, [sp, #28]
 800bd2c:	9307      	strlt	r3, [sp, #28]
 800bd2e:	bfb8      	it	lt
 800bd30:	9204      	strlt	r2, [sp, #16]
 800bd32:	7823      	ldrb	r3, [r4, #0]
 800bd34:	2b2e      	cmp	r3, #46	; 0x2e
 800bd36:	d10c      	bne.n	800bd52 <_vfiprintf_r+0x15a>
 800bd38:	7863      	ldrb	r3, [r4, #1]
 800bd3a:	2b2a      	cmp	r3, #42	; 0x2a
 800bd3c:	d134      	bne.n	800bda8 <_vfiprintf_r+0x1b0>
 800bd3e:	9b03      	ldr	r3, [sp, #12]
 800bd40:	1d1a      	adds	r2, r3, #4
 800bd42:	681b      	ldr	r3, [r3, #0]
 800bd44:	9203      	str	r2, [sp, #12]
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	bfb8      	it	lt
 800bd4a:	f04f 33ff 	movlt.w	r3, #4294967295
 800bd4e:	3402      	adds	r4, #2
 800bd50:	9305      	str	r3, [sp, #20]
 800bd52:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800be28 <_vfiprintf_r+0x230>
 800bd56:	7821      	ldrb	r1, [r4, #0]
 800bd58:	2203      	movs	r2, #3
 800bd5a:	4650      	mov	r0, sl
 800bd5c:	f7f4 fa38 	bl	80001d0 <memchr>
 800bd60:	b138      	cbz	r0, 800bd72 <_vfiprintf_r+0x17a>
 800bd62:	9b04      	ldr	r3, [sp, #16]
 800bd64:	eba0 000a 	sub.w	r0, r0, sl
 800bd68:	2240      	movs	r2, #64	; 0x40
 800bd6a:	4082      	lsls	r2, r0
 800bd6c:	4313      	orrs	r3, r2
 800bd6e:	3401      	adds	r4, #1
 800bd70:	9304      	str	r3, [sp, #16]
 800bd72:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bd76:	4829      	ldr	r0, [pc, #164]	; (800be1c <_vfiprintf_r+0x224>)
 800bd78:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bd7c:	2206      	movs	r2, #6
 800bd7e:	f7f4 fa27 	bl	80001d0 <memchr>
 800bd82:	2800      	cmp	r0, #0
 800bd84:	d03f      	beq.n	800be06 <_vfiprintf_r+0x20e>
 800bd86:	4b26      	ldr	r3, [pc, #152]	; (800be20 <_vfiprintf_r+0x228>)
 800bd88:	bb1b      	cbnz	r3, 800bdd2 <_vfiprintf_r+0x1da>
 800bd8a:	9b03      	ldr	r3, [sp, #12]
 800bd8c:	3307      	adds	r3, #7
 800bd8e:	f023 0307 	bic.w	r3, r3, #7
 800bd92:	3308      	adds	r3, #8
 800bd94:	9303      	str	r3, [sp, #12]
 800bd96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bd98:	443b      	add	r3, r7
 800bd9a:	9309      	str	r3, [sp, #36]	; 0x24
 800bd9c:	e768      	b.n	800bc70 <_vfiprintf_r+0x78>
 800bd9e:	fb0c 3202 	mla	r2, ip, r2, r3
 800bda2:	460c      	mov	r4, r1
 800bda4:	2001      	movs	r0, #1
 800bda6:	e7a6      	b.n	800bcf6 <_vfiprintf_r+0xfe>
 800bda8:	2300      	movs	r3, #0
 800bdaa:	3401      	adds	r4, #1
 800bdac:	9305      	str	r3, [sp, #20]
 800bdae:	4619      	mov	r1, r3
 800bdb0:	f04f 0c0a 	mov.w	ip, #10
 800bdb4:	4620      	mov	r0, r4
 800bdb6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bdba:	3a30      	subs	r2, #48	; 0x30
 800bdbc:	2a09      	cmp	r2, #9
 800bdbe:	d903      	bls.n	800bdc8 <_vfiprintf_r+0x1d0>
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	d0c6      	beq.n	800bd52 <_vfiprintf_r+0x15a>
 800bdc4:	9105      	str	r1, [sp, #20]
 800bdc6:	e7c4      	b.n	800bd52 <_vfiprintf_r+0x15a>
 800bdc8:	fb0c 2101 	mla	r1, ip, r1, r2
 800bdcc:	4604      	mov	r4, r0
 800bdce:	2301      	movs	r3, #1
 800bdd0:	e7f0      	b.n	800bdb4 <_vfiprintf_r+0x1bc>
 800bdd2:	ab03      	add	r3, sp, #12
 800bdd4:	9300      	str	r3, [sp, #0]
 800bdd6:	462a      	mov	r2, r5
 800bdd8:	4b12      	ldr	r3, [pc, #72]	; (800be24 <_vfiprintf_r+0x22c>)
 800bdda:	a904      	add	r1, sp, #16
 800bddc:	4630      	mov	r0, r6
 800bdde:	f7fb fe2d 	bl	8007a3c <_printf_float>
 800bde2:	4607      	mov	r7, r0
 800bde4:	1c78      	adds	r0, r7, #1
 800bde6:	d1d6      	bne.n	800bd96 <_vfiprintf_r+0x19e>
 800bde8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bdea:	07d9      	lsls	r1, r3, #31
 800bdec:	d405      	bmi.n	800bdfa <_vfiprintf_r+0x202>
 800bdee:	89ab      	ldrh	r3, [r5, #12]
 800bdf0:	059a      	lsls	r2, r3, #22
 800bdf2:	d402      	bmi.n	800bdfa <_vfiprintf_r+0x202>
 800bdf4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bdf6:	f7fc fdbc 	bl	8008972 <__retarget_lock_release_recursive>
 800bdfa:	89ab      	ldrh	r3, [r5, #12]
 800bdfc:	065b      	lsls	r3, r3, #25
 800bdfe:	f53f af1d 	bmi.w	800bc3c <_vfiprintf_r+0x44>
 800be02:	9809      	ldr	r0, [sp, #36]	; 0x24
 800be04:	e71c      	b.n	800bc40 <_vfiprintf_r+0x48>
 800be06:	ab03      	add	r3, sp, #12
 800be08:	9300      	str	r3, [sp, #0]
 800be0a:	462a      	mov	r2, r5
 800be0c:	4b05      	ldr	r3, [pc, #20]	; (800be24 <_vfiprintf_r+0x22c>)
 800be0e:	a904      	add	r1, sp, #16
 800be10:	4630      	mov	r0, r6
 800be12:	f7fc f8b7 	bl	8007f84 <_printf_i>
 800be16:	e7e4      	b.n	800bde2 <_vfiprintf_r+0x1ea>
 800be18:	0800d111 	.word	0x0800d111
 800be1c:	0800d11b 	.word	0x0800d11b
 800be20:	08007a3d 	.word	0x08007a3d
 800be24:	0800bbd5 	.word	0x0800bbd5
 800be28:	0800d117 	.word	0x0800d117

0800be2c <__swbuf_r>:
 800be2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be2e:	460e      	mov	r6, r1
 800be30:	4614      	mov	r4, r2
 800be32:	4605      	mov	r5, r0
 800be34:	b118      	cbz	r0, 800be3e <__swbuf_r+0x12>
 800be36:	6a03      	ldr	r3, [r0, #32]
 800be38:	b90b      	cbnz	r3, 800be3e <__swbuf_r+0x12>
 800be3a:	f7fc fc4f 	bl	80086dc <__sinit>
 800be3e:	69a3      	ldr	r3, [r4, #24]
 800be40:	60a3      	str	r3, [r4, #8]
 800be42:	89a3      	ldrh	r3, [r4, #12]
 800be44:	071a      	lsls	r2, r3, #28
 800be46:	d525      	bpl.n	800be94 <__swbuf_r+0x68>
 800be48:	6923      	ldr	r3, [r4, #16]
 800be4a:	b31b      	cbz	r3, 800be94 <__swbuf_r+0x68>
 800be4c:	6823      	ldr	r3, [r4, #0]
 800be4e:	6922      	ldr	r2, [r4, #16]
 800be50:	1a98      	subs	r0, r3, r2
 800be52:	6963      	ldr	r3, [r4, #20]
 800be54:	b2f6      	uxtb	r6, r6
 800be56:	4283      	cmp	r3, r0
 800be58:	4637      	mov	r7, r6
 800be5a:	dc04      	bgt.n	800be66 <__swbuf_r+0x3a>
 800be5c:	4621      	mov	r1, r4
 800be5e:	4628      	mov	r0, r5
 800be60:	f7ff fa2a 	bl	800b2b8 <_fflush_r>
 800be64:	b9e0      	cbnz	r0, 800bea0 <__swbuf_r+0x74>
 800be66:	68a3      	ldr	r3, [r4, #8]
 800be68:	3b01      	subs	r3, #1
 800be6a:	60a3      	str	r3, [r4, #8]
 800be6c:	6823      	ldr	r3, [r4, #0]
 800be6e:	1c5a      	adds	r2, r3, #1
 800be70:	6022      	str	r2, [r4, #0]
 800be72:	701e      	strb	r6, [r3, #0]
 800be74:	6962      	ldr	r2, [r4, #20]
 800be76:	1c43      	adds	r3, r0, #1
 800be78:	429a      	cmp	r2, r3
 800be7a:	d004      	beq.n	800be86 <__swbuf_r+0x5a>
 800be7c:	89a3      	ldrh	r3, [r4, #12]
 800be7e:	07db      	lsls	r3, r3, #31
 800be80:	d506      	bpl.n	800be90 <__swbuf_r+0x64>
 800be82:	2e0a      	cmp	r6, #10
 800be84:	d104      	bne.n	800be90 <__swbuf_r+0x64>
 800be86:	4621      	mov	r1, r4
 800be88:	4628      	mov	r0, r5
 800be8a:	f7ff fa15 	bl	800b2b8 <_fflush_r>
 800be8e:	b938      	cbnz	r0, 800bea0 <__swbuf_r+0x74>
 800be90:	4638      	mov	r0, r7
 800be92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800be94:	4621      	mov	r1, r4
 800be96:	4628      	mov	r0, r5
 800be98:	f000 f806 	bl	800bea8 <__swsetup_r>
 800be9c:	2800      	cmp	r0, #0
 800be9e:	d0d5      	beq.n	800be4c <__swbuf_r+0x20>
 800bea0:	f04f 37ff 	mov.w	r7, #4294967295
 800bea4:	e7f4      	b.n	800be90 <__swbuf_r+0x64>
	...

0800bea8 <__swsetup_r>:
 800bea8:	b538      	push	{r3, r4, r5, lr}
 800beaa:	4b2a      	ldr	r3, [pc, #168]	; (800bf54 <__swsetup_r+0xac>)
 800beac:	4605      	mov	r5, r0
 800beae:	6818      	ldr	r0, [r3, #0]
 800beb0:	460c      	mov	r4, r1
 800beb2:	b118      	cbz	r0, 800bebc <__swsetup_r+0x14>
 800beb4:	6a03      	ldr	r3, [r0, #32]
 800beb6:	b90b      	cbnz	r3, 800bebc <__swsetup_r+0x14>
 800beb8:	f7fc fc10 	bl	80086dc <__sinit>
 800bebc:	89a3      	ldrh	r3, [r4, #12]
 800bebe:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bec2:	0718      	lsls	r0, r3, #28
 800bec4:	d422      	bmi.n	800bf0c <__swsetup_r+0x64>
 800bec6:	06d9      	lsls	r1, r3, #27
 800bec8:	d407      	bmi.n	800beda <__swsetup_r+0x32>
 800beca:	2309      	movs	r3, #9
 800becc:	602b      	str	r3, [r5, #0]
 800bece:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800bed2:	81a3      	strh	r3, [r4, #12]
 800bed4:	f04f 30ff 	mov.w	r0, #4294967295
 800bed8:	e034      	b.n	800bf44 <__swsetup_r+0x9c>
 800beda:	0758      	lsls	r0, r3, #29
 800bedc:	d512      	bpl.n	800bf04 <__swsetup_r+0x5c>
 800bede:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bee0:	b141      	cbz	r1, 800bef4 <__swsetup_r+0x4c>
 800bee2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bee6:	4299      	cmp	r1, r3
 800bee8:	d002      	beq.n	800bef0 <__swsetup_r+0x48>
 800beea:	4628      	mov	r0, r5
 800beec:	f7fd fbc2 	bl	8009674 <_free_r>
 800bef0:	2300      	movs	r3, #0
 800bef2:	6363      	str	r3, [r4, #52]	; 0x34
 800bef4:	89a3      	ldrh	r3, [r4, #12]
 800bef6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800befa:	81a3      	strh	r3, [r4, #12]
 800befc:	2300      	movs	r3, #0
 800befe:	6063      	str	r3, [r4, #4]
 800bf00:	6923      	ldr	r3, [r4, #16]
 800bf02:	6023      	str	r3, [r4, #0]
 800bf04:	89a3      	ldrh	r3, [r4, #12]
 800bf06:	f043 0308 	orr.w	r3, r3, #8
 800bf0a:	81a3      	strh	r3, [r4, #12]
 800bf0c:	6923      	ldr	r3, [r4, #16]
 800bf0e:	b94b      	cbnz	r3, 800bf24 <__swsetup_r+0x7c>
 800bf10:	89a3      	ldrh	r3, [r4, #12]
 800bf12:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bf16:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bf1a:	d003      	beq.n	800bf24 <__swsetup_r+0x7c>
 800bf1c:	4621      	mov	r1, r4
 800bf1e:	4628      	mov	r0, r5
 800bf20:	f000 f884 	bl	800c02c <__smakebuf_r>
 800bf24:	89a0      	ldrh	r0, [r4, #12]
 800bf26:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bf2a:	f010 0301 	ands.w	r3, r0, #1
 800bf2e:	d00a      	beq.n	800bf46 <__swsetup_r+0x9e>
 800bf30:	2300      	movs	r3, #0
 800bf32:	60a3      	str	r3, [r4, #8]
 800bf34:	6963      	ldr	r3, [r4, #20]
 800bf36:	425b      	negs	r3, r3
 800bf38:	61a3      	str	r3, [r4, #24]
 800bf3a:	6923      	ldr	r3, [r4, #16]
 800bf3c:	b943      	cbnz	r3, 800bf50 <__swsetup_r+0xa8>
 800bf3e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800bf42:	d1c4      	bne.n	800bece <__swsetup_r+0x26>
 800bf44:	bd38      	pop	{r3, r4, r5, pc}
 800bf46:	0781      	lsls	r1, r0, #30
 800bf48:	bf58      	it	pl
 800bf4a:	6963      	ldrpl	r3, [r4, #20]
 800bf4c:	60a3      	str	r3, [r4, #8]
 800bf4e:	e7f4      	b.n	800bf3a <__swsetup_r+0x92>
 800bf50:	2000      	movs	r0, #0
 800bf52:	e7f7      	b.n	800bf44 <__swsetup_r+0x9c>
 800bf54:	20000084 	.word	0x20000084

0800bf58 <_raise_r>:
 800bf58:	291f      	cmp	r1, #31
 800bf5a:	b538      	push	{r3, r4, r5, lr}
 800bf5c:	4604      	mov	r4, r0
 800bf5e:	460d      	mov	r5, r1
 800bf60:	d904      	bls.n	800bf6c <_raise_r+0x14>
 800bf62:	2316      	movs	r3, #22
 800bf64:	6003      	str	r3, [r0, #0]
 800bf66:	f04f 30ff 	mov.w	r0, #4294967295
 800bf6a:	bd38      	pop	{r3, r4, r5, pc}
 800bf6c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800bf6e:	b112      	cbz	r2, 800bf76 <_raise_r+0x1e>
 800bf70:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bf74:	b94b      	cbnz	r3, 800bf8a <_raise_r+0x32>
 800bf76:	4620      	mov	r0, r4
 800bf78:	f000 f830 	bl	800bfdc <_getpid_r>
 800bf7c:	462a      	mov	r2, r5
 800bf7e:	4601      	mov	r1, r0
 800bf80:	4620      	mov	r0, r4
 800bf82:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bf86:	f000 b817 	b.w	800bfb8 <_kill_r>
 800bf8a:	2b01      	cmp	r3, #1
 800bf8c:	d00a      	beq.n	800bfa4 <_raise_r+0x4c>
 800bf8e:	1c59      	adds	r1, r3, #1
 800bf90:	d103      	bne.n	800bf9a <_raise_r+0x42>
 800bf92:	2316      	movs	r3, #22
 800bf94:	6003      	str	r3, [r0, #0]
 800bf96:	2001      	movs	r0, #1
 800bf98:	e7e7      	b.n	800bf6a <_raise_r+0x12>
 800bf9a:	2400      	movs	r4, #0
 800bf9c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800bfa0:	4628      	mov	r0, r5
 800bfa2:	4798      	blx	r3
 800bfa4:	2000      	movs	r0, #0
 800bfa6:	e7e0      	b.n	800bf6a <_raise_r+0x12>

0800bfa8 <raise>:
 800bfa8:	4b02      	ldr	r3, [pc, #8]	; (800bfb4 <raise+0xc>)
 800bfaa:	4601      	mov	r1, r0
 800bfac:	6818      	ldr	r0, [r3, #0]
 800bfae:	f7ff bfd3 	b.w	800bf58 <_raise_r>
 800bfb2:	bf00      	nop
 800bfb4:	20000084 	.word	0x20000084

0800bfb8 <_kill_r>:
 800bfb8:	b538      	push	{r3, r4, r5, lr}
 800bfba:	4d07      	ldr	r5, [pc, #28]	; (800bfd8 <_kill_r+0x20>)
 800bfbc:	2300      	movs	r3, #0
 800bfbe:	4604      	mov	r4, r0
 800bfc0:	4608      	mov	r0, r1
 800bfc2:	4611      	mov	r1, r2
 800bfc4:	602b      	str	r3, [r5, #0]
 800bfc6:	f7f5 fe79 	bl	8001cbc <_kill>
 800bfca:	1c43      	adds	r3, r0, #1
 800bfcc:	d102      	bne.n	800bfd4 <_kill_r+0x1c>
 800bfce:	682b      	ldr	r3, [r5, #0]
 800bfd0:	b103      	cbz	r3, 800bfd4 <_kill_r+0x1c>
 800bfd2:	6023      	str	r3, [r4, #0]
 800bfd4:	bd38      	pop	{r3, r4, r5, pc}
 800bfd6:	bf00      	nop
 800bfd8:	200006c4 	.word	0x200006c4

0800bfdc <_getpid_r>:
 800bfdc:	f7f5 be66 	b.w	8001cac <_getpid>

0800bfe0 <__swhatbuf_r>:
 800bfe0:	b570      	push	{r4, r5, r6, lr}
 800bfe2:	460c      	mov	r4, r1
 800bfe4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bfe8:	2900      	cmp	r1, #0
 800bfea:	b096      	sub	sp, #88	; 0x58
 800bfec:	4615      	mov	r5, r2
 800bfee:	461e      	mov	r6, r3
 800bff0:	da0d      	bge.n	800c00e <__swhatbuf_r+0x2e>
 800bff2:	89a3      	ldrh	r3, [r4, #12]
 800bff4:	f013 0f80 	tst.w	r3, #128	; 0x80
 800bff8:	f04f 0100 	mov.w	r1, #0
 800bffc:	bf0c      	ite	eq
 800bffe:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800c002:	2340      	movne	r3, #64	; 0x40
 800c004:	2000      	movs	r0, #0
 800c006:	6031      	str	r1, [r6, #0]
 800c008:	602b      	str	r3, [r5, #0]
 800c00a:	b016      	add	sp, #88	; 0x58
 800c00c:	bd70      	pop	{r4, r5, r6, pc}
 800c00e:	466a      	mov	r2, sp
 800c010:	f000 f848 	bl	800c0a4 <_fstat_r>
 800c014:	2800      	cmp	r0, #0
 800c016:	dbec      	blt.n	800bff2 <__swhatbuf_r+0x12>
 800c018:	9901      	ldr	r1, [sp, #4]
 800c01a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800c01e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800c022:	4259      	negs	r1, r3
 800c024:	4159      	adcs	r1, r3
 800c026:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c02a:	e7eb      	b.n	800c004 <__swhatbuf_r+0x24>

0800c02c <__smakebuf_r>:
 800c02c:	898b      	ldrh	r3, [r1, #12]
 800c02e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c030:	079d      	lsls	r5, r3, #30
 800c032:	4606      	mov	r6, r0
 800c034:	460c      	mov	r4, r1
 800c036:	d507      	bpl.n	800c048 <__smakebuf_r+0x1c>
 800c038:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c03c:	6023      	str	r3, [r4, #0]
 800c03e:	6123      	str	r3, [r4, #16]
 800c040:	2301      	movs	r3, #1
 800c042:	6163      	str	r3, [r4, #20]
 800c044:	b002      	add	sp, #8
 800c046:	bd70      	pop	{r4, r5, r6, pc}
 800c048:	ab01      	add	r3, sp, #4
 800c04a:	466a      	mov	r2, sp
 800c04c:	f7ff ffc8 	bl	800bfe0 <__swhatbuf_r>
 800c050:	9900      	ldr	r1, [sp, #0]
 800c052:	4605      	mov	r5, r0
 800c054:	4630      	mov	r0, r6
 800c056:	f7fd fb81 	bl	800975c <_malloc_r>
 800c05a:	b948      	cbnz	r0, 800c070 <__smakebuf_r+0x44>
 800c05c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c060:	059a      	lsls	r2, r3, #22
 800c062:	d4ef      	bmi.n	800c044 <__smakebuf_r+0x18>
 800c064:	f023 0303 	bic.w	r3, r3, #3
 800c068:	f043 0302 	orr.w	r3, r3, #2
 800c06c:	81a3      	strh	r3, [r4, #12]
 800c06e:	e7e3      	b.n	800c038 <__smakebuf_r+0xc>
 800c070:	89a3      	ldrh	r3, [r4, #12]
 800c072:	6020      	str	r0, [r4, #0]
 800c074:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c078:	81a3      	strh	r3, [r4, #12]
 800c07a:	9b00      	ldr	r3, [sp, #0]
 800c07c:	6163      	str	r3, [r4, #20]
 800c07e:	9b01      	ldr	r3, [sp, #4]
 800c080:	6120      	str	r0, [r4, #16]
 800c082:	b15b      	cbz	r3, 800c09c <__smakebuf_r+0x70>
 800c084:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c088:	4630      	mov	r0, r6
 800c08a:	f000 f81d 	bl	800c0c8 <_isatty_r>
 800c08e:	b128      	cbz	r0, 800c09c <__smakebuf_r+0x70>
 800c090:	89a3      	ldrh	r3, [r4, #12]
 800c092:	f023 0303 	bic.w	r3, r3, #3
 800c096:	f043 0301 	orr.w	r3, r3, #1
 800c09a:	81a3      	strh	r3, [r4, #12]
 800c09c:	89a3      	ldrh	r3, [r4, #12]
 800c09e:	431d      	orrs	r5, r3
 800c0a0:	81a5      	strh	r5, [r4, #12]
 800c0a2:	e7cf      	b.n	800c044 <__smakebuf_r+0x18>

0800c0a4 <_fstat_r>:
 800c0a4:	b538      	push	{r3, r4, r5, lr}
 800c0a6:	4d07      	ldr	r5, [pc, #28]	; (800c0c4 <_fstat_r+0x20>)
 800c0a8:	2300      	movs	r3, #0
 800c0aa:	4604      	mov	r4, r0
 800c0ac:	4608      	mov	r0, r1
 800c0ae:	4611      	mov	r1, r2
 800c0b0:	602b      	str	r3, [r5, #0]
 800c0b2:	f7f5 fe62 	bl	8001d7a <_fstat>
 800c0b6:	1c43      	adds	r3, r0, #1
 800c0b8:	d102      	bne.n	800c0c0 <_fstat_r+0x1c>
 800c0ba:	682b      	ldr	r3, [r5, #0]
 800c0bc:	b103      	cbz	r3, 800c0c0 <_fstat_r+0x1c>
 800c0be:	6023      	str	r3, [r4, #0]
 800c0c0:	bd38      	pop	{r3, r4, r5, pc}
 800c0c2:	bf00      	nop
 800c0c4:	200006c4 	.word	0x200006c4

0800c0c8 <_isatty_r>:
 800c0c8:	b538      	push	{r3, r4, r5, lr}
 800c0ca:	4d06      	ldr	r5, [pc, #24]	; (800c0e4 <_isatty_r+0x1c>)
 800c0cc:	2300      	movs	r3, #0
 800c0ce:	4604      	mov	r4, r0
 800c0d0:	4608      	mov	r0, r1
 800c0d2:	602b      	str	r3, [r5, #0]
 800c0d4:	f7f5 fe61 	bl	8001d9a <_isatty>
 800c0d8:	1c43      	adds	r3, r0, #1
 800c0da:	d102      	bne.n	800c0e2 <_isatty_r+0x1a>
 800c0dc:	682b      	ldr	r3, [r5, #0]
 800c0de:	b103      	cbz	r3, 800c0e2 <_isatty_r+0x1a>
 800c0e0:	6023      	str	r3, [r4, #0]
 800c0e2:	bd38      	pop	{r3, r4, r5, pc}
 800c0e4:	200006c4 	.word	0x200006c4

0800c0e8 <_init>:
 800c0e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c0ea:	bf00      	nop
 800c0ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c0ee:	bc08      	pop	{r3}
 800c0f0:	469e      	mov	lr, r3
 800c0f2:	4770      	bx	lr

0800c0f4 <_fini>:
 800c0f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c0f6:	bf00      	nop
 800c0f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c0fa:	bc08      	pop	{r3}
 800c0fc:	469e      	mov	lr, r3
 800c0fe:	4770      	bx	lr
